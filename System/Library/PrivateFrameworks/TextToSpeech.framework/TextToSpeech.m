BOOL sub_1A3942AD8(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;

  v3 = a2;
  objc_msgSend_voiceId(v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_hasPrefix_(v8, v9, (uint64_t)CFSTR("com.apple.maui.voice"), v10, v11))
  {
    v12 = TTSIsInternalBuild();

    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  else
  {

  }
  if ((objc_msgSend_memoryPeakExceedsActiveJetsamLimit(v3, v13, v14, v15, v16) & 1) == 0)
  {
    if (objc_msgSend_type(v3, v17, v18, v19, v20) == 4 && objc_msgSend_footprint(v3, v21, v22, v23, v24) == 2)
    {
      v25 = *(void **)(a1 + 32);
      objc_msgSend_speechVoice(v3, v21, v22, v23, v24);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = (void *)objc_msgSend_copy(v26, v27, v28, v29, v30);
      objc_msgSend_addObject_(v25, v32, (uint64_t)v31, v33, v34);

    }
    else if (objc_msgSend_type(v3, v21, v22, v23, v24) != 7)
    {
      v39 = objc_msgSend_type(v3, v35, v36, v37, v38) != 6;
      goto LABEL_11;
    }
  }
LABEL_10:
  v39 = 0;
LABEL_11:

  return v39;
}

void sub_1A3942BC8(uint64_t a1)
{
  void *v2;
  TTSSynthesisProviderVoiceManager *v3;
  void *v4;

  v2 = (void *)qword_1ED1B5C90;
  if (!qword_1ED1B5C90)
  {
    v3 = objc_alloc_init(TTSSynthesisProviderVoiceManager);
    v4 = (void *)qword_1ED1B5C90;
    qword_1ED1B5C90 = (uint64_t)v3;

    v2 = (void *)qword_1ED1B5C90;
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v2);
}

void sub_1A3942E0C(uint64_t a1)
{
  void *v2;
  TTSAXResourceManager *v3;
  void *v4;

  v2 = (void *)qword_1ED1B5C98;
  if (!qword_1ED1B5C98)
  {
    v3 = objc_alloc_init(TTSAXResourceManager);
    v4 = (void *)qword_1ED1B5C98;
    qword_1ED1B5C98 = (uint64_t)v3;

    v2 = (void *)qword_1ED1B5C98;
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v2);
}

void sub_1A3942E5C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  if ((byte_1ED1B5BC0 & 1) == 0)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], a2, a3, a4, a5);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend_copy(v11, v5, v6, v7, v8);
    v10 = (void *)qword_1ED1B5BB8;
    qword_1ED1B5BB8 = v9;

    byte_1ED1B5BC0 = 1;
  }
}

void sub_1A3942FB0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  objc_msgSend_stringByAppendingFormat_(CFSTR("com.apple.ttsbundle.siri"), a2, (uint64_t)CFSTR("_male"), a4, a5);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)qword_1ED1B5B98;
  qword_1ED1B5B98 = v5;

  objc_msgSend_stringByAppendingFormat_(CFSTR("com.apple.ttsbundle.siri"), v7, (uint64_t)CFSTR("_female"), v8, v9);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)qword_1ED1B5B90;
  qword_1ED1B5B90 = v10;

  objc_msgSend_stringByAppendingFormat_(CFSTR("com.apple.ttsbundle.gryphon"), v12, (uint64_t)CFSTR("_male"), v13, v14);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)qword_1ED1B5BA8;
  qword_1ED1B5BA8 = v15;

  objc_msgSend_stringByAppendingFormat_(CFSTR("com.apple.ttsbundle.gryphon"), v17, (uint64_t)CFSTR("_female"), v18, v19);
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = (void *)qword_1ED1B5BA0;
  qword_1ED1B5BA0 = v20;

}

void sub_1A3943180()
{
  id v0;
  const char *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  dispatch_queue_t v6;
  void *v7;
  NSObject *v8;

  v0 = objc_alloc(MEMORY[0x1E0CB3748]);
  v2 = objc_msgSend_initWithKeyOptions_valueOptions_capacity_(v0, v1, 0, 5, 1);
  v3 = (void *)qword_1ED1B5BC8;
  qword_1ED1B5BC8 = v2;

  v4 = objc_opt_new();
  v5 = (void *)qword_1ED1B5BD0;
  qword_1ED1B5BD0 = v4;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v8 = objc_claimAutoreleasedReturnValue();
  v6 = dispatch_queue_create("language-creation", v8);
  v7 = (void *)qword_1ED1B5BD8;
  qword_1ED1B5BD8 = (uint64_t)v6;

}

void sub_1A3943758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

id TTSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences()
{
  dispatch_semaphore_t v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD v12[4];
  NSObject *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;

  v15 = 0;
  v16 = &v15;
  v17 = 0x3032000000;
  v18 = sub_1A3966C2C;
  v19 = sub_1A3966C3C;
  v20 = 0;
  v0 = dispatch_semaphore_create(0);
  objc_msgSend_shared(_TtC12TextToSpeech13VoiceResolver, v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1A3966C44;
  v12[3] = &unk_1E4A9FF20;
  v14 = &v15;
  v6 = v0;
  v13 = v6;
  objc_msgSend_currentSystemLocaleIdentifierWithCompletionHandler_(v5, v7, (uint64_t)v12, v8, v9);

  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  v10 = (id)v16[5];

  _Block_object_dispose(&v15, 8);
  return v10;
}

void sub_1A3943B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A39449C8(_Unwind_Exception *exception_object, int a2)
{
  id v2;
  NSObject *v3;

  if (a2 == 1)
  {
    v2 = objc_begin_catch(exception_object);
    AXTTSLogResourceManager();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1A3AB1D9C();

    objc_end_catch();
    JUMPOUT(0x1A3944984);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A3945028(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1A3945170(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  v4 = *(void **)(a1 + 32);
  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a2;
  v11 = objc_msgSend_count(a3, v7, v8, v9, v10);
  objc_msgSend_numberWithUnsignedInteger_(v5, v12, v11, v13, v14);
  v18 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendFormat_(v4, v15, (uint64_t)CFSTR("%@=%@ "), v16, v17, v6, v18);

}

void sub_1A394574C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A39458B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3945CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1A3945CFC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v6 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend_synthesizerBundleIdentifier(a1, a2, a3, a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_identifier(a1, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v6, v13, (uint64_t)CFSTR("%@.%@"), v14, v15, v7, v12);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

uint64_t AXAVVoiceQualityFromTTSSpeechVoice(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int canBeDownloaded;
  uint64_t v28;
  uint64_t v29;

  v1 = a1;
  objc_msgSend_synthesisProviderVoice(v1, v2, v3, v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  if (!v6)
    goto LABEL_5;
  v11 = (void *)v6;
  objc_msgSend_synthesisProviderVoice(v1, v7, v8, v9, v10);
  v12 = objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
LABEL_8:

    goto LABEL_9;
  }
  v17 = (void *)v12;
  objc_msgSend_synthesisProviderVoice(v1, v13, v14, v15, v16);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isFirstParty(v18, v19, v20, v21, v22) & 1) == 0)
  {

    goto LABEL_8;
  }
  canBeDownloaded = objc_msgSend_canBeDownloaded(v1, v23, v24, v25, v26);

  if (!canBeDownloaded)
  {
LABEL_9:
    v29 = 1;
    goto LABEL_10;
  }
LABEL_5:
  v28 = objc_msgSend_footprint(v1, v7, v8, v9, v10);
  if ((unint64_t)(v28 - 1) > 4)
    goto LABEL_9;
  v29 = qword_1A3ABF5C8[v28 - 1];
LABEL_10:

  return v29;
}

__CFString *TTSStringForSpeechGender(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E4AA1930[a1];
}

id sub_1A3945EF4(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  void *v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  void *v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  const char *v178;
  uint64_t v179;
  void *v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  void *v185;
  const char *v186;
  uint64_t v187;
  void *v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  void *v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  id v198;
  void *v200;
  _DWORD v201[5];
  objc_super v202;
  _QWORD v203[2];
  _QWORD v204[2];

  v204[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v202.receiver = a1;
  v202.super_class = (Class)&off_1EE6F7E68;
  v5 = objc_msgSendSuper2(&v202, sel_init);
  if (v5)
  {
    v6 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v7, v6, (uint64_t)CFSTR("name"), v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v5, v10, (uint64_t)v9, v11, v12);

    v13 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v14, v13, (uint64_t)CFSTR("identifier"), v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setIdentifier_(v5, v17, (uint64_t)v16, v18, v19);

    v20 = (void *)MEMORY[0x1E0C99E60];
    v21 = objc_opt_class();
    v22 = objc_opt_class();
    objc_msgSend_setWithObjects_(v20, v23, v21, v24, v25, v22, 0);
    v200 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_decodeObjectOfClasses_forKey_(v4, v26, (uint64_t)v200, (uint64_t)CFSTR("supportedLanguages"), v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSupportedLanguages_(v5, v29, (uint64_t)v28, v30, v31);

    objc_msgSend_decodeObjectOfClasses_forKey_(v4, v32, (uint64_t)v200, (uint64_t)CFSTR("primaryLanguages"), v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPrimaryLanguages_(v5, v35, (uint64_t)v34, v36, v37);

    v38 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v39, v38, (uint64_t)CFSTR("voiceSize"), v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = objc_msgSend_longLongValue(v41, v42, v43, v44, v45);
    objc_msgSend_setVoiceSize_(v5, v47, v46, v48, v49);

    v50 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v51, v50, (uint64_t)CFSTR("version"), v52);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setVersion_(v5, v54, (uint64_t)v53, v55, v56);

    v57 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v58, v57, (uint64_t)CFSTR("gender"), v59);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = objc_msgSend_integerValue(v60, v61, v62, v63, v64);
    objc_msgSend_setGender_(v5, v66, v65, v67, v68);

    v69 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v70, v69, (uint64_t)CFSTR("age"), v71);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    v77 = objc_msgSend_integerValue(v72, v73, v74, v75, v76);
    objc_msgSend_setAge_(v5, v78, v77, v79, v80);

    v81 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v82, v81, (uint64_t)CFSTR("auDescType"), v83);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v72) = objc_msgSend_intValue(v84, v85, v86, v87, v88);

    v89 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v90, v89, (uint64_t)CFSTR("auDescSubType"), v91);
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v84) = objc_msgSend_intValue(v92, v93, v94, v95, v96);

    v97 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v98, v97, (uint64_t)CFSTR("auDescManufacturer"), v99);
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    v105 = objc_msgSend_intValue(v100, v101, v102, v103, v104);

    v106 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v107, v106, (uint64_t)CFSTR("auDescFlags"), v108);
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    v114 = objc_msgSend_unsignedIntValue(v109, v110, v111, v112, v113);

    v115 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v116, v115, (uint64_t)CFSTR("auDescFlagsMask"), v117);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    v123 = objc_msgSend_unsignedIntValue(v118, v119, v120, v121, v122);

    v201[0] = (_DWORD)v72;
    v201[1] = (_DWORD)v84;
    v201[2] = v105;
    v201[3] = v114;
    v201[4] = v123;
    objc_msgSend_setAuComponentDesc_(v5, v124, (uint64_t)v201, v125, v126);
    v127 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v128, v127, (uint64_t)CFSTR("manufacturerName"), v129);
    v130 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setManufacturerName_(v5, v131, (uint64_t)v130, v132, v133);

    v134 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v135, v134, (uint64_t)CFSTR("synthesizerBundleIdentifier"), v136);
    v137 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSynthesizerBundleIdentifier_(v5, v138, (uint64_t)v137, v139, v140);

    v141 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v142, v141, (uint64_t)CFSTR("isFirstParty"), v143);
    v144 = (void *)objc_claimAutoreleasedReturnValue();
    v149 = objc_msgSend_BOOLValue(v144, v145, v146, v147, v148);
    objc_msgSend_setIsFirstParty_(v5, v150, v149, v151, v152);

    v153 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v154, v153, (uint64_t)CFSTR("isPersonalVoice"), v155);
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    v161 = objc_msgSend_BOOLValue(v156, v157, v158, v159, v160);
    objc_msgSend_setIsPersonalVoice_(v5, v162, v161, v163, v164);

    v165 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v166, v165, (uint64_t)CFSTR("hasPerVoiceSettings"), v167);
    v168 = (void *)objc_claimAutoreleasedReturnValue();
    v173 = objc_msgSend_BOOLValue(v168, v169, v170, v171, v172);
    objc_msgSend_setHasPerVoiceSettings_(v5, v174, v173, v175, v176);

    v177 = (void *)MEMORY[0x1E0C99E60];
    v204[0] = objc_opt_class();
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v178, (uint64_t)v204, 1, v179);
    v180 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setWithArray_(v177, v181, (uint64_t)v180, v182, v183);
    v184 = (void *)objc_claimAutoreleasedReturnValue();
    v185 = (void *)MEMORY[0x1E0C99E60];
    v203[0] = objc_opt_class();
    v203[1] = objc_opt_class();
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v186, (uint64_t)v203, 2, v187);
    v188 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setWithArray_(v185, v189, (uint64_t)v188, v190, v191);
    v192 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_(v4, v193, (uint64_t)v184, (uint64_t)v192, (uint64_t)CFSTR("extraAttributes"));
    v194 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setExtraAttributes_(v5, v195, (uint64_t)v194, v196, v197);

    v198 = v5;
  }

  return v5;
}

void *sub_1A3946C18(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t isFirstParty;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t isPersonalVoice;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t hasPerVoiceSettings;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  id v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  uint64_t v194;
  void *v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v200;
  int v201;
  __int128 v202;
  int v203;

  v5 = (void *)objc_opt_class();
  v9 = (void *)objc_msgSend_allocWithZone_(v5, v6, a3, v7, v8);
  v14 = (void *)objc_msgSend_init(v9, v10, v11, v12, v13);
  objc_msgSend_name(a1, v15, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = (void *)objc_msgSend_copy(v19, v20, v21, v22, v23);
  objc_msgSend_setName_(v14, v25, (uint64_t)v24, v26, v27);

  objc_msgSend_identifier(a1, v28, v29, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = (void *)objc_msgSend_copy(v32, v33, v34, v35, v36);
  objc_msgSend_setIdentifier_(v14, v38, (uint64_t)v37, v39, v40);

  objc_msgSend_supportedLanguages(a1, v41, v42, v43, v44);
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  if (v45)
  {
    v50 = objc_alloc(MEMORY[0x1E0C99D20]);
    objc_msgSend_supportedLanguages(a1, v51, v52, v53, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v58 = (void *)objc_msgSend_initWithArray_copyItems_(v50, v56, (uint64_t)v55, 1, v57);
    objc_msgSend_setSupportedLanguages_(v14, v59, (uint64_t)v58, v60, v61);

  }
  objc_msgSend_primaryLanguages(a1, v46, v47, v48, v49);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = (void *)objc_msgSend_copy(v62, v63, v64, v65, v66);
  objc_msgSend_setPrimaryLanguages_(v14, v68, (uint64_t)v67, v69, v70);

  objc_msgSend_primaryLanguages(a1, v71, v72, v73, v74);
  v75 = (void *)objc_claimAutoreleasedReturnValue();

  if (v75)
  {
    v80 = objc_alloc(MEMORY[0x1E0C99D20]);
    objc_msgSend_primaryLanguages(a1, v81, v82, v83, v84);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    v88 = (void *)objc_msgSend_initWithArray_copyItems_(v80, v86, (uint64_t)v85, 1, v87);
    objc_msgSend_setPrimaryLanguages_(v14, v89, (uint64_t)v88, v90, v91);

  }
  v92 = objc_msgSend_voiceSize(a1, v76, v77, v78, v79);
  objc_msgSend_setVoiceSize_(v14, v93, v92, v94, v95);
  objc_msgSend_version(a1, v96, v97, v98, v99);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  v105 = (void *)objc_msgSend_copy(v100, v101, v102, v103, v104);
  objc_msgSend_setVersion_(v14, v106, (uint64_t)v105, v107, v108);

  v113 = objc_msgSend_gender(a1, v109, v110, v111, v112);
  objc_msgSend_setGender_(v14, v114, v113, v115, v116);
  v121 = objc_msgSend_age(a1, v117, v118, v119, v120);
  objc_msgSend_setAge_(v14, v122, v121, v123, v124);
  objc_msgSend_auComponentDesc(a1, v125, v126, v127, v128);
  v200 = v202;
  v201 = v203;
  objc_msgSend_setAuComponentDesc_(v14, v129, (uint64_t)&v200, v130, v131);
  objc_msgSend_manufacturerName(a1, v132, v133, v134, v135);
  v136 = (void *)objc_claimAutoreleasedReturnValue();
  v141 = (void *)objc_msgSend_copy(v136, v137, v138, v139, v140);
  objc_msgSend_setManufacturerName_(v14, v142, (uint64_t)v141, v143, v144);

  objc_msgSend_synthesizerBundleIdentifier(a1, v145, v146, v147, v148);
  v149 = (void *)objc_claimAutoreleasedReturnValue();
  v154 = (void *)objc_msgSend_copy(v149, v150, v151, v152, v153);
  objc_msgSend_setSynthesizerBundleIdentifier_(v14, v155, (uint64_t)v154, v156, v157);

  isFirstParty = objc_msgSend_isFirstParty(a1, v158, v159, v160, v161);
  objc_msgSend_setIsFirstParty_(v14, v163, isFirstParty, v164, v165);
  isPersonalVoice = objc_msgSend_isPersonalVoice(a1, v166, v167, v168, v169);
  objc_msgSend_setIsPersonalVoice_(v14, v171, isPersonalVoice, v172, v173);
  hasPerVoiceSettings = objc_msgSend_hasPerVoiceSettings(a1, v174, v175, v176, v177);
  objc_msgSend_setHasPerVoiceSettings_(v14, v179, hasPerVoiceSettings, v180, v181);
  objc_msgSend_extraAttributes(a1, v182, v183, v184, v185);
  v186 = (void *)objc_claimAutoreleasedReturnValue();

  if (v186)
  {
    v187 = objc_alloc(MEMORY[0x1E0C99D80]);
    objc_msgSend_extraAttributes(a1, v188, v189, v190, v191);
    v192 = (void *)objc_claimAutoreleasedReturnValue();
    v195 = (void *)objc_msgSend_initWithDictionary_copyItems_(v187, v193, (uint64_t)v192, 1, v194);
    objc_msgSend_setExtraAttributes_(v14, v196, (uint64_t)v195, v197, v198);

  }
  return v14;
}

void sub_1A3946F2C(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D56F3, a3, (void *)1);
}

void sub_1A3946F3C(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D56F2, a3, (void *)1);
}

void sub_1A3946F4C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D56EF, v6, (void *)1);

}

void sub_1A3946FA0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D56F1, v6, (void *)1);

}

void sub_1A3946FF4(void *a1, const char *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], a2, *a3, a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D56E8, v7, (void *)1);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v8, a3[1], v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D56E9, v11, (void *)1);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v12, a3[2], v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D56EA, v15, (void *)1);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v16, a3[3], v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D56EB, v19, (void *)1);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v20, a3[4], v21, v22);
  v23 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D56EC, v23, (void *)1);

}

void sub_1A3947118(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D56ED, a3, (void *)1);
}

void sub_1A3947128(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D56EE, a3, (void *)1);
}

id sub_1A3947138(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D56EE);
}

id sub_1A3947144(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D56F2);
}

id sub_1A3947150(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D56F3);
}

void sub_1A394715C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D56F0, v6, (void *)1);

}

void sub_1A39471B0(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D56F4, a3, (void *)1);
}

uint64_t sub_1A39471C0(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_getAssociatedObject(a1, &unk_1EE6D56F0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

uint64_t sub_1A39471FC(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_getAssociatedObject(a1, &unk_1EE6D56EF);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

id sub_1A3947238(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D56ED);
}

uint64_t sub_1A3947244(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_getAssociatedObject(a1, &unk_1EE6D56F1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

id sub_1A3947280(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D56F4);
}

void sub_1A394728C(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  objc_getAssociatedObject(a1, &unk_1EE6D56E8);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)a2 = objc_msgSend_intValue(v4, v5, v6, v7, v8);

  objc_getAssociatedObject(a1, &unk_1EE6D56E9);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(a2 + 4) = objc_msgSend_intValue(v9, v10, v11, v12, v13);

  objc_getAssociatedObject(a1, &unk_1EE6D56EA);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(a2 + 8) = objc_msgSend_intValue(v14, v15, v16, v17, v18);

  objc_getAssociatedObject(a1, &unk_1EE6D56EB);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(a2 + 12) = objc_msgSend_unsignedIntValue(v19, v20, v21, v22, v23);

  objc_getAssociatedObject(a1, &unk_1EE6D56EC);
  v28 = (id)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(a2 + 16) = objc_msgSend_unsignedIntValue(v28, v24, v25, v26, v27);

}

uint64_t TTSIsBaseSystem()
{
  return 0;
}

uint64_t TTSVoiceTypeForResourceType(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = 6;
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 5:
    case 7:
    case 8:
    case 9:
      result = 1;
      break;
    case 3:
      v4 = 5;
      if (a2 == 7)
        v4 = 7;
      if (a2 == 4)
        result = 4;
      else
        result = v4;
      break;
    case 6:
      result = 3;
      break;
    case 10:
      result = 2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t _BuiltInVoiceNameForLanguage(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_objectForKey_(&unk_1E4ABCA08, a2, a1, a4, a5);
}

void *sub_1A3947778(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  objc_super v38;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v38.receiver = a1;
  v38.super_class = (Class)&off_1EE6F7E68;
  v14 = objc_msgSendSuper2(&v38, sel_init);
  v18 = v14;
  if (v14)
  {
    objc_msgSend_setName_(v14, v15, (uint64_t)v10, v16, v17);
    objc_msgSend_setIdentifier_(v18, v19, (uint64_t)v11, v20, v21);
    objc_msgSend_setSupportedLanguages_(v18, v22, (uint64_t)v13, v23, v24);
    objc_msgSend_setPrimaryLanguages_(v18, v25, (uint64_t)v12, v26, v27);
    objc_msgSend_setAge_(v18, v28, 0, v29, v30);
    objc_msgSend_setGender_(v18, v31, 0, v32, v33);
    objc_msgSend_setVoiceSize_(v18, v34, 0, v35, v36);
  }

  return v18;
}

void sub_1A3947918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3947B70(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  id v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t j;
  void *v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  id v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _QWORD v89[4];
  id v90;
  _BYTE v91[128];
  _BYTE v92[128];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  objc_msgSend_allValues(*(void **)(*(_QWORD *)(a1 + 32) + 24), a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_valueForKeyPath_(v6, v7, (uint64_t)CFSTR("@unionOfArrays.self"), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v89[0] = MEMORY[0x1E0C809B0];
  v89[1] = 3221225472;
  v89[2] = sub_1A3942AD8;
  v89[3] = &unk_1E4AA0980;
  v16 = v15;
  v90 = v16;
  objc_msgSend_ax_filteredArrayUsingBlock_(v10, v17, (uint64_t)v89, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (*(_BYTE *)(a1 + 48))
  {
    objc_msgSend_ax_filteredArrayUsingBlock_(v20, v21, (uint64_t)&unk_1E4AA09A0, v23, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v20 = (void *)v25;
  }
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v21, v22, v23, v24);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v27 = v20;
  v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v85, (uint64_t)v92, 16);
  if (v29)
  {
    v34 = v29;
    v35 = *(_QWORD *)v86;
    do
    {
      for (i = 0; i != v34; ++i)
      {
        if (*(_QWORD *)v86 != v35)
          objc_enumerationMutation(v27);
        v37 = *(void **)(*((_QWORD *)&v85 + 1) + 8 * i);
        objc_msgSend_speechVoice(v37, v30, v31, v32, v33);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = (void *)objc_msgSend_copy(v38, v39, v40, v41, v42);
        objc_msgSend_voiceId(v37, v44, v45, v46, v47);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKey_(v26, v49, (uint64_t)v43, (uint64_t)v48, v50);

      }
      v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v30, (uint64_t)&v85, (uint64_t)v92, 16);
    }
    while (v34);
  }

  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v51 = v16;
  v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v52, (uint64_t)&v81, (uint64_t)v91, 16);
  if (v53)
  {
    v58 = v53;
    v59 = *(_QWORD *)v82;
    do
    {
      for (j = 0; j != v58; ++j)
      {
        if (*(_QWORD *)v82 != v59)
          objc_enumerationMutation(v51);
        v61 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * j);
        objc_msgSend_identifier(v61, v54, v55, v56, v57, (_QWORD)v81);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKey_(v26, v63, (uint64_t)v62, v64, v65);
        v66 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v66)
        {
          objc_msgSend_identifier(v61, v54, v55, v56, v57);
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKey_(v26, v68, (uint64_t)v61, (uint64_t)v67, v69);

        }
      }
      v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v54, (uint64_t)&v81, (uint64_t)v91, 16);
    }
    while (v58);
  }

  v70 = objc_alloc(MEMORY[0x1E0C99D20]);
  objc_msgSend_allValues(v26, v71, v72, v73, v74);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v78 = objc_msgSend_initWithArray_copyItems_(v70, v76, (uint64_t)v75, 1, v77);
  v79 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v80 = *(void **)(v79 + 40);
  *(_QWORD *)(v79 + 40) = v78;

}

CFPropertyListRef TTSPreferencesCopyValueForKey(const __CFString *a1)
{
  return CFPreferencesCopyAppValue(a1, CFSTR("com.apple.SpeakSelection"));
}

uint64_t sub_1A3948620()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  byte_1ED1B5C88 = result;
  return result;
}

void sub_1A3948644()
{
  TTSAXResourceMigrationUtilities *v0;
  void *v1;

  v0 = objc_alloc_init(TTSAXResourceMigrationUtilities);
  v1 = (void *)qword_1ED1B5CA0;
  qword_1ED1B5CA0 = (uint64_t)v0;

}

void sub_1A394866C()
{
  TTSLocaleUtilities *v0;
  void *v1;

  v0 = objc_alloc_init(TTSLocaleUtilities);
  v1 = (void *)qword_1ED1B5CA8;
  qword_1ED1B5CA8 = (uint64_t)v0;

}

uint64_t TTSIsInternalBuild()
{
  if (qword_1ED1B5C78 != -1)
    dispatch_once(&qword_1ED1B5C78, &unk_1E4AA1778);
  return byte_1ED1B5C88;
}

uint64_t sub_1A39488A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_currentLanguageCode(TTSSpeechManager, a2, a3, a4, a5);
}

void sub_1A3948A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3948CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1A3948D2C()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1 = (void *)qword_1EE6D55C0;
  qword_1EE6D55C0 = (uint64_t)v0;

  dword_1EE6D55D0 = 0;
}

uint64_t sub_1A3948D60(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1A3948D70(uint64_t a1)
{

}

void sub_1A3948D78(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  objc_msgSend_objectForKey_((void *)qword_1EE6D55C0, a2, *(_QWORD *)(a1 + 32), a4, a5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

uint64_t sub_1A3948DB8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_setObject_forKey_((void *)qword_1EE6D55C0, a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(_QWORD *)(a1 + 32), a5);
}

void sub_1A3949008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A39492F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A39493FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;

  objc_msgSend__initializeRules(*(void **)(a1 + 32), a2, a3, a4, a5);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)qword_1EE6D55D8;
  qword_1EE6D55D8 = v5;

}

uint64_t sub_1A3949430()
{
  return 1;
}

void sub_1A3949504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1A3949514(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;

  v5 = a4;
  v6 = *(void **)(a1 + 32);
  objc_msgSend_objectAtIndexedSubscript_(v5, v7, 0, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v5, v11, 0, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_length(v14, v15, v16, v17, v18);
  objc_msgSend_firstMatchInString_options_range_(v6, v20, (uint64_t)v10, 0, 0, v19);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
    v26 = objc_msgSend_range(v21, v22, v23, v24, v25) != 0x7FFFFFFFFFFFFFFFLL;
  else
    v26 = 0;

  return v26;
}

void sub_1A39495C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A39496F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_1A394970C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;

  v5 = a4;
  v6 = *(void **)(a1 + 32);
  objc_msgSend_objectAtIndexedSubscript_(v5, v7, 0, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v5, v11, 0, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_length(v14, v15, v16, v17, v18);
  objc_msgSend_firstMatchInString_options_range_(v6, v20, (uint64_t)v10, 0, 0, v19);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  v22 = *(void **)(a1 + 40);
  objc_msgSend_objectAtIndexedSubscript_(v5, v23, 1, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v5, v27, 1, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend_length(v30, v31, v32, v33, v34);
  objc_msgSend_firstMatchInString_options_range_(v22, v36, (uint64_t)v26, 0, 0, v35);
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
  {
    v46 = 0;
    if (objc_msgSend_range(v21, v38, v39, v40, v41) != 0x7FFFFFFFFFFFFFFFLL && v37)
      v46 = objc_msgSend_range(v37, v42, v43, v44, v45) != 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v46 = 0;
  }

  return v46;
}

void sub_1A3949838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A394998C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_1A39499A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;

  v5 = a4;
  v6 = *(void **)(a1 + 32);
  objc_msgSend_objectAtIndexedSubscript_(v5, v7, 1, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v5, v11, 1, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_length(v14, v15, v16, v17, v18);
  objc_msgSend_firstMatchInString_options_range_(v6, v20, (uint64_t)v10, 0, 0, v19);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  v22 = *(void **)(a1 + 40);
  objc_msgSend_objectAtIndexedSubscript_(v5, v23, 2, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v5, v27, 2, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend_length(v30, v31, v32, v33, v34);
  objc_msgSend_firstMatchInString_options_range_(v22, v36, (uint64_t)v26, 0, 0, v35);
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
  {
    v46 = 0;
    if (objc_msgSend_range(v21, v38, v39, v40, v41) != 0x7FFFFFFFFFFFFFFFLL && v37)
      v46 = objc_msgSend_range(v37, v42, v43, v44, v45) != 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v46 = 0;
  }

  return v46;
}

void sub_1A3949AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3949C00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1A3949C10(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;

  v5 = a4;
  v6 = *(void **)(a1 + 32);
  objc_msgSend_objectAtIndexedSubscript_(v5, v7, 3, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v5, v11, 3, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_length(v14, v15, v16, v17, v18);
  objc_msgSend_firstMatchInString_options_range_(v6, v20, (uint64_t)v10, 0, 0, v19);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
    v26 = objc_msgSend_range(v21, v22, v23, v24, v25) != 0x7FFFFFFFFFFFFFFFLL;
  else
    v26 = 0;

  return v26;
}

void sub_1A3949CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3949DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1A3949DD4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  objc_msgSend_objectAtIndexedSubscript_(v3, v5, 0, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v3, v9, 0, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend_length(v12, v13, v14, v15, v16);
  objc_msgSend_firstMatchInString_options_range_(v4, v18, (uint64_t)v8, 0, 0, v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (v19)
    v24 = objc_msgSend_range(v19, v20, v21, v22, v23) != 0x7FFFFFFFFFFFFFFFLL;
  else
    v24 = 0;

  return v24;
}

void sub_1A3949E88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3949FB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1A3949FCC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL8 v44;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  objc_msgSend_objectAtIndexedSubscript_(v3, v5, 0, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v3, v9, 0, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend_length(v12, v13, v14, v15, v16);
  objc_msgSend_firstMatchInString_options_range_(v4, v18, (uint64_t)v8, 0, 0, v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = *(void **)(a1 + 40);
  objc_msgSend_objectAtIndexedSubscript_(v3, v21, 1, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v3, v25, 1, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend_length(v28, v29, v30, v31, v32);
  objc_msgSend_firstMatchInString_options_range_(v20, v34, (uint64_t)v24, 0, 0, v33);
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  if (v19)
  {
    v44 = 0;
    if (objc_msgSend_range(v19, v36, v37, v38, v39) != 0x7FFFFFFFFFFFFFFFLL && v35)
      v44 = objc_msgSend_range(v35, v40, v41, v42, v43) != 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v44 = 0;
  }

  return v44;
}

void sub_1A394A0F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A394BD08(_Unwind_Exception *a1)
{
  unint64_t v1;

  STACK[0x438] = v1;

  _Unwind_Resume(a1);
}

id sub_1A394C5FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_ruleWithHeterogeniousArray_(TTSApplebetMapperRule, a2, (uint64_t)a2, a4, a5);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1A394CB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1A394D14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void *ausdk::ComponentBase::InitializationMutex(ausdk::ComponentBase *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_1EE6D5628);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EE6D5628))
  {
    MEMORY[0x1A8596BBC](&unk_1EE6D55E8);
    __cxa_guard_release(&qword_1EE6D5628);
  }
  return &unk_1EE6D55E8;
}

void sub_1A394D2B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EE6D5628);
  _Unwind_Resume(a1);
}

ausdk::ComponentBase *ausdk::ComponentBase::ComponentBase(ausdk::ComponentBase *this, OpaqueAudioComponentInstance *a2)
{
  _BYTE v4[20];

  *(_QWORD *)this = &unk_1E4A9C998;
  *((_QWORD *)this + 1) = a2;
  ausdk::ComponentBase::GetComponentDescription((AudioComponentInstance *)this, (uint64_t)v4);
  return this;
}

{
  _BYTE v4[20];

  *(_QWORD *)this = &unk_1E4A9C998;
  *((_QWORD *)this + 1) = a2;
  ausdk::ComponentBase::GetComponentDescription((AudioComponentInstance *)this, (uint64_t)v4);
  return this;
}

double ausdk::ComponentBase::GetComponentDescription@<D0>(AudioComponentInstance *this@<X0>, uint64_t a2@<X8>)
{
  OpaqueAudioComponent *Component;
  double result;
  AudioComponentDescription outDesc;

  memset(&outDesc, 0, sizeof(outDesc));
  Component = AudioComponentInstanceGetComponent(this[1]);
  if (Component && !AudioComponentGetDescription(Component, &outDesc))
  {
    result = *(double *)&outDesc.componentType;
    *(AudioComponentDescription *)a2 = outDesc;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t ausdk::ComponentBase::DoPostConstructor(ausdk::ComponentBase *this)
{
  (*(void (**)(ausdk::ComponentBase *))(*(_QWORD *)this + 32))(this);
  return (*(uint64_t (**)(ausdk::ComponentBase *))(*(_QWORD *)this + 16))(this);
}

uint64_t ausdk::ComponentBase::DoPreDestructor(ausdk::ComponentBase *this)
{
  (*(void (**)(ausdk::ComponentBase *))(*(_QWORD *)this + 24))(this);
  return (*(uint64_t (**)(ausdk::ComponentBase *))(*(_QWORD *)this + 40))(this);
}

uint64_t ausdk::ComponentBase::AP_Open(ausdk::ComponentBase *this, void *a2, OpaqueAudioComponentInstance *a3)
{
  uint64_t v5;

  ausdk::ComponentBase::InitializationMutex(this);
  std::recursive_mutex::lock(&stru_1EE6D55E8);
  v5 = (*((uint64_t (**)(char *, void *))this + 4))((char *)this + 64, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  std::recursive_mutex::unlock(&stru_1EE6D55E8);
  return 0;
}

void sub_1A394D490(void *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;
  int v5;

  switch(a2)
  {
    case 5:
      v4 = __cxa_begin_catch(a1);
      goto LABEL_3;
    case 4:
      __cxa_begin_catch(a1);
      __cxa_end_catch();
      v5 = -108;
      break;
    case 3:
      v5 = *(_DWORD *)__cxa_begin_catch(a1);
      goto LABEL_4;
    default:
      v4 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
LABEL_3:
        v5 = v4[4];
LABEL_4:
        __cxa_end_catch();
        break;
      }
      __cxa_end_catch();
      v5 = -1;
      break;
  }
  if (v2)
  {
    if (v5)
      MEMORY[0x1A8596C28](v2, 0x1080C4018D86D6ALL);
  }
  JUMPOUT(0x1A394D480);
}

uint64_t ausdk::ComponentBase::AP_Close(ausdk::ComponentBase *this, void *a2)
{
  char *v3;

  v3 = (char *)this + 64;
  (*(void (**)(char *, void *))(*((_QWORD *)this + 8) + 24))((char *)this + 64, a2);
  (*(void (**)(char *))(*(_QWORD *)v3 + 40))(v3);
  (*((void (**)(char *))this + 5))(v3);
  free(this);
  return 0;
}

void sub_1A394D5F4()
{
  JUMPOUT(0x1A8596C28);
}

void *sub_1A394D618(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  objc_super v22;

  v22.receiver = a1;
  v22.super_class = (Class)&off_1EE6F6780;
  v10 = objc_msgSendSuper2(&v22, sel_init);
  v14 = v10;
  if (v10)
  {
    objc_msgSend_setMark_(v10, v11, a3, v12, v13);
    objc_msgSend_setTextRange_(v14, v15, a4, a5, v16);
    objc_msgSend_setByteSampleOffset_(v14, v17, a6, v18, v19);
    v20 = v14;
  }

  return v14;
}

void *sub_1A394D6B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  objc_super v20;

  v20.receiver = a1;
  v20.super_class = (Class)&off_1EE6F6780;
  v8 = objc_msgSendSuper2(&v20, sel_init);
  v11 = v8;
  if (v8)
  {
    objc_msgSend_setTextRange_(v8, v9, a3, a4, v10);
    objc_msgSend_setMark_(v11, v12, 1, v13, v14);
    objc_msgSend_setByteSampleOffset_(v11, v15, a5, v16, v17);
    v18 = v11;
  }

  return v11;
}

void *sub_1A394D73C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  objc_super v20;

  v20.receiver = a1;
  v20.super_class = (Class)&off_1EE6F6780;
  v8 = objc_msgSendSuper2(&v20, sel_init);
  v11 = v8;
  if (v8)
  {
    objc_msgSend_setTextRange_(v8, v9, a3, a4, v10);
    objc_msgSend_setMark_(v11, v12, 2, v13, v14);
    objc_msgSend_setByteSampleOffset_(v11, v15, a5, v16, v17);
    v18 = v11;
  }

  return v11;
}

void *sub_1A394D7C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  objc_super v20;

  v20.receiver = a1;
  v20.super_class = (Class)&off_1EE6F6780;
  v8 = objc_msgSendSuper2(&v20, sel_init);
  v11 = v8;
  if (v8)
  {
    objc_msgSend_setTextRange_(v8, v9, a3, a4, v10);
    objc_msgSend_setMark_(v11, v12, 3, v13, v14);
    objc_msgSend_setByteSampleOffset_(v11, v15, a5, v16, v17);
    v18 = v11;
  }

  return v11;
}

void *sub_1A394D854(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  objc_super v20;

  v6 = a3;
  v20.receiver = a1;
  v20.super_class = (Class)&off_1EE6F6780;
  v7 = objc_msgSendSuper2(&v20, sel_init);
  v11 = v7;
  if (v7)
  {
    objc_msgSend_setMark_(v7, v8, 0, v9, v10);
    objc_msgSend_setPhoneme_(v11, v12, (uint64_t)v6, v13, v14);
    objc_msgSend_setByteSampleOffset_(v11, v15, a4, v16, v17);
    v18 = v11;
  }

  return v11;
}

void *sub_1A394D8E4(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  objc_super v20;

  v6 = a3;
  v20.receiver = a1;
  v20.super_class = (Class)&off_1EE6F6780;
  v7 = objc_msgSendSuper2(&v20, sel_init);
  v11 = v7;
  if (v7)
  {
    objc_msgSend_setMark_(v7, v8, 4, v9, v10);
    objc_msgSend_setBookmarkName_(v11, v12, (uint64_t)v6, v13, v14);
    objc_msgSend_setByteSampleOffset_(v11, v15, a4, v16, v17);
    v18 = v11;
  }

  return v11;
}

void sub_1A394D974(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  id v65;

  v4 = a3;
  objc_msgSend_bookmarkName(a1, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v10, (uint64_t)v9, (uint64_t)CFSTR("bookmarkName"), v11);

  objc_msgSend_phoneme(a1, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v17, (uint64_t)v16, (uint64_t)CFSTR("phoneme"), v18);

  v19 = (void *)MEMORY[0x1E0CB37E8];
  v24 = objc_msgSend_mark(a1, v20, v21, v22, v23);
  objc_msgSend_numberWithInteger_(v19, v25, v24, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v29, (uint64_t)v28, (uint64_t)CFSTR("mark"), v30);

  v31 = (void *)MEMORY[0x1E0CB37E8];
  v36 = objc_msgSend_byteSampleOffset(a1, v32, v33, v34, v35);
  objc_msgSend_numberWithUnsignedInteger_(v31, v37, v36, v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v41, (uint64_t)v40, (uint64_t)CFSTR("byteSampleOffset"), v42);

  v43 = (void *)MEMORY[0x1E0CB37E8];
  v48 = objc_msgSend_textRange(a1, v44, v45, v46, v47);
  objc_msgSend_numberWithUnsignedInteger_(v43, v49, v48, v50, v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v53, (uint64_t)v52, (uint64_t)CFSTR("textRange_location"), v54);

  v55 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_textRange(a1, v56, v57, v58, v59);
  objc_msgSend_numberWithUnsignedInteger_(v55, v60, (uint64_t)v60, v61, v62);
  v65 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v63, (uint64_t)v65, (uint64_t)CFSTR("textRange_length"), v64);

}

id sub_1A394DAE0(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  id v64;
  objc_super v66;

  v4 = a3;
  v66.receiver = a1;
  v66.super_class = (Class)&off_1EE6F6780;
  v5 = objc_msgSendSuper2(&v66, sel_init);
  if (v5)
  {
    v6 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v7, v6, (uint64_t)CFSTR("bookmarkName"), v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBookmarkName_(v5, v10, (uint64_t)v9, v11, v12);

    v13 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v14, v13, (uint64_t)CFSTR("phoneme"), v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPhoneme_(v5, v17, (uint64_t)v16, v18, v19);

    v20 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v21, v20, (uint64_t)CFSTR("mark"), v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend_longValue(v23, v24, v25, v26, v27);
    objc_msgSend_setMark_(v5, v29, v28, v30, v31);

    v32 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v33, v32, (uint64_t)CFSTR("byteSampleOffset"), v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = objc_msgSend_unsignedIntValue(v35, v36, v37, v38, v39);
    objc_msgSend_setByteSampleOffset_(v5, v41, v40, v42, v43);

    v44 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v45, v44, (uint64_t)CFSTR("textRange_location"), v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = objc_msgSend_unsignedIntValue(v47, v48, v49, v50, v51);

    v53 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v54, v53, (uint64_t)CFSTR("textRange_length"), v55);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = objc_msgSend_unsignedIntValue(v56, v57, v58, v59, v60);

    objc_msgSend_setTextRange_(v5, v62, v52, v61, v63);
    v64 = v5;
  }

  return v5;
}

CFErrorRef TTSErrorCreate(const __CFAllocator *a1, const __CFString *a2, CFIndex a3, void *a4)
{
  void *v4;
  void *userInfoValues;
  void *userInfoKeys[2];

  userInfoKeys[1] = *(void **)MEMORY[0x1E0C80C00];
  v4 = (void *)*MEMORY[0x1E0C9AFB0];
  userInfoValues = a4;
  userInfoKeys[0] = v4;
  return CFErrorCreateWithUserInfoKeysAndValues(a1, a2, a3, (const void *const *)userInfoKeys, (const void *const *)&userInfoValues, a4 != 0);
}

void sub_1A394E6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

float DFT_split_180_execute(vDSP_DFT_SetupStruct *__Setup, float32x2_t *a2, float32x2_t *a3, float *a4, float *a5, vDSP_DFT_Direction a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,uint64_t a45,uint64_t a46)
{
  unint64_t v47;
  float *v48;
  float *v49;
  float32x2_t *v50;
  const float *v51;
  unint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t *v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t *v71;
  float32x4_t *v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  uint64_t v77;
  unint64_t v78;
  int32x4_t *v79;
  _OWORD *v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t *v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  uint64_t v94;
  _DWORD *v95;
  float *v96;
  float result;
  uint64_t v98;

  v47 = 0;
  if (a6 == vDSP_DFT_INVERSE)
    v48 = a4;
  else
    v48 = a5;
  if (a6 == vDSP_DFT_INVERSE)
    v49 = a5;
  else
    v49 = a4;
  if (a6 == vDSP_DFT_INVERSE)
    v50 = a2;
  else
    v50 = a3;
  if (a6 == vDSP_DFT_INVERSE)
    v51 = (const float *)a3;
  else
    v51 = (const float *)a2;
  v52 = -8;
  do
  {
    v54 = *(float32x4_t *)&v51[v47 / 4];
    v53 = *(float32x4_t *)&v51[v47 / 4 + 4];
    v56 = *(float32x4_t *)v50[v47 / 8].f32;
    v55 = *(float32x4_t *)v50[v47 / 8 + 2].f32;
    v58 = *(float32x4_t *)&v51[v47 / 4 + 90];
    v57 = *(float32x4_t *)&v51[v47 / 4 + 94];
    v60 = *(float32x4_t *)v50[v47 / 8 + 45].f32;
    v59 = *(float32x4_t *)v50[v47 / 8 + 47].f32;
    v62 = *(float32x4_t *)((char *)&unk_1A3ABE900 + v47);
    v61 = *(float32x4_t *)((char *)&unk_1A3ABE900 + v47 + 16);
    v63 = *(float32x4_t *)((char *)&unk_1A3ABEA80 + v47);
    v64 = *(float32x4_t *)((char *)&unk_1A3ABEA80 + v47 + 16);
    v65 = (float32x4_t *)((char *)&STACK[0x890] + v47);
    *v65 = vaddq_f32(v54, v58);
    v65[1] = vaddq_f32(v53, v57);
    v66 = (float32x4_t *)((char *)&v98 + v47);
    *v66 = vaddq_f32(v56, v60);
    v66[1] = vaddq_f32(v55, v59);
    v67 = vsubq_f32(v53, v57);
    v68 = vsubq_f32(v54, v58);
    v69 = vsubq_f32(v56, v60);
    v70 = vsubq_f32(v55, v59);
    v71 = (float32x4_t *)((char *)&STACK[0x890] + v47 + 360);
    *v71 = vmlaq_f32(vmulq_f32(v69, v63), v62, v68);
    v71[1] = vmlaq_f32(vmulq_f32(v70, v64), v61, v67);
    v72 = (float32x4_t *)((char *)&a44 + v47);
    *v72 = vmlaq_f32(vmulq_f32(v63, vnegq_f32(v68)), v62, v69);
    v72[1] = vmlaq_f32(vmulq_f32(v64, vnegq_f32(v67)), v61, v70);
    v52 += 8;
    v47 += 32;
  }
  while (v52 < 0x4B);
  v73 = *(float32x2_t *)(v51 + 88);
  v74 = *(float32x2_t *)(v51 + 178);
  v75 = vsub_f32(v73, v74);
  v76 = vsub_f32(v50[44], v50[89]);
  STACK[0x9F0] = (unint64_t)vadd_f32(v73, v74);
  STACK[0xB58] = (unint64_t)vmla_f32(vmul_f32(v76, (float32x2_t)0x3D0EF2AD3D8EDC7BLL), (float32x2_t)0xBF7FD814BF7F605CLL, v75);
  STACK[0x878] = (unint64_t)vmla_f32(vmul_f32(v75, (float32x2_t)0xBD0EF2ADBD8EDC7BLL), (float32x2_t)0xBF7FD814BF7F605CLL, v76);
  vDSP_DFT_Execute(__Setup, (const float *)&STACK[0x890], (const float *)&v98, (float *)&STACK[0x890], (float *)&v98);
  vDSP_DFT_Execute(__Setup, (const float *)&STACK[0x9F8], (const float *)&a44, (float *)&STACK[0x9F8], (float *)&a44);
  v77 = 0;
  v78 = -8;
  v79 = (int32x4_t *)v48;
  v80 = v49;
  do
  {
    v82 = *(int32x4_t *)((char *)&STACK[0x890] + v77);
    v81 = *(int32x4_t *)((char *)&STACK[0x890] + v77 + 16);
    v84 = *(int32x4_t *)((char *)&v98 + v77);
    v83 = *(int32x4_t *)((char *)&v98 + v77 + 16);
    v85 = (int32x4_t *)((char *)&STACK[0x890] + v77 + 360);
    v86 = *(int32x4_t *)((char *)&STACK[0x890] + v77 + 376);
    v87 = vzip1q_s32(v82, *v85);
    v88 = vzip2q_s32(v82, *v85);
    v89 = vzip1q_s32(v81, v86);
    v90 = vzip2q_s32(v81, v86);
    v91 = *(int32x4_t *)((char *)&a46 + v77);
    v92 = vzip2q_s32(v84, *(int32x4_t *)((char *)&a44 + v77));
    v93 = vzip1q_s32(v84, *(int32x4_t *)((char *)&a44 + v77));
    v80[2] = v89;
    v80[3] = v90;
    *v80 = v87;
    v80[1] = v88;
    v80 += 4;
    v79[2] = vzip1q_s32(v83, v91);
    v79[3] = vzip2q_s32(v83, v91);
    v78 += 8;
    *v79 = v93;
    v79[1] = v92;
    v79 += 4;
    v77 += 32;
  }
  while (v78 < 0x4B);
  v94 = 0;
  v95 = v49 + 177;
  v96 = v48 + 177;
  do
  {
    *(v95 - 1) = *(_DWORD *)((char *)&STACK[0x890] + v94 + 352);
    *(v96 - 1) = *(float *)((char *)&v98 + v94 + 352);
    *v95 = *(_DWORD *)((char *)&STACK[0x890] + v94 + 712);
    v95 += 2;
    result = *(float *)((char *)&STACK[0x878] + v94);
    *v96 = result;
    v96 += 2;
    v94 += 4;
  }
  while (v94 != 8);
  return result;
}

void ResamplerInitLocker::ResamplerInitLocker(ResamplerInitLocker *this)
{
  pthread_mutex_lock(&stru_1EE6D25C0);
}

{
  pthread_mutex_lock(&stru_1EE6D25C0);
}

void ResamplerInitLocker::~ResamplerInitLocker(ResamplerInitLocker *this)
{
  pthread_mutex_unlock(&stru_1EE6D25C0);
}

{
  pthread_mutex_unlock(&stru_1EE6D25C0);
}

void sub_1A394EC1C(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

ausdk::AUBase *ausdk::MusicDeviceBase::MusicDeviceBase(ausdk::MusicDeviceBase *this, OpaqueAudioComponentInstance *a2, int a3, int a4, int a5)
{
  ausdk::AUBase *result;

  result = ausdk::AUBase::AUBase(this, a2, a3, a4, a5);
  *((_QWORD *)result + 67) = result;
  *(_QWORD *)result = off_1E4A9CB08;
  *((_QWORD *)result + 66) = &unk_1E4A9CD70;
  return result;
}

uint64_t ausdk::MusicDeviceBase::GetPropertyInfo(ausdk::MusicDeviceBase *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a2 == 1000)
  {
    if (a3)
    {
      return 4294956430;
    }
    else
    {
      result = 0;
      *a5 = 4;
      *a6 = 0;
    }
  }
  else
  {
    result = ausdk::AUBase::GetPropertyInfo(this, a2, a3, a4, a5, a6);
    if ((_DWORD)result == -10879)
      return ausdk::AUMIDIBase::DelegateGetPropertyInfo((ausdk::MusicDeviceBase *)((char *)this + 528), a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t ausdk::MusicDeviceBase::GetProperty(ausdk::MusicDeviceBase *this, unsigned int a2, unsigned int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v11;

  if (a2 == 1000)
  {
    if (a3)
    {
      return 4294956430;
    }
    else
    {
      v11 = 0;
      result = (*(uint64_t (**)(ausdk::MusicDeviceBase *, int *))(*(_QWORD *)this + 592))(this, &v11);
      *a5 = v11;
    }
  }
  else
  {
    result = ausdk::AUBase::GetProperty(this, a2, a3, a4, a5);
    if ((_DWORD)result == -10879)
      return ausdk::AUMIDIBase::DelegateGetProperty((ausdk::MusicDeviceBase *)((char *)this + 528), a2, a3, a4, a5);
  }
  return result;
}

uint64_t ausdk::MusicDeviceBase::SetProperty(ausdk::MusicDeviceBase *this, unsigned int a2, unsigned int a3, unsigned int a4, const void *a5)
{
  uint64_t result;

  result = ausdk::AUBase::SetProperty(this, a2, a3, a4, a5);
  if ((_DWORD)result == -10879)
    return ausdk::AUMIDIBase::DelegateSetProperty((ausdk::MusicDeviceBase *)((char *)this + 528), a2, a3, a4, a5);
  return result;
}

uint64_t ausdk::MusicDeviceBase::GetInstrumentCount(ausdk::MusicDeviceBase *this, unsigned int *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t ausdk::MusicDeviceBase::HandleNoteOn(ausdk::MusicDeviceBase *this, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  _DWORD v6[3];
  uint64_t v7;

  v6[0] = 2;
  *(float *)&v6[1] = (float)a3;
  *(float *)&v6[2] = (float)a4;
  v7 = 0;
  return (*(uint64_t (**)(ausdk::MusicDeviceBase *, uint64_t, uint64_t, _QWORD, uint64_t, _DWORD *))(*(_QWORD *)this + 480))(this, 0xFFFFFFFFLL, a2, 0, a5, v6);
}

uint64_t `non-virtual thunk to'ausdk::MusicDeviceBase::HandleNoteOn(ausdk::MusicDeviceBase *this, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  _DWORD v6[3];
  uint64_t v7;

  v6[0] = 2;
  *(float *)&v6[1] = (float)a3;
  *(float *)&v6[2] = (float)a4;
  v7 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, _QWORD, uint64_t, _DWORD *))(*((_QWORD *)this - 66) + 480))((char *)this - 528, 0xFFFFFFFFLL, a2, 0, a5, v6);
}

uint64_t ausdk::MusicDeviceBase::HandleNoteOff(ausdk::MusicDeviceBase *this, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(ausdk::MusicDeviceBase *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 488))(this, a2, a3, a5);
}

uint64_t `non-virtual thunk to'ausdk::MusicDeviceBase::HandleNoteOff(ausdk::MusicDeviceBase *this, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*((_QWORD *)this - 66) + 488))((char *)this - 528, a2, a3, a5);
}

uint64_t sub_1A394EF48()
{
  return 4294967292;
}

uint64_t sub_1A394EF50()
{
  return 4294967292;
}

uint64_t sub_1A394EF58()
{
  return 4294967292;
}

uint64_t sub_1A394EF60(uint64_t a1, uint64_t a2, double *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (*a3 == *(double *)(a1 + 272))
    return 0;
  v3 = *(_OWORD *)a3;
  v4 = *((_OWORD *)a3 + 1);
  v5 = *((_OWORD *)a3 + 3);
  *(_OWORD *)(a1 + 304) = *((_OWORD *)a3 + 2);
  *(_OWORD *)(a1 + 320) = v5;
  *(_OWORD *)(a1 + 272) = v3;
  *(_OWORD *)(a1 + 288) = v4;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
}

uint64_t sub_1A394EF9C()
{
  return 0;
}

uint64_t sub_1A394EFA4()
{
  return 0;
}

double sub_1A394EFB0()
{
  return 0.0;
}

double sub_1A394EFB8()
{
  return 0.0;
}

uint64_t sub_1A394EFC0()
{
  return 0;
}

uint64_t sub_1A394EFC8()
{
  return 0;
}

uint64_t sub_1A394EFD0(uint64_t a1)
{
  pthread_t v2;
  _opaque_pthread_t *v3;
  BOOL v4;
  unsigned int v5;
  _BOOL4 v6;

  v2 = pthread_self();
  v3 = *(_opaque_pthread_t **)(a1 + 256);
  if (v3)
    v4 = v2 == v3;
  else
    v4 = 0;
  v5 = v4;
  v6 = v3 == 0;
  if (v2)
    return v5;
  else
    return v6;
}

uint64_t sub_1A394F014()
{
  return 4294967292;
}

uint64_t sub_1A394F01C()
{
  return 4294967292;
}

uint64_t sub_1A394F024(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 528) + 64))(a1 + 528, a2 & 0xF0, a2 & 0xF, a3, a4, a5);
}

uint64_t sub_1A394F058(uint64_t a1, const unsigned __int8 *a2)
{
  return ausdk::AUMIDIBase::SysEx((ausdk::AUMIDIBase *)(a1 + 528), a2);
}

uint64_t sub_1A394F060()
{
  return 4294967292;
}

uint64_t sub_1A394F068()
{
  return 4294967292;
}

uint64_t sub_1A394F070()
{
  return 4294967292;
}

uint64_t sub_1A394F078()
{
  return 0;
}

uint64_t sub_1A394F080(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2 & 0xF0, a2 & 0xF, a3, a4, a5);
}

uint64_t sub_1A394F0AC()
{
  return 4294967292;
}

uint64_t sub_1A394F0B8()
{
  return 0;
}

uint64_t sub_1A394F0C0()
{
  return 0;
}

uint64_t sub_1A394F0C8()
{
  return 0;
}

uint64_t sub_1A394F0D0()
{
  return 0;
}

uint64_t sub_1A394F0D8()
{
  return 0;
}

uint64_t sub_1A394F0E0()
{
  return 0;
}

uint64_t sub_1A394F0E8()
{
  return 0;
}

uint64_t sub_1A394F0F0()
{
  return 0;
}

uint64_t sub_1A394F0F8()
{
  return 0;
}

void sub_1A39501D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1A39501F0()
{
  return &unk_1E4ABC720;
}

id sub_1A39501FC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v3 + 24))
  {
    *a3 = 1;
    return 0;
  }
  else
  {
    *(_BYTE *)(v3 + 24) = 1;
    *a3 = 0;
    return *(id *)(a1 + 32);
  }
}

uint64_t sub_1A39502AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  OpaqueAudioQueue *v5;

  v5 = (OpaqueAudioQueue *)objc_msgSend_aqRef(*(void **)(a1 + 32), a2, a3, a4, a5);
  return AudioQueueFlush(v5);
}

uint64_t sub_1A3950374(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1A3950908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A3950934(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1A3950944(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  objc_msgSend__tearDownAudioQueue(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__rebuildAudioQueue, v6, v7, v8);
}

uint64_t sub_1A395096C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1A395097C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  objc_msgSend_inflightBuffers(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v9, v6, *(_QWORD *)(a1 + 40), v7, v8);

}

uint64_t sub_1A39509BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  OpaqueAudioQueue *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  AudioQueueBuffer *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  AudioTimeStamp v25;
  AudioTimeStamp v26;

  if (objc_msgSend_state(*(void **)(a1 + 32), a2, a3, a4, a5))
  {
    memset(&v26, 0, sizeof(v26));
    v10 = (OpaqueAudioQueue *)objc_msgSend_aqRef(*(void **)(a1 + 32), v6, v7, v8, v9);
    v15 = (AudioQueueBuffer *)objc_msgSend_aqBuffer(*(void **)(a1 + 40), v11, v12, v13, v14);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = AudioQueueEnqueueBufferWithParameters(v10, v15, 0, 0, 0, 0, 0, 0, 0, &v26);
    v25 = v26;
    return objc_msgSend_setQueuedTimeStamp_(*(void **)(a1 + 40), v16, (uint64_t)&v25, v17, v18);
  }
  else
  {
    v20 = *(void **)(a1 + 32);
    v21 = objc_msgSend_aqBuffer(*(void **)(a1 + 40), v6, v7, v8, v9);
    return objc_msgSend_bufferCallback_(v20, v22, v21, v23, v24);
  }
}

void sub_1A3950A80(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  objc_msgSend_inflightBuffers(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObject_(v9, v6, *(_QWORD *)(a1 + 40), v7, v8);

}

uint64_t sub_1A3950AC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  objc_msgSend__tearDownAudioQueue(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__rebuildAudioQueue, v6, v7, v8);
}

uint64_t sub_1A3950AE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1A3950AF8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  OpaqueAudioQueue *v5;

  v5 = (OpaqueAudioQueue *)objc_msgSend_aqRef(*(void **)(a1 + 32), a2, a3, a4, a5);
  return AudioQueuePause(v5);
}

uint64_t sub_1A3950BE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  OpaqueAudioQueue *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (OpaqueAudioQueue *)objc_msgSend_aqRef(*(void **)(a1 + 32), a2, a3, a4, a5);
  AudioQueuePause(v6);
  return objc_msgSend_setState_(*(void **)(a1 + 32), v7, 2, v8, v9);
}

uint64_t sub_1A3950CC8(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  OpaqueAudioQueue *v10;

  AXTTSLogCommon();
  v2 = (char *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEBUG))
    sub_1A3AAF698(a1, v2, v3, v4, v5);

  v10 = (OpaqueAudioQueue *)objc_msgSend_aqRef(*(void **)(a1 + 32), v6, v7, v8, v9);
  return AudioQueueReset(v10);
}

uint64_t sub_1A3951124(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  objc_msgSend__tearDownAudioQueue(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__rebuildAudioQueue, v6, v7, v8);
}

void sub_1A39515C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Unwind_Resume(a1);
}

void *sub_1A3951618(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1A3951640(uint64_t a1)
{

}

uint64_t sub_1A3951648(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1A3951658(uint64_t a1)
{

}

void sub_1A3951660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;

  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v6);
    objc_msgSend_inflightBuffers(*(void **)(a1 + 40), v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObject_(v11, v12, *(_QWORD *)(a1 + 32), v13, v14);

  }
  objc_msgSend_inflightBuffers(*(void **)(a1 + 40), (const char *)v6, a3, a4, a5);
  v19 = (id)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend_count(v19, v15, v16, v17, v18) == 0;

}

uint64_t sub_1A39516E4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 16))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(_BYTE *)(a1 + 40) == 0);
}

void sub_1A39518A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A39518BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  OpaqueAudioQueue *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  objc_msgSend__syncGraphProperties(*(void **)(a1 + 32), a2, a3, a4, a5);
  v10 = (OpaqueAudioQueue *)objc_msgSend_aqRef(*(void **)(a1 + 32), v6, v7, v8, v9);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = AudioQueueStart(v10, 0);
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__syncGraphParameters, v11, v12, v13);
}

uint64_t sub_1A3951958(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = objc_msgSend_aqRef(*(void **)(a1 + 32), a2, a3, a4, a5);
  if (!result)
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__rebuildAudioQueue, v7, v8, v9);
  return result;
}

void sub_1A3951B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3951BAC(int a1, AudioQueueRef inAQ)
{
  int v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  UInt32 ioDataSize;
  int outData;

  ioDataSize = 4;
  outData = 0;
  if (!AudioQueueGetProperty(inAQ, 0x6171726Eu, &outData, &ioDataSize))
  {
    v3 = outData;
    AXTTSLogCommon();
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
    if (v3)
    {
      if (v5)
        sub_1A3AAF90C((uint64_t)inAQ, (const char *)v4, v6, v7, v8);
    }
    else if (v5)
    {
      sub_1A3AAF888((uint64_t)inAQ, (const char *)v4, v6, v7, v8);
    }

  }
}

void sub_1A3951C44(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  objc_msgSend_inflightBuffers(*(void **)(a1 + 32), a2, a3, a4, a5, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v33, (uint64_t)v37, 16);
  if (v8)
  {
    v13 = v8;
    v14 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v34 != v14)
          objc_enumerationMutation(v6);
        v16 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
        objc_msgSend_completionHandler(v16, v9, v10, v11, v12);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if (v17)
        {
          v18 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
          objc_msgSend_completionHandler(v16, v9, v10, v11, v12);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = _Block_copy(v19);
          objc_msgSend_addObject_(v18, v21, (uint64_t)v20, v22, v23);

        }
      }
      v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v33, (uint64_t)v37, 16);
    }
    while (v13);
  }

  objc_msgSend_inflightBuffers(*(void **)(a1 + 32), v24, v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeAllObjects(v28, v29, v30, v31, v32);

}

void sub_1A3951DA8(uint64_t a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v8, (uint64_t)v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v1);
        (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v6) + 16))(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v6));
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v7, (uint64_t)&v8, (uint64_t)v12, 16);
    }
    while (v4);
  }

}

uint64_t sub_1A3952620(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_setShouldRebuildAudioQueue_(*(void **)(a1 + 32), a2, 1, a4, a5);
}

uint64_t sub_1A39526C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  objc_msgSend_setNeedsPropertySync_(*(void **)(a1 + 32), a2, 1, a4, a5);
  return objc_msgSend__syncGraphProperties(*(void **)(a1 + 32), v6, v7, v8, v9);
}

uint64_t sub_1A3952788(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  objc_msgSend_setNeedsParameterSync_(*(void **)(a1 + 32), a2, 1, a4, a5);
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__syncGraphParameters, v6, v7, v8);
}

void sub_1A3952CF0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1A3952D10(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1A3952D30(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

_DWORD *ausdk::BufferAllocator::Allocate(ausdk::BufferAllocator *this, unsigned int a2, int a3)
{
  void *v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  std::logic_error *exception;
  std::bad_alloc *v11;
  std::bad_alloc *v12;

  if (a2 > 0x1000)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1A3952E90(exception, "AudioBuffers::Allocate: Too many buffers");
    __cxa_throw(exception, (struct type_info *)off_1E4A95360, MEMORY[0x1E0DE42E0]);
  }
  v4 = 0;
  v5 = 0;
  v6 = (a3 + 15) & 0xFFFFFFF0;
  if (a2 && v6)
  {
    if (((v6 * (unint64_t)a2) & 0xFFFFFFFF00000000) != 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        sub_1A3AAFC9C();
      v11 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v12 = std::bad_alloc::bad_alloc(v11);
      __cxa_throw(v12, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
    }
    v5 = v6 * a2;
    if (v6 * a2)
    {
      v4 = malloc_type_malloc(v6 * a2, 0x9473491AuLL);
      bzero(v4, v6 * a2);
    }
    else
    {
      v4 = 0;
    }
  }
  if (a2 <= 1)
    v7 = 1;
  else
    v7 = a2;
  v8 = 16 * v7 + 56;
  result = malloc_type_malloc(v8, 0xA1F80C9AuLL);
  *result = a2;
  result[1] = v6;
  *((_QWORD *)result + 1) = 0;
  result[4] = v8;
  result[5] = v5;
  *((_QWORD *)result + 3) = 0;
  *((_QWORD *)result + 4) = v4;
  *((_QWORD *)result + 5) = 0;
  *((_QWORD *)result + 7) = 0;
  *((_QWORD *)result + 8) = 0;
  result[12] = a2;
  return result;
}

void sub_1A3952E7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1A3952E90(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void ausdk::BufferAllocator::Deallocate(int a1, _QWORD *a2)
{
  void *v3;

  v3 = (void *)a2[4];
  if (v3)
    free(v3);
  free(a2);
}

uint64_t ausdk::AllocatedBuffer::Prepare(ausdk::AllocatedBuffer *this, int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  std::logic_error *exception;

  v6 = *((_DWORD *)this + 12);
  result = (uint64_t)this + 48;
  v5 = v6;
  if (v6 > *(_DWORD *)this)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1A3952E90(exception, "AllocatedBuffer::Prepare(): too many buffers");
    goto LABEL_10;
  }
  v7 = *((unsigned int *)this + 1);
  if (v7 < a3)
    goto LABEL_9;
  v8 = *((_QWORD *)this + 4);
  v9 = v8 + *((unsigned int *)this + 5);
  if ((_DWORD)v5)
  {
    v10 = (unint64_t *)((char *)this + 64);
    do
    {
      *v10 = v8;
      v8 += v7;
      *((_DWORD *)v10 - 2) = a2;
      *((_DWORD *)v10 - 1) = a3;
      v10 += 2;
      --v5;
    }
    while (v5);
  }
  if (v8 > v9)
  {
LABEL_9:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1A3952E90(exception, "AllocatedBuffer::Prepare(): insufficient capacity");
LABEL_10:
    __cxa_throw(exception, (struct type_info *)off_1E4A95360, MEMORY[0x1E0DE42E0]);
  }
  return result;
}

void sub_1A3952FB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AllocatedBuffer::PrepareNull(ausdk::AllocatedBuffer *this, int a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  std::logic_error *exception;

  v6 = *((_DWORD *)this + 12);
  result = (uint64_t)this + 48;
  v5 = v6;
  if (v6 > *(_DWORD *)this)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1A3952E90(exception, "AllocatedBuffer::PrepareNull(): too many buffers");
    __cxa_throw(exception, (struct type_info *)off_1E4A95360, MEMORY[0x1E0DE42E0]);
  }
  if ((_DWORD)v5)
  {
    v7 = (_QWORD *)((char *)this + 64);
    do
    {
      *((_DWORD *)v7 - 2) = a2;
      *((_DWORD *)v7 - 1) = a3;
      *v7 = 0;
      v7 += 2;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_1A3953044(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AUBufferList::PrepareBuffer(ausdk::AUBufferList *this, const AudioStreamBasicDescription *a2, unsigned int a3)
{
  AudioFormatFlags mFormatFlags;
  UInt32 mChannelsPerFrame;
  UInt32 v6;
  uint64_t result;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *exception;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (*((_DWORD *)this + 5) < a3)
  {
    v8 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v8)
      sub_1A3AAFCDC(v8, v9, v10, v11, v12, v13, v14, v15);
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A39532E0((uint64_t)exception, -10874);
LABEL_16:
    __cxa_throw(exception, (struct type_info *)&unk_1E4A9C228, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  mFormatFlags = a2->mFormatFlags;
  if ((mFormatFlags & 0x20) != 0)
    mChannelsPerFrame = a2->mChannelsPerFrame;
  else
    mChannelsPerFrame = 1;
  if (mChannelsPerFrame > *((_DWORD *)this + 4))
  {
    v17 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v17)
      sub_1A3AAFD4C(v17, v18, v19, v20, v21, v22, v23, v24);
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A39532E0((uint64_t)exception, -10868);
    goto LABEL_16;
  }
  if ((mFormatFlags & 0x20) != 0)
    v6 = 1;
  else
    v6 = a2->mChannelsPerFrame;
  result = ausdk::AllocatedBuffer::Prepare(*((ausdk::AllocatedBuffer **)this + 1), v6, a2->mBytesPerFrame * a3);
  *(_DWORD *)this = 1;
  return result;
}

void sub_1A3953134(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AUBufferList::PrepareNullBuffer(ausdk::AUBufferList *this, const AudioStreamBasicDescription *a2, int a3)
{
  AudioFormatFlags mFormatFlags;
  UInt32 mChannelsPerFrame;
  UInt32 v6;
  uint64_t result;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *exception;

  mFormatFlags = a2->mFormatFlags;
  if ((mFormatFlags & 0x20) != 0)
    mChannelsPerFrame = a2->mChannelsPerFrame;
  else
    mChannelsPerFrame = 1;
  if (mChannelsPerFrame > *((_DWORD *)this + 4))
  {
    v8 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v8)
      sub_1A3AAFD4C(v8, v9, v10, v11, v12, v13, v14, v15);
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A39532E0((uint64_t)exception, -10868);
    __cxa_throw(exception, (struct type_info *)&unk_1E4A9C228, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if ((mFormatFlags & 0x20) != 0)
    v6 = 1;
  else
    v6 = a2->mChannelsPerFrame;
  result = ausdk::AllocatedBuffer::PrepareNull(*((ausdk::AllocatedBuffer **)this + 1), v6, a2->mBytesPerFrame * a3);
  *(_DWORD *)this = 2;
  return result;
}

void sub_1A39531EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AUBufferList::Allocate(ausdk::AUBufferList *this, const AudioStreamBasicDescription *a2, int a3)
{
  _UNKNOWN **v6;
  _UNKNOWN **v7;
  UInt32 mBytesPerFrame;
  uint64_t mChannelsPerFrame;
  uint64_t result;

  v6 = ausdk::BufferAllocator::instance(this);
  v7 = v6;
  if (*((_QWORD *)this + 1))
    (*((void (**)(_UNKNOWN **))*v6 + 3))(v6);
  mBytesPerFrame = a2->mBytesPerFrame;
  if ((a2->mFormatFlags & 0x20) != 0)
    mChannelsPerFrame = a2->mChannelsPerFrame;
  else
    mChannelsPerFrame = 1;
  result = (*((uint64_t (**)(_UNKNOWN **, uint64_t, _QWORD, _QWORD))*v7 + 2))(v7, mChannelsPerFrame, mBytesPerFrame * a3, 0);
  *((_QWORD *)this + 1) = result;
  *((_DWORD *)this + 4) = mChannelsPerFrame;
  *((_DWORD *)this + 5) = a3;
  *(_DWORD *)this = 0;
  return result;
}

_QWORD *ausdk::AUBufferList::Deallocate(_QWORD *this)
{
  _QWORD *v1;
  _UNKNOWN **v2;

  v1 = this;
  if (this[1])
  {
    v2 = ausdk::BufferAllocator::instance((ausdk::BufferAllocator *)this);
    this = (_QWORD *)(*((uint64_t (**)(_UNKNOWN **, _QWORD))*v2 + 3))(v2, v1[1]);
    v1[1] = 0;
  }
  v1[2] = 0;
  *(_DWORD *)v1 = 0;
  return this;
}

void sub_1A39532CC()
{
  JUMPOUT(0x1A8596C28);
}

uint64_t sub_1A39532E8(uint64_t a1, int a2)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  std::string __p;
  std::string v10;
  std::string v11;

  sub_1A39534BC(&v10, "OSStatus ");
  std::to_string(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v10, (const std::string::value_type *)p_p, size);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &unk_1E4A9C688;
  *(_DWORD *)(a1 + 16) = a2;
  return a1;
}

void sub_1A39533C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1A3953410(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x1A8596C28);
}

void sub_1A3953434()
{
  sub_1A3953448("basic_string");
}

void sub_1A3953448(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1A3953498(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E4A95358, MEMORY[0x1E0DE42D0]);
}

void sub_1A3953484(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1A3953498(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

_QWORD *sub_1A39534BC(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1A3953434();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_1A395356C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_1A395357C(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D5630, a3, (void *)1);
}

id sub_1A395358C(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5630);
}

id sub_1A3953598(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5631);
}

void sub_1A39535A4(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D5631, a3, (void *)1);
}

id sub_1A39535B4(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5632);
}

void sub_1A39535C0(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D5632, a3, (void *)1);
}

void sub_1A39535D0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D5633, v6, (void *)1);

}

uint64_t sub_1A3953624(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_getAssociatedObject(a1, &unk_1EE6D5633);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A3953660(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D5634, a3, 0);
}

id sub_1A3953670(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5634);
}

void sub_1A395367C(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;

  v7 = a3;
  if (v7)
  {
    objc_msgSend_shared(SSMLServices, v3, v4, v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_speechString(v7, v9, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_parseSSMLToPlainText_(v8, v14, (uint64_t)v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    AXLogSpeechSynthesis();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      sub_1A3AAFE68((uint64_t)v17, v18);

    objc_msgSend_error(v17, v19, v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if (v23)
    {

    }
    else
    {
      objc_msgSend_plainTextResult(v17, v24, v25, v26, v27);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = objc_msgSend_length(v32, v33, v34, v35, v36);

      if (v37)
      {
        objc_msgSend_speechString(v7, v38, v39, v40, v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setSsmlRepresentation_(v7, v43, (uint64_t)v42, v44, v45);

        objc_msgSend_plainTextResult(v17, v46, v47, v48, v49);
        v28 = objc_claimAutoreleasedReturnValue();
        objc_msgSend_setSpeechString_(v7, v50, (uint64_t)v28, v51, v52);
LABEL_10:

        goto LABEL_11;
      }
    }
    AXLogSpeechSynthesis();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      sub_1A3AAFDBC(v17, (char *)v28, v29, v30, v31);
    goto LABEL_10;
  }
LABEL_11:

}

void sub_1A39537B8(void *a1, int a2, void *aBlock)
{
  id v4;

  v4 = _Block_copy(aBlock);
  objc_setAssociatedObject(a1, &unk_1EE6D5635, v4, (void *)3);

}

id sub_1A3953804(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5635);
}

void sub_1A3953810(void *a1, int a2, void *aBlock)
{
  id v4;

  v4 = _Block_copy(aBlock);
  objc_setAssociatedObject(a1, &unk_1EE6D5636, v4, (void *)3);

}

id sub_1A395385C(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5636);
}

id sub_1A3953868(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5637);
}

void sub_1A3953874(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D5637, a3, (void *)3);
}

id sub_1A3953884(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = (objc_class *)MEMORY[0x1E0C89BA0];
  v4 = a3;
  v5 = [v3 alloc];
  v9 = (void *)objc_msgSend_initWithString_(v5, v6, (uint64_t)v4, v7, v8);

  return v9;
}

id sub_1A39538C8(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = (objc_class *)MEMORY[0x1E0C89BA0];
  v4 = a3;
  v5 = [v3 alloc];
  v9 = (void *)objc_msgSend_initWithAttributedString_(v5, v6, (uint64_t)v4, v7, v8);

  return v9;
}

id sub_1A395390C(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = (objc_class *)MEMORY[0x1E0C89BA0];
  v4 = a3;
  v5 = [v3 alloc];
  v9 = (void *)objc_msgSend_initWithSSMLRepresentation_(v5, v6, (uint64_t)v4, v7, v8);

  return v9;
}

void *sub_1A3953950(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  double v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  objc_super v27;

  v4 = a3;
  v27.receiver = a1;
  v27.super_class = (Class)&off_1EE6F6D18;
  v5 = objc_msgSendSuper2(&v27, sel_init);
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    LODWORD(v8) = 1.0;
    objc_msgSend_setVolume_(v7, v9, v10, v11, v12, v8);
    LODWORD(v13) = 1.0;
    objc_msgSend_setPitchMultiplier_(v7, v14, v15, v16, v17, v13);
    LODWORD(v18) = *MEMORY[0x1E0C89998];
    objc_msgSend_setRate_(v7, v19, v20, v21, v22, v18);
    objc_msgSend_setSpeechString_(v7, v23, (uint64_t)v4, v24, v25);
  }

  return v6;
}

void *sub_1A39539F0(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a3;
  objc_msgSend_string(v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)objc_msgSend_initWithString_(a1, v10, (uint64_t)v9, v11, v12);

  if (v13)
    objc_msgSend_setAttributedSpeechString_(v13, v14, (uint64_t)v4, v15, v16);

  return v13;
}

id sub_1A3953A54(id a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;

  v4 = a3;
  if (!objc_opt_class())
  {
    AXLogSpeechSynthesis();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      sub_1A3AAFFB8(v9);

  }
  objc_msgSend_shared(SSMLServices, v5, v6, v7, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_parseSSMLToPlainText_(v10, v11, (uint64_t)v4, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_error(v14, v15, v16, v17, v18);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (v23)
  {
    AXLogSpeechSynthesis();
    v24 = (char *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR))
      sub_1A3AAFEDC(v23, v24, v25, v26, v27);

    v28 = 0;
  }
  else
  {
    objc_msgSend_plainTextResult(v14, v19, v20, v21, v22);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = (void *)objc_msgSend_initWithString_(a1, v30, (uint64_t)v29, v31, v32);

    if (v33)
      objc_msgSend_setSsmlRepresentation_(v33, v34, (uint64_t)v4, v35, v36);
    a1 = v33;
    v28 = a1;
  }

  return v28;
}

id sub_1A3953B80(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  double v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  double v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  double v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;

  v1 = (void *)MEMORY[0x1E0CB3940];
  v2 = a1;
  v3 = objc_opt_class();
  objc_msgSend_speechString(v2, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_voice(v2, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rate(v2, v14, v15, v16, v17);
  v19 = v18;
  objc_msgSend_volume(v2, v20, v21, v22, v23);
  v25 = v24;
  objc_msgSend_pitchMultiplier(v2, v26, v27, v28, v29);
  v31 = v30;
  objc_msgSend_preUtteranceDelay(v2, v32, v33, v34, v35);
  v37 = v36;
  objc_msgSend_postUtteranceDelay(v2, v38, v39, v40, v41);
  objc_msgSend_stringWithFormat_(v1, v42, (uint64_t)CFSTR("[%@ %p] String: %@\nVoice: %@\nRate: %.2f\nVolume: %.2f\nPitch Multiplier: %.2f\nDelays: Pre: %.2f(s) Post: %.2f(s)"), v43, v44, v3, v2, v8, v13, *(_QWORD *)&v19, *(_QWORD *)&v25, *(_QWORD *)&v31, v37, v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();

  return v46;
}

unint64_t MultiRadixFFT::NearestSupportedSizes(unint64_t this)
{
  unsigned int v1;
  char v2;
  unsigned int v3;
  char v4;
  unsigned int v5;
  char v6;
  unsigned int v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  if (this >= 0x11)
  {
    if (this >> 20)
    {
      v1 = 0x100000;
      this = 0x100000;
    }
    else
    {
      v1 = 1 << (__clz(this) ^ 0x1F);
      v2 = __clz(this - 1);
      v3 = 1 << -v2;
      if (v1 >= v3)
      {
        this = (1 << -v2);
      }
      else
      {
        v4 = __clz(this / 0xF);
        v5 = 15 << ~v4;
        v6 = __clz(this / 5);
        v7 = 5 << ~v6;
        v8 = __clz(this / 3);
        if (v7 <= 3 << ~v8)
          v7 = 3 << ~v8;
        if (v5 <= v7)
          v5 = v7;
        if (v1 <= v5)
          v1 = v5;
        if (v1 != (_DWORD)this)
        {
          v9 = 30 << (31 - v4);
          v10 = 10 << (31 - v6);
          v11 = 6 << (31 - v8);
          if (v11 < v10)
            v10 = v11;
          if (v10 < v9)
            v9 = v10;
          if (v9 >= v3)
            this = v3;
          else
            this = v9;
        }
      }
    }
  }
  else
  {
    v1 = 16;
    this = 16;
  }
  return v1 | (this << 32);
}

uint64_t MultiRadixFFT::Initialize(MultiRadixFFT *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = sub_1A3953E20();
  sub_1A3953EB0(v4, a2, (uint64_t)&v10);
  sub_1A3953F6C(this, &v11);
  v5 = v10;
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

uint64_t sub_1A3953E20()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1EE6D2728);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EE6D2728))
  {
    v2 = operator new();
    *(_DWORD *)v2 = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    qword_1EE6D2720 = v2;
    __cxa_guard_release(&qword_1EE6D2728);
  }
  return qword_1EE6D2720;
}

void sub_1A3953E98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EE6D2728);
  _Unwind_Resume(a1);
}

void sub_1A3953EB0(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  int v13;

  v13 = a2;
  sub_1A3954924(a1, &v13, &v13, &v11);
  v4 = v11;
  if (*(_QWORD *)(v11 + 8) && *(_QWORD *)(v11 + 16))
  {
    *(_DWORD *)a3 = 0;
    v5 = v12;
    *(_QWORD *)(a3 + 8) = v4;
    *(_QWORD *)(a3 + 16) = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    *(_DWORD *)a3 = 1936292453;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

_QWORD *sub_1A3953F6C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t MultiRadixFFT::Size(MultiRadixFFT *this)
{
  if (*(_QWORD *)this)
    return **(unsigned int **)this;
  else
    return 0;
}

uint64_t MultiRadixRealFFT::Initialize(MultiRadixRealFFT *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = sub_1A395408C();
  sub_1A395411C(v4, a2, (uint64_t)&v10);
  sub_1A3953F6C(this, &v11);
  v5 = v10;
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

uint64_t sub_1A395408C()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1EE6D2738);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EE6D2738))
  {
    v2 = operator new();
    *(_DWORD *)v2 = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    qword_1EE6D2730 = v2;
    __cxa_guard_release(&qword_1EE6D2738);
  }
  return qword_1EE6D2730;
}

void sub_1A3954104(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EE6D2738);
  _Unwind_Resume(a1);
}

void sub_1A395411C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  int v13;

  v13 = a2;
  sub_1A3955338(a1, &v13, &v13, &v11);
  v4 = v11;
  if (*(_QWORD *)(v11 + 8) && *(_QWORD *)(v11 + 16))
  {
    *(_DWORD *)a3 = 0;
    v5 = v12;
    *(_QWORD *)(a3 + 8) = v4;
    *(_QWORD *)(a3 + 16) = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    *(_DWORD *)a3 = 1936292453;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t MultiRadixRealFFT::Size(MultiRadixRealFFT *this)
{
  if (*(_QWORD *)this)
    return **(unsigned int **)this;
  else
    return 0;
}

uint64_t MultiRadixFFT::CplxInPlaceTransform(MultiRadixFFT *this, DSPSplitComplex *a2, int a3)
{
  MultiRadixFFT::CplxOutOfPlaceTransform(this, a2, a2, a3);
  return 0;
}

uint64_t MultiRadixFFT::CplxOutOfPlaceTransform(MultiRadixFFT *this, const DSPSplitComplex *a2, DSPSplitComplex *a3, int a4)
{
  uint64_t v4;

  if (!*(_QWORD *)this)
    abort();
  v4 = 16;
  if (a4 == 1)
    v4 = 8;
  vDSP_DFT_Execute(*(const vDSP_DFT_SetupStruct **)(*(_QWORD *)this + v4), a2->realp, a2->imagp, a3->realp, a3->imagp);
  return 0;
}

uint64_t MultiRadixRealFFT::RealInPlaceTransform(MultiRadixRealFFT *this, DSPSplitComplex *a2, int a3, float a4)
{
  uint64_t v8;
  float __B;

  if (!*(_QWORD *)this)
    abort();
  v8 = 16;
  if (a3 == 1)
    v8 = 8;
  vDSP_DFT_Execute(*(const vDSP_DFT_SetupStruct **)(*(_QWORD *)this + v8), a2->realp, a2->imagp, a2->realp, a2->imagp);
  if (a3 == 1)
  {
    __B = a4 * 0.5;
    vDSP_vsmul(a2->realp, 1, &__B, a2->realp, 1, (unint64_t)**(unsigned int **)this >> 1);
    vDSP_vsmul(a2->imagp, 1, &__B, a2->imagp, 1, (unint64_t)**(unsigned int **)this >> 1);
  }
  return 0;
}

uint64_t MultiRadixRealFFT::RealOutOfPlaceForwardTransform(MultiRadixRealFFT *this, DSPComplex *__C, DSPSplitComplex *a3, float a4)
{
  vDSP_ctoz(__C, 2, a3, 1, (unint64_t)**(unsigned int **)this >> 1);
  MultiRadixRealFFT::RealInPlaceTransform(this, a3, 1, a4);
  return 0;
}

uint64_t MultiRadixRealFFT::RealOutOfPlaceInverseTransform(MultiRadixRealFFT *this, const DSPSplitComplex *a2, DSPComplex *a3)
{
  const vDSP_DFT_SetupStruct ***v5;
  const float **v6;
  uint64_t v7;
  float *v8;
  const vDSP_DFT_SetupStruct **v9;
  unint64_t v10;
  vDSP_Length v12;
  uint64_t v13;
  DSPSplitComplex __Z;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)this)
    abort();
  if (!**(_DWORD **)this)
    return 561214580;
  v5 = (const vDSP_DFT_SetupStruct ***)MEMORY[0x1E0C80A78](this);
  v8 = (float *)((char *)&v13 - ((v7 + 15) & 0x7FFFFFFF0));
  __Z.realp = v8;
  v9 = *v5;
  if (*v5)
    v10 = (unint64_t)*(unsigned int *)v9 >> 1;
  else
    v10 = 0;
  __Z.imagp = &v8[v10];
  vDSP_DFT_Execute(v9[2], *v6, v6[1], v8, __Z.imagp);
  if (*(_QWORD *)this)
    v12 = (unint64_t)**(unsigned int **)this >> 1;
  else
    v12 = 0;
  vDSP_ztoc(&__Z, 1, a3, 2, v12);
  return 0;
}

uint64_t MultiRadixFFT_Create(int a1, MultiRadixFFT **a2)
{
  MultiRadixFFT *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (MultiRadixFFT *)operator new();
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = MultiRadixFFT::Initialize(v4, a1);
  if ((_DWORD)v5)
  {
    v6 = sub_1A39548CC((uint64_t)v4);
    MEMORY[0x1A8596C28](v6, 0x20C40A4A59CD2);
  }
  else
  {
    *a2 = v4;
  }
  return v5;
}

uint64_t MultiRadixFFT_Dispose(uint64_t result)
{
  if (result)
  {
    sub_1A39548CC(result);
    JUMPOUT(0x1A8596C28);
  }
  return result;
}

unsigned int **MultiRadixFFT_Size(unsigned int **result)
{
  if (result)
  {
    if (*result)
      return (unsigned int **)**result;
    else
      return 0;
  }
  return result;
}

uint64_t MultiRadixFFT_CplxInPlaceTransform(MultiRadixFFT *a1, DSPSplitComplex *a2, int a3)
{
  if (!a1)
    return 561214580;
  MultiRadixFFT::CplxOutOfPlaceTransform(a1, a2, a2, a3);
  return 0;
}

uint64_t MultiRadixFFT_CplxOutOfPlaceTransform(MultiRadixFFT *a1, const DSPSplitComplex *a2, DSPSplitComplex *a3, int a4)
{
  if (!a1)
    return 561214580;
  MultiRadixFFT::CplxOutOfPlaceTransform(a1, a2, a3, a4);
  return 0;
}

uint64_t MultiRadixRealFFT_Create(int a1, MultiRadixRealFFT **a2)
{
  MultiRadixRealFFT *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (MultiRadixRealFFT *)operator new();
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = MultiRadixRealFFT::Initialize(v4, a1);
  if ((_DWORD)v5)
  {
    v6 = sub_1A39548CC((uint64_t)v4);
    MEMORY[0x1A8596C28](v6, 0x20C40A4A59CD2);
  }
  else
  {
    *a2 = v4;
  }
  return v5;
}

uint64_t MultiRadixRealFFT_Dispose(uint64_t result)
{
  if (result)
  {
    sub_1A39548CC(result);
    JUMPOUT(0x1A8596C28);
  }
  return result;
}

unsigned int **MultiRadixRealFFT_Size(unsigned int **result)
{
  if (result)
  {
    if (*result)
      return (unsigned int **)**result;
    else
      return 0;
  }
  return result;
}

uint64_t MultiRadixRealFFT_RealInPlaceTransform(MultiRadixRealFFT *a1, DSPSplitComplex *a2, int a3)
{
  if (!a1)
    return 561214580;
  MultiRadixRealFFT::RealInPlaceTransform(a1, a2, a3, 1.0);
  return 0;
}

uint64_t MultiRadixRealFFT_RealOutOfPlaceForwardTransform(MultiRadixRealFFT *a1, DSPComplex *__C, DSPSplitComplex *a3)
{
  if (!a1)
    return 561214580;
  vDSP_ctoz(__C, 2, a3, 1, (unint64_t)**(unsigned int **)a1 >> 1);
  MultiRadixRealFFT::RealInPlaceTransform(a1, a3, 1, 1.0);
  return 0;
}

uint64_t MultiRadixRealFFT_RealOutOfPlaceInverseTransform(MultiRadixRealFFT *a1, const DSPSplitComplex *a2, DSPComplex *a3)
{
  if (a1)
    return MultiRadixRealFFT::RealOutOfPlaceInverseTransform(a1, a2, a3);
  else
    return 561214580;
}

float realFFTMultiply(float *a1, float *a2, float *a3, float *a4, float *a5, float *a6, unsigned int a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float *imagp;
  float result;
  DSPSplitComplex v13;
  DSPSplitComplex __B;
  DSPSplitComplex __A;

  __A.realp = a1;
  __A.imagp = a2;
  __B.realp = a3;
  __B.imagp = a4;
  v13.realp = a5;
  v13.imagp = a6;
  v7 = *a1;
  v8 = *a2;
  v9 = *a3;
  v10 = *a4;
  vDSP_zvmul(&__A, 1, &__B, 1, &v13, 1, a7 >> 1, 1);
  imagp = v13.imagp;
  *v13.realp = v7 * v9;
  result = v8 * v10;
  *imagp = v8 * v10;
  return result;
}

void realFFTZeroPad(const DSPComplex *a1, float *a2, float *a3, unsigned int a4, int a5, MultiRadixRealFFT *a6)
{
  vDSP_Length v9;
  size_t v10;
  DSPSplitComplex v11;

  v11.realp = a2;
  v11.imagp = a3;
  v9 = a4 >> 1;
  vDSP_ctoz(a1, 2, &v11, 1, v9);
  if (a5 - a4 >= 2)
  {
    v10 = 16 * ((a5 - a4) >> 1);
    bzero(&v11.realp[v9], v10);
    bzero(&v11.imagp[v9], v10);
  }
  if (a6)
    MultiRadixRealFFT::RealInPlaceTransform(a6, &v11, 1, 1.0);
}

void realIFFTUnload(float *a1, float *a2, DSPComplex *__C, unsigned int a4, unsigned int a5, MultiRadixRealFFT *this, float a7)
{
  DSPSplitComplex __Z;
  float __B;
  DSPSplitComplex v11;

  v11.realp = a1;
  v11.imagp = a2;
  __B = a7;
  __Z.realp = &a1[a5 >> 1];
  __Z.imagp = &a2[a5 >> 1];
  if (this)
    MultiRadixRealFFT::RealInPlaceTransform(this, &v11, -1, 1.0);
  vDSP_ztoc(&__Z, 1, __C, 2, a4 >> 1);
  vDSP_vsmul((const float *)__C, 1, &__B, (float *)__C, 1, a4);
}

uint64_t sub_1A39548CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_1A3954924(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  vDSP_DFT_SetupStruct *Setup;
  vDSP_DFT_SetupStruct *v9;
  vDSP_DFT_Setup v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  sub_1A3954AD4(a1, a2, a4);
  if (!*a4)
  {
    sub_1A39548CC((uint64_t)a4);
    Setup = vDSP_DFT_zop_CreateSetup(0, *a3, vDSP_DFT_FORWARD);
    v9 = Setup;
    if (Setup)
      v10 = vDSP_DFT_zop_CreateSetup(Setup, *a3, vDSP_DFT_INVERSE);
    else
      v10 = 0;
    v11 = operator new();
    *(_DWORD *)v11 = *a3;
    *(_QWORD *)(v11 + 8) = v9;
    *(_QWORD *)(v11 + 16) = v10;
    v12 = operator new(0x38uLL);
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = 0;
    *v12 = &unk_1E4A9D3E0;
    v12[4] = 0;
    v12[5] = v11;
    v12[6] = a1;
    *(_QWORD *)&v19 = v12 + 3;
    *((_QWORD *)&v19 + 1) = v12;
    sub_1A3954FD0((uint64_t)&v19, (_QWORD *)v19, v19);
    sub_1A3954BEC((uint64_t *)(a1 + 8), &v19);
    v13 = *((_QWORD *)&v19 + 1);
    *a4 = *(_QWORD *)(v19 + 16);
    a4[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
      if (*((_QWORD *)&v19 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1A3954A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  os_unfair_lock_s *v3;
  va_list va;

  va_start(va, a3);
  sub_1A39548CC((uint64_t)va);
  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_1A3954AD4(uint64_t a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _DWORD *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v5 = a1 + 8;
  v6 = sub_1A3954D18(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16));
  sub_1A3954DC0(v5, (uint64_t)v6, *(__int128 **)(v5 + 8));
  v7 = *(_QWORD **)v5;
  v8 = *(_QWORD **)(v5 + 8);
  while (1)
  {
    if (v7 == v8)
    {
      *a3 = 0;
      a3[1] = 0;
      return;
    }
    v9 = (std::__shared_weak_count *)v7[1];
    if (v9)
    {
      v10 = std::__shared_weak_count::lock(v9);
      if (v10)
        break;
    }
LABEL_11:
    v7 += 2;
  }
  v11 = v10;
  if (!*v7 || (v12 = *(_DWORD **)(*v7 + 16), *v12 != *a2))
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    goto LABEL_11;
  }
  *a3 = v12;
  a3[1] = v10;
  v15 = (unint64_t *)&v10->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
}

_QWORD *sub_1A3954BEC(uint64_t *a1, __int128 *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  void *v23[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v12 = ((uint64_t)v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_1A395516C();
    v14 = v5 - *a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v23[4] = v4;
    v16 = (char *)sub_1A3955180((uint64_t)v4, v15);
    v17 = &v16[16 * v12];
    v23[0] = v16;
    v23[1] = v17;
    v23[3] = &v16[16 * v18];
    v19 = *a2;
    *(_OWORD *)v17 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 16);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23[2] = v17 + 16;
    sub_1A39550F8(a1, v23);
    v11 = (_QWORD *)a1[1];
    sub_1A39552B8(v23);
  }
  else
  {
    *v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v7[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 16);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v11;
  return v11 - 2;
}

void sub_1A3954D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1A39552B8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1A3954D18(uint64_t *a1, uint64_t *a2)
{
  uint64_t *i;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  if (a1 == a2)
    return a2;
  for (i = a1 + 2; ; i += 2)
  {
    v4 = *(i - 1);
    if (!v4 || *(_QWORD *)(v4 + 8) == -1)
      break;
    if (i == a2)
      return a2;
  }
  v6 = i - 2;
  if (i - 2 != a2)
  {
    while (i != a2)
    {
      v8 = i[1];
      if (v8 && *(_QWORD *)(v8 + 8) != -1)
      {
        v9 = *i;
        *i = 0;
        i[1] = 0;
        v10 = (std::__shared_weak_count *)v6[1];
        *v6 = v9;
        v6[1] = v8;
        if (v10)
          std::__shared_weak_count::__release_weak(v10);
        v6 += 2;
      }
      i += 2;
    }
  }
  return v6;
}

uint64_t sub_1A3954DC0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  char v10;

  if ((__int128 *)a2 != a3)
  {
    sub_1A3954E40((uint64_t)&v10, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v7 - 8);
        if (v8)
          std::__shared_weak_count::__release_weak(v8);
        v7 -= 16;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

__int128 *sub_1A3954E40(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;
  std::__shared_weak_count *v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = *v5;
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_1A3954EA8()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void sub_1A3954ED0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E4A9D3E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1A3954EE4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E4A9D3E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A8596C28);
}

_QWORD *sub_1A3954F18(uint64_t a1)
{
  return sub_1A3954F24((_QWORD *)(a1 + 24));
}

_QWORD *sub_1A3954F24(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  sub_1A3954F6C(a1[3]);
  sub_1A3955080(a1 + 2, 0);
  v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_1A3954F6C(uint64_t a1)
{
  uint64_t *v2;

  if (os_unfair_lock_trylock((os_unfair_lock_t)a1))
  {
    v2 = sub_1A3954D18(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16));
    sub_1A3954DC0(a1 + 8, (uint64_t)v2, *(__int128 **)(a1 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
  }
}

void sub_1A3954FBC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1A3954FD0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

uint64_t sub_1A3955080(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1A39550BC(result);
    JUMPOUT(0x1A8596C28);
  }
  return result;
}

uint64_t sub_1A39550BC(uint64_t a1)
{
  vDSP_DFT_SetupStruct *v2;
  vDSP_DFT_SetupStruct *v3;

  v2 = *(vDSP_DFT_SetupStruct **)(a1 + 16);
  if (v2)
    vDSP_DFT_DestroySetup(v2);
  v3 = *(vDSP_DFT_SetupStruct **)(a1 + 8);
  if (v3)
    vDSP_DFT_DestroySetup(v3);
  return a1;
}

uint64_t sub_1A39550F8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1A39551B4((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_1A395516C()
{
  sub_1A3953448("vector");
}

void *sub_1A3955180(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_1A3954EA8();
  return operator new(16 * a2);
}

uint64_t sub_1A39551B4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 16);
    do
    {
      v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_1A3955244((uint64_t)v12);
  return v10;
}

uint64_t sub_1A3955244(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1A3955278(a1);
  return a1;
}

void sub_1A3955278(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v1 += 16;
  }
}

void **sub_1A39552B8(void **a1)
{
  sub_1A39552E8((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1A39552E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  while (v1 != v2)
  {
    *(_QWORD *)(a1 + 16) = v1 - 16;
    v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      v1 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void sub_1A3955338(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  vDSP_DFT_SetupStruct *Setup;
  vDSP_DFT_SetupStruct *v9;
  vDSP_DFT_Setup v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  sub_1A3954AD4(a1, a2, a4);
  if (!*a4)
  {
    sub_1A39548CC((uint64_t)a4);
    Setup = vDSP_DFT_zrop_CreateSetup(0, *a3, vDSP_DFT_FORWARD);
    v9 = Setup;
    if (Setup)
      v10 = vDSP_DFT_zrop_CreateSetup(Setup, *a3, vDSP_DFT_INVERSE);
    else
      v10 = 0;
    v11 = operator new();
    *(_DWORD *)v11 = *a3;
    *(_QWORD *)(v11 + 8) = v9;
    *(_QWORD *)(v11 + 16) = v10;
    v12 = operator new(0x38uLL);
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = 0;
    *v12 = &unk_1E4A9D3E0;
    v12[4] = 0;
    v12[5] = v11;
    v12[6] = a1;
    *(_QWORD *)&v19 = v12 + 3;
    *((_QWORD *)&v19 + 1) = v12;
    sub_1A3954FD0((uint64_t)&v19, (_QWORD *)v19, v19);
    sub_1A3954BEC((uint64_t *)(a1 + 8), &v19);
    v13 = *((_QWORD *)&v19 + 1);
    *a4 = *(_QWORD *)(v19 + 16);
    a4[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
      if (*((_QWORD *)&v19 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1A39554AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  os_unfair_lock_s *v3;
  va_list va;

  va_start(va, a3);
  sub_1A39548CC((uint64_t)va);
  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

Class sub_1A39568F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Class result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  if (!qword_1EE6D5640)
  {
    v12 = xmmword_1E4A9FC60;
    v13 = 0;
    qword_1EE6D5640 = _sl_dlopen();
  }
  if (!qword_1EE6D5640)
    sub_1A3AB02F4(&v11, a2, a3, a4, a5);
  result = objc_getClass("AFLocalization");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1A3AB0370((uint64_t)result, v7, v8, v9, v10);
  qword_1EE6D5638 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1A39569D4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1A39569EC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_1A3956C78(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

void sub_1A39579A4()
{
  NSObject *v0;
  uint8_t v1[16];

  AXTTSLogCommon();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1A3940000, v0, OS_LOG_TYPE_DEFAULT, "Canceled asset download", v1, 2u);
  }

}

void sub_1A3957A48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  objc_msgSend_assistantVoiceMaps(MEMORY[0x1E0DA7910], a2, a3, a4, a5);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_deprecatedVoicesMap(v11, v5, v6, v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)qword_1EE6D51E0;
  qword_1EE6D51E0 = v9;

}

uint64_t sub_1A3957B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(double))(*(_QWORD *)(a1 + 32) + 16))((double)a2 / (double)a3);
}

void sub_1A3957B94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  void *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (a2)
    v3 = 1.0;
  else
    v3 = 0.0;
  if (a2)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, double))(v2 + 16))(*(_QWORD *)(a1 + 32), 1, 0, v3);
  }
  else
  {
    v4 = (void *)MEMORY[0x1E0CB35C8];
    v5 = *MEMORY[0x1E0CB28A8];
    v9 = *MEMORY[0x1E0CB2D68];
    v10[0] = CFSTR("Download failed");
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], 0, (uint64_t)v10, (uint64_t)&v9, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_userInfo_(v4, v7, v5, 0, (uint64_t)v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, void *, double))(v2 + 16))(v2, 1, v8, v3);

  }
}

_OWORD *VPTimeFreqConverter::VPTimeFreqConverter(_OWORD *a1, _DWORD *a2)
{
  a1[2] = 0u;
  *(_OWORD *)((char *)a1 + 169) = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  VPTimeFreqConverter::Setup((uint64_t)a1, a2);
  return a1;
}

void sub_1A3958238(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = (void *)v2[20];
  if (v4)
  {
    v2[21] = v4;
    operator delete(v4);
  }
  v5 = (void *)v2[17];
  if (v5)
  {
    v2[18] = v5;
    operator delete(v5);
  }
  v6 = (void *)v2[14];
  if (v6)
  {
    v2[15] = v6;
    operator delete(v6);
  }
  v7 = (void *)v2[11];
  if (v7)
  {
    v2[12] = v7;
    operator delete(v7);
  }
  v8 = (void *)v2[8];
  if (v8)
  {
    v2[9] = v8;
    operator delete(v8);
  }
  sub_1A39548CC(v1);
  _Unwind_Resume(a1);
}

uint64_t VPTimeFreqConverter::Setup(uint64_t a1, _DWORD *a2)
{
  int v2;
  unint64_t v3;
  uint64_t result;
  int v6;
  int v7;
  int v8;
  uint64x2_t v9;
  uint64x2_t v10;

  *(_BYTE *)(a1 + 184) = 0;
  if (*a2)
    return 4294967246;
  v2 = a2[3];
  if (v2 != a2[2])
    return 4294967246;
  v3 = a2[4];
  if ((_DWORD)v3 != 2 * v2)
    return 4294967246;
  result = 4294967246;
  if ((_DWORD)v3)
  {
    v6 = a2[5];
    if (v6)
    {
      if (v2 && v6 == (_DWORD)v3)
      {
        v7 = a2[1];
        *(_DWORD *)a1 = 0;
        *(_DWORD *)(a1 + 4) = v7;
        *(_DWORD *)(a1 + 8) = v2;
        *(_DWORD *)(a1 + 12) = v2;
        *(_DWORD *)(a1 + 16) = v3;
        *(_DWORD *)(a1 + 20) = v3;
        *(_DWORD *)(a1 + 24) = a2[6];
        *(_DWORD *)(a1 + 28) = v3 >> 1;
        *(_QWORD *)(a1 + 48) = operator new[]();
        *(_QWORD *)(a1 + 56) = operator new[]();
        if (MultiRadixRealFFT::Initialize((MultiRadixRealFFT *)(a1 + 32), *(_DWORD *)(a1 + 20)))
          return 4294967246;
        sub_1A3958768(a1 + 88, *(unsigned int *)(a1 + 20));
        v8 = *(_DWORD *)(a1 + 4);
        if ((v8 | 2) == 2)
        {
          sub_1A3958768(a1 + 64, *(unsigned int *)(a1 + 20));
          sub_1A3958768(a1 + 136, *(unsigned int *)(a1 + 20));
          CreateMagicalWindow(*(_QWORD *)(a1 + 136), *(_DWORD *)(a1 + 16), v9);
          v8 = *(_DWORD *)(a1 + 4);
        }
        if ((v8 - 1) <= 1)
        {
          sub_1A3958768(a1 + 160, *(unsigned int *)(a1 + 20));
          CreateMagicalWindow(*(_QWORD *)(a1 + 160), *(_DWORD *)(a1 + 16), v10);
          sub_1A3958768(a1 + 112, *(unsigned int *)(a1 + 20));
        }
        result = 0;
        *(_BYTE *)(a1 + 184) = 1;
      }
    }
  }
  return result;
}

void VPTimeFreqConverter::VPTimeFreqConverter(VPTimeFreqConverter *this, int a2, int a3)
{
  _DWORD v3[7];

  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 169) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  v3[0] = 0;
  v3[1] = a2;
  v3[2] = a3;
  v3[3] = a3;
  v3[4] = 2 * a3;
  v3[5] = 2 * a3;
  *(float *)&v3[6] = 1.0 / (float)(2 * a3);
  VPTimeFreqConverter::Setup((uint64_t)this, v3);
}

void sub_1A3958468(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = (void *)v2[20];
  if (v4)
  {
    v2[21] = v4;
    operator delete(v4);
  }
  v5 = (void *)v2[17];
  if (v5)
  {
    v2[18] = v5;
    operator delete(v5);
  }
  v6 = (void *)v2[14];
  if (v6)
  {
    v2[15] = v6;
    operator delete(v6);
  }
  v7 = (void *)v2[11];
  if (v7)
  {
    v2[12] = v7;
    operator delete(v7);
  }
  v8 = (void *)v2[8];
  if (v8)
  {
    v2[9] = v8;
    operator delete(v8);
  }
  sub_1A39548CC(v1);
  _Unwind_Resume(a1);
}

void VPTimeFreqConverter::~VPTimeFreqConverter(VPTimeFreqConverter *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *((_QWORD *)this + 6);
  if (v2)
    MEMORY[0x1A8596C10](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 7);
  if (v3)
    MEMORY[0x1A8596C10](v3, 0x1000C8052888210);
  v4 = (void *)*((_QWORD *)this + 20);
  if (v4)
  {
    *((_QWORD *)this + 21) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 17);
  if (v5)
  {
    *((_QWORD *)this + 18) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 14);
  if (v6)
  {
    *((_QWORD *)this + 15) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 11);
  if (v7)
  {
    *((_QWORD *)this + 12) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 8);
  if (v8)
  {
    *((_QWORD *)this + 9) = v8;
    operator delete(v8);
  }
  sub_1A39548CC((uint64_t)this + 32);
}

uint64_t VPTimeFreqConverter::IsValid(VPTimeFreqConverter *this)
{
  if (*((_BYTE *)this + 184))
    return 0;
  else
    return 4294967246;
}

uint64_t VPTimeFreqConverter::Analyze(VPTimeFreqConverter *this, const float *a2, DSPSplitComplex *a3)
{
  if (!*((_BYTE *)this + 184) || (*((_DWORD *)this + 1) | 2) != 2)
    return 4294956433;
  if (*(_DWORD *)this)
    return 4294967292;
  memcpy(*((void **)this + 8), (const void *)(*((_QWORD *)this + 8) + 4 * *((unsigned int *)this + 3)), 4 * (*((_DWORD *)this + 4) - *((_DWORD *)this + 3)));
  memcpy((void *)(*((_QWORD *)this + 8) + 4 * (*((_DWORD *)this + 4) - *((_DWORD *)this + 3))), a2, 4 * *((unsigned int *)this + 3));
  vDSP_vmul(*((const float **)this + 17), 1, *((const float **)this + 8), 1, *((float **)this + 11), 1, *((unsigned int *)this + 4));
  vDSP_vsmul(*((const float **)this + 11), 1, (const float *)this + 6, *((float **)this + 11), 1, *((unsigned int *)this + 4));
  return MultiRadixRealFFT::RealOutOfPlaceForwardTransform((VPTimeFreqConverter *)((char *)this + 32), *((DSPComplex **)this + 11), a3, 1.0);
}

uint64_t VPTimeFreqConverter::Synthesize(VPTimeFreqConverter *this, const DSPSplitComplex *a2, float *a3)
{
  uint64_t result;

  if (!*((_BYTE *)this + 184) || (*((_DWORD *)this + 1) - 1) > 1)
    return 4294956433;
  if (*(_DWORD *)this)
    return 4294967292;
  result = MultiRadixRealFFT::RealOutOfPlaceInverseTransform((VPTimeFreqConverter *)((char *)this + 32), a2, *((DSPComplex **)this + 11));
  if (!(_DWORD)result)
  {
    vDSP_vmul(*((const float **)this + 11), 1, *((const float **)this + 20), 1, *((float **)this + 11), 1, *((unsigned int *)this + 4));
    vDSP_vadd(*((const float **)this + 11), 1, *((const float **)this + 14), 1, *((float **)this + 14), 1, *((unsigned int *)this + 4));
    memcpy(a3, *((const void **)this + 14), 4 * *((unsigned int *)this + 3));
    memmove(*((void **)this + 14), (const void *)(*((_QWORD *)this + 14) + 4 * *((unsigned int *)this + 3)), 4 * (*((_DWORD *)this + 4) - *((_DWORD *)this + 3)));
    bzero((void *)(*((_QWORD *)this + 14) + 4 * (*((_DWORD *)this + 4) - *((_DWORD *)this + 3))), 4 * *((unsigned int *)this + 3));
    return 0;
  }
  return result;
}

void sub_1A3958768(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_1A39588FC((char **)a1, a2 - v2);
  }
}

uint64_t VPTimeFreqConverter_Create(int a1, int a2, VPTimeFreqConverter **a3)
{
  VPTimeFreqConverter *v6;

  v6 = (VPTimeFreqConverter *)operator new();
  VPTimeFreqConverter::VPTimeFreqConverter(v6, a1, a2);
  *a3 = v6;
  return 0;
}

void sub_1A39587F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A8596C28](v1, 0x10A0C406C6E14A4);
  _Unwind_Resume(a1);
}

uint64_t VPTimeFreqConverter_CreateWithConfig(_DWORD *a1, _QWORD *a2)
{
  _OWORD *v4;

  v4 = (_OWORD *)operator new();
  VPTimeFreqConverter::VPTimeFreqConverter(v4, a1);
  *a2 = v4;
  return 0;
}

void sub_1A395886C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A8596C28](v1, 0x10A0C406C6E14A4);
  _Unwind_Resume(a1);
}

uint64_t VPTimeFreqConverter_Dispose(VPTimeFreqConverter *a1)
{
  if (a1)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(a1);
    MEMORY[0x1A8596C28]();
  }
  return 0;
}

uint64_t VPTimeFreqConverter_IsValid(uint64_t a1)
{
  uint64_t result;

  result = 4294967246;
  if (a1)
  {
    if (*(_BYTE *)(a1 + 184))
      return 0;
    else
      return 4294967246;
  }
  return result;
}

uint64_t VPTimeFreqConverter_Analyze(VPTimeFreqConverter *a1, const float *a2, DSPSplitComplex *a3)
{
  if (a1)
    return VPTimeFreqConverter::Analyze(a1, a2, a3);
  else
    return 4294967246;
}

uint64_t VPTimeFreqConverter_Synthesize(VPTimeFreqConverter *a1, const DSPSplitComplex *a2, float *a3)
{
  if (a1)
    return VPTimeFreqConverter::Synthesize(a1, a2, a3);
  else
    return 4294967246;
}

void sub_1A39588FC(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      sub_1A395516C();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1A3958A04(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void *sub_1A3958A04(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_1A3954EA8();
  return operator new(4 * a2);
}

uint64_t TTSGetComponentsInOldSiriVoiceIdentifier(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = a1;
  objc_msgSend_componentsSeparatedByString_(v7, v8, (uint64_t)CFSTR("_"), v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend_count(v11, v12, v13, v14, v15) >= 4
    && objc_msgSend_isOldSiriVoiceIdentifier_(TTSAlternativeVoices, v16, (uint64_t)v7, v17, v18))
  {
    if (a2)
    {
      objc_msgSend_objectAtIndexedSubscript_(v11, v19, 1, v20, v21);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a3)
    {
      objc_msgSend_objectAtIndexedSubscript_(v11, v19, 2, v20, v21);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a4)
    {
      objc_msgSend_objectAtIndexedSubscript_(v11, v19, 3, v20, v21);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    v22 = 1;
  }
  else
  {
    v22 = 0;
  }

  return v22;
}

uint64_t TTSGetComponentsInNamedSiriVoiceIdentifier(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = a1;
  objc_msgSend_componentsSeparatedByString_(v7, v8, (uint64_t)CFSTR("_"), v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend_count(v11, v12, v13, v14, v15) >= 4
    && objc_msgSend_isSiriVoiceIdentifier_(TTSAlternativeVoices, v16, (uint64_t)v7, v17, v18))
  {
    if (a2)
    {
      objc_msgSend_objectAtIndexedSubscript_(v11, v19, 1, v20, v21);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a3)
    {
      objc_msgSend_objectAtIndexedSubscript_(v11, v19, 2, v20, v21);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a4)
    {
      objc_msgSend_objectAtIndexedSubscript_(v11, v19, 3, v20, v21);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    v22 = 1;
  }
  else
  {
    v22 = 0;
  }

  return v22;
}

BOOL TTSGetComponentsInNashvilleVoiceIdentifier(void *a1, char *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  objc_msgSend_componentsSeparatedByString_(a1, a2, (uint64_t)CFSTR("-"), a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend_count(v7, v8, v9, v10, v11) >= 2)
  {
    objc_msgSend_lastObject(v7, v12, v13, v14, v15);
    *a3 = (id)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend_count(v7, v17, v18, v19, v20);
    objc_msgSend_subarrayWithRange_(v7, v22, 0, v21 - 1, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_componentsJoinedByString_(v24, v25, (uint64_t)CFSTR("-"), v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_componentsSeparatedByString_(v28, v29, (uint64_t)CFSTR("."), v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = objc_msgSend_count(v32, v33, v34, v35, v36);
    v16 = v37 > 1;
    if (v37 >= 2)
    {
      objc_msgSend_lastObject(v32, v38, v39, v40, v41);
      *(_QWORD *)a2 = (id)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void AUSpeechEnhancerV2::AUSpeechEnhancerV2(AUSpeechEnhancerV2 *this, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = ausdk::AUBase::AUBase(this, a2, 1, 1, 0);
  *(_QWORD *)v3 = &off_1E4A9C380;
  *((_QWORD *)v3 + 69) = 0;
  *((_DWORD *)v3 + 140) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((_WORD *)v3 + 272) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *(_OWORD *)((char *)v3 + 632) = 0u;
  *((_DWORD *)v3 + 162) = 1;
  *(_QWORD *)((char *)v3 + 652) = 0;
  *(_QWORD *)((char *)v3 + 668) = 0;
  *(_QWORD *)((char *)v3 + 660) = 0;
  *((_DWORD *)v3 + 169) = 0;
  sub_1A3959280((void **)v3 + 82);
  v4 = *((_QWORD *)this + 9);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  else
    v5 = **((_QWORD **)this + 6);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, (*((_QWORD *)this + 83) - *((_QWORD *)this + 82)) >> 5);
  ausdk::AUBase::CreateElements((uint64_t)this);
  v6 = *((_QWORD *)this + 82);
  if (*((_QWORD *)this + 83) != v6)
  {
    v7 = 0;
    v8 = 24;
    do
    {
      ausdk::AUBase::SetParameter(this, v7++, 0, 0, *(float *)(v6 + v8));
      v6 = *((_QWORD *)this + 82);
      v8 += 32;
    }
    while (v7 < (*((_QWORD *)this + 83) - v6) >> 5);
  }
}

void sub_1A3959240(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 83) = v6;
    operator delete(v6);
  }
  sub_1A395D010(v2);
  v7 = *v4;
  if (*v4)
  {
    *((_QWORD *)v1 + 72) = v7;
    operator delete(v7);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

void sub_1A3959280(void **a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  __int128 v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  __int128 v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  __int128 v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  __int128 v135;
  unint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  __int128 v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  __int128 v159;
  unint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  __int128 v171;
  unint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  __int128 v183;
  unint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  __int128 v195;
  unint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  __int128 v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  char *v214;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  __int128 v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;
  __int128 v231;
  unint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  char *v242;
  __int128 v243;
  unint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  __int128 v255;
  unint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  __int128 v267;
  unint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  char *v274;
  char *v275;
  char *v276;
  char *v277;
  char *v278;
  __int128 v279;
  unint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  __int128 v291;
  unint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char *v298;
  char *v299;
  char *v300;
  char *v301;
  char *v302;
  __int128 v303;
  unint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  char *v310;
  char *v311;
  char *v312;
  char *v313;
  char *v314;
  __int128 v315;
  unint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  char *v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  __int128 v327;
  unint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  char *v334;
  char *v335;
  char *v336;
  char *v337;
  char *v338;
  __int128 v339;
  unint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  char *v346;
  char *v347;
  char *v348;
  char *v349;
  char *v350;
  __int128 v351;
  unint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  char *v358;
  char *v359;
  char *v360;
  char *v361;
  char *v362;
  __int128 v363;
  unint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  char *v370;
  char *v371;
  char *v372;
  char *v373;
  char *v374;
  __int128 v375;
  unint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  char *v382;
  char *v383;
  char *v384;
  char *v385;
  char *v386;
  __int128 v387;
  unint64_t v388;
  _QWORD *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  char *v394;
  char *v395;
  char *v396;
  char *v397;
  char *v398;
  __int128 v399;
  unint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  char *v406;
  char *v407;
  char *v408;
  char *v409;
  char *v410;
  __int128 v411;
  unint64_t v412;
  _QWORD *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  char *v418;
  char *v419;
  char *v420;
  char *v421;
  char *v422;
  __int128 v423;
  unint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t v429;
  char *v430;
  char *v431;
  char *v432;
  char *v433;
  char *v434;
  __int128 v435;
  unint64_t v436;
  _QWORD *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unint64_t v441;
  char *v442;
  char *v443;
  char *v444;
  char *v445;
  char *v446;
  __int128 v447;
  unint64_t v448;
  _QWORD *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  char *v454;
  char *v455;
  char *v456;
  char *v457;
  char *v458;
  __int128 v459;
  unint64_t v460;
  _QWORD *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  char *v466;
  char *v467;
  char *v468;
  char *v469;
  char *v470;
  __int128 v471;
  unint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  char *v478;
  char *v479;
  char *v480;
  char *v481;
  char *v482;
  __int128 v483;
  unint64_t v484;
  _QWORD *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  char *v490;
  char *v491;
  char *v492;
  char *v493;
  char *v494;
  __int128 v495;
  unint64_t v496;
  _QWORD *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  unint64_t v501;
  char *v502;
  char *v503;
  char *v504;
  char *v505;
  char *v506;
  __int128 v507;
  unint64_t v508;
  _QWORD *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  unint64_t v513;
  char *v514;
  char *v515;
  char *v516;
  char *v517;
  char *v518;
  __int128 v519;
  unint64_t v520;
  _QWORD *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  char *v526;
  char *v527;
  char *v528;
  char *v529;
  char *v530;
  __int128 v531;
  unint64_t v532;
  _QWORD *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  unint64_t v537;
  char *v538;
  char *v539;
  char *v540;
  char *v541;
  char *v542;
  __int128 v543;
  unint64_t v544;
  _QWORD *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  char *v550;
  char *v551;
  char *v552;
  char *v553;
  char *v554;
  __int128 v555;
  unint64_t v556;
  _QWORD *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  char *v562;
  char *v563;
  char *v564;
  char *v565;
  char *v566;
  __int128 v567;
  unint64_t v568;
  _QWORD *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  char *v574;
  char *v575;
  char *v576;
  char *v577;
  char *v578;
  __int128 v579;
  unint64_t v580;
  _QWORD *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t v585;
  char *v586;
  char *v587;
  char *v588;
  char *v589;
  char *v590;
  __int128 v591;
  unint64_t v592;
  _QWORD *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  char *v598;
  char *v599;
  char *v600;
  char *v601;
  char *v602;
  __int128 v603;
  unint64_t v604;
  _QWORD *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  unint64_t v609;
  char *v610;
  char *v611;
  char *v612;
  char *v613;
  char *v614;
  __int128 v615;
  unint64_t v616;
  _QWORD *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  unint64_t v621;
  char *v622;
  char *v623;
  char *v624;
  char *v625;
  char *v626;
  __int128 v627;
  unint64_t v628;
  _QWORD *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  unint64_t v633;
  char *v634;
  char *v635;
  char *v636;
  char *v637;
  char *v638;
  __int128 v639;
  unint64_t v640;
  _QWORD *v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  unint64_t v645;
  char *v646;
  char *v647;
  char *v648;
  char *v649;
  char *v650;
  __int128 v651;
  unint64_t v652;
  _QWORD *v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  unint64_t v657;
  char *v658;
  char *v659;
  char *v660;
  char *v661;
  char *v662;
  __int128 v663;
  unint64_t v664;
  _QWORD *v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  unint64_t v669;
  char *v670;
  char *v671;
  char *v672;
  char *v673;
  char *v674;
  __int128 v675;
  unint64_t v676;
  _QWORD *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  unint64_t v681;
  char *v682;
  char *v683;
  char *v684;
  char *v685;
  char *v686;
  __int128 v687;
  unint64_t v688;
  _QWORD *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  unint64_t v693;
  char *v694;
  char *v695;
  char *v696;
  char *v697;
  char *v698;
  __int128 v699;
  unint64_t v700;
  _QWORD *v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  unint64_t v705;
  char *v706;
  char *v707;
  char *v708;
  char *v709;
  char *v710;
  __int128 v711;
  unint64_t v712;
  _QWORD *v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  unint64_t v717;
  char *v718;
  char *v719;
  char *v720;
  char *v721;
  char *v722;
  __int128 v723;
  unint64_t v724;
  _QWORD *v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  unint64_t v729;
  char *v730;
  char *v731;
  char *v732;
  char *v733;
  char *v734;
  __int128 v735;
  unint64_t v736;
  _QWORD *v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  unint64_t v741;
  char *v742;
  char *v743;
  char *v744;
  char *v745;
  char *v746;
  __int128 v747;

  v3 = (uint64_t)(a1 + 2);
  v2 = (unint64_t)a1[2];
  v4 = a1[1];
  if ((unint64_t)v4 >= v2)
  {
    v6 = ((char *)v4 - (_BYTE *)*a1) >> 5;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 59)
      goto LABEL_995;
    v8 = v2 - (_QWORD)*a1;
    if (v8 >> 4 > v7)
      v7 = v8 >> 4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
      v10 = (char *)sub_1A395ED34((uint64_t)(a1 + 2), v9);
    else
      v10 = 0;
    v11 = &v10[32 * v6];
    v12 = &v10[32 * v9];
    *(_QWORD *)v11 = CFSTR("Bypass Algorithm + Auto Volume");
    *((_QWORD *)v11 + 1) = 0x8000000000000002;
    *((_QWORD *)v11 + 2) = 0x3F80000000000000;
    *((_QWORD *)v11 + 3) = 0xFFFFFFFF00000000;
    v5 = v11 + 32;
    v14 = (char *)*a1;
    v13 = (char *)a1[1];
    if (v13 != *a1)
    {
      do
      {
        v15 = *((_OWORD *)v13 - 1);
        *((_OWORD *)v11 - 2) = *((_OWORD *)v13 - 2);
        *((_OWORD *)v11 - 1) = v15;
        v11 -= 32;
        v13 -= 32;
      }
      while (v13 != v14);
      v13 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = v5;
    a1[2] = v12;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v4 = CFSTR("Bypass Algorithm + Auto Volume");
    v4[1] = 0x8000000000000002;
    v4[2] = 0x3F80000000000000;
    v4[3] = 0xFFFFFFFF00000000;
    v5 = v4 + 4;
  }
  a1[1] = v5;
  v16 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v16)
  {
    v18 = ((char *)v5 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v18 + 1) >> 59)
      goto LABEL_995;
    v19 = v16 - (_QWORD)*a1;
    v20 = v19 >> 4;
    if (v19 >> 4 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
      v21 = 0x7FFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)sub_1A395ED34(v3, v21);
    else
      v22 = 0;
    v23 = &v22[32 * v18];
    v24 = &v22[32 * v21];
    *(_QWORD *)v23 = CFSTR("Wind Flag");
    *((_QWORD *)v23 + 1) = 0x800000000000;
    *((_QWORD *)v23 + 2) = 0x3F80000000000000;
    *((_QWORD *)v23 + 3) = 0x200000000;
    v17 = v23 + 32;
    v26 = (char *)*a1;
    v25 = (char *)a1[1];
    if (v25 != *a1)
    {
      do
      {
        v27 = *((_OWORD *)v25 - 1);
        *((_OWORD *)v23 - 2) = *((_OWORD *)v25 - 2);
        *((_OWORD *)v23 - 1) = v27;
        v23 -= 32;
        v25 -= 32;
      }
      while (v25 != v26);
      v25 = (char *)*a1;
    }
    *a1 = v23;
    a1[1] = v17;
    a1[2] = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v5 = CFSTR("Wind Flag");
    v5[1] = 0x800000000000;
    v5[2] = 0x3F80000000000000;
    v5[3] = 0x200000000;
    v17 = v5 + 4;
  }
  a1[1] = v17;
  v28 = (unint64_t)a1[2];
  if ((unint64_t)v17 >= v28)
  {
    v30 = ((char *)v17 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v30 + 1) >> 59)
      goto LABEL_995;
    v31 = v28 - (_QWORD)*a1;
    v32 = v31 >> 4;
    if (v31 >> 4 <= (unint64_t)(v30 + 1))
      v32 = v30 + 1;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0)
      v33 = 0x7FFFFFFFFFFFFFFLL;
    else
      v33 = v32;
    if (v33)
      v34 = (char *)sub_1A395ED34(v3, v33);
    else
      v34 = 0;
    v35 = &v34[32 * v30];
    v36 = &v34[32 * v33];
    *(_QWORD *)v35 = CFSTR("Loudspeaker Calibration");
    *((_QWORD *)v35 + 1) = 0x800000000000000DLL;
    *((_QWORD *)v35 + 2) = 0x43160000C2480000;
    *((_QWORD *)v35 + 3) = 0x342B40000;
    v29 = v35 + 32;
    v38 = (char *)*a1;
    v37 = (char *)a1[1];
    if (v37 != *a1)
    {
      do
      {
        v39 = *((_OWORD *)v37 - 1);
        *((_OWORD *)v35 - 2) = *((_OWORD *)v37 - 2);
        *((_OWORD *)v35 - 1) = v39;
        v35 -= 32;
        v37 -= 32;
      }
      while (v37 != v38);
      v37 = (char *)*a1;
    }
    *a1 = v35;
    a1[1] = v29;
    a1[2] = v36;
    if (v37)
      operator delete(v37);
  }
  else
  {
    *v17 = CFSTR("Loudspeaker Calibration");
    v17[1] = 0x800000000000000DLL;
    v17[2] = 0x43160000C2480000;
    v17[3] = 0x342B40000;
    v29 = v17 + 4;
  }
  a1[1] = v29;
  v40 = (unint64_t)a1[2];
  if ((unint64_t)v29 >= v40)
  {
    v42 = ((char *)v29 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v42 + 1) >> 59)
      goto LABEL_995;
    v43 = v40 - (_QWORD)*a1;
    v44 = v43 >> 4;
    if (v43 >> 4 <= (unint64_t)(v42 + 1))
      v44 = v42 + 1;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFE0)
      v45 = 0x7FFFFFFFFFFFFFFLL;
    else
      v45 = v44;
    if (v45)
      v46 = (char *)sub_1A395ED34(v3, v45);
    else
      v46 = 0;
    v47 = &v46[32 * v42];
    v48 = &v46[32 * v45];
    *(_QWORD *)v47 = CFSTR("Signal Spectrum Smoothing Time");
    *((_QWORD *)v47 + 1) = 0x8000000000000004;
    *((_QWORD *)v47 + 2) = 0x4120000000000000;
    *((_QWORD *)v47 + 3) = 0x340800000;
    v41 = v47 + 32;
    v50 = (char *)*a1;
    v49 = (char *)a1[1];
    if (v49 != *a1)
    {
      do
      {
        v51 = *((_OWORD *)v49 - 1);
        *((_OWORD *)v47 - 2) = *((_OWORD *)v49 - 2);
        *((_OWORD *)v47 - 1) = v51;
        v47 -= 32;
        v49 -= 32;
      }
      while (v49 != v50);
      v49 = (char *)*a1;
    }
    *a1 = v47;
    a1[1] = v41;
    a1[2] = v48;
    if (v49)
      operator delete(v49);
  }
  else
  {
    *v29 = CFSTR("Signal Spectrum Smoothing Time");
    v29[1] = 0x8000000000000004;
    v29[2] = 0x4120000000000000;
    v29[3] = 0x340800000;
    v41 = v29 + 4;
  }
  a1[1] = v41;
  v52 = (unint64_t)a1[2];
  if ((unint64_t)v41 >= v52)
  {
    v54 = ((char *)v41 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v54 + 1) >> 59)
      goto LABEL_995;
    v55 = v52 - (_QWORD)*a1;
    v56 = v55 >> 4;
    if (v55 >> 4 <= (unint64_t)(v54 + 1))
      v56 = v54 + 1;
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0)
      v57 = 0x7FFFFFFFFFFFFFFLL;
    else
      v57 = v56;
    if (v57)
      v58 = (char *)sub_1A395ED34(v3, v57);
    else
      v58 = 0;
    v59 = &v58[32 * v54];
    v60 = &v58[32 * v57];
    *(_QWORD *)v59 = CFSTR("Noise Spectrum Attack Time");
    *((_QWORD *)v59 + 1) = 0x8000000000000004;
    *((_QWORD *)v59 + 2) = 0x4120000000000000;
    *((_QWORD *)v59 + 3) = 0x340000000;
    v53 = v59 + 32;
    v62 = (char *)*a1;
    v61 = (char *)a1[1];
    if (v61 != *a1)
    {
      do
      {
        v63 = *((_OWORD *)v61 - 1);
        *((_OWORD *)v59 - 2) = *((_OWORD *)v61 - 2);
        *((_OWORD *)v59 - 1) = v63;
        v59 -= 32;
        v61 -= 32;
      }
      while (v61 != v62);
      v61 = (char *)*a1;
    }
    *a1 = v59;
    a1[1] = v53;
    a1[2] = v60;
    if (v61)
      operator delete(v61);
  }
  else
  {
    *v41 = CFSTR("Noise Spectrum Attack Time");
    v41[1] = 0x8000000000000004;
    v41[2] = 0x4120000000000000;
    v41[3] = 0x340000000;
    v53 = v41 + 4;
  }
  a1[1] = v53;
  v64 = (unint64_t)a1[2];
  if ((unint64_t)v53 >= v64)
  {
    v66 = ((char *)v53 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v66 + 1) >> 59)
      goto LABEL_995;
    v67 = v64 - (_QWORD)*a1;
    v68 = v67 >> 4;
    if (v67 >> 4 <= (unint64_t)(v66 + 1))
      v68 = v66 + 1;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFE0)
      v69 = 0x7FFFFFFFFFFFFFFLL;
    else
      v69 = v68;
    if (v69)
      v70 = (char *)sub_1A395ED34(v3, v69);
    else
      v70 = 0;
    v71 = &v70[32 * v66];
    v72 = &v70[32 * v69];
    *(_QWORD *)v71 = CFSTR("Noise Spectrum Release Time");
    *((_QWORD *)v71 + 1) = 0x8000000000000004;
    *((_QWORD *)v71 + 2) = 0x4120000000000000;
    *((_QWORD *)v71 + 3) = 0x33F000000;
    v65 = v71 + 32;
    v74 = (char *)*a1;
    v73 = (char *)a1[1];
    if (v73 != *a1)
    {
      do
      {
        v75 = *((_OWORD *)v73 - 1);
        *((_OWORD *)v71 - 2) = *((_OWORD *)v73 - 2);
        *((_OWORD *)v71 - 1) = v75;
        v71 -= 32;
        v73 -= 32;
      }
      while (v73 != v74);
      v73 = (char *)*a1;
    }
    *a1 = v71;
    a1[1] = v65;
    a1[2] = v72;
    if (v73)
      operator delete(v73);
  }
  else
  {
    *v53 = CFSTR("Noise Spectrum Release Time");
    v53[1] = 0x8000000000000004;
    v53[2] = 0x4120000000000000;
    v53[3] = 0x33F000000;
    v65 = v53 + 4;
  }
  a1[1] = v65;
  v76 = (unint64_t)a1[2];
  if ((unint64_t)v65 >= v76)
  {
    v78 = ((char *)v65 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v78 + 1) >> 59)
      goto LABEL_995;
    v79 = v76 - (_QWORD)*a1;
    v80 = v79 >> 4;
    if (v79 >> 4 <= (unint64_t)(v78 + 1))
      v80 = v78 + 1;
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFE0)
      v81 = 0x7FFFFFFFFFFFFFFLL;
    else
      v81 = v80;
    if (v81)
      v82 = (char *)sub_1A395ED34(v3, v81);
    else
      v82 = 0;
    v83 = &v82[32 * v78];
    v84 = &v82[32 * v81];
    *(_QWORD *)v83 = CFSTR("Environmental Noise Power (dBA)");
    *((_QWORD *)v83 + 1) = 0x80000000000DLL;
    *((_QWORD *)v83 + 2) = 0x4302000000000000;
    *((_QWORD *)v83 + 3) = 0x241F00000;
    v77 = v83 + 32;
    v86 = (char *)*a1;
    v85 = (char *)a1[1];
    if (v85 != *a1)
    {
      do
      {
        v87 = *((_OWORD *)v85 - 1);
        *((_OWORD *)v83 - 2) = *((_OWORD *)v85 - 2);
        *((_OWORD *)v83 - 1) = v87;
        v83 -= 32;
        v85 -= 32;
      }
      while (v85 != v86);
      v85 = (char *)*a1;
    }
    *a1 = v83;
    a1[1] = v77;
    a1[2] = v84;
    if (v85)
      operator delete(v85);
  }
  else
  {
    *v65 = CFSTR("Environmental Noise Power (dBA)");
    v65[1] = 0x80000000000DLL;
    v65[2] = 0x4302000000000000;
    v65[3] = 0x241F00000;
    v77 = v65 + 4;
  }
  a1[1] = v77;
  v88 = (unint64_t)a1[2];
  if ((unint64_t)v77 >= v88)
  {
    v90 = ((char *)v77 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v90 + 1) >> 59)
      goto LABEL_995;
    v91 = v88 - (_QWORD)*a1;
    v92 = v91 >> 4;
    if (v91 >> 4 <= (unint64_t)(v90 + 1))
      v92 = v90 + 1;
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFE0)
      v93 = 0x7FFFFFFFFFFFFFFLL;
    else
      v93 = v92;
    if (v93)
      v94 = (char *)sub_1A395ED34(v3, v93);
    else
      v94 = 0;
    v95 = &v94[32 * v90];
    v96 = &v94[32 * v93];
    *(_QWORD *)v95 = CFSTR("Auto Volume Low Noise");
    *((_QWORD *)v95 + 1) = 0x800000000000000DLL;
    *((_QWORD *)v95 + 2) = 0x42F0000000000000;
    *((_QWORD *)v95 + 3) = 0x442480000;
    v89 = v95 + 32;
    v98 = (char *)*a1;
    v97 = (char *)a1[1];
    if (v97 != *a1)
    {
      do
      {
        v99 = *((_OWORD *)v97 - 1);
        *((_OWORD *)v95 - 2) = *((_OWORD *)v97 - 2);
        *((_OWORD *)v95 - 1) = v99;
        v95 -= 32;
        v97 -= 32;
      }
      while (v97 != v98);
      v97 = (char *)*a1;
    }
    *a1 = v95;
    a1[1] = v89;
    a1[2] = v96;
    if (v97)
      operator delete(v97);
  }
  else
  {
    *v77 = CFSTR("Auto Volume Low Noise");
    v77[1] = 0x800000000000000DLL;
    v77[2] = 0x42F0000000000000;
    v77[3] = 0x442480000;
    v89 = v77 + 4;
  }
  a1[1] = v89;
  v100 = (unint64_t)a1[2];
  if ((unint64_t)v89 >= v100)
  {
    v102 = ((char *)v89 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v102 + 1) >> 59)
      goto LABEL_995;
    v103 = v100 - (_QWORD)*a1;
    v104 = v103 >> 4;
    if (v103 >> 4 <= (unint64_t)(v102 + 1))
      v104 = v102 + 1;
    if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFE0)
      v105 = 0x7FFFFFFFFFFFFFFLL;
    else
      v105 = v104;
    if (v105)
      v106 = (char *)sub_1A395ED34(v3, v105);
    else
      v106 = 0;
    v107 = &v106[32 * v102];
    v108 = &v106[32 * v105];
    *(_QWORD *)v107 = CFSTR("Auto Volume High Noise");
    *((_QWORD *)v107 + 1) = 0x800000000000000DLL;
    *((_QWORD *)v107 + 2) = 0x42F0000000000000;
    *((_QWORD *)v107 + 3) = 0x442C80000;
    v101 = v107 + 32;
    v110 = (char *)*a1;
    v109 = (char *)a1[1];
    if (v109 != *a1)
    {
      do
      {
        v111 = *((_OWORD *)v109 - 1);
        *((_OWORD *)v107 - 2) = *((_OWORD *)v109 - 2);
        *((_OWORD *)v107 - 1) = v111;
        v107 -= 32;
        v109 -= 32;
      }
      while (v109 != v110);
      v109 = (char *)*a1;
    }
    *a1 = v107;
    a1[1] = v101;
    a1[2] = v108;
    if (v109)
      operator delete(v109);
  }
  else
  {
    *v89 = CFSTR("Auto Volume High Noise");
    v89[1] = 0x800000000000000DLL;
    v89[2] = 0x42F0000000000000;
    v89[3] = 0x442C80000;
    v101 = v89 + 4;
  }
  a1[1] = v101;
  v112 = (unint64_t)a1[2];
  if ((unint64_t)v101 >= v112)
  {
    v114 = ((char *)v101 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v114 + 1) >> 59)
      goto LABEL_995;
    v115 = v112 - (_QWORD)*a1;
    v116 = v115 >> 4;
    if (v115 >> 4 <= (unint64_t)(v114 + 1))
      v116 = v114 + 1;
    if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFE0)
      v117 = 0x7FFFFFFFFFFFFFFLL;
    else
      v117 = v116;
    if (v117)
      v118 = (char *)sub_1A395ED34(v3, v117);
    else
      v118 = 0;
    v119 = &v118[32 * v114];
    v120 = &v118[32 * v117];
    *(_QWORD *)v119 = CFSTR("Auto Volume Low Slope");
    *((_QWORD *)v119 + 1) = 0x8000000000000000;
    *((_QWORD *)v119 + 2) = 0x40A0000000000000;
    *((_QWORD *)v119 + 3) = 0x43ECCCCCDLL;
    v113 = v119 + 32;
    v122 = (char *)*a1;
    v121 = (char *)a1[1];
    if (v121 != *a1)
    {
      do
      {
        v123 = *((_OWORD *)v121 - 1);
        *((_OWORD *)v119 - 2) = *((_OWORD *)v121 - 2);
        *((_OWORD *)v119 - 1) = v123;
        v119 -= 32;
        v121 -= 32;
      }
      while (v121 != v122);
      v121 = (char *)*a1;
    }
    *a1 = v119;
    a1[1] = v113;
    a1[2] = v120;
    if (v121)
      operator delete(v121);
  }
  else
  {
    *v101 = CFSTR("Auto Volume Low Slope");
    v101[1] = 0x8000000000000000;
    v101[2] = 0x40A0000000000000;
    v101[3] = 0x43ECCCCCDLL;
    v113 = v101 + 4;
  }
  a1[1] = v113;
  v124 = (unint64_t)a1[2];
  if ((unint64_t)v113 >= v124)
  {
    v126 = ((char *)v113 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v126 + 1) >> 59)
      goto LABEL_995;
    v127 = v124 - (_QWORD)*a1;
    v128 = v127 >> 4;
    if (v127 >> 4 <= (unint64_t)(v126 + 1))
      v128 = v126 + 1;
    if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFE0)
      v129 = 0x7FFFFFFFFFFFFFFLL;
    else
      v129 = v128;
    if (v129)
      v130 = (char *)sub_1A395ED34(v3, v129);
    else
      v130 = 0;
    v131 = &v130[32 * v126];
    v132 = &v130[32 * v129];
    *(_QWORD *)v131 = CFSTR("Auto Volume High Slope");
    *((_QWORD *)v131 + 1) = 0x8000000000000000;
    *((_QWORD *)v131 + 2) = 0x40A0000000000000;
    *((_QWORD *)v131 + 3) = 0x43F4CCCCDLL;
    v125 = v131 + 32;
    v134 = (char *)*a1;
    v133 = (char *)a1[1];
    if (v133 != *a1)
    {
      do
      {
        v135 = *((_OWORD *)v133 - 1);
        *((_OWORD *)v131 - 2) = *((_OWORD *)v133 - 2);
        *((_OWORD *)v131 - 1) = v135;
        v131 -= 32;
        v133 -= 32;
      }
      while (v133 != v134);
      v133 = (char *)*a1;
    }
    *a1 = v131;
    a1[1] = v125;
    a1[2] = v132;
    if (v133)
      operator delete(v133);
  }
  else
  {
    *v113 = CFSTR("Auto Volume High Slope");
    v113[1] = 0x8000000000000000;
    v113[2] = 0x40A0000000000000;
    v113[3] = 0x43F4CCCCDLL;
    v125 = v113 + 4;
  }
  a1[1] = v125;
  v136 = (unint64_t)a1[2];
  if ((unint64_t)v125 >= v136)
  {
    v138 = ((char *)v125 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v138 + 1) >> 59)
      goto LABEL_995;
    v139 = v136 - (_QWORD)*a1;
    v140 = v139 >> 4;
    if (v139 >> 4 <= (unint64_t)(v138 + 1))
      v140 = v138 + 1;
    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFE0)
      v141 = 0x7FFFFFFFFFFFFFFLL;
    else
      v141 = v140;
    if (v141)
      v142 = (char *)sub_1A395ED34(v3, v141);
    else
      v142 = 0;
    v143 = &v142[32 * v138];
    v144 = &v142[32 * v141];
    *(_QWORD *)v143 = CFSTR("Total Volume Max Gain");
    *((_QWORD *)v143 + 1) = 0x800000000000000DLL;
    *((_QWORD *)v143 + 2) = 0x41F00000C1200000;
    *((_QWORD *)v143 + 3) = 0x440A00000;
    v137 = v143 + 32;
    v146 = (char *)*a1;
    v145 = (char *)a1[1];
    if (v145 != *a1)
    {
      do
      {
        v147 = *((_OWORD *)v145 - 1);
        *((_OWORD *)v143 - 2) = *((_OWORD *)v145 - 2);
        *((_OWORD *)v143 - 1) = v147;
        v143 -= 32;
        v145 -= 32;
      }
      while (v145 != v146);
      v145 = (char *)*a1;
    }
    *a1 = v143;
    a1[1] = v137;
    a1[2] = v144;
    if (v145)
      operator delete(v145);
  }
  else
  {
    *v125 = CFSTR("Total Volume Max Gain");
    v125[1] = 0x800000000000000DLL;
    v125[2] = 0x41F00000C1200000;
    v125[3] = 0x440A00000;
    v137 = v125 + 4;
  }
  a1[1] = v137;
  v148 = (unint64_t)a1[2];
  if ((unint64_t)v137 >= v148)
  {
    v150 = ((char *)v137 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v150 + 1) >> 59)
      goto LABEL_995;
    v151 = v148 - (_QWORD)*a1;
    v152 = v151 >> 4;
    if (v151 >> 4 <= (unint64_t)(v150 + 1))
      v152 = v150 + 1;
    if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFE0)
      v153 = 0x7FFFFFFFFFFFFFFLL;
    else
      v153 = v152;
    if (v153)
      v154 = (char *)sub_1A395ED34(v3, v153);
    else
      v154 = 0;
    v155 = &v154[32 * v150];
    v156 = &v154[32 * v153];
    *(_QWORD *)v155 = CFSTR("Auto Volume Gain");
    *((_QWORD *)v155 + 1) = 0x80000000000DLL;
    *((_QWORD *)v155 + 2) = 0x41F0000000000000;
    *((_QWORD *)v155 + 3) = 0x400000000;
    v149 = v155 + 32;
    v158 = (char *)*a1;
    v157 = (char *)a1[1];
    if (v157 != *a1)
    {
      do
      {
        v159 = *((_OWORD *)v157 - 1);
        *((_OWORD *)v155 - 2) = *((_OWORD *)v157 - 2);
        *((_OWORD *)v155 - 1) = v159;
        v155 -= 32;
        v157 -= 32;
      }
      while (v157 != v158);
      v157 = (char *)*a1;
    }
    *a1 = v155;
    a1[1] = v149;
    a1[2] = v156;
    if (v157)
      operator delete(v157);
  }
  else
  {
    *v137 = CFSTR("Auto Volume Gain");
    v137[1] = 0x80000000000DLL;
    v137[2] = 0x41F0000000000000;
    v137[3] = 0x400000000;
    v149 = v137 + 4;
  }
  a1[1] = v149;
  v160 = (unint64_t)a1[2];
  if ((unint64_t)v149 >= v160)
  {
    v162 = ((char *)v149 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v162 + 1) >> 59)
      goto LABEL_995;
    v163 = v160 - (_QWORD)*a1;
    v164 = v163 >> 4;
    if (v163 >> 4 <= (unint64_t)(v162 + 1))
      v164 = v162 + 1;
    if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFE0)
      v165 = 0x7FFFFFFFFFFFFFFLL;
    else
      v165 = v164;
    if (v165)
      v166 = (char *)sub_1A395ED34(v3, v165);
    else
      v166 = 0;
    v167 = &v166[32 * v162];
    v168 = &v166[32 * v165];
    *(_QWORD *)v167 = CFSTR("Bandwidth");
    *((_QWORD *)v167 + 1) = 0x8000000000000008;
    *((_QWORD *)v167 + 2) = 0x469C400042C80000;
    *((_QWORD *)v167 + 3) = 0x3463B8000;
    v161 = v167 + 32;
    v170 = (char *)*a1;
    v169 = (char *)a1[1];
    if (v169 != *a1)
    {
      do
      {
        v171 = *((_OWORD *)v169 - 1);
        *((_OWORD *)v167 - 2) = *((_OWORD *)v169 - 2);
        *((_OWORD *)v167 - 1) = v171;
        v167 -= 32;
        v169 -= 32;
      }
      while (v169 != v170);
      v169 = (char *)*a1;
    }
    *a1 = v167;
    a1[1] = v161;
    a1[2] = v168;
    if (v169)
      operator delete(v169);
  }
  else
  {
    *v149 = CFSTR("Bandwidth");
    v149[1] = 0x8000000000000008;
    v149[2] = 0x469C400042C80000;
    v149[3] = 0x3463B8000;
    v161 = v149 + 4;
  }
  a1[1] = v161;
  v172 = (unint64_t)a1[2];
  if ((unint64_t)v161 >= v172)
  {
    v174 = ((char *)v161 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v174 + 1) >> 59)
      goto LABEL_995;
    v175 = v172 - (_QWORD)*a1;
    v176 = v175 >> 4;
    if (v175 >> 4 <= (unint64_t)(v174 + 1))
      v176 = v174 + 1;
    if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFE0)
      v177 = 0x7FFFFFFFFFFFFFFLL;
    else
      v177 = v176;
    if (v177)
      v178 = (char *)sub_1A395ED34(v3, v177);
    else
      v178 = 0;
    v179 = &v178[32 * v174];
    v180 = &v178[32 * v177];
    *(_QWORD *)v179 = CFSTR("Regularization High SNR");
    *((_QWORD *)v179 + 1) = 0x840000000000000DLL;
    *((_QWORD *)v179 + 2) = 0x4248000040A00000;
    *((_QWORD *)v179 + 3) = 0x541700000;
    v173 = v179 + 32;
    v182 = (char *)*a1;
    v181 = (char *)a1[1];
    if (v181 != *a1)
    {
      do
      {
        v183 = *((_OWORD *)v181 - 1);
        *((_OWORD *)v179 - 2) = *((_OWORD *)v181 - 2);
        *((_OWORD *)v179 - 1) = v183;
        v179 -= 32;
        v181 -= 32;
      }
      while (v181 != v182);
      v181 = (char *)*a1;
    }
    *a1 = v179;
    a1[1] = v173;
    a1[2] = v180;
    if (v181)
      operator delete(v181);
  }
  else
  {
    *v161 = CFSTR("Regularization High SNR");
    v161[1] = 0x840000000000000DLL;
    v161[2] = 0x4248000040A00000;
    v161[3] = 0x541700000;
    v173 = v161 + 4;
  }
  a1[1] = v173;
  v184 = (unint64_t)a1[2];
  if ((unint64_t)v173 >= v184)
  {
    v186 = ((char *)v173 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v186 + 1) >> 59)
      goto LABEL_995;
    v187 = v184 - (_QWORD)*a1;
    v188 = v187 >> 4;
    if (v187 >> 4 <= (unint64_t)(v186 + 1))
      v188 = v186 + 1;
    if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFE0)
      v189 = 0x7FFFFFFFFFFFFFFLL;
    else
      v189 = v188;
    if (v189)
      v190 = (char *)sub_1A395ED34(v3, v189);
    else
      v190 = 0;
    v191 = &v190[32 * v186];
    v192 = &v190[32 * v189];
    *(_QWORD *)v191 = CFSTR("EQ Min Gain (low freq)");
    *((_QWORD *)v191 + 1) = 0x800000000000000DLL;
    *((_QWORD *)v191 + 2) = 3248488448;
    *((_QWORD *)v191 + 3) = 0x5C0A00000;
    v185 = v191 + 32;
    v194 = (char *)*a1;
    v193 = (char *)a1[1];
    if (v193 != *a1)
    {
      do
      {
        v195 = *((_OWORD *)v193 - 1);
        *((_OWORD *)v191 - 2) = *((_OWORD *)v193 - 2);
        *((_OWORD *)v191 - 1) = v195;
        v191 -= 32;
        v193 -= 32;
      }
      while (v193 != v194);
      v193 = (char *)*a1;
    }
    *a1 = v191;
    a1[1] = v185;
    a1[2] = v192;
    if (v193)
      operator delete(v193);
  }
  else
  {
    *v173 = CFSTR("EQ Min Gain (low freq)");
    v173[1] = 0x800000000000000DLL;
    v173[2] = 3248488448;
    v173[3] = 0x5C0A00000;
    v185 = v173 + 4;
  }
  a1[1] = v185;
  v196 = (unint64_t)a1[2];
  if ((unint64_t)v185 >= v196)
  {
    v198 = ((char *)v185 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v198 + 1) >> 59)
      goto LABEL_995;
    v199 = v196 - (_QWORD)*a1;
    v200 = v199 >> 4;
    if (v199 >> 4 <= (unint64_t)(v198 + 1))
      v200 = v198 + 1;
    if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFE0)
      v201 = 0x7FFFFFFFFFFFFFFLL;
    else
      v201 = v200;
    if (v201)
      v202 = (char *)sub_1A395ED34(v3, v201);
    else
      v202 = 0;
    v203 = &v202[32 * v198];
    v204 = &v202[32 * v201];
    *(_QWORD *)v203 = CFSTR("EQ Max Gain (low freq)");
    *((_QWORD *)v203 + 1) = 0x800000000000000DLL;
    *((_QWORD *)v203 + 2) = 0x41A0000000000000;
    *((_QWORD *)v203 + 3) = 0x541200000;
    v197 = v203 + 32;
    v206 = (char *)*a1;
    v205 = (char *)a1[1];
    if (v205 != *a1)
    {
      do
      {
        v207 = *((_OWORD *)v205 - 1);
        *((_OWORD *)v203 - 2) = *((_OWORD *)v205 - 2);
        *((_OWORD *)v203 - 1) = v207;
        v203 -= 32;
        v205 -= 32;
      }
      while (v205 != v206);
      v205 = (char *)*a1;
    }
    *a1 = v203;
    a1[1] = v197;
    a1[2] = v204;
    if (v205)
      operator delete(v205);
  }
  else
  {
    *v185 = CFSTR("EQ Max Gain (low freq)");
    v185[1] = 0x800000000000000DLL;
    v185[2] = 0x41A0000000000000;
    v185[3] = 0x541200000;
    v197 = v185 + 4;
  }
  a1[1] = v197;
  v208 = (unint64_t)a1[2];
  if ((unint64_t)v197 >= v208)
  {
    v210 = ((char *)v197 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v210 + 1) >> 59)
      goto LABEL_995;
    v211 = v208 - (_QWORD)*a1;
    v212 = v211 >> 4;
    if (v211 >> 4 <= (unint64_t)(v210 + 1))
      v212 = v210 + 1;
    if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFE0)
      v213 = 0x7FFFFFFFFFFFFFFLL;
    else
      v213 = v212;
    if (v213)
      v214 = (char *)sub_1A395ED34(v3, v213);
    else
      v214 = 0;
    v215 = &v214[32 * v210];
    v216 = &v214[32 * v213];
    *(_QWORD *)v215 = CFSTR("Post Auto Volume Signal Power (dBA)");
    *((_QWORD *)v215 + 1) = 0x80000000000DLL;
    *((_QWORD *)v215 + 2) = 0x4302000000000000;
    *((_QWORD *)v215 + 3) = 0x241F00000;
    v209 = v215 + 32;
    v218 = (char *)*a1;
    v217 = (char *)a1[1];
    if (v217 != *a1)
    {
      do
      {
        v219 = *((_OWORD *)v217 - 1);
        *((_OWORD *)v215 - 2) = *((_OWORD *)v217 - 2);
        *((_OWORD *)v215 - 1) = v219;
        v215 -= 32;
        v217 -= 32;
      }
      while (v217 != v218);
      v217 = (char *)*a1;
    }
    *a1 = v215;
    a1[1] = v209;
    a1[2] = v216;
    if (v217)
      operator delete(v217);
  }
  else
  {
    *v197 = CFSTR("Post Auto Volume Signal Power (dBA)");
    v197[1] = 0x80000000000DLL;
    v197[2] = 0x4302000000000000;
    v197[3] = 0x241F00000;
    v209 = v197 + 4;
  }
  a1[1] = v209;
  v220 = (unint64_t)a1[2];
  if ((unint64_t)v209 >= v220)
  {
    v222 = ((char *)v209 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v222 + 1) >> 59)
      goto LABEL_995;
    v223 = v220 - (_QWORD)*a1;
    v224 = v223 >> 4;
    if (v223 >> 4 <= (unint64_t)(v222 + 1))
      v224 = v222 + 1;
    if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFE0)
      v225 = 0x7FFFFFFFFFFFFFFLL;
    else
      v225 = v224;
    if (v225)
      v226 = (char *)sub_1A395ED34(v3, v225);
    else
      v226 = 0;
    v227 = &v226[32 * v222];
    v228 = &v226[32 * v225];
    *(_QWORD *)v227 = CFSTR("Num Iterations to Converge EQ");
    *((_QWORD *)v227 + 1) = 0x400800000000000;
    *((_QWORD *)v227 + 2) = 0x4348000000000000;
    *((_QWORD *)v227 + 3) = 0x500000000;
    v221 = v227 + 32;
    v230 = (char *)*a1;
    v229 = (char *)a1[1];
    if (v229 != *a1)
    {
      do
      {
        v231 = *((_OWORD *)v229 - 1);
        *((_OWORD *)v227 - 2) = *((_OWORD *)v229 - 2);
        *((_OWORD *)v227 - 1) = v231;
        v227 -= 32;
        v229 -= 32;
      }
      while (v229 != v230);
      v229 = (char *)*a1;
    }
    *a1 = v227;
    a1[1] = v221;
    a1[2] = v228;
    if (v229)
      operator delete(v229);
  }
  else
  {
    *v209 = CFSTR("Num Iterations to Converge EQ");
    v209[1] = 0x400800000000000;
    v209[2] = 0x4348000000000000;
    v209[3] = 0x500000000;
    v221 = v209 + 4;
  }
  a1[1] = v221;
  v232 = (unint64_t)a1[2];
  if ((unint64_t)v221 >= v232)
  {
    v234 = ((char *)v221 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v234 + 1) >> 59)
      goto LABEL_995;
    v235 = v232 - (_QWORD)*a1;
    v236 = v235 >> 4;
    if (v235 >> 4 <= (unint64_t)(v234 + 1))
      v236 = v234 + 1;
    if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFE0)
      v237 = 0x7FFFFFFFFFFFFFFLL;
    else
      v237 = v236;
    if (v237)
      v238 = (char *)sub_1A395ED34(v3, v237);
    else
      v238 = 0;
    v239 = &v238[32 * v234];
    v240 = &v238[32 * v237];
    *(_QWORD *)v239 = CFSTR("Signal Spectrum");
    *((_QWORD *)v239 + 1) = 0x8000000000000001;
    *((_QWORD *)v239 + 2) = 0x3F80000000000000;
    *((_QWORD *)v239 + 3) = 0x13F800000;
    v233 = v239 + 32;
    v242 = (char *)*a1;
    v241 = (char *)a1[1];
    if (v241 != *a1)
    {
      do
      {
        v243 = *((_OWORD *)v241 - 1);
        *((_OWORD *)v239 - 2) = *((_OWORD *)v241 - 2);
        *((_OWORD *)v239 - 1) = v243;
        v239 -= 32;
        v241 -= 32;
      }
      while (v241 != v242);
      v241 = (char *)*a1;
    }
    *a1 = v239;
    a1[1] = v233;
    a1[2] = v240;
    if (v241)
      operator delete(v241);
  }
  else
  {
    *v221 = CFSTR("Signal Spectrum");
    v221[1] = 0x8000000000000001;
    v221[2] = 0x3F80000000000000;
    v221[3] = 0x13F800000;
    v233 = v221 + 4;
  }
  a1[1] = v233;
  v244 = (unint64_t)a1[2];
  if ((unint64_t)v233 >= v244)
  {
    v246 = ((char *)v233 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v246 + 1) >> 59)
      goto LABEL_995;
    v247 = v244 - (_QWORD)*a1;
    v248 = v247 >> 4;
    if (v247 >> 4 <= (unint64_t)(v246 + 1))
      v248 = v246 + 1;
    if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFE0)
      v249 = 0x7FFFFFFFFFFFFFFLL;
    else
      v249 = v248;
    if (v249)
      v250 = (char *)sub_1A395ED34(v3, v249);
    else
      v250 = 0;
    v251 = &v250[32 * v246];
    v252 = &v250[32 * v249];
    *(_QWORD *)v251 = CFSTR("Enable EQ Display (expert mode)");
    *((_QWORD *)v251 + 1) = 0x8000000000000002;
    *((_QWORD *)v251 + 2) = 0x3F80000000000000;
    *((_QWORD *)v251 + 3) = 0x700000000;
    v245 = v251 + 32;
    v254 = (char *)*a1;
    v253 = (char *)a1[1];
    if (v253 != *a1)
    {
      do
      {
        v255 = *((_OWORD *)v253 - 1);
        *((_OWORD *)v251 - 2) = *((_OWORD *)v253 - 2);
        *((_OWORD *)v251 - 1) = v255;
        v251 -= 32;
        v253 -= 32;
      }
      while (v253 != v254);
      v253 = (char *)*a1;
    }
    *a1 = v251;
    a1[1] = v245;
    a1[2] = v252;
    if (v253)
      operator delete(v253);
  }
  else
  {
    *v233 = CFSTR("Enable EQ Display (expert mode)");
    v233[1] = 0x8000000000000002;
    v233[2] = 0x3F80000000000000;
    v233[3] = 0x700000000;
    v245 = v233 + 4;
  }
  a1[1] = v245;
  v256 = (unint64_t)a1[2];
  if ((unint64_t)v245 >= v256)
  {
    v258 = ((char *)v245 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v258 + 1) >> 59)
      goto LABEL_995;
    v259 = v256 - (_QWORD)*a1;
    v260 = v259 >> 4;
    if (v259 >> 4 <= (unint64_t)(v258 + 1))
      v260 = v258 + 1;
    if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFE0)
      v261 = 0x7FFFFFFFFFFFFFFLL;
    else
      v261 = v260;
    if (v261)
      v262 = (char *)sub_1A395ED34(v3, v261);
    else
      v262 = 0;
    v263 = &v262[32 * v258];
    v264 = &v262[32 * v261];
    *(_QWORD *)v263 = CFSTR("User Volume Gain");
    *((_QWORD *)v263 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v263 + 2) = 0x41700000C1F00000;
    *((_QWORD *)v263 + 3) = 0x400000000;
    v257 = v263 + 32;
    v266 = (char *)*a1;
    v265 = (char *)a1[1];
    if (v265 != *a1)
    {
      do
      {
        v267 = *((_OWORD *)v265 - 1);
        *((_OWORD *)v263 - 2) = *((_OWORD *)v265 - 2);
        *((_OWORD *)v263 - 1) = v267;
        v263 -= 32;
        v265 -= 32;
      }
      while (v265 != v266);
      v265 = (char *)*a1;
    }
    *a1 = v263;
    a1[1] = v257;
    a1[2] = v264;
    if (v265)
      operator delete(v265);
  }
  else
  {
    *v245 = CFSTR("User Volume Gain");
    v245[1] = 0x40080000000000DLL;
    v245[2] = 0x41700000C1F00000;
    v245[3] = 0x400000000;
    v257 = v245 + 4;
  }
  a1[1] = v257;
  v268 = (unint64_t)a1[2];
  if ((unint64_t)v257 >= v268)
  {
    v270 = ((char *)v257 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v270 + 1) >> 59)
      goto LABEL_995;
    v271 = v268 - (_QWORD)*a1;
    v272 = v271 >> 4;
    if (v271 >> 4 <= (unint64_t)(v270 + 1))
      v272 = v270 + 1;
    if ((unint64_t)v271 >= 0x7FFFFFFFFFFFFFE0)
      v273 = 0x7FFFFFFFFFFFFFFLL;
    else
      v273 = v272;
    if (v273)
      v274 = (char *)sub_1A395ED34(v3, v273);
    else
      v274 = 0;
    v275 = &v274[32 * v270];
    v276 = &v274[32 * v273];
    *(_QWORD *)v275 = CFSTR("Total Volume Gain");
    *((_QWORD *)v275 + 1) = 0x80000000000DLL;
    *((_QWORD *)v275 + 2) = 0x41700000C1F00000;
    *((_QWORD *)v275 + 3) = 0x400000000;
    v269 = v275 + 32;
    v278 = (char *)*a1;
    v277 = (char *)a1[1];
    if (v277 != *a1)
    {
      do
      {
        v279 = *((_OWORD *)v277 - 1);
        *((_OWORD *)v275 - 2) = *((_OWORD *)v277 - 2);
        *((_OWORD *)v275 - 1) = v279;
        v275 -= 32;
        v277 -= 32;
      }
      while (v277 != v278);
      v277 = (char *)*a1;
    }
    *a1 = v275;
    a1[1] = v269;
    a1[2] = v276;
    if (v277)
      operator delete(v277);
  }
  else
  {
    *v257 = CFSTR("Total Volume Gain");
    v257[1] = 0x80000000000DLL;
    v257[2] = 0x41700000C1F00000;
    v257[3] = 0x400000000;
    v269 = v257 + 4;
  }
  a1[1] = v269;
  v280 = (unint64_t)a1[2];
  if ((unint64_t)v269 >= v280)
  {
    v282 = ((char *)v269 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v282 + 1) >> 59)
      goto LABEL_995;
    v283 = v280 - (_QWORD)*a1;
    v284 = v283 >> 4;
    if (v283 >> 4 <= (unint64_t)(v282 + 1))
      v284 = v282 + 1;
    if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFE0)
      v285 = 0x7FFFFFFFFFFFFFFLL;
    else
      v285 = v284;
    if (v285)
      v286 = (char *)sub_1A395ED34(v3, v285);
    else
      v286 = 0;
    v287 = &v286[32 * v282];
    v288 = &v286[32 * v285];
    *(_QWORD *)v287 = CFSTR("EQ Min Gain (high freq)");
    *((_QWORD *)v287 + 1) = 0x800000000000000DLL;
    *((_QWORD *)v287 + 2) = 3248488448;
    *((_QWORD *)v287 + 3) = 0x5C0A00000;
    v281 = v287 + 32;
    v290 = (char *)*a1;
    v289 = (char *)a1[1];
    if (v289 != *a1)
    {
      do
      {
        v291 = *((_OWORD *)v289 - 1);
        *((_OWORD *)v287 - 2) = *((_OWORD *)v289 - 2);
        *((_OWORD *)v287 - 1) = v291;
        v287 -= 32;
        v289 -= 32;
      }
      while (v289 != v290);
      v289 = (char *)*a1;
    }
    *a1 = v287;
    a1[1] = v281;
    a1[2] = v288;
    if (v289)
      operator delete(v289);
  }
  else
  {
    *v269 = CFSTR("EQ Min Gain (high freq)");
    v269[1] = 0x800000000000000DLL;
    v269[2] = 3248488448;
    v269[3] = 0x5C0A00000;
    v281 = v269 + 4;
  }
  a1[1] = v281;
  v292 = (unint64_t)a1[2];
  if ((unint64_t)v281 >= v292)
  {
    v294 = ((char *)v281 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v294 + 1) >> 59)
      goto LABEL_995;
    v295 = v292 - (_QWORD)*a1;
    v296 = v295 >> 4;
    if (v295 >> 4 <= (unint64_t)(v294 + 1))
      v296 = v294 + 1;
    if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFE0)
      v297 = 0x7FFFFFFFFFFFFFFLL;
    else
      v297 = v296;
    if (v297)
      v298 = (char *)sub_1A395ED34(v3, v297);
    else
      v298 = 0;
    v299 = &v298[32 * v294];
    v300 = &v298[32 * v297];
    *(_QWORD *)v299 = CFSTR("EQ Max Gain (high freq)");
    *((_QWORD *)v299 + 1) = 0x800000000000000DLL;
    *((_QWORD *)v299 + 2) = 0x41A0000000000000;
    *((_QWORD *)v299 + 3) = 0x541200000;
    v293 = v299 + 32;
    v302 = (char *)*a1;
    v301 = (char *)a1[1];
    if (v301 != *a1)
    {
      do
      {
        v303 = *((_OWORD *)v301 - 1);
        *((_OWORD *)v299 - 2) = *((_OWORD *)v301 - 2);
        *((_OWORD *)v299 - 1) = v303;
        v299 -= 32;
        v301 -= 32;
      }
      while (v301 != v302);
      v301 = (char *)*a1;
    }
    *a1 = v299;
    a1[1] = v293;
    a1[2] = v300;
    if (v301)
      operator delete(v301);
  }
  else
  {
    *v281 = CFSTR("EQ Max Gain (high freq)");
    v281[1] = 0x800000000000000DLL;
    v281[2] = 0x41A0000000000000;
    v281[3] = 0x541200000;
    v293 = v281 + 4;
  }
  a1[1] = v293;
  v304 = (unint64_t)a1[2];
  if ((unint64_t)v293 >= v304)
  {
    v306 = ((char *)v293 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v306 + 1) >> 59)
      goto LABEL_995;
    v307 = v304 - (_QWORD)*a1;
    v308 = v307 >> 4;
    if (v307 >> 4 <= (unint64_t)(v306 + 1))
      v308 = v306 + 1;
    if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFE0)
      v309 = 0x7FFFFFFFFFFFFFFLL;
    else
      v309 = v308;
    if (v309)
      v310 = (char *)sub_1A395ED34(v3, v309);
    else
      v310 = 0;
    v311 = &v310[32 * v306];
    v312 = &v310[32 * v309];
    *(_QWORD *)v311 = CFSTR("EQ Frequency Boundary");
    *((_QWORD *)v311 + 1) = 0x8000000000000008;
    *((_QWORD *)v311 + 2) = 0x469C400042C80000;
    *((_QWORD *)v311 + 3) = 0x544480000;
    v305 = v311 + 32;
    v314 = (char *)*a1;
    v313 = (char *)a1[1];
    if (v313 != *a1)
    {
      do
      {
        v315 = *((_OWORD *)v313 - 1);
        *((_OWORD *)v311 - 2) = *((_OWORD *)v313 - 2);
        *((_OWORD *)v311 - 1) = v315;
        v311 -= 32;
        v313 -= 32;
      }
      while (v313 != v314);
      v313 = (char *)*a1;
    }
    *a1 = v311;
    a1[1] = v305;
    a1[2] = v312;
    if (v313)
      operator delete(v313);
  }
  else
  {
    *v293 = CFSTR("EQ Frequency Boundary");
    v293[1] = 0x8000000000000008;
    v293[2] = 0x469C400042C80000;
    v293[3] = 0x544480000;
    v305 = v293 + 4;
  }
  a1[1] = v305;
  v316 = (unint64_t)a1[2];
  if ((unint64_t)v305 >= v316)
  {
    v318 = ((char *)v305 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v318 + 1) >> 59)
      goto LABEL_995;
    v319 = v316 - (_QWORD)*a1;
    v320 = v319 >> 4;
    if (v319 >> 4 <= (unint64_t)(v318 + 1))
      v320 = v318 + 1;
    if ((unint64_t)v319 >= 0x7FFFFFFFFFFFFFE0)
      v321 = 0x7FFFFFFFFFFFFFFLL;
    else
      v321 = v320;
    if (v321)
      v322 = (char *)sub_1A395ED34(v3, v321);
    else
      v322 = 0;
    v323 = &v322[32 * v318];
    v324 = &v322[32 * v321];
    *(_QWORD *)v323 = CFSTR("EQ Low Noise");
    *((_QWORD *)v323 + 1) = 0x800000000000000DLL;
    *((_QWORD *)v323 + 2) = 0x42F0000000000000;
    *((_QWORD *)v323 + 3) = 0x5425C0000;
    v317 = v323 + 32;
    v326 = (char *)*a1;
    v325 = (char *)a1[1];
    if (v325 != *a1)
    {
      do
      {
        v327 = *((_OWORD *)v325 - 1);
        *((_OWORD *)v323 - 2) = *((_OWORD *)v325 - 2);
        *((_OWORD *)v323 - 1) = v327;
        v323 -= 32;
        v325 -= 32;
      }
      while (v325 != v326);
      v325 = (char *)*a1;
    }
    *a1 = v323;
    a1[1] = v317;
    a1[2] = v324;
    if (v325)
      operator delete(v325);
  }
  else
  {
    *v305 = CFSTR("EQ Low Noise");
    v305[1] = 0x800000000000000DLL;
    v305[2] = 0x42F0000000000000;
    v305[3] = 0x5425C0000;
    v317 = v305 + 4;
  }
  a1[1] = v317;
  v328 = (unint64_t)a1[2];
  if ((unint64_t)v317 >= v328)
  {
    v330 = ((char *)v317 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v330 + 1) >> 59)
      goto LABEL_995;
    v331 = v328 - (_QWORD)*a1;
    v332 = v331 >> 4;
    if (v331 >> 4 <= (unint64_t)(v330 + 1))
      v332 = v330 + 1;
    if ((unint64_t)v331 >= 0x7FFFFFFFFFFFFFE0)
      v333 = 0x7FFFFFFFFFFFFFFLL;
    else
      v333 = v332;
    if (v333)
      v334 = (char *)sub_1A395ED34(v3, v333);
    else
      v334 = 0;
    v335 = &v334[32 * v330];
    v336 = &v334[32 * v333];
    *(_QWORD *)v335 = CFSTR("Change in Environment");
    *((_QWORD *)v335 + 1) = 0x800000000000;
    *((_QWORD *)v335 + 2) = 0x3F80000000000000;
    *((_QWORD *)v335 + 3) = 0x200000000;
    v329 = v335 + 32;
    v338 = (char *)*a1;
    v337 = (char *)a1[1];
    if (v337 != *a1)
    {
      do
      {
        v339 = *((_OWORD *)v337 - 1);
        *((_OWORD *)v335 - 2) = *((_OWORD *)v337 - 2);
        *((_OWORD *)v335 - 1) = v339;
        v335 -= 32;
        v337 -= 32;
      }
      while (v337 != v338);
      v337 = (char *)*a1;
    }
    *a1 = v335;
    a1[1] = v329;
    a1[2] = v336;
    if (v337)
      operator delete(v337);
  }
  else
  {
    *v317 = CFSTR("Change in Environment");
    v317[1] = 0x800000000000;
    v317[2] = 0x3F80000000000000;
    v317[3] = 0x200000000;
    v329 = v317 + 4;
  }
  a1[1] = v329;
  v340 = (unint64_t)a1[2];
  if ((unint64_t)v329 >= v340)
  {
    v342 = ((char *)v329 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v342 + 1) >> 59)
      goto LABEL_995;
    v343 = v340 - (_QWORD)*a1;
    v344 = v343 >> 4;
    if (v343 >> 4 <= (unint64_t)(v342 + 1))
      v344 = v342 + 1;
    if ((unint64_t)v343 >= 0x7FFFFFFFFFFFFFE0)
      v345 = 0x7FFFFFFFFFFFFFFLL;
    else
      v345 = v344;
    if (v345)
      v346 = (char *)sub_1A395ED34(v3, v345);
    else
      v346 = 0;
    v347 = &v346[32 * v342];
    v348 = &v346[32 * v345];
    *(_QWORD *)v347 = CFSTR("0.20 kHz");
    *((_QWORD *)v347 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v347 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v347 + 3) = 0x700000000;
    v341 = v347 + 32;
    v350 = (char *)*a1;
    v349 = (char *)a1[1];
    if (v349 != *a1)
    {
      do
      {
        v351 = *((_OWORD *)v349 - 1);
        *((_OWORD *)v347 - 2) = *((_OWORD *)v349 - 2);
        *((_OWORD *)v347 - 1) = v351;
        v347 -= 32;
        v349 -= 32;
      }
      while (v349 != v350);
      v349 = (char *)*a1;
    }
    *a1 = v347;
    a1[1] = v341;
    a1[2] = v348;
    if (v349)
      operator delete(v349);
  }
  else
  {
    *v329 = CFSTR("0.20 kHz");
    v329[1] = 0x40080000000000DLL;
    v329[2] = 0x41F00000C1A00000;
    v329[3] = 0x700000000;
    v341 = v329 + 4;
  }
  a1[1] = v341;
  v352 = (unint64_t)a1[2];
  if ((unint64_t)v341 >= v352)
  {
    v354 = ((char *)v341 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v354 + 1) >> 59)
      goto LABEL_995;
    v355 = v352 - (_QWORD)*a1;
    v356 = v355 >> 4;
    if (v355 >> 4 <= (unint64_t)(v354 + 1))
      v356 = v354 + 1;
    if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFE0)
      v357 = 0x7FFFFFFFFFFFFFFLL;
    else
      v357 = v356;
    if (v357)
      v358 = (char *)sub_1A395ED34(v3, v357);
    else
      v358 = 0;
    v359 = &v358[32 * v354];
    v360 = &v358[32 * v357];
    *(_QWORD *)v359 = CFSTR("0.40 kHz");
    *((_QWORD *)v359 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v359 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v359 + 3) = 0x700000000;
    v353 = v359 + 32;
    v362 = (char *)*a1;
    v361 = (char *)a1[1];
    if (v361 != *a1)
    {
      do
      {
        v363 = *((_OWORD *)v361 - 1);
        *((_OWORD *)v359 - 2) = *((_OWORD *)v361 - 2);
        *((_OWORD *)v359 - 1) = v363;
        v359 -= 32;
        v361 -= 32;
      }
      while (v361 != v362);
      v361 = (char *)*a1;
    }
    *a1 = v359;
    a1[1] = v353;
    a1[2] = v360;
    if (v361)
      operator delete(v361);
  }
  else
  {
    *v341 = CFSTR("0.40 kHz");
    v341[1] = 0x40080000000000DLL;
    v341[2] = 0x41F00000C1A00000;
    v341[3] = 0x700000000;
    v353 = v341 + 4;
  }
  a1[1] = v353;
  v364 = (unint64_t)a1[2];
  if ((unint64_t)v353 >= v364)
  {
    v366 = ((char *)v353 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v366 + 1) >> 59)
      goto LABEL_995;
    v367 = v364 - (_QWORD)*a1;
    v368 = v367 >> 4;
    if (v367 >> 4 <= (unint64_t)(v366 + 1))
      v368 = v366 + 1;
    if ((unint64_t)v367 >= 0x7FFFFFFFFFFFFFE0)
      v369 = 0x7FFFFFFFFFFFFFFLL;
    else
      v369 = v368;
    if (v369)
      v370 = (char *)sub_1A395ED34(v3, v369);
    else
      v370 = 0;
    v371 = &v370[32 * v366];
    v372 = &v370[32 * v369];
    *(_QWORD *)v371 = CFSTR("0.80 kHz");
    *((_QWORD *)v371 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v371 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v371 + 3) = 0x700000000;
    v365 = v371 + 32;
    v374 = (char *)*a1;
    v373 = (char *)a1[1];
    if (v373 != *a1)
    {
      do
      {
        v375 = *((_OWORD *)v373 - 1);
        *((_OWORD *)v371 - 2) = *((_OWORD *)v373 - 2);
        *((_OWORD *)v371 - 1) = v375;
        v371 -= 32;
        v373 -= 32;
      }
      while (v373 != v374);
      v373 = (char *)*a1;
    }
    *a1 = v371;
    a1[1] = v365;
    a1[2] = v372;
    if (v373)
      operator delete(v373);
  }
  else
  {
    *v353 = CFSTR("0.80 kHz");
    v353[1] = 0x40080000000000DLL;
    v353[2] = 0x41F00000C1A00000;
    v353[3] = 0x700000000;
    v365 = v353 + 4;
  }
  a1[1] = v365;
  v376 = (unint64_t)a1[2];
  if ((unint64_t)v365 >= v376)
  {
    v378 = ((char *)v365 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v378 + 1) >> 59)
      goto LABEL_995;
    v379 = v376 - (_QWORD)*a1;
    v380 = v379 >> 4;
    if (v379 >> 4 <= (unint64_t)(v378 + 1))
      v380 = v378 + 1;
    if ((unint64_t)v379 >= 0x7FFFFFFFFFFFFFE0)
      v381 = 0x7FFFFFFFFFFFFFFLL;
    else
      v381 = v380;
    if (v381)
      v382 = (char *)sub_1A395ED34(v3, v381);
    else
      v382 = 0;
    v383 = &v382[32 * v378];
    v384 = &v382[32 * v381];
    *(_QWORD *)v383 = CFSTR("1.25 kHz");
    *((_QWORD *)v383 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v383 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v383 + 3) = 0x700000000;
    v377 = v383 + 32;
    v386 = (char *)*a1;
    v385 = (char *)a1[1];
    if (v385 != *a1)
    {
      do
      {
        v387 = *((_OWORD *)v385 - 1);
        *((_OWORD *)v383 - 2) = *((_OWORD *)v385 - 2);
        *((_OWORD *)v383 - 1) = v387;
        v383 -= 32;
        v385 -= 32;
      }
      while (v385 != v386);
      v385 = (char *)*a1;
    }
    *a1 = v383;
    a1[1] = v377;
    a1[2] = v384;
    if (v385)
      operator delete(v385);
  }
  else
  {
    *v365 = CFSTR("1.25 kHz");
    v365[1] = 0x40080000000000DLL;
    v365[2] = 0x41F00000C1A00000;
    v365[3] = 0x700000000;
    v377 = v365 + 4;
  }
  a1[1] = v377;
  v388 = (unint64_t)a1[2];
  if ((unint64_t)v377 >= v388)
  {
    v390 = ((char *)v377 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v390 + 1) >> 59)
      goto LABEL_995;
    v391 = v388 - (_QWORD)*a1;
    v392 = v391 >> 4;
    if (v391 >> 4 <= (unint64_t)(v390 + 1))
      v392 = v390 + 1;
    if ((unint64_t)v391 >= 0x7FFFFFFFFFFFFFE0)
      v393 = 0x7FFFFFFFFFFFFFFLL;
    else
      v393 = v392;
    if (v393)
      v394 = (char *)sub_1A395ED34(v3, v393);
    else
      v394 = 0;
    v395 = &v394[32 * v390];
    v396 = &v394[32 * v393];
    *(_QWORD *)v395 = CFSTR("1.60 kHz");
    *((_QWORD *)v395 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v395 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v395 + 3) = 0x700000000;
    v389 = v395 + 32;
    v398 = (char *)*a1;
    v397 = (char *)a1[1];
    if (v397 != *a1)
    {
      do
      {
        v399 = *((_OWORD *)v397 - 1);
        *((_OWORD *)v395 - 2) = *((_OWORD *)v397 - 2);
        *((_OWORD *)v395 - 1) = v399;
        v395 -= 32;
        v397 -= 32;
      }
      while (v397 != v398);
      v397 = (char *)*a1;
    }
    *a1 = v395;
    a1[1] = v389;
    a1[2] = v396;
    if (v397)
      operator delete(v397);
  }
  else
  {
    *v377 = CFSTR("1.60 kHz");
    v377[1] = 0x40080000000000DLL;
    v377[2] = 0x41F00000C1A00000;
    v377[3] = 0x700000000;
    v389 = v377 + 4;
  }
  a1[1] = v389;
  v400 = (unint64_t)a1[2];
  if ((unint64_t)v389 >= v400)
  {
    v402 = ((char *)v389 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v402 + 1) >> 59)
      goto LABEL_995;
    v403 = v400 - (_QWORD)*a1;
    v404 = v403 >> 4;
    if (v403 >> 4 <= (unint64_t)(v402 + 1))
      v404 = v402 + 1;
    if ((unint64_t)v403 >= 0x7FFFFFFFFFFFFFE0)
      v405 = 0x7FFFFFFFFFFFFFFLL;
    else
      v405 = v404;
    if (v405)
      v406 = (char *)sub_1A395ED34(v3, v405);
    else
      v406 = 0;
    v407 = &v406[32 * v402];
    v408 = &v406[32 * v405];
    *(_QWORD *)v407 = CFSTR("2.00 kHz");
    *((_QWORD *)v407 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v407 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v407 + 3) = 0x700000000;
    v401 = v407 + 32;
    v410 = (char *)*a1;
    v409 = (char *)a1[1];
    if (v409 != *a1)
    {
      do
      {
        v411 = *((_OWORD *)v409 - 1);
        *((_OWORD *)v407 - 2) = *((_OWORD *)v409 - 2);
        *((_OWORD *)v407 - 1) = v411;
        v407 -= 32;
        v409 -= 32;
      }
      while (v409 != v410);
      v409 = (char *)*a1;
    }
    *a1 = v407;
    a1[1] = v401;
    a1[2] = v408;
    if (v409)
      operator delete(v409);
  }
  else
  {
    *v389 = CFSTR("2.00 kHz");
    v389[1] = 0x40080000000000DLL;
    v389[2] = 0x41F00000C1A00000;
    v389[3] = 0x700000000;
    v401 = v389 + 4;
  }
  a1[1] = v401;
  v412 = (unint64_t)a1[2];
  if ((unint64_t)v401 >= v412)
  {
    v414 = ((char *)v401 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v414 + 1) >> 59)
      goto LABEL_995;
    v415 = v412 - (_QWORD)*a1;
    v416 = v415 >> 4;
    if (v415 >> 4 <= (unint64_t)(v414 + 1))
      v416 = v414 + 1;
    if ((unint64_t)v415 >= 0x7FFFFFFFFFFFFFE0)
      v417 = 0x7FFFFFFFFFFFFFFLL;
    else
      v417 = v416;
    if (v417)
      v418 = (char *)sub_1A395ED34(v3, v417);
    else
      v418 = 0;
    v419 = &v418[32 * v414];
    v420 = &v418[32 * v417];
    *(_QWORD *)v419 = CFSTR("2.50 kHz");
    *((_QWORD *)v419 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v419 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v419 + 3) = 0x700000000;
    v413 = v419 + 32;
    v422 = (char *)*a1;
    v421 = (char *)a1[1];
    if (v421 != *a1)
    {
      do
      {
        v423 = *((_OWORD *)v421 - 1);
        *((_OWORD *)v419 - 2) = *((_OWORD *)v421 - 2);
        *((_OWORD *)v419 - 1) = v423;
        v419 -= 32;
        v421 -= 32;
      }
      while (v421 != v422);
      v421 = (char *)*a1;
    }
    *a1 = v419;
    a1[1] = v413;
    a1[2] = v420;
    if (v421)
      operator delete(v421);
  }
  else
  {
    *v401 = CFSTR("2.50 kHz");
    v401[1] = 0x40080000000000DLL;
    v401[2] = 0x41F00000C1A00000;
    v401[3] = 0x700000000;
    v413 = v401 + 4;
  }
  a1[1] = v413;
  v424 = (unint64_t)a1[2];
  if ((unint64_t)v413 >= v424)
  {
    v426 = ((char *)v413 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v426 + 1) >> 59)
      goto LABEL_995;
    v427 = v424 - (_QWORD)*a1;
    v428 = v427 >> 4;
    if (v427 >> 4 <= (unint64_t)(v426 + 1))
      v428 = v426 + 1;
    if ((unint64_t)v427 >= 0x7FFFFFFFFFFFFFE0)
      v429 = 0x7FFFFFFFFFFFFFFLL;
    else
      v429 = v428;
    if (v429)
      v430 = (char *)sub_1A395ED34(v3, v429);
    else
      v430 = 0;
    v431 = &v430[32 * v426];
    v432 = &v430[32 * v429];
    *(_QWORD *)v431 = CFSTR("3.15 kHz");
    *((_QWORD *)v431 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v431 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v431 + 3) = 0x700000000;
    v425 = v431 + 32;
    v434 = (char *)*a1;
    v433 = (char *)a1[1];
    if (v433 != *a1)
    {
      do
      {
        v435 = *((_OWORD *)v433 - 1);
        *((_OWORD *)v431 - 2) = *((_OWORD *)v433 - 2);
        *((_OWORD *)v431 - 1) = v435;
        v431 -= 32;
        v433 -= 32;
      }
      while (v433 != v434);
      v433 = (char *)*a1;
    }
    *a1 = v431;
    a1[1] = v425;
    a1[2] = v432;
    if (v433)
      operator delete(v433);
  }
  else
  {
    *v413 = CFSTR("3.15 kHz");
    v413[1] = 0x40080000000000DLL;
    v413[2] = 0x41F00000C1A00000;
    v413[3] = 0x700000000;
    v425 = v413 + 4;
  }
  a1[1] = v425;
  v436 = (unint64_t)a1[2];
  if ((unint64_t)v425 >= v436)
  {
    v438 = ((char *)v425 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v438 + 1) >> 59)
      goto LABEL_995;
    v439 = v436 - (_QWORD)*a1;
    v440 = v439 >> 4;
    if (v439 >> 4 <= (unint64_t)(v438 + 1))
      v440 = v438 + 1;
    if ((unint64_t)v439 >= 0x7FFFFFFFFFFFFFE0)
      v441 = 0x7FFFFFFFFFFFFFFLL;
    else
      v441 = v440;
    if (v441)
      v442 = (char *)sub_1A395ED34(v3, v441);
    else
      v442 = 0;
    v443 = &v442[32 * v438];
    v444 = &v442[32 * v441];
    *(_QWORD *)v443 = CFSTR("4.00 kHz");
    *((_QWORD *)v443 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v443 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v443 + 3) = 0x700000000;
    v437 = v443 + 32;
    v446 = (char *)*a1;
    v445 = (char *)a1[1];
    if (v445 != *a1)
    {
      do
      {
        v447 = *((_OWORD *)v445 - 1);
        *((_OWORD *)v443 - 2) = *((_OWORD *)v445 - 2);
        *((_OWORD *)v443 - 1) = v447;
        v443 -= 32;
        v445 -= 32;
      }
      while (v445 != v446);
      v445 = (char *)*a1;
    }
    *a1 = v443;
    a1[1] = v437;
    a1[2] = v444;
    if (v445)
      operator delete(v445);
  }
  else
  {
    *v425 = CFSTR("4.00 kHz");
    v425[1] = 0x40080000000000DLL;
    v425[2] = 0x41F00000C1A00000;
    v425[3] = 0x700000000;
    v437 = v425 + 4;
  }
  a1[1] = v437;
  v448 = (unint64_t)a1[2];
  if ((unint64_t)v437 >= v448)
  {
    v450 = ((char *)v437 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v450 + 1) >> 59)
      goto LABEL_995;
    v451 = v448 - (_QWORD)*a1;
    v452 = v451 >> 4;
    if (v451 >> 4 <= (unint64_t)(v450 + 1))
      v452 = v450 + 1;
    if ((unint64_t)v451 >= 0x7FFFFFFFFFFFFFE0)
      v453 = 0x7FFFFFFFFFFFFFFLL;
    else
      v453 = v452;
    if (v453)
      v454 = (char *)sub_1A395ED34(v3, v453);
    else
      v454 = 0;
    v455 = &v454[32 * v450];
    v456 = &v454[32 * v453];
    *(_QWORD *)v455 = CFSTR("5.00 kHz");
    *((_QWORD *)v455 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v455 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v455 + 3) = 0x700000000;
    v449 = v455 + 32;
    v458 = (char *)*a1;
    v457 = (char *)a1[1];
    if (v457 != *a1)
    {
      do
      {
        v459 = *((_OWORD *)v457 - 1);
        *((_OWORD *)v455 - 2) = *((_OWORD *)v457 - 2);
        *((_OWORD *)v455 - 1) = v459;
        v455 -= 32;
        v457 -= 32;
      }
      while (v457 != v458);
      v457 = (char *)*a1;
    }
    *a1 = v455;
    a1[1] = v449;
    a1[2] = v456;
    if (v457)
      operator delete(v457);
  }
  else
  {
    *v437 = CFSTR("5.00 kHz");
    v437[1] = 0x40080000000000DLL;
    v437[2] = 0x41F00000C1A00000;
    v437[3] = 0x700000000;
    v449 = v437 + 4;
  }
  a1[1] = v449;
  v460 = (unint64_t)a1[2];
  if ((unint64_t)v449 >= v460)
  {
    v462 = ((char *)v449 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v462 + 1) >> 59)
      goto LABEL_995;
    v463 = v460 - (_QWORD)*a1;
    v464 = v463 >> 4;
    if (v463 >> 4 <= (unint64_t)(v462 + 1))
      v464 = v462 + 1;
    if ((unint64_t)v463 >= 0x7FFFFFFFFFFFFFE0)
      v465 = 0x7FFFFFFFFFFFFFFLL;
    else
      v465 = v464;
    if (v465)
      v466 = (char *)sub_1A395ED34(v3, v465);
    else
      v466 = 0;
    v467 = &v466[32 * v462];
    v468 = &v466[32 * v465];
    *(_QWORD *)v467 = CFSTR("6.30 kHz");
    *((_QWORD *)v467 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v467 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v467 + 3) = 0x700000000;
    v461 = v467 + 32;
    v470 = (char *)*a1;
    v469 = (char *)a1[1];
    if (v469 != *a1)
    {
      do
      {
        v471 = *((_OWORD *)v469 - 1);
        *((_OWORD *)v467 - 2) = *((_OWORD *)v469 - 2);
        *((_OWORD *)v467 - 1) = v471;
        v467 -= 32;
        v469 -= 32;
      }
      while (v469 != v470);
      v469 = (char *)*a1;
    }
    *a1 = v467;
    a1[1] = v461;
    a1[2] = v468;
    if (v469)
      operator delete(v469);
  }
  else
  {
    *v449 = CFSTR("6.30 kHz");
    v449[1] = 0x40080000000000DLL;
    v449[2] = 0x41F00000C1A00000;
    v449[3] = 0x700000000;
    v461 = v449 + 4;
  }
  a1[1] = v461;
  v472 = (unint64_t)a1[2];
  if ((unint64_t)v461 >= v472)
  {
    v474 = ((char *)v461 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v474 + 1) >> 59)
      goto LABEL_995;
    v475 = v472 - (_QWORD)*a1;
    v476 = v475 >> 4;
    if (v475 >> 4 <= (unint64_t)(v474 + 1))
      v476 = v474 + 1;
    if ((unint64_t)v475 >= 0x7FFFFFFFFFFFFFE0)
      v477 = 0x7FFFFFFFFFFFFFFLL;
    else
      v477 = v476;
    if (v477)
      v478 = (char *)sub_1A395ED34(v3, v477);
    else
      v478 = 0;
    v479 = &v478[32 * v474];
    v480 = &v478[32 * v477];
    *(_QWORD *)v479 = CFSTR("8.00 kHz");
    *((_QWORD *)v479 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v479 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v479 + 3) = 0x700000000;
    v473 = v479 + 32;
    v482 = (char *)*a1;
    v481 = (char *)a1[1];
    if (v481 != *a1)
    {
      do
      {
        v483 = *((_OWORD *)v481 - 1);
        *((_OWORD *)v479 - 2) = *((_OWORD *)v481 - 2);
        *((_OWORD *)v479 - 1) = v483;
        v479 -= 32;
        v481 -= 32;
      }
      while (v481 != v482);
      v481 = (char *)*a1;
    }
    *a1 = v479;
    a1[1] = v473;
    a1[2] = v480;
    if (v481)
      operator delete(v481);
  }
  else
  {
    *v461 = CFSTR("8.00 kHz");
    v461[1] = 0x40080000000000DLL;
    v461[2] = 0x41F00000C1A00000;
    v461[3] = 0x700000000;
    v473 = v461 + 4;
  }
  a1[1] = v473;
  v484 = (unint64_t)a1[2];
  if ((unint64_t)v473 >= v484)
  {
    v486 = ((char *)v473 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v486 + 1) >> 59)
      goto LABEL_995;
    v487 = v484 - (_QWORD)*a1;
    v488 = v487 >> 4;
    if (v487 >> 4 <= (unint64_t)(v486 + 1))
      v488 = v486 + 1;
    if ((unint64_t)v487 >= 0x7FFFFFFFFFFFFFE0)
      v489 = 0x7FFFFFFFFFFFFFFLL;
    else
      v489 = v488;
    if (v489)
      v490 = (char *)sub_1A395ED34(v3, v489);
    else
      v490 = 0;
    v491 = &v490[32 * v486];
    v492 = &v490[32 * v489];
    *(_QWORD *)v491 = CFSTR("10.00 kHz");
    *((_QWORD *)v491 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v491 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v491 + 3) = 0x700000000;
    v485 = v491 + 32;
    v494 = (char *)*a1;
    v493 = (char *)a1[1];
    if (v493 != *a1)
    {
      do
      {
        v495 = *((_OWORD *)v493 - 1);
        *((_OWORD *)v491 - 2) = *((_OWORD *)v493 - 2);
        *((_OWORD *)v491 - 1) = v495;
        v491 -= 32;
        v493 -= 32;
      }
      while (v493 != v494);
      v493 = (char *)*a1;
    }
    *a1 = v491;
    a1[1] = v485;
    a1[2] = v492;
    if (v493)
      operator delete(v493);
  }
  else
  {
    *v473 = CFSTR("10.00 kHz");
    v473[1] = 0x40080000000000DLL;
    v473[2] = 0x41F00000C1A00000;
    v473[3] = 0x700000000;
    v485 = v473 + 4;
  }
  a1[1] = v485;
  v496 = (unint64_t)a1[2];
  if ((unint64_t)v485 >= v496)
  {
    v498 = ((char *)v485 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v498 + 1) >> 59)
      goto LABEL_995;
    v499 = v496 - (_QWORD)*a1;
    v500 = v499 >> 4;
    if (v499 >> 4 <= (unint64_t)(v498 + 1))
      v500 = v498 + 1;
    if ((unint64_t)v499 >= 0x7FFFFFFFFFFFFFE0)
      v501 = 0x7FFFFFFFFFFFFFFLL;
    else
      v501 = v500;
    if (v501)
      v502 = (char *)sub_1A395ED34(v3, v501);
    else
      v502 = 0;
    v503 = &v502[32 * v498];
    v504 = &v502[32 * v501];
    *(_QWORD *)v503 = CFSTR("12.50 kHz");
    *((_QWORD *)v503 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v503 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v503 + 3) = 0x700000000;
    v497 = v503 + 32;
    v506 = (char *)*a1;
    v505 = (char *)a1[1];
    if (v505 != *a1)
    {
      do
      {
        v507 = *((_OWORD *)v505 - 1);
        *((_OWORD *)v503 - 2) = *((_OWORD *)v505 - 2);
        *((_OWORD *)v503 - 1) = v507;
        v503 -= 32;
        v505 -= 32;
      }
      while (v505 != v506);
      v505 = (char *)*a1;
    }
    *a1 = v503;
    a1[1] = v497;
    a1[2] = v504;
    if (v505)
      operator delete(v505);
  }
  else
  {
    *v485 = CFSTR("12.50 kHz");
    v485[1] = 0x40080000000000DLL;
    v485[2] = 0x41F00000C1A00000;
    v485[3] = 0x700000000;
    v497 = v485 + 4;
  }
  a1[1] = v497;
  v508 = (unint64_t)a1[2];
  if ((unint64_t)v497 >= v508)
  {
    v510 = ((char *)v497 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v510 + 1) >> 59)
      goto LABEL_995;
    v511 = v508 - (_QWORD)*a1;
    v512 = v511 >> 4;
    if (v511 >> 4 <= (unint64_t)(v510 + 1))
      v512 = v510 + 1;
    if ((unint64_t)v511 >= 0x7FFFFFFFFFFFFFE0)
      v513 = 0x7FFFFFFFFFFFFFFLL;
    else
      v513 = v512;
    if (v513)
      v514 = (char *)sub_1A395ED34(v3, v513);
    else
      v514 = 0;
    v515 = &v514[32 * v510];
    v516 = &v514[32 * v513];
    *(_QWORD *)v515 = CFSTR("16.00 kHz");
    *((_QWORD *)v515 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v515 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v515 + 3) = 0x700000000;
    v509 = v515 + 32;
    v518 = (char *)*a1;
    v517 = (char *)a1[1];
    if (v517 != *a1)
    {
      do
      {
        v519 = *((_OWORD *)v517 - 1);
        *((_OWORD *)v515 - 2) = *((_OWORD *)v517 - 2);
        *((_OWORD *)v515 - 1) = v519;
        v515 -= 32;
        v517 -= 32;
      }
      while (v517 != v518);
      v517 = (char *)*a1;
    }
    *a1 = v515;
    a1[1] = v509;
    a1[2] = v516;
    if (v517)
      operator delete(v517);
  }
  else
  {
    *v497 = CFSTR("16.00 kHz");
    v497[1] = 0x40080000000000DLL;
    v497[2] = 0x41F00000C1A00000;
    v497[3] = 0x700000000;
    v509 = v497 + 4;
  }
  a1[1] = v509;
  v520 = (unint64_t)a1[2];
  if ((unint64_t)v509 >= v520)
  {
    v522 = ((char *)v509 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v522 + 1) >> 59)
      goto LABEL_995;
    v523 = v520 - (_QWORD)*a1;
    v524 = v523 >> 4;
    if (v523 >> 4 <= (unint64_t)(v522 + 1))
      v524 = v522 + 1;
    if ((unint64_t)v523 >= 0x7FFFFFFFFFFFFFE0)
      v525 = 0x7FFFFFFFFFFFFFFLL;
    else
      v525 = v524;
    if (v525)
      v526 = (char *)sub_1A395ED34(v3, v525);
    else
      v526 = 0;
    v527 = &v526[32 * v522];
    v528 = &v526[32 * v525];
    *(_QWORD *)v527 = CFSTR("20.00 kHz");
    *((_QWORD *)v527 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v527 + 2) = 0x41F00000C1A00000;
    *((_QWORD *)v527 + 3) = 0x700000000;
    v521 = v527 + 32;
    v530 = (char *)*a1;
    v529 = (char *)a1[1];
    if (v529 != *a1)
    {
      do
      {
        v531 = *((_OWORD *)v529 - 1);
        *((_OWORD *)v527 - 2) = *((_OWORD *)v529 - 2);
        *((_OWORD *)v527 - 1) = v531;
        v527 -= 32;
        v529 -= 32;
      }
      while (v529 != v530);
      v529 = (char *)*a1;
    }
    *a1 = v527;
    a1[1] = v521;
    a1[2] = v528;
    if (v529)
      operator delete(v529);
  }
  else
  {
    *v509 = CFSTR("20.00 kHz");
    v509[1] = 0x40080000000000DLL;
    v509[2] = 0x41F00000C1A00000;
    v509[3] = 0x700000000;
    v521 = v509 + 4;
  }
  a1[1] = v521;
  v532 = (unint64_t)a1[2];
  if ((unint64_t)v521 >= v532)
  {
    v534 = ((char *)v521 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v534 + 1) >> 59)
      goto LABEL_995;
    v535 = v532 - (_QWORD)*a1;
    v536 = v535 >> 4;
    if (v535 >> 4 <= (unint64_t)(v534 + 1))
      v536 = v534 + 1;
    if ((unint64_t)v535 >= 0x7FFFFFFFFFFFFFE0)
      v537 = 0x7FFFFFFFFFFFFFFLL;
    else
      v537 = v536;
    if (v537)
      v538 = (char *)sub_1A395ED34(v3, v537);
    else
      v538 = 0;
    v539 = &v538[32 * v534];
    v540 = &v538[32 * v537];
    *(_QWORD *)v539 = CFSTR("EQ Slew Rate (dB/s)");
    *((_QWORD *)v539 + 1) = 0x8400000000000000;
    *((_QWORD *)v539 + 2) = 0x4170000000000000;
    *((_QWORD *)v539 + 3) = 0x540400000;
    v533 = v539 + 32;
    v542 = (char *)*a1;
    v541 = (char *)a1[1];
    if (v541 != *a1)
    {
      do
      {
        v543 = *((_OWORD *)v541 - 1);
        *((_OWORD *)v539 - 2) = *((_OWORD *)v541 - 2);
        *((_OWORD *)v539 - 1) = v543;
        v539 -= 32;
        v541 -= 32;
      }
      while (v541 != v542);
      v541 = (char *)*a1;
    }
    *a1 = v539;
    a1[1] = v533;
    a1[2] = v540;
    if (v541)
      operator delete(v541);
  }
  else
  {
    *v521 = CFSTR("EQ Slew Rate (dB/s)");
    v521[1] = 0x8400000000000000;
    v521[2] = 0x4170000000000000;
    v521[3] = 0x540400000;
    v533 = v521 + 4;
  }
  a1[1] = v533;
  v544 = (unint64_t)a1[2];
  if ((unint64_t)v533 >= v544)
  {
    v546 = ((char *)v533 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v546 + 1) >> 59)
      goto LABEL_995;
    v547 = v544 - (_QWORD)*a1;
    v548 = v547 >> 4;
    if (v547 >> 4 <= (unint64_t)(v546 + 1))
      v548 = v546 + 1;
    if ((unint64_t)v547 >= 0x7FFFFFFFFFFFFFE0)
      v549 = 0x7FFFFFFFFFFFFFFLL;
    else
      v549 = v548;
    if (v549)
      v550 = (char *)sub_1A395ED34(v3, v549);
    else
      v550 = 0;
    v551 = &v550[32 * v546];
    v552 = &v550[32 * v549];
    *(_QWORD *)v551 = CFSTR("Noise Slew Rate (dB/s)");
    *((_QWORD *)v551 + 1) = 0x8400000000000000;
    *((_QWORD *)v551 + 2) = 0x4170000000000000;
    *((_QWORD *)v551 + 3) = 0x340A00000;
    v545 = v551 + 32;
    v554 = (char *)*a1;
    v553 = (char *)a1[1];
    if (v553 != *a1)
    {
      do
      {
        v555 = *((_OWORD *)v553 - 1);
        *((_OWORD *)v551 - 2) = *((_OWORD *)v553 - 2);
        *((_OWORD *)v551 - 1) = v555;
        v551 -= 32;
        v553 -= 32;
      }
      while (v553 != v554);
      v553 = (char *)*a1;
    }
    *a1 = v551;
    a1[1] = v545;
    a1[2] = v552;
    if (v553)
      operator delete(v553);
  }
  else
  {
    *v533 = CFSTR("Noise Slew Rate (dB/s)");
    v533[1] = 0x8400000000000000;
    v533[2] = 0x4170000000000000;
    v533[3] = 0x340A00000;
    v545 = v533 + 4;
  }
  a1[1] = v545;
  v556 = (unint64_t)a1[2];
  if ((unint64_t)v545 >= v556)
  {
    v558 = ((char *)v545 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v558 + 1) >> 59)
      goto LABEL_995;
    v559 = v556 - (_QWORD)*a1;
    v560 = v559 >> 4;
    if (v559 >> 4 <= (unint64_t)(v558 + 1))
      v560 = v558 + 1;
    if ((unint64_t)v559 >= 0x7FFFFFFFFFFFFFE0)
      v561 = 0x7FFFFFFFFFFFFFFLL;
    else
      v561 = v560;
    if (v561)
      v562 = (char *)sub_1A395ED34(v3, v561);
    else
      v562 = 0;
    v563 = &v562[32 * v558];
    v564 = &v562[32 * v561];
    *(_QWORD *)v563 = CFSTR("Auto Volume Slew Rate (dB/s)");
    *((_QWORD *)v563 + 1) = 0x8400000000000000;
    *((_QWORD *)v563 + 2) = 0x41F0000000000000;
    *((_QWORD *)v563 + 3) = 0x440A00000;
    v557 = v563 + 32;
    v566 = (char *)*a1;
    v565 = (char *)a1[1];
    if (v565 != *a1)
    {
      do
      {
        v567 = *((_OWORD *)v565 - 1);
        *((_OWORD *)v563 - 2) = *((_OWORD *)v565 - 2);
        *((_OWORD *)v563 - 1) = v567;
        v563 -= 32;
        v565 -= 32;
      }
      while (v565 != v566);
      v565 = (char *)*a1;
    }
    *a1 = v563;
    a1[1] = v557;
    a1[2] = v564;
    if (v565)
      operator delete(v565);
  }
  else
  {
    *v545 = CFSTR("Auto Volume Slew Rate (dB/s)");
    v545[1] = 0x8400000000000000;
    v545[2] = 0x41F0000000000000;
    v545[3] = 0x440A00000;
    v557 = v545 + 4;
  }
  a1[1] = v557;
  v568 = (unint64_t)a1[2];
  if ((unint64_t)v557 >= v568)
  {
    v570 = ((char *)v557 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v570 + 1) >> 59)
      goto LABEL_995;
    v571 = v568 - (_QWORD)*a1;
    v572 = v571 >> 4;
    if (v571 >> 4 <= (unint64_t)(v570 + 1))
      v572 = v570 + 1;
    if ((unint64_t)v571 >= 0x7FFFFFFFFFFFFFE0)
      v573 = 0x7FFFFFFFFFFFFFFLL;
    else
      v573 = v572;
    if (v573)
      v574 = (char *)sub_1A395ED34(v3, v573);
    else
      v574 = 0;
    v575 = &v574[32 * v570];
    v576 = &v574[32 * v573];
    *(_QWORD *)v575 = CFSTR("Near-End Speech Presence");
    *((_QWORD *)v575 + 1) = 0x400800000000000;
    *((_QWORD *)v575 + 2) = 0x3F80000000000000;
    *((_QWORD *)v575 + 3) = 0x200000000;
    v569 = v575 + 32;
    v578 = (char *)*a1;
    v577 = (char *)a1[1];
    if (v577 != *a1)
    {
      do
      {
        v579 = *((_OWORD *)v577 - 1);
        *((_OWORD *)v575 - 2) = *((_OWORD *)v577 - 2);
        *((_OWORD *)v575 - 1) = v579;
        v575 -= 32;
        v577 -= 32;
      }
      while (v577 != v578);
      v577 = (char *)*a1;
    }
    *a1 = v575;
    a1[1] = v569;
    a1[2] = v576;
    if (v577)
      operator delete(v577);
  }
  else
  {
    *v557 = CFSTR("Near-End Speech Presence");
    v557[1] = 0x400800000000000;
    v557[2] = 0x3F80000000000000;
    v557[3] = 0x200000000;
    v569 = v557 + 4;
  }
  a1[1] = v569;
  v580 = (unint64_t)a1[2];
  if ((unint64_t)v569 >= v580)
  {
    v582 = ((char *)v569 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v582 + 1) >> 59)
      goto LABEL_995;
    v583 = v580 - (_QWORD)*a1;
    v584 = v583 >> 4;
    if (v583 >> 4 <= (unint64_t)(v582 + 1))
      v584 = v582 + 1;
    if ((unint64_t)v583 >= 0x7FFFFFFFFFFFFFE0)
      v585 = 0x7FFFFFFFFFFFFFFLL;
    else
      v585 = v584;
    if (v585)
      v586 = (char *)sub_1A395ED34(v3, v585);
    else
      v586 = 0;
    v587 = &v586[32 * v582];
    v588 = &v586[32 * v585];
    *(_QWORD *)v587 = CFSTR("Near-End SPP Threshold");
    *((_QWORD *)v587 + 1) = 0x8400000000000000;
    *((_QWORD *)v587 + 2) = 0x3F80000000000000;
    *((_QWORD *)v587 + 3) = 0x23E800000;
    v581 = v587 + 32;
    v590 = (char *)*a1;
    v589 = (char *)a1[1];
    if (v589 != *a1)
    {
      do
      {
        v591 = *((_OWORD *)v589 - 1);
        *((_OWORD *)v587 - 2) = *((_OWORD *)v589 - 2);
        *((_OWORD *)v587 - 1) = v591;
        v587 -= 32;
        v589 -= 32;
      }
      while (v589 != v590);
      v589 = (char *)*a1;
    }
    *a1 = v587;
    a1[1] = v581;
    a1[2] = v588;
    if (v589)
      operator delete(v589);
  }
  else
  {
    *v569 = CFSTR("Near-End SPP Threshold");
    v569[1] = 0x8400000000000000;
    v569[2] = 0x3F80000000000000;
    v569[3] = 0x23E800000;
    v581 = v569 + 4;
  }
  a1[1] = v581;
  v592 = (unint64_t)a1[2];
  if ((unint64_t)v581 >= v592)
  {
    v594 = ((char *)v581 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v594 + 1) >> 59)
      goto LABEL_995;
    v595 = v592 - (_QWORD)*a1;
    v596 = v595 >> 4;
    if (v595 >> 4 <= (unint64_t)(v594 + 1))
      v596 = v594 + 1;
    if ((unint64_t)v595 >= 0x7FFFFFFFFFFFFFE0)
      v597 = 0x7FFFFFFFFFFFFFFLL;
    else
      v597 = v596;
    if (v597)
      v598 = (char *)sub_1A395ED34(v3, v597);
    else
      v598 = 0;
    v599 = &v598[32 * v594];
    v600 = &v598[32 * v597];
    *(_QWORD *)v599 = CFSTR("Enhancement Algorithm");
    *((_QWORD *)v599 + 1) = 0x8000000000000001;
    *((_QWORD *)v599 + 2) = 0x4000000000000000;
    *((_QWORD *)v599 + 3) = 0x13F800000;
    v593 = v599 + 32;
    v602 = (char *)*a1;
    v601 = (char *)a1[1];
    if (v601 != *a1)
    {
      do
      {
        v603 = *((_OWORD *)v601 - 1);
        *((_OWORD *)v599 - 2) = *((_OWORD *)v601 - 2);
        *((_OWORD *)v599 - 1) = v603;
        v599 -= 32;
        v601 -= 32;
      }
      while (v601 != v602);
      v601 = (char *)*a1;
    }
    *a1 = v599;
    a1[1] = v593;
    a1[2] = v600;
    if (v601)
      operator delete(v601);
  }
  else
  {
    *v581 = CFSTR("Enhancement Algorithm");
    v581[1] = 0x8000000000000001;
    v581[2] = 0x4000000000000000;
    v581[3] = 0x13F800000;
    v593 = v581 + 4;
  }
  a1[1] = v593;
  v604 = (unint64_t)a1[2];
  if ((unint64_t)v593 >= v604)
  {
    v606 = ((char *)v593 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v606 + 1) >> 59)
      goto LABEL_995;
    v607 = v604 - (_QWORD)*a1;
    v608 = v607 >> 4;
    if (v607 >> 4 <= (unint64_t)(v606 + 1))
      v608 = v606 + 1;
    if ((unint64_t)v607 >= 0x7FFFFFFFFFFFFFE0)
      v609 = 0x7FFFFFFFFFFFFFFLL;
    else
      v609 = v608;
    if (v609)
      v610 = (char *)sub_1A395ED34(v3, v609);
    else
      v610 = 0;
    v611 = &v610[32 * v606];
    v612 = &v610[32 * v609];
    *(_QWORD *)v611 = CFSTR("Auto Volume");
    *((_QWORD *)v611 + 1) = 0x8000000000000001;
    *((_QWORD *)v611 + 2) = 0x3F80000000000000;
    *((_QWORD *)v611 + 3) = 0x100000000;
    v605 = v611 + 32;
    v614 = (char *)*a1;
    v613 = (char *)a1[1];
    if (v613 != *a1)
    {
      do
      {
        v615 = *((_OWORD *)v613 - 1);
        *((_OWORD *)v611 - 2) = *((_OWORD *)v613 - 2);
        *((_OWORD *)v611 - 1) = v615;
        v611 -= 32;
        v613 -= 32;
      }
      while (v613 != v614);
      v613 = (char *)*a1;
    }
    *a1 = v611;
    a1[1] = v605;
    a1[2] = v612;
    if (v613)
      operator delete(v613);
  }
  else
  {
    *v593 = CFSTR("Auto Volume");
    v593[1] = 0x8000000000000001;
    v593[2] = 0x3F80000000000000;
    v593[3] = 0x100000000;
    v605 = v593 + 4;
  }
  a1[1] = v605;
  v616 = (unint64_t)a1[2];
  if ((unint64_t)v605 >= v616)
  {
    v618 = ((char *)v605 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v618 + 1) >> 59)
      goto LABEL_995;
    v619 = v616 - (_QWORD)*a1;
    v620 = v619 >> 4;
    if (v619 >> 4 <= (unint64_t)(v618 + 1))
      v620 = v618 + 1;
    if ((unint64_t)v619 >= 0x7FFFFFFFFFFFFFE0)
      v621 = 0x7FFFFFFFFFFFFFFLL;
    else
      v621 = v620;
    if (v621)
      v622 = (char *)sub_1A395ED34(v3, v621);
    else
      v622 = 0;
    v623 = &v622[32 * v618];
    v624 = &v622[32 * v621];
    *(_QWORD *)v623 = CFSTR("DRC Naturalness");
    *((_QWORD *)v623 + 1) = 0x8000000000000000;
    *((_QWORD *)v623 + 2) = 0x3F8000003F000000;
    *((_QWORD *)v623 + 3) = 0x63F4CCCCDLL;
    v617 = v623 + 32;
    v626 = (char *)*a1;
    v625 = (char *)a1[1];
    if (v625 != *a1)
    {
      do
      {
        v627 = *((_OWORD *)v625 - 1);
        *((_OWORD *)v623 - 2) = *((_OWORD *)v625 - 2);
        *((_OWORD *)v623 - 1) = v627;
        v623 -= 32;
        v625 -= 32;
      }
      while (v625 != v626);
      v625 = (char *)*a1;
    }
    *a1 = v623;
    a1[1] = v617;
    a1[2] = v624;
    if (v625)
      operator delete(v625);
  }
  else
  {
    *v605 = CFSTR("DRC Naturalness");
    v605[1] = 0x8000000000000000;
    v605[2] = 0x3F8000003F000000;
    v605[3] = 0x63F4CCCCDLL;
    v617 = v605 + 4;
  }
  a1[1] = v617;
  v628 = (unint64_t)a1[2];
  if ((unint64_t)v617 >= v628)
  {
    v630 = ((char *)v617 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v630 + 1) >> 59)
      goto LABEL_995;
    v631 = v628 - (_QWORD)*a1;
    v632 = v631 >> 4;
    if (v631 >> 4 <= (unint64_t)(v630 + 1))
      v632 = v630 + 1;
    if ((unint64_t)v631 >= 0x7FFFFFFFFFFFFFE0)
      v633 = 0x7FFFFFFFFFFFFFFLL;
    else
      v633 = v632;
    if (v633)
      v634 = (char *)sub_1A395ED34(v3, v633);
    else
      v634 = 0;
    v635 = &v634[32 * v630];
    v636 = &v634[32 * v633];
    *(_QWORD *)v635 = CFSTR("DRC Min Threshold Offset (dB)");
    *((_QWORD *)v635 + 1) = 0x800000000000000DLL;
    *((_QWORD *)v635 + 2) = 0x41F0000000000000;
    *((_QWORD *)v635 + 3) = 0x640400000;
    v629 = v635 + 32;
    v638 = (char *)*a1;
    v637 = (char *)a1[1];
    if (v637 != *a1)
    {
      do
      {
        v639 = *((_OWORD *)v637 - 1);
        *((_OWORD *)v635 - 2) = *((_OWORD *)v637 - 2);
        *((_OWORD *)v635 - 1) = v639;
        v635 -= 32;
        v637 -= 32;
      }
      while (v637 != v638);
      v637 = (char *)*a1;
    }
    *a1 = v635;
    a1[1] = v629;
    a1[2] = v636;
    if (v637)
      operator delete(v637);
  }
  else
  {
    *v617 = CFSTR("DRC Min Threshold Offset (dB)");
    v617[1] = 0x800000000000000DLL;
    v617[2] = 0x41F0000000000000;
    v617[3] = 0x640400000;
    v629 = v617 + 4;
  }
  a1[1] = v629;
  v640 = (unint64_t)a1[2];
  if ((unint64_t)v629 >= v640)
  {
    v642 = ((char *)v629 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v642 + 1) >> 59)
      goto LABEL_995;
    v643 = v640 - (_QWORD)*a1;
    v644 = v643 >> 4;
    if (v643 >> 4 <= (unint64_t)(v642 + 1))
      v644 = v642 + 1;
    if ((unint64_t)v643 >= 0x7FFFFFFFFFFFFFE0)
      v645 = 0x7FFFFFFFFFFFFFFLL;
    else
      v645 = v644;
    if (v645)
      v646 = (char *)sub_1A395ED34(v3, v645);
    else
      v646 = 0;
    v647 = &v646[32 * v642];
    v648 = &v646[32 * v645];
    *(_QWORD *)v647 = CFSTR("DRC Band Importance Adjustment (L)");
    *((_QWORD *)v647 + 1) = 0x8000000000000000;
    *((_QWORD *)v647 + 2) = 0x3F8000003DCCCCCDLL;
    *((_QWORD *)v647 + 3) = 0x63F000000;
    v641 = v647 + 32;
    v650 = (char *)*a1;
    v649 = (char *)a1[1];
    if (v649 != *a1)
    {
      do
      {
        v651 = *((_OWORD *)v649 - 1);
        *((_OWORD *)v647 - 2) = *((_OWORD *)v649 - 2);
        *((_OWORD *)v647 - 1) = v651;
        v647 -= 32;
        v649 -= 32;
      }
      while (v649 != v650);
      v649 = (char *)*a1;
    }
    *a1 = v647;
    a1[1] = v641;
    a1[2] = v648;
    if (v649)
      operator delete(v649);
  }
  else
  {
    *v629 = CFSTR("DRC Band Importance Adjustment (L)");
    v629[1] = 0x8000000000000000;
    v629[2] = 0x3F8000003DCCCCCDLL;
    v629[3] = 0x63F000000;
    v641 = v629 + 4;
  }
  a1[1] = v641;
  v652 = (unint64_t)a1[2];
  if ((unint64_t)v641 >= v652)
  {
    v654 = ((char *)v641 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v654 + 1) >> 59)
      goto LABEL_995;
    v655 = v652 - (_QWORD)*a1;
    v656 = v655 >> 4;
    if (v655 >> 4 <= (unint64_t)(v654 + 1))
      v656 = v654 + 1;
    if ((unint64_t)v655 >= 0x7FFFFFFFFFFFFFE0)
      v657 = 0x7FFFFFFFFFFFFFFLL;
    else
      v657 = v656;
    if (v657)
      v658 = (char *)sub_1A395ED34(v3, v657);
    else
      v658 = 0;
    v659 = &v658[32 * v654];
    v660 = &v658[32 * v657];
    *(_QWORD *)v659 = CFSTR("DRC Band Importance Adjustment (MH)");
    *((_QWORD *)v659 + 1) = 0x8000000000000000;
    *((_QWORD *)v659 + 2) = 0x3F8000003DCCCCCDLL;
    *((_QWORD *)v659 + 3) = 0x63F800000;
    v653 = v659 + 32;
    v662 = (char *)*a1;
    v661 = (char *)a1[1];
    if (v661 != *a1)
    {
      do
      {
        v663 = *((_OWORD *)v661 - 1);
        *((_OWORD *)v659 - 2) = *((_OWORD *)v661 - 2);
        *((_OWORD *)v659 - 1) = v663;
        v659 -= 32;
        v661 -= 32;
      }
      while (v661 != v662);
      v661 = (char *)*a1;
    }
    *a1 = v659;
    a1[1] = v653;
    a1[2] = v660;
    if (v661)
      operator delete(v661);
  }
  else
  {
    *v641 = CFSTR("DRC Band Importance Adjustment (MH)");
    v641[1] = 0x8000000000000000;
    v641[2] = 0x3F8000003DCCCCCDLL;
    v641[3] = 0x63F800000;
    v653 = v641 + 4;
  }
  a1[1] = v653;
  v664 = (unint64_t)a1[2];
  if ((unint64_t)v653 >= v664)
  {
    v666 = ((char *)v653 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v666 + 1) >> 59)
      goto LABEL_995;
    v667 = v664 - (_QWORD)*a1;
    v668 = v667 >> 4;
    if (v667 >> 4 <= (unint64_t)(v666 + 1))
      v668 = v666 + 1;
    if ((unint64_t)v667 >= 0x7FFFFFFFFFFFFFE0)
      v669 = 0x7FFFFFFFFFFFFFFLL;
    else
      v669 = v668;
    if (v669)
      v670 = (char *)sub_1A395ED34(v3, v669);
    else
      v670 = 0;
    v671 = &v670[32 * v666];
    v672 = &v670[32 * v669];
    *(_QWORD *)v671 = CFSTR("DRC Slope Adjustment");
    *((_QWORD *)v671 + 1) = 0x8000000000000000;
    *((_QWORD *)v671 + 2) = 0x404000003F800000;
    *((_QWORD *)v671 + 3) = 0x640200000;
    v665 = v671 + 32;
    v674 = (char *)*a1;
    v673 = (char *)a1[1];
    if (v673 != *a1)
    {
      do
      {
        v675 = *((_OWORD *)v673 - 1);
        *((_OWORD *)v671 - 2) = *((_OWORD *)v673 - 2);
        *((_OWORD *)v671 - 1) = v675;
        v671 -= 32;
        v673 -= 32;
      }
      while (v673 != v674);
      v673 = (char *)*a1;
    }
    *a1 = v671;
    a1[1] = v665;
    a1[2] = v672;
    if (v673)
      operator delete(v673);
  }
  else
  {
    *v653 = CFSTR("DRC Slope Adjustment");
    v653[1] = 0x8000000000000000;
    v653[2] = 0x404000003F800000;
    v653[3] = 0x640200000;
    v665 = v653 + 4;
  }
  a1[1] = v665;
  v676 = (unint64_t)a1[2];
  if ((unint64_t)v665 >= v676)
  {
    v678 = ((char *)v665 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v678 + 1) >> 59)
      goto LABEL_995;
    v679 = v676 - (_QWORD)*a1;
    v680 = v679 >> 4;
    if (v679 >> 4 <= (unint64_t)(v678 + 1))
      v680 = v678 + 1;
    if ((unint64_t)v679 >= 0x7FFFFFFFFFFFFFE0)
      v681 = 0x7FFFFFFFFFFFFFFLL;
    else
      v681 = v680;
    if (v681)
      v682 = (char *)sub_1A395ED34(v3, v681);
    else
      v682 = 0;
    v683 = &v682[32 * v678];
    v684 = &v682[32 * v681];
    *(_QWORD *)v683 = CFSTR("DRC Min Gain (low freq)");
    *((_QWORD *)v683 + 1) = 0x800000000000000DLL;
    *((_QWORD *)v683 + 2) = 3253731328;
    *((_QWORD *)v683 + 3) = 0x6C1A00000;
    v677 = v683 + 32;
    v686 = (char *)*a1;
    v685 = (char *)a1[1];
    if (v685 != *a1)
    {
      do
      {
        v687 = *((_OWORD *)v685 - 1);
        *((_OWORD *)v683 - 2) = *((_OWORD *)v685 - 2);
        *((_OWORD *)v683 - 1) = v687;
        v683 -= 32;
        v685 -= 32;
      }
      while (v685 != v686);
      v685 = (char *)*a1;
    }
    *a1 = v683;
    a1[1] = v677;
    a1[2] = v684;
    if (v685)
      operator delete(v685);
  }
  else
  {
    *v665 = CFSTR("DRC Min Gain (low freq)");
    v665[1] = 0x800000000000000DLL;
    v665[2] = 3253731328;
    v665[3] = 0x6C1A00000;
    v677 = v665 + 4;
  }
  a1[1] = v677;
  v688 = (unint64_t)a1[2];
  if ((unint64_t)v677 >= v688)
  {
    v690 = ((char *)v677 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v690 + 1) >> 59)
      goto LABEL_995;
    v691 = v688 - (_QWORD)*a1;
    v692 = v691 >> 4;
    if (v691 >> 4 <= (unint64_t)(v690 + 1))
      v692 = v690 + 1;
    if ((unint64_t)v691 >= 0x7FFFFFFFFFFFFFE0)
      v693 = 0x7FFFFFFFFFFFFFFLL;
    else
      v693 = v692;
    if (v693)
      v694 = (char *)sub_1A395ED34(v3, v693);
    else
      v694 = 0;
    v695 = &v694[32 * v690];
    v696 = &v694[32 * v693];
    *(_QWORD *)v695 = CFSTR("DRC Max Gain (low freq)");
    *((_QWORD *)v695 + 1) = 0x800000000000000DLL;
    *((_QWORD *)v695 + 2) = 0x41F0000000000000;
    *((_QWORD *)v695 + 3) = 0x641700000;
    v689 = v695 + 32;
    v698 = (char *)*a1;
    v697 = (char *)a1[1];
    if (v697 != *a1)
    {
      do
      {
        v699 = *((_OWORD *)v697 - 1);
        *((_OWORD *)v695 - 2) = *((_OWORD *)v697 - 2);
        *((_OWORD *)v695 - 1) = v699;
        v695 -= 32;
        v697 -= 32;
      }
      while (v697 != v698);
      v697 = (char *)*a1;
    }
    *a1 = v695;
    a1[1] = v689;
    a1[2] = v696;
    if (v697)
      operator delete(v697);
  }
  else
  {
    *v677 = CFSTR("DRC Max Gain (low freq)");
    v677[1] = 0x800000000000000DLL;
    v677[2] = 0x41F0000000000000;
    v677[3] = 0x641700000;
    v689 = v677 + 4;
  }
  a1[1] = v689;
  v700 = (unint64_t)a1[2];
  if ((unint64_t)v689 >= v700)
  {
    v702 = ((char *)v689 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v702 + 1) >> 59)
      goto LABEL_995;
    v703 = v700 - (_QWORD)*a1;
    v704 = v703 >> 4;
    if (v703 >> 4 <= (unint64_t)(v702 + 1))
      v704 = v702 + 1;
    if ((unint64_t)v703 >= 0x7FFFFFFFFFFFFFE0)
      v705 = 0x7FFFFFFFFFFFFFFLL;
    else
      v705 = v704;
    if (v705)
      v706 = (char *)sub_1A395ED34(v3, v705);
    else
      v706 = 0;
    v707 = &v706[32 * v702];
    v708 = &v706[32 * v705];
    *(_QWORD *)v707 = CFSTR("DRC Min Gain (high freq)");
    *((_QWORD *)v707 + 1) = 0x800000000000000DLL;
    *((_QWORD *)v707 + 2) = 3253731328;
    *((_QWORD *)v707 + 3) = 0x6C1700000;
    v701 = v707 + 32;
    v710 = (char *)*a1;
    v709 = (char *)a1[1];
    if (v709 != *a1)
    {
      do
      {
        v711 = *((_OWORD *)v709 - 1);
        *((_OWORD *)v707 - 2) = *((_OWORD *)v709 - 2);
        *((_OWORD *)v707 - 1) = v711;
        v707 -= 32;
        v709 -= 32;
      }
      while (v709 != v710);
      v709 = (char *)*a1;
    }
    *a1 = v707;
    a1[1] = v701;
    a1[2] = v708;
    if (v709)
      operator delete(v709);
  }
  else
  {
    *v689 = CFSTR("DRC Min Gain (high freq)");
    v689[1] = 0x800000000000000DLL;
    v689[2] = 3253731328;
    v689[3] = 0x6C1700000;
    v701 = v689 + 4;
  }
  a1[1] = v701;
  v712 = (unint64_t)a1[2];
  if ((unint64_t)v701 >= v712)
  {
    v714 = ((char *)v701 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v714 + 1) >> 59)
      goto LABEL_995;
    v715 = v712 - (_QWORD)*a1;
    v716 = v715 >> 4;
    if (v715 >> 4 <= (unint64_t)(v714 + 1))
      v716 = v714 + 1;
    if ((unint64_t)v715 >= 0x7FFFFFFFFFFFFFE0)
      v717 = 0x7FFFFFFFFFFFFFFLL;
    else
      v717 = v716;
    if (v717)
      v718 = (char *)sub_1A395ED34(v3, v717);
    else
      v718 = 0;
    v719 = &v718[32 * v714];
    v720 = &v718[32 * v717];
    *(_QWORD *)v719 = CFSTR("DRC Max Gain (high freq)");
    *((_QWORD *)v719 + 1) = 0x800000000000000DLL;
    *((_QWORD *)v719 + 2) = 0x420C000000000000;
    *((_QWORD *)v719 + 3) = 0x641C80000;
    v713 = v719 + 32;
    v722 = (char *)*a1;
    v721 = (char *)a1[1];
    if (v721 != *a1)
    {
      do
      {
        v723 = *((_OWORD *)v721 - 1);
        *((_OWORD *)v719 - 2) = *((_OWORD *)v721 - 2);
        *((_OWORD *)v719 - 1) = v723;
        v719 -= 32;
        v721 -= 32;
      }
      while (v721 != v722);
      v721 = (char *)*a1;
    }
    *a1 = v719;
    a1[1] = v713;
    a1[2] = v720;
    if (v721)
      operator delete(v721);
  }
  else
  {
    *v701 = CFSTR("DRC Max Gain (high freq)");
    v701[1] = 0x800000000000000DLL;
    v701[2] = 0x420C000000000000;
    v701[3] = 0x641C80000;
    v713 = v701 + 4;
  }
  a1[1] = v713;
  v724 = (unint64_t)a1[2];
  if ((unint64_t)v713 >= v724)
  {
    v726 = ((char *)v713 - (_BYTE *)*a1) >> 5;
    if ((unint64_t)(v726 + 1) >> 59)
      goto LABEL_995;
    v727 = v724 - (_QWORD)*a1;
    v728 = v727 >> 4;
    if (v727 >> 4 <= (unint64_t)(v726 + 1))
      v728 = v726 + 1;
    if ((unint64_t)v727 >= 0x7FFFFFFFFFFFFFE0)
      v729 = 0x7FFFFFFFFFFFFFFLL;
    else
      v729 = v728;
    if (v729)
      v730 = (char *)sub_1A395ED34(v3, v729);
    else
      v730 = 0;
    v731 = &v730[32 * v726];
    v732 = &v730[32 * v729];
    *(_QWORD *)v731 = CFSTR("Noise dBA SPL");
    *((_QWORD *)v731 + 1) = 0x40080000000000DLL;
    *((_QWORD *)v731 + 2) = 0x42C8000000000000;
    *((_QWORD *)v731 + 3) = 0x641F00000;
    v725 = v731 + 32;
    v734 = (char *)*a1;
    v733 = (char *)a1[1];
    if (v733 != *a1)
    {
      do
      {
        v735 = *((_OWORD *)v733 - 1);
        *((_OWORD *)v731 - 2) = *((_OWORD *)v733 - 2);
        *((_OWORD *)v731 - 1) = v735;
        v731 -= 32;
        v733 -= 32;
      }
      while (v733 != v734);
      v733 = (char *)*a1;
    }
    *a1 = v731;
    a1[1] = v725;
    a1[2] = v732;
    if (v733)
      operator delete(v733);
  }
  else
  {
    *v713 = CFSTR("Noise dBA SPL");
    v713[1] = 0x40080000000000DLL;
    v713[2] = 0x42C8000000000000;
    v713[3] = 0x641F00000;
    v725 = v713 + 4;
  }
  a1[1] = v725;
  v736 = (unint64_t)a1[2];
  if ((unint64_t)v725 < v736)
  {
    *v725 = CFSTR("Current Linear Volume");
    v725[1] = 0x40080000000000DLL;
    v725[2] = 0x3F80000000000000;
    v725[3] = 0x63F000000;
    v737 = v725 + 4;
    goto LABEL_993;
  }
  v738 = ((char *)v725 - (_BYTE *)*a1) >> 5;
  if ((unint64_t)(v738 + 1) >> 59)
LABEL_995:
    sub_1A395516C();
  v739 = v736 - (_QWORD)*a1;
  v740 = v739 >> 4;
  if (v739 >> 4 <= (unint64_t)(v738 + 1))
    v740 = v738 + 1;
  if ((unint64_t)v739 >= 0x7FFFFFFFFFFFFFE0)
    v741 = 0x7FFFFFFFFFFFFFFLL;
  else
    v741 = v740;
  if (v741)
    v742 = (char *)sub_1A395ED34(v3, v741);
  else
    v742 = 0;
  v743 = &v742[32 * v738];
  v744 = &v742[32 * v741];
  *(_QWORD *)v743 = CFSTR("Current Linear Volume");
  *((_QWORD *)v743 + 1) = 0x40080000000000DLL;
  *((_QWORD *)v743 + 2) = 0x3F80000000000000;
  *((_QWORD *)v743 + 3) = 0x63F000000;
  v737 = v743 + 32;
  v746 = (char *)*a1;
  v745 = (char *)a1[1];
  if (v745 != *a1)
  {
    do
    {
      v747 = *((_OWORD *)v745 - 1);
      *((_OWORD *)v743 - 2) = *((_OWORD *)v745 - 2);
      *((_OWORD *)v743 - 1) = v747;
      v743 -= 32;
      v745 -= 32;
    }
    while (v745 != v746);
    v745 = (char *)*a1;
  }
  *a1 = v743;
  a1[1] = v737;
  a1[2] = v744;
  if (v745)
    operator delete(v745);
LABEL_993:
  a1[1] = v737;
  if ((char *)v737 - (_BYTE *)*a1 != 1984)
    sub_1A3AB055C();
}

uint64_t sub_1A395D010(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 32);
  sub_1A395ED68(&v3);
  v3 = (void **)(a1 + 8);
  sub_1A395ED68(&v3);
  sub_1A395F034((uint64_t *)a1, 0);
  return a1;
}

void AUSpeechEnhancerV2::~AUSpeechEnhancerV2(AUSpeechEnhancerV2 *this)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1E4A9C380;
  v2 = (void *)*((_QWORD *)this + 82);
  if (v2)
  {
    *((_QWORD *)this + 83) = v2;
    operator delete(v2);
  }
  v4 = (void **)((char *)this + 624);
  sub_1A395ED68(&v4);
  v4 = (void **)((char *)this + 600);
  sub_1A395ED68(&v4);
  sub_1A395F034((uint64_t *)this + 74, 0);
  v3 = (void *)*((_QWORD *)this + 71);
  if (v3)
  {
    *((_QWORD *)this + 72) = v3;
    operator delete(v3);
  }
  ausdk::AUBase::~AUBase(this);
}

{
  AUSpeechEnhancerV2::~AUSpeechEnhancerV2(this);
  JUMPOUT(0x1A8596C28);
}

uint64_t AUSpeechEnhancerV2::Initialize(AUSpeechEnhancerV2 *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  double v9;
  int v10;
  float v11;
  void *v12;
  __int128 v13;
  uint64_t v14;

  result = ausdk::AUBase::Initialize(this);
  if (!(_DWORD)result)
  {
    v3 = sub_1A395EDFC((uint64_t)this + 80, 0);
    v4 = sub_1A395EDFC((uint64_t)this + 128, 0);
    v5 = *(_DWORD *)(v3 + 88);
    *((_BYTE *)this + 545) = v5 == 1718773105;
    v6 = *(_DWORD *)(v3 + 108);
    *((_DWORD *)this + 133) = v6;
    v7 = *(_DWORD *)(v4 + 108);
    *((_DWORD *)this + 134) = v7;
    v8 = v5 == 1819304813 || v5 == 1718773105;
    if (v8 && v6 == v7 && *(double *)(v3 + 80) == *(double *)(v4 + 80))
    {
      *((_DWORD *)this + 132) = (unint64_t)(*(double *)(sub_1A395EDFC((uint64_t)this + 128, 0) + 80) + 0.5);
      *((_DWORD *)this + 135) = *((_DWORD *)this + 84);
      v9 = *((double *)this + 69);
      if (v9 > 0.0)
      {
        v10 = *((_DWORD *)this + 140);
        if (v10)
        {
          v11 = v9;
          sub_1A395D270((v10 + 1), (float **)&v13, 0.0, v11 * 0.5);
          v12 = (void *)*((_QWORD *)this + 71);
          if (v12)
          {
            *((_QWORD *)this + 72) = v12;
            operator delete(v12);
          }
          *(_OWORD *)((char *)this + 568) = v13;
          *((_QWORD *)this + 73) = v14;
        }
      }
      AUSpeechEnhancerV2::setupCore(this);
      return 0;
    }
    else
    {
      return 4294956428;
    }
  }
  return result;
}

double AUSpeechEnhancerV2::GetSampleRate(AUSpeechEnhancerV2 *this)
{
  return *(double *)(sub_1A395EDFC((uint64_t)this + 128, 0) + 80);
}

void sub_1A395D270(unint64_t a1@<X0>, float **a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  float *v8;
  float __B;
  float __A;

  sub_1A395F660(a2, a1);
  v8 = *a2;
  __B = (float)(a4 - a3) / (float)(a1 - 1);
  __A = a3;
  vDSP_vramp(&__A, &__B, v8, 1, a1);
}

void sub_1A395D2E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AUSpeechEnhancerV2::setupCore(AUSpeechEnhancerV2 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = operator new();
  sub_1A3962BBC(v2, *((unsigned int *)this + 133), *((unsigned int *)this + 135), (float)*((unsigned int *)this + 132));
  sub_1A395F034((uint64_t *)this + 74, v2);
  v5 = *((_QWORD *)this + 82);
  if (*((_QWORD *)this + 83) != v5)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      sub_1A395E58C(*((float ***)this + 74), *(float *)(v5 + v6 + 16), *(float *)(v5 + v6 + 20), *(float *)(v5 + v6 + 24));
      ++v7;
      v5 = *((_QWORD *)this + 82);
      v6 += 32;
    }
    while (v7 < (*((_QWORD *)this + 83) - v5) >> 5);
  }
  AUSpeechEnhancerV2::syncParametersWithCore(this, v3, v4);
  v8 = *((unsigned int *)this + 133);
  sub_1A3964AB4((uint64_t *)this + 75, v8);
  sub_1A3964AB4((uint64_t *)this + 78, v8);
  if (*((_DWORD *)this + 133))
  {
    v9 = 0;
    v10 = 0;
    v11 = (*((_DWORD *)this + 135) << *((_BYTE *)this + 545));
    do
    {
      v12 = *((_QWORD *)this + 78) + v9;
      sub_1A3958768(*((_QWORD *)this + 75) + v9, v11);
      sub_1A3958768(v12, v11);
      ++v10;
      v9 += 24;
    }
    while (v10 < *((unsigned int *)this + 133));
  }
}

void sub_1A395D428(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A8596C28](v1, 0x10B0C402ABC78DALL);
  _Unwind_Resume(a1);
}

uint64_t AUSpeechEnhancerV2::Reset(AUSpeechEnhancerV2 *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 17))
  {
    v2 = *((_QWORD *)this + 74);
    if (v2)
      sub_1A395F714(v2);
  }
  return ausdk::AUBase::Reset(this);
}

uint64_t AUSpeechEnhancerV2::SupportedNumChannels(AUSpeechEnhancerV2 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&unk_1A3ABEEA4;
  return 1;
}

uint64_t AUSpeechEnhancerV2::ValidFormat(AUSpeechEnhancerV2 *this, unsigned int a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  uint64_t result;
  __int128 v6;
  _OWORD v7[2];
  uint64_t v8;
  int v9;

  result = ausdk::AUBase::ValidFormat(this, a2, a3, a4);
  if ((result & 1) == 0 && a4->mFormatID == 1718773105)
  {
    v6 = *(_OWORD *)&a4->mBytesPerPacket;
    v7[0] = *(_OWORD *)&a4->mSampleRate;
    v7[1] = v6;
    v8 = *(_QWORD *)&a4->mBitsPerChannel;
    DWORD2(v7[0]) = 1819304813;
    v9 = 0;
    LODWORD(result) = sub_1A395EEA8(v7, &v9, 0);
    if (v9 == 4)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t AUSpeechEnhancerV2::GetPropertyInfo(AUSpeechEnhancerV2 *this, signed int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  int v7;

  if (a3)
    return ausdk::AUBase::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  if (a2 > 1002)
  {
    if (a2 == 1003)
    {
      *a6 = 1;
      v7 = 8;
      goto LABEL_13;
    }
    if (a2 != 1004 && a2 != 3700)
      return ausdk::AUBase::GetPropertyInfo(this, a2, a3, a4, a5, a6);
    goto LABEL_11;
  }
  if (a2 == 21)
  {
LABEL_11:
    *a6 = 1;
    v7 = 4;
    goto LABEL_13;
  }
  if (a2 != 1001)
    return ausdk::AUBase::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  *a6 = 1;
  v7 = 4 * *((_DWORD *)this + 84) + 4;
LABEL_13:
  *a5 = v7;
  return 0;
}

uint64_t AUSpeechEnhancerV2::GetProperty(AUSpeechEnhancerV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, _DWORD *a5)
{
  int v6;

  if (a3)
    return ausdk::AUBase::GetProperty(this, a2, a3, a4, a5);
  if (a2 == 3700)
  {
    v6 = *((unsigned __int8 *)this + 376);
  }
  else
  {
    if (a2 != 21)
      return ausdk::AUBase::GetProperty(this, a2, a3, a4, a5);
    v6 = *((unsigned __int8 *)this + 544);
  }
  *a5 = v6;
  return 0;
}

uint64_t AUSpeechEnhancerV2::SetProperty(AUSpeechEnhancerV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *__src, unsigned int a6)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float *v11;
  int v12;
  unsigned int *v14;
  float __C;

  if (a3)
    return ausdk::AUBase::SetProperty(this, a2, a3, a4, __src);
  switch(a2)
  {
    case 0x3E9u:
      if (!*((_BYTE *)this + 17))
        goto LABEL_28;
      if (!__src)
        goto LABEL_27;
      v8 = a6 >> 2;
      v9 = *((unsigned int *)this + 140);
      if ((_DWORD)v8 != (_DWORD)v9 + 1)
        goto LABEL_27;
      result = 4294956445;
      if ((_DWORD)v9)
      {
        v10 = *((double *)this + 69);
        if (v10 > 0.0)
        {
          v11 = (float *)*((_QWORD *)this + 71);
          if (!v11)
            goto LABEL_27;
          v12 = *((_DWORD *)this + 135);
          if (*((_DWORD *)this + 132) == v10 && v12 == (_DWORD)v9)
          {
            v14 = &__src[v9 + 1];
            if (v14 != __src)
              memmove(*(void **)(*((_QWORD *)this + 74) + 1104), __src, (char *)v14 - (char *)__src);
          }
          else
          {
            sub_1A395D7A8(v11, v8, (float *)__src, *(float **)(*((_QWORD *)this + 74) + 1080), (v12 + 1), *(float **)(*((_QWORD *)this + 74) + 1104));
          }
          __C = 0.0;
          vDSP_sve(*(const float **)(*((_QWORD *)this + 74) + 1104), 1, &__C, (*((_DWORD *)this + 135) + 1));
          vDSP_vsmul(*(const float **)(*((_QWORD *)this + 74) + 1392), 1, &__C, *(float **)(*((_QWORD *)this + 74) + 1104), 1, (*((_DWORD *)this + 135) + 1));
          goto LABEL_20;
        }
      }
      break;
    case 0x3EAu:
      if (*((_BYTE *)this + 17))
      {
        if (!__src)
          goto LABEL_27;
        sub_1A395D824(*((_QWORD **)this + 74), 1uLL, (float)*__src);
LABEL_20:
        result = 0;
      }
      else
      {
LABEL_28:
        result = 4294956429;
      }
      break;
    case 0x3EBu:
      if (!__src)
        goto LABEL_27;
      if (*((_BYTE *)this + 17))
        goto LABEL_26;
      result = 0;
      *((_QWORD *)this + 69) = *(_QWORD *)__src;
      break;
    case 0x3ECu:
      if (__src)
      {
        if (*((_BYTE *)this + 17))
        {
LABEL_26:
          result = 4294956431;
        }
        else
        {
          result = 0;
          *((_DWORD *)this + 140) = *__src;
        }
      }
      else
      {
LABEL_27:
        result = 4294956445;
      }
      break;
    default:
      if (a2 != 21)
        return ausdk::AUBase::SetProperty(this, a2, a3, a4, __src);
      result = 0;
      *((_BYTE *)this + 544) = *__src != 0;
      break;
  }
  return result;
}

float sub_1A395D7A8(float *a1, uint64_t a2, float *a3, float *a4, unint64_t a5, float *a6)
{
  float result;
  float __B;

  sub_1A395F95C(a1, a2, a3, a4, a5, (uint64_t)a6, *a3, a3[a2 - 1]);
  __B = (float)(a4[1] - *a4) / (float)(a1[1] - *a1);
  vDSP_vsmul(a6, 1, &__B, a6, 1, a5);
  return result;
}

_QWORD *sub_1A395D824(_QWORD *result, unint64_t a2, float a3)
{
  float *v3;

  if (a2 >= (uint64_t)(result[1] - *result) >> 4)
    sub_1A3AB0584();
  v3 = (float *)(*result + 16 * a2);
  if (v3[1] < a3)
    a3 = v3[1];
  if (a3 < *v3)
    a3 = *v3;
  v3[3] = a3;
  return result;
}

uint64_t AUSpeechEnhancerV2::GetParameterInfo(AUSpeechEnhancerV2 *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  signed int v9;
  const __CFString *v10;

  if (a2)
    return 4294956418;
  v5 = *((_QWORD *)this + 82);
  if (a3 >= (unint64_t)((*((_QWORD *)this + 83) - v5) >> 5))
    return 4294956418;
  v6 = v5 + 32 * a3;
  v7 = *(_DWORD *)(v6 + 12);
  buffer->unit = *(_DWORD *)(v6 + 8);
  buffer->minValue = *(AudioUnitParameterValue *)(v6 + 16);
  buffer->maxValue = *(AudioUnitParameterValue *)(v6 + 20);
  buffer->defaultValue = *(AudioUnitParameterValue *)(v6 + 24);
  v8 = v7 + 1098907648;
  buffer->flags = v7 + 1098907648;
  v9 = *(_DWORD *)(v6 + 28);
  if (v9 >= 1)
  {
    buffer->clumpID = v9;
    v8 |= 0x100000u;
  }
  v10 = *(const __CFString **)v6;
  buffer->cfNameString = *(CFStringRef *)v6;
  buffer->flags = v8 | 0x8000000;
  CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
  return 0;
}

uint64_t AUSpeechEnhancerV2::GetParameterList(AUSpeechEnhancerV2 *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    *a4 = 0;
    return 4294956430;
  }
  else
  {
    if (a3)
    {
      *((_QWORD *)a3 + 22) = 0x140000003DLL;
      *((_OWORD *)a3 + 8) = xmmword_1A3ABEF28;
      *((_OWORD *)a3 + 9) = unk_1A3ABEF38;
      *((_OWORD *)a3 + 10) = xmmword_1A3ABEF48;
      *((_OWORD *)a3 + 4) = xmmword_1A3ABEEE8;
      *((_OWORD *)a3 + 5) = unk_1A3ABEEF8;
      *((_OWORD *)a3 + 6) = xmmword_1A3ABEF08;
      *((_OWORD *)a3 + 7) = unk_1A3ABEF18;
      *(_OWORD *)a3 = xmmword_1A3ABEEA8;
      *((_OWORD *)a3 + 1) = unk_1A3ABEEB8;
      *((_OWORD *)a3 + 2) = xmmword_1A3ABEEC8;
      *((_OWORD *)a3 + 3) = unk_1A3ABEED8;
      *(_OWORD *)(a3 + 46) = xmmword_1A3ABF1D0;
      *(_OWORD *)(a3 + 50) = xmmword_1A3ABF1E0;
      *(_OWORD *)(a3 + 54) = xmmword_1A3ABF1F0;
      *(_OWORD *)(a3 + 58) = xmmword_1A3ABF200;
    }
    *a4 = 62;
    if (*((_QWORD *)this + 83) - *((_QWORD *)this + 82) != 1984)
      sub_1A3AB05AC();
    return 0;
  }
}

uint64_t AUSpeechEnhancerV2::GetParameterValueStrings(AUSpeechEnhancerV2 *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  CFIndex v6;
  __int128 *v7;
  const __CFArray *v8;
  __int128 v9;
  const __CFString *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2)
    return 4294956418;
  if (!a4)
    return 0;
  switch(a3)
  {
    case 19:
      v7 = &xmmword_1E4A9FD70;
      break;
    case 50:
      v7 = &xmmword_1E4A9FD80;
      break;
    case 49:
      v9 = xmmword_1E4A9FD58;
      v10 = CFSTR("None");
      v6 = 3;
      goto LABEL_12;
    default:
      return 4294956418;
  }
  v9 = *v7;
  v6 = 2;
LABEL_12:
  v8 = CFArrayCreate(0, (const void **)&v9, v6, 0);
  result = 0;
  *a4 = v8;
  return result;
}

uint64_t AUSpeechEnhancerV2::SetParameter(AUSpeechEnhancerV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  uint64_t v5;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *((_QWORD *)this + 82);
  if (a2 > (unint64_t)((*((_QWORD *)this + 83) - v5) >> 5))
    return 4294956418;
  if ((*(_BYTE *)(v5 + 32 * a2 + 13) & 0x80) != 0)
  {
    if ((int)a2 > 59)
    {
      if (a2 == 60)
      {
        v19 = (_QWORD *)*((_QWORD *)this + 74);
        if (v19)
        {
          sub_1A395D824(v19, 0x3CuLL, a5);
          sub_1A395DC48(*((_QWORD *)this + 74), v20, v21);
        }
      }
      else if (a2 == 61)
      {
        v13 = (_QWORD *)*((_QWORD *)this + 74);
        if (v13)
        {
          sub_1A395D824(v13, 0x3DuLL, a5);
          sub_1A395DCE0(*((float **)this + 74), v14, v15);
        }
      }
    }
    else if (a2 == 21)
    {
      v16 = (_QWORD *)*((_QWORD *)this + 74);
      if (v16)
      {
        sub_1A395D824(v16, 0x15uLL, a5);
        sub_1A395DBF8(*((_QWORD *)this + 74), v17, v18);
      }
    }
    else if (a2 == 47)
    {
      v12 = (_QWORD *)*((_QWORD *)this + 74);
      if (v12)
        sub_1A395D824(v12, 0x2FuLL, a5);
    }
  }
  else
  {
    ++*((_DWORD *)this + 162);
  }
  return ausdk::AUBase::SetParameter(this, a2, a3, a4, a5);
}

float sub_1A395DBF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float result;

  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 <= 0x150uLL)
    sub_1A3AB05D4(a1, a2, a3);
  result = exp(*(float *)(*(_QWORD *)a1 + 348) * 0.230258509);
  *(float *)(a1 + 140) = result;
  return result;
}

float sub_1A395DC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;
  float v5;
  float __B;

  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 <= 0x3C0uLL)
    sub_1A3AB05D4(a1, a2, a3);
  v4 = exp(*(float *)(*(_QWORD *)a1 + 972) * 0.230258509);
  v5 = v4 * 1.45;
  __B = v5;
  vDSP_vsmul(*(const float **)(a1 + 1392), 1, &__B, *(float **)(a1 + 1104), 1, *(_QWORD *)(a1 + 776));
  return sub_1A395FA7C(a1 + 1896, a1 + 1104);
}

float sub_1A395DCE0(float *a1, uint64_t a2, uint64_t a3)
{
  float v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  float result;

  if (*((_QWORD *)a1 + 1) - *(_QWORD *)a1 <= 0x3D0uLL)
    sub_1A3AB05D4((uint64_t)a1, a2, a3);
  v4 = cbrtf(*(float *)(*(_QWORD *)a1 + 988));
  v5 = sub_1A395D824(a1, 0x15uLL, (float)(v4 * 58.0) + -58.0);
  if (*((_QWORD *)a1 + 1) - *(_QWORD *)a1 <= 0x150uLL)
    sub_1A3AB05D4((uint64_t)v5, v6, v7);
  result = exp(*(float *)(*(_QWORD *)a1 + 348) * 0.230258509);
  a1[35] = result;
  return result;
}

uint64_t AUSpeechEnhancerV2::RestoreState(AudioComponentInstance *this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
  {
    if (*((_BYTE *)this + 17))
      ++*((_DWORD *)this + 162);
  }
  return result;
}

uint64_t AUSpeechEnhancerV2::Render(AUSpeechEnhancerV2 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  char *v8;
  ausdk::AUInputElement *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v8 = (char *)this + 80;
  v9 = (ausdk::AUInputElement *)sub_1A395EDFC((uint64_t)this + 80, 0);
  result = ausdk::AUInputElement::PullInput(v9, &v13, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = sub_1A395EDFC((uint64_t)v8, 0);
    v15[0] = sub_1A395EFB4(v11 + 144);
    v12 = sub_1A395EDFC((uint64_t)this + 128, 0);
    v14 = sub_1A395EFB4(v12 + 144);
    return (*(uint64_t (**)(AUSpeechEnhancerV2 *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, v15, 1, &v14);
  }
  return result;
}

uint64_t AUSpeechEnhancerV2::ProcessMultipleBufferLists(AUSpeechEnhancerV2 *this, unsigned int *a2, uint64_t a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  unsigned int v7;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const void *v16;
  void *v17;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v7 = *((_DWORD *)this + 135);
  if (v7 < a3)
    return 4294956422;
  v12 = v7 << *((_BYTE *)this + 545);
  if (*((_BYTE *)this + 544))
  {
    v13 = *((unsigned int *)this + 133);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = 16;
      do
      {
        v16 = *(const void **)((char *)&(*a5)->mNumberBuffers + v15);
        v17 = *(void **)((char *)&(*a7)->mNumberBuffers + v15);
        if (v16 != v17 && (_DWORD)v12 != 0)
        {
          memmove(v17, v16, 4 * v12);
          v13 = *((unsigned int *)this + 133);
        }
        ++v14;
        v15 += 16;
      }
      while (v14 < v13);
    }
    return 0;
  }
  else
  {
    v19 = *((_DWORD *)this + 162);
    if (v19 != *((_DWORD *)this + 163))
    {
      *((_DWORD *)this + 163) = v19;
      AUSpeechEnhancerV2::syncParametersWithCore(this, (uint64_t)a2, a3);
    }
    v20 = *((unsigned int *)this + 133);
    if ((_DWORD)v20)
    {
      v21 = 0;
      v22 = 0;
      v23 = 16;
      do
      {
        if ((_DWORD)v12)
        {
          memmove(*(void **)(*((_QWORD *)this + 75) + v21), *(const void **)((char *)&(*a5)->mNumberBuffers + v23), 4 * v12);
          v20 = *((unsigned int *)this + 133);
        }
        ++v22;
        v21 += 24;
        v23 += 16;
      }
      while (v22 < v20);
    }
    sub_1A395E0CC(*((_QWORD *)this + 74), (uint64_t *)this + 75, (_QWORD *)this + 78, *((unsigned int *)this + 135), *((unsigned __int8 *)this + 545));
    v24 = *((unsigned int *)this + 133);
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 0;
      v27 = 16;
      do
      {
        if ((_DWORD)v12)
        {
          memmove(*(void **)((char *)&(*a7)->mNumberBuffers + v27), *(const void **)(*((_QWORD *)this + 78) + v25), 4 * v12);
          v24 = *((unsigned int *)this + 133);
        }
        ++v26;
        v27 += 16;
        v25 += 24;
      }
      while (v26 < v24);
    }
    return AUSpeechEnhancerV2::updateMeterDisplay(this);
  }
}

float AUSpeechEnhancerV2::syncParametersWithCore(AUSpeechEnhancerV2 *this, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char ***v8;
  float Parameter;

  if (*((_QWORD *)this + 83) != *((_QWORD *)this + 82))
  {
    v4 = 0;
    do
    {
      v5 = (_QWORD *)*((_QWORD *)this + 74);
      v6 = *((_QWORD *)this + 9);
      if (v6)
      {
        v7 = (char **)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
      }
      else
      {
        v8 = (char ***)*((_QWORD *)this + 6);
        if (*((char ****)this + 7) == v8)
          v7 = 0;
        else
          v7 = *v8;
      }
      Parameter = ausdk::AUElement::GetParameter(v7, v4);
      sub_1A395D824(v5, v4++, Parameter);
    }
    while (v4 < (uint64_t)(*((_QWORD *)this + 83) - *((_QWORD *)this + 82)) >> 5);
  }
  return sub_1A395E688(*((_QWORD *)this + 74), a2, a3);
}

void sub_1A395E0CC(uint64_t a1, uint64_t *a2, _QWORD *a3, unint64_t a4, int a5)
{
  unint64_t v5;
  unint64_t v9;
  float v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const float **v16;
  uint64_t v17;
  unint64_t i;
  size_t v19;
  float *imagp;
  void *v21;
  const float *v22;
  float v23;
  vDSP_Length v24;
  DSPSplitComplex __src;
  DSPSplitComplex __B;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  if (v5 != *(_QWORD *)(a1 + 792))
    sub_1A3AB0698();
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) != v5)
    sub_1A3AB0670();
  if (*(_QWORD *)(a1 + 760) != a4)
    sub_1A3AB0648();
  v9 = (uint64_t)(*(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2) >> 2;
  if (a5)
  {
    if (v9 >= 2 * a4)
      goto LABEL_6;
LABEL_25:
    sub_1A3AB05F8();
  }
  if (v9 < a4)
    goto LABEL_25;
LABEL_6:
  if (!*(_QWORD *)(a1 + 32))
  {
    v10 = *(float *)(a1 + 80);
    if (v10 <= 0.0)
      sub_1A3AB0620();
    *(float *)(a1 + 136) = *(float *)(a1 + 576) / v10;
    sub_1A395FF34((_QWORD *)a1, *(float **)(a1 + 1080), *(_QWORD *)(a1 + 776), *(_QWORD *)(a1 + 1464));
    *(float *)&__B.realp = *(float *)(a1 + 136) / 10000000.0;
    vDSP_vsmul(*(const float **)(a1 + 1464), 1, (const float *)&__B, *(float **)(a1 + 1416), 1, *(_QWORD *)(a1 + 776));
    v11 = operator new(0x3CuLL);
    *v11 = xmmword_1A3ABEF78;
    v11[1] = unk_1A3ABEF88;
    v11[2] = xmmword_1A3ABEF98;
    *(_OWORD *)((char *)v11 + 44) = *(__int128 *)((char *)&xmmword_1A3ABEF98 + 12);
    memmove(*(void **)(a1 + 544), v11, 0x3CuLL);
    operator delete(v11);
  }
  sub_1A395FAF8((float *)a1, a2, a5);
  sub_1A395FBF8(a1, (const void ***)a2, a5);
  __B.realp = **(float ***)(a1 + 1536);
  __B.imagp = **(float ***)(a1 + 1560);
  v13 = sub_1A395FD10(a1, &__B, v12);
  if (*(_QWORD *)(a1 + 792))
  {
    v16 = (const float **)v13;
    v17 = 0;
    for (i = 0; *(_QWORD *)(a1 + 792) > i; ++i)
    {
      if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
        sub_1A3AB05D4(v13, v14, v15);
      if (*(float *)(*(_QWORD *)a1 + 12) <= 0.5)
      {
        __src.realp = 0;
        __src.imagp = 0;
        __src.realp = *(float **)(*(_QWORD *)(a1 + 1536) + v17);
        __src.imagp = *(float **)(*(_QWORD *)(a1 + 1560) + v17);
        v22 = *v16;
        v23 = *__src.imagp;
        v24 = *(_QWORD *)(a1 + 776) - 1;
        vDSP_vmul(__src.realp, 1, *v16, 1, __src.realp, 1, v24);
        vDSP_vmul(__src.imagp, 1, v22, 1, __src.imagp, 1, v24);
        *__src.imagp = v23 * v22[v24];
        if (a5)
        {
          if (a4)
          {
            memmove(*(void **)(*a3 + v17), __src.realp, 4 * a4);
            imagp = __src.imagp;
            v21 = (void *)(*(_QWORD *)(*a3 + v17) + 4 * a4);
            goto LABEL_20;
          }
        }
        else
        {
          v13 = VPTimeFreqConverter::Synthesize(*(VPTimeFreqConverter **)(*(_QWORD *)(a1 + 2360) + 8 * i), &__src, *(float **)(a1 + 816));
          if (a4)
          {
            imagp = *(float **)(a1 + 816);
            v21 = *(void **)(*a3 + v17);
LABEL_20:
            v19 = 4 * a4;
LABEL_21:
            v13 = (uint64_t)memmove(v21, imagp, v19);
          }
        }
      }
      else if (a4 << a5)
      {
        v19 = 4 * (a4 << a5);
        imagp = *(float **)(*a2 + v17);
        v21 = *(void **)(*a3 + v17);
        goto LABEL_21;
      }
      v17 += 24;
    }
  }
  ++*(_QWORD *)(a1 + 32);
}

uint64_t AUSpeechEnhancerV2::updateMeterDisplay(AUSpeechEnhancerV2 *this)
{
  int updated;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int i;

  updated = AUSpeechEnhancerV2::updateMeterDisplay(this, 1u);
  v3 = AUSpeechEnhancerV2::updateMeterDisplay(this, 0x1Bu);
  v4 = AUSpeechEnhancerV2::updateMeterDisplay(this, 0x11u);
  v5 = AUSpeechEnhancerV2::updateMeterDisplay(this, 6u);
  v6 = AUSpeechEnhancerV2::updateMeterDisplay(this, 0xCu);
  v7 = AUSpeechEnhancerV2::updateMeterDisplay(this, 0x15u);
  v8 = AUSpeechEnhancerV2::updateMeterDisplay(this, 0x16u);
  v9 = AUSpeechEnhancerV2::updateMeterDisplay(this, 0x12u);
  v10 = **((_QWORD **)this + 74);
  if ((unint64_t)(*(_QWORD *)(*((_QWORD *)this + 74) + 8) - v10) <= 0x140)
    sub_1A3AB06C0();
  v11 = v3 | updated | v4 | v5 | v6 | v7 | v8 | v9;
  if (*(float *)(v10 + 332) > 0.5)
  {
    for (i = 28; i != 44; ++i)
      v11 = AUSpeechEnhancerV2::updateMeterDisplay(this, i) | v11;
  }
  return v11;
}

uint64_t AUSpeechEnhancerV2::updateMeterDisplay(AUSpeechEnhancerV2 *this, unsigned int a2)
{
  uint64_t v2;

  v2 = **((_QWORD **)this + 74);
  if (a2 >= (unint64_t)((*(_QWORD *)(*((_QWORD *)this + 74) + 8) - v2) >> 4))
    sub_1A3AB06C0();
  return (*(uint64_t (**)(AUSpeechEnhancerV2 *, float))(*(_QWORD *)this + 152))(this, *(float *)(v2 + 16 * a2 + 12));
}

uint64_t AUSpeechEnhancerV2::GetLatency(uint64_t this)
{
  if (!*(_BYTE *)(this + 545))
    return sub_1A395EDFC(this + 128, 0);
  return this;
}

void sub_1A395E58C(float **a1, float a2, float a3, float a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float *v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;

  v10 = (unint64_t)a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  v11 = *(float **)(v8 - 8);
  if ((unint64_t)v11 >= v10)
  {
    v13 = ((char *)v11 - (char *)*a1) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      sub_1A395516C();
    v15 = v9 - (_QWORD)*a1;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
      v17 = (char *)sub_1A3955180(v8, v16);
    else
      v17 = 0;
    v18 = (float *)&v17[16 * v13];
    v19 = (float *)&v17[16 * v16];
    *v18 = a2;
    v18[1] = a3;
    v18[2] = a4;
    v18[3] = a4;
    v12 = v18 + 4;
    v21 = *a1;
    v20 = a1[1];
    if (v20 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
        v18 -= 4;
        v20 -= 4;
      }
      while (v20 != v21);
      v20 = *a1;
    }
    *a1 = v18;
    a1[1] = v12;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v11 = a2;
    v11[1] = a3;
    v12 = v11 + 4;
    v11[2] = a4;
    v11[3] = a4;
  }
  a1[1] = v12;
}

float sub_1A395E688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  unint64_t v28;
  unint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  vDSP_Length v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  const float *v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  unint64_t v63;
  float result;
  int v65;
  int v66;
  int v67;
  int v68;
  float v69;
  float __B;
  float __C;
  float __A;

  v3 = *(float **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 <= 0x320uLL)
    sub_1A3AB05D4(a1, a2, a3);
  *(_QWORD *)(a1 + 64) = (unint64_t)(float)(v3[203] + 0.5);
  v5 = (unint64_t)(float)(v3[199] + 0.5);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    *(_QWORD *)(a1 + 784) = 0;
    __A = 1.0;
    vDSP_vfill(&__A, *(float **)(a1 + 1032), 1, *(_QWORD *)(a1 + 776));
    vDSP_vfill(&__A, *(float **)(a1 + 1344), 1, *(_QWORD *)(a1 + 776));
    v3 = *(float **)a1;
    if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 <= 0x130uLL)
      sub_1A3AB05D4(v6, v7, v8);
  }
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v3[79] + 0.5);
  v9 = *(float *)(a1 + 116) / (float)*(unint64_t *)(a1 + 760);
  *(float *)(a1 + 84) = expf(-1.0 / (float)(v3[15] * v9));
  *(float *)(a1 + 72) = expf(-1.0 / (float)(v3[19] * v9));
  *(float *)(a1 + 76) = expf(-1.0 / (float)(v9 * v3[23]));
  v10 = exp(v3[11] * 0.230258509);
  *(float *)(a1 + 80) = v10;
  sub_1A3963FAC(a1 + 1648);
  v11 = sub_1A39624B4((char *)(a1 + 1320), *(char **)(a1 + 1688), *(_QWORD *)(a1 + 1696), (uint64_t)(*(_QWORD *)(a1 + 1696) - *(_QWORD *)(a1 + 1688)) >> 2);
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 <= 0xD0uLL)
    sub_1A3AB05D4((uint64_t)v11, v12, v13);
  sub_1A3964F08((_QWORD *)a1, (float *)(*(_QWORD *)a1 + 220));
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_QWORD *)(a1 + 2216);
  if ((*(_QWORD *)(a1 + 2224) - v18) >> 2 < v17)
    v17 = (*(_QWORD *)(a1 + 2224) - v18) >> 2;
  *(_QWORD *)(a1 + 1936) = v17;
  v19 = *(float **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 <= 0x2E0uLL)
    sub_1A3AB05D4(v14, v15, v16);
  *(float *)(a1 + 172) = v19[187];
  *(float *)(a1 + 176) = v19[179];
  *(float *)(a1 + 180) = v19[183];
  sub_1A3964F80(a1);
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 <= 0xE0uLL)
    sub_1A3AB05D4(v20, v21, v22);
  v23 = exp(*(float *)(*(_QWORD *)a1 + 236) * 0.230258509);
  *(float *)(a1 + 88) = v23;
  *(float *)(a1 + 92) = 1.0 / v23;
  vDSP_vsmul(*(const float **)(a1 + 1200), 1, (const float *)(a1 + 88), *(float **)(a1 + 1248), 1, *(_QWORD *)(a1 + 24));
  __A = 1.0;
  vDSP_svdiv(&__A, *(const float **)(a1 + 1248), 1, *(float **)(a1 + 1248), 1, *(_QWORD *)(a1 + 24));
  vDSP_vsmsa(*(const float **)(a1 + 1200), 1, (const float *)(a1 + 88), (const float *)(a1 + 92), *(float **)(a1 + 1272), 1, *(_QWORD *)(a1 + 24));
  vDSP_vadd(*(const float **)(a1 + 1176), 1, *(const float **)(a1 + 1272), 1, *(float **)(a1 + 1272), 1, *(_QWORD *)(a1 + 24));
  vDSP_vdiv(*(const float **)(a1 + 1272), 1, *(const float **)(a1 + 1224), 1, *(float **)(a1 + 1272), 1, *(_QWORD *)(a1 + 24));
  v27 = *(float **)a1;
  v28 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v28 <= 0x190)
    sub_1A3AB05D4(v24, v25, v26);
  v29 = vcvtas_u32_f32(v27[103] / (float)(*(float *)(a1 + 116) / (float)*(unint64_t *)(a1 + 768)));
  if (*(_QWORD *)(a1 + 776) < v29)
    v29 = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 40) = v29;
  v30 = exp(v27[63] * 0.230258509);
  *(float *)(a1 + 100) = v30;
  v31 = exp(v27[95] * 0.230258509);
  *(float *)(a1 + 104) = v31;
  v32 = exp(v27[67] * 0.230258509);
  *(float *)(a1 + 108) = v32;
  v36 = exp(v27[99] * 0.230258509);
  *(float *)(a1 + 112) = v36;
  if (v28 <= 0x380)
    sub_1A3AB05D4(v33, v34, v35);
  v40 = exp(v27[227] * 0.230258509);
  *(float *)(a1 + 212) = v40;
  if (v28 <= 0x3A0)
    sub_1A3AB05D4(v37, v38, v39);
  v41 = exp(v27[235] * 0.230258509);
  *(float *)(a1 + 216) = v41;
  v45 = exp(v27[231] * 0.230258509);
  *(float *)(a1 + 220) = v45;
  if (v28 <= 0x3B0)
    sub_1A3AB05D4(v42, v43, v44);
  v46 = exp(v27[239] * 0.230258509);
  *(float *)(a1 + 224) = v46;
  *(float *)(a1 + 196) = v27[207];
  v47 = exp(v27[211] * 0.230258509);
  *(float *)(a1 + 200) = v47;
  *(float *)(a1 + 204) = v27[215];
  *(float *)(a1 + 208) = v27[219];
  *(float *)(a1 + 228) = v27[223];
  v48 = *(_QWORD *)(a1 + 1664);
  v49 = *(_QWORD *)(a1 + 1672) - v48;
  v50 = v49 >> 2;
  if (v49)
  {
    v51 = 0;
    if (v50 <= 1)
      v52 = 1;
    else
      v52 = v50;
    while (*(float *)(v48 + 4 * v51) <= v27[103])
    {
      if (v52 == ++v51)
        goto LABEL_23;
    }
    v50 = v51;
  }
LABEL_23:
  v53 = *(_QWORD *)(a1 + 24);
  if (v53)
  {
    v54 = 0;
    v55 = *(_QWORD *)(a1 + 1736);
    v56 = (*(_QWORD *)(a1 + 1744) - v55) >> 2;
    while (1)
    {
      if (v50 >= v54)
      {
        if (v56 <= v54)
LABEL_54:
          sub_1A3960064();
        v57 = *(const float **)(a1 + 448);
        v58 = (float *)(a1 + 204);
        if (v54 >= (uint64_t)(*(_QWORD *)(a1 + 456) - (_QWORD)v57) >> 2)
LABEL_55:
          sub_1A3960064();
      }
      else
      {
        if (v56 <= v54)
          goto LABEL_54;
        v57 = *(const float **)(a1 + 448);
        v58 = (float *)(a1 + 208);
        if (v54 >= (uint64_t)(*(_QWORD *)(a1 + 456) - (_QWORD)v57) >> 2)
          goto LABEL_55;
      }
      v57[v54] = powf(*(float *)(v55 + 4 * v54), 1.0 / *v58);
      if (v53 == ++v54)
        goto LABEL_34;
    }
  }
  v57 = *(const float **)(a1 + 448);
LABEL_34:
  __B = 0.0000001;
  __C = 0.0;
  v69 = 1.0;
  vDSP_sve(v57, 1, &__C, v53);
  vDSP_vsdiv(*(const float **)(a1 + 448), 1, &__C, *(float **)(a1 + 448), 1, *(_QWORD *)(a1 + 24));
  vDSP_vclip(*(const float **)(a1 + 448), 1, &__B, &v69, *(float **)(a1 + 448), 1, *(_QWORD *)(a1 + 24));
  v62 = *(float **)a1;
  v63 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v63 <= 0x70)
    sub_1A3AB05D4(v59, v60, v61);
  if (v63 <= 0x80)
    sub_1A3AB05D4(v59, v60, v61);
  if (v63 <= 0x90)
    sub_1A3AB05D4(v59, v60, v61);
  if (v63 <= 0xA0)
    sub_1A3AB05D4(v59, v60, v61);
  if (v63 <= 0xB0)
    sub_1A3AB05D4(v59, v60, v61);
  result = v62[31];
  v65 = *((_DWORD *)v62 + 35);
  v66 = *((_DWORD *)v62 + 39);
  v67 = *((_DWORD *)v62 + 43);
  v68 = *((_DWORD *)v62 + 47);
  *(float *)(a1 + 1844) = result;
  *(_DWORD *)(a1 + 1848) = v65;
  *(_DWORD *)(a1 + 1852) = v66;
  *(_DWORD *)(a1 + 1856) = v67;
  *(_DWORD *)(a1 + 1860) = v68;
  *(_BYTE *)(a1 + 811) = 1;
  *(_WORD *)(a1 + 809) = 257;
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t sub_1A395EC88()
{
  return 0;
}

uint64_t sub_1A395EC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7[0] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, a2, a5, 1, v7, 1, &v6);
}

double sub_1A395ECFC()
{
  return 0.0;
}

uint64_t sub_1A395ED04()
{
  return 1;
}

BOOL sub_1A395ED0C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 17) == 0;
}

uint64_t sub_1A395ED1C()
{
  return 4294967292;
}

uint64_t sub_1A395ED24()
{
  return 4294967292;
}

uint64_t sub_1A395ED2C()
{
  return 4294967292;
}

void *sub_1A395ED34(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_1A3954EA8();
  return operator new(32 * a2);
}

void sub_1A395ED68(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1A395EDA8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1A395EDA8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_1A395EDFC(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *exception;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    if (!result)
    {
LABEL_7:
      v7 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (v7)
        sub_1A3AB06E8(v7, v8, v9, v10, v11, v12, v13, v14);
      exception = __cxa_allocate_exception(0x18uLL);
      sub_1A39532E0((uint64_t)exception, -10877);
      __cxa_throw(exception, (struct type_info *)&unk_1E4A9C228, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  else
  {
    v6 = a1 + 16;
    v5 = *(_QWORD *)(a1 + 16);
    if (a2 >= (unint64_t)((*(_QWORD *)(v6 + 8) - v5) >> 3))
      goto LABEL_7;
    result = *(_QWORD *)(v5 + 8 * a2);
    if (!result)
      goto LABEL_7;
  }
  return result;
}

void sub_1A395EE94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A395EEA8(_DWORD *a1, int *a2, BOOL *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v9;

  if (a1[2] != 1819304813)
    return 0;
  if (a1[5] != 1)
    return 0;
  v3 = a1[6];
  if (v3 != a1[4])
    return 0;
  v4 = a1[8];
  if (v3 < v4 >> 3)
    return 0;
  v5 = a1[7];
  if (!v5)
    return 0;
  v6 = a1[3];
  if ((v6 & 0x20) == 0)
  {
    if (v3 % v5)
      return 0;
    v3 /= v5;
  }
  v7 = 0;
  if ((v6 & 2) == 0 && 8 * v3 == v4)
  {
    if ((v6 & 1) == 0)
    {
      if ((v6 & 4) != 0)
      {
        v9 = (v6 >> 7) & 0x3F;
        if (v9 == 24 && v3 == 4)
        {
          v7 = 3;
        }
        else if (v9 || v3 != 4)
        {
          if (v3 == 2 && v9 == 0)
            v7 = 2;
          else
            v7 = 0;
        }
        else
        {
          v7 = 5;
        }
      }
      else
      {
        v7 = 0;
      }
      goto LABEL_30;
    }
    if ((v6 & 0x1F84) == 0)
    {
      v7 = 4 * (v3 == 8);
      if (v3 == 4)
        v7 = 1;
      goto LABEL_30;
    }
    return 0;
  }
LABEL_30:
  if (a3)
    *a3 = (a1[3] & 0x20) == 0;
  *a2 = v7;
  return 1;
}

uint64_t sub_1A395EFB4(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *exception;

  if (!*(_DWORD *)a1)
  {
    v2 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v2)
      sub_1A3AB075C(v2, v3, v4, v5, v6, v7, v8, v9);
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A39532E0((uint64_t)exception, -1);
    __cxa_throw(exception, (struct type_info *)&unk_1E4A9C228, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return *(_QWORD *)(a1 + 8) + 48;
}

void sub_1A395F020(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A395F034(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1A395F070(result);
    JUMPOUT(0x1A8596C28);
  }
  return result;
}

uint64_t sub_1A395F070(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void **v57;

  v57 = (void **)(a1 + 2360);
  sub_1A395F4C0(&v57);
  v57 = (void **)(a1 + 2336);
  sub_1A395F4C0(&v57);
  sub_1A395F570((_QWORD *)(a1 + 1928));
  v2 = *(void **)(a1 + 1904);
  if (v2)
  {
    *(_QWORD *)(a1 + 1912) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 1784);
  if (v3)
  {
    *(_QWORD *)(a1 + 1792) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 1760);
  if (v4)
  {
    *(_QWORD *)(a1 + 1768) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 1736);
  if (v5)
  {
    *(_QWORD *)(a1 + 1744) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 1712);
  if (v6)
  {
    *(_QWORD *)(a1 + 1720) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 1688);
  if (v7)
  {
    *(_QWORD *)(a1 + 1696) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 1664);
  if (v8)
  {
    *(_QWORD *)(a1 + 1672) = v8;
    operator delete(v8);
  }
  v57 = (void **)(a1 + 1560);
  sub_1A395ED68(&v57);
  v57 = (void **)(a1 + 1536);
  sub_1A395ED68(&v57);
  v9 = *(void **)(a1 + 1512);
  if (v9)
  {
    *(_QWORD *)(a1 + 1520) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 1488);
  if (v10)
  {
    *(_QWORD *)(a1 + 1496) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 1464);
  if (v11)
  {
    *(_QWORD *)(a1 + 1472) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 1440);
  if (v12)
  {
    *(_QWORD *)(a1 + 1448) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 1416);
  if (v13)
  {
    *(_QWORD *)(a1 + 1424) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 1392);
  if (v14)
  {
    *(_QWORD *)(a1 + 1400) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 1368);
  if (v15)
  {
    *(_QWORD *)(a1 + 1376) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 1344);
  if (v16)
  {
    *(_QWORD *)(a1 + 1352) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 1320);
  if (v17)
  {
    *(_QWORD *)(a1 + 1328) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 1296);
  if (v18)
  {
    *(_QWORD *)(a1 + 1304) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 1272);
  if (v19)
  {
    *(_QWORD *)(a1 + 1280) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 1248);
  if (v20)
  {
    *(_QWORD *)(a1 + 1256) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 1224);
  if (v21)
  {
    *(_QWORD *)(a1 + 1232) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(a1 + 1200);
  if (v22)
  {
    *(_QWORD *)(a1 + 1208) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(a1 + 1176);
  if (v23)
  {
    *(_QWORD *)(a1 + 1184) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(a1 + 1152);
  if (v24)
  {
    *(_QWORD *)(a1 + 1160) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(a1 + 1128);
  if (v25)
  {
    *(_QWORD *)(a1 + 1136) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(a1 + 1104);
  if (v26)
  {
    *(_QWORD *)(a1 + 1112) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(a1 + 1080);
  if (v27)
  {
    *(_QWORD *)(a1 + 1088) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(a1 + 1056);
  if (v28)
  {
    *(_QWORD *)(a1 + 1064) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(a1 + 1032);
  if (v29)
  {
    *(_QWORD *)(a1 + 1040) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(a1 + 1008);
  if (v30)
  {
    *(_QWORD *)(a1 + 1016) = v30;
    operator delete(v30);
  }
  v31 = *(void **)(a1 + 984);
  if (v31)
  {
    *(_QWORD *)(a1 + 992) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(a1 + 960);
  if (v32)
  {
    *(_QWORD *)(a1 + 968) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(a1 + 936);
  if (v33)
  {
    *(_QWORD *)(a1 + 944) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(a1 + 912);
  if (v34)
  {
    *(_QWORD *)(a1 + 920) = v34;
    operator delete(v34);
  }
  v35 = *(void **)(a1 + 888);
  if (v35)
  {
    *(_QWORD *)(a1 + 896) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(a1 + 864);
  if (v36)
  {
    *(_QWORD *)(a1 + 872) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(a1 + 840);
  if (v37)
  {
    *(_QWORD *)(a1 + 848) = v37;
    operator delete(v37);
  }
  v38 = *(void **)(a1 + 816);
  if (v38)
  {
    *(_QWORD *)(a1 + 824) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(a1 + 720);
  if (v39)
  {
    *(_QWORD *)(a1 + 728) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(a1 + 696);
  if (v40)
  {
    *(_QWORD *)(a1 + 704) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(a1 + 544);
  if (v41)
  {
    *(_QWORD *)(a1 + 552) = v41;
    operator delete(v41);
  }
  v42 = *(void **)(a1 + 520);
  if (v42)
  {
    *(_QWORD *)(a1 + 528) = v42;
    operator delete(v42);
  }
  v43 = *(void **)(a1 + 496);
  if (v43)
  {
    *(_QWORD *)(a1 + 504) = v43;
    operator delete(v43);
  }
  v44 = *(void **)(a1 + 472);
  if (v44)
  {
    *(_QWORD *)(a1 + 480) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(a1 + 448);
  if (v45)
  {
    *(_QWORD *)(a1 + 456) = v45;
    operator delete(v45);
  }
  v46 = *(void **)(a1 + 424);
  if (v46)
  {
    *(_QWORD *)(a1 + 432) = v46;
    operator delete(v46);
  }
  v47 = *(void **)(a1 + 400);
  if (v47)
  {
    *(_QWORD *)(a1 + 408) = v47;
    operator delete(v47);
  }
  v48 = *(void **)(a1 + 376);
  if (v48)
  {
    *(_QWORD *)(a1 + 384) = v48;
    operator delete(v48);
  }
  v49 = *(void **)(a1 + 352);
  if (v49)
  {
    *(_QWORD *)(a1 + 360) = v49;
    operator delete(v49);
  }
  v50 = *(void **)(a1 + 328);
  if (v50)
  {
    *(_QWORD *)(a1 + 336) = v50;
    operator delete(v50);
  }
  v51 = *(void **)(a1 + 304);
  if (v51)
  {
    *(_QWORD *)(a1 + 312) = v51;
    operator delete(v51);
  }
  v52 = *(void **)(a1 + 280);
  if (v52)
  {
    *(_QWORD *)(a1 + 288) = v52;
    operator delete(v52);
  }
  v53 = *(void **)(a1 + 256);
  if (v53)
  {
    *(_QWORD *)(a1 + 264) = v53;
    operator delete(v53);
  }
  v54 = *(void **)(a1 + 232);
  if (v54)
  {
    *(_QWORD *)(a1 + 240) = v54;
    operator delete(v54);
  }
  v55 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v55;
    operator delete(v55);
  }
  return a1;
}

_QWORD *sub_1A395F440(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[8];
  if (v5)
  {
    a1[9] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[2];
  if (v7)
  {
    a1[3] = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_1A395F4C0(void ***a1)
{
  void **v1;
  VPTimeFreqConverter **v2;
  VPTimeFreqConverter **v4;
  void *v5;

  v1 = *a1;
  v2 = (VPTimeFreqConverter **)**a1;
  if (v2)
  {
    v4 = (VPTimeFreqConverter **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_1A395F534(--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

VPTimeFreqConverter *sub_1A395F534(VPTimeFreqConverter **a1, VPTimeFreqConverter *a2)
{
  VPTimeFreqConverter *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(result);
    JUMPOUT(0x1A8596C28);
  }
  return result;
}

_QWORD *sub_1A395F570(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v2 = (void *)a1[42];
  if (v2)
  {
    a1[43] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[39];
  if (v3)
  {
    a1[40] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[36];
  if (v4)
  {
    a1[37] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[33];
  if (v5)
  {
    a1[34] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[30];
  if (v6)
  {
    a1[31] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[27];
  if (v7)
  {
    a1[28] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[24];
  if (v8)
  {
    a1[25] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[21];
  if (v9)
  {
    a1[22] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[18];
  if (v10)
  {
    a1[19] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[15];
  if (v11)
  {
    a1[16] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[12];
  if (v12)
  {
    a1[13] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[9];
  if (v13)
  {
    a1[10] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[6];
  if (v14)
  {
    a1[7] = v14;
    operator delete(v14);
  }
  return a1;
}

_QWORD *sub_1A395F660(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1A395F6D4(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1A395F6B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1A395F6D4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_1A395516C();
  result = (char *)sub_1A3958A04((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void sub_1A395F714(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  VPTimeFreqConverter *v5;
  VPTimeFreqConverter *v6;
  float __A;
  int v8;

  v2 = *(_QWORD *)(a1 + 776);
  v8 = 629145600;
  sub_1A395F84C((char **)(a1 + 1440), v2, &v8);
  *(_BYTE *)(a1 + 1884) = 0;
  *(_DWORD *)(a1 + 1868) = 0;
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_WORD *)(a1 + 810) = 257;
  __A = 1.0;
  vDSP_vfill(&__A, *(float **)(a1 + 1344), 1, *(_QWORD *)(a1 + 776));
  if (*(_QWORD *)(a1 + 792))
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = (VPTimeFreqConverter *)operator new();
      VPTimeFreqConverter::VPTimeFreqConverter(v5, 0, *(_DWORD *)(a1 + 760));
      sub_1A395F534((VPTimeFreqConverter **)(*(_QWORD *)(a1 + 2336) + v3), v5);
      v6 = (VPTimeFreqConverter *)operator new();
      VPTimeFreqConverter::VPTimeFreqConverter(v6, 1u, *(_DWORD *)(a1 + 760));
      sub_1A395F534((VPTimeFreqConverter **)(*(_QWORD *)(a1 + 2360) + v3), v6);
      ++v4;
      v3 += 8;
    }
    while (*(_QWORD *)(a1 + 792) > v4);
  }
}

void sub_1A395F824(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A8596C28](v1, 0x10A0C406C6E14A4);
  _Unwind_Resume(a1);
}

char *sub_1A395F84C(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 2;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 2;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_DWORD *)v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      v17 = &v13[4 * (a2 - v14)];
      v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62)
      sub_1A395516C();
    v8 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = sub_1A395F6D4(a1, v9);
    v10 = a1[1];
    v11 = &v10[4 * a2];
    v12 = 4 * a2;
    do
    {
      *(_DWORD *)v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

float *sub_1A395F95C(float *result, uint64_t a2, float *a3, float *a4, unint64_t a5, uint64_t a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  unint64_t v25;
  float *v26;

  v9 = *a3;
  v8 = a3[1];
  v11 = *result;
  v10 = result[1];
  if (*a4 >= *result)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      *(float *)(a6 + 4 * v12) = a7;
      v13 = v12 + 1;
      v14 = a4[++v12];
    }
    while (v14 < *result);
  }
  if (v13 >= a5)
  {
LABEL_20:
    v25 = a5 - v13;
    if (a5 > v13)
    {
      v26 = (float *)(a6 + 4 * v13);
      do
      {
        *v26++ = a8;
        --v25;
      }
      while (v25);
    }
  }
  else
  {
    v15 = 0;
    v16 = 1;
    v17 = (float)(v8 - v9) / (float)(v10 - v11);
    do
    {
      v18 = a4[v13];
      v19 = result[v16];
      if (v18 >= v19)
      {
        if (v18 <= v19 || v18 >= result[a2 - 1])
        {
          if (v18 == result[v15])
          {
            v20 = a3[v15];
          }
          else
          {
            if (v18 != v19)
              goto LABEL_20;
            v20 = a3[v16];
          }
        }
        else
        {
          do
          {
            v21 = &result[v16++];
            ++v15;
            v22 = v21[1];
          }
          while (v18 > v22);
          v23 = a3[v15];
          v24 = result[v15];
          v17 = (float)(a3[v16] - v23) / (float)(v22 - v24);
          v20 = v23 + (float)(v17 * (float)(v18 - v24));
        }
      }
      else
      {
        v20 = a3[v15] + (float)(v17 * (float)(v18 - result[v15]));
      }
      *(float *)(a6 + 4 * v13++) = v20;
    }
    while (v13 != a5);
  }
  return result;
}

float sub_1A395FA7C(uint64_t a1, uint64_t a2)
{
  const float *v3;
  vDSP_Length v4;
  const float *v5;
  float __C;

  v3 = *(const float **)a2;
  v4 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
  v5 = *(const float **)(a1 + 8);
  if (v4 != (uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v5) >> 2)
    sub_1A3AB07D0();
  __C = 0.0;
  vDSP_dotpr(v3, 1, v5, 1, &__C, v4);
  return *(float *)a1 + (float)(log10f(fabsf(__C) + 0.00000011921) * 10.0);
}

float *sub_1A395FAF8(float *result, uint64_t *a2, int a3)
{
  uint64_t v3;
  float *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  DSPSplitComplex v11;

  v3 = *a2;
  if (a2[1] != *a2)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    do
    {
      v11.realp = 0;
      v11.imagp = 0;
      result = *(float **)(*((_QWORD *)v6 + 192) + v7);
      v11.realp = result;
      v11.imagp = *(float **)(*((_QWORD *)v6 + 195) + v7);
      v9 = *((_QWORD *)v6 + 95);
      if (a3)
      {
        if (v9)
        {
          result = (float *)memmove(result, *(const void **)(v3 + v7), 4 * v9);
          v10 = *((_QWORD *)v6 + 95);
          if (v10)
            result = (float *)memmove(*(void **)(*((_QWORD *)v6 + 195) + v7), (const void *)(*(_QWORD *)(*a2 + v7) + 4 * v10), 4 * v10);
        }
      }
      else
      {
        if (v9)
          memmove(*((void **)v6 + 102), *(const void **)(v3 + v7), 4 * v9);
        result = (float *)VPTimeFreqConverter::Analyze(*(VPTimeFreqConverter **)(*((_QWORD *)v6 + 292) + 8 * v8), *((const float **)v6 + 102), &v11);
      }
      ++v8;
      v3 = *a2;
      v7 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v8);
  }
  return result;
}

void sub_1A395FBF8(uint64_t a1, const void ***a2, int a3)
{
  float v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  double v9;
  float v10;
  vDSP_Length v11;
  DSPSplitComplex v12;
  vDSP_Length __D;

  __D = 0;
  v4 = *(float *)(a1 + 196);
  v12.realp = **(float ***)(a1 + 1536);
  v12.imagp = **(float ***)(a1 + 1560);
  if (a3)
  {
    VPTimeFreqConverter::Synthesize(**(VPTimeFreqConverter ***)(a1 + 2360), &v12, *(float **)(a1 + 816));
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 760);
    if (v5)
      memmove(*(void **)(a1 + 816), **a2, 4 * v5);
  }
  v11 = 0;
  vDSP_nzcros(*(const float **)(a1 + 816), 1, *(_QWORD *)(a1 + 760), &v11, &__D, *(_QWORD *)(a1 + 760));
  v6 = (float)((float)(v4 * 0.8) / 0.79)
     + (float)((float)((float)(0.0 - v4) / 0.79) * (float)((float)__D / (float)*(unint64_t *)(a1 + 760)));
  v7 = *(float *)(a1 + 196);
  if (v6 >= v7)
    v6 = *(float *)(a1 + 196);
  v8 = fmaxf(v6, 0.0);
  v9 = v7 * 0.5;
  v10 = v7 - v8;
  if (v9 > v8)
    v8 = v10;
  *(float *)(a1 + 184) = v8;
}

uint64_t sub_1A395FD10(uint64_t a1, DSPSplitComplex *a2, uint64_t a3)
{
  float *v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const float *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  unint64_t v17;
  float v18;

  v3 = *(float **)a1;
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v4 <= 0x10)
    sub_1A3AB05D4(a1, (uint64_t)a2, a3);
  if (v3[7] <= 0.5)
  {
    if (v4 <= 0x2F0)
      sub_1A3AB05D4(a1, (uint64_t)a2, a3);
    if (v4 <= 0x300)
      sub_1A3AB05D4(a1, (uint64_t)a2, a3);
    if (v3[191] < v3[195])
      sub_1A39600C8(a1);
  }
  sub_1A3960130(a1, a2);
  *(float *)(a1 + 148) = sub_1A395FA7C(a1 + 1896, a1 + 1128);
  *(float *)(a1 + 156) = sub_1A395FA7C(a1 + 1896, a1 + 1440);
  sub_1A39602FC(a1);
  sub_1A3960390(a1, v7, v8);
  vDSP_vsmul(*(const float **)(a1 + 1128), 1, (const float *)(a1 + 128), *(float **)(a1 + 1128), 1, *(_QWORD *)(a1 + 776));
  *(float *)(a1 + 148) = sub_1A395FA7C(a1 + 1896, a1 + 1128);
  vDSP_vsmul(*(const float **)(a1 + 424), 1, (const float *)(a1 + 128), *(float **)(a1 + 424), 1, *(_QWORD *)(a1 + 776));
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 == 1)
  {
    if (!(*(_QWORD *)(a1 + 32) % *(_QWORD *)(a1 + 624)))
      sub_1A3960BB8(a1);
    sub_1A3960D90(a1, v9, v10);
    v12 = *(const float **)(a1 + 1056);
    goto LABEL_15;
  }
  if (!v11)
  {
    if (!(*(_QWORD *)(a1 + 32) % *(_QWORD *)(a1 + 624)))
      sub_1A3960444(a1);
    v12 = *(const float **)(a1 + 1032);
LABEL_15:
    vDSP_vsmul(v12, 1, (const float *)(a1 + 132), *(float **)(a1 + 816), 1, *(_QWORD *)(a1 + 776));
    goto LABEL_17;
  }
  vDSP_vfill((const float *)(a1 + 132), *(float **)(a1 + 816), 1, *(_QWORD *)(a1 + 776));
LABEL_17:
  v16 = *(float **)a1;
  v17 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v17 <= 0x110)
    sub_1A3AB05D4(v13, v14, v15);
  v16[71] = *(float *)(a1 + 148);
  v16[27] = *(float *)(a1 + 156);
  if (v17 <= 0x1B0)
    sub_1A3AB05D4(v13, v14, v15);
  v18 = 0.0;
  if (*(_BYTE *)(a1 + 809))
    v18 = 1.0;
  v16[111] = v18;
  v16[51] = *(float *)(a1 + 120);
  v16[91] = *(float *)(a1 + 120) + v16[87];
  v16[75] = (float)*(unint64_t *)(a1 + 784);
  if (v16[83] > 0.5)
    sub_1A3961018(a1);
  return a1 + 816;
}

float *sub_1A395FF34(_QWORD *a1, float *a2, unint64_t a3, uint64_t a4)
{
  float *v4;
  float *v5;
  unint64_t v6;
  float *v7;
  float *v8;
  unint64_t v9;
  uint64_t v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v4 = (float *)a1[88];
  v5 = (float *)a1[87];
  v6 = v4 - v5;
  v7 = (float *)a1[90];
  if (v6 != (uint64_t)(a1[91] - (_QWORD)v7) >> 2)
    sub_1A3AB0820();
  v8 = (float *)a1[102];
  v9 = (uint64_t)(a1[103] - (_QWORD)v8) >> 2;
  if (v9 < v6)
    sub_1A3AB07F8();
  if (v4 != v5)
  {
    if (v6 <= 1)
      v11 = 1;
    else
      v11 = v4 - v5;
    v12 = (float *)a1[87];
    v13 = (float *)a1[102];
    do
    {
      v14 = *v12++;
      v15 = (float)(a2[1] - *a2) / (float)(v14 * 0.23156);
      v16 = *v7++;
      v17 = exp(v16 * 0.230258509);
      *v13++ = v15 * v17;
      --v11;
    }
    while (v11);
  }
  if (v9 <= v6 - 1)
    sub_1A3960064();
  return sub_1A395F95C(v5, v6, v8, a2, a3, a4, *v8, v8[v6 - 1]);
}

void sub_1A3960064()
{
  sub_1A3960078("vector");
}

void sub_1A3960078(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1A3952E90(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E4A95360, MEMORY[0x1E0DE42E0]);
}

void sub_1A39600B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1A39600C8(uint64_t a1)
{
  float __B;

  __B = 1.0;
  vDSP_vsmul(*(const float **)(a1 + 1104), 1, &__B, *(float **)(a1 + 1440), 1, *(_QWORD *)(a1 + 776));
  vDSP_vclip(*(const float **)(a1 + 1440), 1, (const float *)(a1 + 164), (const float *)(a1 + 168), *(float **)(a1 + 1440), 1, *(_QWORD *)(a1 + 776));
}

void sub_1A3960130(uint64_t a1, DSPSplitComplex *a2)
{
  float *v3;
  vDSP_Length v4;
  const float *v5;
  vDSP_Length v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float __C;
  DSPSplitComplex __A;

  __C = 0.0;
  v3 = *(float **)(a1 + 816);
  v4 = *(_QWORD *)(a1 + 776);
  __A = *a2;
  vDSP_zvmags(&__A, 1, v3, 1, v4);
  v5 = *(const float **)(a1 + 816);
  *v5 = 0.0;
  v6 = *(_QWORD *)(a1 + 776);
  v5[v6 - 1] = 0.0;
  vDSP_sve(v5, 1, &__C, v6);
  v7 = __C;
  v8 = (float)(__C * *(float *)(a1 + 140)) * *(float *)(a1 + 80);
  v9 = exp(*(float *)(a1 + 580) * 0.230258509);
  if (v8 <= v9)
  {
    *(_WORD *)(a1 + 192) = 0;
    if (*(_QWORD *)(a1 + 56))
      goto LABEL_7;
    v12 = *(float *)(a1 + 136);
  }
  else
  {
    v10 = *(float *)(a1 + 84);
    v11 = 1.0 - v10;
    v12 = (float)(v7 * (float)(1.0 - v10)) + (float)(v10 * *(float *)(a1 + 136));
    *(float *)(a1 + 136) = v12;
    *(_WORD *)(a1 + 192) = 1;
    if (*(_QWORD *)(a1 + 56))
    {
      *(float *)&__A.realp = v11;
      vDSP_vsmsma(*(const float **)(a1 + 1416), 1, (const float *)(a1 + 84), *(const float **)(a1 + 816), 1, (const float *)&__A, *(float **)(a1 + 1416), 1, *(_QWORD *)(a1 + 776));
      goto LABEL_7;
    }
  }
  *(float *)&__A.realp = v12 / 10000000.0;
  vDSP_vsmul(*(const float **)(a1 + 1464), 1, (const float *)&__A, *(float **)(a1 + 1416), 1, *(_QWORD *)(a1 + 776));
LABEL_7:
  vDSP_vsmul(*(const float **)(a1 + 1416), 1, (const float *)(a1 + 140), *(float **)(a1 + 1128), 1, *(_QWORD *)(a1 + 776));
  vDSP_vsmul(*(const float **)(a1 + 1128), 1, (const float *)(a1 + 80), *(float **)(a1 + 1128), 1, *(_QWORD *)(a1 + 776));
  if (*(_WORD *)(a1 + 192))
  {
    vDSP_vsmul(*(const float **)(a1 + 816), 1, (const float *)(a1 + 140), *(float **)(a1 + 424), 1, *(_QWORD *)(a1 + 776));
    vDSP_vsmul(*(const float **)(a1 + 424), 1, (const float *)(a1 + 80), *(float **)(a1 + 424), 1, *(_QWORD *)(a1 + 776));
  }
}

uint64_t sub_1A39602FC(uint64_t result)
{
  float v1;
  float v2;

  v1 = *(float *)(result + 156);
  v2 = *(float *)(result + 148);
  if (vabds_f32(v1, *(float *)(result + 160)) <= *(float *)(result + 592)
    && vabds_f32(v2, *(float *)(result + 152)) <= *(float *)(result + 588)
    && *(float *)(result + 140) == *(float *)(result + 144))
  {
    if ((float)((float)(unint64_t)(*(_QWORD *)(result + 32) - *(_QWORD *)(result + 800))
               / (float)(*(float *)(result + 116) / (float)*(unint64_t *)(result + 760))) > *(float *)(result + 596))
      *(_BYTE *)(result + 809) = 0;
  }
  else
  {
    *(_BYTE *)(result + 809) = 1;
    *(_QWORD *)(result + 800) = *(_QWORD *)(result + 32);
    *(float *)(result + 160) = v1;
    *(float *)(result + 152) = v2;
    *(_DWORD *)(result + 144) = *(_DWORD *)(result + 140);
  }
  return result;
}

float sub_1A3960390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;
  double v5;
  float v6;
  float result;

  if (*(_BYTE *)(a1 + 809) || *(_BYTE *)(a1 + 810))
  {
    if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 <= 0x150uLL)
      sub_1A3AB05D4(a1, a2, a3);
    *(float *)(a1 + 120) = sub_1A3961140(a1 + 1840, *(float *)(a1 + 156), *(float *)(*(_QWORD *)a1 + 348));
  }
  if (*(_QWORD *)(a1 + 64) == 1)
  {
    *(_DWORD *)(a1 + 120) = 0;
    v4 = 0.0;
  }
  else
  {
    v4 = *(float *)(a1 + 120);
  }
  *(_BYTE *)(a1 + 810) = 0;
  *(float *)(a1 + 124) = v4;
  v5 = v4;
  v6 = exp(v4 * 0.230258509);
  *(float *)(a1 + 128) = v6;
  result = exp(v5 * 0.115129255);
  *(float *)(a1 + 132) = result;
  return result;
}

void sub_1A3960444(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  BOOL v6;
  float v7;
  float v8;
  unint64_t v9;
  float *v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  vDSP_Length v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float *v27;
  const float *v28;
  vDSP_Length v29;
  uint64_t v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  int *v39;
  uint64_t v40;
  float v41;
  float __B;
  float __C;
  float __A;

  vDSP_mmul(*(const float **)(a1 + 1784), 1, *(const float **)(a1 + 1128), 1, *(float **)(a1 + 840), 1, *(_QWORD *)(a1 + 1648), 1uLL, *(_QWORD *)(a1 + 776));
  vDSP_mmul(*(const float **)(a1 + 1784), 1, *(const float **)(a1 + 1440), 1, *(float **)(a1 + 864), 1, *(_QWORD *)(a1 + 1648), 1uLL, *(_QWORD *)(a1 + 776));
  *(_QWORD *)(a1 + 784) = 0;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 <= 0x1A0uLL)
    sub_1A3AB05D4(v2, v3, v4);
  if (*(float *)(a1 + 156) >= *(float *)(*(_QWORD *)a1 + 428))
  {
    v5 = (_QWORD *)(a1 + 776);
    if (*(_BYTE *)(a1 + 809) || *(_BYTE *)(a1 + 810) || *(_BYTE *)(a1 + 811))
    {
      __A = 0.0;
      v6 = 1;
      vDSP_sve(*(const float **)(a1 + 1128), 1, &__A, *(_QWORD *)(a1 + 776));
      vDSP_vma(*(const float **)(a1 + 864), 1, *(const float **)(a1 + 1248), 1, *(const float **)(a1 + 840), 1, *(float **)(a1 + 888), 1, *(_QWORD *)(a1 + 24));
      vDSP_vsma(*(const float **)(a1 + 840), 1, (const float *)(a1 + 92), *(const float **)(a1 + 864), 1, *(float **)(a1 + 864), 1, *(_QWORD *)(a1 + 24));
      __C = 0.0;
      vDSP_sve(*(const float **)(a1 + 888), 1, &__C, *(_QWORD *)(a1 + 24));
      __B = 1.0 / (float)(__C + 2.2204e-16);
      vDSP_vsmul(*(const float **)(a1 + 888), 1, &__B, *(float **)(a1 + 888), 1, *(_QWORD *)(a1 + 24));
      vDSP_vsmul(*(const float **)(a1 + 864), 1, &__B, *(float **)(a1 + 864), 1, *(_QWORD *)(a1 + 24));
      vDSP_vmul(*(const float **)(a1 + 888), 1, *(const float **)(a1 + 864), 1, *(float **)(a1 + 840), 1, *(_QWORD *)(a1 + 24));
      vDSP_vsq(*(const float **)(a1 + 888), 1, *(float **)(a1 + 912), 1, *(_QWORD *)(a1 + 24));
      vDSP_vsq(*(const float **)(a1 + 864), 1, *(float **)(a1 + 864), 1, *(_QWORD *)(a1 + 24));
      v7 = *(float *)(a1 + 148) - *(float *)(a1 + 156);
      v8 = v7 * (float)(1.0 / (float)(log10f(*(float *)(a1 + 88) + 2.2204e-16) * 10.0));
      if (v8 < 0.0)
        v8 = 0.0;
      if (v8 > 1.0)
        v8 = 1.0;
      v41 = v8;
      vDSP_vsmul(*(const float **)(a1 + 1272), 1, &v41, *(float **)(a1 + 1296), 1, *(_QWORD *)(a1 + 24));
      vDSP_vneg(*(const float **)(a1 + 1296), 1, *(float **)(a1 + 1296), 1, *(_QWORD *)(a1 + 24));
      v40 = 0;
      v9 = *(_QWORD *)(a1 + 24);
      v39 = (int *)(a1 + 776);
      if (v9)
      {
        v10 = *(float **)(a1 + 864);
        if (*v10 <= 2.2204e-16 || (v11 = *(float **)(a1 + 888), *v11 <= 2.2204e-16))
        {
          v6 = 0;
        }
        else
        {
          v12 = 1;
          do
          {
            v13 = v12;
            if (v9 == v12)
              break;
            if (v10[v12] <= 2.2204e-16)
              break;
            v14 = v11[v12++];
          }
          while (v14 > 2.2204e-16);
          v6 = v9 <= v13;
        }
      }
      *(_BYTE *)(a1 + 808) = v6;
      if ((float)(*(float *)(a1 + 572) * __A) < INFINITY)
      {
        v15 = 0.0;
        v16 = -1000000.0;
        do
        {
          v17 = *(_QWORD *)(a1 + 784);
          if (v17 > *(_QWORD *)(a1 + 616))
            break;
          *(_QWORD *)(a1 + 784) = v17 + 1;
          *((float *)&v40 + 1) = (float)(v15 + v16) * 0.5;
          vDSP_vsma(*(const float **)(a1 + 888), 1, (const float *)&v40 + 1, *(const float **)(a1 + 1296), 1, *(float **)(a1 + 936), 1, *(_QWORD *)(a1 + 24));
          vDSP_vmul(*(const float **)(a1 + 864), 1, *(const float **)(a1 + 936), 1, *(float **)(a1 + 960), 1, *(_QWORD *)(a1 + 24));
          vDSP_vma(*(const float **)(a1 + 840), 1, *(const float **)(a1 + 1224), 1, *(const float **)(a1 + 960), 1, *(float **)(a1 + 960), 1, *(_QWORD *)(a1 + 24));
          vDSP_vmul(*(const float **)(a1 + 936), 1, *(const float **)(a1 + 840), 1, *(float **)(a1 + 1008), 1, *(_QWORD *)(a1 + 24));
          vDSP_vmul(*(const float **)(a1 + 1008), 1, *(const float **)(a1 + 1176), 1, *(float **)(a1 + 1008), 1, *(_QWORD *)(a1 + 24));
          vDSP_vmul(*(const float **)(a1 + 936), 1, *(const float **)(a1 + 912), 1, *(float **)(a1 + 984), 1, *(_QWORD *)(a1 + 24));
          vDSP_vmul(*(const float **)(a1 + 984), 1, *(const float **)(a1 + 1200), 1, *(float **)(a1 + 984), 1, *(_QWORD *)(a1 + 24));
          if (*(_BYTE *)(a1 + 808))
          {
            sub_1A3961278(a1, (const float **)(a1 + 984), (const float **)(a1 + 1008), (float **)(a1 + 984), (const float **)(a1 + 960), (float **)(a1 + 936));
            v18 = *(_QWORD *)(a1 + 24);
          }
          else
          {
            v18 = *(_QWORD *)(a1 + 24);
            if (v18)
            {
              v19 = 0;
              v20 = *(_QWORD *)(a1 + 864);
              do
              {
                if (*(float *)(v20 + 4 * v19) <= 2.2204e-16
                  || *(float *)(*(_QWORD *)(a1 + 888) + 4 * v19) <= 2.2204e-16)
                {
                  *(_DWORD *)(*(_QWORD *)(a1 + 936) + 4 * v19) = 1065353216;
                }
                ++v19;
              }
              while (v18 != v19);
            }
          }
          vDSP_vthr(*(const float **)(a1 + 936), 1, (const float *)(a1 + 748), *(float **)(a1 + 936), 1, v18);
          sub_1A395F95C(*(float **)(a1 + 1664), *(_QWORD *)(a1 + 1648), *(float **)(a1 + 936), *(float **)(a1 + 1712), (uint64_t)(*(_QWORD *)(a1 + 1720) - *(_QWORD *)(a1 + 1712)) >> 2, *(_QWORD *)(a1 + 1032), 0.0, 1.0);
          vDSP_vclip(*(const float **)(a1 + 1032), 1, (const float *)(a1 + 100), (const float *)(a1 + 108), *(float **)(a1 + 1032), 1, *(_QWORD *)(a1 + 40));
          vDSP_vclip((const float *)(*(_QWORD *)(a1 + 1032) + 4 * *(_QWORD *)(a1 + 40)), 1, (const float *)(a1 + 104), (const float *)(a1 + 112), (float *)(*(_QWORD *)(a1 + 1032) + 4 * *(_QWORD *)(a1 + 40)), 1, *(_QWORD *)(a1 + 776) - *(_QWORD *)(a1 + 40));
          vDSP_dotpr(*(const float **)(a1 + 1032), 1, *(const float **)(a1 + 1128), 1, (float *)&v40, *(_QWORD *)(a1 + 776));
          v21 = vabds_f32(*(float *)&v40, __A);
          if (*(float *)&v40 <= __A)
            v16 = *((float *)&v40 + 1);
          else
            v15 = *((float *)&v40 + 1);
        }
        while (v21 > (float)(*(float *)(a1 + 572) * __A));
      }
      vvsqrtf(*(float **)(a1 + 1032), *(const float **)(a1 + 1032), v39);
      if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 <= 0x1A0uLL)
        sub_1A3AB05D4(v22, v23, v24);
      v25 = (float)(*(float *)(a1 + 156) - *(float *)(*(_QWORD *)a1 + 428)) * 0.25;
      if (v25 < 1.0)
      {
        v26 = *(_QWORD *)v39;
        if (*(_QWORD *)v39)
        {
          v27 = *(float **)(a1 + 1032);
          do
          {
            *v27 = powf(*v27, v25);
            ++v27;
            --v26;
          }
          while (v26);
        }
      }
    }
    else if (*v5)
    {
      memmove(*(void **)(a1 + 1032), *(const void **)(a1 + 1344), 4 * *v5);
    }
  }
  else
  {
    __A = 1.0;
    vDSP_vfill(&__A, *(float **)(a1 + 1032), 1, *(_QWORD *)(a1 + 776));
    vDSP_vfill(&__A, *(float **)(a1 + 1344), 1, *(_QWORD *)(a1 + 776));
  }
  v28 = *(const float **)(a1 + 1032);
  v29 = (uint64_t)(*(_QWORD *)(a1 + 1040) - (_QWORD)v28) >> 2;
  __A = 0.0;
  vDSP_sve(v28, 1, &__A, v29);
  if ((LODWORD(__A) & 0x7FFFFFFFu) >= 0x7F800000)
  {
    __A = 1.0;
    vDSP_vfill(&__A, *(float **)(a1 + 1032), 1, *(_QWORD *)(a1 + 776));
  }
  *(_BYTE *)(a1 + 811) = 0;
  v30 = *(_QWORD *)(a1 + 776);
  if (v30)
  {
    v31 = *(float **)(a1 + 1032);
    v32 = *(float **)(a1 + 1344);
    v33 = (float)*(unint64_t *)(a1 + 624);
    v34 = (float)*(unint64_t *)(a1 + 760);
    v35 = *(_QWORD *)(a1 + 776);
    do
    {
      v36 = *v32;
      v37 = *v31 / *v32;
      v38 = exp((float)((float)(*(float *)(a1 + 176) * v33) / (float)(*(float *)(a1 + 116) / v34)) * 0.115129255);
      if (v37 > v38)
      {
        *v31 = v36 * v38;
        *(_BYTE *)(a1 + 811) = 1;
      }
      ++v32;
      ++v31;
      --v35;
    }
    while (v35);
    memmove(*(void **)(a1 + 1344), *(const void **)(a1 + 1032), 4 * v30);
  }
}

void sub_1A3960BB8(uint64_t a1)
{
  float v2;
  float __A;
  float __B;

  if (*(_BYTE *)(a1 + 809) || *(_BYTE *)(a1 + 810) || *(_BYTE *)(a1 + 811))
  {
    vDSP_mmul(*(const float **)(a1 + 1784), 1, *(const float **)(a1 + 1128), 1, *(float **)(a1 + 840), 1, *(_QWORD *)(a1 + 1648), 1uLL, *(_QWORD *)(a1 + 776));
    vDSP_mmul(*(const float **)(a1 + 1784), 1, *(const float **)(a1 + 1440), 1, *(float **)(a1 + 400), 1, *(_QWORD *)(a1 + 1648), 1uLL, *(_QWORD *)(a1 + 776));
    __B = 0.000005;
    vDSP_vsmul(*(const float **)(a1 + 840), 1, &__B, *(float **)(a1 + 232), 1, *(_QWORD *)(a1 + 24));
    vvlogf(*(float **)(a1 + 864), *(const float **)(a1 + 232), (const int *)(a1 + 24));
    if (!*(_QWORD *)(a1 + 32))
    {
      __A = 1.0;
      vDSP_svdiv(&__A, *(const float **)(a1 + 544), 1, *(float **)(a1 + 520), 1, *(_QWORD *)(a1 + 24));
      vDSP_vadd(*(const float **)(a1 + 520), 1, *(const float **)(a1 + 864), 1, *(float **)(a1 + 520), 1, *(_QWORD *)(a1 + 24));
      vDSP_vsmul(*(const float **)(a1 + 544), 1, (const float *)(a1 + 228), *(float **)(a1 + 544), 1, *(_QWORD *)(a1 + 24));
      vvpowf(*(float **)(a1 + 496), *(const float **)(a1 + 544), *(const float **)(a1 + 840), (const int *)(a1 + 24));
    }
    v2 = 1.0;
    vDSP_vsub(*(const float **)(a1 + 864), 1, *(const float **)(a1 + 520), 1, *(float **)(a1 + 888), 1, *(_QWORD *)(a1 + 24));
    vDSP_svdiv(&v2, *(const float **)(a1 + 888), 1, *(float **)(a1 + 544), 1, *(_QWORD *)(a1 + 24));
    vDSP_vsmul(*(const float **)(a1 + 544), 1, (const float *)(a1 + 228), *(float **)(a1 + 544), 1, *(_QWORD *)(a1 + 24));
    sub_1A39613AC(a1, (const float **)(a1 + 400));
    sub_1A39614F4(a1, (const float **)(a1 + 840), (const float **)(a1 + 400));
  }
}

void sub_1A3960D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const float *v4;
  vDSP_Length v5;
  float __D;
  float __A;
  float __C;

  __A = 1.0;
  if (*(_WORD *)(a1 + 192))
  {
    vDSP_mmul(*(const float **)(a1 + 1784), 1, *(const float **)(a1 + 424), 1, *(float **)(a1 + 376), 1, *(_QWORD *)(a1 + 1648), 1uLL, *(_QWORD *)(a1 + 776));
    __D = 1.0 - *(float *)(a1 + 84);
    vvlogf(*(float **)(a1 + 864), *(const float **)(a1 + 376), (const int *)(a1 + 24));
    vDSP_vsmsma(*(const float **)(a1 + 520), 1, (const float *)(a1 + 84), *(const float **)(a1 + 864), 1, &__D, *(float **)(a1 + 520), 1, *(_QWORD *)(a1 + 24));
    vvpowf(*(float **)(a1 + 472), *(const float **)(a1 + 544), *(const float **)(a1 + 376), (const int *)(a1 + 24));
    vDSP_vsmsma(*(const float **)(a1 + 496), 1, (const float *)(a1 + 84), *(const float **)(a1 + 472), 1, &__D, *(float **)(a1 + 496), 1, *(_QWORD *)(a1 + 24));
  }
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 <= 0x1A0uLL)
    sub_1A3AB05D4(a1, a2, a3);
  if (*(float *)(a1 + 156) >= *(float *)(*(_QWORD *)a1 + 428) && *(_WORD *)(a1 + 192) && *(_BYTE *)(a1 + 1928))
  {
    sub_1A3962624(a1, a1 + 376, (const float **)(a1 + 400));
    sub_1A396294C(a1, (const float **)(a1 + 376));
    vDSP_vdiv(*(const float **)(a1 + 376), 1, *(const float **)(a1 + 352), 1, *(float **)(a1 + 840), 1, *(_QWORD *)(a1 + 24));
    sub_1A395F95C(*(float **)(a1 + 1664), *(_QWORD *)(a1 + 1648), *(float **)(a1 + 840), *(float **)(a1 + 1712), (uint64_t)(*(_QWORD *)(a1 + 1720) - *(_QWORD *)(a1 + 1712)) >> 2, *(_QWORD *)(a1 + 1056), 0.0, 1.0);
    vDSP_vclip(*(const float **)(a1 + 1056), 1, (const float *)(a1 + 212), (const float *)(a1 + 220), *(float **)(a1 + 1056), 1, *(_QWORD *)(a1 + 40));
    vDSP_vclip((const float *)(*(_QWORD *)(a1 + 1056) + 4 * *(_QWORD *)(a1 + 40)), 1, (const float *)(a1 + 216), (const float *)(a1 + 224), (float *)(*(_QWORD *)(a1 + 1056) + 4 * *(_QWORD *)(a1 + 40)), 1, *(_QWORD *)(a1 + 776) - *(_QWORD *)(a1 + 40));
    vvsqrtf(*(float **)(a1 + 1056), *(const float **)(a1 + 1056), (const int *)(a1 + 776));
  }
  else
  {
    vDSP_vfill(&__A, *(float **)(a1 + 1056), 1, *(_QWORD *)(a1 + 776));
    vDSP_vfill(&__A, *(float **)(a1 + 1368), 1, *(_QWORD *)(a1 + 776));
  }
  v4 = *(const float **)(a1 + 1056);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 1064) - (_QWORD)v4) >> 2;
  __C = 0.0;
  vDSP_sve(v4, 1, &__C, v5);
  if ((LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000)
    vDSP_vfill(&__A, *(float **)(a1 + 1056), 1, *(_QWORD *)(a1 + 776));
  *(_BYTE *)(a1 + 811) = 0;
}

void sub_1A3961018(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  _QWORD *v13;

  vDSP_vclr((float *)(a1 + 1584), 1, 0x10uLL);
  v5 = *(_QWORD *)(a1 + 776);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 1080);
    while (1)
    {
      v10 = a1 + 4 * v8;
      if (*(float *)(v9 + 4 * v6) >= *(float *)(v10 + 632))
      {
        v11 = *(float *)(v10 + 1584) / fmaxf((float)v7, 1.0);
        *(float *)(v10 + 1584) = v11;
        if (v8 + 28 >= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4))
          sub_1A3AB05D4(v2, v3, v4);
        *(float *)(*(_QWORD *)a1 + 16 * (v8 + 28) + 12) = v11;
        if (++v8 == 16)
          return;
        v7 = 0;
      }
      v12 = *(_QWORD *)(a1 + 48);
      v13 = (_QWORD *)(a1 + 1032);
      if (!v12)
        goto LABEL_10;
      if (v12 == 1)
        break;
LABEL_11:
      ++v7;
      if (v5 == ++v6)
        return;
    }
    v13 = (_QWORD *)(a1 + 1056);
LABEL_10:
    *(float *)(a1 + 4 * v8 + 1584) = *(float *)(a1 + 4 * v8 + 1584)
                                   + (float)(log10f(*(float *)(*v13 + 4 * v6) + 2.2204e-16) * 20.0);
    goto LABEL_11;
  }
}

float sub_1A3961140(uint64_t a1, float a2, float a3)
{
  float v3;
  float v4;
  uint64_t v5;
  float v6;
  float v7;
  float result;
  float v9;

  v3 = *(float *)(a1 + 4);
  if (!*(_BYTE *)(a1 + 44))
  {
    *(float *)(a1 + 32) = a3;
    *(float *)(a1 + 36) = v3;
    *(float *)(a1 + 40) = a3;
    *(_WORD *)(a1 + 44) = 1;
  }
  if (v3 > a2)
  {
    *(float *)(a1 + 40) = a3;
    *(_BYTE *)(a1 + 45) = 0;
LABEL_5:
    v4 = a3;
    goto LABEL_20;
  }
  if (*(_BYTE *)(a1 + 45))
  {
    if (*(float *)(a1 + 48) <= a2)
    {
      v6 = *(float *)(a1 + 32);
      if (v6 <= a3)
      {
        v4 = *(float *)(a1 + 40);
      }
      else
      {
        v4 = (float)(a3 - v6) + *(float *)(a1 + 40);
        *(float *)(a1 + 40) = v4;
        *(_BYTE *)(a1 + 45) = 0;
      }
      goto LABEL_16;
    }
    *(_BYTE *)(a1 + 45) = 0;
  }
  v5 = 12;
  if (*(float *)(a1 + 8) < a2)
    v5 = 16;
  v4 = (float)(*(float *)(a1 + 40) + (float)(*(float *)(a1 + v5) * (float)(a2 - *(float *)(a1 + 36))))
     + (float)(a3 - *(float *)(a1 + 32));
  *(float *)(a1 + 40) = v4;
  if (v4 > *(float *)(a1 + 20))
  {
    *(_BYTE *)(a1 + 45) = 1;
    *(float *)(a1 + 48) = a2;
  }
LABEL_16:
  v7 = *(float *)(a1 + 20);
  if (v4 <= v7)
  {
    if (v4 < a3)
    {
      *(float *)(a1 + 40) = a3;
      goto LABEL_5;
    }
  }
  else
  {
    *(float *)(a1 + 40) = v7;
    v4 = v7;
  }
LABEL_20:
  *(float *)(a1 + 32) = a3;
  *(float *)(a1 + 36) = a2;
  result = v4 - a3;
  *(float *)(a1 + 28) = v4 - a3;
  v9 = *(float *)a1;
  if (result > *(float *)a1)
  {
    *(float *)(a1 + 28) = v9;
    result = v9;
  }
  if (fabsf(result) == INFINITY)
  {
    *(_DWORD *)(a1 + 28) = 0;
    return 0.0;
  }
  return result;
}

void sub_1A3961278(uint64_t a1, const float **a2, const float **a3, float **a4, const float **a5, float **a6)
{
  uint64_t v10;

  v10 = a1 + 24;
  vDSP_vmul(*a2, 1, *a5, 1, *a6, 1, *(_QWORD *)(a1 + 24));
  vDSP_vsmul(*a6, 1, (const float *)(v10 + 720), *a6, 1, *(_QWORD *)v10);
  vDSP_vsq(*a3, 1, *a4, 1, *(_QWORD *)v10);
  vDSP_vsub(*a6, 1, *a4, 1, *a6, 1, *(_QWORD *)v10);
  vDSP_vthr(*a6, 1, (const float *)(v10 + 724), *a6, 1, *(_QWORD *)v10);
  vvsqrtf(*a6, *a6, (const int *)v10);
  vDSP_vsub(*a3, 1, *a6, 1, *a6, 1, *(_QWORD *)v10);
  vDSP_vdiv(*a6, 1, *a5, 1, *a6, 1, *(_QWORD *)v10);
  vDSP_vsmul(*a6, 1, (const float *)(v10 + 728), *a6, 1, *(_QWORD *)v10);
}

void sub_1A39613AC(uint64_t a1, const float **a2)
{
  uint64_t v3;
  float __B;

  v3 = a1 + 24;
  vDSP_vfill((const float *)(a1 + 188), *(float **)(a1 + 912), 1, *(_QWORD *)(a1 + 24));
  vvpowf(*(float **)(v3 + 232), *a2, *(const float **)(v3 + 888), (const int *)v3);
  vvpowf(*(float **)(v3 + 912), *(const float **)(v3 + 520), *(const float **)(v3 + 208), (const int *)v3);
  vDSP_vmul(*(const float **)(v3 + 232), 1, *(const float **)(v3 + 208), 1, *(float **)(v3 + 888), 1, *(_QWORD *)v3);
  vDSP_vsub(*(const float **)(v3 + 888), 1, *(const float **)(v3 + 208), 1, *(float **)(v3 + 936), 1, *(_QWORD *)v3);
  vDSP_vadd(*a2, 1, *(const float **)(v3 + 936), 1, *(float **)(v3 + 936), 1, *(_QWORD *)v3);
  vDSP_vdiv(*(const float **)(v3 + 912), 1, *(const float **)(v3 + 936), 1, *(float **)(v3 + 280), 1, *(_QWORD *)v3);
  __B = -2.0;
  vDSP_vmul(*(const float **)(v3 + 520), 1, *(const float **)(v3 + 912), 1, *(float **)(v3 + 936), 1, *(_QWORD *)v3);
  vDSP_vsmul(*(const float **)(v3 + 936), 1, &__B, *(float **)(v3 + 936), 1, *(_QWORD *)v3);
  vDSP_vdiv(*(const float **)(v3 + 936), 1, *a2, 1, *(float **)(v3 + 304), 1, *(_QWORD *)v3);
}

void sub_1A39614F4(uint64_t a1, const float **a2, const float **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float __B;
  float v12;
  float __C;

  v6 = a1 + 888;
  v7 = a1 + 912;
  v8 = a1 + 936;
  v9 = a1 + 960;
  __C = 0.0;
  vDSP_sve(*a2, 1, &__C, *(_QWORD *)(a1 + 24));
  v12 = 0.0;
  vDSP_sve(*(const float **)(a1 + 1128), 1, &v12, *(_QWORD *)(a1 + 776));
  __C = (float)(__C + v12) * 0.5;
  vDSP_vmul(*(const float **)(a1 + 256), 1, *a2, 1, *(float **)(a1 + 888), 1, *(_QWORD *)(a1 + 24));
  vDSP_vma(*(const float **)(a1 + 304), 1, *(const float **)(a1 + 496), 1, *(const float **)(a1 + 888), 1, *(float **)(a1 + 888), 1, *(_QWORD *)(a1 + 24));
  vDSP_vsub(*a3, 1, *(const float **)(a1 + 888), 1, *(float **)(a1 + 888), 1, *(_QWORD *)(a1 + 24));
  vDSP_vdiv(*(const float **)(a1 + 544), 1, *a3, 1, *(float **)(a1 + 912), 1, *(_QWORD *)(a1 + 24));
  vDSP_vsmul(*(const float **)(a1 + 912), 1, (const float *)(a1 + 756), *(float **)(a1 + 912), 1, *(_QWORD *)(a1 + 24));
  vDSP_vma(*(const float **)(a1 + 328), 1, *(const float **)(a1 + 496), 1, *(const float **)(a1 + 912), 1, *(float **)(a1 + 912), 1, *(_QWORD *)(a1 + 24));
  __B = 0.0;
  vDSP_sve(*(const float **)(a1 + 888), 1, &__B, *(_QWORD *)(a1 + 24));
  __B = -(float)(__B - __C);
  vDSP_vsdiv(*(const float **)(a1 + 912), 1, &__B, *(float **)(a1 + 936), 1, *(_QWORD *)(a1 + 24));
  v10 = 2.0;
  vDSP_vsmul(*(const float **)(a1 + 544), 1, &v10, *(float **)(a1 + 912), 1, *(_QWORD *)(a1 + 24));
  v10 = 0.001;
  vDSP_vsmul(*(const float **)(a1 + 544), 1, &v10, *(float **)(a1 + 888), 1, *(_QWORD *)(a1 + 24));
  vDSP_vsq(*(const float **)(a1 + 912), 1, *(float **)(a1 + 960), 1, *(_QWORD *)(a1 + 24));
  vDSP_vdiv(*(const float **)(a1 + 960), 1, *(const float **)(a1 + 448), 1, *(float **)(a1 + 960), 1, *(_QWORD *)(a1 + 24));
  sub_1A3961748(a1 + 1928, v9, v6, v7, v8, 1.0);
}

void sub_1A3961748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  char *v11;
  unint64_t v12;
  vDSP_Length v13;
  uint64_t v14;
  unint64_t v15;
  vDSP_Length v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float __C;
  float __B;
  float __A;

  v11 = (char *)(a1 + 48);
  if (v11 != (char *)a2)
    sub_1A39624B4(v11, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if (a1 + 72 != a3)
    sub_1A39624B4((char *)(a1 + 72), *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  if (a1 + 96 != a4)
    sub_1A39624B4((char *)(a1 + 96), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  if (a1 + 120 != a5)
    sub_1A39624B4((char *)(a1 + 120), *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  *(float *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 376) = 0;
  if (*(_QWORD *)(a1 + 8))
  {
    v12 = 0;
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 192);
    v15 = (*(_QWORD *)(a1 + 200) - v14) >> 3;
    do
    {
      if (v15 <= v12)
        sub_1A3960064();
      *(_QWORD *)(v14 + 8 * v12) = v13;
      v12 = *(_QWORD *)(a1 + 376) + 1;
      *(_QWORD *)(a1 + 376) = v12;
      ++v13;
      v16 = *(_QWORD *)(a1 + 8);
    }
    while (v16 > v13);
  }
  else
  {
    v16 = 0;
  }
  *(float *)(a1 + 36) = a6;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  __A = 0.0;
  vDSP_vfill(&__A, *(float **)(a1 + 288), 1, v16);
  vDSP_vmul(*(const float **)(a1 + 48), 1, *(const float **)(a1 + 72), 1, *(float **)(a1 + 312), 1, *(_QWORD *)(a1 + 8));
  vDSP_vdiv(*(const float **)(a1 + 120), 1, *(const float **)(a1 + 312), 1, *(float **)(a1 + 312), 1, *(_QWORD *)(a1 + 8));
  __B = -2.0;
  vDSP_vsmul(*(const float **)(a1 + 312), 1, &__B, *(float **)(a1 + 312), 1, *(_QWORD *)(a1 + 8));
  vDSP_vmul(*(const float **)(a1 + 48), 1, *(const float **)(a1 + 96), 1, *(float **)(a1 + 336), 1, *(_QWORD *)(a1 + 8));
  vDSP_vdiv(*(const float **)(a1 + 120), 1, *(const float **)(a1 + 336), 1, *(float **)(a1 + 336), 1, *(_QWORD *)(a1 + 8));
  vDSP_vsmul(*(const float **)(a1 + 336), 1, &__B, *(float **)(a1 + 336), 1, *(_QWORD *)(a1 + 8));
  __C = 0.0;
  vDSP_dotpr(*(const float **)(a1 + 120), 1, *(const float **)(a1 + 96), 1, &__C, *(_QWORD *)(a1 + 8));
  if (__C >= *(float *)(a1 + 32))
  {
    while (*(_QWORD *)(a1 + 24) < *(_QWORD *)(a1 + 8))
    {
      sub_1A3961A44(a1);
      sub_1A3961B0C(a1);
      sub_1A3961C58(a1);
      v22 = *(float *)(a1 + 44);
      if (v22 <= 0.0)
      {
        if (v22 >= 0.0)
        {
          if (v22 == 0.0 || !*(_QWORD *)(a1 + 384))
          {
            sub_1A39620A0((_QWORD *)a1);
            break;
          }
          *(_BYTE *)a1 = 0;
        }
        else
        {
          sub_1A3961F64((float *)a1);
        }
      }
      else
      {
        sub_1A3961E28((float *)a1);
      }
    }
    sub_1A3962188(a1);
    *(_BYTE *)a1 = 1;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    if (v17)
    {
      v18 = 0;
      v19 = *(char **)a3;
      v20 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2;
      do
      {
        if (v20 == v18 || (v21 = *(_QWORD *)(a1 + 288), v18 >= (*(_QWORD *)(a1 + 296) - v21) >> 2))
          sub_1A3960064();
        *(_DWORD *)(v21 + 4 * v18) = *(_DWORD *)&v19[4 * v18];
        *(_BYTE *)a1 = 0;
        ++v18;
      }
      while (v17 != v18);
    }
  }
}

uint64_t sub_1A3961A44(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  float v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(result + 376);
  if (v1)
  {
    v2 = *(unint64_t **)(result + 192);
    v3 = (uint64_t)(*(_QWORD *)(result + 200) - (_QWORD)v2) >> 3;
    v4 = 0.0;
    do
    {
      if (!v3)
        sub_1A3960064();
      v5 = *v2;
      v6 = *(_QWORD *)(result + 120);
      if (*v2 >= (*(_QWORD *)(result + 128) - v6) >> 2)
        sub_1A3960064();
      v7 = *(_QWORD *)(result + 48);
      if (v5 >= (*(_QWORD *)(result + 56) - v7) >> 2)
        sub_1A3960064();
      v4 = *(float *)(v6 + 4 * v5) * *(float *)(v6 + 4 * v5) / *(float *)(v7 + 4 * v5) + v4;
      --v3;
      ++v2;
      --v1;
    }
    while (v1);
    *(float *)(result + 40) = (float)(*(float *)(result + 36) * -2.0) / v4;
  }
  else
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

uint64_t sub_1A3961B0C(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  *(_QWORD *)(result + 384) = 0;
  *(_QWORD *)(result + 392) = 0;
  *(_QWORD *)(result + 400) = 0;
  if (*(_QWORD *)(result + 376))
  {
    v1 = 0;
    v2 = *(_QWORD *)(result + 192);
    v3 = *(float *)(result + 40);
    v4 = (*(_QWORD *)(result + 200) - v2) >> 3;
    do
    {
      if (v4 == v1)
        sub_1A3960064();
      v5 = *(_QWORD *)(v2 + 8 * v1);
      v6 = *(_QWORD *)(result + 312);
      if (v5 >= (*(_QWORD *)(result + 320) - v6) >> 2)
        sub_1A3960064();
      if (v3 >= *(float *)(v6 + 4 * v5))
      {
        v12 = *(_QWORD *)(result + 392);
        v13 = *(_QWORD *)(result + 240);
        if (v12 >= (*(_QWORD *)(result + 248) - v13) >> 3)
          sub_1A3960064();
        v10 = (unint64_t *)(v13 + 8 * v12);
        v11 = (_QWORD *)(result + 392);
      }
      else
      {
        v7 = *(_QWORD *)(result + 336);
        if (v5 >= (*(_QWORD *)(result + 344) - v7) >> 2)
          sub_1A3960064();
        if (v3 <= *(float *)(v7 + 4 * v5))
        {
          v14 = *(_QWORD *)(result + 400);
          v15 = *(_QWORD *)(result + 264);
          if (v14 >= (*(_QWORD *)(result + 272) - v15) >> 3)
            sub_1A3960064();
          v10 = (unint64_t *)(v15 + 8 * v14);
          v11 = (_QWORD *)(result + 400);
        }
        else
        {
          v8 = *(_QWORD *)(result + 384);
          v9 = *(_QWORD *)(result + 216);
          if (v8 >= (*(_QWORD *)(result + 224) - v9) >> 3)
            sub_1A3960064();
          v10 = (unint64_t *)(v9 + 8 * v8);
          v11 = (_QWORD *)(result + 384);
        }
      }
      *v10 = v5;
      ++*v11;
      ++v1;
    }
    while (*(_QWORD *)(result + 376) > v1);
  }
  return result;
}

uint64_t sub_1A3961C58(uint64_t result)
{
  uint64_t v1;
  float v2;
  float v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;

  v1 = *(_QWORD *)(result + 384);
  v2 = 0.0;
  v3 = 0.0;
  if (v1)
  {
    v4 = *(unint64_t **)(result + 216);
    v5 = (uint64_t)(*(_QWORD *)(result + 224) - (_QWORD)v4) >> 3;
    do
    {
      if (!v5)
        goto LABEL_25;
      v6 = *v4;
      v7 = *(_QWORD *)(result + 120);
      if (*v4 >= (*(_QWORD *)(result + 128) - v7) >> 2)
LABEL_26:
        sub_1A3960064();
      v8 = *(_QWORD *)(result + 48);
      if (v6 >= (*(_QWORD *)(result + 56) - v8) >> 2)
        goto LABEL_24;
      v3 = *(float *)(v7 + 4 * v6) * *(float *)(v7 + 4 * v6) / *(float *)(v8 + 4 * v6) + v3;
      --v5;
      ++v4;
      --v1;
    }
    while (v1);
    v3 = (float)(*(float *)(result + 40) * -0.5) * v3;
  }
  v9 = *(_QWORD *)(result + 392);
  if (v9)
  {
    v10 = *(unint64_t **)(result + 240);
    v11 = (uint64_t)(*(_QWORD *)(result + 248) - (_QWORD)v10) >> 3;
    v2 = 0.0;
    while (v11)
    {
      v12 = *v10;
      v13 = *(_QWORD *)(result + 120);
      if (*v10 >= (*(_QWORD *)(result + 128) - v13) >> 2)
        goto LABEL_26;
      v14 = *(_QWORD *)(result + 72);
      if (v12 >= (*(_QWORD *)(result + 80) - v14) >> 2)
        goto LABEL_24;
      v2 = v2 + (float)(*(float *)(v13 + 4 * v12) * *(float *)(v14 + 4 * v12));
      --v11;
      ++v10;
      if (!--v9)
        goto LABEL_14;
    }
LABEL_25:
    sub_1A3960064();
  }
LABEL_14:
  v15 = *(_QWORD *)(result + 400);
  v16 = 0.0;
  if (v15)
  {
    v17 = *(unint64_t **)(result + 264);
    v18 = (uint64_t)(*(_QWORD *)(result + 272) - (_QWORD)v17) >> 3;
    while (1)
    {
      if (!v18)
        sub_1A3960064();
      v19 = *v17;
      v20 = *(_QWORD *)(result + 120);
      if (*v17 >= (*(_QWORD *)(result + 128) - v20) >> 2)
        sub_1A3960064();
      v21 = *(_QWORD *)(result + 96);
      if (v19 >= (*(_QWORD *)(result + 104) - v21) >> 2)
        break;
      v16 = v16 + (float)(*(float *)(v20 + 4 * v19) * *(float *)(v21 + 4 * v19));
      --v18;
      ++v17;
      if (!--v15)
        goto LABEL_20;
    }
LABEL_24:
    sub_1A3960064();
  }
LABEL_20:
  v22 = (float)(v3 + v2) + v16;
  v23 = *(float *)(result + 36);
  if (vabds_f32(v22, v23) >= 0.0000001)
    v24 = v22 - v23;
  else
    v24 = 0.0;
  *(float *)(result + 44) = v24;
  return result;
}

float *sub_1A3961E28(float *result)
{
  float *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;

  v8 = 0;
  if (*((_QWORD *)result + 49))
  {
    v1 = result;
    v2 = 0;
    do
    {
      v3 = *((_QWORD *)v1 + 30);
      if (v2 >= (*((_QWORD *)v1 + 31) - v3) >> 3)
        sub_1A3960064();
      v8 = *(_QWORD *)(v3 + 8 * v2);
      v4 = *((_QWORD *)v1 + 15);
      if (v8 >= (unint64_t)((*((_QWORD *)v1 + 16) - v4) >> 2))
        sub_1A3960064();
      v5 = *((_QWORD *)v1 + 9);
      if (v8 >= (unint64_t)((*((_QWORD *)v1 + 10) - v5) >> 2))
        sub_1A3960064();
      v1[9] = v1[9] - (float)(*(float *)(v4 + 4 * v8) * *(float *)(v5 + 4 * v8));
      result = (float *)sub_1A39625BC(*((_QWORD **)v1 + 24), (_QWORD *)(*((_QWORD *)v1 + 24) + 8 * *((_QWORD *)v1 + 47)), &v8);
      *((_QWORD *)v1 + 47) = ((uint64_t)result - *((_QWORD *)v1 + 24)) >> 3;
      *((int64x2_t *)v1 + 1) = vaddq_s64(*(int64x2_t *)(v1 + 4), (int64x2_t)xmmword_1A3ABF210);
      v6 = *((_QWORD *)v1 + 45);
      v7 = *((_QWORD *)v1 + 18);
      if (v6 >= (*((_QWORD *)v1 + 19) - v7) >> 3)
        sub_1A3960064();
      *(_QWORD *)(v7 + 8 * v6) = v8;
      ++*((_QWORD *)v1 + 45);
      ++v2;
    }
    while (*((_QWORD *)v1 + 49) > v2);
  }
  return result;
}

float *sub_1A3961F64(float *result)
{
  float *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;

  v8 = 0;
  if (*((_QWORD *)result + 50))
  {
    v1 = result;
    v2 = 0;
    do
    {
      v3 = *((_QWORD *)v1 + 33);
      if (v2 >= (*((_QWORD *)v1 + 34) - v3) >> 3)
        sub_1A3960064();
      v8 = *(_QWORD *)(v3 + 8 * v2);
      v4 = *((_QWORD *)v1 + 15);
      if (v8 >= (unint64_t)((*((_QWORD *)v1 + 16) - v4) >> 2))
        sub_1A3960064();
      v5 = *((_QWORD *)v1 + 12);
      if (v8 >= (unint64_t)((*((_QWORD *)v1 + 13) - v5) >> 2))
        sub_1A3960064();
      v1[9] = v1[9] - (float)(*(float *)(v4 + 4 * v8) * *(float *)(v5 + 4 * v8));
      result = (float *)sub_1A39625BC(*((_QWORD **)v1 + 24), (_QWORD *)(*((_QWORD *)v1 + 24) + 8 * *((_QWORD *)v1 + 47)), &v8);
      *((_QWORD *)v1 + 47) = ((uint64_t)result - *((_QWORD *)v1 + 24)) >> 3;
      *((int64x2_t *)v1 + 1) = vaddq_s64(*(int64x2_t *)(v1 + 4), (int64x2_t)xmmword_1A3ABF210);
      v6 = *((_QWORD *)v1 + 46);
      v7 = *((_QWORD *)v1 + 21);
      if (v6 >= (*((_QWORD *)v1 + 22) - v7) >> 3)
        sub_1A3960064();
      *(_QWORD *)(v7 + 8 * v6) = v8;
      ++*((_QWORD *)v1 + 46);
      ++v2;
    }
    while (*((_QWORD *)v1 + 50) > v2);
  }
  return result;
}

_QWORD *sub_1A39620A0(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (result[49])
  {
    v1 = 0;
    v2 = result[30];
    v3 = (result[31] - v2) >> 3;
    while (v3 != v1)
    {
      v4 = result[45];
      v5 = result[18];
      if (v4 >= (result[19] - v5) >> 3)
LABEL_13:
        sub_1A3960064();
      *(_QWORD *)(v5 + 8 * v4) = *(int *)(v2 + 8 * v1);
      ++result[45];
      if (result[49] <= (unint64_t)++v1)
        goto LABEL_6;
    }
LABEL_12:
    sub_1A3960064();
  }
LABEL_6:
  if (result[50])
  {
    v6 = 0;
    v7 = result[33];
    v8 = (result[34] - v7) >> 3;
    while (v8 != v6)
    {
      v9 = result[46];
      v10 = result[21];
      if (v9 >= (result[22] - v10) >> 3)
        goto LABEL_13;
      *(_QWORD *)(v10 + 8 * v9) = *(int *)(v7 + 8 * v6);
      ++result[46];
      if (result[50] <= (unint64_t)++v6)
        return result;
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1A3962188(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t j;
  unint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t i;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (*(float *)(result + 40) <= 0.0)
  {
    v24 = *(_QWORD *)(result + 360);
    if (v24)
    {
      v25 = *(unint64_t **)(result + 144);
      v26 = (uint64_t)(*(_QWORD *)(result + 152) - (_QWORD)v25) >> 3;
      while (v26)
      {
        v27 = *v25;
        v28 = *(_QWORD *)(result + 72);
        if (*v25 >= (*(_QWORD *)(result + 80) - v28) >> 2)
LABEL_52:
          sub_1A3960064();
        v29 = *(_QWORD *)(result + 288);
        if (v27 >= (*(_QWORD *)(result + 296) - v29) >> 2)
LABEL_53:
          sub_1A3960064();
        *(_DWORD *)(v29 + 4 * v27) = *(_DWORD *)(v28 + 4 * v27);
        --v26;
        ++v25;
        if (!--v24)
          goto LABEL_36;
      }
    }
    else
    {
LABEL_36:
      v30 = *(_QWORD *)(result + 368);
      if (v30)
      {
        v31 = *(unint64_t **)(result + 168);
        v32 = (uint64_t)(*(_QWORD *)(result + 176) - (_QWORD)v31) >> 3;
        while (v32)
        {
          v33 = *v31;
          v34 = *(_QWORD *)(result + 96);
          if (*v31 >= (*(_QWORD *)(result + 104) - v34) >> 2)
            goto LABEL_52;
          v35 = *(_QWORD *)(result + 288);
          if (v33 >= (*(_QWORD *)(result + 296) - v35) >> 2)
            goto LABEL_53;
          *(_DWORD *)(v35 + 4 * v33) = *(_DWORD *)(v34 + 4 * v33);
          --v32;
          ++v31;
          if (!--v30)
            goto LABEL_42;
        }
      }
      else
      {
LABEL_42:
        v36 = *(_QWORD *)(result + 384);
        if (!v36)
          return result;
        v37 = *(unint64_t **)(result + 216);
        for (i = (uint64_t)(*(_QWORD *)(result + 224) - (_QWORD)v37) >> 3; i; --i)
        {
          v39 = *v37;
          v40 = *(_QWORD *)(result + 120);
          if (*v37 >= (*(_QWORD *)(result + 128) - v40) >> 2)
            goto LABEL_52;
          v41 = *(_QWORD *)(result + 48);
          if (v39 >= (*(_QWORD *)(result + 56) - v41) >> 2)
            goto LABEL_53;
          v42 = *(_QWORD *)(result + 288);
          if (v39 >= (*(_QWORD *)(result + 296) - v42) >> 2)
LABEL_54:
            sub_1A3960064();
          *(float *)(v42 + 4 * v39) = (float)(*(float *)(v40 + 4 * v39) * (float)-*(float *)(result + 40))
                                    / (float)(*(float *)(v41 + 4 * v39) + *(float *)(v41 + 4 * v39));
          ++v37;
          if (!--v36)
            return result;
        }
      }
    }
LABEL_51:
    sub_1A3960064();
  }
  v1 = *(_QWORD *)(result + 368);
  if (v1)
  {
    v2 = *(unint64_t **)(result + 168);
    v3 = (uint64_t)(*(_QWORD *)(result + 176) - (_QWORD)v2) >> 3;
    while (v3)
    {
      v4 = *v2;
      v5 = *(_QWORD *)(result + 96);
      if (*v2 >= (*(_QWORD *)(result + 104) - v5) >> 2)
        goto LABEL_52;
      v6 = *(_QWORD *)(result + 288);
      if (v4 >= (*(_QWORD *)(result + 296) - v6) >> 2)
        goto LABEL_53;
      *(_DWORD *)(v6 + 4 * v4) = *(_DWORD *)(v5 + 4 * v4);
      --v3;
      ++v2;
      if (!--v1)
        goto LABEL_8;
    }
    goto LABEL_51;
  }
LABEL_8:
  v7 = *(_QWORD *)(result + 384);
  if (v7)
  {
    v8 = *(unint64_t **)(result + 216);
    v9 = (uint64_t)(*(_QWORD *)(result + 224) - (_QWORD)v8) >> 3;
    while (v9)
    {
      v10 = *v8;
      v11 = *(_QWORD *)(result + 96);
      if (*v8 >= (*(_QWORD *)(result + 104) - v11) >> 2)
        goto LABEL_52;
      v12 = *(_QWORD *)(result + 288);
      if (v10 >= (*(_QWORD *)(result + 296) - v12) >> 2)
        goto LABEL_53;
      v13 = *(float *)(v11 + 4 * v10);
      if (v13 > 0.0)
        v13 = 0.0;
      *(float *)(v12 + 4 * v10) = v13;
      --v9;
      ++v8;
      if (!--v7)
        goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_16:
  v14 = *(_QWORD *)(result + 360);
  if (v14)
  {
    v15 = *(unint64_t **)(result + 144);
    for (j = (uint64_t)(*(_QWORD *)(result + 152) - (_QWORD)v15) >> 3; j; --j)
    {
      v17 = *v15;
      v18 = *(_QWORD *)(result + 72);
      if (*v15 >= (*(_QWORD *)(result + 80) - v18) >> 2)
        goto LABEL_52;
      v19 = *(float *)(v18 + 4 * v17);
      if (v19 >= 0.0)
      {
        v23 = *(_QWORD *)(result + 288);
        if (v17 >= (*(_QWORD *)(result + 296) - v23) >> 2)
          goto LABEL_53;
        *(float *)(v23 + 4 * v17) = v19;
      }
      else
      {
        v20 = *(_QWORD *)(result + 96);
        if (v17 >= (*(_QWORD *)(result + 104) - v20) >> 2)
          goto LABEL_54;
        v21 = *(_QWORD *)(result + 288);
        if (v17 >= (*(_QWORD *)(result + 296) - v21) >> 2)
          goto LABEL_53;
        v22 = *(float *)(v20 + 4 * v17);
        if (v22 > 0.0)
          v22 = 0.0;
        *(float *)(v21 + 4 * v17) = v22;
      }
      ++v15;
      if (!--v14)
        return result;
    }
    goto LABEL_51;
  }
  return result;
}

char *sub_1A39624B4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      sub_1A395516C();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1A395F6D4(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *sub_1A39625BC(_QWORD *result, _QWORD *a2, int *a3)
{
  _QWORD *v3;
  uint64_t v4;

  if (result == a2)
  {
LABEL_4:
    result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2)
        goto LABEL_4;
    }
  }
  if (result == a2)
    return a2;
  v3 = result + 1;
  if (result + 1 != a2)
  {
    v4 = *a3;
    do
    {
      if (*v3 != v4)
        *result++ = *v3;
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

void sub_1A3962624(uint64_t a1, uint64_t a2, const float **a3)
{
  uint64_t v6;
  unint64_t v7;
  const float *v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float __B;

  __B = -2.0;
  vvpowf(*(float **)(a1 + 936), *(const float **)(a1 + 544), *(const float **)(a1 + 232), (const int *)(a1 + 24));
  vvpowf(*(float **)(a1 + 960), *(const float **)(a1 + 544), *(const float **)a2, (const int *)(a1 + 24));
  vDSP_vsmul(*(const float **)(a1 + 544), 1, &__B, *(float **)(a1 + 352), 1, *(_QWORD *)(a1 + 24));
  vDSP_vadd(*(const float **)(a1 + 2216), 1, *(const float **)(a1 + 352), 1, *(float **)(a1 + 352), 1, *(_QWORD *)(a1 + 24));
  vDSP_vmul(*a3, 1, *(const float **)(a1 + 352), 1, *(float **)(a1 + 352), 1, *(_QWORD *)(a1 + 24));
  __B = -2.0;
  vDSP_vsmul(*(const float **)(a1 + 256), 1, &__B, *(float **)(a1 + 888), 1, *(_QWORD *)(a1 + 24));
  __B = 2.0;
  vDSP_vsadd(*(const float **)(a1 + 888), 1, &__B, *(float **)(a1 + 888), 1, *(_QWORD *)(a1 + 24));
  vDSP_vmul(*(const float **)(a1 + 232), 1, *(const float **)(a1 + 888), 1, *(float **)(a1 + 888), 1, *(_QWORD *)(a1 + 24));
  vDSP_vmul(*(const float **)(a1 + 544), 1, *(const float **)(a1 + 888), 1, *(float **)(a1 + 888), 1, *(_QWORD *)(a1 + 24));
  vDSP_vsub(*(const float **)(a1 + 352), 1, *(const float **)(a1 + 888), 1, *(float **)(a1 + 888), 1, *(_QWORD *)(a1 + 24));
  vDSP_vmul(*(const float **)(a1 + 544), 1, *(const float **)(a1 + 936), 1, *(float **)(a1 + 936), 1, *(_QWORD *)(a1 + 24));
  vDSP_vsmul(*(const float **)(a1 + 936), 1, &__B, *(float **)(a1 + 936), 1, *(_QWORD *)(a1 + 24));
  vDSP_vdiv(*(const float **)(a1 + 936), 1, *(const float **)(a1 + 888), 1, *(float **)(a1 + 888), 1, *(_QWORD *)(a1 + 24));
  vDSP_vdiv(*(const float **)(a1 + 544), 1, *(const float **)(a1 + 352), 1, *(float **)(a1 + 352), 1, *(_QWORD *)(a1 + 24));
  __B = 0.5;
  vDSP_vsmul(*(const float **)(a1 + 352), 1, &__B, *(float **)(a1 + 352), 1, *(_QWORD *)(a1 + 24));
  vDSP_vmul(*(const float **)(a1 + 256), 1, *(const float **)a2, 1, *(float **)(a1 + 912), 1, *(_QWORD *)(a1 + 24));
  vDSP_vmul(*(const float **)(a1 + 888), 1, *(const float **)(a1 + 960), 1, *(float **)(a1 + 960), 1, *(_QWORD *)(a1 + 24));
  vDSP_vadd(*(const float **)(a1 + 912), 1, *(const float **)(a1 + 352), 1, *(float **)(a1 + 352), 1, *(_QWORD *)(a1 + 24));
  vDSP_vadd(*(const float **)(a1 + 960), 1, *(const float **)(a1 + 352), 1, *(float **)(a1 + 352), 1, *(_QWORD *)(a1 + 24));
  vDSP_vsmul(*(const float **)(a1 + 232), 1, (const float *)(a1 + 200), *(float **)(a1 + 912), 1, *(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
    v7 = 0;
    v8 = *(const float **)a2;
    v9 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
    do
    {
      if (v9 == v7 || (v10 = *(_QWORD *)(a1 + 912), v7 >= (*(_QWORD *)(a1 + 920) - v10) >> 2))
        sub_1A3960064();
      v11 = v8[v7];
      if (v11 < *(float *)(v10 + 4 * v7))
      {
        v12 = *(_QWORD *)(a1 + 352);
        if (v7 >= (*(_QWORD *)(a1 + 360) - v12) >> 2)
          sub_1A3960064();
        *(float *)(v12 + 4 * v7) = v11;
      }
      ++v7;
    }
    while (v6 != v7);
  }
}

void sub_1A396294C(uint64_t a1, const float **a2)
{
  vDSP_Length *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  const float *v15;
  unint64_t v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t __C;

  __C = 0;
  v4 = (vDSP_Length *)(a1 + 24);
  vDSP_sve(*a2, 1, (float *)&__C + 1, *(_QWORD *)(a1 + 24));
  *((float *)&__C + 1) = 1.0 / *((float *)&__C + 1);
  vDSP_vsmul(*a2, 1, (const float *)&__C + 1, *(float **)(a1 + 888), 1, *v4);
  vDSP_sve(*(const float **)(a1 + 352), 1, (float *)&__C, *v4);
  *((float *)&__C + 1) = 1.0 / *(float *)&__C;
  vDSP_vsmul(*(const float **)(a1 + 352), 1, (const float *)&__C + 1, *(float **)(a1 + 912), 1, *v4);
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 <= 0x190uLL)
    sub_1A3AB05D4(v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 1664);
  v9 = (*(_QWORD *)(a1 + 1672) - v8) >> 2;
  if (*(_QWORD *)(a1 + 1672) != v8)
  {
    v10 = 0;
    if (v9 <= 1)
      v11 = 1;
    else
      v11 = (*(_QWORD *)(a1 + 1672) - v8) >> 2;
    while (*(float *)(v8 + 4 * v10) <= *(float *)(*(_QWORD *)a1 + 412))
    {
      if (v11 == ++v10)
        goto LABEL_10;
    }
    v9 = v10;
  }
LABEL_10:
  v12 = *(_QWORD *)(a1 + 24);
  if (v12)
  {
    v13 = 0;
    v14 = (float)(*(float *)(a1 + 204) * (float)v9) * *(float *)(a1 + 208);
    v15 = *(const float **)(a1 + 936);
    v16 = (uint64_t)(*(_QWORD *)(a1 + 944) - (_QWORD)v15) >> 2;
    do
    {
      if (v9 >= v13)
      {
        if (v16 <= v13)
LABEL_23:
          sub_1A3960064();
        v17 = *(float *)(a1 + 184);
        v18 = v14
            / (float)((float)((float)v9 * *(float *)(a1 + 208))
                    - (float)((float)(*(float *)(a1 + 208) - *(float *)(a1 + 204)) * (float)(int)v13));
      }
      else
      {
        if (v16 <= v13)
          goto LABEL_23;
        v17 = *(float *)(a1 + 184);
        v18 = *(float *)(a1 + 208);
      }
      v19 = v17 * v18;
      v15[v13] = v19;
      v20 = *(_QWORD *)(a1 + 960);
      if (v13 >= (*(_QWORD *)(a1 + 968) - v20) >> 2)
        sub_1A3960064();
      *(float *)(v20 + 4 * v13++) = 1.0 - v19;
    }
    while (v12 != v13);
  }
  else
  {
    v15 = *(const float **)(a1 + 936);
  }
  vvpowf(*(float **)(a1 + 888), v15, *(const float **)(a1 + 888), (const int *)(a1 + 24));
  vvpowf(*(float **)(a1 + 912), *(const float **)(a1 + 960), *(const float **)(a1 + 912), (const int *)(a1 + 24));
  vDSP_vmul(*(const float **)(a1 + 888), 1, *(const float **)(a1 + 912), 1, *(float **)(a1 + 912), 1, *(_QWORD *)(a1 + 24));
  vDSP_sve(*(const float **)(a1 + 912), 1, (float *)&__C + 1, *(_QWORD *)(a1 + 24));
  *((float *)&__C + 1) = 1.0 / *((float *)&__C + 1);
  vDSP_vsmul(*(const float **)(a1 + 912), 1, (const float *)&__C + 1, *(float **)(a1 + 912), 1, *(_QWORD *)(a1 + 24));
  vDSP_vsmul(*(const float **)(a1 + 912), 1, (const float *)&__C, *(float **)(a1 + 352), 1, *(_QWORD *)(a1 + 24));
}

uint64_t sub_1A3962BBC(uint64_t a1, uint64_t a2, unint64_t a3, float a4)
{
  float v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  float *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  VPTimeFreqConverter *v22;
  VPTimeFreqConverter *v23;
  unint64_t v24;
  char **v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  long double v30;
  float v31;
  float v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char **v48;
  char **v49;
  char **v50;
  char **v51;
  char **v52;
  char **v53;
  char **v54;
  char **v55;
  char **v56;
  char **v57;
  char **v58;
  char **v59;
  char **v60;
  float __B;
  float __A[4];

  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v8 = a4 * 0.5;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(float *)(a1 + 96) = (float)(a4 * 0.5) + -200.0;
  *(_QWORD *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 100) = 0;
  *(float *)(a1 + 116) = a4;
  *(_OWORD *)(a1 + 120) = xmmword_1A3ABF220;
  *(_QWORD *)(a1 + 136) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_DWORD *)(a1 + 188) = 1065351538;
  *(_WORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 196) = xmmword_1A3ABF220;
  *(_QWORD *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 212) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  v9 = a1 + 232;
  *(_DWORD *)(a1 + 228) = 0x40000000;
  v60 = (char **)(a1 + 256);
  v59 = (char **)(a1 + 280);
  v58 = (char **)(a1 + 304);
  v57 = (char **)(a1 + 328);
  v56 = (char **)(a1 + 352);
  v55 = (char **)(a1 + 376);
  v54 = (char **)(a1 + 400);
  v52 = (char **)(a1 + 472);
  v53 = (char **)(a1 + 448);
  v50 = (char **)(a1 + 520);
  v51 = (char **)(a1 + 496);
  v48 = (char **)(a1 + 424);
  v49 = (char **)(a1 + 544);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = xmmword_1A3ABF230;
  *(_OWORD *)(a1 + 584) = xmmword_1A3ABF240;
  *(_DWORD *)(a1 + 608) = 1056964608;
  *(_QWORD *)(a1 + 616) = 150;
  *(_QWORD *)(a1 + 624) = 10;
  *(_QWORD *)(a1 + 600) = 0x430C000041F00000;
  *(_OWORD *)(a1 + 632) = xmmword_1A3ABEFB4;
  *(_OWORD *)(a1 + 648) = unk_1A3ABEFC4;
  *(_OWORD *)(a1 + 664) = xmmword_1A3ABEFD4;
  *(_OWORD *)(a1 + 680) = unk_1A3ABEFE4;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  v10 = operator new(0x64uLL);
  *(_QWORD *)(a1 + 696) = v10;
  *(_QWORD *)(a1 + 712) = v10 + 25;
  v10[24] = 1182400512;
  *((_OWORD *)v10 + 2) = xmmword_1A3ABF014;
  *((_OWORD *)v10 + 3) = unk_1A3ABF024;
  *((_OWORD *)v10 + 4) = xmmword_1A3ABF034;
  *((_OWORD *)v10 + 5) = unk_1A3ABF044;
  *(_OWORD *)v10 = xmmword_1A3ABEFF4;
  *((_OWORD *)v10 + 1) = unk_1A3ABF004;
  *(_QWORD *)(a1 + 704) = v10 + 25;
  *(_QWORD *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  v11 = operator new(0x64uLL);
  *(_QWORD *)(a1 + 720) = v11;
  *(_QWORD *)(a1 + 736) = v11 + 25;
  v11[24] = 1109576909;
  *((_OWORD *)v11 + 2) = xmmword_1A3ABF078;
  *((_OWORD *)v11 + 3) = unk_1A3ABF088;
  *((_OWORD *)v11 + 4) = xmmword_1A3ABF098;
  *((_OWORD *)v11 + 5) = unk_1A3ABF0A8;
  *(_OWORD *)v11 = xmmword_1A3ABF058;
  *((_OWORD *)v11 + 1) = unk_1A3ABF068;
  *(_QWORD *)(a1 + 728) = v11 + 25;
  *(_OWORD *)(v9 + 512) = xmmword_1A3ABF250;
  *(_QWORD *)(a1 + 760) = a3;
  *(_QWORD *)(a1 + 768) = 2 * a3;
  *(_QWORD *)(a1 + 776) = a3 + 1;
  *(_QWORD *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 792) = a2;
  *(_QWORD *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 808) = 16843009;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  sub_1A395F660((_QWORD *)(a1 + 1080), a3 + 1);
  v12 = *(float **)(a1 + 1080);
  __A[0] = 0.0;
  __B = v8 / (float)a3;
  vDSP_vramp(__A, &__B, v12, 1, a3 + 1);
  bzero((void *)(a1 + 1104), 0x220uLL);
  sub_1A39639C8(a1 + 1648, a1 + 1080, *(float *)(a1 + 568), *(float *)(a1 + 96));
  *(_DWORD *)(a1 + 1840) = 1101004800;
  *(_DWORD *)(a1 + 1888) = 0;
  *(_OWORD *)(a1 + 1844) = 0u;
  *(_OWORD *)(a1 + 1860) = 0u;
  *(_OWORD *)(a1 + 1870) = 0u;
  v13 = *(_QWORD *)(a1 + 776);
  *(_DWORD *)(a1 + 1896) = 0;
  sub_1A3964338(v13, (_QWORD *)(a1 + 1904), a4);
  sub_1A39644D4(a1 + 1928, (float)*(unint64_t *)(a1 + 1648));
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_OWORD *)(a1 + 2336) = 0u;
  v14 = *(_QWORD *)(a1 + 792);
  sub_1A39648C4(a1 + 2336, v14);
  sub_1A39648C4(a1 + 2360, v14);
  sub_1A3964AB4((uint64_t *)(a1 + 1536), v14);
  sub_1A3964AB4((uint64_t *)(a1 + 1560), v14);
  v15 = *(_QWORD *)(a1 + 768);
  __B = 0.0;
  sub_1A395F84C((char **)(a1 + 816), v15, &__B);
  v16 = *(_QWORD *)(a1 + 776);
  __B = 2.2204e-16;
  sub_1A395F84C((char **)(a1 + 1104), v16, &__B);
  __B = 2.2204e-16;
  sub_1A395F84C((char **)(a1 + 1440), v16, &__B);
  __B = 2.2204e-16;
  sub_1A395F84C((char **)(a1 + 1488), v16, &__B);
  __B = 2.2204e-16;
  sub_1A395F84C((char **)(a1 + 1512), v16, &__B);
  __B = 2.2204e-16;
  sub_1A395F84C((char **)(a1 + 1128), v16, &__B);
  __B = 2.2204e-16;
  sub_1A395F84C((char **)(a1 + 1416), v16, &__B);
  __B = 2.2204e-16;
  sub_1A395F84C((char **)(a1 + 1464), v16, &__B);
  v17 = *(_QWORD *)(a1 + 776);
  __B = 1.0;
  sub_1A395F84C((char **)(a1 + 1344), v17, &__B);
  __B = 1.0;
  sub_1A395F84C((char **)(a1 + 1032), v17, &__B);
  __B = 1.0;
  sub_1A395F84C((char **)(a1 + 1056), v17, &__B);
  __B = 1.0;
  sub_1A395F84C((char **)(a1 + 1368), v17, &__B);
  v18 = *(_QWORD *)(a1 + 776);
  __B = 0.1;
  sub_1A395F84C((char **)(a1 + 1392), v18, &__B);
  sub_1A39638F0(a1);
  if (*(_QWORD *)(a1 + 792))
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    do
    {
      v22 = (VPTimeFreqConverter *)operator new();
      VPTimeFreqConverter::VPTimeFreqConverter(v22, 0, *(_DWORD *)(a1 + 760));
      sub_1A395F534((VPTimeFreqConverter **)(*(_QWORD *)(a1 + 2336) + v19), v22);
      v23 = (VPTimeFreqConverter *)operator new();
      VPTimeFreqConverter::VPTimeFreqConverter(v23, 1u, *(_DWORD *)(a1 + 760));
      sub_1A395F534((VPTimeFreqConverter **)(*(_QWORD *)(a1 + 2360) + v19), v23);
      v24 = *(_QWORD *)(a1 + 768);
      v25 = (char **)(*(_QWORD *)(a1 + 1536) + v20);
      v26 = *(_QWORD *)(a1 + 1560);
      __B = 0.0;
      sub_1A395F84C(v25, v24, &__B);
      __B = 0.0;
      sub_1A395F84C((char **)(v26 + v20), v24, &__B);
      ++v21;
      v20 += 24;
      v19 += 8;
    }
    while (*(_QWORD *)(a1 + 792) > v21);
  }
  v27 = *(_QWORD *)(a1 + 1648);
  *(_QWORD *)(a1 + 24) = v27;
  v28 = (uint64_t)(*(_QWORD *)(a1 + 2224) - *(_QWORD *)(a1 + 2216)) >> 2;
  if (v28 >= v27)
    v28 = v27;
  *(_QWORD *)(a1 + 1936) = v28;
  sub_1A3958768(a1 + 840, v27);
  sub_1A3958768(a1 + 864, v27);
  sub_1A3958768(a1 + 888, v27);
  sub_1A3958768(a1 + 912, v27);
  sub_1A3958768(a1 + 936, v27);
  sub_1A3958768(a1 + 960, v27);
  sub_1A3958768(a1 + 984, v27);
  sub_1A3958768(a1 + 1008, v27);
  v29 = *(_QWORD *)(a1 + 24);
  sub_1A3958768(a1 + 1152, v29);
  sub_1A3958768(a1 + 1176, v29);
  sub_1A3958768(a1 + 1200, v29);
  sub_1A3958768(a1 + 1224, v29);
  sub_1A3958768(a1 + 1248, v29);
  sub_1A3958768(a1 + 1272, v29);
  sub_1A3958768(a1 + 1296, v29);
  sub_1A3958768(a1 + 1320, v29);
  v30 = exp(*(float *)(a1 + 600) * 0.230258509);
  v31 = (float)*(unint64_t *)(a1 + 776);
  *(float *)&v30 = v30;
  *(float *)(a1 + 164) = *(float *)&v30 / v31;
  v32 = exp(*(float *)(a1 + 604) * 0.230258509);
  *(float *)(a1 + 168) = v32 / v31;
  v33 = *(_QWORD *)(a1 + 24);
  __B = 1.0;
  sub_1A395F84C((char **)v9, v33, &__B);
  v34 = *(_QWORD *)(a1 + 24);
  __B = 0.0;
  sub_1A395F84C(v60, v34, &__B);
  v35 = *(_QWORD *)(a1 + 24);
  __B = 0.0;
  sub_1A395F84C(v59, v35, &__B);
  v36 = *(_QWORD *)(a1 + 24);
  __B = 0.0;
  sub_1A395F84C(v58, v36, &__B);
  v37 = *(_QWORD *)(a1 + 24);
  __B = 0.0;
  sub_1A395F84C(v57, v37, &__B);
  v38 = *(_QWORD *)(a1 + 24);
  __B = 0.0;
  sub_1A395F84C(v56, v38, &__B);
  v39 = *(_QWORD *)(a1 + 24);
  __B = 0.0;
  sub_1A395F84C(v55, v39, &__B);
  v40 = *(_QWORD *)(a1 + 24);
  __B = 0.0;
  sub_1A395F84C(v54, v40, &__B);
  v41 = *(_QWORD *)(a1 + 24);
  __B = 0.0;
  sub_1A395F84C(v53, v41, &__B);
  v42 = *(_QWORD *)(a1 + 24);
  __B = 0.0;
  sub_1A395F84C(v52, v42, &__B);
  v43 = *(_QWORD *)(a1 + 24);
  __B = 0.0;
  sub_1A395F84C(v51, v43, &__B);
  v44 = *(_QWORD *)(a1 + 24);
  __B = 0.0;
  sub_1A395F84C(v50, v44, &__B);
  v45 = *(_QWORD *)(a1 + 24);
  __B = 0.1;
  sub_1A395F84C(v49, v45, &__B);
  v46 = *(_QWORD *)(a1 + 776);
  __B = 0.0;
  sub_1A395F84C(v48, v46, &__B);
  return a1;
}

void sub_1A3963480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, _QWORD *a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,void **a29,void **a30,void **a31,void **a32,void **a33,void **a34,void **a35,void **a36,void **a37,void **a38,void **a39,void **a40)
{
  uint64_t v40;
  uint64_t v41;
  void **v42;
  void **v43;
  uint64_t v44;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void **v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;

  v46 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v40 + 1912) = v46;
    operator delete(v46);
  }
  sub_1A395F440(a11);
  *(_QWORD *)(v44 - 112) = *(_QWORD *)(v44 - 144);
  sub_1A395ED68((void ***)(v44 - 112));
  *(_QWORD *)(v44 - 112) = *(_QWORD *)(v44 - 136);
  sub_1A395ED68((void ***)(v44 - 112));
  v47 = **(void ***)(v44 - 176);
  if (v47)
  {
    *(_QWORD *)(v40 + 1520) = v47;
    operator delete(v47);
  }
  v48 = **(void ***)(v44 - 160);
  if (v48)
  {
    *(_QWORD *)(v40 + 1496) = v48;
    operator delete(v48);
  }
  v49 = **(void ***)(v44 - 216);
  if (v49)
  {
    *(_QWORD *)(v40 + 1472) = v49;
    operator delete(v49);
  }
  v50 = **(void ***)(v44 - 152);
  if (v50)
  {
    *(_QWORD *)(v40 + 1448) = v50;
    operator delete(v50);
  }
  v51 = **(void ***)(v44 - 208);
  if (v51)
  {
    *(_QWORD *)(v40 + 1424) = v51;
    operator delete(v51);
  }
  v52 = **(void ***)(v44 - 240);
  if (v52)
  {
    *(_QWORD *)(v40 + 1400) = v52;
    operator delete(v52);
  }
  v53 = **(void ***)(v44 - 232);
  if (v53)
  {
    *(_QWORD *)(v40 + 1376) = v53;
    operator delete(v53);
  }
  v54 = **(void ***)(v44 - 224);
  if (v54)
  {
    *(_QWORD *)(v40 + 1352) = v54;
    operator delete(v54);
  }
  v55 = *a18;
  if (*a18)
  {
    *(_QWORD *)(v40 + 1328) = v55;
    operator delete(v55);
  }
  v56 = *a20;
  if (*a20)
  {
    *(_QWORD *)(v40 + 1304) = v56;
    operator delete(v56);
  }
  v57 = *a22;
  if (*a22)
  {
    *(_QWORD *)(v40 + 1280) = v57;
    operator delete(v57);
  }
  v58 = *a24;
  if (*a24)
  {
    *(_QWORD *)(v40 + 1256) = v58;
    operator delete(v58);
  }
  v59 = *a26;
  if (*a26)
  {
    *(_QWORD *)(v40 + 1232) = v59;
    operator delete(v59);
  }
  v60 = *a28;
  if (*a28)
  {
    *(_QWORD *)(v40 + 1208) = v60;
    operator delete(v60);
  }
  v61 = *a30;
  if (*a30)
  {
    *(_QWORD *)(v40 + 1184) = v61;
    operator delete(v61);
  }
  v62 = *a32;
  if (*a32)
  {
    *(_QWORD *)(v40 + 1160) = v62;
    operator delete(v62);
  }
  v63 = **(void ***)(v44 - 192);
  if (v63)
  {
    *(_QWORD *)(v40 + 1136) = v63;
    operator delete(v63);
  }
  v64 = *v43;
  if (*v43)
  {
    *(_QWORD *)(v40 + 1112) = v64;
    operator delete(v64);
  }
  v65 = *v42;
  if (*v42)
  {
    *(_QWORD *)(v40 + 1088) = v65;
    operator delete(v65);
  }
  v66 = **(void ***)(v44 - 200);
  if (v66)
  {
    *(_QWORD *)(v40 + 1064) = v66;
    operator delete(v66);
  }
  v67 = **(void ***)(v44 - 184);
  if (v67)
  {
    *(_QWORD *)(v40 + 1040) = v67;
    operator delete(v67);
  }
  v68 = *a33;
  if (*a33)
  {
    *(_QWORD *)(v40 + 1016) = v68;
    operator delete(v68);
  }
  v69 = *a34;
  if (*a34)
  {
    *(_QWORD *)(v40 + 992) = v69;
    operator delete(v69);
  }
  v70 = *a35;
  if (*a35)
  {
    *(_QWORD *)(v40 + 968) = v70;
    operator delete(v70);
  }
  v71 = *a36;
  if (*a36)
  {
    *(_QWORD *)(v40 + 944) = v71;
    operator delete(v71);
  }
  v72 = *a37;
  if (*a37)
  {
    *(_QWORD *)(v40 + 920) = v72;
    operator delete(v72);
  }
  v73 = *a38;
  if (*a38)
  {
    *(_QWORD *)(v40 + 896) = v73;
    operator delete(v73);
  }
  v74 = *a39;
  if (*a39)
  {
    *(_QWORD *)(v40 + 872) = v74;
    operator delete(v74);
  }
  v75 = *a40;
  if (*a40)
  {
    *(_QWORD *)(v40 + 848) = v75;
    operator delete(v75);
  }
  v76 = (void **)(v40 + 720);
  v77 = **(void ***)(v44 - 128);
  if (v77)
  {
    *(_QWORD *)(v40 + 824) = v77;
    operator delete(v77);
  }
  v78 = *v76;
  if (*v76)
  {
    *(_QWORD *)(v40 + 728) = v78;
    operator delete(v78);
  }
  v79 = *(void **)(v41 + 464);
  if (v79)
  {
    *(_QWORD *)(v40 + 704) = v79;
    operator delete(v79);
  }
  v80 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v40 + 552) = v80;
    operator delete(v80);
  }
  v81 = *a14;
  if (*a14)
  {
    *(_QWORD *)(v40 + 528) = v81;
    operator delete(v81);
  }
  v82 = *a15;
  if (*a15)
  {
    *(_QWORD *)(v40 + 504) = v82;
    operator delete(v82);
  }
  v83 = *a16;
  if (*a16)
  {
    *(_QWORD *)(v40 + 480) = v83;
    operator delete(v83);
  }
  v84 = *a17;
  if (*a17)
  {
    *(_QWORD *)(v40 + 456) = v84;
    operator delete(v84);
  }
  v85 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v40 + 432) = v85;
    operator delete(v85);
  }
  v86 = *a19;
  if (*a19)
  {
    *(_QWORD *)(v40 + 408) = v86;
    operator delete(v86);
  }
  v87 = *a21;
  if (*a21)
  {
    *(_QWORD *)(v40 + 384) = v87;
    operator delete(v87);
  }
  v88 = *a23;
  if (*a23)
  {
    *(_QWORD *)(v40 + 360) = v88;
    operator delete(v88);
  }
  v89 = *a25;
  if (*a25)
  {
    *(_QWORD *)(v40 + 336) = v89;
    operator delete(v89);
  }
  v90 = *a27;
  if (*a27)
  {
    *(_QWORD *)(v40 + 312) = v90;
    operator delete(v90);
  }
  v91 = *a29;
  if (*a29)
  {
    *(_QWORD *)(v40 + 288) = v91;
    operator delete(v91);
  }
  v92 = *a31;
  if (*a31)
  {
    *(_QWORD *)(v40 + 264) = v92;
    operator delete(v92);
  }
  v93 = *(void **)v41;
  if (*(_QWORD *)v41)
  {
    *(_QWORD *)(v40 + 240) = v93;
    operator delete(v93);
  }
  v94 = *(void **)v40;
  if (*(_QWORD *)v40)
  {
    *(_QWORD *)(v40 + 8) = v94;
    operator delete(v94);
  }
  _Unwind_Resume(a1);
}

float sub_1A39638F0(uint64_t a1)
{
  const int *v2;
  vDSP_Length v3;
  float *v4;
  uint64_t i;
  float result;
  float __C;
  float __B;

  v2 = (const int *)(a1 + 776);
  v3 = *(_QWORD *)(a1 + 776);
  v4 = *(float **)(a1 + 816);
  if (v3)
  {
    for (i = 0; i != v3; ++i)
      v4[i] = (float)(int)i;
  }
  __B = 100.0 / (float)(10 * v3 - 10);
  vDSP_vsmul(v4, 1, &__B, v4, 1, v3);
  vvpowf(*(float **)(a1 + 1392), *(const float **)(a1 + 816), *(const float **)(a1 + 1392), v2);
  __C = 0.0;
  vDSP_sve(*(const float **)(a1 + 1392), 1, &__C, *(_QWORD *)(a1 + 776));
  __C = 1.0 / __C;
  vDSP_vsmul(*(const float **)(a1 + 1392), 1, &__C, *(float **)(a1 + 1392), 1, *(_QWORD *)(a1 + 776));
  return result;
}

uint64_t sub_1A39639C8(uint64_t a1, uint64_t a2, float a3, float a4)
{
  void **v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  vDSP_Length v18;
  float *v19;
  float *i;
  float v21;
  unint64_t v22;
  float *v23;
  float *v24;
  float *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  float *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *__C;
  float *v42;
  float __B;
  float __A;

  *(_OWORD *)(a1 + 16) = 0u;
  v7 = (void **)(a1 + 16);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v8 = a1 + 112;
  *(_DWORD *)(a1 + 160) = 0;
  v38 = a1 + 88;
  v39 = a1 + 40;
  v40 = a1 + 136;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 164) = 0x3DDD2F1B43020000;
  *(_QWORD *)(a1 + 180) = 0x3F0000003F826131;
  *(_QWORD *)(a1 + 172) = 0x43F800000;
  if (a1 + 64 == a2)
  {
    v12 = 0.5;
    v9 = 0.108;
    v10 = 130.0;
    v11 = 1.0;
  }
  else
  {
    sub_1A39624B4((char *)(a1 + 64), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v10 = *(float *)(a1 + 164);
    v9 = *(float *)(a1 + 168);
    v11 = *(float *)(a1 + 172);
    v12 = *(float *)(a1 + 184);
  }
  *(float *)(a1 + 8) = a3;
  *(float *)(a1 + 12) = a4;
  v13 = 1.0 / (float)(v9 * 0.43429);
  v14 = v9 / v10;
  v15 = v13 * log10f((float)((float)(v9 / v10) * a3) + 1.0);
  v16 = (float)(v13 * log10f((float)(v14 * a4) + 1.0)) - v15;
  v17 = vcvtas_u32_f32(v12 * (float)(v11 * v16));
  *(_QWORD *)a1 = v17;
  sub_1A395F660(&__C, v17);
  v18 = *(_QWORD *)a1;
  __B = v16 / (float)(unint64_t)(*(_QWORD *)a1 - 1);
  __A = v15;
  vDSP_vramp(&__A, &__B, __C, 1, v18);
  sub_1A3963D98(v7, *(_QWORD *)a1);
  v19 = __C;
  for (i = v42; v19 != i; ++v19)
  {
    v21 = (__exp10((float)(*v19 / v13)) + -1.0) / (float)(*(float *)(a1 + 168) / *(float *)(a1 + 164));
    v23 = *(float **)(a1 + 24);
    v22 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)v23 >= v22)
    {
      v25 = (float *)*v7;
      v26 = ((char *)v23 - (_BYTE *)*v7) >> 2;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62)
        sub_1A395516C();
      v28 = v22 - (_QWORD)v25;
      if (v28 >> 1 > v27)
        v27 = v28 >> 1;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
        v29 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        v30 = (char *)sub_1A3958A04(a1 + 32, v29);
        v25 = *(float **)(a1 + 16);
        v23 = *(float **)(a1 + 24);
      }
      else
      {
        v30 = 0;
      }
      v31 = (float *)&v30[4 * v26];
      *v31 = v21;
      v24 = v31 + 1;
      while (v23 != v25)
      {
        v32 = *((_DWORD *)v23-- - 1);
        *((_DWORD *)v31-- - 1) = v32;
      }
      *(_QWORD *)(a1 + 16) = v31;
      *(_QWORD *)(a1 + 24) = v24;
      *(_QWORD *)(a1 + 32) = &v30[4 * v29];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v23 = v21;
      v24 = v23 + 1;
    }
    *(_QWORD *)(a1 + 24) = v24;
  }
  v33 = ((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 2) * *(_QWORD *)a1;
  __A = 0.0;
  sub_1A3963E2C(v40, v33, &__A);
  v34 = *(_QWORD *)a1;
  __A = 0.0;
  sub_1A3963E2C(v39, v34, &__A);
  v35 = *(_QWORD *)a1;
  __A = 0.0;
  sub_1A3963E2C(v38, v35, &__A);
  v36 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 2;
  __A = 0.0;
  sub_1A3963E2C(v8, v36, &__A);
  sub_1A3963E5C((_QWORD *)a1);
  sub_1A3963FAC(a1);
  if (__C)
  {
    v42 = __C;
    operator delete(__C);
  }
  return a1;
}

void sub_1A3963CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void *__p, uint64_t a14)
{
  _QWORD *v14;
  void **v15;
  void **v16;
  void **v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v19 = *a12;
  if (*a12)
  {
    v14[18] = v19;
    operator delete(v19);
  }
  v20 = *v17;
  if (*v17)
  {
    v14[15] = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    v14[12] = v21;
    operator delete(v21);
  }
  v22 = *v16;
  if (*v16)
  {
    v14[9] = v22;
    operator delete(v22);
  }
  v23 = *a11;
  if (*a11)
  {
    v14[6] = v23;
    operator delete(v23);
  }
  v24 = *v15;
  if (*v15)
  {
    v14[3] = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A3963D98(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_1A395516C();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1A3958A04(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1A3963E2C(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_1A3964014((void **)a1, a2 - v3, a3);
  }
}

void sub_1A3963E5C(_QWORD *a1)
{
  _OWORD *v2;
  _OWORD *v3;
  float *v4;
  float *v5;
  uint64_t v6;
  float *v7;
  float v8;

  v2 = operator new(0x58uLL);
  v2[2] = xmmword_1A3ABF0DC;
  v2[3] = unk_1A3ABF0EC;
  v2[4] = xmmword_1A3ABF0FC;
  *((_QWORD *)v2 + 10) = 0x460660004604D000;
  *v2 = xmmword_1A3ABF0BC;
  v2[1] = unk_1A3ABF0CC;
  v3 = operator new(0x58uLL);
  v3[2] = xmmword_1A3ABF134;
  v3[3] = unk_1A3ABF144;
  v3[4] = xmmword_1A3ABF154;
  *((_QWORD *)v3 + 10) = 0x44E1000044E10000;
  *v3 = xmmword_1A3ABF114;
  v3[1] = unk_1A3ABF124;
  v4 = (float *)operator new(0x58uLL);
  v5 = v4;
  v6 = 0;
  *((_QWORD *)v4 + 10) = 0x3BA3D70A3C343958;
  *(_OWORD *)v4 = xmmword_1A3ABF16C;
  *((_OWORD *)v4 + 1) = unk_1A3ABF17C;
  *((_OWORD *)v4 + 3) = unk_1A3ABF19C;
  *((_OWORD *)v4 + 4) = xmmword_1A3ABF1AC;
  *((_OWORD *)v4 + 2) = xmmword_1A3ABF18C;
  v7 = (float *)a1[8];
  v8 = v7[1] - *v7;
  do
  {
    v4[v6] = (float)(v8 * v4[v6]) / *(float *)((char *)v3 + v6 * 4);
    ++v6;
  }
  while (v6 != 22);
  sub_1A395F95C((float *)v2, 22, v4, v7, (uint64_t)(a1[9] - (_QWORD)v7) >> 2, a1[14], *v4, v4[21]);
  operator delete(v5);
  operator delete(v3);
  operator delete(v2);
}

void sub_1A3963F88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A3963FAC(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2;
  v2 = *(void **)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 144) - (_QWORD)v2;
  if (v3 >= 1)
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
  sub_1A3964124((float *)a1);
  sub_1A39642B0(a1);
}

void sub_1A3964014(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      sub_1A395516C();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_1A3958A04(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void sub_1A3964124(float *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  double v8;
  double v9;
  float *v10;
  uint64_t v11;
  float *v12;
  double v13;
  float v14;
  uint64_t v15;
  float v16;
  float *v17;
  uint64_t v18;

  v18 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v2 = 0;
    v3 = 0;
    v4 = *((_QWORD *)a1 + 2);
    v5 = *((_QWORD *)a1 + 5);
    v6 = (float *)*((_QWORD *)a1 + 8);
    v17 = (float *)*((_QWORD *)a1 + 9);
    if ((unint64_t)(v17 - v6) <= 1)
      v7 = 1;
    else
      v7 = v17 - v6;
    do
    {
      v8 = 1.0 / a1[46] * (float)(a1[45] * (float)(a1[41] + (float)(a1[42] * *(float *)(v4 + 4 * v3))));
      *(float *)&v8 = v8;
      *(_DWORD *)(v5 + 4 * v3) = LODWORD(v8);
      a1[40] = 0.0;
      if (v17 != v6)
      {
        *(float *)&v8 = a1[44];
        v9 = (double)*(unint64_t *)&v8;
        v10 = (float *)(*((_QWORD *)a1 + 17) + v2);
        v11 = v7;
        v12 = v6;
        do
        {
          v13 = (float)(*v12 - *(float *)(v4 + 4 * v3));
          v14 = 1.0 / pow(v13 * v13 / (*(float *)(v5 + 4 * v3) * *(float *)(v5 + 4 * v3)) + 1.0, v9);
          *v10 = v14;
          if (a1[40] < v14)
            a1[40] = v14;
          ++v12;
          ++v10;
          --v11;
        }
        while (v11);
        v15 = 0;
        do
        {
          v16 = a1[40];
          if (v16 != 0.0)
            *(float *)(*((_QWORD *)a1 + 17) + v2 + 4 * v15) = *(float *)(*((_QWORD *)a1 + 17) + v2 + 4 * v15)
                                                            / (float)(v16 * a1[43]);
          ++v15;
        }
        while (v7 != v15);
      }
      ++v3;
      v2 += ((char *)v17 - (char *)v6) & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v3 != v18);
  }
}

void sub_1A39642B0(uint64_t a1)
{
  float __C;

  vDSP_mmul(*(const float **)(a1 + 136), 1, *(const float **)(a1 + 112), 1, *(float **)(a1 + 88), 1, *(_QWORD *)a1, 1uLL, (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2);
  __C = 0.0;
  vDSP_sve(*(const float **)(a1 + 88), 1, &__C, *(_QWORD *)a1);
  vDSP_vsdiv(*(const float **)(a1 + 88), 1, &__C, *(float **)(a1 + 88), 1, *(_QWORD *)a1);
}

_QWORD *sub_1A3964338@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>, float a3@<S0>)
{
  _QWORD *result;
  int32x4_t v6;
  uint64x2_t v7;
  unint64_t v8;
  int64x2_t v9;
  int64x2_t v10;
  _DWORD *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int64x2_t v17;
  uint64x2_t v18;
  uint64x2_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int64x2_t v24;

  result = sub_1A395F660(a2, a1);
  if (a1)
  {
    v7 = (uint64x2_t)vdupq_n_s64(a1 - 1);
    v8 = (a1 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v9 = (int64x2_t)xmmword_1A3ABF260;
    v10 = (int64x2_t)xmmword_1A3ABF270;
    v11 = (_DWORD *)(*result + 8);
    v12 = (float32x4_t)vdupq_n_s32(0x43D428CAu);
    v13 = (float32x4_t)vdupq_n_s32(0x4D0DCF73u);
    v14 = (float32x4_t)vdupq_n_s32(0x4D328586u);
    v15 = (float32x4_t)vdupq_n_s32(0x4635145Fu);
    v16 = (float32x4_t)vdupq_n_s32(0x4904EB8Bu);
    v17 = vdupq_n_s64(4uLL);
    do
    {
      v18.i64[0] = v9.i64[0] * v9.i64[0];
      v18.i64[1] = v9.i64[1] * v9.i64[1];
      *(int32x2_t *)v6.i8 = vmovn_s64((int64x2_t)vcgeq_u64(v7, (uint64x2_t)v10));
      v19.i64[0] = v10.i64[0] * v10.i64[0];
      v19.i64[1] = v10.i64[1] * v10.i64[1];
      v20 = vmulq_n_f32(vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v19)), vcvtq_f64_u64(v18)), a3 / (float)(2 * a1 - 2)), a3 / (float)(2 * a1 - 2));
      v21 = vmulq_f32(vdivq_f32(v20, vaddq_f32(v20, v12)), vdivq_f32(v14, vaddq_f32(v20, v13)));
      v22 = vmulq_f32(vdivq_f32(v20, vaddq_f32(v20, v15)), vmulq_f32(v21, v21));
      v23 = vmulq_f32(vdivq_f32(v20, vaddq_f32(v20, v16)), v22);
      if ((vmovn_s32(v6).u8[0] & 1) != 0)
        *(v11 - 2) = v23.i32[0];
      if ((vmovn_s32(v6).i8[2] & 1) != 0)
        *(v11 - 1) = v23.i32[1];
      v24 = (int64x2_t)vcgeq_u64(v7, (uint64x2_t)v9);
      if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v22, v24)).i32[1] & 1) != 0)
        *v11 = v23.i32[2];
      v6 = vmovn_hight_s64(*(int32x2_t *)v24.i8, v24);
      if ((vmovn_s32(v6).i8[6] & 1) != 0)
        v11[1] = v23.i32[3];
      v9 = vaddq_s64(v9, v17);
      v10 = vaddq_s64(v10, v17);
      v11 += 4;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_1A39644D4(uint64_t a1, float a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  v3 = a1 + 192;
  *(_BYTE *)a1 = 1;
  *(_OWORD *)(a1 + 240) = 0u;
  v4 = a1 + 240;
  v5 = (unint64_t)a2;
  v6 = a1 + 168;
  v12 = a1 + 216;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v7 = a1 + 264;
  v8 = a1 + 288;
  v9 = a1 + 312;
  v10 = a1 + 336;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 8) = (unint64_t)a2;
  v13 = 0;
  sub_1A3964750(a1 + 144, (unint64_t)a2, &v13);
  v13 = 0;
  sub_1A3964750(v6, v5, &v13);
  v13 = 0;
  sub_1A3964750(v3, v5, &v13);
  v13 = 0;
  sub_1A3964750(v12, v5, &v13);
  v13 = 0;
  sub_1A3964750(v4, v5, &v13);
  v13 = 0;
  sub_1A3964750(v7, v5, &v13);
  LODWORD(v13) = 0;
  sub_1A3963E2C(v9, v5, &v13);
  LODWORD(v13) = 0;
  sub_1A3963E2C(v10, v5, &v13);
  LODWORD(v13) = 0;
  sub_1A3963E2C(v8, v5, &v13);
  return a1;
}

void sub_1A396464C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11)
{
  _QWORD *v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  v20 = *v18;
  if (*v18)
  {
    v11[43] = v20;
    operator delete(v20);
  }
  v21 = *v17;
  if (*v17)
  {
    v11[40] = v21;
    operator delete(v21);
  }
  v22 = *v16;
  if (*v16)
  {
    v11[37] = v22;
    operator delete(v22);
  }
  v23 = *v15;
  if (*v15)
  {
    v11[34] = v23;
    operator delete(v23);
  }
  v24 = *v14;
  if (*v14)
  {
    v11[31] = v24;
    operator delete(v24);
  }
  v25 = *a11;
  if (*a11)
  {
    v11[28] = v25;
    operator delete(v25);
  }
  v26 = *v13;
  if (*v13)
  {
    v11[25] = v26;
    operator delete(v26);
  }
  v27 = *a10;
  if (*a10)
  {
    v11[22] = v27;
    operator delete(v27);
  }
  v28 = *v12;
  if (*v12)
  {
    v11[19] = v28;
    operator delete(v28);
  }
  v29 = (void *)v11[15];
  if (v29)
  {
    v11[16] = v29;
    operator delete(v29);
  }
  v30 = (void *)v11[12];
  if (v30)
  {
    v11[13] = v30;
    operator delete(v30);
  }
  v31 = (void *)v11[9];
  if (v31)
  {
    v11[10] = v31;
    operator delete(v31);
  }
  v32 = (void *)v11[6];
  if (v32)
  {
    v11[7] = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A3964750(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_1A3964780((void **)a1, a2 - v3, a3);
  }
}

void sub_1A3964780(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      sub_1A395516C();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_1A3964890(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void *sub_1A3964890(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_1A3954EA8();
  return operator new(8 * a2);
}

void sub_1A39648C4(uint64_t a1, unint64_t a2)
{
  VPTimeFreqConverter **v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(VPTimeFreqConverter ***)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != (VPTimeFreqConverter **)v5)
        sub_1A395F534(--v3, 0);
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    sub_1A3964940((char **)a1, a2 - v4);
  }
}

void sub_1A3964940(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      sub_1A395516C();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    v24 = v4;
    if (v13)
    {
      v14 = (char *)sub_1A3964890(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    v23 = v16;
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    *((_QWORD *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      v17 = (char *)*((_QWORD *)&v22 + 1);
      v16 = v23;
    }
    v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v16;
    v23 = v20;
    v21 = v19;
    sub_1A3964A64((uint64_t)&v21);
  }
}

uint64_t sub_1A3964A64(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_1A395F534((VPTimeFreqConverter **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1A3964AB4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1A3964B48(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_1A3964B48(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_1A395516C();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_1A3964D20(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_1A3964CAC(a1, &v15);
    sub_1A3964E7C((uint64_t)&v15);
  }
}

void sub_1A3964C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1A3964E7C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1A3964CAC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1A3964D64((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1A3964D20(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_1A3954EA8();
  return operator new(24 * a2);
}

uint64_t sub_1A3964D64(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1A3964E04((uint64_t)v11);
  return v9;
}

uint64_t sub_1A3964E04(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1A3964E38(a1);
  return a1;
}

void sub_1A3964E38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_1A3964E7C(uint64_t a1)
{
  sub_1A3964EB0(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1A3964EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void sub_1A3964F08(_QWORD *a1, float *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1[208];
  v4 = (a1[209] - v3) >> 2;
  if (a1[209] == v3)
  {
LABEL_7:
    v5 = (a1[209] - v3) >> 2;
  }
  else
  {
    v5 = 0;
    if (v4 <= 1)
      v6 = 1;
    else
      v6 = (a1[209] - v3) >> 2;
    while (*(float *)(v3 + 4 * v5) <= *a2)
    {
      if (v6 == ++v5)
        goto LABEL_7;
    }
  }
  v7 = (uint64_t)(a1 + 206);
  if (v4 >= v5)
    v4 = v5;
  a1[206] = v4;
  sub_1A39642B0(v7);
  a1[3] = a1[206];
}

void sub_1A3964F80(uint64_t a1)
{
  float v2;
  vDSP_Length v3;
  uint64_t v4;
  uint64_t v5;
  const float *v6;
  float v7;
  float __B;
  float __C;

  __C = 0.0;
  vDSP_maxv(*(const float **)(a1 + 1736), 1, &__C, *(_QWORD *)(a1 + 24));
  v2 = logf(1.0 - *(float *)(a1 + 584));
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 1736);
    v6 = *(const float **)(a1 + 1152);
    v7 = v2 / __C;
    do
    {
      v6[v4] = 1.0 - expf(v7 * *(float *)(v5 + 4 * v4));
      ++v4;
    }
    while (v3 != v4);
  }
  else
  {
    v6 = *(const float **)(a1 + 1152);
  }
  vDSP_vneg(v6, 1, *(float **)(a1 + 1176), 1, v3);
  __B = 1.0;
  vDSP_vsadd(*(const float **)(a1 + 1176), 1, &__B, *(float **)(a1 + 1200), 1, *(_QWORD *)(a1 + 24));
  vDSP_vsadd(*(const float **)(a1 + 1176), 1, (const float *)(a1 + 752), *(float **)(a1 + 1176), 1, *(_QWORD *)(a1 + 24));
  vDSP_vsmul(*(const float **)(a1 + 1152), 1, (const float *)(a1 + 756), *(float **)(a1 + 1224), 1, *(_QWORD *)(a1 + 24));
  vDSP_vmul(*(const float **)(a1 + 1224), 1, *(const float **)(a1 + 1320), 1, *(float **)(a1 + 1224), 1, *(_QWORD *)(a1 + 24));
}

void sub_1A39650BC(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 317, a4);
}

void sub_1A3965DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1A3966950(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *result;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  if (!qword_1ED1B5650)
  {
    v8 = xmmword_1E4A9FEF8;
    v9 = 0;
    qword_1ED1B5650 = _sl_dlopen();
  }
  if (!qword_1ED1B5650)
    sub_1A3AB0A0C(&v7, a2, a3, a4, a5);
  result = dlsym((void *)qword_1ED1B5650, "AXLocalizedString");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  off_1EE6D5648 = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ausdk::AUMIDIBase::DelegateGetPropertyInfo(ausdk::AUMIDIBase *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  return 4294956417;
}

uint64_t ausdk::AUMIDIBase::DelegateGetProperty(ausdk::AUMIDIBase *this, unsigned int a2, unsigned int a3, unsigned int a4, void *a5)
{
  return 4294956417;
}

uint64_t ausdk::AUMIDIBase::DelegateSetProperty(ausdk::AUMIDIBase *this, unsigned int a2, unsigned int a3, unsigned int a4, const void *a5)
{
  return 4294956417;
}

uint64_t ausdk::AUMIDIBase::HandleMIDIEvent(ausdk::AUMIDIBase *this, unsigned int a2, unsigned __int8 a3, unsigned __int8 a4, int a5)
{
  uint64_t v5;
  uint64_t (*v6)(void);

  if (!*(_BYTE *)(*((_QWORD *)this + 1) + 17))
    return 4294956429;
  if (a2 >> 4 == 8)
  {
    v6 = *(uint64_t (**)(void))(*(_QWORD *)this + 88);
  }
  else
  {
    if (a2 >> 4 != 9)
      return (*(uint64_t (**)(ausdk::AUMIDIBase *))(*(_QWORD *)this + 72))(this);
    v5 = *(_QWORD *)this;
    if (a5)
      v6 = *(uint64_t (**)(void))(v5 + 80);
    else
      v6 = *(uint64_t (**)(void))(v5 + 88);
  }
  return v6();
}

uint64_t ausdk::AUMIDIBase::HandleNonNoteEvent(ausdk::AUMIDIBase *this, unsigned int a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  uint64_t (*v6)(void);
  uint64_t (*v7)(void);

  switch(a2 >> 4)
  {
    case 0xAu:
      v6 = *(uint64_t (**)(void))(*(_QWORD *)this + 128);
      return v6();
    case 0xBu:
      switch((_DWORD)a4)
      {
        case 'x':
          v7 = *(uint64_t (**)(void))(*(_QWORD *)this + 152);
          return v7();
        case 'y':
          v7 = *(uint64_t (**)(void))(*(_QWORD *)this + 136);
          return v7();
        case '{':
          v7 = *(uint64_t (**)(void))(*(_QWORD *)this + 144);
          return v7();
      }
      v6 = *(uint64_t (**)(void))(*(_QWORD *)this + 96);
      return v6();
    case 0xCu:
      return (*(uint64_t (**)(ausdk::AUMIDIBase *, uint64_t, uint64_t))(*(_QWORD *)this + 120))(this, a3, a4);
    case 0xDu:
      return (*(uint64_t (**)(ausdk::AUMIDIBase *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 112))(this, a3, a4, a6);
    case 0xEu:
      v6 = *(uint64_t (**)(void))(*(_QWORD *)this + 104);
      return v6();
    default:
      return 0;
  }
}

uint64_t ausdk::AUMIDIBase::SysEx(ausdk::AUMIDIBase *this, const unsigned __int8 *a2)
{
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 17))
    return (*(uint64_t (**)(ausdk::AUMIDIBase *, const unsigned __int8 *))(*(_QWORD *)this + 160))(this, a2);
  else
    return 4294956429;
}

void sub_1A3966BA8()
{
  JUMPOUT(0x1A8596C28);
}

uint64_t sub_1A3966BBC(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2 & 0xF0, a2 & 0xF, a3, a4, a5);
}

uint64_t sub_1A3966BE8()
{
  return 4294967292;
}

uint64_t sub_1A3966BF0()
{
  return 0;
}

uint64_t sub_1A3966BF8()
{
  return 0;
}

uint64_t TTSPreferencesSetValueForKey(const __CFString *a1, const void *a2)
{
  CFPreferencesSetAppValue(a1, a2, CFSTR("com.apple.SpeakSelection"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.SpeakSelection"));
}

uint64_t sub_1A3966C2C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1A3966C3C(uint64_t a1)
{

}

void sub_1A3966C44(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

id TTSLanguageCanonicalFormToGeneralLanguage(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  id v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  objc_msgSend_lowercaseString(a1, a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1E4ABC678, v6, (uint64_t)&v22, (uint64_t)v26, 16);
  if (v7)
  {
    v11 = v7;
    v12 = *(_QWORD *)v23;
    while (2)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v23 != v12)
          objc_enumerationMutation(&unk_1E4ABC678);
        v14 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * i);
        if (objc_msgSend_rangeOfString_(v5, v8, v14, v9, v10) != 0x7FFFFFFFFFFFFFFFLL)
        {
          v16 = objc_msgSend_rangeOfString_(v5, v8, v14, v9, v10);
          objc_msgSend_substringToIndex_(v5, v17, v16, v18, v19);
          v15 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_11;
        }
      }
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1E4ABC678, v8, (uint64_t)&v22, (uint64_t)v26, 16);
      if (v11)
        continue;
      break;
    }
  }
  v15 = v5;
LABEL_11:
  v20 = v15;

  return v20;
}

id VOTBundle(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;

  v5 = (void *)qword_1ED1B5640;
  if (!qword_1ED1B5640)
  {
    objc_msgSend_stringByAppendingString_(&stru_1E4AA5CE8, a2, (uint64_t)CFSTR("/System/Library/CoreServices/VoiceOverTouch.app"), a4, a5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_bundleWithPath_(MEMORY[0x1E0CB34D0], v7, (uint64_t)v6, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = (void *)qword_1ED1B5640;
    qword_1ED1B5640 = v10;

    if (!qword_1ED1B5640)
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v12, v13, v14, v15);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v18, (uint64_t)"NSBundle *VOTBundle(void)", v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v17, v22, (uint64_t)v21, (uint64_t)CFSTR("TTSEmojiUtilities.m"), 52, CFSTR("Unable to create VOT bundle from path: %@"), v6);

    }
    v5 = (void *)qword_1ED1B5640;
  }
  return v5;
}

BOOL TTSisSpeakableEmojiString(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = objc_retainAutorelease(a1);
  if (objc_msgSend_UTF8String(v1, v2, v3, v4, v5))
  {
    v17 = 0;
    v18 = &v17;
    v19 = 0x3010000000;
    v21 = 0;
    v22 = 0;
    v20 = &unk_1A3B14873;
    objc_msgSend_length(v1, v6, v7, v8, v9);
    CEMEnumerateEmojiTokensInStringWithBlock();
    v10 = v18[5];
    v15 = v10 == objc_msgSend_length(v1, v11, v12, v13, v14);
    _Block_object_dispose(&v17, 8);
  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_1A3966F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A3966FA0(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  if (a3 <= *(_QWORD *)(v5 + 40) + *(_QWORD *)(v5 + 32))
    *(_QWORD *)(v5 + 40) = a3 + a4;
  else
    *a5 = 1;
  return result;
}

void sub_1A39670C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A39670E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = a4;
  *a5 = 1;
  return result;
}

void sub_1A39671CC()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("internal-emoji-locale-cache", 0);
  v1 = (void *)qword_1ED1B5628;
  qword_1ED1B5628 = (uint64_t)v0;

}

uint64_t sub_1A39671F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  result = objc_msgSend_isEqualToString_((void *)qword_1ED1B5630, a2, *(_QWORD *)(a1 + 32), a4, a5);
  if ((result & 1) == 0)
  {
    v11 = objc_msgSend_copy(*(void **)(a1 + 32), v7, v8, v9, v10);
    v12 = (void *)qword_1ED1B5630;
    qword_1ED1B5630 = v11;

    if (qword_1ED1B5638)
    {
      CFRelease((CFTypeRef)qword_1ED1B5638);
      qword_1ED1B5638 = 0;
    }
    result = CEMCreateEmojiLocaleData();
    qword_1ED1B5638 = result;
  }
  return result;
}

void sub_1A39673CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1A39673F0(uint64_t a1)
{
  CFTypeRef result;

  result = (CFTypeRef)qword_1ED1B5638;
  if (qword_1ED1B5638)
  {
    result = CFRetain((CFTypeRef)qword_1ED1B5638);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t sub_1A3967428(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = objc_msgSend_replaceCharactersInRange_withString_(*(void **)(a1 + 32), a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + a3, a4, (uint64_t)&stru_1E4AA5CE8);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) -= a4;
  return result;
}

void sub_1A39675C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1A39675E0(uint64_t a1)
{
  CFTypeRef result;

  result = (CFTypeRef)qword_1ED1B5638;
  if (qword_1ED1B5638)
  {
    result = CFRetain((CFTypeRef)qword_1ED1B5638);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

void sub_1A3967618(uint64_t a1)
{
  void *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void *)MEMORY[0x1A8597054]();
  v3 = (void *)CEMEmojiTokenCopyName();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v4, (uint64_t)CFSTR(" %@ "), v5, v6, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_1A3967834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A396784C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  _QWORD v47[3];

  v47[2] = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v12 = v7;
  if (*(_BYTE *)(a1 + 80))
  {
    v13 = (void *)MEMORY[0x1E0CB3940];
    VOTBundle((uint64_t)v7, v8, v9, v10, v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    AXNSLocalizedStringForLocale();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v13, v16, (uint64_t)v15, v17, v18, v12);
    v19 = objc_claimAutoreleasedReturnValue();

    v12 = (void *)v19;
  }
  if (*(_QWORD *)(a1 + 40) && a2 + a3 < (unint64_t)objc_msgSend_length(*(void **)(a1 + 48), v8, v9, v10, v11))
  {
    objc_msgSend_stringByAppendingString_(v12, v8, *(_QWORD *)(a1 + 40), v20, v21);
    v22 = objc_claimAutoreleasedReturnValue();

    v12 = (void *)v22;
  }
  objc_msgSend_replaceCharactersInRange_withString_(*(void **)(a1 + 56), v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) + a2, a3, (uint64_t)v12);
  v23 = *(void **)(a1 + 64);
  v46[0] = CFSTR("originalRange");
  objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v24, a2, a3, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v46[1] = CFSTR("processedRange");
  v47[0] = v26;
  v27 = (void *)MEMORY[0x1E0CB3B18];
  v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) + a2;
  v33 = objc_msgSend_length(v12, v29, v30, v31, v32);
  objc_msgSend_valueWithRange_(v27, v34, v28, v33, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v47[1] = v36;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v37, (uint64_t)v47, (uint64_t)v46, 2);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v23, v39, (uint64_t)v38, v40, v41);

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) += objc_msgSend_length(v12, v42, v43, v44, v45) - a3;
}

char *CAStringForOSType(unsigned int a1, char *__dst, size_t a3, int16x8_t a4)
{
  int32x4_t v5;
  uint32x4_t v6;
  char __source[8];
  char v9;

  a4.i32[0] = bswap32(a1);
  *(int8x8_t *)a4.i8 = vzip1_s8(*(int8x8_t *)a4.i8, *(int8x8_t *)a4.i8);
  v5.i64[0] = 0x1F0000001FLL;
  v5.i64[1] = 0x1F0000001FLL;
  v6.i64[0] = 0x5F0000005FLL;
  v6.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a4.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v6, (uint32x4_t)vsraq_n_s32(v5, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a4.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a4.i8, (int8x8_t)0x2E002E002E002ELL);
  v9 = 4;
  *(_DWORD *)__source = vmovn_s16(a4).u32[0];
  __source[4] = 0;
  strlcpy(__dst, __source, a3);
  if (v9 < 0)
    operator delete(*(void **)__source);
  return __dst;
}

void sub_1A3967ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *CAStreamBasicDescription::VirtualizeLinearPCMFormat(_DWORD *this, AudioStreamBasicDescription *a2)
{
  int v2;

  if (this[2] == 1819304813 && (this[3] & 0x40) == 0)
  {
    v2 = 4 * this[7];
    this[3] = 9;
    this[4] = v2;
    this[5] = 1;
    this[6] = v2;
    this[8] = 32;
  }
  return this;
}

uint64_t CAStreamBasicDescription::VirtualizeLinearPCMFormat(uint64_t this, _DWORD *a2, AudioStreamBasicDescription *a3)
{
  int v3;
  int v4;

  if (a2[2] == 1819304813 && (a2[3] & 0x40) == 0)
  {
    if ((_DWORD)this)
      v3 = 9;
    else
      v3 = 11;
    v4 = 4 * a2[7];
    a2[3] = v3;
    a2[4] = v4;
    a2[5] = 1;
    a2[6] = v4;
    a2[8] = 32;
  }
  return this;
}

double CAStreamBasicDescription::ResetFormat(CAStreamBasicDescription *this, AudioStreamBasicDescription *a2)
{
  double result;

  *((_DWORD *)this + 8) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

uint64_t CAStreamBasicDescription::FillOutFormat(uint64_t this, AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3)
{
  if (*(double *)this == 0.0)
    *(Float64 *)this = a2->mSampleRate;
  if (!*(_DWORD *)(this + 8))
    *(_DWORD *)(this + 8) = a2->mFormatID;
  if (!*(_DWORD *)(this + 12))
    *(_DWORD *)(this + 12) = a2->mFormatFlags;
  if (!*(_DWORD *)(this + 16))
    *(_DWORD *)(this + 16) = a2->mBytesPerPacket;
  if (!*(_DWORD *)(this + 20))
    *(_DWORD *)(this + 20) = a2->mFramesPerPacket;
  if (!*(_DWORD *)(this + 24))
    *(_DWORD *)(this + 24) = a2->mBytesPerFrame;
  if (!*(_DWORD *)(this + 28))
    *(_DWORD *)(this + 28) = a2->mChannelsPerFrame;
  if (!*(_DWORD *)(this + 32))
    *(_DWORD *)(this + 32) = a2->mBitsPerChannel;
  return this;
}

uint64_t CAStreamBasicDescription::IsEqual(CAStreamBasicDescription *this, const AudioStreamBasicDescription *a2, int a3)
{
  int v4;
  AudioFormatID mFormatID;
  int v6;
  UInt32 mBytesPerPacket;
  int v8;
  UInt32 mFramesPerPacket;
  int v10;
  UInt32 mBytesPerFrame;
  int v12;
  UInt32 mChannelsPerFrame;
  int v14;
  UInt32 mBitsPerChannel;

  if (!a3)
    return sub_1A3967CE8((uint64_t)this, (uint64_t)a2);
  if (*(double *)this != 0.0 && a2->mSampleRate != 0.0 && *(double *)this != a2->mSampleRate)
    return 0;
  v4 = *((_DWORD *)this + 2);
  if (v4)
  {
    mFormatID = a2->mFormatID;
    if (mFormatID)
    {
      if (v4 != mFormatID)
        return 0;
    }
  }
  v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    mBytesPerPacket = a2->mBytesPerPacket;
    if (mBytesPerPacket)
    {
      if (v6 != mBytesPerPacket)
        return 0;
    }
  }
  v8 = *((_DWORD *)this + 5);
  if (v8)
  {
    mFramesPerPacket = a2->mFramesPerPacket;
    if (mFramesPerPacket)
    {
      if (v8 != mFramesPerPacket)
        return 0;
    }
  }
  v10 = *((_DWORD *)this + 6);
  if (v10)
  {
    mBytesPerFrame = a2->mBytesPerFrame;
    if (mBytesPerFrame)
    {
      if (v10 != mBytesPerFrame)
        return 0;
    }
  }
  v12 = *((_DWORD *)this + 7);
  if (v12)
  {
    mChannelsPerFrame = a2->mChannelsPerFrame;
    if (mChannelsPerFrame)
    {
      if (v12 != mChannelsPerFrame)
        return 0;
    }
  }
  v14 = *((_DWORD *)this + 8);
  if (v14)
  {
    mBitsPerChannel = a2->mBitsPerChannel;
    if (mBitsPerChannel)
    {
      if (v14 != mBitsPerChannel)
        return 0;
    }
  }
  return sub_1A3968448((uint64_t)this, (uint64_t)a2, 1, 1);
}

BOOL sub_1A3967CE8(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

uint64_t CAStreamBasicDescription::IsEqual(CAStreamBasicDescription *this, const AudioStreamBasicDescription *a2)
{
  int v3;
  AudioFormatID mFormatID;
  int v6;
  UInt32 mBytesPerPacket;
  int v8;
  UInt32 mFramesPerPacket;
  int v10;
  UInt32 mBytesPerFrame;
  int v12;
  UInt32 mChannelsPerFrame;
  int v14;
  UInt32 mBitsPerChannel;

  if (*(double *)this != 0.0 && a2->mSampleRate != 0.0 && *(double *)this != a2->mSampleRate)
    return 0;
  v3 = *((_DWORD *)this + 2);
  if (v3)
  {
    mFormatID = a2->mFormatID;
    if (mFormatID && v3 != mFormatID)
      return 0;
  }
  v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    mBytesPerPacket = a2->mBytesPerPacket;
    if (mBytesPerPacket)
    {
      if (v6 != mBytesPerPacket)
        return 0;
    }
  }
  v8 = *((_DWORD *)this + 5);
  if (v8)
  {
    mFramesPerPacket = a2->mFramesPerPacket;
    if (mFramesPerPacket)
    {
      if (v8 != mFramesPerPacket)
        return 0;
    }
  }
  v10 = *((_DWORD *)this + 6);
  if (v10)
  {
    mBytesPerFrame = a2->mBytesPerFrame;
    if (mBytesPerFrame)
    {
      if (v10 != mBytesPerFrame)
        return 0;
    }
  }
  v12 = *((_DWORD *)this + 7);
  if (v12)
  {
    mChannelsPerFrame = a2->mChannelsPerFrame;
    if (mChannelsPerFrame)
    {
      if (v12 != mChannelsPerFrame)
        return 0;
    }
  }
  v14 = *((_DWORD *)this + 8);
  if (v14 && (mBitsPerChannel = a2->mBitsPerChannel) != 0 && v14 != mBitsPerChannel)
    return 0;
  else
    return sub_1A3968448((uint64_t)this, (uint64_t)a2, 1, 1);
}

BOOL MinimalSafetyCheck(const AudioStreamBasicDescription *a1)
{
  _BOOL8 result;
  UInt32 mBytesPerPacket;
  UInt32 mFramesPerPacket;
  UInt32 mBytesPerFrame;
  AudioFormatID mFormatID;
  _BOOL4 v8;

  result = 0;
  if (a1->mSampleRate >= 0.0 && a1->mSampleRate < 3000000.0)
  {
    mBytesPerPacket = a1->mBytesPerPacket;
    if (mBytesPerPacket >= 0xF4240)
      return 0;
    mFramesPerPacket = a1->mFramesPerPacket;
    if (mFramesPerPacket >= 0xF4240)
      return 0;
    mBytesPerFrame = a1->mBytesPerFrame;
    if (mBytesPerFrame >= 0xF4240)
      return 0;
    result = 0;
    if (a1->mChannelsPerFrame - 1 > 0x3FF || a1->mBitsPerChannel > 0x400)
      return result;
    mFormatID = a1->mFormatID;
    if (!mFormatID)
      return 0;
    v8 = mFramesPerPacket == 1 && mBytesPerPacket == mBytesPerFrame;
    return mFormatID != 1819304813 || v8;
  }
  return result;
}

uint64_t CAStreamBasicDescription::FromText(CAStreamBasicDescription *this, char *a2, AudioStreamBasicDescription *a3)
{
  CAStreamBasicDescription *v5;
  int v6;
  uint64_t v7;
  int i;
  FILE **v9;
  int v10;
  CAStreamBasicDescription *v11;
  int v12;
  int v13;
  uint64_t v14;
  CAStreamBasicDescription *v15;
  int v16;
  int v17;
  uint64_t v18;
  CAStreamBasicDescription *v19;
  unsigned __int8 v20;
  int v21;
  uint64_t v22;
  FILE *v23;
  const char *v24;
  size_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  double v33;
  int v34;
  int v35;
  int v36;
  unsigned __int8 v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  char *v44;
  int v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  uint64_t result;
  int v51;
  int __c;

  if (*(_BYTE *)this == 45)
    v5 = (CAStreamBasicDescription *)((char *)this + 1);
  else
    v5 = this;
  v6 = *(unsigned __int8 *)v5;
  if (v6 == 76)
  {
    v7 = 2 * (*((_BYTE *)v5 + 1) == 69);
    i = 12;
  }
  else
  {
    if (v6 != 66)
    {
      i = 12;
      goto LABEL_12;
    }
    v7 = 2 * (*((_BYTE *)v5 + 1) == 69);
    if (*((_BYTE *)v5 + 1) == 69)
      i = 14;
    else
      i = 12;
  }
  v5 = (CAStreamBasicDescription *)((char *)v5 + v7);
  v6 = *(unsigned __int8 *)v5;
LABEL_12:
  v9 = (FILE **)MEMORY[0x1E0C80C10];
  switch(v6)
  {
    case 'U':
      i &= 0xAu;
      v10 = *((unsigned __int8 *)v5 + 1);
      v5 = (CAStreamBasicDescription *)((char *)v5 + 1);
      v6 = v10;
      break;
    case 'F':
      i = i & 0xFFFFFFFA | 1;
      goto LABEL_17;
    case 'I':
LABEL_17:
      v11 = (CAStreamBasicDescription *)((char *)v5 + 1);
      if (*((char *)v5 + 1) < 0)
      {
        v13 = 0;
      }
      else
      {
        v12 = *((unsigned __int8 *)v5 + 1);
        if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *((unsigned __int8 *)v5 + 1) + 60) & 0x400) != 0)
        {
          v13 = 0;
          v11 = (CAStreamBasicDescription *)((char *)v5 + 2);
          while (1)
          {
            v13 = v12 + 10 * v13 - 48;
            if (*(char *)v11 < 0)
              break;
            v18 = *(unsigned __int8 *)v11;
            v12 = *(unsigned __int8 *)v11;
            v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
            if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v18 + 60) & 0x400) == 0)
            {
              v5 = (CAStreamBasicDescription *)((char *)v11 - 2);
              v11 = (CAStreamBasicDescription *)((char *)v11 - 1);
              goto LABEL_33;
            }
          }
        }
        else
        {
          v13 = 0;
LABEL_33:
          if (v12 == 46)
          {
            v21 = *((char *)v5 + 2);
            v19 = (CAStreamBasicDescription *)((char *)v5 + 2);
            v20 = v21;
            if (v21 < 0 || (v22 = v20, (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v20 + 60) & 0x400) == 0))
            {
              v23 = (FILE *)*MEMORY[0x1E0C80C10];
              v24 = "Expected fractional bits following '.'\n";
              v25 = 39;
LABEL_37:
              fwrite(v24, v25, 1uLL, v23);
              goto LABEL_101;
            }
            v29 = 0;
            v11 = v19;
            do
            {
              if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v22 + 60) & 0x400) == 0)
                break;
              v30 = *((char *)v11 + 1);
              v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
              v29 = 10 * v29 + v22 - 48;
              v22 = v30;
            }
            while ((v30 & 0x80000000) == 0);
            v13 += v29;
            i |= v29 << 7;
          }
        }
      }
      v28 = 1819304813;
      v26 = (v13 + 7) >> 3;
      if ((v13 & 7) != 0)
        i = i & 0xFFFFFFE7 | 0x10;
      v27 = 1;
      goto LABEL_50;
  }
  v14 = 0;
  __c = 538976288;
  v15 = this;
  v11 = this;
  while (1)
  {
    v17 = *(unsigned __int8 *)v11;
    v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
    v16 = v17;
    if (v17 == 92)
    {
      if (*(_BYTE *)v11 != 120)
        return 0;
      v51 = 0;
      if (sscanf((const char *)v15 + 2, "%02X", &v51) != 1)
        return 0;
      *((_BYTE *)&__c + v14) = v51;
      v11 = (CAStreamBasicDescription *)((char *)v15 + 4);
      goto LABEL_26;
    }
    *((_BYTE *)&__c + v14) = v16;
    if (!v16)
      break;
LABEL_26:
    ++v14;
    v15 = v11;
    if (v14 == 4)
      goto LABEL_40;
  }
  if (v14 != 3)
    return 0;
  HIBYTE(__c) = 32;
  v11 = v15;
LABEL_40:
  if (memchr("-@/#", SHIBYTE(__c), 5uLL))
  {
    HIBYTE(__c) = 32;
    v11 = (CAStreamBasicDescription *)((char *)v11 - 1);
  }
  i = 0;
  v26 = 0;
  v27 = 0;
  v13 = 0;
  v28 = bswap32(__c);
LABEL_50:
  v31 = *(unsigned __int8 *)v11;
  if (v31 != 64)
  {
    v33 = 0.0;
    goto LABEL_57;
  }
  v32 = *((char *)v11 + 1);
  v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
  LOBYTE(v31) = v32;
  if (v32 < 0)
    goto LABEL_100;
  v33 = 0.0;
  while ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v31 + 60) & 0x400) != 0)
  {
    v33 = (double)(v31 - 48) + v33 * 10.0;
    v34 = *((char *)v11 + 1);
    v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
    LOBYTE(v31) = v34;
    if (v34 < 0)
      goto LABEL_100;
  }
LABEL_57:
  if (v31 == 47)
  {
    for (i = 0; ; i = (v36 + v35) | (16 * i))
    {
      v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
      v35 = *(char *)v11;
      if ((v35 - 48) >= 0xA)
      {
        v31 = *(unsigned __int8 *)v11;
        if ((v31 - 65) >= 6)
        {
          if ((v31 - 97) > 5)
            break;
          v36 = -87;
        }
        else
        {
          v36 = -55;
        }
      }
      else
      {
        v36 = -48;
      }
    }
  }
  if (v31 != 35)
  {
    v37 = v31;
    v39 = v27;
    goto LABEL_73;
  }
  v38 = *((char *)v11 + 1);
  v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
  v37 = v38;
  if (v38 < 0)
    goto LABEL_100;
  v39 = v27;
  while ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v37 + 60) & 0x400) != 0)
  {
    v39 = 10 * v39 + v37 - 48;
    v40 = *((char *)v11 + 1);
    v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
    v37 = v40;
    if (v40 < 0)
      goto LABEL_100;
  }
LABEL_73:
  if (v37 != 58)
  {
LABEL_82:
    if (v37 != 44)
      goto LABEL_99;
    v44 = (char *)v11 + 1;
    v45 = *((unsigned __int8 *)v11 + 1);
    if ((*((char *)v11 + 1) & 0x80000000) == 0
      && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *((unsigned __int8 *)v11 + 1) + 60) & 0x400) != 0)
    {
      v27 = 0;
      v46 = (char *)v11 + 2;
      do
      {
        v44 = v46;
        v27 = v45 + 10 * v27 - 48;
        v47 = *v46;
        v45 = v47;
        if (v47 < 0)
          break;
        v48 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v47 + 60);
        v46 = v44 + 1;
      }
      while ((v48 & 0x400) != 0);
      v11 = (CAStreamBasicDescription *)(v44 - 1);
    }
    else
    {
      v27 = 0;
    }
    if (v45 == 73)
    {
      v44 = (char *)v11 + 2;
    }
    else if (v45 == 68)
    {
      if (v28 != 1819304813)
      {
        v23 = *v9;
        v24 = "non-interleaved flag invalid for non-PCM formats\n";
        v25 = 49;
        goto LABEL_37;
      }
      v11 = (CAStreamBasicDescription *)((char *)v11 + 2);
      i |= 0x20u;
LABEL_99:
      if (*(_BYTE *)v11)
        goto LABEL_100;
      *(double *)a2 = v33;
      *((_DWORD *)a2 + 2) = v28;
      *((_DWORD *)a2 + 3) = i;
      *((_DWORD *)a2 + 4) = v26;
      *((_DWORD *)a2 + 5) = v39;
      *((_DWORD *)a2 + 6) = v26;
      *((_DWORD *)a2 + 7) = v27;
      result = 1;
      *((_DWORD *)a2 + 8) = v13;
      *((_DWORD *)a2 + 9) = 0;
      return result;
    }
    if (v28 == 1819304813)
      v49 = v27;
    else
      v49 = 1;
    v26 *= v49;
    v11 = (CAStreamBasicDescription *)v44;
    goto LABEL_99;
  }
  i &= 0xFFFFFFE7;
  v41 = *((unsigned __int8 *)v11 + 1);
  if (v41 == 76)
    goto LABEL_77;
  if (v41 == 72)
  {
    i |= 0x10u;
LABEL_77:
    v42 = *((char *)v11 + 2);
    v11 = (CAStreamBasicDescription *)((char *)v11 + 2);
    v37 = v42;
    if ((v42 & 0x80000000) == 0)
    {
      v26 = 0;
      while ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v37 + 60) & 0x400) != 0)
      {
        v43 = *((char *)v11 + 1);
        v11 = (CAStreamBasicDescription *)((char *)v11 + 1);
        v26 = 10 * v26 + v37 - 48;
        v37 = v43;
        if (v43 < 0)
          goto LABEL_100;
      }
      goto LABEL_82;
    }
LABEL_100:
    fprintf(*v9, "extra characters at end of format string: %s\n", (const char *)v11);
  }
LABEL_101:
  fprintf(*v9, "Invalid format string: %s\n", (const char *)this);
  fwrite("Syntax of format strings is: \n", 0x1EuLL, 1uLL, *v9);
  return 0;
}

uint64_t sub_1A3968448(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int32x4_t v4;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  BOOL v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  BOOL v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  unsigned int v34;

  if (a4)
  {
    v4 = *(int32x4_t *)(a2 + 8);
    v4.i64[1] = *(_QWORD *)(a1 + 8);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v4))) & 1) != 0)
      return 1;
  }
  v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) != 1819304813)
    return v6 == *(_DWORD *)(a2 + 12);
  v7 = v6 & 0x7FFFFFFF;
  if ((v6 & 0x7FFFFFFF) == 0)
    v7 = *(_DWORD *)(a1 + 12);
  if (a3)
    v8 = v7;
  else
    v8 = v7 & 0xFFFFFFBF;
  v9 = *(_DWORD *)(a1 + 24);
  if (v9)
  {
    v10 = *(_DWORD *)(a1 + 28);
    if ((v6 & 0x20) != 0)
      v11 = 1;
    else
      v11 = *(_DWORD *)(a1 + 28);
    if (v11)
    {
      v9 = 8 * (v9 / v11);
      v12 = *(_DWORD *)(a1 + 32);
      v13 = v8 | 8;
      v14 = v9 == v12;
      goto LABEL_20;
    }
    v9 = 0;
    v12 = *(_DWORD *)(a1 + 32);
    v13 = v8 | 8;
  }
  else
  {
    v13 = v8 | 8;
    v10 = *(_DWORD *)(a1 + 28);
    v12 = *(_DWORD *)(a1 + 32);
  }
  v14 = v12 == 0;
LABEL_20:
  if (v14)
    v8 = v13;
  v16 = (v12 & 7) == 0 && v9 == v12;
  v17 = v8 & 0xFFFFFFEF;
  if (!v16)
    v17 = v8;
  if ((v17 & 1) != 0)
    v17 &= ~4u;
  v18 = (v17 & 8) == 0 || v12 > 8;
  v19 = v17 & 2;
  if (v18)
    v19 = v17;
  if (v10 == 1)
    v20 = v19 & 0xFFFFFFDF;
  else
    v20 = v19;
  if (!v20)
    v20 = 0x80000000;
  v21 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a2 + 8) != 1819304813)
    return v20 == v21;
  v22 = v21 & 0x7FFFFFFF;
  if ((v21 & 0x7FFFFFFF) == 0)
    v22 = *(_DWORD *)(a2 + 12);
  if (a3)
    v23 = v22;
  else
    v23 = v22 & 0xFFFFFFBF;
  v24 = *(_DWORD *)(a2 + 24);
  if (!v24)
  {
    v28 = v23 | 8;
    v25 = *(_DWORD *)(a2 + 28);
    v27 = *(_DWORD *)(a2 + 32);
LABEL_53:
    v29 = v27 == 0;
    goto LABEL_54;
  }
  v25 = *(_DWORD *)(a2 + 28);
  if ((v21 & 0x20) != 0)
    v26 = 1;
  else
    v26 = *(_DWORD *)(a2 + 28);
  if (!v26)
  {
    v24 = 0;
    v27 = *(_DWORD *)(a2 + 32);
    v28 = v23 | 8;
    goto LABEL_53;
  }
  v24 = 8 * (v24 / v26);
  v27 = *(_DWORD *)(a2 + 32);
  v28 = v23 | 8;
  v29 = v24 == v27;
LABEL_54:
  if (v29)
    v23 = v28;
  v30 = (v27 & 7) == 0 && v24 == v27;
  v31 = v23 & 0xFFFFFFEF;
  if (!v30)
    v31 = v23;
  if ((v31 & 1) != 0)
    v31 &= ~4u;
  v32 = (v31 & 8) == 0 || v27 > 8;
  v33 = v31 & 2;
  if (v32)
    v33 = v31;
  if (v25 == 1)
    v34 = v33 & 0xFFFFFFDF;
  else
    v34 = v33;
  if (v34)
    v21 = v34;
  else
    v21 = 0x80000000;
  return v20 == v21;
}

id TTSPublicSpeechLanguageCanonicalFormToGeneralLanguage(void *a1)
{
  const char *v1;
  id v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  id v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  if (v2)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1E4ABC690, v1, (uint64_t)&v18, (uint64_t)v22, 16);
    if (v3)
    {
      v7 = v3;
      v8 = *(_QWORD *)v19;
      while (2)
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v19 != v8)
            objc_enumerationMutation(&unk_1E4ABC690);
          v10 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * i);
          if (objc_msgSend_rangeOfString_(v2, v4, v10, v5, v6) != 0x7FFFFFFFFFFFFFFFLL)
          {
            v12 = objc_msgSend_rangeOfString_(v2, v4, v10, v5, v6);
            objc_msgSend_substringToIndex_(v2, v13, v12, v14, v15);
            v11 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1E4ABC690, v4, (uint64_t)&v18, (uint64_t)v22, 16);
        if (v7)
          continue;
        break;
      }
    }
    v11 = v2;
LABEL_12:
    v16 = v11;
  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void _TTSSortAVSpeechSynthesisVoices(void *a1)
{
  void *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v1 = (void *)MEMORY[0x1E0CB3928];
  v2 = a1;
  objc_msgSend_sortDescriptorWithKey_ascending_(v1, v3, (uint64_t)CFSTR("language"), 1, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sortDescriptorWithKey_ascending_(MEMORY[0x1E0CB3928], v6, (uint64_t)CFSTR("quality"), 0, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v5;
  v15[1] = v8;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v9, (uint64_t)v15, 2, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sortUsingDescriptors_(v2, v12, (uint64_t)v11, v13, v14);

}

uint64_t sub_1A3968824(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t isNoveltyVoice;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  isNoveltyVoice = objc_msgSend_isNoveltyVoice(a1, a2, a3, a4, a5);
  objc_msgSend_synthesisProviderVoice(a1, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v11;
  if (v11 && objc_msgSend_isPersonalVoice(v11, v12, v13, v14, v15))
    isNoveltyVoice |= 2uLL;

  return isNoveltyVoice;
}

id sub_1A3968878(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  objc_msgSend_identifier(a1, a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_audioFileSettingsForVoice_(TTSSpeechManager, v6, (uint64_t)v5, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

id sub_1A39688C0(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  dispatch_semaphore_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  id v16;
  _QWORD v18[4];
  NSObject *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  v4 = a3;
  if (TTSUseCoreSynthesizerForAV())
  {
    v21 = 0;
    v22 = &v21;
    v23 = 0x3032000000;
    v24 = sub_1A3968A10;
    v25 = sub_1A3968A20;
    v26 = 0;
    v7 = dispatch_semaphore_create(0);
    objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = sub_1A3968A28;
    v18[3] = &unk_1E4A9FFE8;
    v20 = &v21;
    v13 = v7;
    v19 = v13;
    objc_msgSend_internalVoiceWithIdentifier_completionHandler_(v12, v14, (uint64_t)v4, (uint64_t)v18, v15);

    dispatch_semaphore_wait(v13, 0xFFFFFFFFFFFFFFFFLL);
    v16 = (id)v22[5];

    _Block_object_dispose(&v21, 8);
  }
  else
  {
    objc_msgSend__voiceWithIdentifier_includingSiri_(a1, v5, (uint64_t)v4, 1, v6);
    v16 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v16;
}

void sub_1A39689F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A3968A10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1A3968A20(uint64_t a1)
{

}

void sub_1A3968A28(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

uint64_t sub_1A3968A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](TTSSpeechSynthesizer, sel_remapVoiceIdentifier_, a3, a4, a5);
}

id sub_1A3968A80(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v4 = a3;
  sub_1A3968B9C();
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = sub_1A3968A10;
  v16 = sub_1A3968A20;
  v17 = 0;
  objc_msgSend__remapOldIdentifierIfNecessary_(a1, v5, (uint64_t)v4, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = v8;
  AX_PERFORM_WITH_LOCK();
  v9 = (id)v13[5];

  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_1A3968B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3968B9C()
{
  const char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v6 = MEMORY[0x1E0C809B0];
  AX_PERFORM_WITH_LOCK();
  if (*((_BYTE *)v12 + 24))
    v4 = (id)objc_msgSend_speechVoices(MEMORY[0x1E0C89B80], v0, v1, v2, v3, v6, 3221225472, sub_1A396BF14, &unk_1E4AA01A8, &v11, &v7);
  if (*((_BYTE *)v8 + 24))
    v5 = (id)objc_msgSend__speechVoicesIncludingSiri(MEMORY[0x1E0C89B80], v0, v1, v2, v3);
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v11, 8);
}

void sub_1A3968C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A3968C9C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  id v7;

  if (*(_BYTE *)(a1 + 48))
    v6 = &qword_1EE6D4DE8;
  else
    v6 = &qword_1ED1B56C8;
  objc_msgSend_objectForKeyedSubscript_((void *)*v6, a2, *(_QWORD *)(a1 + 32), a4, a5);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v7);

}

void sub_1A3968D08(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D5654, a3, (void *)1);
}

id sub_1A3968D18(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5654);
}

id sub_1A3968D24(void *a1, uint64_t a2, void *a3)
{
  id v4;
  dispatch_semaphore_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  id v16;
  id v17;
  id v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  void *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  int isEqualToString;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  BOOL v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t i;
  void *v120;
  void *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  char hasPrefix;
  void *v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  id v152;
  void *v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  id v163;
  NSObject *v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  NSObject *v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  const char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  const char *v222;
  uint64_t v223;
  uint64_t v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  NSObject *v234;
  void *v235;
  void *v236;
  void *v237;
  id v238;
  id obj;
  id v240;
  void *v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  char v246;
  _QWORD v247[4];
  NSObject *v248;
  _BYTE *v249;
  objc_super v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint8_t v255[128];
  _BYTE buf[24];
  uint64_t (*v257)(uint64_t, uint64_t);
  void (*v258)(uint64_t);
  id v259;
  uint64_t v260;

  v260 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v250.receiver = a1;
  v250.super_class = (Class)&off_1EE6F72B0;
  v238 = objc_msgSendSuper2(&v250, sel_init);
  if (!v238)
  {
    v17 = 0;
    goto LABEL_82;
  }
  if (TTSUseCoreSynthesizerForAV())
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v257 = sub_1A3968A10;
    v258 = sub_1A3968A20;
    v259 = 0;
    v5 = dispatch_semaphore_create(0);
    objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v247[0] = MEMORY[0x1E0C809B0];
    v247[1] = 3221225472;
    v247[2] = sub_1A39696A8;
    v247[3] = &unk_1E4A9FFE8;
    v249 = buf;
    v11 = v5;
    v248 = v11;
    objc_msgSend_voiceWithLanguageCode_completionHandler_(v10, v12, (uint64_t)v4, (uint64_t)v247, v13);

    dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
    v14 = *(id *)(*(_QWORD *)&buf[8] + 40);

    v15 = v248;
    v16 = v14;

    _Block_object_dispose(buf, 8);
    v17 = v16;
    goto LABEL_81;
  }
  if ((byte_1EE6D4E2D & 1) != 0)
  {
    v18 = objc_alloc_init(MEMORY[0x1E0C89B80]);
    objc_msgSend_setLanguage_(v18, v19, (uint64_t)v4, v20, v21);
    AXLogSpeechSynthesis();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl(&dword_1A3940000, v22, OS_LOG_TYPE_INFO, "Building voices right now, using placeholder: %{public}@", buf, 0xCu);
    }
    v237 = 0;
    goto LABEL_77;
  }
  sub_1A3968B9C();
  if (v4)
  {
    v237 = 0;
  }
  else
  {
    objc_msgSend_currentLanguageCode(MEMORY[0x1E0C89B80], v23, v24, v25, v26);
    v4 = (id)objc_claimAutoreleasedReturnValue();
    v237 = v4;
  }
  v246 = 0;
  objc_msgSend_remapLanguageCode_(TTSSpeechManager, v23, (uint64_t)v4, v25, v26, v4);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  AXCLanguageConvertToCanonicalForm();
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  TTSPublicSpeechLanguageCanonicalFormToGeneralLanguage(v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lowercaseString(v29, v30, v31, v32, v33);
  v241 = (void *)objc_claimAutoreleasedReturnValue();

  v251 = 0;
  v252 = &v251;
  v253 = 0x2050000000;
  v38 = (void *)qword_1ED1B5690;
  v254 = qword_1ED1B5690;
  if (!qword_1ED1B5690)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_1A396BF50;
    v257 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E4A9FC10;
    v258 = (void (*)(uint64_t))&v251;
    sub_1A396BF50((uint64_t)buf, v34, v35, v36, v37);
    v38 = (void *)v252[3];
  }
  v39 = objc_retainAutorelease(v38);
  _Block_object_dispose(&v251, 8);
  objc_msgSend_sharedInstance(v39, v40, v41, v42, v43);
  v44 = objc_claimAutoreleasedReturnValue();
  v235 = (void *)v44;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v49 = (uint64_t *)qword_1EE6D5688;
  v257 = (uint64_t (*)(uint64_t, uint64_t))qword_1EE6D5688;
  if (!qword_1EE6D5688)
  {
    v50 = (void *)sub_1A396BFA4(v44, v45, v46, v47, v48);
    v49 = (uint64_t *)dlsym(v50, "AXSpeechSourceKeySpeechFeatures");
    *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v49;
    qword_1EE6D5688 = (uint64_t)v49;
  }
  _Block_object_dispose(buf, 8);
  if (!v49)
    sub_1A3AB0A88(v51, v52, v53, v54, v55);
  objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(v235, v52, (uint64_t)v241, *v49, (uint64_t)&v246);
  v236 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lowercaseString(v28, v56, v57, v58, v59);
  v4 = (id)objc_claimAutoreleasedReturnValue();

  v64 = 0;
  if (v236 && v246)
  {
    objc_msgSend_voiceWithIdentifier_(MEMORY[0x1E0C89B80], v60, (uint64_t)v236, v62, v63);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    if (v69)
    {
LABEL_20:
      objc_msgSend_language(v69, v65, v66, v67, v68);
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_lowercaseString(v70, v71, v72, v73, v74);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v75, v76, (uint64_t)v4, v77, v78);

      if (isEqualToString)
        v64 = 0;
      else
        v64 = v69;
      if (isEqualToString)
        v18 = v69;
      else
        v18 = 0;
      goto LABEL_33;
    }
    objc_msgSend_lowercaseString(v4, v65, v66, v67, v68);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqualToString_(v80, v81, (uint64_t)v241, v82, v83))
    {

    }
    else
    {
      objc_msgSend_lowercaseString(v234, v84, v85, v86, v87);
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      v92 = objc_msgSend_isEqualToString_(v88, v89, (uint64_t)v241, v90, v91);

      if (!v92)
        goto LABEL_20;
    }
    objc_msgSend__voiceFromInternalVoiceListWithIdentifier_(MEMORY[0x1E0C89B80], v65, (uint64_t)v236, v67, v68);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_language(v93, v94, v95, v96, v97);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    v99 = v98 == 0;

    if (!v99)
    {
      objc_msgSend_language(v93, v100, v101, v102, v103);
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_lowercaseString(v104, v105, v106, v107, v108);
      v109 = objc_claimAutoreleasedReturnValue();

      v4 = (id)v109;
    }

    v64 = 0;
    v18 = 0;
    goto LABEL_33;
  }
  v18 = 0;
LABEL_33:
  objc_msgSend_speechVoices(MEMORY[0x1E0C89B80], v60, v61, v62, v63);
  obj = (id)objc_claimAutoreleasedReturnValue();
  if (v18)
  {
    v111 = 0;
    v240 = 0;
    goto LABEL_74;
  }
  v244 = 0u;
  v245 = 0u;
  v242 = 0u;
  v243 = 0u;
  v116 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v110, (uint64_t)&v242, (uint64_t)v255, 16);
  if (!v116)
  {
    v240 = 0;
    goto LABEL_63;
  }
  v240 = 0;
  v117 = 0;
  v118 = *(_QWORD *)v243;
  do
  {
    for (i = 0; i != v116; ++i)
    {
      if (*(_QWORD *)v243 != v118)
        objc_enumerationMutation(obj);
      v120 = *(void **)(*((_QWORD *)&v242 + 1) + 8 * i);
      if (!v4)
        goto LABEL_53;
      objc_msgSend_language(*(void **)(*((_QWORD *)&v242 + 1) + 8 * i), v112, v113, v114, v115);
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_lowercaseString(v121, v122, v123, v124, v125);
      v126 = (void *)objc_claimAutoreleasedReturnValue();
      v130 = objc_msgSend_isEqualToString_(v126, v127, (uint64_t)v4, v128, v129);

      if (v117)
        v131 = 0;
      else
        v131 = v130;
      if (v131 != 1)
        goto LABEL_47;
      if (objc_msgSend_isDefault(v120, v112, v113, v114, v115))
      {
        v117 = v120;
LABEL_47:
        if (v64)
          goto LABEL_48;
        goto LABEL_51;
      }
      v117 = 0;
      if (v64)
      {
LABEL_48:
        objc_msgSend_language(v64, v112, v113, v114, v115);
        v132 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_lowercaseString(v132, v133, v134, v135, v136);
        v137 = (void *)objc_claimAutoreleasedReturnValue();
        hasPrefix = objc_msgSend_hasPrefix_(v137, v138, (uint64_t)v4, v139, v140);

        if ((hasPrefix & 1) != 0)
          goto LABEL_53;
      }
LABEL_51:
      objc_msgSend_language(v120, v112, v113, v114, v115);
      v142 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_lowercaseString(v142, v143, v144, v145, v146);
      v147 = (void *)objc_claimAutoreleasedReturnValue();
      v151 = objc_msgSend_hasPrefix_(v147, v148, (uint64_t)v4, v149, v150);

      if (v151)
      {
        v152 = v120;

        v64 = v152;
        continue;
      }
LABEL_53:
      if (v241 && !v240)
      {
        objc_msgSend_language(v120, v112, v113, v114, v115);
        v153 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_lowercaseString(v153, v154, v155, v156, v157);
        v158 = (void *)objc_claimAutoreleasedReturnValue();
        v162 = objc_msgSend_hasPrefix_(v158, v159, (uint64_t)v241, v160, v161);

        if (v162)
          v240 = v120;
        else
          v240 = 0;
      }
    }
    v116 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v112, (uint64_t)&v242, (uint64_t)v255, 16);
  }
  while (v116);
  if (v117)
  {
    v163 = v117;
    v111 = v163;
    goto LABEL_65;
  }
LABEL_63:
  v163 = v64;
  if (v163)
  {
    v64 = v163;
    v111 = 0;
LABEL_65:
    v18 = v163;
  }
  else
  {
    AXLogSpeechSynthesis();
    v164 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v164, OS_LOG_TYPE_INFO))
    {
      objc_msgSend_identifier(v240, v165, v166, v167, v168);
      v169 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v169;
      _os_log_impl(&dword_1A3940000, v164, OS_LOG_TYPE_INFO, "Search for possible voices secondary backup: %{public}@", buf, 0xCu);

    }
    objc_msgSend_language(v240, v170, v171, v172, v173);
    v174 = (void *)objc_claimAutoreleasedReturnValue();
    v178 = objc_msgSend_hasPrefix_(v174, v175, (uint64_t)CFSTR("en"), v176, v177);

    if (!v178
      || (v183 = objc_msgSend_indexOfObjectPassingTest_(obj, v179, (uint64_t)&unk_1E4A9F308, v180, v181),
          v183 == 0x7FFFFFFFFFFFFFFFLL)
      && (v183 = objc_msgSend_indexOfObjectPassingTest_(obj, v182, (uint64_t)&unk_1E4AA0050, v184, v185),
          v183 == 0x7FFFFFFFFFFFFFFFLL))
    {
      v186 = v240;
    }
    else
    {
      objc_msgSend_objectAtIndex_(obj, v182, v183, v184, v185);
      v186 = (void *)objc_claimAutoreleasedReturnValue();

    }
    v18 = v186;
    v64 = 0;
    v111 = 0;
    v240 = v18;
  }
LABEL_74:
  AXLogSpeechSynthesis();
  v187 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v187, OS_LOG_TYPE_INFO))
  {
    objc_msgSend_identifier(v111, v188, v189, v190, v191);
    v192 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v4;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v192;
    _os_log_impl(&dword_1A3940000, v187, OS_LOG_TYPE_INFO, "Using voice from language %{public}@ default: %{public}@", buf, 0x16u);

  }
  v22 = v234;
LABEL_77:

  if (v18)
  {
    v197 = objc_msgSend_quality(v18, v193, v194, v195, v196);
    objc_msgSend_setQuality_(v238, v198, v197, v199, v200);
    objc_msgSend_nonLocalizedNameWithoutQuality(v18, v201, v202, v203, v204);
    v205 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setNonLocalizedNameWithoutQuality_(v238, v206, (uint64_t)v205, v207, v208);

    objc_msgSend_identifier(v18, v209, v210, v211, v212);
    v213 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setIdentifier_(v238, v214, (uint64_t)v213, v215, v216);

    objc_msgSend_language(v18, v217, v218, v219, v220);
    v221 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setLanguage_(v238, v222, (uint64_t)v221, v223, v224);

    objc_msgSend_synthesisProviderVoice(v18, v225, v226, v227, v228);
    v229 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSynthesisProviderVoice_(v238, v230, (uint64_t)v229, v231, v232);

    v17 = v238;
  }
  else
  {
    v17 = 0;
  }

  v16 = v238;
LABEL_81:

LABEL_82:
  return v17;
}

void sub_1A3969678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_1A39696A8(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

uint64_t sub_1A39696F4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t isEqualToString;

  objc_msgSend_language(a2, (const char *)a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v5, v6, (uint64_t)CFSTR("en-US"), v7, v8);

  return isEqualToString;
}

uint64_t sub_1A3969734(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t hasPrefix;

  objc_msgSend_language(a2, (const char *)a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  hasPrefix = objc_msgSend_hasPrefix_(v5, v6, (uint64_t)CFSTR("en"), v7, v8);

  return hasPrefix;
}

const __CFString *sub_1A3969774()
{
  return &stru_1E4AA5CE8;
}

id sub_1A3969780(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;

  objc_msgSend_nameWithoutQuality(a1, a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_quality(a1, v7, v8, v9, v10) == 2)
  {
    objc_msgSend_nonLocalizedNameWithoutQuality(a1, v11, v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend_containsString_(v15, v16, (uint64_t)CFSTR("Enhanced"), v17, v18);

    if ((v19 & 1) == 0)
    {
      v24 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend__enhancedLocalizedNameFormat(a1, v20, v21, v22, v23);
      v25 = objc_claimAutoreleasedReturnValue();
LABEL_7:
      v42 = (void *)v25;
      objc_msgSend_stringWithFormat_(v24, v26, v25, v27, v28, v6);
      v43 = objc_claimAutoreleasedReturnValue();

      v6 = (void *)v43;
    }
  }
  else if (objc_msgSend_quality(a1, v11, v12, v13, v14) == 3)
  {
    objc_msgSend_nonLocalizedNameWithoutQuality(a1, v29, v30, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = objc_msgSend_containsString_(v33, v34, (uint64_t)CFSTR("Premium"), v35, v36);

    if ((v37 & 1) == 0)
    {
      v24 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend__premiumLocalizedNameFormat(a1, v38, v39, v40, v41);
      v25 = objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    }
  }
  return v6;
}

id sub_1A3969880()
{
  if (qword_1EE6D5660 != -1)
    dispatch_once(&qword_1EE6D5660, &unk_1E4AA0070);
  return (id)qword_1EE6D5658;
}

void sub_1A39698C0()
{
  void *v0;
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  id v12;

  v0 = (void *)MEMORY[0x1E0CB34D0];
  AXSystemRootDirectory();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByAppendingPathComponent_(v1, v2, (uint64_t)CFSTR("System/Library/PrivateFrameworks/AccessibilityUtilities.framework"), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bundleWithPath_(v0, v6, (uint64_t)v5, v7, v8);
  v12 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend_localizedStringForKey_value_table_(v12, v9, (uint64_t)CFSTR("ENHANCED_VOICE_NAME"), (uint64_t)CFSTR("%@ (Enhanced)"), (uint64_t)CFSTR("GeneralAccessibility"));
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)qword_1EE6D5658;
  qword_1EE6D5658 = v10;

}

id sub_1A3969964()
{
  if (qword_1EE6D5670 != -1)
    dispatch_once(&qword_1EE6D5670, &unk_1E4AA0090);
  return (id)qword_1EE6D5668;
}

void sub_1A39699A4()
{
  void *v0;
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  id v12;

  v0 = (void *)MEMORY[0x1E0CB34D0];
  AXSystemRootDirectory();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByAppendingPathComponent_(v1, v2, (uint64_t)CFSTR("System/Library/PrivateFrameworks/AccessibilityUtilities.framework"), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bundleWithPath_(v0, v6, (uint64_t)v5, v7, v8);
  v12 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend_localizedStringForKey_value_table_(v12, v9, (uint64_t)CFSTR("PREMIUM_VOICE_NAME"), (uint64_t)CFSTR("%@ (Premium)"), (uint64_t)CFSTR("GeneralAccessibility"));
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)qword_1EE6D5668;
  qword_1EE6D5668 = v10;

}

id sub_1A3969A48(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  dispatch_semaphore_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  id v14;
  _QWORD v16[4];
  NSObject *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;

  if (TTSUseCoreSynthesizerForAV())
  {
    v19 = 0;
    v20 = &v19;
    v21 = 0x3032000000;
    v22 = sub_1A3968A10;
    v23 = sub_1A3968A20;
    v24 = 0;
    v5 = dispatch_semaphore_create(0);
    objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = sub_1A3969B88;
    v16[3] = &unk_1E4AA00B8;
    v18 = &v19;
    v11 = v5;
    v17 = v11;
    objc_msgSend_internalVoicesIncludingSiri_completionHandler_(v10, v12, 1, (uint64_t)v16, v13);

    dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
    v14 = (id)v20[5];

    _Block_object_dispose(&v19, 8);
    return v14;
  }
  else
  {
    objc_msgSend__speechVoicesIncludingSiri_(a1, v2, 1, v3, v4);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void sub_1A3969B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3969B88(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

id sub_1A3969BD4(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  dispatch_semaphore_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  id v15;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[4];
  NSObject *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  id v42;

  if (TTSUseCoreSynthesizerForAV())
  {
    v37 = 0;
    v38 = &v37;
    v39 = 0x3032000000;
    v40 = sub_1A3968A10;
    v41 = sub_1A3968A20;
    v42 = 0;
    v6 = dispatch_semaphore_create(0);
    objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 3221225472;
    v34[2] = sub_1A3969D58;
    v34[3] = &unk_1E4AA00B8;
    v36 = &v37;
    v12 = v6;
    v35 = v12;
    objc_msgSend_internalVoicesIncludingSiri_completionHandler_(v11, v13, 1, (uint64_t)v34, v14);

    dispatch_semaphore_wait(v12, 0xFFFFFFFFFFFFFFFFLL);
    v15 = (id)v38[5];

    _Block_object_dispose(&v37, 8);
    return v15;
  }
  else
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v2, v3, v4, v5);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__speechVoicesIncludingSiri(a1, v18, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObjectsFromArray_(v17, v23, (uint64_t)v22, v24, v25);

    objc_msgSend_availableSuperCompactVoices(TTSSpeechManager, v26, v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObjectsFromArray_(v17, v31, (uint64_t)v30, v32, v33);

    return v17;
  }
}

void sub_1A3969D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3969D58(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

id sub_1A3969DA4(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  dispatch_semaphore_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  id v15;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  NSObject *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  id v41;

  if (TTSUseCoreSynthesizerForAV())
  {
    v36 = 0;
    v37 = &v36;
    v38 = 0x3032000000;
    v39 = sub_1A3968A10;
    v40 = sub_1A3968A20;
    v41 = 0;
    v6 = dispatch_semaphore_create(0);
    objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = sub_1A3969F2C;
    v33[3] = &unk_1E4AA00B8;
    v35 = &v36;
    v12 = v6;
    v34 = v12;
    objc_msgSend_internalVoicesIncludingSiri_completionHandler_(v11, v13, 0, (uint64_t)v33, v14);

    dispatch_semaphore_wait(v12, 0xFFFFFFFFFFFFFFFFLL);
    v15 = (id)v37[5];

    _Block_object_dispose(&v36, 8);
    return v15;
  }
  else
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v2, v3, v4, v5);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__speechVoicesIncludingSiri_(a1, v18, 0, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObjectsFromArray_(v17, v22, (uint64_t)v21, v23, v24);

    objc_msgSend_availableSuperCompactVoices(TTSSpeechManager, v25, v26, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObjectsFromArray_(v17, v30, (uint64_t)v29, v31, v32);

    return v17;
  }
}

void sub_1A3969F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3969F2C(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

id sub_1A3969F78(uint64_t a1, uint64_t a2, int a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  dispatch_semaphore_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD block[4];
  char v30;
  char v31;
  _QWORD v32[4];
  NSObject *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t);
  id v40;

  if (!TTSUseCoreSynthesizerForAV())
  {
    if (qword_1ED1B56B8 == -1)
    {
      if (a3)
      {
LABEL_5:
        objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v4, v5, v6, v7);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_bundleIdentifier(v18, v19, v20, v21, v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isEqualToString_(v23, v24, (uint64_t)CFSTR("com.apple.shortcuts"), v25, v26))
          v27 = TTSSupportsNeuralVoices();
        else
          v27 = 0;

        goto LABEL_11;
      }
    }
    else
    {
      dispatch_once(&qword_1ED1B56B8, &unk_1E4AA00D8);
      if (a3)
        goto LABEL_5;
    }
    v27 = 0;
LABEL_11:
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1A396A26C;
    block[3] = &unk_1E4AA0180;
    v30 = a3;
    v31 = v27;
    dispatch_sync((dispatch_queue_t)qword_1ED1B56D8, block);
    v35 = 0;
    v36 = &v35;
    v37 = 0x3032000000;
    v38 = sub_1A3968A10;
    v39 = sub_1A3968A20;
    v40 = 0;
    AX_PERFORM_WITH_LOCK();
    v17 = (id)v36[5];
    goto LABEL_12;
  }
  v35 = 0;
  v36 = &v35;
  v37 = 0x3032000000;
  v38 = sub_1A3968A10;
  v39 = sub_1A3968A20;
  v40 = 0;
  v8 = dispatch_semaphore_create(0);
  objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = sub_1A396A1E8;
  v32[3] = &unk_1E4AA00B8;
  v34 = &v35;
  v14 = v8;
  v33 = v14;
  objc_msgSend_internalVoicesIncludingSiri_completionHandler_(v13, v15, 1, (uint64_t)v32, v16);

  dispatch_semaphore_wait(v14, 0xFFFFFFFFFFFFFFFFLL);
  v17 = (id)v36[5];

LABEL_12:
  _Block_object_dispose(&v35, 8);

  return v17;
}

void sub_1A396A1CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1A396A1E8(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1A396A234()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("create-voices-avspeech", 0);
  v1 = (void *)qword_1ED1B56D8;
  qword_1ED1B56D8 = (uint64_t)v0;

  dword_1EE6D4DF0 = 0;
}

void sub_1A396A26C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  void *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  int isNeuralSiriVoiceIdentifier;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  int isSiriVoiceIdentifier;
  char v56;
  int v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  char isEqualToString;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  int isPersonalVoiceIdentifier;
  void *v68;
  _BOOL4 v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  const char *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  id v109;
  id v110;
  __int128 v111;
  id v112;
  id v113;
  id obj;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t);
  void *v122;
  uint64_t *v123;
  char v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  char v128;
  uint8_t buf[4];
  void *v130;
  _BYTE v131[128];
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  byte_1EE6D4E2D = 1;
  v125 = 0;
  v126 = &v125;
  v127 = 0x2020000000;
  v128 = 0;
  v119 = MEMORY[0x1E0C809B0];
  v120 = 3221225472;
  v121 = sub_1A396A7F4;
  v122 = &unk_1E4A9FBC0;
  v124 = *(_BYTE *)(a1 + 32);
  v123 = &v125;
  AX_PERFORM_WITH_LOCK();
  if (*((_BYTE *)v126 + 24))
  {
    v113 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v112 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend_availableVoices(TTSSpeechManager, v2, v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)objc_msgSend_mutableCopy(v6, v7, v8, v9, v10);

    if (*(_BYTE *)(a1 + 32))
    {
      objc_msgSend_sharedInstance(TTSAXResourceManager, v12, v13, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_resourcesWithType_subType_(v16, v17, 3, 1, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ax_flatMappedArrayUsingBlock_(v19, v20, (uint64_t)&unk_1E4AA0118, v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_avSpeechVoicesForTTSAXResources_(TTSSpeechManager, v24, (uint64_t)v23, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObjectsFromArray_(v11, v28, (uint64_t)v27, v29, v30);

    }
    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    v116 = 0u;
    obj = v11;
    v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v31, (uint64_t)&v115, (uint64_t)v131, 16);
    if (v36)
    {
      v38 = *(_QWORD *)v116;
      v39 = *MEMORY[0x1E0C89990];
      *(_QWORD *)&v37 = 138412290;
      v111 = v37;
      do
      {
        for (i = 0; i != v36; ++i)
        {
          if (*(_QWORD *)v116 != v38)
            objc_enumerationMutation(obj);
          v41 = *(void **)(*((_QWORD *)&v115 + 1) + 8 * i);
          objc_msgSend_identifier(v41, v32, v33, v34, v35, v111);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          isNeuralSiriVoiceIdentifier = objc_msgSend_isNeuralSiriVoiceIdentifier_(TTSAlternativeVoices, v43, (uint64_t)v42, v44, v45);

          objc_msgSend_identifier(v41, v47, v48, v49, v50);
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          isSiriVoiceIdentifier = objc_msgSend_isSiriVoiceIdentifier_(TTSAlternativeVoices, v52, (uint64_t)v51, v53, v54);

          if (*(_BYTE *)(a1 + 32))
            v56 = 0;
          else
            v56 = isSiriVoiceIdentifier;
          if ((v56 & 1) == 0)
          {
            if (!isSiriVoiceIdentifier
              || (!*(_BYTE *)(a1 + 33) ? (v57 = 1) : (v57 = isNeuralSiriVoiceIdentifier), v57 == 1))
            {
              objc_msgSend_identifier(v41, v32, v33, v34, v35);
              v58 = (void *)objc_claimAutoreleasedReturnValue();
              isEqualToString = objc_msgSend_isEqualToString_(v58, v59, v39, v60, v61);

              if ((isEqualToString & 1) == 0)
              {
                objc_msgSend_identifier(v41, v32, v33, v34, v35);
                v63 = (void *)objc_claimAutoreleasedReturnValue();
                isPersonalVoiceIdentifier = objc_msgSend_isPersonalVoiceIdentifier_(TTSAlternativeVoices, v64, (uint64_t)v63, v65, v66);

                if (!isPersonalVoiceIdentifier
                  || objc_msgSend__supportsSpeakingWithPersonalVoices(MEMORY[0x1E0C89B90], v32, v33, v34, v35)&& (objc_msgSend_personalVoiceAuthorizationStatus(MEMORY[0x1E0C89B90], v32, v33, v34, v35) == 3|| TTSIsPersonalVoicePrivilagedProcess()))
                {
                  objc_msgSend_identifier(v41, v32, v33, v34, v35);
                  v68 = (void *)objc_claimAutoreleasedReturnValue();
                  v69 = v68 == 0;

                  if (v69)
                  {
                    AXLogSpeechSynthesis();
                    v77 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = v111;
                      v130 = v41;
                      _os_log_error_impl(&dword_1A3940000, v77, OS_LOG_TYPE_ERROR, "No identifier for voice, %@", buf, 0xCu);
                    }
                  }
                  else
                  {
                    objc_msgSend_addObject_(v113, v70, (uint64_t)v41, v71, v72);
                    objc_msgSend_identifier(v41, v73, v74, v75, v76);
                    v77 = objc_claimAutoreleasedReturnValue();
                    objc_msgSend_setObject_forKeyedSubscript_(v112, v78, (uint64_t)v41, (uint64_t)v77, v79);
                  }

                }
              }
            }
          }
        }
        v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v32, (uint64_t)&v115, (uint64_t)v131, 16);
      }
      while (v36);
    }

    _TTSSortAVSpeechSynthesisVoices(v113);
    objc_msgSend_sharedInstance(TTSAXResourceManager, v80, v81, v82, v83);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_resourceWithVoiceId_(v84, v85, (uint64_t)CFSTR("com.apple.speech.synthesis.voice.Alex"), v86, v87);
    v88 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend_isInstalled(v88, v89, v90, v91, v92))
    {
      objc_msgSend_speechVoice(v88, v93, v94, v95, v96);
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      AXAVSpeechSynthesisVoiceFromTTSAXResource(v97);
      v98 = (void *)objc_claimAutoreleasedReturnValue();

      if (v98)
      {
        objc_msgSend_addObject_(v113, v99, (uint64_t)v98, v100, v101);
        objc_msgSend_identifier(v98, v102, v103, v104, v105);
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v112, v107, (uint64_t)v98, (uint64_t)v106, v108);

      }
    }
    v109 = v113;
    v110 = v112;
    AX_PERFORM_WITH_LOCK();
    if (qword_1ED1B56C0 != -1)
      dispatch_once(&qword_1ED1B56C0, &unk_1E4AA0160);

  }
  byte_1EE6D4E2D = 0;
  _Block_object_dispose(&v125, 8);
}

void sub_1A396A7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A396A7F4(uint64_t result)
{
  BOOL v1;

  if (!qword_1ED1B56D0 && !*(_BYTE *)(result + 40)
    || !qword_1EE6D4DD8 && *(_BYTE *)(result + 40)
    || (qword_1ED1B56C8 ? (v1 = qword_1EE6D4DE8 == 0) : (v1 = 1), v1))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

id sub_1A396A850(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = a2;
  if (objc_msgSend_isInstalled(v2, v3, v4, v5, v6))
  {
    objc_msgSend_speechVoice(v2, v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_1A396A898(uint64_t a1)
{
  int v2;
  id v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  id v7;
  void *v8;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = *(id *)(a1 + 32);
  v4 = &qword_1EE6D4DD8;
  if (v2)
  {
    v5 = &qword_1EE6D4DE8;
  }
  else
  {
    v4 = &qword_1ED1B56D0;
    v5 = &qword_1ED1B56C8;
  }
  v6 = (void *)*v4;
  *v4 = (uint64_t)v3;

  v7 = *(id *)(a1 + 40);
  v8 = (void *)*v5;
  *v5 = (uint64_t)v7;

}

void sub_1A396A908()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)sub_1A396A93C, (CFStringRef)*MEMORY[0x1E0DDE358], 0, CFNotificationSuspensionBehaviorDrop);
}

uint64_t sub_1A396A93C()
{
  return AX_PERFORM_WITH_LOCK();
}

void sub_1A396A950(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  if (*(_BYTE *)(a1 + 40))
    v6 = objc_msgSend_copy((void *)qword_1EE6D4DD8, a2, a3, a4, a5);
  else
    v6 = objc_msgSend_copy((void *)qword_1ED1B56D0, a2, a3, a4, a5);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

id sub_1A396A99C()
{
  return (id)qword_1ED1B56D0;
}

void sub_1A396A9A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  id v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  void *v34;
  id v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v8 = (void *)objc_msgSend_mutableCopy(v3, v4, v5, v6, v7);
  _TTSSortAVSpeechSynthesisVoices(v8);
  v31 = MEMORY[0x1E0C809B0];
  v32 = 3221225472;
  v33 = sub_1A396AB88;
  v34 = &unk_1E4A9FAD0;
  v9 = v8;
  v35 = v9;
  AX_PERFORM_WITH_LOCK();
  if (v3)
    v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v10 = 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v11 = v3;
  v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v27, (uint64_t)v36, 16);
  if (v13)
  {
    v18 = v13;
    v19 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v28 != v19)
          objc_enumerationMutation(v11);
        v21 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        objc_msgSend_identifier(v21, v14, v15, v16, v17);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v10, v23, (uint64_t)v21, (uint64_t)v22, v24);

      }
      v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v14, (uint64_t)&v27, (uint64_t)v36, 16);
    }
    while (v18);
  }

  v26 = v10;
  v25 = v10;
  AX_PERFORM_WITH_LOCK();

}

void sub_1A396AB88(uint64_t a1)
{
  objc_storeStrong((id *)&qword_1ED1B56D0, *(id *)(a1 + 32));
}

void sub_1A396AB98(uint64_t a1)
{
  objc_storeStrong((id *)&qword_1ED1B56C8, *(id *)(a1 + 32));
}

void sub_1A396ABA8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  id v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  void *v34;
  id v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v8 = (void *)objc_msgSend_mutableCopy(v3, v4, v5, v6, v7);
  _TTSSortAVSpeechSynthesisVoices(v8);
  v31 = MEMORY[0x1E0C809B0];
  v32 = 3221225472;
  v33 = sub_1A396AD88;
  v34 = &unk_1E4A9FAD0;
  v9 = v8;
  v35 = v9;
  AX_PERFORM_WITH_LOCK();
  if (v3)
    v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v10 = 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v11 = v3;
  v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v27, (uint64_t)v36, 16);
  if (v13)
  {
    v18 = v13;
    v19 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v28 != v19)
          objc_enumerationMutation(v11);
        v21 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        objc_msgSend_identifier(v21, v14, v15, v16, v17);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v10, v23, (uint64_t)v21, (uint64_t)v22, v24);

      }
      v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v14, (uint64_t)&v27, (uint64_t)v36, 16);
    }
    while (v18);
  }

  v26 = v10;
  v25 = v10;
  AX_PERFORM_WITH_LOCK();

}

void sub_1A396AD88(uint64_t a1)
{
  objc_storeStrong((id *)&qword_1EE6D4DD8, *(id *)(a1 + 32));
}

void sub_1A396AD98(uint64_t a1)
{
  objc_storeStrong((id *)&qword_1EE6D4DE8, *(id *)(a1 + 32));
}

BOOL sub_1A396ADA8(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  _BOOL8 v6;

  objc_msgSend_synthesisProviderVoice(a1, a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5 != 0;

  return v6;
}

id sub_1A396ADDC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int isInstalled;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int canBeDownloaded;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  __CFString *v32;
  void *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const __CFString *v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  void *v63;

  v60 = 0;
  v61 = &v60;
  v62 = 0x2020000000;
  v6 = off_1EE6D5690;
  v63 = off_1EE6D5690;
  if (!off_1EE6D5690)
  {
    v7 = (void *)sub_1A396BFA4((uint64_t)a1, a2, a3, a4, a5);
    v6 = dlsym(v7, "AXIsInternalInstall");
    v61[3] = (uint64_t)v6;
    off_1EE6D5690 = v6;
  }
  _Block_object_dispose(&v60, 8);
  if (!v6)
    sub_1A3AB0AFC(v8, v9, v10, v11, v12);
  if (((unsigned int (*)(void))v6)())
  {
    v17 = (void *)MEMORY[0x1E0CB3940];
    isInstalled = objc_msgSend_isInstalled(a1, v13, v14, v15, v16);
    v23 = objc_msgSend_assetSize(a1, v19, v20, v21, v22);
    canBeDownloaded = objc_msgSend_canBeDownloaded(a1, v24, v25, v26, v27);
    objc_msgSend_stringWithFormat_(v17, v29, (uint64_t)CFSTR(" (Installed: %d, Size: %d, Can be downloaded: %d)"), v30, v31, isInstalled, v23, canBeDownloaded);
    v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v32 = &stru_1E4AA5CE8;
  }
  v33 = (void *)MEMORY[0x1E0CB3940];
  v34 = objc_opt_class();
  objc_msgSend_language(a1, v35, v36, v37, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_name(a1, v40, v41, v42, v43);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_quality(a1, v45, v46, v47, v48) == 1)
  {
    v53 = CFSTR("Default");
  }
  else if (objc_msgSend_quality(a1, v49, v50, v51, v52) == 2)
  {
    v53 = CFSTR("Enhanced");
  }
  else
  {
    v53 = CFSTR("Premium");
  }
  objc_msgSend_identifier(a1, v49, v50, v51, v52);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v33, v55, (uint64_t)CFSTR("[%@ %p] Language: %@, Name: %@, Quality: %@ [%@]%@"), v56, v57, v34, a1, v39, v44, v53, v54, v32);
  v58 = (void *)objc_claimAutoreleasedReturnValue();

  return v58;
}

void sub_1A396AF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A396AFA8(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D5678, v6, (void *)1);

}

uint64_t sub_1A396AFFC(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_getAssociatedObject(a1, &unk_1EE6D5678);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_integerValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A396B038(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D5679, a3, (void *)1);
}

id sub_1A396B048(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5679);
}

uint64_t sub_1A396B054(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t isSystemVoice;

  objc_msgSend_identifier(a1, a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  isSystemVoice = objc_msgSend_isSystemVoice_(TTSSpeechSynthesizer, v6, (uint64_t)v5, v7, v8);

  return isSystemVoice;
}

void sub_1A396B098(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D567A, a3, (void *)1);
}

id sub_1A396B0A8(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D567A);
}

id sub_1A396B0B4(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int isSiriVoiceIdentifier;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  objc_msgSend_identifier(a1, a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  isSiriVoiceIdentifier = objc_msgSend_isSiriVoiceIdentifier_(TTSAlternativeVoices, v7, (uint64_t)v6, v8, v9);

  if (isSiriVoiceIdentifier)
  {
    objc_msgSend_identifier(a1, v11, v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_nameForVoiceIdentifier_(TTSAlternativeVoices, v16, (uint64_t)v15, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend_nonLocalizedNameWithoutQuality(a1, v11, v12, v13, v14);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v24)
    {
      objc_msgSend_backupName(a1, v20, v21, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v24)
      {
        AXLogSpeechAssetDownload();
        v25 = (char *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_ERROR))
          sub_1A3AB0B70(a1, v25, v26, v27, v28);

        v24 = 0;
      }
    }
    objc_msgSend_localizedName_forLanguage_(TTSSpeechVoice, v20, (uint64_t)v24, 0, v23);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v19)
    {
      objc_msgSend_identifier(a1, v29, v30, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_voiceForIdentifier_(TTSSpeechSynthesizer, v34, (uint64_t)v33, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v37, v38, v39, v40, v41);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  return v19;
}

void sub_1A396B1F4(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D567B, v6, (void *)1);

}

uint64_t sub_1A396B248(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_getAssociatedObject(a1, &unk_1EE6D567B);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_unsignedIntegerValue(v1, v2, v3, v4, v5);

  return v6;
}

id sub_1A396B284(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  int isEqualToString;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  int isSiriVoiceIdentifier;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  objc_msgSend_nonLocalizedNameWithoutQuality(a1, a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_identifier(a1, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v11, v12, *MEMORY[0x1E0C89990], v13, v14);

  if (isEqualToString)
    goto LABEL_12;
  objc_msgSend_identifier(a1, v16, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  isSiriVoiceIdentifier = objc_msgSend_isSiriVoiceIdentifier_(TTSAlternativeVoices, v21, (uint64_t)v20, v22, v23);

  if (!isSiriVoiceIdentifier)
  {
    if (!objc_msgSend_isSynthesisProviderVoice(a1, v25, v26, v27, v28))
    {
      if (objc_msgSend_quality(a1, v34, v35, v36, v37) != 2)
      {
        if (objc_msgSend_quality(a1, v38, v39, v40, v41) != 3
          || (objc_msgSend_containsString_(v6, v45, (uint64_t)CFSTR("Premium"), v46, v47) & 1) != 0)
        {
          goto LABEL_12;
        }
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v48, (uint64_t)CFSTR("%@ (Premium)"), v49, v50, v6);
        goto LABEL_11;
      }
      if ((objc_msgSend_containsString_(v6, v38, (uint64_t)CFSTR("Enhanced"), v40, v41) & 1) == 0)
      {
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v42, (uint64_t)CFSTR("%@ (Enhanced)"), v43, v44, v6);
LABEL_11:
        v51 = objc_claimAutoreleasedReturnValue();

        v6 = (void *)v51;
      }
    }
LABEL_12:
    v33 = v6;
    v6 = v33;
    goto LABEL_13;
  }
  objc_msgSend_identifier(a1, v25, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_nameForVoiceIdentifier_(TTSAlternativeVoices, v30, (uint64_t)v29, v31, v32);
  v33 = (id)objc_claimAutoreleasedReturnValue();

LABEL_13:
  return v33;
}

void sub_1A396B3EC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  objc_msgSend_numberWithLongLong_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D567C, v6, (void *)1);

}

uint64_t sub_1A396B440(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_getAssociatedObject(a1, &unk_1EE6D567C);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_unsignedIntegerValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A396B47C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D567D, v6, (void *)1);

}

uint64_t sub_1A396B4D0(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_getAssociatedObject(a1, &unk_1EE6D567D);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A396B50C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D567E, v6, (void *)1);

}

uint64_t sub_1A396B560(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_getAssociatedObject(a1, &unk_1EE6D567E);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A396B59C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D567F, v6, (void *)1);

}

uint64_t sub_1A396B5F0(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_getAssociatedObject(a1, &unk_1EE6D567F);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A396B62C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D5680, v6, (void *)1);

}

uint64_t sub_1A396B680(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_getAssociatedObject(a1, &unk_1EE6D5680);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A396B6BC(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D5681, a3, (void *)1);
}

id sub_1A396B6CC(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5681);
}

BOOL sub_1A396B6D8(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;

  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = v4;
    objc_msgSend_identifier(a1, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_identifier(v5, v11, v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqualToString_(v10, v16, (uint64_t)v15, v17, v18))
    {
      v23 = objc_msgSend_quality(a1, v19, v20, v21, v22);
      v28 = v23 == objc_msgSend_quality(v5, v24, v25, v26, v27);
    }
    else
    {
      v28 = 0;
    }

  }
  else
  {
    v28 = 0;
  }

  return v28;
}

void sub_1A396B7A0(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D5682, a3, (void *)1);
}

id sub_1A396B7B0(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5682);
}

id sub_1A396B7BC(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  dispatch_semaphore_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  id v17;
  const char *v18;
  uint64_t v19;
  _QWORD v21[4];
  NSObject *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v4 = a3;
  if (TTSUseCoreSynthesizerForAV())
  {
    v24 = 0;
    v25 = &v24;
    v26 = 0x3032000000;
    v27 = sub_1A3968A10;
    v28 = sub_1A3968A20;
    v29 = 0;
    v8 = dispatch_semaphore_create(0);
    objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v9, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = sub_1A396B928;
    v21[3] = &unk_1E4A9FFE8;
    v23 = &v24;
    v14 = v8;
    v22 = v14;
    objc_msgSend_voiceWithIdentifier_completionHandler_(v13, v15, (uint64_t)v4, (uint64_t)v21, v16);

    dispatch_semaphore_wait(v14, 0xFFFFFFFFFFFFFFFFLL);
    v17 = (id)v25[5];

    _Block_object_dispose(&v24, 8);
  }
  else if ((objc_msgSend_isSiriVoiceIdentifier_(TTSAlternativeVoices, v5, (uint64_t)v4, v6, v7) & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    objc_msgSend__voiceWithIdentifier_includingSiri_(a1, v18, (uint64_t)v4, 0, v19);
    v17 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v17;
}

void sub_1A396B910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A396B928(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

id sub_1A396B974(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = (objc_class *)MEMORY[0x1E0C89B80];
  v4 = a3;
  v5 = [v3 alloc];
  v9 = (void *)objc_msgSend_initWithLanguage_(v5, v6, (uint64_t)v4, v7, v8);

  return v9;
}

id sub_1A396B9B8(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  dispatch_semaphore_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD v17[4];
  NSObject *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  if (TTSUseCoreSynthesizerForAV())
  {
    v20 = 0;
    v21 = &v20;
    v22 = 0x3032000000;
    v23 = sub_1A3968A10;
    v24 = sub_1A3968A20;
    v25 = 0;
    v5 = dispatch_semaphore_create(0);
    objc_msgSend_shared(_TtC12TextToSpeech22CoreSynthesisVoiceShim, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = sub_1A396BAF4;
    v17[3] = &unk_1E4AA00B8;
    v19 = &v20;
    v11 = v5;
    v18 = v11;
    objc_msgSend_publicVoicesWithCompletionHandler_(v10, v12, (uint64_t)v17, v13, v14);

    dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
    v15 = (id)v21[5];

    _Block_object_dispose(&v20, 8);
    return v15;
  }
  else
  {
    objc_msgSend__speechVoicesIncludingSiri_(a1, v2, 0, v3, v4);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void sub_1A396BADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A396BAF4(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

id sub_1A396BB40(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  objc_super v92;

  v4 = a3;
  v92.receiver = a1;
  v92.super_class = (Class)&off_1EE6F72B0;
  v5 = objc_msgSendSuper2(&v92, sel_init);
  if (v5)
  {
    v6 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v7, v6, (uint64_t)CFSTR("language"), v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setLanguage_(v5, v10, (uint64_t)v9, v11, v12);

    v13 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v14, v13, (uint64_t)CFSTR("identifier"), v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setIdentifier_(v5, v17, (uint64_t)v16, v18, v19);

    v20 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v21, v20, (uint64_t)CFSTR("nonLocalizedNameWithoutQuality"), v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setNonLocalizedNameWithoutQuality_(v5, v24, (uint64_t)v23, v25, v26);

    v27 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v28, v27, (uint64_t)CFSTR("nameWithoutQuality"), v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBackupName_(v5, v31, (uint64_t)v30, v32, v33);

    v37 = objc_msgSend_decodeIntegerForKey_(v4, v34, (uint64_t)CFSTR("quality"), v35, v36);
    objc_msgSend_setQuality_(v5, v38, v37, v39, v40);
    v44 = objc_msgSend_decodeInt64ForKey_(v4, v41, (uint64_t)CFSTR("assetSize"), v42, v43);
    objc_msgSend_setAssetSize_(v5, v45, v44, v46, v47);
    v51 = objc_msgSend_decodeBoolForKey_(v4, v48, (uint64_t)CFSTR("default"), v49, v50);
    objc_msgSend_setIsDefault_(v5, v52, v51, v53, v54);
    v58 = objc_msgSend_decodeBoolForKey_(v4, v55, (uint64_t)CFSTR("canBeDownloaded"), v56, v57);
    objc_msgSend_setCanBeDownloaded_(v5, v59, v58, v60, v61);
    v65 = objc_msgSend_decodeBoolForKey_(v4, v62, (uint64_t)CFSTR("installed"), v63, v64);
    objc_msgSend_setIsInstalled_(v5, v66, v65, v67, v68);
    v72 = objc_msgSend_decodeIntegerForKey_(v4, v69, (uint64_t)CFSTR("gender"), v70, v71);
    objc_msgSend_setGender_(v5, v73, v72, v74, v75);
    v76 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v77, v76, (uint64_t)CFSTR("synthesisProviderVoice"), v78);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSynthesisProviderVoice_(v5, v80, (uint64_t)v79, v81, v82);

    v86 = objc_msgSend_decodeBoolForKey_(v4, v83, (uint64_t)CFSTR("isNoveltyVoice"), v84, v85);
    objc_msgSend_setIsNoveltyVoice_(v5, v87, v86, v88, v89);
    v90 = v5;
  }

  return v5;
}

void sub_1A396BD78(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t isInstalled;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t canBeDownloaded;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t isDefault;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t isNoveltyVoice;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  id v81;

  v4 = a3;
  objc_msgSend_language(a1, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v10, (uint64_t)v9, (uint64_t)CFSTR("language"), v11);

  objc_msgSend_identifier(a1, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v17, (uint64_t)v16, (uint64_t)CFSTR("identifier"), v18);

  objc_msgSend_nonLocalizedNameWithoutQuality(a1, v19, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v24, (uint64_t)v23, (uint64_t)CFSTR("nonLocalizedNameWithoutQuality"), v25);

  v30 = objc_msgSend_quality(a1, v26, v27, v28, v29);
  objc_msgSend_encodeInteger_forKey_(v4, v31, v30, (uint64_t)CFSTR("quality"), v32);
  isInstalled = objc_msgSend_isInstalled(a1, v33, v34, v35, v36);
  objc_msgSend_encodeBool_forKey_(v4, v38, isInstalled, (uint64_t)CFSTR("installed"), v39);
  canBeDownloaded = objc_msgSend_canBeDownloaded(a1, v40, v41, v42, v43);
  objc_msgSend_encodeBool_forKey_(v4, v45, canBeDownloaded, (uint64_t)CFSTR("canBeDownloaded"), v46);
  isDefault = objc_msgSend_isDefault(a1, v47, v48, v49, v50);
  objc_msgSend_encodeBool_forKey_(v4, v52, isDefault, (uint64_t)CFSTR("default"), v53);
  isNoveltyVoice = objc_msgSend_isNoveltyVoice(a1, v54, v55, v56, v57);
  objc_msgSend_encodeBool_forKey_(v4, v59, isNoveltyVoice, (uint64_t)CFSTR("isNoveltyVoice"), v60);
  v65 = objc_msgSend_assetSize(a1, v61, v62, v63, v64);
  objc_msgSend_encodeInt64_forKey_(v4, v66, v65, (uint64_t)CFSTR("assetSize"), v67);
  v72 = objc_msgSend_gender(a1, v68, v69, v70, v71);
  objc_msgSend_encodeInteger_forKey_(v4, v73, v72, (uint64_t)CFSTR("gender"), v74);
  objc_msgSend_synthesisProviderVoice(a1, v75, v76, v77, v78);
  v81 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v79, (uint64_t)v81, (uint64_t)CFSTR("synthesisProviderVoice"), v80);

}

uint64_t sub_1A396BF14(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = qword_1ED1B56C8 == 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = qword_1EE6D4DE8 == 0;
  return result;
}

Class sub_1A396BF50(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Class result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1A396BFA4(a1, a2, a3, a4, a5);
  result = objc_getClass("AXSettings");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1A3AB0C04((uint64_t)result, v7, v8, v9, v10);
  qword_1ED1B5690 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A396BFA4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  if (!qword_1ED1B5658)
  {
    v7 = xmmword_1E4AA01C8;
    v8 = 0;
    qword_1ED1B5658 = _sl_dlopen();
  }
  if (!qword_1ED1B5658)
    sub_1A3AB0C7C(&v6, a2, a3, a4, a5);
  return qword_1ED1B5658;
}

void sub_1A396C04C()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  v0 = (void *)qword_1ED1B56C8;
  qword_1ED1B56C8 = 0;

  v1 = (void *)qword_1EE6D4DE8;
  qword_1EE6D4DE8 = 0;

  v2 = (void *)qword_1ED1B56D0;
  qword_1ED1B56D0 = 0;

  v3 = (void *)qword_1EE6D4DD8;
  qword_1EE6D4DD8 = 0;

}

ausdk::AUOutputElement *ausdk::AUOutputElement::AUOutputElement(ausdk::AUOutputElement *this, ausdk::AUBase *a2)
{
  ausdk::AUIOElement *v3;

  v3 = ausdk::AUIOElement::AUIOElement(this, a2);
  *(_QWORD *)v3 = &off_1E4A9CA58;
  ausdk::AUIOElement::AllocateBuffer((uint64_t)v3, 0);
  return this;
}

void sub_1A396C0D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1A396C0E4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A396C0E4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E4A9C6B0;
  ausdk::AUBufferList::Deallocate(a1 + 18);
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  return sub_1A396C2C0((uint64_t)a1);
}

ausdk::AUOutputElement *ausdk::AUOutputElement::AUOutputElement(ausdk::AUOutputElement *this, ausdk::AUBase *a2, const AudioStreamBasicDescription *a3)
{
  ausdk::AUIOElement *v5;
  __int128 v6;
  __int128 v7;

  v5 = ausdk::AUIOElement::AUIOElement(this, a2);
  v6 = *(_OWORD *)&a3->mSampleRate;
  v7 = *(_OWORD *)&a3->mBytesPerPacket;
  *((_QWORD *)v5 + 14) = *(_QWORD *)&a3->mBitsPerChannel;
  *((_OWORD *)v5 + 5) = v6;
  *((_OWORD *)v5 + 6) = v7;
  *(_QWORD *)v5 = &off_1E4A9CA58;
  ausdk::AUIOElement::AllocateBuffer((uint64_t)v5, 0);
  return this;
}

void sub_1A396C17C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1A396C0E4(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AUOutputElement::SetStreamFormat(ausdk::AUOutputElement *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v3;

  v3 = ausdk::AUIOElement::SetStreamFormat(this, a2);
  if (!(_DWORD)v3)
    (*(void (**)(ausdk::AUOutputElement *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
  return v3;
}

uint64_t sub_1A396C1D4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E4A9C6B0;
  ausdk::AUBufferList::Deallocate(a1 + 18);
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  return sub_1A396C2C0((uint64_t)a1);
}

void sub_1A396C21C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E4A9C6B0;
  ausdk::AUBufferList::Deallocate(a1 + 18);
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  sub_1A396C2C0((uint64_t)a1);
  JUMPOUT(0x1A8596C28);
}

uint64_t sub_1A396C278(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v1 = 56;
  if (!*(_BYTE *)(a1 + 40))
    v1 = 24;
  v2 = 48;
  if (!*(_BYTE *)(a1 + 40))
    v2 = 16;
  v3 = 2;
  v4 = *(_QWORD *)(a1 + v1);
  if (!*(_BYTE *)(a1 + 40))
    v3 = 3;
  return (v4 - *(_QWORD *)(a1 + v2)) >> v3;
}

uint64_t sub_1A396C2B8()
{
  return 1;
}

uint64_t sub_1A396C2C0(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &unk_1E4A9D398;
  sub_1A396C314((const void **)(a1 + 72));
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1A396C314(const void **a1)
{
  const void *v1;

  v1 = *a1;
  if (v1)
    CFRelease(v1);
}

uint64_t sub_1A396CAC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5);
}

void LogError(const char *a1, ...)
{
  va_list va;

  va_start(va, a1);
  vsyslog(3, a1, va);
}

void LogWarning(const char *a1, ...)
{
  va_list va;

  va_start(va, a1);
  vsyslog(4, a1, va);
}

id sub_1A396CF2C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *i;
  int data_block;
  const char *v7;
  uint64_t v8;
  NSObject *v9;

  objc_msgSend_data(MEMORY[0x1E0C99DF0], a2, a3, a4, a5);
  for (i = (void *)objc_claimAutoreleasedReturnValue(); ; objc_msgSend_appendBytes_length_(i, v7, 0, 0, v8))
  {
    data_block = archive_read_data_block();
    if (data_block)
      break;
  }
  if (data_block != 1)
  {
    AXTTSLogCommon();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1A3AB1004();

  }
  return i;
}

void sub_1A396D2CC()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)qword_1EE6D56A0;
  qword_1EE6D56A0 = v0;

}

void sub_1A396D5F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A396DDB8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;

  objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], a2, (uint64_t)&unk_1E4ABC6A8, a4, a5);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)qword_1EE6D56A8;
  qword_1EE6D56A8 = v5;

}

uint64_t sub_1A396E10C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = *(void **)(a1 + 32);
  v7 = a3;
  v11 = objc_msgSend_indexOfObject_(v6, v8, a2, v9, v10);
  objc_msgSend_numberWithUnsignedInteger_(v5, v12, v11, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)MEMORY[0x1E0CB37E8];
  v20 = objc_msgSend_indexOfObject_(*(void **)(a1 + 32), v17, (uint64_t)v7, v18, v19);

  objc_msgSend_numberWithUnsignedInteger_(v16, v21, v20, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend_compare_(v15, v25, (uint64_t)v24, v26, v27);

  return v28;
}

uint64_t sub_1A396E2FC()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  byte_1EE6D56B8 = result;
  return result;
}

void ausdk::AUMIDIEffectBase::AUMIDIEffectBase(ausdk::AUMIDIEffectBase *this, OpaqueAudioComponentInstance *a2, char a3)
{
  _QWORD *v3;

  ausdk::AUEffectBase::AUEffectBase(this, a2, a3);
  v3[75] = v3;
  *v3 = off_1E4A9CE28;
  v3[74] = &unk_1E4A9D090;
}

{
  _QWORD *v3;

  ausdk::AUEffectBase::AUEffectBase(this, a2, a3);
  v3[75] = v3;
  *v3 = off_1E4A9CE28;
  v3[74] = &unk_1E4A9D090;
}

uint64_t ausdk::AUMIDIEffectBase::GetPropertyInfo(ausdk::AUMIDIEffectBase *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  result = ausdk::AUEffectBase::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  if ((_DWORD)result == -10879)
    return ausdk::AUMIDIBase::DelegateGetPropertyInfo((ausdk::AUMIDIEffectBase *)((char *)this + 592), a2, a3, a4, a5, a6);
  return result;
}

uint64_t ausdk::AUMIDIEffectBase::GetProperty(ausdk::AUMIDIEffectBase *this, unsigned int a2, unsigned int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;

  result = ausdk::AUEffectBase::GetProperty(this, a2, a3, a4, a5);
  if ((_DWORD)result == -10879)
    return ausdk::AUMIDIBase::DelegateGetProperty((ausdk::AUMIDIEffectBase *)((char *)this + 592), a2, a3, a4, a5);
  return result;
}

uint64_t ausdk::AUMIDIEffectBase::SetProperty(ausdk::AUMIDIEffectBase *this, unsigned int a2, unsigned int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result;

  result = ausdk::AUEffectBase::SetProperty(this, a2, a3, a4, a5, a6);
  if ((_DWORD)result == -10879)
    return ausdk::AUMIDIBase::DelegateSetProperty((ausdk::AUMIDIEffectBase *)((char *)this + 592), a2, a3, a4, a5);
  return result;
}

void sub_1A396E918(void **a1)
{
  void **v2;

  *a1 = off_1E4A9C730;
  v2 = a1 + 66;
  sub_1A396EAFC(&v2);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)a1);
}

uint64_t sub_1A396E964(void **a1)
{
  void **v3;

  *a1 = off_1E4A9C730;
  v3 = a1 + 66;
  sub_1A396EAFC(&v3);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)a1);
  return MEMORY[0x1A8596C28]();
}

uint64_t sub_1A396E9C4()
{
  return 1;
}

uint64_t sub_1A396E9CC(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 592) + 64))(a1 + 592, a2 & 0xF0, a2 & 0xF, a3, a4, a5);
}

uint64_t sub_1A396EA00(uint64_t a1, const unsigned __int8 *a2)
{
  return ausdk::AUMIDIBase::SysEx((ausdk::AUMIDIBase *)(a1 + 592), a2);
}

void sub_1A396EA08(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1A396EA10(uint64_t result, char a2)
{
  *(_BYTE *)(result + 552) = a2;
  return result;
}

uint64_t sub_1A396EA18(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 552);
}

void sub_1A396EA20(uint64_t a1)
{
  ausdk::AUBase *v1;
  void **v2;

  v1 = (ausdk::AUBase *)(a1 - 592);
  *(_QWORD *)(a1 - 592) = off_1E4A9C730;
  v2 = (void **)(a1 - 64);
  sub_1A396EAFC(&v2);
  ausdk::AUBase::~AUBase(v1);
}

uint64_t sub_1A396EA6C(uint64_t a1)
{
  ausdk::AUBase *v1;
  void **v3;

  v1 = (ausdk::AUBase *)(a1 - 592);
  *(_QWORD *)(a1 - 592) = off_1E4A9C730;
  v3 = (void **)(a1 - 64);
  sub_1A396EAFC(&v3);
  ausdk::AUBase::~AUBase(v1);
  return MEMORY[0x1A8596C28]();
}

uint64_t sub_1A396EACC(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2 & 0xF0, a2 & 0xF, a3, a4, a5);
}

void sub_1A396EAFC(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

const __CFData *TTSCreateDecryptedDataFromEncryptedData(const __CFData *result)
{
  const __CFData *v1;
  const UInt8 *BytePtr;
  CFIndex Length;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  char v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  id v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  if (result)
  {
    v1 = result;
    BytePtr = CFDataGetBytePtr(result);
    Length = CFDataGetLength(v1);
    v4 = *((unsigned __int16 *)BytePtr + 76);
    v5 = Length - 154;
    v13 = (void *)objc_msgSend_data(MEMORY[0x1E0C99DF0], v6, v7, v8, v9);
    if (v5 >= 1 && v4)
    {
      v14 = 0;
      v15 = (unsigned __int16 *)(BytePtr + 154);
      do
      {
        v18 = *v15;
        v16 = v15 + 1;
        v17 = v18;
        v19 = v18;
        v20 = v16;
        if (v18)
        {
          do
          {
            v21 = *(_BYTE *)v20;
            v20 = (unsigned __int16 *)((char *)v20 + 1);
            v31 = v21 ^ 0xA9;
            objc_msgSend_appendBytes_length_(v13, v10, (uint64_t)&v31, 1, v12);
            --v19;
          }
          while (v19);
        }
        v15 = (unsigned __int16 *)((char *)v16 + v17);
        v5 = v5 - 2 - v17;
        v22 = objc_msgSend_dataUsingEncoding_(CFSTR("\n"), v10, 4, v11, v12);
        objc_msgSend_appendData_(v13, v23, v22, v24, v25);
        ++v14;
      }
      while (v5 >= 1 && v14 < v4);
    }
    v27 = objc_alloc(MEMORY[0x1E0C99D50]);
    return (const __CFData *)objc_msgSend_initWithData_(v27, v28, (uint64_t)v13, v29, v30);
  }
  return result;
}

id sub_1A396EC84(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  char v16;
  char v17;

  v17 = 0;
  v6 = objc_msgSend_length(a1, a2, a3, a4, a5);
  objc_msgSend_getBytes_range_(a1, v7, (uint64_t)&v17, v6 - 1, 1);
  if (!v17)
    return a1;
  v12 = (void *)objc_msgSend_mutableCopy(a1, v8, v9, v10, v11);
  v16 = 0;
  objc_msgSend_appendBytes_length_(v12, v13, (uint64_t)&v16, 1, v14);
  return v12;
}

id sub_1A396EFFC(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = objc_alloc(MEMORY[0x1E0C99D50]);
  return (id)objc_msgSend_initWithContentsOfURL_(v2, v3, *(_QWORD *)(a1 + 32), v4, v5);
}

BOOL sub_1A396F410(uint64_t a1, void *a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = a3;
  v9 = objc_msgSend_priority(a2, v5, v6, v7, v8);
  v14 = objc_msgSend_priority(v4, v10, v11, v12, v13);

  return v9 > v14;
}

void sub_1A396F6E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A396F708(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  const char *v7;

  v5 = *(void **)(a1 + 32);
  v6 = objc_msgSend_range(a2, (const char *)a2, a3, a4, a5);
  return objc_msgSend_transformRange_to_(v5, v7, v6, (uint64_t)v7, (uint64_t)&stru_1E4AA5CE8);
}

void sub_1A396F7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A3970420(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v5 = *(void **)(a1 + 32);
  v6 = (void *)MEMORY[0x1E0CB3B18];
  v7 = objc_msgSend_utf8Range(a2, (const char *)a2, a3, a4, a5);
  objc_msgSend_valueWithRange_(v6, v8, v7, (uint64_t)v8, v9);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v5, v10, (uint64_t)v13, v11, v12);

}

void sub_1A397047C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  const char *v45;
  _QWORD v46[4];
  id v47;
  id v48;
  id v49;
  _QWORD v50[2];

  v50[1] = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend_shouldAbort(*(void **)(a1 + 32), a2, a3, a4, a5) & 1) == 0)
  {
    v11 = (uint64_t)&a2[*(_QWORD *)(a1 + 64)];
    objc_msgSend_ruleReplacements(*(void **)(a1 + 32), v7, v8, v9, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v12, v13, v11, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v17 = (void *)MEMORY[0x1E0CB3B18];
    objc_msgSend_ruleset(v16, v18, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_valueWithPointer_(v17, v23, (uint64_t)v22, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v27, (uint64_t)v26, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = v30;
    if (v30)
    {
      v34 = v30;
    }
    else
    {
      objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v31, 0, *(_QWORD *)(a1 + 72), v32);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v50[0] = v35;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v36, (uint64_t)v50, 1, v37);
      v34 = (id)objc_claimAutoreleasedReturnValue();

    }
    objc_msgSend_regex(v16, v38, v39, v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = *(_QWORD *)(a1 + 80);
    v46[0] = MEMORY[0x1E0C809B0];
    v46[1] = 3221225472;
    v46[2] = sub_1A397064C;
    v46[3] = &unk_1E4AA0300;
    v47 = v16;
    v48 = *(id *)(a1 + 48);
    v49 = *(id *)(a1 + 56);
    v44 = v16;
    objc_msgSend_enumerateMatchesInCString_ranges_usingBlock_(v42, v45, v43, (uint64_t)v34, (uint64_t)v46);

  }
}

void sub_1A397064C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)(_QWORD, _QWORD, _QWORD);
  int v14;
  TTSMatchedRuleReplacement *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;

  v3 = a2;
  objc_msgSend_postMatch(*(void **)(a1 + 32), v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8
    || (objc_msgSend_postMatch(*(void **)(a1 + 32), v9, v10, v11, v12),
        v13 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(),
        v14 = ((uint64_t (**)(_QWORD, _QWORD, id))v13)[2](v13, *(_QWORD *)(a1 + 40), v3),
        v13,
        v14))
  {
    v15 = [TTSMatchedRuleReplacement alloc];
    v20 = (void *)objc_msgSend_init(v15, v16, v17, v18, v19);
    objc_msgSend_replacement(*(void **)(a1 + 32), v21, v22, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setReplacement_(v20, v26, (uint64_t)v25, v27, v28);

    objc_msgSend_setMatch_(v20, v29, (uint64_t)v3, v30, v31);
    objc_msgSend_setRuleReplacement_(v20, v32, *(_QWORD *)(a1 + 32), v33, v34);
    v36 = *(id *)(a1 + 48);
    v35 = v20;
    AX_PERFORM_WITH_LOCK();

  }
}

uint64_t sub_1A3970778(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4, a5);
}

uint64_t sub_1A3970784(uint64_t a1, void *a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a3;
  objc_msgSend_ruleReplacement(a2, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_effectiveIndex(v9, v10, v11, v12, v13);
  objc_msgSend_ruleReplacement(v4, v15, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14 < objc_msgSend_effectiveIndex(v19, v20, v21, v22, v23))
    v24 = -1;
  else
    v24 = 1;

  return v24;
}

uint64_t sub_1A39707FC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  objc_msgSend_ruleReplacement(a2, (const char *)a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_isTerminalRule(v5, v6, v7, v8, v9) ^ 1;

  return v10;
}

BOOL sub_1A3970834(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;

  objc_msgSend_ruleReplacement(a2, (const char *)a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_effectiveIndex(v6, v7, v8, v9, v10) == *(_QWORD *)(a1 + 32);

  return v11;
}

void sub_1A3970BEC(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  id v34;

  v3 = a2;
  if (v3)
  {
    v34 = v3;
    v7 = objc_msgSend_rangeWithName_(v3, v4, (uint64_t)CFSTR("num"), v5, v6);
    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v11 = objc_msgSend_rangeWithName_(v34, v8, (uint64_t)CFSTR("numbrack"), v9, v10);
      v3 = v34;
      if (v11 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_8;
    }
    else
    {
      v11 = v7;
    }
    objc_msgSend_substringWithRange_(*(void **)(a1 + 32), v8, v11, (uint64_t)v8, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend_intValue(v12, v13, v14, v15, v16);

    v3 = v34;
    if (v17)
    {
      objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v18, v17, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = *(void **)(a1 + 40);
      v23 = (void *)MEMORY[0x1E0CB3B18];
      v28 = objc_msgSend_range(v34, v24, v25, v26, v27);
      objc_msgSend_valueWithRange_(v23, v29, v28, (uint64_t)v29, v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v22, v32, (uint64_t)v21, (uint64_t)v31, v33);

      v3 = v34;
    }
  }
LABEL_8:

}

uint64_t sub_1A3970CEC(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = (void *)MEMORY[0x1E0CB37E8];
  v5 = a2;
  v10 = objc_msgSend_rangeValue(a3, v6, v7, v8, v9);
  objc_msgSend_numberWithUnsignedInteger_(v4, v11, v10, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)MEMORY[0x1E0CB37E8];
  v20 = objc_msgSend_rangeValue(v5, v16, v17, v18, v19);

  objc_msgSend_numberWithUnsignedInteger_(v15, v21, v20, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend_compare_(v14, v25, (uint64_t)v24, v26, v27);

  return v28;
}

void sub_1A3971000()
{
  id v0;
  void *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1 = (void *)qword_1EE6D56D0;
  qword_1EE6D56D0 = (uint64_t)v0;

  v2 = objc_alloc(MEMORY[0x1E0CB3740]);
  v7 = objc_msgSend_init(v2, v3, v4, v5, v6);
  v8 = (void *)qword_1EE6D56D8;
  qword_1EE6D56D8 = v7;

}

id _TTSLoadIPAToNativePhonemeMapForLanguage(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  BOOL v42;
  void *v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%@-%@"), a4, a5, a2, a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CB34D0];
  v7 = objc_opt_class();
  objc_msgSend_bundleForClass_(v6, v8, v7, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pathForResource_ofType_inDirectory_(v11, v12, (uint64_t)v5, (uint64_t)CFSTR("json"), (uint64_t)CFSTR("PhonemeMaps"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    v45 = v5;
    objc_msgSend_dataWithContentsOfFile_(MEMORY[0x1E0C99D50], v14, (uint64_t)v13, v15, v16);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_JSONObjectWithData_options_error_(MEMORY[0x1E0CB36D8], v17, (uint64_t)v44, 0, 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v19, v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v24 = v18;
    v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v46, (uint64_t)v50, 16);
    if (v26)
    {
      v30 = v26;
      v31 = *(_QWORD *)v47;
      do
      {
        for (i = 0; i != v30; ++i)
        {
          if (*(_QWORD *)v47 != v31)
            objc_enumerationMutation(v24);
          v33 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
          objc_msgSend_objectForKeyedSubscript_(v33, v27, (uint64_t)CFSTR("ipa"), v28, v29);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(v33, v35, (uint64_t)CFSTR("synthNative"), v36, v37);
          v38 = objc_claimAutoreleasedReturnValue();
          v41 = (void *)v38;
          if (v34)
            v42 = v38 == 0;
          else
            v42 = 1;
          if (!v42)
            objc_msgSend_setObject_forKeyedSubscript_(v23, v39, v38, (uint64_t)v34, v40);

        }
        v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v27, (uint64_t)&v46, (uint64_t)v50, 16);
      }
      while (v30);
    }

    v5 = v45;
  }
  else
  {
    v23 = 0;
  }

  return v23;
}

id sub_1A39717C4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFString *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  const __CFDictionary *Mutable;
  id v17;
  const char *v18;
  uint64_t v19;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  TTSFormatArgument *v25;
  int64_t v26;
  int64_t v27;
  UniChar *v28;
  int64_t v29;
  UniChar v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  int64_t v44;
  UniChar v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  TTSFormatArgument *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  CFIndex Count;
  CFIndex v72;
  uint64_t v73;
  id *p_isa;
  id *v75;
  id *v76;
  const __CFDictionary *v77;
  id v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t i;
  void *v84;
  const char *v85;
  uint64_t v86;
  const char *v87;
  _QWORD *v88;
  const char *v89;
  uint64_t v90;
  id v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *key;
  void *keya;
  int64_t v98;
  __CFDictionary *theDict;
  void *v100;
  void *v101;
  __CFString *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  UniChar buffer[8];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  CFStringRef theString;
  UniChar *v116;
  const char *v117;
  uint64_t v118;
  int64_t v119;
  int64_t v120;
  int64_t v121;
  id *v122;
  _BYTE v123[128];
  uint64_t v124;
  CFRange v125;
  CFRange v126;

  v124 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v122 = 0;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  *(_OWORD *)buffer = 0u;
  v108 = 0u;
  v14 = objc_msgSend_length(v9, v10, v11, v12, v13);
  v15 = objc_alloc_init(MEMORY[0x1E0CB3778]);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  v17 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v122 = (id *)&a9;
  theString = v9;
  v118 = 0;
  v119 = v14;
  CharactersPtr = CFStringGetCharactersPtr(v9);
  CStringPtr = 0;
  v116 = (UniChar *)CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(v9, 0x600u);
  v120 = 0;
  v121 = 0;
  v117 = CStringPtr;
  v22 = v14 - 1;
  v102 = v9;
  if (v14 < 1)
  {
    v101 = 0;
    v25 = 0;
    goto LABEL_66;
  }
  theDict = Mutable;
  v100 = v17;
  v23 = 0;
  key = 0;
  v24 = 0;
  v101 = 0;
  v25 = 0;
  do
  {
    v26 = v23 + 1;
    if (v23 < 0)
      goto LABEL_56;
    v27 = v119;
    if (v119 <= v23)
      goto LABEL_56;
    v28 = v116;
    if (v116)
    {
      v29 = v118 + v23;
LABEL_9:
      v30 = v28[v29];
      goto LABEL_12;
    }
    if (!v117)
    {
      if (v121 <= v23 || (v53 = v120, v120 > v23))
      {
        v54 = v23 - 4;
        if ((unint64_t)v23 < 4)
          v54 = 0;
        if (v54 + 64 < v119)
          v27 = v54 + 64;
        v120 = v54;
        v121 = v27;
        v126.location = v118 + v54;
        v55 = v24;
        v126.length = v27 - v54;
        CFStringGetCharacters(theString, v126, buffer);
        v24 = v55;
        v53 = v120;
      }
      v29 = v23 - v53;
      v28 = buffer;
      goto LABEL_9;
    }
    v30 = v117[v118 + v23];
LABEL_12:
    if (v30 != 37)
      goto LABEL_56;
    v31 = v23 - v24;
    if (v23 > v24)
    {
      v32 = v24;
      objc_msgSend_substringWithRange_(v9, v18, v24, v31, v19);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v100, v34, (uint64_t)v33, v35, v36);

      v24 = v32;
    }
    if (v26 >= v14)
      goto LABEL_56;
    v98 = v14;
    v37 = 0;
    v38 = 0;
    v39 = ~v23;
    v40 = v23 + 65;
    v41 = v23 + 1;
    while (1)
    {
      v42 = v23 + 1;
      if ((unint64_t)v26 >= 4)
        v43 = 4;
      else
        v43 = v26;
      if (v42 < 0)
        goto LABEL_44;
      v44 = v119;
      if (v119 <= v42)
        goto LABEL_44;
      if (v116)
      {
        v45 = v116[v23 + 1 + v118];
      }
      else if (v117)
      {
        v45 = v117[v118 + 1 + v23];
      }
      else
      {
        if (v121 <= v42 || (v46 = v120, v120 > v42))
        {
          v47 = -v43;
          v48 = v43 + v39;
          v49 = v40 - v43;
          v50 = v23 + v47;
          v94 = v41;
          v95 = v24;
          v51 = v50 + 65;
          if (v50 + 65 >= v119)
            v51 = v119;
          v120 = v50 + 1;
          v121 = v51;
          if (v119 >= v49)
            v44 = v49;
          v125.length = v44 + v48;
          v93 = v37;
          v125.location = v50 + v118 + 1;
          CFStringGetCharacters(theString, v125, buffer);
          v37 = v93;
          v41 = v94;
          v24 = v95;
          v46 = v120;
        }
        v45 = buffer[v23 + 1 - v46];
      }
      if (v45 == 37 && v42 == v41)
      {
        objc_msgSend_addObject_(v100, v18, (uint64_t)CFSTR("%"), v31, v19);
        v24 = v23 + 2;
        v26 = v23 + 2;
        v9 = v102;
        goto LABEL_55;
      }
      if ((unsigned __int16)(v45 - 48) <= 9u)
      {
        v38 = 10 * v38 + v45 - 48;
        goto LABEL_44;
      }
      if (v45 == 36)
      {
        v41 = v23 + 2;
        v37 = v38;
        goto LABEL_44;
      }
      if (v45 == 64)
        break;
LABEL_44:
      --v39;
      ++v40;
      ++v26;
      ++v23;
      if (v22 == v42)
      {
        v26 = v98;
        v9 = v102;
        goto LABEL_62;
      }
    }
    v56 = key + 1;
    if (v37)
      v57 = (char *)v37;
    else
      v57 = key + 1;
    keya = v57;
    v58 = v41;
    v59 = objc_alloc_init(TTSFormatArgument);

    v60 = v23 + 2;
    v9 = v102;
    objc_msgSend_substringWithRange_(v102, v61, v58, v60 - v58, v62);
    v63 = (void *)objc_claimAutoreleasedReturnValue();

    objc_storeStrong((id *)&v59->formatSpecifier, v63);
    CFDictionarySetValue(theDict, keya, v59);
    objc_msgSend_addObject_(v100, v64, (uint64_t)v59, v65, v66);
    v24 = v60;
    v25 = v59;
    v101 = v63;
    key = v56;
    v26 = v60;
LABEL_55:
    v14 = v98;
LABEL_56:
    v23 = v26;
  }
  while (v26 < v14);
LABEL_62:
  if (v26 <= v24)
  {
    Mutable = theDict;
    v17 = v100;
  }
  else
  {
    objc_msgSend_substringWithRange_(v9, v18, v24, v26 - v24, v19);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v100;
    objc_msgSend_addObject_(v100, v68, (uint64_t)v67, v69, v70);

    Mutable = theDict;
  }
LABEL_66:
  Count = CFDictionaryGetCount(Mutable);
  if (Count < 1)
  {
    p_isa = (id *)&v25->super.isa;
  }
  else
  {
    v72 = Count;
    v73 = 0;
    do
    {
      CFDictionaryGetValue(Mutable, (const void *)++v73);
      p_isa = (id *)objc_claimAutoreleasedReturnValue();

      if (p_isa)
      {
        v75 = v122++;
        objc_storeStrong(p_isa + 3, *v75);
        v76 = v122++;
        objc_storeStrong(p_isa + 2, *v76);
      }
      v25 = (TTSFormatArgument *)p_isa;
    }
    while (v72 != v73);
  }
  v77 = Mutable;
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v78 = v17;
  v80 = objc_msgSend_countByEnumeratingWithState_objects_count_(v78, v79, (uint64_t)&v103, (uint64_t)v123, 16);
  if (v80)
  {
    v81 = v80;
    v82 = *(_QWORD *)v104;
    do
    {
      for (i = 0; i != v81; ++i)
      {
        if (*(_QWORD *)v104 != v82)
          objc_enumerationMutation(v78);
        v84 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend_appendString_withAttributes_(v15, v85, (uint64_t)v84, 0, v86);
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v88 = v84;

            objc_msgSend_appendString_withAttributes_(v15, v89, v88[3], v88[2], v90);
            p_isa = (id *)v88;
          }
        }
      }
      v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v78, v87, (uint64_t)&v103, (uint64_t)v123, 16);
    }
    while (v81);
  }

  CFRelease(v77);
  v91 = v15;

  return v91;
}

void sub_1A3971E58(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  id v19;

  v19 = a4;
  v6 = a3;
  v11 = objc_msgSend_length(v6, v7, v8, v9, v10);
  v16 = objc_msgSend_length(a1, v12, v13, v14, v15);
  objc_msgSend_replaceCharactersInRange_withString_(a1, v17, v16, 0, (uint64_t)v6);

  objc_msgSend_setAttributes_range_(a1, v18, (uint64_t)v19, v16, v11);
}

uint64_t sub_1A3972224(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1A3972234(uint64_t a1)
{

}

void sub_1A3972250()
{
  void *v0;

  v0 = (void *)qword_1ED1B5C90;
  qword_1ED1B5C90 = 0;

}

void sub_1A3972288()
{
  unint64_t v0;
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  NSObject *v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  void *v53;
  __int128 v54;
  uint64_t v55;
  id v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint8_t buf[4];
  uint64_t v62;
  __int16 v63;
  void *v64;
  _BYTE v65[128];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v0 = 0x1E0CB3000uLL;
  v1 = (void *)MEMORY[0x1E0CB34D0];
  v2 = objc_opt_class();
  objc_msgSend_bundleForClass_(v1, v3, v2, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bundlePath(v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByDeletingLastPathComponent(v11, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1E4ABC6C0, v17, (uint64_t)&v57, (uint64_t)v65, 16);
  if (v18)
  {
    v23 = v18;
    v24 = *(_QWORD *)v58;
    *(_QWORD *)&v22 = 138412546;
    v54 = v22;
    do
    {
      v25 = 0;
      v55 = v23;
      do
      {
        if (*(_QWORD *)v58 != v24)
          objc_enumerationMutation(&unk_1E4ABC6C0);
        v26 = *(_QWORD *)(*((_QWORD *)&v57 + 1) + 8 * v25);
        objc_msgSend_stringByAppendingPathComponent_(v16, v19, v26, v20, v21, v54);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_bundleWithPath_(*(void **)(v0 + 1232), v28, (uint64_t)v27, v29, v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v56 = 0;
        objc_msgSend_loadAndReturnError_(v31, v32, (uint64_t)&v56, v33, v34);
        v39 = v56;
        if (v39)
        {
          AXTTSLogCommon();
          v40 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v62 = v26;
            _os_log_error_impl(&dword_1A3940000, v40, OS_LOG_TYPE_ERROR, "Failed to load first party audio unit from %@", buf, 0xCu);
          }

        }
        else
        {
          v41 = v24;
          v42 = v16;
          v43 = v0;
          v44 = (void *)objc_msgSend_principalClass(v31, v35, v36, v37, v38);
          if ((objc_msgSend_conformsToProtocol_(v44, v45, (uint64_t)&unk_1EE6FBAD0, v46, v47) & 1) != 0)
          {
            objc_msgSend_registerAudioUnit(v44, v48, v49, v50, v51);
          }
          else
          {
            AXTTSLogCommon();
            v52 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
            {
              NSStringFromClass((Class)v44);
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v54;
              v62 = v26;
              v63 = 2112;
              v64 = v53;
              _os_log_error_impl(&dword_1A3940000, v52, OS_LOG_TYPE_ERROR, "Couldn't load audio unit for framework %@. Principle class '%@' does not conform to TTSFirstPartyAURegistrar. ", buf, 0x16u);

            }
          }
          v0 = v43;
          v16 = v42;
          v24 = v41;
          v23 = v55;
        }

        ++v25;
      }
      while (v23 != v25);
      v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1E4ABC6C0, v19, (uint64_t)&v57, (uint64_t)v65, 16);
    }
    while (v23);
  }

}

void sub_1A39725AC(uint64_t a1)
{
  void *v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v1 = *(void **)(a1 + 32);
  v2 = (void *)objc_opt_class();
  objc_msgSend_componentCache(v2, v3, v4, v5, v6);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__reconcileCachedComponents_(v1, v7, (uint64_t)v10, v8, v9);

}

uint64_t sub_1A397268C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__reloadVoiceForBundleIdentifierPrefix_, *(_QWORD *)(a1 + 40), a4, a5);
}

uint64_t sub_1A3972730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__reloadVoiceForBundleIdentifierHash_, *(_QWORD *)(a1 + 40), a4, a5);
}

uint64_t sub_1A39727F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  objc_msgSend_bundleIdentifier(a2, (const char *)a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_hasPrefix_(v6, v7, *(_QWORD *)(a1 + 32), v8, v9) ^ 1;

  return v10;
}

BOOL sub_1A3972924(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;

  v3 = a2;
  if (objc_msgSend_isFirstParty(v3, v4, v5, v6, v7))
  {
    objc_msgSend_bundleIdentifier(v3, v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend_containerBundleIdentifier(v3, v8, v9, v10, v11);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v17)
    {
      v28 = 0;
      goto LABEL_7;
    }
    objc_msgSend_containerBundleIdentifier(v3, v18, v19, v20, v21);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v22 = v12;
  v23 = objc_msgSend_hash(v12, v13, v14, v15, v16);

  v28 = v23 != objc_msgSend_unsignedIntegerValue(*(void **)(a1 + 32), v24, v25, v26, v27);
LABEL_7:

  return v28;
}

uint64_t sub_1A3972A28(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__reconcileCachedComponents_(*(void **)(a1 + 32), a2, MEMORY[0x1E0C9AA60], a4, a5);
}

void sub_1A3973144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A3973190(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD v18[2];
  int v19;

  v3 = a2;
  v8 = v3;
  if (v3)
  {
    objc_msgSend_audioComponentDescription(v3, v4, v5, v6, v7);
  }
  else
  {
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
  }
  AXNSStringFromAudioUnitComponentDescription((unsigned int *)v18, v4, v5, v6, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_containsObject_(*(void **)(a1 + 32), v10, (uint64_t)v9, v11, v12);
  if ((v16 & 1) == 0)
    objc_msgSend_addObject_(*(void **)(a1 + 32), v13, (uint64_t)v9, v14, v15);

  return v16 ^ 1u;
}

BOOL sub_1A3973220(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void *);
  void *v17;
  uint64_t v18;
  id v19;

  v3 = a2;
  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v14 = MEMORY[0x1E0C809B0];
  v15 = 3221225472;
  v16 = sub_1A39732F8;
  v17 = &unk_1E4AA04D0;
  v18 = *(_QWORD *)(a1 + 32);
  v5 = v3;
  v19 = v5;
  v12 = objc_msgSend_indexOfObjectPassingTest_(v4, v6, (uint64_t)&v14, v7, v8);
  if (v12 == 0x7FFFFFFFFFFFFFFFLL)
    objc_msgSend_addObject_(*(void **)(a1 + 40), v9, (uint64_t)v5, v10, v11, v14, v15, v16, v17, v18);
  else
    objc_msgSend_removeObjectAtIndex_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v9, v12, v10, v11, v14, v15, v16, v17, v18);

  return v12 != 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_1A39732F8(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t isEqualToString;
  _QWORD v25[2];
  int v26;
  _QWORD v27[2];
  int v28;

  v3 = a2;
  v8 = (void *)objc_opt_class();
  if (v3)
  {
    objc_msgSend_audioComponentDescription(v3, v4, v5, v6, v7);
  }
  else
  {
    v27[0] = 0;
    v27[1] = 0;
    v28 = 0;
  }
  v9 = *(void **)(a1 + 40);
  if (v9)
  {
    objc_msgSend_componentDescription(v9, v4, v5, v6, v7);
  }
  else
  {
    v25[0] = 0;
    v25[1] = 0;
    v26 = 0;
  }
  if (objc_msgSend__componentIsEqual_to_(v8, v4, (uint64_t)v27, (uint64_t)v25, v7))
  {
    objc_msgSend_versionString(v3, v10, v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_version(*(void **)(a1 + 40), v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v14, v20, (uint64_t)v19, v21, v22);

  }
  else
  {
    isEqualToString = 0;
  }

  return isEqualToString;
}

TTSSynthesisProviderComponentRecord *sub_1A39733CC(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  TTSSynthesisProviderComponentRecord *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  int v18;
  __int128 v19;
  int v20;

  v2 = a2;
  v7 = objc_alloc_init(TTSSynthesisProviderComponentRecord);
  if (v2)
  {
    objc_msgSend_audioComponentDescription(v2, v3, v4, v5, v6);
  }
  else
  {
    v19 = 0uLL;
    v20 = 0;
  }
  v17 = v19;
  v18 = v20;
  objc_msgSend_setComponentDescription_(v7, v3, (uint64_t)&v17, v5, v6);
  objc_msgSend_versionString(v2, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setVersion_(v7, v13, (uint64_t)v12, v14, v15);

  return v7;
}

BOOL sub_1A397346C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  objc_msgSend_bundleIdentifier(v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
    objc_msgSend_addObject_(*(void **)(a1 + 32), v9, (uint64_t)v3, v10, v11);

  return v8 != 0;
}

void sub_1A39736A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL (*v61)(uint64_t, void *);
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;

  v67 = 0;
  v6 = (uint64_t *)(a1 + 40);
  v7 = 1;
  v8 = 5;
  do
  {
    if (objc_msgSend__loadVoicesForComponentWithTimeout_timeout_timedOut_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), (uint64_t)&v67, a5, (double)v7 * 15.0))
    {
      v67 = 0;
      goto LABEL_17;
    }
    objc_msgSend_sleepForTimeInterval_(MEMORY[0x1E0CB3978], v9, v10, v11, v12, (double)v8);
    ++v7;
    v8 += 5;
  }
  while (v7 != 4);
  AXTTSLogCommon();
  v13 = (char *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
    sub_1A3AB123C(v6, v13, v14, v15, v16);

  if (!*v6)
  {
    v64 = 0;
    v65 = 0;
    v66 = 0;
LABEL_11:
    if (!v67)
      goto LABEL_17;
    goto LABEL_12;
  }
  objc_msgSend_componentDescription((void *)*v6, v17, v18, v19, v20);
  if ((_DWORD)v65 != 1634758764)
    goto LABEL_11;
LABEL_12:
  v21 = (void *)objc_opt_class();
  objc_msgSend_componentCache(v21, v22, v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = MEMORY[0x1E0C809B0];
  v60 = 3221225472;
  v61 = sub_1A39738B8;
  v62 = &unk_1E4AA0480;
  v63 = *(id *)(a1 + 40);
  v30 = objc_msgSend_indexOfObjectPassingTest_(v26, v27, (uint64_t)&v59, v28, v29);

  if (v30 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v31 = (void *)objc_opt_class();
    objc_msgSend_componentCache(v31, v32, v33, v34, v35, v59, v60, v61, v62);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndex_(v36, v37, v30, v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_voices(v40, v41, v42, v43, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setVoices_(*(void **)(a1 + 40), v46, (uint64_t)v45, v47, v48);

    objc_msgSend_bundleIdentifier(v40, v49, v50, v51, v52);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBundleIdentifier_(*(void **)(a1 + 40), v54, (uint64_t)v53, v55, v56);

    AXTTSLogCommon();
    v57 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
      sub_1A3AB11D0(v6, v57, v58);

  }
LABEL_17:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

BOOL sub_1A39738B8(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  int v11;
  int v12;
  _BOOL8 v13;
  void *v14;
  int v15;
  int v17;
  int v18;
  int v19;
  int v20;

  v3 = a2;
  v8 = v3;
  if (v3)
  {
    objc_msgSend_componentDescription(v3, v4, v5, v6, v7);
    v9 = v20;
  }
  else
  {
    v9 = 0;
  }
  v10 = *(void **)(a1 + 32);
  if (v10)
  {
    objc_msgSend_componentDescription(v10, v4, v5, v6, v7);
    v11 = v19;
  }
  else
  {
    v11 = 0;
  }
  if (v9 == v11)
  {
    if (v8)
    {
      objc_msgSend_componentDescription(v8, v4, v5, v6, v7);
      v12 = v18;
    }
    else
    {
      v12 = 0;
    }
    v14 = *(void **)(a1 + 32);
    if (v14)
    {
      objc_msgSend_componentDescription(v14, v4, v5, v6, v7);
      v15 = v17;
    }
    else
    {
      v15 = 0;
    }
    v13 = v12 == v15;
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_1A3973B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1A3973B98(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t HasEntitlement_entitlement;
  TTSAUMessagingHost *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  id v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  NSObject *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  void *v149;
  uint64_t v150;
  _QWORD v151[4];
  id v152;
  id v153;
  id v154;
  char v155;
  _BYTE v156[20];
  _QWORD v157[2];
  int v158;
  uint8_t buf[4];
  void *v160;
  __int16 v161;
  void *v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v11 = v6;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
    goto LABEL_32;
  if (!v6)
  {
    objc_msgSend_AUAudioUnit(v5, v7, v8, v9, v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend_remoteProcessIdentifier(v13, v14, v15, v16, v17);
    if (!(_DWORD)v18)
    {
      AXTTSLogCommon();
      v81 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
      {
        v147 = *(void **)(a1 + 40);
        if (v147)
        {
          objc_msgSend_componentDescription(v147, v82, v83, v84, v85);
        }
        else
        {
          v157[0] = 0;
          v157[1] = 0;
          v158 = 0;
        }
        AXNSStringFromAudioUnitComponentDescription((unsigned int *)v157, v82, v83, v84, v85);
        v148 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v160 = v13;
        v161 = 2112;
        v162 = v148;
        _os_log_error_impl(&dword_1A3940000, v81, OS_LOG_TYPE_ERROR, "VoiceProvider could not retrieve remote pid %@, subtype: %@", buf, 0x16u);

      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
      goto LABEL_31;
    }
    v23 = v18;
    objc_msgSend_defaultManager(MEMORY[0x1E0D7D430], v19, v20, v21, v22);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_informationForPlugInWithPid_(v24, v25, v23, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_objectForKey_(v28, v29, *MEMORY[0x1E0D7D460], v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v28, v33, *MEMORY[0x1E0D7D458], v34, v35);
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = (void *)objc_opt_class();
    HasEntitlement_entitlement = objc_msgSend_synthesizerHasEntitlement_entitlement_(v37, v38, (uint64_t)v13, kTTSFirstPartySynthEntitlement, v39);
    v149 = v13;
    v150 = v36;
    if ((_DWORD)HasEntitlement_entitlement)
    {
      v41 = [TTSAUMessagingHost alloc];
      objc_msgSend_AUAudioUnit(v5, v42, v43, v44, v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_messageChannelFor_(v46, v47, (uint64_t)CFSTR("aapl"), v48, v49);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v54 = v28;
      v55 = v32;
      v56 = (void *)objc_msgSend_initWithMessageChannel_(v41, v51, (uint64_t)v50, v52, v53);

      objc_msgSend_requireFirstUnlockForVoiceLoad(v56, v57, v58, v59, v60);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      v66 = objc_msgSend_BOOLValue(v61, v62, v63, v64, v65);

      objc_msgSend_voicesExternallyManaged(v56, v67, v68, v69, v70);
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      v76 = objc_msgSend_BOOLValue(v71, v72, v73, v74, v75);

      v32 = v55;
      v28 = v54;
      v13 = v149;
      if (MKBDeviceUnlockedSinceBoot() || (v66 & 1) == 0)
      {
        if (v76)
        {
LABEL_22:
          objc_msgSend_voices(*(void **)(a1 + 40), v77, v78, v79, v80);
          v102 = objc_claimAutoreleasedReturnValue();
          v103 = (void *)v102;
          v104 = (void *)MEMORY[0x1E0C9AA60];
          if (v102)
            v104 = (void *)v102;
          v90 = v104;

          goto LABEL_25;
        }
LABEL_15:
        objc_msgSend_speechVoices(v13, v77, v78, v79, v80);
        v90 = (id)objc_claimAutoreleasedReturnValue();
        if (!v90)
        {
          AXTTSLogCommon();
          v91 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
            sub_1A3AB14A4(a1, v91, v92, v93, v94, v95, v96, v97);

          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
          v98 = (void *)v150;
          goto LABEL_30;
        }
LABEL_25:
        if ((_DWORD)HasEntitlement_entitlement)
        {
          v105 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend_parameterTree(v13, v86, v87, v88, v89);
          v106 = v28;
          v107 = v32;
          v108 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_allParameters(v108, v109, v110, v111, v112);
          v113 = (void *)objc_claimAutoreleasedReturnValue();
          v118 = objc_msgSend_count(v113, v114, v115, v116, v117);
          objc_msgSend_numberWithUnsignedInteger_(v105, v119, v118, v120, v121);
          v122 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setParameterCount_(*(void **)(a1 + 40), v123, (uint64_t)v122, v124, v125);

          v32 = v107;
          v28 = v106;
          v13 = v149;
        }
        objc_msgSend_ax_arrayByRemovingDuplicates(v90, v86, v87, v88, v89);
        v126 = (void *)objc_claimAutoreleasedReturnValue();

        v151[0] = MEMORY[0x1E0C809B0];
        v151[1] = 3221225472;
        v151[2] = sub_1A39740C0;
        v151[3] = &unk_1E4AA0588;
        v152 = v5;
        v127 = v32;
        v153 = v127;
        v155 = HasEntitlement_entitlement;
        v154 = *(id *)(a1 + 40);
        objc_msgSend_ax_mappedArrayUsingBlock_(v126, v128, (uint64_t)v151, v129, v130);
        v131 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_setIsFirstParty_(*(void **)(a1 + 40), v132, HasEntitlement_entitlement, v133, v134);
        objc_msgSend_setBundleIdentifier_(*(void **)(a1 + 40), v135, (uint64_t)v127, v136, v137);
        v98 = (void *)v150;
        objc_msgSend_setContainerBundleIdentifier_(*(void **)(a1 + 40), v138, v150, v139, v140);
        objc_msgSend_setVoices_(*(void **)(a1 + 40), v141, (uint64_t)v131, v142, v143);
        AXTTSLogCommon();
        v144 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
          sub_1A3AB1348(v131, (const char *)v127, v144, v145, v146);

        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
LABEL_30:

LABEL_31:
        goto LABEL_32;
      }
    }
    else if (MKBDeviceUnlockedSinceBoot())
    {
      goto LABEL_15;
    }
    AXTTSLogCommon();
    v99 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
      sub_1A3AB13F8(a1, (uint64_t)v156, v99, v100, v101);

    goto LABEL_22;
  }
  AXTTSLogCommon();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    sub_1A3AB150C();

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
LABEL_32:

}

id sub_1A39740C0(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;

  v7 = a2;
  v8 = *(void **)(a1 + 32);
  if (v8)
  {
    objc_msgSend_audioComponentDescription(v8, v3, v4, v5, v6);
  }
  else
  {
    v43 = 0uLL;
    v44 = 0;
  }
  v41 = v43;
  v42 = v44;
  objc_msgSend_setAuComponentDesc_(v7, v3, (uint64_t)&v41, v5, v6);
  objc_msgSend_manufacturerName(*(void **)(a1 + 32), v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setManufacturerName_(v7, v14, (uint64_t)v13, v15, v16);

  objc_msgSend_setSynthesizerBundleIdentifier_(v7, v17, *(_QWORD *)(a1 + 40), v18, v19);
  objc_msgSend_setIsFirstParty_(v7, v20, *(unsigned __int8 *)(a1 + 56), v21, v22);
  if ((objc_msgSend_isFirstParty(v7, v23, v24, v25, v26) & 1) != 0)
  {
    objc_msgSend_parameterCount(*(void **)(a1 + 48), v27, v28, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = (int)objc_msgSend_intValue(v31, v32, v33, v34, v35) > 0;
    objc_msgSend_setHasPerVoiceSettings_(v7, v37, v36, v38, v39);

  }
  else
  {
    objc_msgSend_setHasPerVoiceSettings_(v7, v27, 0, v29, v30);
  }
  return v7;
}

void sub_1A3974268(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  dispatch_semaphore_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  dispatch_time_t v17;
  intptr_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[5];
  NSObject *v24;
  id v25;
  uint64_t *v26;
  _QWORD v27[2];
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char v32;

  objc_msgSend_registerFirstPartyInProcessAudioUnits(TTSSynthesisProviderVoiceManager, a2, a3, a4, a5);
  v10 = dispatch_semaphore_create(0);
  v29 = 0;
  v30 = &v29;
  v31 = 0x2020000000;
  v32 = 0;
  v11 = (void *)MEMORY[0x1E0C89B18];
  v12 = *(void **)(a1 + 32);
  if (v12)
  {
    objc_msgSend_auComponentDesc(v12, v6, v7, v8, v9);
  }
  else
  {
    v27[0] = 0;
    v27[1] = 0;
    v28 = 0;
  }
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = sub_1A3974404;
  v23[3] = &unk_1E4AA05D8;
  v26 = &v29;
  v13 = *(id *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 40);
  v25 = v13;
  v23[4] = v14;
  v15 = v10;
  v24 = v15;
  objc_msgSend_instantiateWithComponentDescription_options_completionHandler_(v11, v16, (uint64_t)v27, 1, (uint64_t)v23);
  v17 = dispatch_time(0, 10000000000);
  v18 = dispatch_semaphore_wait(v15, v17);
  *((_BYTE *)v30 + 24) = v18 != 0;
  if (v18)
  {
    v21 = *(_QWORD *)(a1 + 48);
    objc_msgSend_ax_errorWithDomain_description_(MEMORY[0x1E0CB35C8], v19, (uint64_t)CFSTR("TTSErrorDomain"), (uint64_t)CFSTR("Timed out instantiating audio unit"), v20);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, _QWORD, void *))(v21 + 16))(v21, 0, 0, v22);

  }
  _Block_object_dispose(&v29, 8);

}

void sub_1A39743EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A3974404(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t HasEntitlement_entitlement;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;

  v22 = a2;
  v5 = a3;
  v6 = v5;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    if (v5)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }
    else
    {
      v7 = (void *)objc_opt_class();
      objc_msgSend_AUAudioUnit(v22, v8, v9, v10, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      HasEntitlement_entitlement = objc_msgSend_synthesizerHasEntitlement_entitlement_(v7, v13, (uint64_t)v12, kTTSFirstPartySynthEntitlement, v14);

      v16 = *(_QWORD *)(a1 + 48);
      objc_msgSend_AUAudioUnit(v22, v17, v18, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, uint64_t, _QWORD))(v16 + 16))(v16, v21, HasEntitlement_entitlement, 0);

      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
    }
  }

}

void sub_1A3974824(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void *sub_1A3974834(void *a1, uint64_t a2, void *a3, size_t a4, uint64_t a5)
{
  id v8;
  const char *v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  size_t v14;

  v14 = 0;
  v8 = objc_retainAutorelease(a1);
  v11 = (const void *)objc_msgSend_decodeBytesForKey_returnedLength_(v8, v9, a5, (uint64_t)&v14, v10);
  if (v14 >= a4)
    v12 = a4;
  else
    v12 = v14;
  return memcpy(a3, v11, v12);
}

uint64_t sub_1A3974894(void *a1, const char *a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  _OWORD v8[4];

  v8[0] = a4;
  v8[1] = a5;
  v8[2] = a6;
  v8[3] = a7;
  return objc_msgSend_tts_encodeBytes_size_forKey_(a1, a2, (uint64_t)v8, 64, a3);
}

double sub_1A39748C4(void *a1, const char *a2, uint64_t a3)
{
  _OWORD v4[4];

  memset(v4, 0, sizeof(v4));
  objc_msgSend_tts_decodeBytesIntoObject_size_forKey_(a1, a2, (uint64_t)v4, 64, a3);
  return *(double *)v4;
}

uint64_t sub_1A3974900(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1A3974910(uint64_t a1)
{

}

void sub_1A397492C()
{
  void *v0;

  v0 = (void *)qword_1ED1B5C98;
  qword_1ED1B5C98 = 0;

}

void sub_1A397493C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  AXTTSLogResourceManager();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v15 = 138412290;
    v16 = a3;
    _os_log_impl(&dword_1A3940000, v4, OS_LOG_TYPE_INFO, "Received notification: %@. Will reset in-memory resources", (uint8_t *)&v15, 0xCu);
  }

  objc_msgSend_sharedInstance(TTSAXResourceManager, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_assetLoadingQueue(v9, v10, v11, v12, v13);
  v14 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v14, &unk_1E4A9DA30);

}

void sub_1A3974B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A3974B30(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  void *v7;
  NSObject *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  _BOOL4 v40;
  NSObject *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  int v56;
  void *v57;
  __int16 v58;
  void *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(a1 + 32);
  if (!v6[3])
  {
    objc_msgSend__readResourcesFromPreferences(v6, a2, a3, a4, a5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    AXTTSLogResourceManager();
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
    v10 = v9;
    if (v7)
    {

      if (v10)
      {
        AXTTSLogResourceManager();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          v15 = (void *)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
          objc_msgSend__debugCountSummaryForResources_(*(void **)(a1 + 32), v12, (uint64_t)v7, v13, v14);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v56 = 134218242;
          v57 = v15;
          v58 = 2112;
          v59 = v16;
          _os_log_impl(&dword_1A3940000, v11, OS_LOG_TYPE_INFO, "Requesting resources. waitForInstalledAssets=%ld. Found resources in cache: %@", (uint8_t *)&v56, 0x16u);

        }
      }
      v17 = v7;
    }
    else
    {
      if (v9)
      {
        v18 = (void *)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        v56 = 134217984;
        v57 = v18;
        _os_log_impl(&dword_1A3940000, v8, OS_LOG_TYPE_INFO, "Requesting resources. waitForInstalledAssets=%ld. No resources found in cache. Setting resources to on-disk resources for maui/macintalk/legacy", (uint8_t *)&v56, 0xCu);
      }

      objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v19, v20, v21, v22);
      v17 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_bundleWithPath_(MEMORY[0x1E0CB34D0], v23, (uint64_t)CFSTR("/System/Library/PrivateFrameworks/TextToSpeechMauiSupport.framework"), v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = v26;
      if (v26)
      {
        v30 = *(void **)(a1 + 32);
        objc_msgSend_pathForResource_ofType_(v26, v27, (uint64_t)CFSTR("TTSResources"), 0, v28);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend__findLocalResourcesForPath_(v30, v32, (uint64_t)v31, v33, v34);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addEntriesFromDictionary_(v17, v36, (uint64_t)v35, v37, v38);

      }
      AXTTSLogResourceManager();
      v39 = objc_claimAutoreleasedReturnValue();
      v40 = os_log_type_enabled(v39, OS_LOG_TYPE_INFO);

      if (v40)
      {
        AXTTSLogResourceManager();
        v41 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          objc_msgSend__debugCountSummaryForResources_(*(void **)(a1 + 32), v42, (uint64_t)v17, v43, v44);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          v56 = 138412290;
          v57 = v45;
          _os_log_impl(&dword_1A3940000, v41, OS_LOG_TYPE_INFO, "Requesting resources. Found locally available resources: %@", (uint8_t *)&v56, 0xCu);

        }
      }

    }
    if ((TTSIsBaseSystem() & 1) == 0)
    {
      objc_msgSend__getSynthesisProviderResources(*(void **)(a1 + 32), v46, v47, v48, v49);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKey_(v17, v51, (uint64_t)v50, (uint64_t)CFSTR("SynthesizerExtension"), v52);

    }
    objc_msgSend__updateCachedResources_locked_(*(void **)(a1 + 32), v46, (uint64_t)v17, v48, v49);
    objc_msgSend__mergeInExpensiveInstalledAssets_locked_notifyObservers_(*(void **)(a1 + 32), v53, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), v7 == 0, v54);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1A3975620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3975648(uint64_t a1, void *a2)
{
  id v3;
  uint64_t *WeakRetained;
  const char *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint8_t v20[16];

  v3 = a2;
  WeakRetained = (uint64_t *)objc_loadWeakRetained((id *)(a1 + 40));
  v7 = *(id *)(*(_QWORD *)(a1 + 32) + 24);
  if (v7)
  {
    objc_msgSend__mergeInResources_to_(WeakRetained, v5, (uint64_t)v3, WeakRetained[3], v6);
    AXTTSLogResourceManager();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1A3940000, v8, OS_LOG_TYPE_INFO, "Updating cache after computing expensive resources", v20, 2u);
    }

    objc_msgSend__updateCachedResources_locked_(*(void **)(a1 + 32), v9, (uint64_t)v7, v10, v11);
    if (!*(_BYTE *)(a1 + 48) && *(_BYTE *)(a1 + 49))
    {
      objc_msgSend_setAllAvailableLanguages_(WeakRetained, v12, 0, v13, v14);
      objc_msgSend__notifyObserversOfCacheUpdate(WeakRetained, v15, v16, v17, v18);
    }
  }
  else
  {
    AXTTSLogResourceManager();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      sub_1A3AB1700();

  }
}

void sub_1A3975760(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  id v15;

  objc_msgSend__expensiveResources(*(void **)(a1 + 32), a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1A39757FC;
  v13[3] = &unk_1E4AA06F0;
  v7 = *(void **)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v14 = v6;
  v15 = v8;
  v9 = v6;
  objc_msgSend__accessResourceCache_(v7, v10, (uint64_t)v13, v11, v12);

}

uint64_t sub_1A39757FC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1A3976074(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  v5 = *(id *)(a1 + 32);
  v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();

}

uint64_t sub_1A3976100(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_finishedDownloadingResource_wasCancelled_, *(_QWORD *)(a1 + 40), 1, v3);
  return result;
}

void sub_1A397625C(uint64_t a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1A39762F8;
  v6[3] = &unk_1E4AA0740;
  v1 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  objc_msgSend__performBlockOnObservers_(v1, v2, (uint64_t)v6, v3, v4);
  AXTTSLogResourceManager();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    sub_1A3AB181C();

}

void sub_1A39762F8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  v5 = *(id *)(a1 + 32);
  v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();

}

uint64_t sub_1A3976384(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_finishedDownloadingResource_wasCancelled_, *(_QWORD *)(a1 + 40), 1, v3);
  return result;
}

void sub_1A397659C()
{
  NSObject *v0;

  AXTTSLogResourceManager();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    sub_1A3AB1948();

}

void sub_1A39767E4(uint64_t a1, int a2, void *a3, double a4)
{
  id v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  id v25;
  _QWORD v26[4];
  id v27;
  id v28;
  double v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  double v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  AXTTSLogResourceManager();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend_voiceId(*(void **)(a1 + 32), v9, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v31 = v13;
    v32 = 2050;
    v33 = a4;
    _os_log_impl(&dword_1A3940000, v8, OS_LOG_TYPE_DEFAULT, "Siri asset download progress: %{public}@ %{public}f", buf, 0x16u);

  }
  v14 = MEMORY[0x1E0C809B0];
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = sub_1A3976984;
  v26[3] = &unk_1E4AA07E0;
  v15 = *(void **)(a1 + 40);
  v27 = *(id *)(a1 + 32);
  v29 = a4;
  v28 = *(id *)(a1 + 48);
  objc_msgSend__performBlockOnObservers_(v15, v16, (uint64_t)v26, v17, v18);
  if (a2)
  {
    v23[0] = v14;
    v23[1] = 3221225472;
    v23[2] = sub_1A3976ABC;
    v23[3] = &unk_1E4AA0808;
    v19 = *(void **)(a1 + 40);
    v24 = *(id *)(a1 + 32);
    v25 = v7;
    objc_msgSend__performBlockOnObservers_(v19, v20, (uint64_t)v23, v21, v22);

  }
}

void sub_1A3976984(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;

  v3 = a2;
  v5 = *(id *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();

}

void sub_1A3976A2C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  float v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  const char *v14;
  id v15;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v6 = *(void **)(a1 + 32);
    objc_msgSend_voiceId(*(void **)(a1 + 40), v2, v3, v4, v5);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    v7 = *(double *)(a1 + 56);
    v12 = objc_msgSend_fileSize(*(void **)(a1 + 48), v8, v9, v10, v11);
    *(float *)&v13 = v7;
    objc_msgSend_downloadProgressForVoiceId_progress_storageSize_requiredDiskSpace_(v6, v14, (uint64_t)v15, v12, 1, v13);

  }
}

void sub_1A3976ABC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;

  v3 = a2;
  v5 = *(id *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();

}

uint64_t sub_1A3976B5C(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return MEMORY[0x1E0DE7D20](a1[4], sel_finishedDownloadingResource_wasCancelled_, a1[5], a1[6] != 0, v3);
  return result;
}

void sub_1A3976E78()
{
  NSObject *v0;
  uint8_t v1[16];

  AXTTSLogResourceManager();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1A3940000, v0, OS_LOG_TYPE_INFO, "Speech sample DL: Samples started download.", v1, 2u);
  }

}

void sub_1A3977194(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  v5 = *(id *)(a1 + 32);
  v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();

}

uint64_t sub_1A3977220(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_finishedDeletingResource_, *(_QWORD *)(a1 + 40), v3, v4);
  return result;
}

void sub_1A3977398(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  v5 = *(id *)(a1 + 32);
  v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();

}

uint64_t sub_1A3977424(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_finishedDeletingResource_, *(_QWORD *)(a1 + 40), v3, v4);
  return result;
}

void sub_1A397758C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A39775A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  __int128 v29;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 24);
  if (v6 == 1)
  {
    objc_msgSend_allValues(*(void **)(v7 + 24), a2, a3, a4, a5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_valueForKeyPath_(v9, v10, (uint64_t)CFSTR("@unionOfArrays.self"), v11, v12);
  }
  else
  {
    TTSStringForResourceType(v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v8, v13, (uint64_t)v9, v14, v15);
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = sub_1A39776BC;
  v27[3] = &unk_1E4AA0878;
  v29 = *(_OWORD *)(a1 + 56);
  v28 = *(id *)(a1 + 40);
  objc_msgSend_ax_filteredArrayUsingBlock_(v16, v17, (uint64_t)v27, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_alloc(MEMORY[0x1E0C99D20]);
  v24 = objc_msgSend_initWithArray_copyItems_(v21, v22, (uint64_t)v20, 1, v23);
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v26 = *(void **)(v25 + 40);
  *(_QWORD *)(v25 + 40) = v24;

}

BOOL sub_1A39776BC(uint64_t *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;

  v3 = a2;
  if (objc_msgSend_type(v3, v4, v5, v6, v7) == 3)
  {
    objc_msgSend_sharedInstance(TTSAXResourceMigrationUtilities, v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_obsoleteVoicesWithReplacements(v12, v13, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_voiceId(v3, v18, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_lowercaseString(v22, v23, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v17, v28, (uint64_t)v27, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    if (v31)
      goto LABEL_6;
  }
  v32 = a1[5];
  if (v32)
  {
    if (v32 == 1)
    {
      if (objc_msgSend_type(v3, v8, v9, v10, v11) == 6)
      {
LABEL_6:
        v37 = 0;
        goto LABEL_21;
      }
      v37 = objc_msgSend_type(v3, v33, v34, v35, v36) != 7;
    }
    else
    {
      v37 = objc_msgSend_type(v3, v8, v9, v10, v11) == a1[5];
    }
  }
  else
  {
    v37 = 1;
  }
  v38 = a1[6];
  if (v38 && v37)
    v37 = v38 == 1 || objc_msgSend_subtype(v3, v8, v9, v10, v11) == a1[6];
  v39 = (void *)a1[4];
  if (v39 && v37)
  {
    if ((unint64_t)objc_msgSend_length(v39, v8, v9, v10, v11) < 3)
    {
      objc_msgSend_primaryLanguage(v3, v40, v41, v42, v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = objc_msgSend_containsString_(v44, v49, a1[4], v50, v51);
    }
    else
    {
      objc_msgSend_languages(v3, v40, v41, v42, v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = objc_msgSend_containsObject_(v44, v45, a1[4], v46, v47);
    }
    v37 = v48;

  }
LABEL_21:

  return v37;
}

void sub_1A3977878(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  objc_msgSend__locked_ResourceWithVoiceId_assetId_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a5);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_copy(v13, v6, v7, v8, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

}

uint64_t sub_1A3977A34(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t isDefault;

  objc_msgSend_speechVoice(a2, (const char *)a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  isDefault = objc_msgSend_isDefault(v5, v6, v7, v8, v9);

  return isDefault;
}

BOOL sub_1A3977B60(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;

  v3 = a2;
  objc_msgSend_name(v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lowercaseString(v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lowercaseString(*(void **)(a1 + 32), v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_containsString_(v13, v19, (uint64_t)v18, v20, v21))
    v26 = objc_msgSend_type(v3, v22, v23, v24, v25) == *(_QWORD *)(a1 + 40);
  else
    v26 = 0;

  return v26;
}

uint64_t sub_1A39783F4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t isEqualToString;

  objc_msgSend_identifier(a2, (const char *)a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lowercaseString(v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lowercaseString(*(void **)(a1 + 32), v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v11, v17, (uint64_t)v16, v18, v19);

  return isEqualToString;
}

void sub_1A39787C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;

  objc_msgSend_primaryLanguage(*(void **)(a1 + 32), a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_convertTTSLanguageCodeToSiriLanguageCode_(TTSSiriAssetManager, v7, (uint64_t)v6, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = objc_alloc(MEMORY[0x1E0DA7900]);
  objc_msgSend_name(*(void **)(a1 + 32), v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (void *)objc_msgSend_initWithLanguage_name_(v11, v17, (uint64_t)v10, (uint64_t)v16, v18);

  v20 = objc_alloc(MEMORY[0x1E0DA78D8]);
  v23 = (void *)objc_msgSend_initWithVoice_previewType_(v20, v21, (uint64_t)v19, 2, v22);
  objc_msgSend_previewAudioURL(v23, v24, v25, v26, v27);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  if (v32)
  {
    v33 = *(_QWORD *)(a1 + 48);
    objc_msgSend_previewAudioURL(v23, v28, v29, v30, v31);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v33 + 16))(v33, v34);

  }
  else
  {
    AXTTSLogResourceManager();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      sub_1A3AB1BA8();

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

uint64_t sub_1A3978C6C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_isInstalled(a2, (const char *)a2, a3, a4, a5);
}

uint64_t sub_1A3978CD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_language(a2, (const char *)a2, a3, a4, a5);
}

BOOL sub_1A3978DD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_footprint(a2, (const char *)a2, a3, a4, a5) == 2;
}

uint64_t sub_1A3978DF8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_primaryLanguage(a2, (const char *)a2, a3, a4, a5);
}

void sub_1A3979238(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 16);
  *(_QWORD *)(v6 + 16) = 0;

}

void sub_1A397930C(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v3 = a2;
  v2 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();

}

uint64_t sub_1A397937C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_resourceCacheDidReceiveUpdate, v3, v4, v5);
  return result;
}

void sub_1A39793BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], a2, a3, a4, a5);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_postNotificationName_object_(v7, v5, *MEMORY[0x1E0C89980], 0, v6);

}

void sub_1A3979788(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  id v9;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  objc_msgSend_assetId(*(void **)(a1 + 48), a2, a3, a4, a5);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKey_(v6, v7, v5, (uint64_t)v9, v8);

}

void sub_1A3979950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3979968(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1A39799EC;
  v8[3] = &unk_1E4AA0AD0;
  v2 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v9 = v3;
  v10 = v4;
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_BYTE *)(a1 + 56);
  objc_msgSend__accessResourceCache_(v2, v5, (uint64_t)v8, v6, v7);

}

uint64_t sub_1A39799EC(uint64_t a1)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int isInstalled;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  id obj;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[128];
  _BYTE v83[128];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  obj = *(id *)(a1 + 32);
  v71 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v2, (uint64_t)&v78, (uint64_t)v83, 16);
  if (!v71)
    goto LABEL_24;
  v70 = *(_QWORD *)v79;
  do
  {
    v6 = 0;
    do
    {
      if (*(_QWORD *)v79 != v70)
        objc_enumerationMutation(obj);
      v72 = v6;
      objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v3, *(_QWORD *)(*((_QWORD *)&v78 + 1) + 8 * v6), v4, v5);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v74 = 0u;
      v75 = 0u;
      v76 = 0u;
      v77 = 0u;
      v73 = v7;
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v74, (uint64_t)v82, 16);
      if (v9)
      {
        v14 = v9;
        v15 = *(_QWORD *)v75;
        do
        {
          v16 = 0;
          do
          {
            if (*(_QWORD *)v75 != v15)
              objc_enumerationMutation(v73);
            v17 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * v16);
            v18 = *(void **)(a1 + 40);
            objc_msgSend_voiceId(v17, v10, v11, v12, v13);
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend__locked_ResourceWithVoiceId_assetId_(v18, v20, (uint64_t)v19, 0, v21);
            v22 = (void *)objc_claimAutoreleasedReturnValue();

            isInstalled = objc_msgSend_isInstalled(v22, v23, v24, v25, v26);
            objc_msgSend_assetId(v17, v28, v29, v30, v31);
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            if (v32)
            {

LABEL_14:
              objc_msgSend_assetId(v17, v37, v38, v39, v40);
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_assetId(v22, v43, v44, v45, v46);
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              v51 = objc_msgSend_isEqualToString_(v42, v48, (uint64_t)v47, v49, v50) ^ 1;

              if (v22)
                goto LABEL_15;
              goto LABEL_16;
            }
            objc_msgSend_assetId(v22, v33, v34, v35, v36);
            v41 = (void *)objc_claimAutoreleasedReturnValue();

            if (v41)
              goto LABEL_14;
            v51 = 0;
            if (v22)
            {
LABEL_15:
              if ((isInstalled ^ objc_msgSend_isInstalled(v17, v37, v38, v39, v40) | v51) != 1)
                goto LABEL_17;
            }
LABEL_16:
            objc_msgSend_addObject_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v37, (uint64_t)v17, v39, v40);
LABEL_17:

            ++v16;
          }
          while (v14 != v16);
          v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v73, v10, (uint64_t)&v74, (uint64_t)v82, 16);
          v14 = v52;
        }
        while (v52);
      }

      v6 = v72 + 1;
    }
    while (v72 + 1 != v71);
    v71 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v78, (uint64_t)v83, 16);
  }
  while (v71);
LABEL_24:

  v56 = *(void ***)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
    objc_msgSend__updateCachedResources_locked_(v56, v53, *(_QWORD *)(a1 + 32), v54, v55);
  else
    objc_msgSend_addEntriesFromDictionary_(v56[3], v53, *(_QWORD *)(a1 + 32), v54, v55);
  objc_msgSend_purgeLegacyResourceCache(*(void **)(a1 + 40), v57, v58, v59, v60);
  objc_msgSend__writeResourceCacheVersionToPreferences(*(void **)(a1 + 40), v61, v62, v63, v64);
  return objc_msgSend__writeResourcesToPreferences_(*(void **)(a1 + 40), v65, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24), v66, v67);
}

uint64_t sub_1A397A074(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1 + 32) + 32), a2, *(_QWORD *)(a1 + 40), a4, a5);
}

uint64_t sub_1A397A0FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_removeObject_(*(void **)(*(_QWORD *)(a1 + 32) + 32), a2, *(_QWORD *)(a1 + 40), a4, a5);
}

void sub_1A397A28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A397A2B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  objc_msgSend_allObjects(*(void **)(*(_QWORD *)(a1 + 32) + 32), a2, a3, a4, a5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_1A397A5E0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;

  v3 = a2;
  v5 = *(id *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();

}

uint64_t sub_1A397A680(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return MEMORY[0x1E0DE7D20](a1[4], sel_finishedDownloadingResource_wasCancelled_, a1[5], a1[6] != 0, v3);
  return result;
}

void sub_1A397A8F4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;

  v3 = a2;
  v5 = *(id *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();

}

void sub_1A397A99C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  const char *v19;
  id v20;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v6 = *(void **)(a1 + 32);
    objc_msgSend_voiceId(*(void **)(a1 + 40), v2, v3, v4, v5);
    v20 = (id)objc_claimAutoreleasedReturnValue();
    v7 = *(_DWORD *)(a1 + 56);
    objc_msgSend_unarchivedFileSize(*(void **)(a1 + 48), v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend_unsignedIntegerValue(v12, v13, v14, v15, v16);
    LODWORD(v18) = v7;
    objc_msgSend_downloadProgressForVoiceId_progress_storageSize_requiredDiskSpace_(v6, v19, (uint64_t)v20, v17, 1, v18);

  }
}

uint64_t sub_1A397B338(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_identifier(a2, (const char *)a2, a3, a4, a5);
}

uint64_t sub_1A397B7E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t isEqualToString;

  objc_msgSend_voiceId(a2, (const char *)a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v6, v7, *(_QWORD *)(a1 + 32), v8, v9);

  return isEqualToString;
}

void sub_1A397BAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A397BAE4(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  char isEqualToString;
  char *v27;
  id WeakRetained;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id obj;
  _QWORD v38[4];
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  obj = a2;
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v40, (uint64_t)v45, 16);
  if (v4)
  {
    v9 = v4;
    v10 = *(_QWORD *)v41;
LABEL_3:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v41 != v10)
        objc_enumerationMutation(obj);
      v12 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * v11);
      objc_msgSend_properties(v12, v5, v6, v7, v8);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v13, v14, (uint64_t)CFSTR("VoiceId"), v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_voiceId(*(void **)(a1 + 32), v18, v19, v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v17, v23, (uint64_t)v22, v24, v25);

      if ((isEqualToString & 1) != 0)
        break;
      if (v9 == ++v11)
      {
        v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v40, (uint64_t)v45, 16);
        if (v9)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    v27 = v12;

    if (!v27)
      goto LABEL_12;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v44 = v27;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v29, (uint64_t)&v44, 1, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3221225472;
    v38[2] = sub_1A397BD10;
    v38[3] = &unk_1E4AA0790;
    v39 = *(id *)(a1 + 32);
    objc_msgSend_downloadAssets_successStartBlock_(WeakRetained, v32, (uint64_t)v31, (uint64_t)v38, v33);

  }
  else
  {
LABEL_9:

LABEL_12:
    AXTTSLogResourceManager();
    v27 = (char *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v27, OS_LOG_TYPE_ERROR))
      sub_1A3AB207C(a1, v27, v34, v35, v36);
  }

}

void sub_1A397BD10(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  AXTTSLogResourceManager();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    objc_msgSend_voiceId(*(void **)(a1 + 32), v3, v4, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_primaryLanguage(*(void **)(a1 + 32), v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138412546;
    v14 = v7;
    v15 = 2112;
    v16 = v12;
    _os_log_impl(&dword_1A3940000, v2, OS_LOG_TYPE_INFO, "Downloading legacy asset for testing: %@ %@", (uint8_t *)&v13, 0x16u);

  }
}

void sub_1A397BDEC(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v5 = a3;
  if (a2)
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_1A397BE88;
    v10[3] = &unk_1E4AA0808;
    v6 = *(void **)(a1 + 32);
    v11 = *(id *)(a1 + 40);
    v12 = v5;
    objc_msgSend__performBlockOnObservers_(v6, v7, (uint64_t)v10, v8, v9);

  }
}

void sub_1A397BE88(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;

  v3 = a2;
  v5 = *(id *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v4 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();

}

uint64_t sub_1A397BF28(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return MEMORY[0x1E0DE7D20](a1[4], sel_finishedDownloadingResource_wasCancelled_, a1[5], a1[6] != 0, v3);
  return result;
}

void sub_1A397C110(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  objc_msgSend_sharedInstance(TTSAXResourceManager, a2, a3, a4, a5);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_resetResourcesCache(v9, v5, v6, v7, v8);

}

void sub_1A397C144(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_1A397C150(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t (*ausdk::AUBaseLookup::Lookup(ausdk::AUBaseLookup *this))()
{
  uint64_t v1;

  v1 = (int)this - 1;
  if (v1 > 0x11)
    return 0;
  else
    return off_1E4AA0BD8[v1];
}

uint64_t sub_1A397C194(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 536);
  if (v2)
    (*(void (**)(_QWORD))(*(_QWORD *)v2 + 16))(*(_QWORD *)(a1 + 536));
  v3 = ausdk::AUBase::DoInitialize((ausdk::AUBase *)(a1 + 64));
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

void sub_1A397C1EC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A397C1DCLL);
}

uint64_t sub_1A397C278(uint64_t a1)
{
  uint64_t v2;
  double v3;

  v2 = *(_QWORD *)(a1 + 536);
  if (v2)
    (*(void (**)(_QWORD))(*(_QWORD *)v2 + 16))(*(_QWORD *)(a1 + 536));
  v3 = ausdk::AUBase::DoCleanup((ausdk::AUBase *)(a1 + 64));
  if (v2)
  {
    (*(void (**)(uint64_t, double))(*(_QWORD *)v2 + 24))(v2, v3);
    return 0;
  }
  return v2;
}

void sub_1A397C2D0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A397C2C0);
}

uint64_t sub_1A397C35C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v12;
  uint64_t PropertyInfo;
  BOOL v15;
  unsigned int v16;

  v16 = 0;
  v15 = 0;
  v12 = *(_QWORD *)(a1 + 536);
  if (v12)
    (*(void (**)(_QWORD))(*(_QWORD *)v12 + 16))(*(_QWORD *)(a1 + 536));
  PropertyInfo = ausdk::AUBase::DispatchGetPropertyInfo((ausdk::AUBase *)(a1 + 64), a2, a3, a4, &v16, &v15);
  if (a5)
    *a5 = v16;
  if (a6)
    *a6 = v15;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  return PropertyInfo;
}

void sub_1A397C41C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A397C3FCLL);
}

uint64_t sub_1A397C4A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _OWORD *a5, _DWORD *a6)
{
  uint64_t v12;
  size_t v13;
  ausdk::AUBase *v14;
  uint64_t v15;
  uint64_t PropertyInfo;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v35;
  void *__p;
  void *v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;

  v40 = 0;
  v12 = *(_QWORD *)(a1 + 536);
  if (v12)
    (*(void (**)(_QWORD))(*(_QWORD *)v12 + 16))(*(_QWORD *)(a1 + 536));
  if (!a6)
  {
    v17 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v17)
      sub_1A3AB2108(v17, v18, v19, v20, v21, v22, v23, v24);
    goto LABEL_14;
  }
  if (!a5)
  {
    LODWORD(__p) = 0;
    PropertyInfo = ausdk::AUBase::DispatchGetPropertyInfo((ausdk::AUBase *)(a1 + 64), a2, a3, a4, (unsigned int *)&__p, &v40);
    *a6 = (_DWORD)__p;
    v25 = 1;
    v15 = PropertyInfo;
    if (!v12)
      goto LABEL_17;
LABEL_16:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    goto LABEL_17;
  }
  v13 = *a6;
  if (!(_DWORD)v13)
  {
    v26 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v26)
      sub_1A3AB213C(v26, v27, v28, v29, v30, v31, v32, v33);
LABEL_14:
    PropertyInfo = 0;
    v15 = 4294967246;
LABEL_15:
    v25 = 1;
    if (!v12)
      goto LABEL_17;
    goto LABEL_16;
  }
  v39 = 0;
  v14 = (ausdk::AUBase *)(a1 + 64);
  v15 = ausdk::AUBase::DispatchGetPropertyInfo((ausdk::AUBase *)(a1 + 64), a2, a3, a4, &v39, &v40);
  if ((_DWORD)v15)
  {
    PropertyInfo = 0;
    goto LABEL_15;
  }
  __p = 0;
  v37 = 0;
  v38 = 0;
  v35 = a5;
  if (v13 < v39)
  {
    sub_1A397D860((unint64_t *)&__p, v39);
    v35 = __p;
  }
  PropertyInfo = ausdk::AUBase::DispatchGetProperty(v14, a2, a3, a4, v35);
  if ((_DWORD)PropertyInfo)
  {
    *a6 = 0;
  }
  else if (v13 >= v39 || __p == v37)
  {
    *a6 = v39;
  }
  else
  {
    memcpy(a5, __p, v13);
  }
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  v25 = 0;
  if (v12)
    goto LABEL_16;
LABEL_17:
  if (!v25)
    return PropertyInfo;
  return v15;
}

void sub_1A397C68C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  if (__p)
    operator delete(__p);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A397C5CCLL);
}

uint64_t sub_1A397C734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *__s2, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v12 = *(_QWORD *)(a1 + 536);
  if (v12)
    (*(void (**)(_QWORD))(*(_QWORD *)v12 + 16))(*(_QWORD *)(a1 + 536));
  if (__s2 && (_DWORD)a6)
  {
    v13 = ausdk::AUBase::DispatchSetProperty((const void **)(a1 + 64), a2, a3, a4, __s2, a6);
LABEL_9:
    v14 = v13;
    goto LABEL_10;
  }
  if (!__s2 && !(_DWORD)a6)
  {
    v13 = ausdk::AUBase::DispatchRemovePropertyValue((ausdk::AUBase *)(a1 + 64), a2, a3, a4);
    goto LABEL_9;
  }
  if (__s2)
  {
    if ((_DWORD)a6)
    {
      v14 = 0;
LABEL_10:
      v15 = 1;
      if (!v12)
        goto LABEL_12;
      goto LABEL_11;
    }
    v25 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v25)
      sub_1A3AB21A4(v25, v26, v27, v28, v29, v30, v31, v32);
  }
  else
  {
    v17 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v17)
      sub_1A3AB2170(v17, v18, v19, v20, v21, v22, v23, v24);
  }
  v15 = 0;
  v14 = 0;
  if (v12)
LABEL_11:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
LABEL_12:
  if ((v15 & 1) == 0)
    return 4294967246;
  return v14;
}

void sub_1A397C858(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A397C7E4);
}

uint64_t sub_1A397C8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(a1 + 536);
  if (v8)
    (*(void (**)(_QWORD))(*(_QWORD *)v8 + 16))(*(_QWORD *)(a1 + 536));
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 64) + 112))(a1 + 64, a2, a3, a4);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  return v9;
}

void sub_1A397C968(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A397C950);
}

uint64_t sub_1A397C9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 536);
  if (v6)
    (*(void (**)(_QWORD))(*(_QWORD *)v6 + 16))(*(_QWORD *)(a1 + 536));
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 64) + 120))(a1 + 64, a2, a3, 0, 0);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v7;
}

void sub_1A397CA70(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A397CA5CLL);
}

uint64_t sub_1A397CAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(a1 + 536);
  if (v8)
    (*(void (**)(_QWORD))(*(_QWORD *)v8 + 16))(*(_QWORD *)(a1 + 536));
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 64) + 120))(a1 + 64, a2, a3, a4, 1);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  return v9;
}

void sub_1A397CB84(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A397CB6CLL);
}

uint64_t sub_1A397CC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 536);
  if (v6)
    (*(void (**)(_QWORD))(*(_QWORD *)v6 + 16))(*(_QWORD *)(a1 + 536));
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 64) + 128))(a1 + 64, a2, a3);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v7;
}

void sub_1A397CC84(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A397CC70);
}

uint64_t sub_1A397CD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 536);
  if (v6)
    (*(void (**)(_QWORD))(*(_QWORD *)v6 + 16))(*(_QWORD *)(a1 + 536));
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 64) + 136))(a1 + 64, a2, a3);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v7;
}

void sub_1A397CD84(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A397CD70);
}

uint64_t sub_1A397CE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = *(_QWORD *)(a1 + 536);
  if (v10)
    (*(void (**)(_QWORD))(*(_QWORD *)v10 + 16))(*(_QWORD *)(a1 + 536));
  if (a5)
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 64) + 144))(a1 + 64, a2, a3, a4, a5);
    if (!v10)
      return v11;
    goto LABEL_7;
  }
  v11 = 4294967246;
  if (v10)
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  return v11;
}

void sub_1A397CEAC(void *a1)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A397CE94);
}

uint64_t sub_1A397CF34(uint64_t a1, float a2)
{
  if ((LODWORD(a2) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    return 4294900553;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 152))(a1 + 64);
}

uint64_t sub_1A397CFDC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  int v6;

  if (!a2 || !a3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 168))(a1 + 64);
  v3 = 0;
  v4 = 0;
  v5 = (_DWORD *)(a2 + 28);
  while (1)
  {
    v6 = *(v5 - 4);
    if (v6 == 2)
      break;
    if (v6 == 1 && (*(v5 - 2) & 0x7FFFFFFFu) >= 0x7F800000)
      goto LABEL_11;
LABEL_10:
    v4 = ++v3 >= (unint64_t)a3;
    v5 += 8;
    if (a3 == v3)
      goto LABEL_11;
  }
  if ((*(v5 - 1) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (*v5 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    goto LABEL_10;
LABEL_11:
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 168))(a1 + 64);
  return 4294900553;
}

uint64_t sub_1A397D0F4(uint64_t a1, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5, AudioBufferList *a6)
{
  uint64_t result;
  int v8;

  v8 = 0;
  result = 4294967246;
  if (a3 && a6)
  {
    if (!a2)
      a2 = (unsigned int *)&v8;
    return ausdk::AUBase::DoRender((ausdk::AUBase *)(a1 + 64), a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t sub_1A397D134(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 536);
  if (v2)
    (*(void (**)(_QWORD))(*(_QWORD *)v2 + 16))(*(_QWORD *)(a1 + 536));
  v3 = ausdk::AUBase::DoReset((ausdk::AUBase *)(a1 + 64));
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

void sub_1A397D1A4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A397D190);
}

uint64_t (*ausdk::AUOutputLookup::Lookup(ausdk::AUOutputLookup *this))()
{
  int v1;
  uint64_t (*result)();
  uint64_t (*v3)(uint64_t);

  v1 = (int)this;
  result = ausdk::AUBaseLookup::Lookup(this);
  v3 = sub_1A397D364;
  if (v1 != 514)
    v3 = 0;
  if (v1 == 513)
    v3 = sub_1A397D278;
  if (!result)
    return (uint64_t (*)())v3;
  return result;
}

uint64_t sub_1A397D278(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 536);
  if (v2)
    (*(void (**)(_QWORD))(*(_QWORD *)v2 + 16))(*(_QWORD *)(a1 + 536));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 440))(a1 + 64);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

void sub_1A397D2D8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A397D2C8);
}

uint64_t sub_1A397D364(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 536);
  if (v2)
    (*(void (**)(_QWORD))(*(_QWORD *)v2 + 16))(*(_QWORD *)(a1 + 536));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 448))(a1 + 64);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

void sub_1A397D3C4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A397D3B4);
}

uint64_t (*ausdk::AUComplexOutputLookup::Lookup(ausdk::AUComplexOutputLookup *this))()
{
  int v1;
  uint64_t (*result)();
  uint64_t (*v3)(uint64_t);
  uint64_t (*v4)(uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (int)this;
  result = ausdk::AUBaseLookup::Lookup(this);
  v3 = sub_1A397D364;
  if (v1 != 514)
    v3 = 0;
  if (v1 == 513)
    v3 = sub_1A397D278;
  v4 = sub_1A397D4B0;
  if (v1 != 19)
    v4 = 0;
  if (!v3)
    v3 = (uint64_t (*)(uint64_t))v4;
  if (!result)
    return (uint64_t (*)())v3;
  return result;
}

uint64_t sub_1A397D4B0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;

  v10 = 0;
  v8 = 4294967246;
  if (a3 && a8)
  {
    if (!a2)
      a2 = &v10;
    return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)(a1 + 64) + 192))(a1 + 64, a2);
  }
  return v8;
}

uint64_t (*ausdk::AUBaseProcessLookup::Lookup(ausdk::AUBaseProcessLookup *this))()
{
  int v1;
  uint64_t (*result)();
  uint64_t (*v3)(uint64_t, unsigned int *, const AudioTimeStamp *, uint64_t, AudioBufferList *);

  v1 = (int)this;
  result = ausdk::AUBaseLookup::Lookup(this);
  v3 = sub_1A397D538;
  if (v1 != 20)
    v3 = 0;
  if (!result)
    return (uint64_t (*)())v3;
  return result;
}

uint64_t sub_1A397D538(uint64_t a1, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, AudioBufferList *a5)
{
  uint64_t v5;
  unsigned int v7;

  v7 = 0;
  if (a2)
  {
    if ((*((_BYTE *)a2 + 1) & 2) != 0)
      return ausdk::AUBase::DoProcess((ausdk::AUBase *)(a1 + 64), a2, a3, a4, a5);
  }
  else
  {
    a2 = &v7;
  }
  v5 = 4294967246;
  if (a3 && a5)
    return ausdk::AUBase::DoProcess((ausdk::AUBase *)(a1 + 64), a2, a3, a4, a5);
  return v5;
}

uint64_t (*ausdk::AUBaseProcessMultipleLookup::Lookup(ausdk::AUBaseProcessMultipleLookup *this))()
{
  int v1;
  uint64_t (*result)();
  uint64_t (*v3)(uint64_t, unsigned int *, const AudioTimeStamp *, uint64_t, uint64_t, const AudioBufferList **, uint64_t, AudioBufferList **);

  v1 = (int)this;
  result = ausdk::AUBaseLookup::Lookup(this);
  v3 = sub_1A397D5BC;
  if (v1 != 21)
    v3 = 0;
  if (!result)
    return (uint64_t (*)())v3;
  return result;
}

uint64_t sub_1A397D5BC(uint64_t a1, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5, const AudioBufferList **a6, uint64_t a7, AudioBufferList **a8)
{
  uint64_t v8;
  unsigned int v10;

  v10 = 0;
  if (a2)
  {
    if ((*((_BYTE *)a2 + 1) & 2) != 0)
      return ausdk::AUBase::DoProcessMultiple((ausdk::AUBase *)(a1 + 64), a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    a2 = &v10;
  }
  v8 = 4294967246;
  if (a3 && a6 && a8)
    return ausdk::AUBase::DoProcessMultiple((ausdk::AUBase *)(a1 + 64), a2, a3, a4, a5, a6, a7, a8);
  return v8;
}

uint64_t (*ausdk::AUBaseProcessAndMultipleLookup::Lookup(ausdk::AUBaseProcessAndMultipleLookup *this))()
{
  int v1;
  uint64_t (*result)();
  uint64_t (*v3)(uint64_t, unsigned int *, const AudioTimeStamp *, uint64_t, uint64_t, const AudioBufferList **, uint64_t, AudioBufferList **);
  uint64_t (*v4)(uint64_t, unsigned int *, const AudioTimeStamp *, uint64_t, AudioBufferList *);

  v1 = (int)this;
  result = ausdk::AUBaseLookup::Lookup(this);
  v3 = sub_1A397D5BC;
  v4 = sub_1A397D538;
  if (v1 != 20)
    v4 = 0;
  if (v1 != 21)
    v3 = (uint64_t (*)(uint64_t, unsigned int *, const AudioTimeStamp *, uint64_t, uint64_t, const AudioBufferList **, uint64_t, AudioBufferList **))v4;
  if (!result)
    return (uint64_t (*)())v3;
  return result;
}

uint64_t (*ausdk::AUMIDILookup::Lookup(ausdk::AUMIDILookup *this))()
{
  int v1;
  uint64_t (*result)();
  uint64_t v3;

  v1 = (int)this;
  result = ausdk::AUBaseLookup::Lookup(this);
  if (!result)
  {
    v3 = v1 - 257;
    if (v3 > 6)
      return 0;
    else
      return off_1E4AA0C68[v3];
  }
  return result;
}

uint64_t (*ausdk::AUMIDIProcessLookup::Lookup(ausdk::AUMIDIProcessLookup *this))()
{
  int v1;
  uint64_t (*result)();
  uint64_t (*v3)(uint64_t, unsigned int *, const AudioTimeStamp *, uint64_t, AudioBufferList *);
  uint64_t v4;

  v1 = (int)this;
  result = ausdk::AUBaseLookup::Lookup(this);
  v3 = sub_1A397D538;
  if (v1 != 20)
    v3 = 0;
  if (!result)
    result = (uint64_t (*)())v3;
  if (!result)
  {
    v4 = v1 - 257;
    if (v4 > 6)
      return 0;
    else
      return off_1E4AA0C68[v4];
  }
  return result;
}

uint64_t (*ausdk::AUMusicLookup::Lookup(ausdk::AUMusicLookup *this))()
{
  int v1;
  uint64_t (*result)();
  uint64_t v3;

  v1 = (int)this;
  result = ausdk::AUBaseLookup::Lookup(this);
  if (!result)
  {
    v3 = v1 - 257;
    if (v3 > 6)
      return 0;
    else
      return off_1E4AA0CA0[v3];
  }
  return result;
}

uint64_t sub_1A397D744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 480))(a1 + 64);
  else
    return 4294967246;
}

uint64_t sub_1A397D7D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 488))(a1 + 64);
}

void sub_1A397D860(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_1A395516C();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_1A397D988(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 456))(a1 + 64);
}

uint64_t sub_1A397DA10(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 464))(a1 + 64);
}

uint64_t sub_1A397DA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 472))(a1 + 64);
  else
    return 4294967246;
}

uint64_t CAIsDebuggerAttached(void)
{
  size_t v1;
  _BYTE v2[32];
  unsigned int v3;
  int v4[2];
  int v5;
  pid_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v4 = 0xE00000001;
  v5 = 1;
  v6 = getpid();
  v1 = 648;
  v3 = 0;
  sysctl(v4, 4u, v2, &v1, 0, 0);
  return (v3 >> 11) & 1;
}

void sub_1A397EA08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _AXNSStringFromOSType(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;

  v6 = 0;
  v11 = a1;
  v7 = BYTE3(a1);
  v8 = MEMORY[0x1E0C80978];
  while (1)
  {
    v9 = *((unsigned __int8 *)&v11 + v6);
    if (*((char *)&v11 + v6) < 0)
      break;
    if ((*(_DWORD *)(v8 + 4 * v9 + 60) & 0x40000) == 0)
      goto LABEL_8;
LABEL_6:
    if (++v6 == 4)
    {
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%c%c%c%c"), a4, a5, v7, BYTE2(a1), BYTE1(a1), a1);
      return (id)objc_claimAutoreleasedReturnValue();
    }
  }
  if (__maskrune(v9, 0x40000uLL))
    goto LABEL_6;
LABEL_8:
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%u"), a4, a5, a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t AXNSStringFromAudioUnitComponentDescriptionRaw(unsigned int *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("AU Desc: (Manufacturer: %u) (Type: %u) (SubType: %u) (Flags: %u) (Flag Mask: %u)"), a4, a5, a1[2], *a1, a1[1], a1[3], a1[4]);
}

id AXAudioComponentDescUniqueTriple(unsigned int *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v6 = (void *)MEMORY[0x1E0CB3940];
  _AXNSStringFromOSType(*a1, a2, a3, a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  _AXNSStringFromOSType(a1[1], v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  _AXNSStringFromOSType(a1[2], v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v6, v18, (uint64_t)CFSTR("%@_%@_%@"), v19, v20, v7, v12, v17);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

id AXAudioComponentDescUniqueSpeechSynthTuple(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v6 = (void *)MEMORY[0x1E0CB3940];
  _AXNSStringFromOSType(*(unsigned int *)(a1 + 4), a2, a3, a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  _AXNSStringFromOSType(*(unsigned int *)(a1 + 8), v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v6, v13, (uint64_t)CFSTR("%@_%@"), v14, v15, v7, v12);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

id AXNSStringFromAudioUnitComponentDescription(unsigned int *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v6 = (void *)MEMORY[0x1E0CB3940];
  _AXNSStringFromOSType(a1[2], a2, a3, a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  _AXNSStringFromOSType(*a1, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  _AXNSStringFromOSType(a1[1], v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v6, v18, (uint64_t)CFSTR("AU Desc: (Manufacturer: %@) (Type: %@) (SubType: %@) (Flags: %u) (Flag Mask: %u)"), v19, v20, v7, v12, v17, a1[3], a1[4]);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

void sub_1A397FAD0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  NSObject *v4;
  int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int token;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  AXLogSpeechSynthesis();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    token = 138412290;
    v12 = v3;
    _os_log_impl(&dword_1A3940000, v4, OS_LOG_TYPE_INFO, "%@ requested speech voices be updated", (uint8_t *)&token, 0xCu);
  }

  token = 0;
  notify_register_check((const char *)sseNotificationName, &token);
  v5 = token;
  v10 = objc_msgSend_hash(v3, v6, v7, v8, v9);
  notify_set_state(v5, v10);
  notify_post((const char *)sseNotificationName);
  notify_cancel(token);

}

void sub_1A397FBBC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bundleIdentifier(v6, v7, v8, v9, v10);
  v14 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend_updateSpeechVoicesForClient_(a1, v11, (uint64_t)v14, v12, v13);
}

id sub_1A397FC14(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;

  if (objc_msgSend_isFirstParty(a1, a2, a3, a4, a5))
  {
    objc_msgSend_extraAttributes(a1, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)CFSTR("kTTSSynthesisProviderVoiceAttributeGroupName"), v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      v19 = v14;
    }
    else
    {
      objc_msgSend_name(a1, v15, v16, v17, v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_localizedName_forLanguage_(TTSAXResource, v21, (uint64_t)v20, 0, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend_length(v23, v24, v25, v26, v27))
      {
        v32 = v23;
      }
      else
      {
        objc_msgSend_name(a1, v28, v29, v30, v31);
        v32 = (id)objc_claimAutoreleasedReturnValue();
      }
      v19 = v32;

    }
  }
  else
  {
    objc_msgSend_manufacturerName(a1, v6, v7, v8, v9);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v19;
}

id sub_1A397FCF0(void *a1)
{
  void *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v58[5];

  v2 = (void *)MEMORY[0x1E0CB3940];
  v3 = objc_opt_class();
  objc_msgSend_name(a1, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_identifier(a1, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_supportedLanguages(a1, v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend_age(a1, v19, v20, v21, v22);
  v28 = objc_msgSend_gender(a1, v24, v25, v26, v27);
  v33 = objc_msgSend_voiceSize(a1, v29, v30, v31, v32);
  objc_msgSend_version(a1, v34, v35, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v2, v39, (uint64_t)CFSTR("[%@ %p] Name: %@, Identifier: %@, Supported Languages %@, Age: %li, Gender: %li, Size: %lli, Version: %@"), v40, v41, v3, a1, v8, v13, v18, v23, v28, v33, v38);
  v42 = (void *)objc_claimAutoreleasedReturnValue();

  if (TTSIsInternalBuild())
  {
    v47 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend_auComponentDesc(a1, v43, v44, v45, v46);
    AXNSStringFromAudioUnitComponentDescription(v58, v48, v49, v50, v51);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v47, v53, (uint64_t)CFSTR("%@, AUComponent %@"), v54, v55, v42, v52);
    v56 = objc_claimAutoreleasedReturnValue();

    v42 = (void *)v56;
  }
  return v42;
}

uint64_t sub_1A397FE3C(id a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t isEqual;

  v4 = a3;
  if (v4 == a1)
  {
    isEqual = 1;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v5 = v4;
      v10 = objc_msgSend_age(a1, v6, v7, v8, v9);
      if (v10 == objc_msgSend_age(v5, v11, v12, v13, v14)
        && (v19 = objc_msgSend_gender(a1, v15, v16, v17, v18), v19 == objc_msgSend_gender(v5, v20, v21, v22, v23)))
      {
        objc_msgSend_name(a1, v24, v25, v26, v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_name(v5, v29, v30, v31, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isEqual_(v28, v34, (uint64_t)v33, v35, v36))
        {
          objc_msgSend_primaryLanguages(a1, v37, v38, v39, v40);
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_primaryLanguages(v5, v42, v43, v44, v45);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_isEqual_(v41, v47, (uint64_t)v46, v48, v49))
          {
            objc_msgSend_supportedLanguages(a1, v50, v51, v52, v53);
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_supportedLanguages(v5, v55, v56, v57, v58);
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            isEqual = objc_msgSend_isEqual_(v54, v60, (uint64_t)v59, v61, v62);

          }
          else
          {
            isEqual = 0;
          }

        }
        else
        {
          isEqual = 0;
        }

      }
      else
      {
        isEqual = 0;
      }

    }
    else
    {
      isEqual = 0;
    }
  }

  return isEqual;
}

uint64_t sub_1A397FFBC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  objc_msgSend_name(a1, a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_hash(v6, v7, v8, v9, v10);
  objc_msgSend_supportedLanguages(a1, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend_hash(v16, v17, v18, v19, v20) ^ v11;
  objc_msgSend_primaryLanguages(a1, v22, v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend_hash(v26, v27, v28, v29, v30);
  v36 = v21 ^ v31 ^ objc_msgSend_age(a1, v32, v33, v34, v35);
  v41 = objc_msgSend_gender(a1, v37, v38, v39, v40);
  objc_msgSend_identifier(a1, v42, v43, v44, v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = v36 ^ v41 ^ objc_msgSend_hash(v46, v47, v48, v49, v50);

  return v51;
}

id sub_1A3980078(void *a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(MEMORY[0x1E0CB3780]);
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  objc_msgSend_supportedLanguages(a1, v3, v4, v5, v6, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v26, (uint64_t)v30, 16);
  if (v9)
  {
    v13 = v9;
    v14 = *(_QWORD *)v27;
    v15 = *MEMORY[0x1E0C997D0];
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v27 != v14)
          objc_enumerationMutation(v7);
        objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E0C99DC8], v10, *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * v16), v11, v12);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKey_(v17, v18, v15, v19, v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_formUnionWithCharacterSet_(v2, v22, (uint64_t)v21, v23, v24);

        ++v16;
      }
      while (v13 != v16);
      v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v26, (uint64_t)v30, 16);
    }
    while (v13);
  }

  return v2;
}

id sub_1A39801CC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10[5];

  objc_msgSend_auComponentDesc(a1, a2, a3, a4, a5);
  AXAudioComponentDescUniqueTriple(v10, v5, v6, v7, v8);
  return (id)objc_claimAutoreleasedReturnValue();
}

id sub_1A39801F8(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[20];

  objc_msgSend_auComponentDesc(a1, a2, a3, a4, a5);
  AXAudioComponentDescUniqueSpeechSynthTuple((uint64_t)v10, v5, v6, v7, v8);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1A3980224(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  const char *v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t isFirstParty;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  void *v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t isPersonalVoice;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  void *v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t hasPerVoiceSettings;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  const char *v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;

  v4 = a3;
  objc_msgSend_name(a1, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v10, (uint64_t)v9, (uint64_t)CFSTR("name"), v11);

  objc_msgSend_identifier(a1, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v17, (uint64_t)v16, (uint64_t)CFSTR("identifier"), v18);

  objc_msgSend_supportedLanguages(a1, v19, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v24, (uint64_t)v23, (uint64_t)CFSTR("supportedLanguages"), v25);

  objc_msgSend_primaryLanguages(a1, v26, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v31, (uint64_t)v30, (uint64_t)CFSTR("primaryLanguages"), v32);

  objc_msgSend_version(a1, v33, v34, v35, v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v38, (uint64_t)v37, (uint64_t)CFSTR("version"), v39);

  v40 = (void *)MEMORY[0x1E0CB37E8];
  v45 = objc_msgSend_voiceSize(a1, v41, v42, v43, v44);
  objc_msgSend_numberWithLongLong_(v40, v46, v45, v47, v48);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v50, (uint64_t)v49, (uint64_t)CFSTR("voiceSize"), v51);

  v52 = (void *)MEMORY[0x1E0CB37E8];
  v57 = objc_msgSend_gender(a1, v53, v54, v55, v56);
  objc_msgSend_numberWithInteger_(v52, v58, v57, v59, v60);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v62, (uint64_t)v61, (uint64_t)CFSTR("gender"), v63);

  v64 = (void *)MEMORY[0x1E0CB37E8];
  v69 = objc_msgSend_age(a1, v65, v66, v67, v68);
  objc_msgSend_numberWithInteger_(v64, v70, v69, v71, v72);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v74, (uint64_t)v73, (uint64_t)CFSTR("age"), v75);

  v167 = 0;
  v168 = 0;
  v169 = 0;
  objc_msgSend_auComponentDesc(a1, v76, v77, v78, v79);
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v80, v167, v81, v82);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v84, (uint64_t)v83, (uint64_t)CFSTR("auDescType"), v85);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v86, HIDWORD(v167), v87, v88);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v90, (uint64_t)v89, (uint64_t)CFSTR("auDescSubType"), v91);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v92, v168, v93, v94);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v96, (uint64_t)v95, (uint64_t)CFSTR("auDescManufacturer"), v97);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v98, HIDWORD(v168), v99, v100);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v102, (uint64_t)v101, (uint64_t)CFSTR("auDescFlags"), v103);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v104, v169, v105, v106);
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v108, (uint64_t)v107, (uint64_t)CFSTR("auDescFlagsMask"), v109);

  objc_msgSend_manufacturerName(a1, v110, v111, v112, v113);
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v115, (uint64_t)v114, (uint64_t)CFSTR("manufacturerName"), v116);

  objc_msgSend_synthesizerBundleIdentifier(a1, v117, v118, v119, v120);
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v122, (uint64_t)v121, (uint64_t)CFSTR("synthesizerBundleIdentifier"), v123);

  v124 = (void *)MEMORY[0x1E0CB37E8];
  isFirstParty = objc_msgSend_isFirstParty(a1, v125, v126, v127, v128);
  objc_msgSend_numberWithBool_(v124, v130, isFirstParty, v131, v132);
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v134, (uint64_t)v133, (uint64_t)CFSTR("isFirstParty"), v135);

  v136 = (void *)MEMORY[0x1E0CB37E8];
  isPersonalVoice = objc_msgSend_isPersonalVoice(a1, v137, v138, v139, v140);
  objc_msgSend_numberWithBool_(v136, v142, isPersonalVoice, v143, v144);
  v145 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v146, (uint64_t)v145, (uint64_t)CFSTR("isPersonalVoice"), v147);

  v148 = (void *)MEMORY[0x1E0CB37E8];
  hasPerVoiceSettings = objc_msgSend_hasPerVoiceSettings(a1, v149, v150, v151, v152);
  objc_msgSend_numberWithBool_(v148, v154, hasPerVoiceSettings, v155, v156);
  v157 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v158, (uint64_t)v157, (uint64_t)CFSTR("hasPerVoiceSettings"), v159);

  objc_msgSend_extraAttributes(a1, v160, v161, v162, v163);
  v164 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v165, (uint64_t)v164, (uint64_t)CFSTR("extraAttributes"), v166);

}

id sub_1A39805E0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;

  objc_msgSend_identifier(a1, a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v5, v6, (uint64_t)CFSTR("super-compact"), (uint64_t)CFSTR("compact"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

uint64_t TTSSpeechSetUnitTestingMode(uint64_t result)
{
  byte_1EE6D56F8 = result;
  return result;
}

uint64_t TTSSpeechUnitTestingMode()
{
  return byte_1EE6D56F8;
}

void sub_1A39806D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;

  objc_msgSend_set(MEMORY[0x1E0C99E20], a2, a3, a4, a5);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)qword_1EE6D5700;
  qword_1EE6D5700 = v5;

}

uint64_t sub_1A39806FC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1A398070C(uint64_t a1)
{

}

void sub_1A3980714(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1A3980C2C(uint64_t a1)
{
  objc_storeStrong(&qword_1EE6D4DD0, *(id *)(a1 + 32));
}

void sub_1A3980E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3980E78(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

uint64_t sub_1A39814D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setIsUserSubstitution_, 1, a4, a5);
}

void sub_1A3981754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A398176C(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1A3982998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A39829B8(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1A3982D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3983368(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 152));
  _Unwind_Resume(a1);
}

uint64_t sub_1A3983390(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  const char *v7;

  result = objc_msgSend_count(*(void **)(*(_QWORD *)(a1 + 32) + 56), a2, a3, a4, a5);
  if (result)
    return objc_msgSend__stopSpeakingRequest_atNextBoundary_synchronously_error_(*(void **)(a1 + 32), v7, 0, 0, 0, 0);
  return result;
}

void sub_1A39833DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id WeakRetained;
  const char *v16;
  uint64_t v17;
  uint64_t v18;

  objc_msgSend_date(MEMORY[0x1E0C99D68], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_timeIntervalSinceDate_(v6, v7, *(_QWORD *)(a1 + 32), v8, v9);

  AXTTSLogCommon();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    sub_1A3AB239C(v10, v11, v12, v13, v14);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_setLatencyCallback_(WeakRetained, v16, 0, v17, v18);

}

void sub_1A3983468(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1 + 32) + 56), a2, *(_QWORD *)(a1 + 40), a4, a5);
  if (TTSUseCoreSynthesizerForTTS())
  {
    objc_msgSend_coreSynth(*(void **)(a1 + 32), v6, v7, v8, v9);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_speakWithRequest_synthesizer_completionHandler_(v14, v10, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), (uint64_t)&unk_1E4AA0F50);
  }
  else
  {
    objc_msgSend_service(*(void **)(a1 + 48), v6, v7, v8, v9);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_startSpeechRequest_(v14, v11, *(_QWORD *)(a1 + 40), v12, v13);
  }

}

void sub_1A398362C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3983644(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1A3983DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  _Block_object_dispose((const void *)(v34 - 224), 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1A3983E54(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

id sub_1A3983EA0(uint64_t *a1, void *a2)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int isEqualToString;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  v4 = a2;
  if (objc_msgSend_length((void *)a1[4], v5, v6, v7, v8))
  {
    objc_msgSend_voiceId(v4, v9, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v13, v14, a1[4], v15, v16);

    if (isEqualToString)
      objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a2);
  }
  v18 = (void *)a1[6];
  objc_msgSend_voiceId(v4, v9, v10, v11, v12);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_voiceForIdentifier_(v18, v20, (uint64_t)v19, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  return v23;
}

void sub_1A3983F50(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  char isVoiceValid;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v2 = *(id *)(a1 + 32);
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v34, (uint64_t)v38, 16);
  if (v4)
  {
    v9 = v4;
    v10 = *(_QWORD *)v35;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v35 != v10)
          objc_enumerationMutation(v2);
        v12 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
        if (objc_msgSend_isDefault(v12, v5, v6, v7, v8, (_QWORD)v34))
          objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v12);
        if (*(_QWORD *)(a1 + 40))
        {
          objc_msgSend_identifier(v12, v13, v14, v15, v16);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_isEqualToString_(v17, v18, *(_QWORD *)(a1 + 40), v19, v20))
          {

LABEL_14:
            objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v12);
            goto LABEL_15;
          }
          v25 = objc_msgSend_footprint(v12, v21, v22, v23, v24);

          if (v25 == 4)
            goto LABEL_14;
        }
        if (*(_BYTE *)(a1 + 72))
        {
          v26 = *(_QWORD *)(a1 + 64);
          if (v26 == objc_msgSend_footprint(v12, v13, v14, v15, v16))
            goto LABEL_14;
        }
LABEL_15:
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v28 = *(void **)(v27 + 40);
        if (v28)
        {
          objc_msgSend_service(v12, v13, v14, v15, v16);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          isVoiceValid = objc_msgSend_isVoiceValid_(v29, v30, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v31, v32);

          if ((isVoiceValid & 1) != 0)
            goto LABEL_20;
          v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          v28 = *(void **)(v27 + 40);
        }
        *(_QWORD *)(v27 + 40) = 0;

      }
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v34, (uint64_t)v38, 16);
    }
    while (v9);
  }
LABEL_20:

}

void sub_1A398412C(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int isVoiceValid;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v2 = *(id *)(a1 + 32);
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v18, (uint64_t)v22, 16);
  if (v4)
  {
    v9 = v4;
    v10 = *(_QWORD *)v19;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v19 != v10)
          objc_enumerationMutation(v2);
        v12 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        objc_msgSend_service(v12, v5, v6, v7, v8, (_QWORD)v18);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        isVoiceValid = objc_msgSend_isVoiceValid_(v13, v14, (uint64_t)v12, v15, v16);

        if (isVoiceValid)
        {
          objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v12);
          goto LABEL_11;
        }
      }
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v18, (uint64_t)v22, 16);
      if (v9)
        continue;
      break;
    }
  }
LABEL_11:

}

intptr_t sub_1A3984498(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t sub_1A39846E4(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1A39849C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__setDelegate_, *(_QWORD *)(a1 + 40), a4, a5);
}

uint64_t sub_1A3984A98(uint64_t a1, const char *a2)
{
  uint64_t result;

  result = objc_msgSend__stopSpeakingRequest_atNextBoundary_synchronously_error_(*(void **)(a1 + 32), a2, 0, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 56));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1A3984B78(uint64_t a1, const char *a2)
{
  uint64_t result;

  result = objc_msgSend__pauseSpeakingRequest_atNextBoundary_synchronously_error_(*(void **)(a1 + 32), a2, 0, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 56));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1A3984C48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = objc_msgSend__continueSpeakingRequest_withError_(*(void **)(a1 + 32), a2, 0, *(_QWORD *)(a1 + 48), a5);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1A3984D6C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  _QWORD v19[5];

  objc_msgSend_lastObject(*(void **)(*(_QWORD *)(a1 + 32) + 56), a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_voice(v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_service(v11, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = sub_1A3984E10;
  v19[3] = &unk_1E4AA1040;
  v19[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend_getSpeechIsActiveForRequest_reply_(v16, v17, (uint64_t)v6, (uint64_t)v19, v18);

}

uint64_t sub_1A3984E10(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_1A3985150(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  objc_msgSend_speechSynthesizer_didStartSpeakingRequest_(WeakRetained, v2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v3);

}

void sub_1A3985230(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  objc_msgSend_speechSynthesizer_didPauseSpeakingRequest_(WeakRetained, v2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v3);

}

void sub_1A3985310(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  objc_msgSend_speechSynthesizer_didContinueSpeakingRequest_(WeakRetained, v2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v3);

}

void sub_1A3985428(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _BYTE *v17;
  NSObject *v18;
  void *v19;
  id *v20;
  id *v21;
  id *v22;
  NSObject *v23;
  void *v24;
  _QWORD block[5];
  id v26;
  id v27;
  id v28;
  char v29;
  _QWORD v30[5];
  id v31;
  id v32;
  id v33;
  NSObject *v34;
  char v35;
  _QWORD aBlock[4];
  id v37;
  uint64_t v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend_containsObject_(*(void **)(*(_QWORD *)(a1 + 32) + 56), a2, *(_QWORD *)(a1 + 40), a4, a5) & 1) == 0)
  {
    AXTTSLogCommon();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56);
      *(_DWORD *)buf = 138412546;
      v40 = v7;
      v41 = 2112;
      v42 = v8;
      _os_log_impl(&dword_1A3940000, v6, OS_LOG_TYPE_DEFAULT, "We do not have a record of this request: %@ [%@]", buf, 0x16u);
    }

  }
  v9 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1A3985688;
  aBlock[3] = &unk_1E4A9FB48;
  v10 = *(id *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 32);
  v37 = v10;
  v38 = v11;
  v16 = _Block_copy(aBlock);
  v17 = *(_BYTE **)(a1 + 32);
  if ((v17[64] & 4) != 0)
  {
    objc_msgSend_delegateTargetQueue(v17, v12, v13, v14, v15);
    v23 = objc_claimAutoreleasedReturnValue();
    v30[0] = v9;
    v30[1] = 3221225472;
    v30[2] = sub_1A39856B8;
    v30[3] = &unk_1E4AA1068;
    v24 = *(void **)(a1 + 40);
    v30[4] = *(_QWORD *)(a1 + 32);
    v20 = &v31;
    v31 = v24;
    v35 = *(_BYTE *)(a1 + 64);
    v21 = &v32;
    v32 = *(id *)(a1 + 48);
    v22 = &v33;
    v33 = *(id *)(a1 + 56);
    v34 = v16;
    dispatch_async(v23, v30);

    v18 = v34;
    goto LABEL_9;
  }
  if ((v17[64] & 2) != 0)
  {
    objc_msgSend_delegateTargetQueue(v17, v12, v13, v14, v15);
    v18 = objc_claimAutoreleasedReturnValue();
    block[0] = v9;
    block[1] = 3221225472;
    block[2] = sub_1A3985704;
    block[3] = &unk_1E4AA1090;
    v19 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v20 = &v26;
    v26 = v19;
    v29 = *(_BYTE *)(a1 + 64);
    v21 = &v27;
    v27 = *(id *)(a1 + 56);
    v22 = &v28;
    v28 = v16;
    dispatch_async(v18, block);
LABEL_9:

  }
}

uint64_t sub_1A3985688(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;

  objc_msgSend_setDelegate_(*(void **)(a1 + 32), a2, 0, a4, a5);
  return objc_msgSend_removeObject_(*(void **)(*(_QWORD *)(a1 + 40) + 56), v6, *(_QWORD *)(a1 + 32), v7, v8);
}

void sub_1A39856B8(uint64_t a1)
{
  id WeakRetained;
  const char *v3;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  objc_msgSend_speechSynthesizer_didFinishSpeakingRequest_successfully_phonemesSpoken_withError_(WeakRetained, v3, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  dispatch_async(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 48), *(dispatch_block_t *)(a1 + 64));
}

void sub_1A3985704(uint64_t a1)
{
  id WeakRetained;
  const char *v3;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  objc_msgSend_speechSynthesizer_didFinishSpeakingRequest_successfully_withError_(WeakRetained, v3, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 48));

  dispatch_async(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 48), *(dispatch_block_t *)(a1 + 56));
}

void sub_1A39858CC(uint64_t *a1)
{
  const char *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 16));
  objc_msgSend_speechSynthesizer_didEncounterMarker_forRequest_(WeakRetained, v2, a1[4], a1[5], a1[6]);

}

void sub_1A3985910(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  v2 = *(_QWORD *)(a1 + 32);
  v7 = objc_msgSend_wordRange(*(void **)(a1 + 40), v3, v4, v5, v6);
  objc_msgSend_speechSynthesizer_willSpeakRangeOfSpeechString_forRequest_(WeakRetained, v8, v2, v7, (uint64_t)v8, *(_QWORD *)(a1 + 48));

}

void sub_1A39862E0(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D5718, a3, (void *)1);
}

id sub_1A39862F0(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5718);
}

uint64_t _TTSIdentifierForVoiceInformation(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_voiceIdentifierForType_footprint_language_name_(TTSSiriAssetManager, a2, a3, (uint64_t)a2, a1, a5);
}

Class sub_1A3986314(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Class result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  if (!qword_1ED1B5660)
  {
    v12 = xmmword_1E4AA10D8;
    v13 = 0;
    qword_1ED1B5660 = _sl_dlopen();
  }
  if (!qword_1ED1B5660)
    sub_1A3AB2470(&v11, a2, a3, a4, a5);
  result = objc_getClass("AXSettings");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1A3AB24EC((uint64_t)result, v7, v8, v9, v10);
  qword_1ED1B5698 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1A39863F0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  objc_super v17;

  v6 = a3;
  v7 = a4;
  v17.receiver = a1;
  v17.super_class = (Class)&off_1EE6F8580;
  v8 = objc_msgSendSuper2(&v17, sel_init);
  v12 = v8;
  if (v8)
  {
    objc_msgSend_setSsmlRepresentation_(v8, v9, (uint64_t)v6, v10, v11);
    objc_msgSend_setVoice_(v12, v13, (uint64_t)v7, v14, v15);
  }

  return v12;
}

void sub_1A3986478(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  id v25;

  v4 = a3;
  objc_msgSend_ssmlRepresentation(a1, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v10, (uint64_t)v9, (uint64_t)CFSTR("ssmlRepresentation"), v11);

  objc_msgSend_voice(a1, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v17, (uint64_t)v16, (uint64_t)CFSTR("voice"), v18);

  objc_msgSend_jobIdentifier(a1, v19, v20, v21, v22);
  v25 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(v4, v23, (uint64_t)v25, (uint64_t)CFSTR("jobIdentifier"), v24);

}

id sub_1A3986528(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  objc_super v29;

  v4 = a3;
  v29.receiver = a1;
  v29.super_class = (Class)&off_1EE6F8580;
  v5 = objc_msgSendSuper2(&v29, sel_init);
  if (v5)
  {
    v6 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v7, v6, (uint64_t)CFSTR("voice"), v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setVoice_(v5, v10, (uint64_t)v9, v11, v12);

    v13 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v14, v13, (uint64_t)CFSTR("ssmlRepresentation"), v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSsmlRepresentation_(v5, v17, (uint64_t)v16, v18, v19);

    v20 = objc_opt_class();
    objc_msgSend_decodeObjectOfClass_forKey_(v4, v21, v20, (uint64_t)CFSTR("jobIdentifier"), v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setJobIdentifier_(v5, v24, (uint64_t)v23, v25, v26);

    v27 = v5;
  }

  return v5;
}

void sub_1A3986634(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D5720, a3, (void *)3);
}

id sub_1A3986644(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5720);
}

void sub_1A3986650(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D5721, a3, (void *)0x301);
}

id sub_1A3986660(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5721);
}

void sub_1A398666C(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D5722, a3, (void *)3);
}

id sub_1A398667C(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5722);
}

id sub_1A3986688(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v6 = (void *)MEMORY[0x1E0CB3940];
  v7 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_ssmlRepresentation(a1, a2, a3, a4, a5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_length(v8, v9, v10, v11, v12);
  objc_msgSend_numberWithUnsignedInteger_(v7, v14, v13, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_voice(a1, v18, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v6, v23, (uint64_t)CFSTR("SSML Length: %@, Voice: %@"), v24, v25, v17, v22);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  return v26;
}

uint64_t sub_1A3986724(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  objc_msgSend_ssmlRepresentation(a1, a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_hash(v6, v7, v8, v9, v10);
  objc_msgSend_voice(a1, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend_hash(v16, v17, v18, v19, v20) ^ v11;

  return v21;
}

uint64_t sub_1A3986780(id a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t isEqual;

  v4 = a3;
  if (v4 == a1)
  {
    isEqual = 1;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v5 = v4;
      objc_msgSend_voice(a1, v6, v7, v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_voice(v5, v11, v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_isEqual_(v10, v16, (uint64_t)v15, v17, v18))
      {
        objc_msgSend_ssmlRepresentation(a1, v19, v20, v21, v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_ssmlRepresentation(v5, v24, v25, v26, v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        isEqual = objc_msgSend_isEqual_(v23, v29, (uint64_t)v28, v30, v31);

      }
      else
      {
        isEqual = 0;
      }

    }
    else
    {
      isEqual = 0;
    }
  }

  return isEqual;
}

double ausdk::AUEffectBase::AUEffectBase(ausdk::AUEffectBase *this, OpaqueAudioComponentInstance *a2, char a3)
{
  ausdk::AUBase *v4;
  double result;

  v4 = ausdk::AUBase::AUBase(this, a2, 1, 1, 0);
  *(_QWORD *)v4 = off_1E4A9C730;
  *((_QWORD *)v4 + 66) = 0;
  result = 0.0;
  *(_OWORD *)((char *)v4 + 536) = 0u;
  *((_WORD *)v4 + 276) = 0;
  *((_BYTE *)v4 + 554) = a3;
  *((_DWORD *)v4 + 139) = 0;
  *((_BYTE *)v4 + 560) = 0;
  *((_DWORD *)v4 + 147) = 0;
  *(_OWORD *)((char *)v4 + 568) = 0u;
  *((_BYTE *)v4 + 584) = 0;
  return result;
}

{
  ausdk::AUBase *v4;
  double result;

  v4 = ausdk::AUBase::AUBase(this, a2, 1, 1, 0);
  *(_QWORD *)v4 = off_1E4A9C730;
  *((_QWORD *)v4 + 66) = 0;
  result = 0.0;
  *(_OWORD *)((char *)v4 + 536) = 0u;
  *((_WORD *)v4 + 276) = 0;
  *((_BYTE *)v4 + 554) = a3;
  *((_DWORD *)v4 + 139) = 0;
  *((_BYTE *)v4 + 560) = 0;
  *((_DWORD *)v4 + 147) = 0;
  *(_OWORD *)((char *)v4 + 568) = 0u;
  *((_BYTE *)v4 + 584) = 0;
  return result;
}

double ausdk::AUEffectBase::Cleanup(ausdk::AUEffectBase *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v2 = (_QWORD *)*((_QWORD *)this + 67);
  v3 = (_QWORD *)*((_QWORD *)this + 66);
  while (v2 != v3)
  {
    v5 = *--v2;
    v4 = v5;
    *v2 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *((_QWORD *)this + 67) = v3;
  result = 0.0;
  *(_OWORD *)((char *)this + 568) = 0u;
  return result;
}

uint64_t ausdk::AUEffectBase::Initialize(ausdk::AUEffectBase *this)
{
  char *v2;
  int v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  unint64_t v8;
  __int16 *v9;
  int v10;
  int v11;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v17;
  BOOL v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (char *)this + 80;
  v3 = *(_DWORD *)(sub_1A395EDFC((uint64_t)this + 80, 0) + 108);
  v4 = *(_DWORD *)(sub_1A395EDFC((uint64_t)this + 128, 0) + 108);
  v24 = 0;
  v5 = (*(uint64_t (**)(ausdk::AUEffectBase *, uint64_t *))(*(_QWORD *)this + 376))(this, &v24);
  if (v5)
    v6 = v24 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (v4 << 16 == v3 << 16 && v4 << 16 != 0)
    {
LABEL_46:
      ausdk::AUEffectBase::MaintainKernels((uint64_t)this);
      *((_QWORD *)this + 71) = sub_1A395EDFC((uint64_t)this + 128, 0);
      *((_QWORD *)this + 72) = sub_1A395EDFC((uint64_t)v2, 0);
      v23 = 0;
      v21 = 0u;
      v22 = 0u;
      (*(void (**)(__int128 *__return_ptr, ausdk::AUEffectBase *, uint64_t, _QWORD))(*(_QWORD *)this + 392))(&v21, this, 2, 0);
      result = 0;
      *((_DWORD *)this + 147) = DWORD2(v22);
      return result;
    }
  }
  else
  {
    v8 = 0;
    do
    {
      while (1)
      {
        v9 = (__int16 *)(v24 + 4 * v8);
        v10 = *v9;
        v11 = v9[1];
        if ((v10 & 0x80000000) == 0 || (v11 & 0x80000000) == 0)
          break;
        if (v10 == -1 && v11 == -2)
          goto LABEL_46;
        v13 = (v10 & v11) == 0xFFFFFFFF && (unsigned __int16)(v4 ^ v3) == 0;
        v14 = v13;
        v15 = v11 == -1 && v10 == -2;
        if (v15 || v14)
          goto LABEL_46;
        if (++v8 >= v5)
          return 4294956428;
      }
      v17 = v11 == -1 || (__int16)v4 == v11;
      v19 = (v10 == -1 || (__int16)v3 == v10) && v17;
      ++v8;
    }
    while (v8 < v5 && !v19);
    if (v19)
      goto LABEL_46;
  }
  return 4294956428;
}

uint64_t ausdk::AUEffectBase::MaintainKernels(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  int64x2_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64x2_t v33;
  char *v34;
  uint64_t v35;

  v1 = this;
  if (*(_BYTE *)(this + 584))
  {
    v2 = 1;
  }
  else
  {
    this = sub_1A395EDFC(this + 128, 0);
    v2 = *(_DWORD *)(this + 108);
  }
  v3 = *(_QWORD *)(v1 + 536);
  v4 = (v3 - *(_QWORD *)(v1 + 528)) >> 3;
  v5 = (int64x2_t *)(v1 + 528);
  v6 = v2;
  if (v4 >= v2)
  {
    if (v4 > v2)
    {
      v25 = (uint64_t *)(v3 - 8);
      v26 = v3 - 8;
      do
      {
        this = *v25;
        *v25 = 0;
        if (this)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        *(_QWORD *)(v1 + 536) = v25;
        v27 = v26 - *(_QWORD *)(v1 + 528);
        v26 -= 8;
        --v25;
      }
      while (v6 < v27 >> 3);
    }
  }
  else
  {
    this = sub_1A3986F58((char **)(v1 + 528), v2);
    v7 = (*(_QWORD *)(v1 + 536) - *(_QWORD *)(v1 + 528)) >> 3;
    if (v6 > v7)
    {
      do
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v1 + 576))(&v31, v1);
        v8 = *(uint64_t **)(v1 + 536);
        v9 = *(_QWORD *)(v1 + 544);
        if ((unint64_t)v8 >= v9)
        {
          v12 = ((uint64_t)v8 - v5->i64[0]) >> 3;
          if ((unint64_t)(v12 + 1) >> 61)
            sub_1A395516C();
          v13 = v9 - v5->i64[0];
          v14 = v13 >> 2;
          if (v13 >> 2 <= (unint64_t)(v12 + 1))
            v14 = v12 + 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          v35 = v1 + 544;
          if (v15)
            v16 = (char *)sub_1A3964890(v1 + 544, v15);
          else
            v16 = 0;
          v17 = (uint64_t *)&v16[8 * v12];
          v18 = &v16[8 * v15];
          v34 = v18;
          v19 = v31;
          v31 = 0;
          *v17 = v19;
          v11 = v17 + 1;
          v33.i64[1] = (uint64_t)(v17 + 1);
          v20 = *(_QWORD **)(v1 + 536);
          v21 = *(_QWORD **)(v1 + 528);
          if (v20 == v21)
          {
            v23 = vdupq_n_s64((unint64_t)v20);
          }
          else
          {
            do
            {
              v22 = *--v20;
              *v20 = 0;
              *--v17 = v22;
            }
            while (v20 != v21);
            v23 = *v5;
            v11 = (_QWORD *)v33.i64[1];
            v18 = v34;
          }
          *(_QWORD *)(v1 + 528) = v17;
          *(_QWORD *)(v1 + 536) = v11;
          v33 = v23;
          v24 = *(char **)(v1 + 544);
          *(_QWORD *)(v1 + 544) = v18;
          v34 = v24;
          v32 = v23.i64[0];
          sub_1A3987664((uint64_t)&v32);
        }
        else
        {
          v10 = v31;
          v31 = 0;
          *v8 = v10;
          v11 = v8 + 1;
        }
        *(_QWORD *)(v1 + 536) = v11;
        this = v31;
        v31 = 0;
        if (this)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        LODWORD(v7) = v7 + 1;
      }
      while ((_DWORD)v7 != (_DWORD)v6);
    }
  }
  if ((_DWORD)v6)
  {
    v28 = 0;
    v29 = v5->i64[0];
    do
    {
      v30 = *(_QWORD *)(v29 + 8 * v28);
      if (v30)
        *(_DWORD *)(v30 + 16) = v28;
      ++v28;
    }
    while (v6 != v28);
  }
  return this;
}

void sub_1A3986D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t ausdk::AUEffectBase::Reset(ausdk::AUEffectBase *this)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)*((_QWORD *)this + 66);
  v3 = (_QWORD *)*((_QWORD *)this + 67);
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 16))(*v2);
    ++v2;
  }
  return ausdk::AUBase::Reset(this);
}

uint64_t ausdk::AUEffectBase::GetPropertyInfo(ausdk::AUEffectBase *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || (a2 | 8) != 0x1D)
    return ausdk::AUBase::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  *a6 = 1;
  *a5 = 4;
  return 0;
}

uint64_t ausdk::AUEffectBase::GetProperty(ausdk::AUEffectBase *this, unsigned int a2, unsigned int a3, unsigned int a4, _DWORD *a5)
{
  int v6;

  if (a3)
    return ausdk::AUBase::GetProperty(this, a2, a3, a4, a5);
  if (a2 == 29)
  {
    v6 = *((unsigned __int8 *)this + 554);
  }
  else
  {
    if (a2 != 21)
      return ausdk::AUBase::GetProperty(this, a2, a3, a4, a5);
    v6 = *((unsigned __int8 *)this + 552);
  }
  *a5 = v6;
  return 0;
}

uint64_t ausdk::AUEffectBase::SetProperty(ausdk::AUEffectBase *this, unsigned int a2, unsigned int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result;
  int v8;

  if (a3)
    return ausdk::AUBase::SetProperty(this, a2, a3, a4, a5);
  if (a2 == 29)
  {
    result = 0;
    *((_BYTE *)this + 554) = *a5 != 0;
  }
  else
  {
    if (a2 != 21)
      return ausdk::AUBase::SetProperty(this, a2, a3, a4, a5);
    if (a6 < 4)
    {
      return 4294956445;
    }
    else
    {
      v8 = *a5;
      if ((*a5 != 0) != (*((_BYTE *)this + 552) != 0))
      {
        if (!v8 && *((_BYTE *)this + 552))
        {
          if (*((_BYTE *)this + 17))
            (*(void (**)(ausdk::AUEffectBase *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
        }
        (*(void (**)(ausdk::AUEffectBase *, BOOL))(*(_QWORD *)this + 584))(this, v8 != 0);
      }
      return 0;
    }
  }
  return result;
}

uint64_t ausdk::AUEffectBase::GetNumberOfChannels(ausdk::AUEffectBase *this)
{
  return *(unsigned int *)(sub_1A395EDFC((uint64_t)this + 128, 0) + 108);
}

uint64_t sub_1A3986F58(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      sub_1A395516C();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)sub_1A3964890(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[8 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return sub_1A3987664((uint64_t)&v14);
  }
  return result;
}

BOOL ausdk::AUEffectBase::StreamFormatWritable(ausdk::AUEffectBase *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t ausdk::AUEffectBase::ChangeStreamFormat(ausdk::AUEffectBase *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  uint64_t v8;

  v8 = ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  if (!(_DWORD)v8 && *((_BYTE *)this + 553) && a4->mSampleRate != a5->mSampleRate)
    (*(void (**)(ausdk::AUEffectBase *, uint64_t, _QWORD, _QWORD, Float64))(*(_QWORD *)this + 432))(this, 3, 0, 0, a4->mSampleRate);
  return v8;
}

uint64_t ausdk::AUEffectBase::ProcessScheduledSlice(ausdk::AUEffectBase *this, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;

  v5 = *a2;
  v7 = (unsigned int *)a2[1];
  v6 = (unsigned int *)a2[2];
  v8 = *((_DWORD *)this + 147) * a4;
  v9 = *v7;
  if ((_DWORD)v9)
  {
    v10 = v7 + 3;
    do
    {
      *v10 = *(v10 - 1) * v8;
      v10 += 4;
      --v9;
    }
    while (v9);
  }
  v11 = *v6;
  if ((_DWORD)v11)
  {
    v12 = v6 + 3;
    do
    {
      *v12 = *(v12 - 1) * v8;
      v12 += 4;
      --v11;
    }
    while (v11);
  }
  result = (*(uint64_t (**)(ausdk::AUEffectBase *, uint64_t, unsigned int *, unsigned int *, uint64_t))(*(_QWORD *)this + 176))(this, v5, v7, v6, a4);
  v14 = *v7;
  if ((_DWORD)v14)
  {
    v15 = v7 + 4;
    do
    {
      *v15 += (*((_DWORD *)v15 - 2) * v8);
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  v16 = *v6;
  if ((_DWORD)v16)
  {
    v17 = v6 + 4;
    do
    {
      *v17 += (*((_DWORD *)v17 - 2) * v8);
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t ausdk::AUEffectBase::Render(ausdk::AUInputElement **this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8;
  ausdk::AUInputElement *v9;
  unsigned int *v10;
  ausdk::AUInputElement *v11;
  _DWORD *v12;
  ausdk::AUInputElement *v14;
  ausdk::AUInputElement *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int *v27;
  unsigned int v28;
  void **v29;
  _QWORD v30[3];

  if (!sub_1A398738C((uint64_t)this, 0))
    return 4294956420;
  v8 = ausdk::AUInputElement::PullInput(this[72], a2, a3, 0, a4);
  if (!(_DWORD)v8)
  {
    if (*((_BYTE *)this + 554))
    {
      v9 = this[71];
      if (*((_BYTE *)v9 + 168))
      {
        v10 = (unsigned int *)sub_1A395EFB4((uint64_t)this[72] + 144);
        sub_1A39876C4((uint64_t)v9 + 144, v10);
      }
    }
    if ((*((unsigned int (**)(ausdk::AUInputElement **))*this + 74))(this))
    {
      if (!*((_BYTE *)this + 554))
      {
        v11 = this[72];
        v12 = (_DWORD *)sub_1A395EFB4((uint64_t)this[71] + 144);
        sub_1A398775C((_QWORD *)v11 + 18, v12);
      }
      v8 = 0;
    }
    else
    {
      v14 = this[48];
      v15 = this[49];
      v16 = (unsigned int *)sub_1A395EFB4((uint64_t)this[72] + 144);
      v17 = sub_1A395EFB4((uint64_t)this[71] + 144);
      v18 = (unsigned int *)v17;
      if (v14 == v15)
      {
        v8 = (*((uint64_t (**)(ausdk::AUInputElement **, unsigned int *, unsigned int *, uint64_t, uint64_t))*this
              + 22))(this, a2, v16, v17, a4);
      }
      else
      {
        v30[0] = a2;
        v30[1] = v16;
        v30[2] = v17;
        v8 = (*((uint64_t (**)(ausdk::AUInputElement **, char *, uint64_t, _QWORD *))*this + 70))(this, (char *)this + 384, a4, v30);
        v19 = *((_DWORD *)this + 147) * a4;
        v20 = *v16;
        if ((_DWORD)v20)
        {
          v21 = v16 + 4;
          do
          {
            v22 = (*((_DWORD *)v21 - 2) * v19);
            *v21 -= v22;
            *((_DWORD *)v21 - 1) = v22;
            v21 += 2;
            --v20;
          }
          while (v20);
        }
        v23 = *v18;
        if ((_DWORD)v23)
        {
          v24 = v18 + 4;
          do
          {
            v25 = (*((_DWORD *)v24 - 2) * v19);
            *v24 -= v25;
            *((_DWORD *)v24 - 1) = v25;
            v24 += 2;
            --v23;
          }
          while (v23);
        }
      }
    }
    if ((*(_BYTE *)a2 & 0x10) != 0 && !*((_BYTE *)this + 554))
    {
      v26 = (_DWORD *)sub_1A395EFB4((uint64_t)this[71] + 144);
      if (*v26)
      {
        v27 = v26;
        v28 = 0;
        v29 = (void **)(v26 + 4);
        do
        {
          bzero(*v29, *((unsigned int *)v29 - 1));
          ++v28;
          v29 += 2;
        }
        while (v28 < *v27);
      }
    }
  }
  return v8;
}

uint64_t sub_1A398738C(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 120);
  if (!v3)
  {
    v6 = a1 + 96;
    v5 = *(_QWORD *)(a1 + 96);
    if (a2 >= (unint64_t)((*(_QWORD *)(v6 + 8) - v5) >> 3))
      return 0;
    result = *(_QWORD *)(v5 + 8 * a2);
    if (!result)
      return result;
    return *(_DWORD *)(result + 172) != 0;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  if (result)
    return *(_DWORD *)(result + 172) != 0;
  return result;
}

uint64_t ausdk::AUEffectBase::ProcessBufferLists(ausdk::AUEffectBase *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v18;

  if (((*(uint64_t (**)(ausdk::AUEffectBase *))(*(_QWORD *)this + 592))(this) & 1) == 0)
  {
    v10 = sub_1A39874E4((uint64_t)this, *a2, a5);
    *a2 |= 0x10u;
    v11 = *((_QWORD *)this + 67);
    v12 = *((_QWORD *)this + 66);
    if (v11 != v12)
    {
      v13 = v10;
      v14 = 0;
      v15 = 1;
      do
      {
        v16 = *(_QWORD *)(v12 + 8 * v14);
        if (v16)
        {
          v18 = v13;
          (*(void (**)(uint64_t, void *, void *, uint64_t, char *))(*(_QWORD *)v16 + 24))(v16, a3->mBuffers[v14].mData, a4->mBuffers[v14].mData, a5, &v18);
          if (!v18)
            *a2 &= ~0x10u;
          v11 = *((_QWORD *)this + 67);
          v12 = *((_QWORD *)this + 66);
        }
        v14 = v15++;
      }
      while (v14 < (v11 - v12) >> 3);
    }
  }
  return 0;
}

uint64_t sub_1A39874E4(uint64_t a1, char a2, unsigned int a3)
{
  double v6;
  double v7;
  double v8;
  uint64_t result;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;

  v6 = *(double *)(sub_1A395EDFC(a1 + 128, 0) + 80);
  v7 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
  if ((a2 & 0x10) == 0)
  {
    result = 0;
    *(_BYTE *)(a1 + 560) = 1;
    return result;
  }
  if (!*(_BYTE *)(a1 + 560))
  {
    v10 = *(_DWORD *)(a1 + 556);
    if (v10)
      goto LABEL_5;
    return 1;
  }
  v10 = (v6 * (v7 + v8));
  *(_DWORD *)(a1 + 556) = v10;
  *(_BYTE *)(a1 + 560) = 0;
  if (!v10)
    return 1;
LABEL_5:
  result = 0;
  v11 = v10 >= a3;
  v12 = v10 - a3;
  if (!v11)
    v12 = 0;
  *(_DWORD *)(a1 + 556) = v12;
  return result;
}

double ausdk::AUEffectBase::GetSampleRate(ausdk::AUEffectBase *this)
{
  return *(double *)(sub_1A395EDFC((uint64_t)this + 128, 0) + 80);
}

void sub_1A39875C0(void **a1)
{
  void **v2;

  *a1 = off_1E4A9C730;
  v2 = a1 + 66;
  sub_1A396EAFC(&v2);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)a1);
}

uint64_t sub_1A3987608(void **a1)
{
  void **v3;

  *a1 = off_1E4A9C730;
  v3 = a1 + 66;
  sub_1A396EAFC(&v3);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)a1);
  return MEMORY[0x1A8596C28]();
}

uint64_t sub_1A3987664(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *sub_1A39876C4(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  void *exception;

  v2 = *a2;
  if (*(_DWORD *)(a1 + 16) < v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1A3AB2564();
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A39532E0((uint64_t)exception, -1);
    __cxa_throw(exception, (struct type_info *)&unk_1E4A9C228, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  *(_DWORD *)a1 = 2;
  return memcpy((void *)(*(_QWORD *)(a1 + 8) + 48), a2, (16 * v2) | 8);
}

void sub_1A3987748(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1A398775C(_QWORD *result, _DWORD *a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *exception;

  if (!*(_DWORD *)result)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1A3AB2564();
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A39532E0((uint64_t)exception, -1);
    __cxa_throw(exception, (struct type_info *)&unk_1E4A9C228, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v3 = *a2;
  if (*a2)
  {
    v4 = 0;
    v5 = result[1];
    v6 = v5 + 56;
    v7 = (void **)(a2 + 4);
    do
    {
      if (v4 < *(_DWORD *)(v5 + 48))
        v8 = 0;
      else
        v8 = -1;
      v9 = v6 + 16 * v8;
      result = *v7;
      v10 = *(void **)(v9 + 8);
      if (*v7 != v10)
      {
        result = memmove(result, v10, *(unsigned int *)(v9 + 4));
        v3 = *a2;
      }
      *((_DWORD *)v7 - 1) = *(_DWORD *)(v9 + 4);
      ++v4;
      v6 = v9 + 16;
      v7 += 2;
    }
    while (v4 < v3);
  }
  return result;
}

void sub_1A3987834(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1A39878B8()
{
  _QWORD *result;

  result = malloc_type_malloc(0x2E8uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = AUSpeechEnhancerV2::AUSpeechEnhancerV2;
  result[5] = sub_1A3987914;
  result[6] = 0;
  result[7] = 0;
  return result;
}

uint64_t sub_1A3987914(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1A3987B84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[5];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v19 = 0;
  v20 = &v19;
  v21 = 0x2050000000;
  v5 = (void *)qword_1EE6D5738;
  v22 = qword_1EE6D5738;
  if (!qword_1EE6D5738)
  {
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = sub_1A398B394;
    v18[3] = &unk_1E4A9FC10;
    v18[4] = &v19;
    sub_1A398B394((uint64_t)v18, a2, a3, a4, a5);
    v5 = (void *)v20[3];
  }
  v6 = objc_retainAutorelease(v5);
  _Block_object_dispose(&v19, 8);
  objc_msgSend_sharedInstance(v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_allowAppUsage(v11, v12, v13, v14, v15);

  return v16;
}

void sub_1A3987C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_TtC12TextToSpeech15CoreSynthesizer *sub_1A3987C5C(void *a1)
{
  _TtC12TextToSpeech15CoreSynthesizer *v2;

  if (TTSUseCoreSynthesizerForAV())
  {
    objc_getAssociatedObject(a1, &unk_1EE6D5729);
    v2 = (_TtC12TextToSpeech15CoreSynthesizer *)objc_claimAutoreleasedReturnValue();
    if (!v2)
    {
      v2 = objc_alloc_init(_TtC12TextToSpeech15CoreSynthesizer);
      objc_setAssociatedObject(a1, &unk_1EE6D5729, v2, (void *)1);
    }
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void sub_1A3987CD0(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, &unk_1EE6D572A, a3, 0);
}

id sub_1A3987CE0(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D572A);
}

id sub_1A3987CEC(void *a1)
{
  id v2;

  if ((TTSUseCoreSynthesizerForAV() & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    objc_getAssociatedObject(a1, &unk_1EE6D572B);
    v2 = (id)objc_claimAutoreleasedReturnValue();
    if (!v2)
    {
      v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      objc_setAssociatedObject(a1, &unk_1EE6D572B, v2, (void *)1);
    }
  }
  return v2;
}

void sub_1A3987D60(void *a1, uint64_t a2, void *a3)
{
  id value;

  value = a3;
  if ((TTSUseCoreSynthesizerForAV() & 1) == 0)
    objc_setAssociatedObject(a1, &unk_1EE6D572C, value, (void *)1);

}

id sub_1A3987DB0(void *a1)
{
  void *v2;

  if ((TTSUseCoreSynthesizerForAV() & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    objc_getAssociatedObject(a1, &unk_1EE6D572C);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

uint64_t sub_1A3987DF0(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_getAssociatedObject(a1, &unk_1EE6D572D);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A3987E2C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D572D, v6, (void *)1);

}

uint64_t sub_1A3987E80(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_getAssociatedObject(a1, &unk_1EE6D572E);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A3987EBC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D572E, v6, (void *)1);

}

TTSSpeechManager *sub_1A3987F10(void *a1)
{
  TTSSpeechManager *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  if ((TTSUseCoreSynthesizerForAV() & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    objc_getAssociatedObject(a1, &unk_1EE6D572F);
    v2 = (TTSSpeechManager *)objc_claimAutoreleasedReturnValue();
    if (!v2)
    {
      v2 = objc_alloc_init(TTSSpeechManager);
      objc_msgSend_speechSource(a1, v3, v4, v5, v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setSpeechSource_(v2, v8, (uint64_t)v7, v9, v10);

      objc_setAssociatedObject(a1, &unk_1EE6D572F, v2, (void *)1);
    }
  }
  return v2;
}

void sub_1A3987FAC(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v4 = a3;
  objc_setAssociatedObject(a1, &unk_1EE6D5730, v4, (void *)1);
  objc_msgSend_speechManager(a1, v5, v6, v7, v8);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSpeechSource_(v12, v9, (uint64_t)v4, v10, v11);

}

id sub_1A3988010(void *a1)
{
  return objc_getAssociatedObject(a1, &unk_1EE6D5730);
}

uint64_t sub_1A398801C()
{
  return MEMORY[0x1E0C9AAA0];
}

uint64_t sub_1A398802C()
{
  return MEMORY[0x1E0C9AAB0];
}

uint64_t sub_1A398803C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t active;

  objc_msgSend_speechManager(a1, a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  active = objc_msgSend_setActiveOptions(v5, v6, v7, v8, v9);

  return active;
}

void sub_1A3988070(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  objc_msgSend_speechManager(a1, a2, a3, a4, a5);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSetActiveOptions_(v9, v6, a3, v7, v8);

}

uint64_t sub_1A39880AC(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_getAssociatedObject(a1, &unk_1EE6D5731);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_BOOLValue(v1, v2, v3, v4, v5);

  return v6;
}

void sub_1A39880E8(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(a1, &unk_1EE6D5731, v6, (void *)1);

}

void sub_1A398813C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v4 = a3;
  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v5, v6, v7, v8);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAuxSessionCategory_(v15, v9, (uint64_t)v4, v10, v11);
  }
  else
  {
    objc_msgSend_speechManager(a1, v5, v6, v7, v8);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAudioSessionCategory_(v15, v12, (uint64_t)v4, v13, v14);
  }

}

id sub_1A39881AC(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_auxSessionCategory(v6, v7, v8, v9, v10);
  }
  else
  {
    objc_msgSend_speechManager(a1, v2, v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_audioSessionCategory(v6, v11, v12, v13, v14);
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

void sub_1A3988210(void *a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v5, v6, v7, v8);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAuxSessionCategoryOptions_(v15, v9, a3, v10, v11);
  }
  else
  {
    objc_msgSend_speechManager(a1, v5, v6, v7, v8);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAudioSessionCategoryOptions_(v15, v12, a3, v13, v14);
  }

}

uint64_t sub_1A3988278(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend_auxSessionCategoryOptions(v6, v7, v8, v9, v10);
  }
  else
  {
    objc_msgSend_speechManager(a1, v2, v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend_audioSessionCategoryOptions(v6, v12, v13, v14, v15);
  }
  v16 = v11;

  return v16;
}

uint64_t sub_1A39882D4(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend_useAuxiliarySession(v6, v7, v8, v9, v10);
  }
  else
  {
    objc_msgSend_speechManager(a1, v2, v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend_usesAuxiliarySession(v6, v12, v13, v14, v15);
  }
  v16 = v11;

  return v16 ^ 1u;
}

void sub_1A3988330(void *a1, uint64_t a2, int a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v8 = a3 ^ 1u;
  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v4, v5, v6, v7);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setUseAuxiliarySession_(v15, v9, v8, v10, v11);
  }
  else
  {
    objc_msgSend_speechManager(a1, v4, v5, v6, v7);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setUsesAuxiliarySession_(v15, v12, v8, v13, v14);
  }

}

id sub_1A398839C(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  if (TTSUseCoreSynthesizerForAV())
    objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
  else
    objc_msgSend_speechManager(a1, v2, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_audioSession(v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

uint64_t sub_1A39883F4(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (TTSUseCoreSynthesizerForAV())
    objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
  else
    objc_msgSend_speechManager(a1, v2, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_audioQueueFlags(v6, v7, v8, v9, v10);

  return v11;
}

void sub_1A3988448(void *a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  if (TTSUseCoreSynthesizerForAV())
    objc_msgSend_coreSynth(a1, v5, v6, v7, v8);
  else
    objc_msgSend_speechManager(a1, v5, v6, v7, v8);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setAudioQueueFlags_(v12, v9, a3, v10, v11);

}

uint64_t sub_1A39884A4(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend_mixToTelephonyUplink(v6, v7, v8, v9, v10);
  }
  else
  {
    objc_msgSend_speechManager(a1, v2, v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (objc_msgSend_audioQueueFlags(v6, v12, v13, v14, v15) >> 8) & 1;
  }

  return v11;
}

void sub_1A3988504(void *a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;

  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v5, v6, v7, v8);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setMixToTelephonyUplink_(v27, v9, a3, v10, v11);
  }
  else
  {
    objc_msgSend_speechManager(a1, v5, v6, v7, v8);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend_audioQueueFlags(v12, v13, v14, v15, v16);

    if ((_DWORD)a3)
      v22 = 256;
    else
      v22 = 0;
    v23 = v17 & 0xFFFFFEFF | v22;
    objc_msgSend_speechManager(a1, v18, v19, v20, v21);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAudioQueueFlags_(v27, v24, v23, v25, v26);
  }

}

uint64_t sub_1A39885A4(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  objc_msgSend_speechManager(a1, a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_isInAudioInterruption(v5, v6, v7, v8, v9);

  return v10;
}

id sub_1A39885D8(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_channels(v6, v7, v8, v9, v10);
  }
  else
  {
    objc_msgSend_speechManager(a1, v2, v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_outputChannels(v6, v11, v12, v13, v14);
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

void sub_1A398863C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v4 = a3;
  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v5, v6, v7, v8);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setChannels_(v15, v9, (uint64_t)v4, v10, v11);
  }
  else
  {
    objc_msgSend_speechManager(a1, v5, v6, v7, v8);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOutputChannels_(v15, v12, (uint64_t)v4, v13, v14);
  }

}

id sub_1A39886AC(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v8.receiver = a1;
  v8.super_class = (Class)&off_1EE6F8C60;
  v1 = objc_msgSendSuper2(&v8, sel_init);
  v6 = v1;
  if (v1)
    objc_msgSend_prepareSpeechManager(v1, v2, v3, v4, v5);
  return v6;
}

id sub_1A39886FC(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  objc_super v54;

  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stopSpeakingAt_completionHandler_(v6, v7, 0, (uint64_t)&unk_1E4A9F428, v8);
  }
  else
  {
    objc_msgSend_inflightUtterance(a1, v2, v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_action(v6, v9, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOnSpeechStartCallback_(v13, v14, 0, v15, v16);
    objc_msgSend_setOnPauseCallback_(v13, v17, 0, v18, v19);
    objc_msgSend_setOnResumeCallback_(v13, v20, 0, v21, v22);
    objc_msgSend_setOnWillSpeakRangeCallback_(v13, v23, 0, v24, v25);
    objc_msgSend_setCompletionCallback_(v13, v26, 0, v27, v28);
    objc_msgSend_setOnMarkerCallback_(v13, v29, 0, v30, v31);
    objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v32, v33, v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObserver_(v36, v37, (uint64_t)a1, v38, v39);

    objc_msgSend_speechManager(a1, v40, v41, v42, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_tearDown(v44, v45, v46, v47, v48);

    objc_msgSend_tearDownWarmupManager(a1, v49, v50, v51, v52);
  }

  v54.receiver = a1;
  v54.super_class = (Class)&off_1EE6F8C60;
  return objc_msgSendSuper2(&v54, sel_dealloc);
}

void sub_1A398881C(void *a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  TTSSpeechManager *v8;

  if ((TTSUseCoreSynthesizerForAV() & 1) == 0)
  {
    v8 = objc_alloc_init(TTSSpeechManager);
    objc_setAssociatedObject(a1, &unk_1EE6D5732, v8, (void *)1);
    objc_msgSend_actionWithString_shouldQueue_(TTSSpeechAction, v2, (uint64_t)&stru_1E4AA5CE8, 0, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dispatchSpeechAction_(v8, v5, (uint64_t)v4, v6, v7);

  }
}

void sub_1A39888B4(void *a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  if ((TTSUseCoreSynthesizerForAV() & 1) == 0)
  {
    objc_getAssociatedObject(a1, &unk_1EE6D5732);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (v2)
    {
      v11 = v2;
      if (objc_msgSend_isSpeaking(v2, v3, v4, v5, v6))
        objc_msgSend_stopSpeaking(v11, v7, v8, v9, v10);
      objc_msgSend_tearDown(v11, v7, v8, v9, v10);
      objc_setAssociatedObject(a1, &unk_1EE6D5732, 0, (void *)1);
      v2 = v11;
    }

  }
}

void sub_1A3988940(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  objc_msgSend_speechManager(a1, a2, a3, a4, a5);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setAudioSessionInactiveTimeout_(v11, v7, v8, v9, v10, a6);

}

void sub_1A398897C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  objc_msgSend_speechQueue(a1, a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_count(v6, v7, v8, v9, v10);

  if (v11)
  {
    objc_msgSend_speechQueue(a1, v12, v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndex_(v16, v17, 0, v18, v19);
    v23 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend__speakUtterance_(a1, v20, (uint64_t)v23, v21, v22);
  }
}

void sub_1A3988A0C(void *a1, uint64_t a2, void *a3, int a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  char v42;
  const char *v43;
  uint64_t v44;
  id v45;

  v45 = a3;
  v6 = a1;
  objc_sync_enter(v6);
  objc_msgSend_speechQueue(v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectIdenticalTo_(v11, v12, (uint64_t)v45, v13, v14);

  objc_msgSend_setInflightUtterance_(v6, v15, 0, v16, v17);
  objc_msgSend_speechQueue(v6, v18, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend_count(v22, v23, v24, v25, v26);

  CFRetain(v6);
  if (a4)
  {
    objc_msgSend_delegate(v6, v28, v29, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_opt_respondsToSelector();

    if ((v33 & 1) == 0)
      goto LABEL_7;
    objc_msgSend_delegate(v6, v34, v35, v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_speechSynthesizer_didFinishSpeechUtterance_(v38, v39, (uint64_t)v6, (uint64_t)v45, v40);
  }
  else
  {
    objc_msgSend_delegate(v6, v28, v29, v30, v31);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = objc_opt_respondsToSelector();

    if ((v42 & 1) == 0)
      goto LABEL_7;
    objc_msgSend_delegate(v6, v34, v35, v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_speechSynthesizer_didCancelSpeechUtterance_(v38, v43, (uint64_t)v6, (uint64_t)v45, v44);
  }

LABEL_7:
  if (v27)
    objc_msgSend__enqueueNextJob(v6, v34, v35, v36, v37);
  CFRelease(v6);
  objc_sync_exit(v6);

}

void sub_1A3988B54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A3988B6C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char isKindOfClass;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t v23[16];

  result = objc_msgSend_initializedWebKitUsage(a1, a2, a3, a4, a5);
  if ((result & 1) == 0)
  {
    objc_msgSend_delegate(a1, v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    NSClassFromString(CFSTR("WebSpeechSynthesisWrapper"));
    isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) != 0)
    {
      AXLogSpeechSynthesis();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_1A3940000, v16, OS_LOG_TYPE_INFO, "Changing audio session and category options for WebKit usage", v23, 2u);
      }

      objc_msgSend_setUsesApplicationAudioSession_(a1, v17, 0, v18, v19);
      objc_msgSend_setDetectSSMLAndModifyUtterances_(a1, v20, 1, v21, v22);
    }
    return objc_msgSend_setInitializedWebKitUsage_(a1, v13, 1, v14, v15);
  }
  return result;
}

void sub_1A3988C3C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  float v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  float v88;
  double v89;
  double v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  float v112;
  float v113;
  double v114;
  double v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  void *v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  id v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  const char *v188;
  void *v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  id v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  const char *v206;
  uint64_t v207;
  id v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  double v218;
  id v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const char *v230;
  uint64_t v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  id v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  const char *v247;
  uint64_t v248;
  id v249;
  const char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  float v259;
  float v260;
  id v261;
  const char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  const char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void *v271;
  const char *v272;
  uint64_t v273;
  void *v274;
  const char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  void *v279;
  const char *v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  uint64_t v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  id v289;
  const char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  void *v294;
  const char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  void *v299;
  float v300;
  float v301;
  void *v302;
  const char *v303;
  uint64_t v304;
  uint64_t v305;
  float v306;
  float v307;
  id v308;
  const char *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  const char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  double v318;
  double v319;
  float v320;
  float v321;
  NSObject *v322;
  void *v323;
  void *v324;
  const char *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  void *v329;
  const char *v330;
  uint64_t v331;
  uint64_t v332;
  void *v333;
  const char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  const char *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  const char *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  void *v347;
  const char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  void *v352;
  const char *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  void *v357;
  const char *v358;
  uint64_t v359;
  uint64_t v360;
  void *v361;
  const char *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  void *v366;
  const char *v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  const char *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  NSObject *v376;
  const char *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  void *v381;
  const char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  void *v386;
  const char *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  void *v391;
  const char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  void *v396;
  const char *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  void *v401;
  const char *v402;
  uint64_t v403;
  uint64_t v404;
  void *v405;
  const char *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  void *v410;
  const char *v411;
  uint64_t v412;
  uint64_t v413;
  const char *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  void *v418;
  const char *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  void *v424;
  const char *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  void *v429;
  const char *v430;
  uint64_t v431;
  uint64_t v432;
  char isEqualToString;
  const char *v434;
  uint64_t v435;
  uint64_t v436;
  const char *v437;
  uint64_t v438;
  uint64_t v439;
  void *v440;
  NSObject *v441;
  const char *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  const char *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  double v450;
  void *v451;
  void *v452;
  const char *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  double v457;
  const char *v458;
  uint64_t v459;
  uint64_t v460;
  void *v461;
  const char *v462;
  uint64_t v463;
  void *v464;
  const char *v465;
  uint64_t v466;
  uint64_t v467;
  const char *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  void *v472;
  const char *v473;
  uint64_t v474;
  uint64_t v475;
  void *v476;
  BOOL v477;
  const char *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  void *v482;
  const char *v483;
  uint64_t v484;
  uint64_t v485;
  void *v486;
  BOOL v487;
  const char *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  const char *v492;
  uint64_t v493;
  const char *v494;
  uint64_t v495;
  void *v496;
  const char *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  void *v501;
  BOOL v502;
  const char *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  void *v507;
  const char *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  void *v512;
  const char *v513;
  uint64_t v514;
  uint64_t v515;
  void *v516;
  const char *v517;
  uint64_t v518;
  uint64_t v519;
  const char *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  void *v524;
  const char *v525;
  uint64_t v526;
  uint64_t v527;
  const char *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  void *v532;
  const char *v533;
  uint64_t v534;
  uint64_t v535;
  const char *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  const char *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  const char *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  const char *v548;
  uint64_t v549;
  uint64_t v550;
  const char *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  void *v555;
  const char *v556;
  uint64_t v557;
  uint64_t v558;
  const char *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  const char *v564;
  uint64_t v565;
  uint64_t v566;
  const char *v567;
  uint64_t v568;
  uint64_t v569;
  const char *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  void *v574;
  BOOL v575;
  const char *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  id v580;
  const char *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  void *v585;
  const char *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  void *v590;
  const char *v591;
  void *v592;
  const char *v593;
  uint64_t v594;
  void *v595;
  void *v596;
  BOOL v597;
  id v598;
  const char *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  void *v603;
  const char *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  const char *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  const char *v612;
  const char *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  const char *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  const char *v622;
  uint64_t v623;
  const char *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  _QWORD *v628;
  void *v629;
  uint64_t v630;
  const char *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  void *v635;
  uint64_t v636;
  const char *v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  const char *v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  void *v645;
  _QWORD *v646;
  void *v647;
  uint64_t v648;
  const char *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  void *v653;
  id v654;
  const char *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  void *v659;
  void *v660;
  void *v661;
  uint64_t v662;
  const char *v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  id v667;
  const char *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  void *v672;
  uint64_t v673;
  const char *v674;
  uint64_t v675;
  uint64_t v676;
  const char *v677;
  uint64_t v678;
  uint64_t v679;
  const char *v680;
  uint64_t v681;
  uint64_t v682;
  const char *v683;
  uint64_t v684;
  uint64_t v685;
  const char *v686;
  uint64_t v687;
  uint64_t v688;
  const char *v689;
  uint64_t v690;
  uint64_t v691;
  const char *v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  void *v696;
  const char *v697;
  uint64_t v698;
  uint64_t v699;
  const char *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  const char *v704;
  uint64_t v705;
  uint64_t v706;
  double v707;
  void *v708;
  void *v709;
  void *v710;
  const char *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  double v715;
  const char *v716;
  uint64_t v717;
  uint64_t v718;
  void *v719;
  const char *v720;
  uint64_t v721;
  void *v722;
  const char *v723;
  uint64_t v724;
  uint64_t v725;
  const char *v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  void *v730;
  const char *v731;
  uint64_t v732;
  uint64_t v733;
  void *v734;
  _QWORD v735[4];
  id v736;
  _QWORD v737[4];
  id v738;
  id v739;
  _QWORD v740[4];
  id v741;
  id v742;
  _QWORD v743[4];
  id v744;
  id v745;
  _QWORD v746[4];
  id v747;
  id v748;
  _QWORD v749[4];
  id v750;
  id v751;
  id location;
  _QWORD v753[2];
  _QWORD v754[2];
  void *v755;
  uint64_t v756;
  void *v757;
  uint64_t v758;
  __int128 buf;
  uint64_t v760;
  void *v761;
  uint64_t v762;

  v762 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_tearDownWarmupManager(a1, v5, v6, v7, v8);
  objc_msgSend_voiceSelection(v4, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_voiceId(v13, v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v18;
  if (v18)
  {
    v24 = v18;
  }
  else
  {
    objc_msgSend_voice(v4, v19, v20, v21, v22);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_identifier(v25, v26, v27, v28, v29);
    v24 = (id)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend_voiceSelection(v4, v30, v31, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rate(v34, v35, v36, v37, v38);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  if (v43)
  {
    objc_msgSend_voiceSelection(v4, v39, v40, v41, v42);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_rate(v44, v45, v46, v47, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v49, v50, v51, v52, v53);
    v55 = v54;

  }
  else
  {
    objc_msgSend_rate(v4, v39, v40, v41, v42);
    v55 = v56;
  }

  objc_msgSend_pitchMultiplier(v4, v57, v58, v59, v60);
  v62 = v61;
  objc_msgSend_voiceSelection(v4, v63, v64, v65, v66);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pitch(v67, v68, v69, v70, v71);
  v72 = (void *)objc_claimAutoreleasedReturnValue();

  if (v72)
  {
    objc_msgSend_voiceSelection(v4, v73, v74, v75, v76);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pitch(v77, v78, v79, v80, v81);
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v82, v83, v84, v85, v86);
    v88 = v87;
    v89 = v87;

    if (v88 >= 0.5)
      v90 = (v89 + -0.5) * 2.0 + 1.0;
    else
      v90 = v89 + 0.5;
  }
  else
  {
    v90 = v62;
  }
  objc_msgSend_voiceSelection(v4, v73, v74, v75, v76);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_volume(v91, v92, v93, v94, v95);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  if (v100)
  {
    objc_msgSend_voiceSelection(v4, v96, v97, v98, v99);
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_volume(v101, v102, v103, v104, v105);
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v106, v107, v108, v109, v110);
    v112 = v111;

  }
  else
  {
    objc_msgSend_volume(v4, v96, v97, v98, v99);
    v112 = v113;
  }
  v114 = v55;
  v115 = v112;

  if (!objc_msgSend_prefersAssistiveTechnologySettings(v4, v116, v117, v118, v119))
  {
    v160 = (uint64_t)v24;
    if (v24)
      goto LABEL_51;
    goto LABEL_45;
  }
  objc_msgSend_voice(v4, v120, v121, v122, v123);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_language(v124, v125, v126, v127, v128);
  v129 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v129)
  {
    objc_msgSend_currentLanguageCode(MEMORY[0x1E0C89B80], v130, v131, v132, v133);
    v129 = (void *)objc_claimAutoreleasedReturnValue();
  }
  TTSLanguageCanonicalFormToGeneralLanguage(v129, v130, v131, v132, v133);
  v134 = (void *)objc_claimAutoreleasedReturnValue();
  v135 = _AXSVoiceOverTouchEnabled();
  if ((_DWORD)v135)
  {
    LOBYTE(buf) = 0;
    v140 = sub_1A3989F18(v135, v136, v137, v138, v139);
    objc_msgSend_sharedInstance(v140, v141, v142, v143, v144);
    v145 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1A3989FD0((uint64_t)v145, v146, v147, v148, v149);
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(v145, v151, (uint64_t)v134, (uint64_t)v150, (uint64_t)&buf);
    v152 = (void *)objc_claimAutoreleasedReturnValue();

    v158 = buf;
    if ((_BYTE)buf)
    {
      v159 = (uint64_t)v152;
    }
    else
    {
      v261 = sub_1A3989F18(v153, v154, v155, v156, v157);
      objc_msgSend_sharedInstance(v261, v262, v263, v264, v265);
      v266 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1A3989FD0((uint64_t)v266, v267, v268, v269, v270);
      v271 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(v266, v272, (uint64_t)v129, (uint64_t)v271, (uint64_t)&buf);
      v273 = objc_claimAutoreleasedReturnValue();

      v159 = v273;
    }
    v189 = (void *)v159;
    objc_msgSend__voiceFromInternalVoiceListWithIdentifier_(MEMORY[0x1E0C89B80], v154, v159, v156, v157);
    v274 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_prefersAssistiveTechnologyExceptions(v4, v275, v276, v277, v278);
    v279 = (void *)objc_claimAutoreleasedReturnValue();
    v283 = objc_msgSend_containsObject_(v279, v280, (uint64_t)CFSTR("rate"), v281, v282);

    if ((v283 & 1) == 0)
    {
      v289 = sub_1A3989F18(v284, v285, v286, v287, v288);
      objc_msgSend_sharedInstance(v289, v290, v291, v292, v293);
      v294 = (void *)objc_claimAutoreleasedReturnValue();
      v299 = v294;
      if (v158)
      {
        objc_msgSend_voiceOverSpeakingRateForLanguage_(v294, v295, (uint64_t)v134, v297, v298);
        v301 = v300;
      }
      else
      {
        objc_msgSend_language(v274, v295, v296, v297, v298);
        v302 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_voiceOverSpeakingRateForLanguage_(v299, v303, (uint64_t)v302, v304, v305);
        v301 = v306;

      }
      v114 = v301;
      if (fabs(v301 + -3.40282347e38) < 0.001)
      {
        v284 = _AXSVoiceOverTouchSpeakingRate();
        v114 = v307;
      }
    }
    v308 = sub_1A3989F18(v284, v285, v286, v287, v288);
    objc_msgSend_sharedInstance(v308, v309, v310, v311, v312);
    v313 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_voiceOverPitch(v313, v314, v315, v316, v317);
    v319 = v318;

    if (v319 <= 0.5)
      v90 = v319 + 0.5;
    else
      v90 = v319 + v319;
    _AXSVoiceOverTouchVolume();
    v321 = v320;

    v115 = v321;
  }
  else
  {
    v161 = _AXSAssistiveTouchScannerEnabled();
    if ((_DWORD)v161
      && (v166 = sub_1A3989F18(v161, v162, v163, v164, v165),
          objc_msgSend_sharedInstance(v166, v167, v168, v169, v170),
          v171 = (void *)objc_claimAutoreleasedReturnValue(),
          v176 = objc_msgSend_assistiveTouchScannerSpeechEnabled(v171, v172, v173, v174, v175),
          v171,
          v176))
    {
      LOBYTE(buf) = 0;
      v177 = sub_1A3989F18(v161, v162, v163, v164, v165);
      objc_msgSend_sharedInstance(v177, v178, v179, v180, v181);
      v182 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1A398A068((uint64_t)v182, v183, v184, v185, v186);
      v187 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(v182, v188, (uint64_t)v134, (uint64_t)v187, (uint64_t)&buf);
      v189 = (void *)objc_claimAutoreleasedReturnValue();

      if (!(_BYTE)buf)
      {
        v195 = sub_1A3989F18(v190, v191, v192, v193, v194);
        objc_msgSend_sharedInstance(v195, v196, v197, v198, v199);
        v200 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1A398A068((uint64_t)v200, v201, v202, v203, v204);
        v205 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(v200, v206, (uint64_t)v129, (uint64_t)v205, (uint64_t)&buf);
        v207 = objc_claimAutoreleasedReturnValue();

        v189 = (void *)v207;
      }
      v208 = sub_1A3989F18(v190, v191, v192, v193, v194);
      objc_msgSend_sharedInstance(v208, v209, v210, v211, v212);
      v213 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_assistiveTouchScannerSpeechRate(v213, v214, v215, v216, v217);
      v114 = v218;

    }
    else
    {
      LOBYTE(buf) = 0;
      v219 = sub_1A3989F18(v161, v162, v163, v164, v165);
      objc_msgSend_sharedInstance(v219, v220, v221, v222, v223);
      v224 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1A398A100((uint64_t)v224, v225, v226, v227, v228);
      v229 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(v224, v230, (uint64_t)v134, (uint64_t)v229, (uint64_t)&buf);
      v189 = (void *)objc_claimAutoreleasedReturnValue();

      if (!(_BYTE)buf)
      {
        v236 = sub_1A3989F18(v231, v232, v233, v234, v235);
        objc_msgSend_sharedInstance(v236, v237, v238, v239, v240);
        v241 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1A398A100((uint64_t)v241, v242, v243, v244, v245);
        v246 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(v241, v247, (uint64_t)v129, (uint64_t)v246, (uint64_t)&buf);
        v248 = objc_claimAutoreleasedReturnValue();

        v189 = (void *)v248;
      }
      v249 = sub_1A3989F18(v231, v232, v233, v234, v235);
      objc_msgSend_sharedInstance(v249, v250, v251, v252, v253);
      v254 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_quickSpeakSpeakingRate(v254, v255, v256, v257, v258);
      v260 = v259;

      v114 = v260;
    }
  }
  AXLogSpeechSynthesis();
  v322 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v322, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_1A3940000, v322, OS_LOG_TYPE_INFO, "Using AT preferred settings for voice and rate for: %@", (uint8_t *)&buf, 0xCu);
  }

  v160 = (uint64_t)v189;
  if (!v189)
  {
LABEL_45:
    v323 = (void *)MEMORY[0x1E0C89B80];
    objc_msgSend_voice(v4, v120, v160, v122, v123);
    v324 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_language(v324, v325, v326, v327, v328);
    v329 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_voiceWithLanguage_(v323, v330, (uint64_t)v329, v331, v332);
    v333 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_identifier(v333, v334, v335, v336, v337);
    v338 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v324) = v338 == 0;

    if ((_DWORD)v324)
    {
      objc_msgSend_speechManager(a1, v339, v340, v341, v342);
      v347 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_voice(v4, v348, v349, v350, v351);
      v352 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_language(v352, v353, v354, v355, v356);
      v357 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_voiceIdentifierUsedForLanguage_(v347, v358, (uint64_t)v357, v359, v360);
      v361 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_voice(v4, v362, v363, v364, v365);
      v366 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setIdentifier_(v366, v367, (uint64_t)v361, v368, v369);

    }
    else
    {
      objc_msgSend_setVoice_(v4, v339, (uint64_t)v333, v341, v342);
    }
    objc_msgSend_voice(v4, v343, v344, v345, v346);
    v370 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_identifier(v370, v371, v372, v373, v374);
    v375 = objc_claimAutoreleasedReturnValue();

    AXLogSpeechSynthesis();
    v376 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v376, OS_LOG_TYPE_INFO))
    {
      objc_msgSend_voice(v4, v377, v378, v379, v380);
      v381 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_identifier(v381, v382, v383, v384, v385);
      v386 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v386;
      _os_log_impl(&dword_1A3940000, v376, OS_LOG_TYPE_INFO, "utterance had bad voice, remaking it %{public}@", (uint8_t *)&buf, 0xCu);

    }
    v160 = v375;
  }
LABEL_51:
  v734 = (void *)v160;
  if (objc_msgSend_isSiriVoiceIdentifier_(TTSAlternativeVoices, v120, v160, v122, v123)
    && (objc_msgSend_isInternalSynth(a1, v387, v388, v389, v390) & 1) == 0)
  {
    objc_msgSend_speechManager(a1, v387, v388, v389, v390);
    v391 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_voice(v4, v392, v393, v394, v395);
    v396 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_language(v396, v397, v398, v399, v400);
    v401 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_externalVoiceIdentifierUsedForLanguage_(v391, v402, (uint64_t)v401, v403, v404);
    v405 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_voice(v4, v406, v407, v408, v409);
    v410 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setIdentifier_(v410, v411, (uint64_t)v405, v412, v413);

    objc_msgSend_voice(v4, v414, v415, v416, v417);
    v418 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_identifier(v418, v419, v420, v421, v422);
    v423 = objc_claimAutoreleasedReturnValue();

    v734 = (void *)v423;
  }
  objc_msgSend_voice(v4, v387, v388, v389, v390);
  v424 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_identifier(v424, v425, v426, v427, v428);
  v429 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v734, v430, (uint64_t)v429, v431, v432);

  if ((isEqualToString & 1) == 0)
  {
    objc_msgSend_voiceWithIdentifier_(MEMORY[0x1E0C89B80], v434, (uint64_t)v734, v435, v436);
    v440 = (void *)objc_claimAutoreleasedReturnValue();
    if (v440)
    {
      objc_msgSend_setVoice_(v4, v437, (uint64_t)v440, v438, v439);
      AXLogSpeechSynthesis();
      v441 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v441, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1A3940000, v441, OS_LOG_TYPE_INFO, "Updating voice on utterance to match preferred technology", (uint8_t *)&buf, 2u);
      }

    }
  }
  objc_msgSend_setInflightUtterance_(a1, v434, (uint64_t)v4, v435, v436);
  objc_msgSend_preUtteranceDelay(v4, v442, v443, v444, v445);
  if (v450 > 0.0)
  {
    objc_msgSend_pauseMarkupString_(TTSSpeechManager, v446, (uint64_t)v734, v448, v449);
    v451 = (void *)objc_claimAutoreleasedReturnValue();
    v452 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend_preUtteranceDelay(v4, v453, v454, v455, v456);
    objc_msgSend_stringWithFormat_(v452, v458, (uint64_t)v451, v459, v460, (int)(v457 * 1000.0));
    v461 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_actionWithString_shouldQueue_(TTSSpeechAction, v462, (uint64_t)v461, 1, v463);
    v464 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setVoiceIdentifier_(v464, v465, (uint64_t)v734, v466, v467);
    objc_msgSend_speechManager(a1, v468, v469, v470, v471);
    v472 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dispatchSpeechAction_(v472, v473, (uint64_t)v464, v474, v475);

  }
  objc_msgSend_ssmlRepresentation(v4, v446, v447, v448, v449);
  v476 = (void *)objc_claimAutoreleasedReturnValue();
  v477 = v476 == 0;

  if (v477)
  {
    objc_msgSend_attributedSpeechString(v4, v478, v479, v480, v481);
    v486 = (void *)objc_claimAutoreleasedReturnValue();
    v487 = v486 == 0;

    if (v487)
    {
      objc_msgSend_speechString(v4, v488, v489, v490, v491);
      v482 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_actionWithString_shouldQueue_(TTSSpeechAction, v494, (uint64_t)v482, 1, v495);
    }
    else
    {
      objc_msgSend_attributedSpeechString(v4, v488, v489, v490, v491);
      v482 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_actionWithAttributedString_shouldQueue_(TTSSpeechAction, v492, (uint64_t)v482, 1, v493);
    }
    v485 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend_ssmlRepresentation(v4, v478, v479, v480, v481);
    v482 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_actionWithSSMLRepresentation_shouldQueue_(TTSSpeechAction, v483, (uint64_t)v482, 1, v484);
    v485 = objc_claimAutoreleasedReturnValue();
  }
  v496 = (void *)v485;

  if (v734)
    objc_msgSend_setVoiceIdentifier_(v496, v497, (uint64_t)v734, v499, v500);
  objc_msgSend_voice(v4, v497, v498, v499, v500);
  v501 = (void *)objc_claimAutoreleasedReturnValue();
  v502 = v501 == 0;

  if (!v502)
  {
    objc_msgSend_voice(v4, v503, v504, v505, v506);
    v507 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_language(v507, v508, v509, v510, v511);
    v512 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setLanguage_(v496, v513, (uint64_t)v512, v514, v515);

  }
  objc_msgSend_audioBufferCallback(v4, v503, v504, v505, v506);
  v516 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setAudioBufferCallback_(v496, v517, (uint64_t)v516, v518, v519);

  objc_msgSend_markerCallback(v4, v520, v521, v522, v523);
  v524 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setMarkerCallback_(v496, v525, (uint64_t)v524, v526, v527);

  objc_msgSend_audioBufferCallback(v4, v528, v529, v530, v531);
  v532 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSynthesizeSilently_(v496, v533, v532 != 0, v534, v535);

  objc_msgSend_setSpeakingRate_(v496, v536, v537, v538, v539, v114);
  objc_msgSend_setPitch_(v496, v540, v541, v542, v543, v90);
  objc_msgSend_setVolume_(v496, v544, v545, v546, v547, v115);
  objc_msgSend_setShouldProcessEmoji_(v496, v548, 1, v549, v550);
  objc_msgSend_voiceSelection(v4, v551, v552, v553, v554);
  v555 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setVoiceSelection_(v496, v556, (uint64_t)v555, v557, v558);

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v563 = objc_msgSend_processEmoticons(v4, v559, v560, v561, v562);
    objc_msgSend_setShouldProcessEmoticons_(v496, v564, v563, v565, v566);
  }
  objc_msgSend_setUtterance_(v496, v559, (uint64_t)v4, v561, v562);
  objc_msgSend_setAction_(v4, v567, (uint64_t)v496, v568, v569);
  if (_AXSVoiceOverTouchEnabled())
  {
    objc_msgSend_string(v496, v570, v571, v572, v573);
    v574 = (void *)objc_claimAutoreleasedReturnValue();
    v575 = v574 == 0;

    if (v575)
    {
      objc_msgSend_attributedString(v496, v576, v577, v578, v579);
      v596 = (void *)objc_claimAutoreleasedReturnValue();
      v597 = v596 == 0;

      if (v597)
        goto LABEL_90;
      v598 = objc_alloc(MEMORY[0x1E0CB3778]);
      objc_msgSend_attributedString(v496, v599, v600, v601, v602);
      v603 = (void *)objc_claimAutoreleasedReturnValue();
      v595 = (void *)objc_msgSend_initWithAttributedString_(v598, v604, (uint64_t)v603, v605, v606);

      sub_1A398A198(v607, v608, v609, v610, v611);
      v585 = (void *)objc_claimAutoreleasedReturnValue();
      v755 = v585;
      v756 = MEMORY[0x1E0C9AAB0];
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v612, (uint64_t)&v756, (uint64_t)&v755, 1);
      v590 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_attributedString(v496, v613, v614, v615, v616);
      v592 = (void *)objc_claimAutoreleasedReturnValue();
      v621 = objc_msgSend_length(v592, v617, v618, v619, v620);
      objc_msgSend_setAttributes_range_(v595, v622, (uint64_t)v590, 0, v621);
    }
    else
    {
      v580 = objc_alloc(MEMORY[0x1E0CB3778]);
      objc_msgSend_string(v496, v581, v582, v583, v584);
      v585 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1A398A198((uint64_t)v585, v586, v587, v588, v589);
      v590 = (void *)objc_claimAutoreleasedReturnValue();
      v757 = v590;
      v758 = MEMORY[0x1E0C9AAB0];
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v591, (uint64_t)&v758, (uint64_t)&v757, 1);
      v592 = (void *)objc_claimAutoreleasedReturnValue();
      v595 = (void *)objc_msgSend_initWithString_attributes_(v580, v593, (uint64_t)v585, (uint64_t)v592, v594);
    }

    if (v595)
    {
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v760 = 0x2020000000;
      v628 = (_QWORD *)qword_1EE6D5770;
      v761 = (void *)qword_1EE6D5770;
      if (!qword_1EE6D5770)
      {
        v629 = (void *)sub_1A398B56C(v623, v624, v625, v626, v627);
        v628 = dlsym(v629, "kAXPidKey");
        *(_QWORD *)(*((_QWORD *)&buf + 1) + 24) = v628;
        qword_1EE6D5770 = (uint64_t)v628;
      }
      _Block_object_dispose(&buf, 8);
      if (!v628)
        sub_1A3AB25CC(v630, v631, v632, v633, v634);
      v753[0] = *v628;
      v635 = (void *)MEMORY[0x1E0CB37E8];
      v636 = getpid();
      objc_msgSend_numberWithInt_(v635, v637, v636, v638, v639);
      v640 = objc_claimAutoreleasedReturnValue();
      v645 = (void *)v640;
      v754[0] = v640;
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v760 = 0x2020000000;
      v646 = (_QWORD *)qword_1EE6D5778;
      v761 = (void *)qword_1EE6D5778;
      if (!qword_1EE6D5778)
      {
        v647 = (void *)sub_1A398B56C(v640, v641, v642, v643, v644);
        v646 = dlsym(v647, "kAXNotificationDataKey");
        *(_QWORD *)(*((_QWORD *)&buf + 1) + 24) = v646;
        qword_1EE6D5778 = (uint64_t)v646;
      }
      _Block_object_dispose(&buf, 8);
      if (!v646)
        sub_1A3AB263C(v648, v649, v650, v651, v652);
      v753[1] = *v646;
      v754[1] = v595;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v649, (uint64_t)v754, (uint64_t)v753, 2);
      v653 = (void *)objc_claimAutoreleasedReturnValue();

      v654 = v653;
      v659 = v654;
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v760 = 0x2020000000;
      v660 = off_1EE6D5780;
      v761 = off_1EE6D5780;
      if (!off_1EE6D5780)
      {
        v661 = (void *)sub_1A398B56C((uint64_t)v654, v655, v656, v657, v658);
        v660 = dlsym(v661, "AXPushNotificationToSystemForBroadcast");
        *(_QWORD *)(*((_QWORD *)&buf + 1) + 24) = v660;
        off_1EE6D5780 = v660;
      }
      _Block_object_dispose(&buf, 8);
      if (!v660)
        sub_1A3AB26AC(v662, v663, v664, v665, v666);
      ((void (*)(uint64_t, _QWORD, void *))v660)(1008, 0, v659);

    }
  }
LABEL_90:
  v667 = objc_initWeak((id *)&buf, a1);
  objc_msgSend_delegate(a1, v668, v669, v670, v671);
  v672 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak(&location, v672);

  v673 = MEMORY[0x1E0C809B0];
  v749[0] = MEMORY[0x1E0C809B0];
  v749[1] = 3221225472;
  v749[2] = sub_1A398A230;
  v749[3] = &unk_1E4AA10F8;
  objc_copyWeak(&v750, &location);
  objc_copyWeak(&v751, (id *)&buf);
  objc_msgSend_setOnSpeechStartCallback_(v496, v674, (uint64_t)v749, v675, v676);
  v746[0] = v673;
  v746[1] = 3221225472;
  v746[2] = sub_1A398A2D4;
  v746[3] = &unk_1E4AA10F8;
  objc_copyWeak(&v747, &location);
  objc_copyWeak(&v748, (id *)&buf);
  objc_msgSend_setOnPauseCallback_(v496, v677, (uint64_t)v746, v678, v679);
  v743[0] = v673;
  v743[1] = 3221225472;
  v743[2] = sub_1A398A378;
  v743[3] = &unk_1E4AA10F8;
  objc_copyWeak(&v744, &location);
  objc_copyWeak(&v745, (id *)&buf);
  objc_msgSend_setOnResumeCallback_(v496, v680, (uint64_t)v743, v681, v682);
  v740[0] = v673;
  v740[1] = 3221225472;
  v740[2] = sub_1A398A41C;
  v740[3] = &unk_1E4AA1120;
  objc_copyWeak(&v741, &location);
  objc_copyWeak(&v742, (id *)&buf);
  objc_msgSend_setOnMarkerCallback_(v496, v683, (uint64_t)v740, v684, v685);
  v737[0] = v673;
  v737[1] = 3221225472;
  v737[2] = sub_1A398A4F0;
  v737[3] = &unk_1E4AA1148;
  objc_copyWeak(&v738, &location);
  objc_copyWeak(&v739, (id *)&buf);
  objc_msgSend_setOnWillSpeakRangeCallback_(v496, v686, (uint64_t)v737, v687, v688);
  v735[0] = v673;
  v735[1] = 3221225472;
  v735[2] = sub_1A398A60C;
  v735[3] = &unk_1E4AA1170;
  objc_copyWeak(&v736, (id *)&buf);
  objc_msgSend_setCompletionCallback_(v496, v689, (uint64_t)v735, v690, v691);
  objc_msgSend_speechManager(a1, v692, v693, v694, v695);
  v696 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dispatchSpeechAction_(v696, v697, (uint64_t)v496, v698, v699);

  objc_msgSend_postUtteranceDelay(v4, v700, v701, v702, v703);
  if (v707 > 0.0)
  {
    v708 = a1;
    objc_msgSend_pauseMarkupString_(TTSSpeechManager, v704, (uint64_t)v734, v705, v706);
    v709 = (void *)objc_claimAutoreleasedReturnValue();
    v710 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend_postUtteranceDelay(v4, v711, v712, v713, v714);
    objc_msgSend_stringWithFormat_(v710, v716, (uint64_t)v709, v717, v718, (int)(v715 * 1000.0));
    v719 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_actionWithString_shouldQueue_(TTSSpeechAction, v720, (uint64_t)v719, 1, v721);
    v722 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setVoiceIdentifier_(v722, v723, (uint64_t)v734, v724, v725);
    objc_msgSend_speechManager(v708, v726, v727, v728, v729);
    v730 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dispatchSpeechAction_(v730, v731, (uint64_t)v722, v732, v733);

  }
  objc_destroyWeak(&v736);
  objc_destroyWeak(&v739);
  objc_destroyWeak(&v738);
  objc_destroyWeak(&v742);
  objc_destroyWeak(&v741);
  objc_destroyWeak(&v745);
  objc_destroyWeak(&v744);
  objc_destroyWeak(&v748);
  objc_destroyWeak(&v747);
  objc_destroyWeak(&v751);
  objc_destroyWeak(&v750);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)&buf);

}

void sub_1A3989E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, id *a12, id *a13, id *a14, id *a15, id *a16, id *a17)
{
  uint64_t v17;

  _Block_object_dispose((const void *)(v17 - 176), 8);
  _Unwind_Resume(a1);
}

id sub_1A3989F18(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  id v6;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2050000000;
  v5 = (void *)qword_1ED1B56A0;
  v12 = qword_1ED1B56A0;
  if (!qword_1ED1B56A0)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1A398B470;
    v8[3] = &unk_1E4A9FC10;
    v8[4] = &v9;
    sub_1A398B470((uint64_t)v8, a2, a3, a4, a5);
    v5 = (void *)v10[3];
  }
  v6 = v5;
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_1A3989FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1A3989FD0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v5 = (id *)qword_1EE6D5748;
  v16 = qword_1EE6D5748;
  if (!qword_1EE6D5748)
  {
    v6 = (void *)sub_1A398B4C4(a1, a2, a3, a4, a5);
    v5 = (id *)dlsym(v6, "AXSpeechSourceKeyVoiceOver");
    v14[3] = (uint64_t)v5;
    qword_1EE6D5748 = (uint64_t)v5;
  }
  _Block_object_dispose(&v13, 8);
  if (!v5)
    sub_1A3AB271C(v7, v8, v9, v10, v11);
  return *v5;
}

void sub_1A398A050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id sub_1A398A068(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v5 = (id *)qword_1EE6D5750;
  v16 = qword_1EE6D5750;
  if (!qword_1EE6D5750)
  {
    v6 = (void *)sub_1A398B4C4(a1, a2, a3, a4, a5);
    v5 = (id *)dlsym(v6, "AXSpeechSourceKeySwitchControl");
    v14[3] = (uint64_t)v5;
    qword_1EE6D5750 = (uint64_t)v5;
  }
  _Block_object_dispose(&v13, 8);
  if (!v5)
    sub_1A3AB278C(v7, v8, v9, v10, v11);
  return *v5;
}

void sub_1A398A0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id sub_1A398A100(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v5 = (id *)qword_1EE6D5758;
  v16 = qword_1EE6D5758;
  if (!qword_1EE6D5758)
  {
    v6 = (void *)sub_1A398B4C4(a1, a2, a3, a4, a5);
    v5 = (id *)dlsym(v6, "AXSpeechSourceKeySpeechFeatures");
    v14[3] = (uint64_t)v5;
    qword_1EE6D5758 = (uint64_t)v5;
  }
  _Block_object_dispose(&v13, 8);
  if (!v5)
    sub_1A3AB27FC(v7, v8, v9, v10, v11);
  return *v5;
}

void sub_1A398A180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id sub_1A398A198(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v5 = (id *)qword_1EE6D5760;
  v16 = qword_1EE6D5760;
  if (!qword_1EE6D5760)
  {
    v6 = (void *)sub_1A398B56C(a1, a2, a3, a4, a5);
    v5 = (id *)dlsym(v6, "UIAccessibilityTokenBrailleDisplayOnly");
    v14[3] = (uint64_t)v5;
    qword_1EE6D5760 = (uint64_t)v5;
  }
  _Block_object_dispose(&v13, 8);
  if (!v5)
    sub_1A3AB286C(v7, v8, v9, v10, v11);
  return *v5;
}

void sub_1A398A218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_1A398A230(uint64_t a1, void *a2)
{
  id WeakRetained;
  char v4;
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  id v14;

  v14 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    v5 = objc_loadWeakRetained((id *)(a1 + 32));
    v6 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend_utterance(v14, v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_speechSynthesizer_didStartSpeechUtterance_(v5, v12, (uint64_t)v6, (uint64_t)v11, v13);

  }
}

void sub_1A398A2D4(uint64_t a1, void *a2)
{
  id WeakRetained;
  char v4;
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  id v14;

  v14 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    v5 = objc_loadWeakRetained((id *)(a1 + 32));
    v6 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend_utterance(v14, v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_speechSynthesizer_didPauseSpeechUtterance_(v5, v12, (uint64_t)v6, (uint64_t)v11, v13);

  }
}

void sub_1A398A378(uint64_t a1, void *a2)
{
  id WeakRetained;
  char v4;
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  id v14;

  v14 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    v5 = objc_loadWeakRetained((id *)(a1 + 32));
    v6 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend_utterance(v14, v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_speechSynthesizer_didContinueSpeechUtterance_(v5, v12, (uint64_t)v6, (uint64_t)v11, v13);

  }
}

void sub_1A398A41C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  char v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  id v21;

  v21 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = objc_opt_respondsToSelector();

  if ((v7 & 1) != 0)
  {
    objc_msgSend_utterance(v21, v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_loadWeakRetained((id *)(a1 + 32));
    v14 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend_avMark(v5, v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_speechSynthesizer_willSpeakMarker_utterance_(v13, v20, (uint64_t)v14, (uint64_t)v19, (uint64_t)v12);

  }
}

void sub_1A398A4F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;
  char v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  id v39;

  v39 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = objc_opt_respondsToSelector();

  v13 = v39;
  if ((v8 & 1) != 0)
  {
    objc_msgSend_utterance(v39, v9, v10, v11, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ssmlRepresentation(v14, v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v19;
    if (v19)
    {
      v25 = v19;
    }
    else
    {
      objc_msgSend_speechString(v14, v20, v21, v22, v23);
      v25 = (id)objc_claimAutoreleasedReturnValue();
    }
    v26 = v25;

    if (a3 + a4 <= (unint64_t)objc_msgSend_length(v26, v27, v28, v29, v30))
    {
      v31 = objc_loadWeakRetained((id *)(a1 + 32));
      v32 = objc_loadWeakRetained((id *)(a1 + 40));
      objc_msgSend_utterance(v39, v33, v34, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_speechSynthesizer_willSpeakRangeOfSpeechString_utterance_(v31, v38, (uint64_t)v32, a3, a4, v37);

    }
    v13 = v39;
  }

}

void sub_1A398A60C(uint64_t a1, void *a2, uint64_t a3)
{
  id *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend__handleSpeechDone_successful_(WeakRetained, v6, (uint64_t)v5, a3, v7);

}

void sub_1A398A664(void *a1, const char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  const char *v7;
  uint64_t v8;
  id v9;

  objc_msgSend_utterance(a3, a2, (uint64_t)a3, a4, a5);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_processSpeechJobFinished_successful_(a1, v7, (uint64_t)v9, a4, v8);

}

BOOL sub_1A398A6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 == 1;
}

BOOL sub_1A398A6BC(void *a1, uint64_t a2, uint64_t a3)
{
  dispatch_semaphore_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  _BOOL8 v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  _QWORD v79[4];
  NSObject *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  char v85;

  if (!TTSUseCoreSynthesizerForAV())
  {
    v11 = a1;
    objc_sync_enter(v11);
    objc_msgSend_inflightUtterance(v11, v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v19)
    {

    }
    else
    {
      objc_msgSend_speechQueue(v11, v20, v21, v22, v23);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend_count(v28, v29, v30, v31, v32);

      if (!v33)
      {
        v14 = 0;
LABEL_9:
        objc_sync_exit(v11);
        goto LABEL_10;
      }
    }
    objc_msgSend_speechManager(v11, v24, v25, v26, v27);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = objc_msgSend__convertBoundary_(v11, v35, a3, v36, v37);
    objc_msgSend_stopSpeaking_(v34, v39, v38, v40, v41);

    objc_msgSend_speechManager(v11, v42, v43, v44, v45);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_clearSpeechQueue(v46, v47, v48, v49, v50);

    objc_msgSend_speechQueue(v11, v51, v52, v53, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v60 = objc_msgSend_count(v55, v56, v57, v58, v59);

    if (v60 >= 2)
    {
      objc_msgSend_speechQueue(v11, v61, v62, v63, v64);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_speechQueue(v11, v66, v67, v68, v69);
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      v75 = objc_msgSend_count(v70, v71, v72, v73, v74);
      objc_msgSend_removeObjectsInRange_(v65, v76, 1, v75 - 1, v77);

    }
    v14 = 1;
    goto LABEL_9;
  }
  v5 = dispatch_semaphore_create(0);
  v82 = 0;
  v83 = &v82;
  v84 = 0x2020000000;
  v85 = 0;
  objc_msgSend_coreSynth(a1, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v79[0] = MEMORY[0x1E0C809B0];
  v79[1] = 3221225472;
  v79[2] = sub_1A398A8D8;
  v79[3] = &unk_1E4AA1198;
  v81 = &v82;
  v11 = v5;
  v80 = v11;
  objc_msgSend_stopSpeakingAt_completionHandler_(v10, v12, a3, (uint64_t)v79, v13);

  dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
  v14 = *((_BYTE *)v83 + 24) != 0;

  _Block_object_dispose(&v82, 8);
LABEL_10:

  return v14;
}

void sub_1A398A8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_1A398A8D8(uint64_t a1, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

BOOL sub_1A398A8EC(void *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  _BOOL8 v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v43[5];
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  char v47;

  if (!TTSUseCoreSynthesizerForAV())
  {
    v14 = a1;
    objc_sync_enter(v14);
    objc_msgSend_inflightUtterance(v14, v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v19)
    {

    }
    else
    {
      objc_msgSend_speechQueue(v14, v20, v21, v22, v23);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend_count(v28, v29, v30, v31, v32);

      if (!v33)
      {
        v13 = 0;
        goto LABEL_7;
      }
    }
    objc_msgSend_speechManager(v14, v24, v25, v26, v27);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = objc_msgSend__convertBoundary_(v14, v35, a3, v36, v37);
    objc_msgSend_pauseSpeaking_(v34, v39, v38, v40, v41);

    v13 = 1;
LABEL_7:
    objc_sync_exit(v14);

    return v13;
  }
  v44 = 0;
  v45 = &v44;
  v46 = 0x2020000000;
  v47 = 0;
  v5 = dispatch_semaphore_create(0);
  objc_msgSend_coreSynth(a1, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v43[0] = MEMORY[0x1E0C809B0];
  v43[1] = 3221225472;
  v43[2] = sub_1A398AA7C;
  v43[3] = &unk_1E4AA1040;
  v43[4] = &v44;
  objc_msgSend_pauseSpeakingAt_completionHandler_(v10, v11, a3, (uint64_t)v43, v12);

  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  v13 = *((_BYTE *)v45 + 24) != 0;

  _Block_object_dispose(&v44, 8);
  return v13;
}

void sub_1A398AA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A398AA7C(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t sub_1A398AA8C(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (!TTSUseCoreSynthesizerForAV())
  {
    v6 = a1;
    objc_sync_enter(v6);
    objc_msgSend_inflightUtterance(v6, v12, v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16)
    {

    }
    else
    {
      objc_msgSend_speechQueue(v6, v17, v18, v19, v20);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend_count(v25, v26, v27, v28, v29);

      if (!v30)
      {
        v11 = 0;
        goto LABEL_7;
      }
    }
    objc_msgSend_speechManager(v6, v21, v22, v23, v24);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_continueSpeaking(v31, v32, v33, v34, v35);

    v11 = 1;
LABEL_7:
    objc_sync_exit(v6);
    goto LABEL_8;
  }
  objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_continueSpeaking(v6, v7, v8, v9, v10);
LABEL_8:

  return v11;
}

void sub_1A398AB4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A398AB60(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t isSpeaking;

  if (TTSUseCoreSynthesizerForAV())
    objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
  else
    objc_msgSend_speechManager(a1, v2, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  isSpeaking = objc_msgSend_isSpeaking(v6, v7, v8, v9, v10);

  return isSpeaking;
}

uint64_t sub_1A398ABB4(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t isPaused;

  if (TTSUseCoreSynthesizerForAV())
    objc_msgSend_coreSynth(a1, v2, v3, v4, v5);
  else
    objc_msgSend_speechManager(a1, v2, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  isPaused = objc_msgSend_isPaused(v6, v7, v8, v9, v10);

  return isPaused;
}

void sub_1A398AC08(void *a1, uint64_t a2, void *a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  _QWORD v51[4];
  id v52;
  _QWORD block[4];
  id v54;
  uint8_t buf[4];
  void *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  if (!MEMORY[0x1E0DB1010])
  {
    v9 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v9)
      sub_1A3AB28DC(v9, v10, v11, v12, v13, v14, v15, v16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1A398AE74;
    block[3] = &unk_1E4A9FB20;
    v54 = v8;
    dispatch_async(MEMORY[0x1E0C80D38], block);
    v17 = v54;
LABEL_13:

    goto LABEL_14;
  }
  if ((objc_msgSend__supportsSpeakingWithPersonalVoices(a1, v4, v5, v6, v7) & 1) == 0)
  {
    v33 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v33)
      sub_1A3AB2944(v33, v34, v35, v36, v37, v38, v39, v40);
    v51[0] = MEMORY[0x1E0C809B0];
    v51[1] = 3221225472;
    v51[2] = sub_1A398AE84;
    v51[3] = &unk_1E4A9FB20;
    v52 = v8;
    dispatch_async(MEMORY[0x1E0C80D38], v51);
    v17 = v52;
    goto LABEL_13;
  }
  if ((objc_msgSend_isSoftAppUsageProtectionDisabled(a1, v18, v19, v20, v21) & 1) != 0)
  {
    objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v22, v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_bundleIdentifier(v26, v27, v28, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v56 = v31;
      _os_log_impl(&dword_1A3940000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Will request personal voice TCC: %@", buf, 0xCu);
    }
    v49 = v31;
    v50 = v8;
    v32 = v31;
    TCCAccessRequest();

  }
  else
  {
    v41 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v41)
      sub_1A3AB2910(v41, v42, v43, v44, v45, v46, v47, v48);
    (*((void (**)(id, uint64_t))v8 + 2))(v8, 1);
  }
LABEL_14:

}

uint64_t sub_1A398AE74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1A398AE84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1A398AE94(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  char v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 32);
    objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v4, a2, v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v13 = v7;
    v14 = 2112;
    v15 = v8;
    _os_log_impl(&dword_1A3940000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Did request personal voice TCC for %@. granted=%@", buf, 0x16u);

  }
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1A398AFBC;
  v9[3] = &unk_1E4AA11C0;
  v10 = *(id *)(a1 + 40);
  v11 = a2;
  dispatch_async(MEMORY[0x1E0C80D38], v9);

}

uint64_t sub_1A398AFBC(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(a1 + 40))
    v1 = 3;
  else
    v1 = 1;
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v1);
}

uint64_t sub_1A398AFDC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  if (!MEMORY[0x1E0DB1010])
  {
    v5 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v5)
      sub_1A3AB28DC(v5, v6, v7, v8, v9, v10, v11, v12);
    return 2;
  }
  if ((objc_msgSend__supportsSpeakingWithPersonalVoices(a1, a2, a3, a4, a5) & 1) == 0)
  {
    v19 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v19)
      sub_1A3AB2944(v19, v20, v21, v22, v23, v24, v25, v26);
    return 2;
  }
  if ((TTSIsPersonalVoicePrivilagedProcess() & 1) != 0)
    return 3;
  if (!objc_msgSend_isSoftAppUsageProtectionDisabled(a1, v14, v15, v16, v17))
    return 1;
  v27 = TCCAccessPreflight();
  if (v27 == 2)
    return 0;
  if (!v27)
    return 3;
  if (TCCAccessRestricted())
    return 2;
  else
    return 1;
}

void sub_1A398B0AC(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v16 = a4;
  v6 = a3;
  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_write_toBufferCallback_synth_completionHandler_(v11, v12, (uint64_t)v6, (uint64_t)v16, (uint64_t)a1, &unk_1E4AA1208);

    v6 = v11;
  }
  else
  {
    objc_msgSend_setAudioBufferCallback_(v6, v7, (uint64_t)v16, v9, v10);
    objc_msgSend_speakUtterance_(a1, v13, (uint64_t)v6, v14, v15);
  }

}

void sub_1A398B14C(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  id v18;

  v18 = a5;
  v8 = a4;
  v9 = a3;
  if (TTSUseCoreSynthesizerForAV())
  {
    objc_msgSend_coreSynth(a1, v10, v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_write_toBufferCallback_toMarkerCallback_synth_completionHandler_(v14, v15, (uint64_t)v9, (uint64_t)v8, (uint64_t)v18, a1, &unk_1E4AA1228);

    v8 = v9;
    v9 = v14;
  }
  else
  {
    objc_msgSend_setMarkerCallback_(v9, v10, (uint64_t)v18, v12, v13);
    objc_msgSend_writeUtterance_toBufferCallback_(a1, v16, (uint64_t)v9, (uint64_t)v8, v17);
  }

}

void sub_1A398B208(void *a1, uint64_t a2, void *a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;

  v58 = a3;
  if (!TTSUseCoreSynthesizerForAV())
  {
    v8 = a1;
    objc_sync_enter(v8);
    objc_msgSend__applyWebKitBehaviors(v8, v10, v11, v12, v13);
    if (v58)
    {
      if (objc_msgSend_detectSSMLAndModifyUtterances(v8, v14, v15, v16, v17))
        objc_msgSend_transformUtteranceBasedOnSSMLIfDetected_(MEMORY[0x1E0C89BA0], v18, (uint64_t)v58, v20, v21);
      objc_msgSend_speechQueue(v8, v18, v19, v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_indexOfObjectIdenticalTo_(v22, v23, (uint64_t)v58, v24, v25) == 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend_inflightUtterance(v8, v26, v27, v28, v29);
        v30 = (id)objc_claimAutoreleasedReturnValue();

        if (v30 != v58)
        {
          objc_msgSend_speechQueue(v8, v31, v32, v33, v34);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v35, v36, (uint64_t)v58, v37, v38);

          objc_msgSend_inflightUtterance(v8, v39, v40, v41, v42);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          if (v43)
          {

          }
          else
          {
            objc_msgSend_speechQueue(v8, v44, v45, v46, v47);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            v53 = objc_msgSend_count(v48, v49, v50, v51, v52);

            if (v53)
              objc_msgSend__enqueueNextJob(v8, v54, v55, v56, v57);
          }
          goto LABEL_12;
        }
      }
      else
      {

      }
      objc_msgSend_raise_format_(MEMORY[0x1E0C99DA0], v31, (uint64_t)CFSTR("AVSpeechSynthesizer"), (uint64_t)CFSTR("An AVSpeechUtterance shall not be enqueued twice"), v34);
    }
LABEL_12:
    objc_sync_exit(v8);
    goto LABEL_13;
  }
  objc_msgSend_coreSynth(a1, v4, v5, v6, v7);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_speak_synth_completionHandler_(v8, v9, (uint64_t)v58, (uint64_t)a1, (uint64_t)&unk_1E4AA1248);
LABEL_13:

}

void sub_1A398B37C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

Class sub_1A398B394(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Class result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  if (!qword_1EE6D5740)
  {
    v12 = xmmword_1E4AA1268;
    v13 = 0;
    qword_1EE6D5740 = _sl_dlopen();
  }
  if (!qword_1EE6D5740)
    sub_1A3AB2978(&v11, a2, a3, a4, a5);
  result = objc_getClass("TTSVBSettings");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1A3AB29F4((uint64_t)result, v7, v8, v9, v10);
  qword_1EE6D5738 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1A398B470(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Class result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1A398B4C4(a1, a2, a3, a4, a5);
  result = objc_getClass("AXSettings");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1A3AB2A6C((uint64_t)result, v7, v8, v9, v10);
  qword_1ED1B56A0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A398B4C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  if (!qword_1ED1B5668)
  {
    v7 = xmmword_1E4AA1280;
    v8 = 0;
    qword_1ED1B5668 = _sl_dlopen();
  }
  if (!qword_1ED1B5668)
    sub_1A3AB2AE4(&v6, a2, a3, a4, a5);
  return qword_1ED1B5668;
}

uint64_t sub_1A398B56C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  if (!qword_1EE6D5768)
  {
    v7 = xmmword_1E4AA1298;
    v8 = 0;
    qword_1EE6D5768 = _sl_dlopen();
  }
  if (!qword_1EE6D5768)
    sub_1A3AB2B60(&v6, a2, a3, a4, a5);
  return qword_1EE6D5768;
}

char *sub_1A398B614()
{
  return dlerror();
}

id TTSSpeechTransformTextWithLanguageAndVoiceIdentifier(void *a1, char a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  __CFString *v20;
  uint64_t v21;
  uint64_t v22;

  v9 = a1;
  v10 = a3;
  v11 = a4;
  v15 = a5;
  if (v11)
  {
    objc_msgSend_pauseMarkupString_(TTSSpeechManager, v12, (uint64_t)v11, v13, v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v17, (uint64_t)v16, v18, v19, 350);
    v20 = (__CFString *)objc_claimAutoreleasedReturnValue();

    if ((a2 & 1) == 0)
      goto LABEL_3;
  }
  else
  {
    v20 = CFSTR(" \x1B\\pause=350\\ ");
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if ((a2 & 2) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  objc_msgSend_stringByReplacingEmojiCharactersWithEmojiDescriptions_stringForPauses_language_rangeReplacements_appendEmojiSuffix_(TTSEmojiUtilities, v12, (uint64_t)v9, (uint64_t)v20, (uint64_t)v10, v15, 0);
  v21 = objc_claimAutoreleasedReturnValue();

  v9 = (id)v21;
  if ((a2 & 2) != 0)
  {
LABEL_7:
    _TTSSpeechReplaceEmoticons(v9, v10, v15);
    v22 = objc_claimAutoreleasedReturnValue();

    v9 = (id)v22;
  }
LABEL_8:

  return v9;
}

void sub_1A398BF5C()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A398BF8C()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A398BFBC()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

uint64_t sub_1A398CFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleMediaServicesWereLost_, *(_QWORD *)(a1 + 40), a4, a5);
}

uint64_t sub_1A398D05C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_setAudioSession_(*(void **)(a1 + 32), a2, 0, a4, a5);
}

uint64_t sub_1A398D100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleMediaServicesWereReset_, *(_QWORD *)(a1 + 40), a4, a5);
}

void sub_1A398D3B8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

uint64_t sub_1A398D480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleAudioInterruption_, *(_QWORD *)(a1 + 40), a4, a5);
}

void sub_1A398D65C()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A398D85C()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A398DBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1A398DC0C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  id v6;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2050000000;
  v5 = (void *)qword_1ED1B56A8;
  v12 = qword_1ED1B56A8;
  if (!qword_1ED1B56A8)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1A3993B40;
    v8[3] = &unk_1E4A9FC10;
    v8[4] = &v9;
    sub_1A3993B40((uint64_t)v8, a2, a3, a4, a5);
    v5 = (void *)v10[3];
  }
  v6 = v5;
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_1A398DCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A398DCC4(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend__updateUserSubstitutions(WeakRetained, v1, v2, v3, v4);

}

void sub_1A398DCF0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

uint64_t sub_1A398DDB0(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 96);
  return result;
}

uint64_t sub_1A398DE1C(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 96) = *(_QWORD *)(result + 40);
  return result;
}

void sub_1A398DEA4(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 88), *(id *)(a1 + 40));
}

uint64_t sub_1A398DF64(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1A398DF74(uint64_t a1)
{

}

void sub_1A398DF7C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 88));
}

uint64_t sub_1A398DFE8(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 80) = *(_QWORD *)(result + 40);
  return result;
}

uint64_t sub_1A398E084(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 80);
  return result;
}

uint64_t sub_1A398E128(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 57);
  return result;
}

uint64_t sub_1A398E198(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 57) = *(_BYTE *)(result + 40);
  return result;
}

void sub_1A398E25C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 104));
}

void sub_1A398E2EC(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 104), *(id *)(a1 + 40));
}

uint64_t sub_1A398E388(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 56);
  return result;
}

uint64_t sub_1A398E3F8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 56) = *(_BYTE *)(result + 40);
  return result;
}

void sub_1A398E694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A398EA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1A398EB04(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_footprint(a2, (const char *)a2, a3, a4, a5) == 2;
}

id sub_1A398EB24(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;

  objc_msgSend_speechVoice(a2, (const char *)a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  AXAVSpeechSynthesisVoiceFromTTSAXResource(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id AXAVSpeechSynthesisVoiceFromTTSAXResource(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t isNoveltyVoice;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t canBeDownloaded;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t isDefault;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;

  v1 = a1;
  if (v1)
  {
    AXLogSpeechSynthesis();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      sub_1A3AB2EC4();

    v3 = objc_alloc_init(MEMORY[0x1E0C89B80]);
    objc_msgSend_language(v1, v4, v5, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend_copy(v8, v9, v10, v11, v12);
    objc_msgSend_setLanguage_(v3, v14, (uint64_t)v13, v15, v16);

    objc_msgSend_identifier(v1, v17, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = (void *)objc_msgSend_copy(v21, v22, v23, v24, v25);
    objc_msgSend_setIdentifier_(v3, v27, (uint64_t)v26, v28, v29);

    isNoveltyVoice = objc_msgSend_isNoveltyVoice(v1, v30, v31, v32, v33);
    objc_msgSend_setIsNoveltyVoice_(v3, v35, isNoveltyVoice, v36, v37);
    objc_msgSend_name(v1, v38, v39, v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = (void *)objc_msgSend_copy(v42, v43, v44, v45, v46);
    objc_msgSend_setNonLocalizedNameWithoutQuality_(v3, v48, (uint64_t)v47, v49, v50);

    v51 = AXAVVoiceQualityFromTTSSpeechVoice(v1);
    objc_msgSend_setQuality_(v3, v52, v51, v53, v54);
    objc_msgSend_setIsInstalled_(v3, v55, 1, v56, v57);
    canBeDownloaded = objc_msgSend_canBeDownloaded(v1, v58, v59, v60, v61);
    objc_msgSend_setCanBeDownloaded_(v3, v63, canBeDownloaded, v64, v65);
    objc_msgSend_setAssetSize_(v3, v66, 0, v67, v68);
    isDefault = objc_msgSend_isDefault(v1, v69, v70, v71, v72);
    objc_msgSend_setIsDefault_(v3, v74, isDefault, v75, v76);
    objc_msgSend_synthesisProviderVoice(v1, v77, v78, v79, v80);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSynthesisProviderVoice_(v3, v82, (uint64_t)v81, v83, v84);

    if (objc_msgSend_gender(v1, v85, v86, v87, v88) == 1)
    {
      objc_msgSend_setGender_(v3, v89, 1, v91, v92);
    }
    else
    {
      v93 = 2 * (objc_msgSend_gender(v1, v89, v90, v91, v92) == 2);
      objc_msgSend_setGender_(v3, v94, v93, v95, v96);
    }
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1A398EE5C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A398EF2C()
{
  void *v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint8_t buf[4];
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0CB34D0];
  v1 = AXSAccessibilityUtilitiesPath();
  objc_msgSend_bundleWithPath_(v0, v2, v1, v3, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)qword_1ED1B5B70;
  qword_1ED1B5B70 = v5;

  v11 = (void *)qword_1ED1B5B70;
  if (!qword_1ED1B5B70)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v7, (uint64_t)CFSTR("**** AX Error: Could not load AccessibilityUtilities.framework bundle. bundleWithPath came back nil"), v9, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v13, (uint64_t)CFSTR("%s:%d %@"), v14, v15, "+[TTSSpeechManager availableVoices:]_block_invoke", 993, v12);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (qword_1ED1B5680 != -1)
      dispatch_once(&qword_1ED1B5680, &unk_1E4A9D468);
    v17 = (void *)qword_1ED1B5688;
    if (os_log_type_enabled((os_log_t)qword_1ED1B5688, OS_LOG_TYPE_DEFAULT))
    {
      v18 = objc_retainAutorelease(v16);
      v19 = v17;
      *(_DWORD *)buf = 136446210;
      v47 = objc_msgSend_UTF8String(v18, v20, v21, v22, v23);
      _os_log_impl(&dword_1A3940000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);

    }
    v11 = (void *)qword_1ED1B5B70;
  }
  if ((objc_msgSend_isLoaded(v11, v7, v8, v9, v10) & 1) == 0)
  {
    v45 = 0;
    v27 = objc_msgSend_loadAndReturnError_((void *)qword_1ED1B5B70, v24, (uint64_t)&v45, v25, v26);
    v31 = v45;
    if ((v27 & 1) == 0)
    {
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v28, (uint64_t)CFSTR("Could not load bundle: %@"), v29, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v33, (uint64_t)CFSTR("%s:%d %@"), v34, v35, "+[TTSSpeechManager availableVoices:]_block_invoke", 1001, v32);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      if (qword_1ED1B5680 != -1)
        dispatch_once(&qword_1ED1B5680, &unk_1E4AA1410);
      v37 = (void *)qword_1ED1B5688;
      if (os_log_type_enabled((os_log_t)qword_1ED1B5688, OS_LOG_TYPE_DEFAULT))
      {
        v38 = objc_retainAutorelease(v36);
        v39 = v37;
        v44 = objc_msgSend_UTF8String(v38, v40, v41, v42, v43);
        *(_DWORD *)buf = 136446210;
        v47 = v44;
        _os_log_impl(&dword_1A3940000, v39, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);

      }
    }

  }
}

void sub_1A398F1BC()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A398F1EC()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

id sub_1A398F21C(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = a2;
  if (objc_msgSend_voiceType(v2, v3, v4, v5, v6) == 4
    || objc_msgSend_voiceType(v2, v7, v8, v9, v10) == 5
    || objc_msgSend_voiceType(v2, v11, v12, v13, v14) == 7)
  {
    v15 = 0;
  }
  else
  {
    AXAVSpeechSynthesisVoiceFromTTSAXResource(v2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v15;
}

id sub_1A398F298(uint64_t a1, void *a2)
{
  id v2;
  void *v3;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    AXAVSpeechSynthesisVoiceFromTTSAXResource(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1A398FB88(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  objc_msgSend_completionCallback(*(void **)(a1 + 32), a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend_completionCallback(*(void **)(a1 + 32), v7, v8, v9, v10);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v11 + 2))(v11, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));

  }
}

void sub_1A398FBF8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A398FC28()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

uint64_t sub_1A398FC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__resetInterruptionTracking, a3, a4, a5);
}

void sub_1A398FC60()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A398FC90()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A398FCC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t active;
  const char *v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint8_t buf[4];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  objc_msgSend_audioSession(*(void **)(a1 + 32), a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  active = objc_msgSend_setActiveOptions(*(void **)(a1 + 32), v7, v8, v9, v10);
  v30 = 0;
  objc_msgSend_setActive_withOptions_error_(v6, v12, 0, active, (uint64_t)&v30);
  v13 = v30;

  if (v13)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v14, (uint64_t)CFSTR("Error setting audio session to inactive: %@"), v15, v16, v13);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v18, (uint64_t)CFSTR("%s:%d %@"), v19, v20, "-[TTSSpeechManager _speechJobFinished:action:]_block_invoke", 1148, v17);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (qword_1ED1B5680 != -1)
      dispatch_once(&qword_1ED1B5680, &unk_1E4AA14B0);
    v22 = (void *)qword_1ED1B5688;
    if (os_log_type_enabled((os_log_t)qword_1ED1B5688, OS_LOG_TYPE_DEFAULT))
    {
      v23 = objc_retainAutorelease(v21);
      v24 = v22;
      v29 = objc_msgSend_UTF8String(v23, v25, v26, v27, v28);
      *(_DWORD *)buf = 136446210;
      v32 = v29;
      _os_log_impl(&dword_1A3940000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);

    }
  }

}

void sub_1A398FE50()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A3990034(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  TTSSubstitution *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;

  v27 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v7 = objc_alloc_init(TTSSubstitution);
    objc_msgSend_string(*(void **)(a1 + 32), v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_substringWithRange_(v12, v13, a3, a4, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOriginalString_(v7, v16, (uint64_t)v15, v17, v18);

    objc_msgSend_setPhonemes_(v7, v19, (uint64_t)v27, v20, v21);
    objc_msgSend_setReplacementRange_(v7, v22, a3, a4, v23);
    objc_msgSend_addObject_(*(void **)(a1 + 40), v24, (uint64_t)v7, v25, v26);

  }
}

void sub_1A3990CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3990CFC()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A3990D2C()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A3990D5C()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A3990D8C()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A3990DBC(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  _QWORD block[5];
  id v7;
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1A3990E68;
  block[3] = &unk_1E4AA0560;
  block[4] = WeakRetained;
  v7 = v3;
  v8 = *(id *)(a1 + 32);
  v5 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

void sub_1A3990E68(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v5 = (void *)a1[4];
  v6 = a1[6];
  v9[0] = a1[5];
  v9[1] = v6;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], a2, (uint64_t)v9, 2, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__enqueueSelectorOnSpeechThread_object_waitUntilDone_(v5, v8, (uint64_t)sel__processAudioBufferCallback_, (uint64_t)v7, 1);

}

void sub_1A3990F04()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A3990F34()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A3991130(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (**v19)(_QWORD, _QWORD);
  id v20;

  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), a2, 0, a4, a5);
  v20 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v6, 1, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_audioBufferCallback(v9, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend_audioBufferCallback(v9, v15, v16, v17, v18);
    v19 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id))v19)[2](v19, v20);

  }
}

void sub_1A3991770()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A39917A0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A39917D0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A3991800()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A3991830()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A3991D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3991D40(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  objc_msgSend_outputChannels(*(void **)(*(_QWORD *)(a1 + 32) + 16), a2, a3, a4, a5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

uint64_t sub_1A3991F54(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_setOutputChannels_(*(void **)(*(_QWORD *)(a1 + 32) + 16), a2, 0, a4, a5);
}

uint64_t sub_1A3991F64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_setOutputChannels_(*(void **)(*(_QWORD *)(a1 + 32) + 16), a2, *(_QWORD *)(a1 + 40), a4, a5);
}

uint64_t sub_1A3992000(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 68);
  return result;
}

uint64_t sub_1A3992070(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 68) = *(_DWORD *)(a1 + 40);
  return objc_msgSend_setAudioQueueFlags_(*(void **)(*(_QWORD *)(a1 + 32) + 16), a2, *(unsigned int *)(a1 + 40), a4, a5);
}

uint64_t sub_1A3992190(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_QWORD, _QWORD);
  uint64_t result;

  objc_msgSend_onSpeechStartCallback(*(void **)(a1 + 32), a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend_onSpeechStartCallback(*(void **)(a1 + 32), v7, v8, v9, v10);
    v11 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v11[2](v11, *(_QWORD *)(a1 + 32));

  }
  result = qword_1EE6D57A0;
  if (qword_1EE6D57A0)
    return (*(uint64_t (**)(void))(qword_1EE6D57A0 + 16))();
  return result;
}

void sub_1A399293C()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A399296C()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

void sub_1A3992AE4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(id, _QWORD);

  objc_msgSend_onPauseCallback(*(void **)(a1 + 32), a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend_onPauseCallback(*(void **)(a1 + 32), v7, v8, v9, v10);
    v11 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue();
    v11[2](v11, *(_QWORD *)(a1 + 32));

  }
}

void sub_1A3992C98(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(id, _QWORD);

  objc_msgSend_onResumeCallback(*(void **)(a1 + 32), a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend_onResumeCallback(*(void **)(a1 + 32), v7, v8, v9, v10);
    v11 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue();
    v11[2](v11, *(_QWORD *)(a1 + 32));

  }
}

void sub_1A3992FB8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  objc_msgSend_onMarkerCallback(*(void **)(a1 + 32), a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend_onMarkerCallback(*(void **)(a1 + 32), v7, v8, v9, v10);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v11 + 2))(v11, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

  }
}

void sub_1A3993134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3993150(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (**v85)(_QWORD, _QWORD, _QWORD, _QWORD);
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _BYTE v90[128];
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  objc_msgSend_processedString(*(void **)(a1 + 32), a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
    goto LABEL_19;
  objc_msgSend_emojiRangeReplacements(*(void **)(a1 + 32), v7, v8, v9, v10);
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v86, (uint64_t)v90, 16);
  if (v13)
  {
    v17 = v13;
    v18 = *(_QWORD *)v87;
LABEL_4:
    v19 = 0;
    while (1)
    {
      if (*(_QWORD *)v87 != v18)
        objc_enumerationMutation(v11);
      v20 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * v19);
      objc_msgSend_objectForKey_(v20, v14, (uint64_t)CFSTR("processedRange"), v15, v16, (_QWORD)v86);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend_rangeValue(v21, v22, v23, v24, v25);
      v28 = v27;

      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v30 = *(_QWORD *)(v29 + 32);
      if (v30 >= v26 && *(_QWORD *)(v29 + 40) + v30 <= v26 + v28)
        break;
      if (v17 == ++v19)
      {
        v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v14, (uint64_t)&v86, (uint64_t)v90, 16);
        if (v17)
          goto LABEL_4;
        goto LABEL_11;
      }
    }
    objc_msgSend_objectForKey_(v20, v14, (uint64_t)CFSTR("notified"), v15, v16);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = objc_msgSend_BOOLValue(v32, v33, v34, v35, v36);

    if ((v37 & 1) != 0)
    {
      v31 = 1;
      goto LABEL_14;
    }
    objc_msgSend_objectForKey_(v20, v38, (uint64_t)CFSTR("originalRange"), v39, v40);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = objc_msgSend_rangeValue(v45, v46, v47, v48, v49);
    v52 = v51;

    v56 = objc_msgSend_indexOfObject_(v11, v53, (uint64_t)v20, v54, v55);
    v57 = *(void **)(a1 + 32);
    v62 = objc_msgSend_wordCallbackPostProcessedOffset(v57, v58, v59, v60, v61);
    objc_msgSend_setWordCallbackPostProcessedOffset_(v57, v63, v28 - v52 + v62, v64, v65);
    v66 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    *(_QWORD *)(v66 + 32) = v50;
    *(_QWORD *)(v66 + 40) = v52;

    if (v56 != 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend_objectAtIndex_(v11, v67, v56, v68, v69);
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      v75 = (void *)objc_msgSend_mutableCopy(v70, v71, v72, v73, v74);

      objc_msgSend_setObject_forKeyedSubscript_(v75, v76, MEMORY[0x1E0C9AAB0], (uint64_t)CFSTR("notified"), v77);
      objc_msgSend_replaceObjectAtIndex_withObject_(v11, v78, v56, (uint64_t)v75, v79);

    }
    goto LABEL_19;
  }
LABEL_11:
  v31 = 0;
LABEL_14:

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32) -= objc_msgSend_wordCallbackPostProcessedOffset(*(void **)(a1 + 32), v41, v42, v43, v44);
  if ((v31 & 1) == 0)
  {
LABEL_19:
    objc_msgSend_onWillSpeakRangeCallback(*(void **)(a1 + 32), v7, v8, v9, v10, (_QWORD)v86);
    v80 = (void *)objc_claimAutoreleasedReturnValue();

    if (v80)
    {
      objc_msgSend_onWillSpeakRangeCallback(*(void **)(a1 + 32), v81, v82, v83, v84);
      v85 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v85[2](v85, *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

    }
  }
}

id _TTSSpeechReplaceEmoticons(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t);
  id v47;
  _QWORD v48[4];

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v12 = v7;
  if (!qword_1ED1B5648)
  {
    VOTBundle((uint64_t)v7, v8, v9, v10, v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pathForResource_ofType_(v13, v14, (uint64_t)CFSTR("VOTEmoticons"), (uint64_t)CFSTR("plist"), v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
    {
      objc_msgSend_dictionaryWithContentsOfFile_(MEMORY[0x1E0C99D80], v17, (uint64_t)v16, v18, v19);
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = (void *)qword_1ED1B5648;
      qword_1ED1B5648 = v20;

    }
  }
  v48[0] = 0;
  v48[1] = v48;
  v48[2] = 0x2020000000;
  v48[3] = 0;
  v42 = 0;
  v43 = &v42;
  v44 = 0x3032000000;
  v45 = sub_1A398DF64;
  v46 = sub_1A398DF74;
  v47 = (id)objc_msgSend_mutableCopy(v5, v8, v9, v10, v11);
  objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E0CB3500], v22, v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = (void *)qword_1ED1B5648;
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 3221225472;
  v36[2] = sub_1A3993808;
  v36[3] = &unk_1E4AA16B0;
  v40 = &v42;
  v28 = v26;
  v37 = v28;
  v29 = v6;
  v38 = v29;
  v41 = v48;
  v30 = v12;
  v39 = v30;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v27, v31, (uint64_t)v36, v32, v33);
  v34 = (id)v43[5];

  _Block_object_dispose(&v42, 8);
  _Block_object_dispose(v48, 8);

  return v34;
}

void sub_1A39937DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1A3993808(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const __CFString *v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const __CFString *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  id v62;
  id v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  _QWORD v70[2];
  _QWORD v71[3];

  v71[2] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (objc_msgSend_length(*(void **)(*(_QWORD *)(a1[7] + 8) + 40), v7, v8, v9, v10))
  {
    v15 = 0;
    v16 = 0;
    v17 = CFSTR(".");
    do
    {
      v18 = *(void **)(*(_QWORD *)(a1[7] + 8) + 40);
      v19 = objc_msgSend_length(v18, v11, v12, v13, v14);
      v21 = objc_msgSend_rangeOfString_options_range_(v18, v20, (uint64_t)v6, 2, v15 + v16, v19 - (v15 + v16));
      v15 = v21;
      v16 = (uint64_t)v22;
      if (v21)
      {
        if (v21 == 0x7FFFFFFFFFFFFFFFLL)
          continue;
        v26 = (void *)a1[4];
        v27 = objc_msgSend_characterAtIndex_(*(void **)(*(_QWORD *)(a1[7] + 8) + 40), v22, v21 - 1, v24, v25);
        if (!objc_msgSend_characterIsMember_(v26, v28, v27, v29, v30))
          continue;
      }
      if (v15 + v16 != objc_msgSend_length(*(void **)(*(_QWORD *)(a1[7] + 8) + 40), v22, v23, v24, v25))
      {
        v31 = (void *)a1[4];
        v32 = objc_msgSend_characterAtIndex_(*(void **)(*(_QWORD *)(a1[7] + 8) + 40), v22, v15 + v16, v24, v25);
        if (!objc_msgSend_characterIsMember_(v31, v33, v32, v34, v35))
          continue;
      }
      v36 = objc_msgSend_rangeOfString_(v5, v22, (uint64_t)v17, v24, v25);
      if (v36 != 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend_substringToIndex_(v5, v22, v36, v24, v25);
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        VOTBundle((uint64_t)v69, v37, v38, v39, v40);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        AXNSLocalizedStringForLocale();
        v42 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_replaceCharactersInRange_withString_(*(void **)(*(_QWORD *)(a1[7] + 8) + 40), v43, v15, v16, (uint64_t)v42);
        *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) += objc_msgSend_length(v42, v44, v45, v46, v47) - v16;
        v68 = (void *)a1[6];
        v70[0] = CFSTR("originalRange");
        objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v48, v15 - *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24), v16, v49);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        v70[1] = CFSTR("processedRange");
        v71[0] = v50;
        v51 = v17;
        v52 = (void *)MEMORY[0x1E0CB3B18];
        v57 = objc_msgSend_length(v42, v53, v54, v55, v56);
        objc_msgSend_valueWithRange_(v52, v58, v15, v57, v59);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        v71[1] = v60;
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v61, (uint64_t)v71, (uint64_t)v70, 2);
        v62 = v6;
        v63 = v5;
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v68, v65, (uint64_t)v64, v66, v67);

        v5 = v63;
        v6 = v62;

        v17 = v51;
      }
    }
    while (v15 < objc_msgSend_length(*(void **)(*(_QWORD *)(a1[7] + 8) + 40), v22, v23, v24, v25));
  }

}

id TTSSpeechTransformText(void *a1, char a2)
{
  return TTSSpeechTransformTextWithLanguageAndVoiceIdentifier(a1, a2, 0, 0, 0);
}

id TTSSpeechTransformTextWithLanguage(void *a1, char a2, void *a3, void *a4)
{
  return TTSSpeechTransformTextWithLanguageAndVoiceIdentifier(a1, a2, a3, 0, a4);
}

void sub_1A3993B10()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "SpeechManager");
  v1 = (void *)qword_1ED1B5688;
  qword_1ED1B5688 = (uint64_t)v0;

}

Class sub_1A3993B40(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Class result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1A3993B94(a1, a2, a3, a4, a5);
  result = objc_getClass("AXSettings");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1A3AB313C((uint64_t)result, v7, v8, v9, v10);
  qword_1ED1B56A8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A3993B94(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  if (!qword_1ED1B5670)
  {
    v7 = xmmword_1E4AA16F0;
    v8 = 0;
    qword_1ED1B5670 = _sl_dlopen();
  }
  if (!qword_1ED1B5670)
    sub_1A3AB31B4(&v6, a2, a3, a4, a5);
  return qword_1ED1B5670;
}

Class sub_1A3993C3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Class result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1A3993B94(a1, a2, a3, a4, a5);
  result = objc_getClass("AXLanguageManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1A3AB3230((uint64_t)result, v7, v8, v9, v10);
  qword_1EE6D57A8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A3994038(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  uint64_t v7;
  const char *v8;

  v6 = *(void **)(a1 + 32);
  v7 = objc_msgSend_range(a2, (const char *)a2, a3, a4, a5);
  return objc_msgSend_transformRange_to_(v6, v8, v7, (uint64_t)v8, *(_QWORD *)(a1 + 40));
}

BOOL sub_1A3994CE8(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;

  v3 = a2;
  v8 = objc_msgSend_range(v3, v4, v5, v6, v7);
  if (v8 == objc_msgSend_range(*(void **)(a1 + 32), v9, v10, v11, v12))
  {
    objc_msgSend_range(v3, v13, v14, v15, v16);
    v18 = v17 == 0;
  }
  else
  {
    v18 = 0;
  }

  return v18;
}

BOOL sub_1A3994D4C(uint64_t a1, void *a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = a3;
  v9 = objc_msgSend_range(a2, v5, v6, v7, v8);
  v14 = objc_msgSend_range(v4, v10, v11, v12, v13);

  return v9 < v14;
}

id sub_1A3994F84(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;

  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(a1, a2, (uint64_t)CFSTR("&"), (uint64_t)CFSTR("&amp;"),
    a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v5, v6, (uint64_t)CFSTR(">"), (uint64_t)CFSTR("&gt;"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v8, v9, (uint64_t)CFSTR("\""), (uint64_t)CFSTR("&quot;"),
    v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v11, v12, (uint64_t)CFSTR("'"), (uint64_t)CFSTR("&apos;"),
    v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v14, v15, (uint64_t)CFSTR("<"), (uint64_t)CFSTR("&lt;"),
    v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

id sub_1A399504C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;

  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(a1, a2, (uint64_t)CFSTR("&lt;"), (uint64_t)CFSTR("<"), a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v5, v6, (uint64_t)CFSTR("&gt;"), (uint64_t)CFSTR(">"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v8, v9, (uint64_t)CFSTR("&quot;"),
    (uint64_t)CFSTR("\""),
    v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v11, v12, (uint64_t)CFSTR("&apos;"),
    (uint64_t)CFSTR("'"),
    v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v14, v15, (uint64_t)CFSTR("&amp;"),
    (uint64_t)CFSTR("&"),
    v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

uint64x2_t CreateMagicalWindow(uint64_t a1, int a2, uint64x2_t result)
{
  uint64_t v3;
  uint64x2_t v4;
  int32x4_t v5;
  _DWORD *v6;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int16x4_t v37;
  int32x4_t v38;
  int64x2_t v39;
  float32x4_t v40;
  float64x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64x2_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int64x2_t v52;
  int64x2_t v53;
  float32x4_t v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;

  if (a2 >= 1)
  {
    *(float *)result.i32 = (float)a2;
    v44 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.i8, 0);
    v45 = (uint64x2_t)vdupq_n_s64((unint64_t)a2 - 1);
    v3 = (a2 + 3) & 0x1FFFFFFFCLL;
    v4 = (uint64x2_t)xmmword_1A3ABF260;
    result = (uint64x2_t)xmmword_1A3ABF270;
    v5 = (int32x4_t)xmmword_1A3ABF450;
    v6 = (_DWORD *)(a1 + 8);
    __asm { FMOV            V1.4S, #4.0 }
    v43 = _Q1;
    __asm { FMOV            V1.4S, #1.0 }
    v54 = _Q1;
    __asm { FMOV            V4.4S, #3.0 }
    v41 = (float64x2_t)vdupq_n_s64(0x3FF459A5D6E6692DuLL);
    v42 = _Q4;
    v39 = vdupq_n_s64(4uLL);
    v40 = (float32x4_t)vdupq_n_s32(0x3FC90FDBu);
    do
    {
      v52 = (int64x2_t)result;
      v53 = (int64x2_t)v4;
      v14 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v45, result), (int32x4_t)vcgeq_u64(v45, v4));
      v51 = v5;
      v15 = vdivq_f32(vmulq_f32(vcvtq_f32_s32(v5), v43), v44);
      v16 = (int8x16_t)vcgtq_f32(v54, v15);
      v17.i64[0] = 0x4000000040000000;
      v17.i64[1] = 0x4000000040000000;
      v18 = (int8x16_t)vcgtq_f32(v17, v15);
      v19 = (int8x16_t)vcgtq_f32(v42, v15);
      v20 = vsubq_f32(v17, v15);
      v21.i64[0] = 0xC0000000C0000000;
      v21.i64[1] = 0xC0000000C0000000;
      v50 = vandq_s8(v14, v16);
      v22 = vbicq_s8(v14, v16);
      v23 = (int32x4_t)vandq_s8(v22, v18);
      v24 = vbicq_s8(v22, v18);
      v48 = (int8x16_t)v23;
      v49 = (int32x4_t)vandq_s8(v24, v19);
      v25 = (int32x4_t)vbicq_s8(v24, v19);
      v26 = (float32x4_t)vbslq_s8((int8x16_t)v25, (int8x16_t)vaddq_f32(v20, v17), vbslq_s8((int8x16_t)v49, (int8x16_t)vaddq_f32(v15, v21), vbslq_s8((int8x16_t)v23, (int8x16_t)v20, (int8x16_t)v15)));
      v46 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorn_s8((int8x8_t)vmovn_s32(v25), vorr_s8((int8x8_t)vmovn_s32(v49), (int8x8_t)vmovn_s32(v23)))), 0x1FuLL));
      v47 = (int8x16_t)v25;
      v58 = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v26.f32), v41)), vmulq_f64(vcvt_hight_f64_f32(v26), v41)), v40);
      v55 = cosf(v58.f32[1]);
      v27.f32[0] = cosf(v58.f32[0]);
      v27.f32[1] = v55;
      v56 = v27;
      v28 = cosf(v58.f32[2]);
      v29 = v56;
      v29.f32[2] = v28;
      v57 = v29;
      v30 = cosf(v58.f32[3]);
      v31 = v57;
      v31.f32[3] = v30;
      v32.i64[0] = 0x3F0000003F000000;
      v32.i64[1] = 0x3F0000003F000000;
      v33.i64[0] = 0xBF000000BF000000;
      v33.i64[1] = 0xBF000000BF000000;
      v34 = vmlaq_f32(v32, v33, v31);
      v35 = vmulq_f32(v34, v34);
      v36 = vsqrtq_f32((float32x4_t)vbslq_s8(v46, (int8x16_t)v35, (int8x16_t)vsubq_f32(v54, v35)));
      v37 = vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8(v47, vorrq_s8(v50, v48)), (int8x16_t)v49));
      if ((v37.i8[0] & 1) != 0)
        *(v6 - 2) = v36.i32[0];
      if ((v37.i8[2] & 1) != 0)
        *(v6 - 1) = v36.i32[1];
      if ((v37.i8[4] & 1) != 0)
        *v6 = v36.i32[2];
      if ((v37.i8[6] & 1) != 0)
        v6[1] = v36.i32[3];
      v4 = (uint64x2_t)vaddq_s64(v53, v39);
      result = (uint64x2_t)vaddq_s64(v52, v39);
      v38.i64[0] = 0x400000004;
      v38.i64[1] = 0x400000004;
      v5 = vaddq_s32(v51, v38);
      v6 += 4;
      v3 -= 4;
    }
    while (v3);
  }
  return result;
}

float calc_alpha(unsigned int a1, float a2)
{
  if (a1)
    return 1.0 - powf(1.0 - a2, 1.0 / (float)a1);
  else
    return 1.0;
}

void calc_alpha_TE(float a1, float a2, float a3)
{
  double v3;
  float v4;
  float v5;
  float v6;

  v3 = a1 / (a2 * 1000.0);
  v4 = floor(v3);
  v5 = ceil(v3);
  if (v4 == v5)
  {
    if (v4)
      powf((float)(a3 / -100.0) + 1.0, 1.0 / (float)v4);
  }
  else
  {
    v6 = a3 / 100.0;
    if (v4)
      powf(1.0 - v6, 1.0 / (float)v4);
    if (v5)
      powf(1.0 - v6, 1.0 / (float)v5);
  }
}

_QWORD *ausdk::AUInputElement::SetConnection(ausdk::AUInputElement *this, const AudioUnitConnection *a2)
{
  if (a2->sourceAudioUnit)
  {
    *((_DWORD *)this + 43) = 1;
    *((AudioUnitConnection *)this + 12) = *a2;
    return (_QWORD *)(*(uint64_t (**)(ausdk::AUInputElement *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
  }
  else
  {
    *((_DWORD *)this + 43) = 0;
    return ausdk::AUBufferList::Deallocate((_QWORD *)this + 18);
  }
}

_QWORD *ausdk::AUInputElement::Disconnect(ausdk::AUInputElement *this)
{
  *((_DWORD *)this + 43) = 0;
  return ausdk::AUBufferList::Deallocate((_QWORD *)this + 18);
}

_QWORD *ausdk::AUInputElement::SetInputCallback(ausdk::AUInputElement *this, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a3)
{
  if (a2)
  {
    *((_DWORD *)this + 43) = 2;
    *((_QWORD *)this + 22) = a2;
    *((_QWORD *)this + 23) = a3;
    return (_QWORD *)(*(uint64_t (**)(ausdk::AUInputElement *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
  }
  else
  {
    *((_DWORD *)this + 43) = 0;
    return ausdk::AUBufferList::Deallocate((_QWORD *)this + 18);
  }
}

uint64_t ausdk::AUInputElement::SetStreamFormat(ausdk::AUInputElement *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v3;

  v3 = ausdk::AUIOElement::SetStreamFormat(this, a2);
  if (!(_DWORD)v3)
    (*(void (**)(ausdk::AUInputElement *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
  return v3;
}

uint64_t ausdk::AUInputElement::PullInput(ausdk::AUInputElement *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5)
{
  int v5;
  ausdk::AUBufferList *v11;
  AudioBufferList *v12;
  uint64_t result;

  v5 = *((_DWORD *)this + 43);
  if (!v5)
    return 4294956420;
  v11 = (ausdk::AUInputElement *)((char *)this + 144);
  if (v5 == 1 || !*((_BYTE *)this + 168))
    v12 = (AudioBufferList *)ausdk::AUBufferList::PrepareNullBuffer(v11, (const AudioStreamBasicDescription *)this + 2, a5);
  else
    v12 = (AudioBufferList *)ausdk::AUBufferList::PrepareBuffer(v11, (const AudioStreamBasicDescription *)this + 2, a5);
  if (*((_DWORD *)this + 43) == 1)
    LODWORD(result) = AudioUnitRender(*((AudioUnit *)this + 24), a2, a3, *((_DWORD *)this + 50), a5, v12);
  else
    LODWORD(result) = (*((uint64_t (**)(_QWORD, unsigned int *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *))this
                       + 22))(*((_QWORD *)this + 23), a2, a3, a4, a5, v12);
  if (*((_DWORD *)this + 43))
    return result;
  else
    return 4294956420;
}

uint64_t sub_1A3995628(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E4A9C6B0;
  ausdk::AUBufferList::Deallocate(a1 + 18);
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  return sub_1A396C2C0((uint64_t)a1);
}

void sub_1A3995670(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E4A9C6B0;
  ausdk::AUBufferList::Deallocate(a1 + 18);
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  sub_1A396C2C0((uint64_t)a1);
  JUMPOUT(0x1A8596C28);
}

BOOL sub_1A39956CC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 172) == 2;
}

void sub_1A399571C()
{
  TTSRegexCache *v0;
  void *v1;

  v0 = objc_alloc_init(TTSRegexCache);
  v1 = (void *)qword_1ED1B5B80;
  qword_1ED1B5B80 = (uint64_t)v0;

}

void sub_1A39959B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1A39959D0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1A39959E0(uint64_t a1)
{

}

void sub_1A39959E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4, a5);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v12, v6, *(_QWORD *)(a1 + 40), v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

}

void sub_1A3995A40(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  id v8;

  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4, a5);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setValue_forKey_(v8, v6, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v7);

}

ausdk::AUBase *ausdk::AUBase::AUBase(ausdk::AUBase *this, OpaqueAudioComponentInstance *a2, int a3, int a4, int a5)
{
  ausdk::ComponentBase *v9;
  uint64_t v10;
  ausdk::AUScope *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info v16;

  v9 = ausdk::ComponentBase::ComponentBase(this, a2);
  v10 = 0;
  *(_QWORD *)v9 = off_1E4A9D148;
  *((_WORD *)v9 + 8) = 0;
  *((_BYTE *)v9 + 18) = 0;
  *((_DWORD *)v9 + 5) = a3;
  *((_DWORD *)v9 + 6) = a4;
  *((_DWORD *)v9 + 7) = a5;
  v11 = (ausdk::ComponentBase *)((char *)v9 + 32);
  do
  {
    v12 = (char *)this + v10;
    *((_QWORD *)v12 + 4) = 0;
    *((_DWORD *)v12 + 10) = 0;
    *((_OWORD *)v12 + 3) = 0uLL;
    *((_OWORD *)v12 + 4) = 0uLL;
    v10 += 48;
  }
  while (v10 != 192);
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_BYTE *)this + 264) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 42) = 0;
  v16 = 0;
  mach_timebase_info(&v16);
  LODWORD(v13) = v16.denom;
  LODWORD(v14) = v16.numer;
  *((double *)this + 43) = (double)v13 / (double)v14 * 1000000000.0;
  *((_QWORD *)this + 44) = 0;
  *((_DWORD *)this + 90) = -1;
  *((_QWORD *)this + 46) = 0;
  *((_BYTE *)this + 376) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_BYTE *)this + 432) = 0;
  ausdk::AUBase::CreateLoggingString((AudioComponentInstance *)this, (std::string *)((char *)this + 440));
  *((_QWORD *)this + 41) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_QWORD *)this + 34) = 0xFFEFFFFFFFFFFFFFLL;
  sub_1A3996CC0(v11, (uint64_t)this, 0, 1);
  *((_DWORD *)this + 90) = -1;
  *((_QWORD *)this + 46) = CFSTR("Untitled");
  CFRetain(CFSTR("Untitled"));
  return this;
}

void sub_1A39968E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  _QWORD *v10;
  unint64_t *v11;
  void **v13;
  void *v14;
  void *v15;
  uint64_t v16;

  v13 = (void **)(v10 + 48);
  v14 = (void *)v10[51];
  if (v14)
  {
    v10[52] = v14;
    operator delete(v14);
  }
  v15 = *v13;
  if (*v13)
  {
    v10[49] = v15;
    operator delete(v15);
  }
  sub_1A399C744(v11);
  v16 = 24;
  do
  {
    a10 = (void **)&v10[v16];
    sub_1A396EAFC(&a10);
    v16 -= 6;
  }
  while (v16 * 8);
  _Unwind_Resume(a1);
}

void ausdk::AUBase::CreateLoggingString(AudioComponentInstance *this@<X0>, std::string *a2@<X8>)
{
  int8x8_t v4;
  int16x4_t v5;
  int16x8_t v6;
  size_t v7;
  std::string *v8;
  __int128 v9;
  int16x8_t v10;
  std::string *v11;
  __int128 v12;
  int16x8_t v13;
  std::string *v14;
  std::string::value_type v15[8];
  char v16;
  std::string::value_type __s[8];
  char v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _OWORD __str[2];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25 = 0;
  v26 = 0;
  ausdk::ComponentBase::GetComponentDescription(this, (uint64_t)&v24);
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "AU (%p): ", this[1]);
  v4.i32[0] = bswap32(v24);
  v5 = (int16x4_t)vzip1_s8(v4, v4);
  *(int8x8_t *)v6.i8 = vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x5F005F005F005FLL, (uint16x4_t)(*(_QWORD *)&vadd_s16(v5, (int16x4_t)0xE000E000E000E0) & 0xFF00FF00FF00FFLL)), (int8x8_t)v5, (int8x8_t)0x2E002E002E002ELL);
  *((_BYTE *)&v19.__r_.__value_.__s + 23) = 4;
  LODWORD(v19.__r_.__value_.__l.__data_) = vmovn_s16(v6).u32[0];
  v19.__r_.__value_.__s.__data_[4] = 0;
  v7 = strlen((const char *)__str);
  v8 = std::string::insert(&v19, 0, (const std::string::value_type *)__str, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v20, 47);
  v10 = *(int16x8_t *)&v20.__r_.__value_.__l.__data_;
  v21 = v20;
  memset(&v20, 0, sizeof(v20));
  v10.i32[0] = bswap32(HIDWORD(v24));
  *(int8x8_t *)v10.i8 = vzip1_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)v10.i8);
  *(int8x8_t *)v10.i8 = vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x5F005F005F005FLL, (uint16x4_t)(*(_QWORD *)&vadd_s16(*(int16x4_t *)v10.i8, (int16x4_t)0xE000E000E000E0) & 0xFF00FF00FF00FFLL)), *(int8x8_t *)v10.i8, (int8x8_t)0x2E002E002E002ELL);
  v18 = 4;
  *(_DWORD *)__s = vmovn_s16(v10).u32[0];
  __s[4] = 0;
  v11 = std::string::append(&v21, __s, 4uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v22, 47);
  v13 = *(int16x8_t *)&v22.__r_.__value_.__l.__data_;
  v23 = v22;
  memset(&v22, 0, sizeof(v22));
  v13.i32[0] = bswap32(v25);
  *(int8x8_t *)v13.i8 = vzip1_s8(*(int8x8_t *)v13.i8, *(int8x8_t *)v13.i8);
  *(int8x8_t *)v13.i8 = vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x5F005F005F005FLL, (uint16x4_t)(*(_QWORD *)&vadd_s16(*(int16x4_t *)v13.i8, (int16x4_t)0xE000E000E000E0) & 0xFF00FF00FF00FFLL)), *(int8x8_t *)v13.i8, (int8x8_t)0x2E002E002E002ELL);
  v16 = 4;
  *(_DWORD *)v15 = vmovn_s16(v13).u32[0];
  v15[4] = 0;
  v14 = std::string::append(&v23, v15, 4uLL);
  *a2 = *v14;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v16 < 0)
    operator delete(*(void **)v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (v18 < 0)
    operator delete(*(void **)__s);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1A3996BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v47 - 105) < 0)
    operator delete(*(void **)(v47 - 128));
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

double ausdk::AUBase::ResetRenderTime(ausdk::AUBase *this)
{
  double result;

  *((_QWORD *)this + 41) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_QWORD *)this + 34) = 0xFFEFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_1A3996CC0(ausdk::AUScope *this, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;

  *(_QWORD *)this = a2;
  *((_DWORD *)this + 2) = a3;
  v5 = *((_QWORD *)this + 5);
  if (!v5)
    return ausdk::AUScope::SetNumberOfElements(this, a4);
  *(_QWORD *)(v5 + 8) = a2;
  *(_DWORD *)(v5 + 16) = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a4);
}

void ausdk::AUBase::~AUBase(ausdk::AUBase *this)
{
  const void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void **v6;

  *(_QWORD *)this = off_1E4A9D148;
  v2 = (const void *)*((_QWORD *)this + 46);
  if (v2)
    CFRelease(v2);
  sub_1A396C314((const void **)this + 65);
  sub_1A396C314((const void **)this + 58);
  if (*((char *)this + 463) < 0)
    operator delete(*((void **)this + 55));
  v3 = (void *)*((_QWORD *)this + 51);
  if (v3)
  {
    *((_QWORD *)this + 52) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 48);
  if (v4)
  {
    *((_QWORD *)this + 49) = v4;
    operator delete(v4);
  }
  sub_1A399C744((unint64_t *)this + 28);
  v5 = 192;
  do
  {
    v6 = (void **)((char *)this + v5);
    sub_1A396EAFC(&v6);
    v5 -= 48;
  }
  while (v5);
}

uint64_t ausdk::AUBase::PostConstructorInternal(ausdk::AUBase *this)
{
  if (!*((_DWORD *)this + 84))
    (*(void (**)(ausdk::AUBase *, uint64_t))(*(_QWORD *)this + 512))(this, 1156);
  return ausdk::AUBase::CreateElements((uint64_t)this);
}

uint64_t ausdk::AUBase::CreateElements(uint64_t this)
{
  uint64_t v1;

  if (!*(_BYTE *)(this + 16))
  {
    v1 = this;
    sub_1A3996CC0((ausdk::AUScope *)(this + 80), v1, 1, *(unsigned int *)(v1 + 20));
    sub_1A3996CC0((ausdk::AUScope *)(v1 + 128), v1, 2, *(unsigned int *)(v1 + 24));
    sub_1A3996CC0((ausdk::AUScope *)(v1 + 176), v1, 3, *(unsigned int *)(v1 + 28));
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
    *(_BYTE *)(v1 + 16) = 1;
  }
  return this;
}

uint64_t ausdk::AUBase::PreDestructorInternal(ausdk::AUBase *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 59);
  if (v2)
    (*(void (**)(_QWORD))(*(_QWORD *)v2 + 16))(*((_QWORD *)this + 59));
  if (*((_BYTE *)this + 17))
    (*(void (**)(ausdk::AUBase *))(*(_QWORD *)this + 64))(this);
  result = (*(uint64_t (**)(ausdk::AUBase *))(*(_QWORD *)this + 504))(this);
  *((_QWORD *)this + 41) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_QWORD *)this + 34) = 0xFFEFFFFFFFFFFFFFLL;
  *(_WORD *)((char *)this + 17) = 0;
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return result;
}

void sub_1A3996EF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

double ausdk::AUBase::DoCleanup(ausdk::AUBase *this)
{
  double result;

  if (*((_BYTE *)this + 17))
    (*(void (**)(ausdk::AUBase *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(ausdk::AUBase *))(*(_QWORD *)this + 504))(this);
  *((_QWORD *)this + 41) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_QWORD *)this + 34) = 0xFFEFFFFFFFFFFFFFLL;
  *(_WORD *)((char *)this + 17) = 0;
  return result;
}

uint64_t ausdk::AUBase::SetMaxFramesPerSlice(uint64_t this, int a2)
{
  uint64_t v2;

  if (*(_DWORD *)(this + 336) != a2)
  {
    v2 = this;
    *(_DWORD *)(this + 336) = a2;
    if (*(_BYTE *)(this + 432))
      (*(void (**)(uint64_t))(*(_QWORD *)this + 496))(this);
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 432))(v2, 14, 0, 0);
  }
  return this;
}

uint64_t ausdk::AUBase::CanSetMaxFrames(ausdk::AUBase *this)
{
  if (*((_BYTE *)this + 17))
    return 4294956447;
  else
    return 0;
}

uint64_t ausdk::AUBase::ReallocateBuffers(ausdk::AUBase *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  ausdk::AUBase::CreateElements((uint64_t)this);
  v2 = *((_QWORD *)this + 21);
  if (v2)
  {
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    if (!(_DWORD)v3)
      goto LABEL_7;
  }
  else
  {
    v3 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
    if (!(_DWORD)v3)
      goto LABEL_7;
  }
  v4 = 0;
  do
  {
    v5 = sub_1A395EDFC((uint64_t)this + 128, v4);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 64))(v5, 0);
    ++v4;
  }
  while ((_DWORD)v3 != v4);
LABEL_7:
  result = *((_QWORD *)this + 15);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    LODWORD(v7) = result;
    if (!(_DWORD)result)
      goto LABEL_13;
  }
  else
  {
    v7 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (!(_DWORD)v7)
      goto LABEL_13;
  }
  v8 = 0;
  do
  {
    v9 = sub_1A395EDFC((uint64_t)this + 80, v8);
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 64))(v9, 0);
    ++v8;
  }
  while ((_DWORD)v7 != v8);
LABEL_13:
  *((_BYTE *)this + 432) = 1;
  return result;
}

_QWORD *ausdk::AUBase::DeallocateIOBuffers(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  ausdk::AUIOElement *v5;
  uint64_t v6;
  unsigned int v7;
  ausdk::AUIOElement *v8;

  if (*((_BYTE *)this + 432))
  {
    v1 = this;
    v2 = this[21];
    if (v2)
    {
      LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
      if (!(_DWORD)v3)
        goto LABEL_8;
    }
    else
    {
      v3 = (v1[19] - v1[18]) >> 3;
      if (!(_DWORD)v3)
        goto LABEL_8;
    }
    v4 = 0;
    do
    {
      v5 = (ausdk::AUIOElement *)sub_1A395EDFC((uint64_t)(v1 + 16), v4);
      ausdk::AUIOElement::DeallocateBuffer(v5);
      ++v4;
    }
    while ((_DWORD)v3 != v4);
LABEL_8:
    this = (_QWORD *)v1[15];
    if (this)
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 24))(this);
      LODWORD(v6) = (_DWORD)this;
      if (!(_DWORD)this)
        goto LABEL_14;
    }
    else
    {
      v6 = (v1[13] - v1[12]) >> 3;
      if (!(_DWORD)v6)
      {
LABEL_14:
        *((_BYTE *)v1 + 432) = 0;
        return this;
      }
    }
    v7 = 0;
    do
    {
      v8 = (ausdk::AUIOElement *)sub_1A395EDFC((uint64_t)(v1 + 10), v7);
      this = ausdk::AUIOElement::DeallocateBuffer(v8);
      ++v7;
    }
    while ((_DWORD)v6 != v7);
    goto LABEL_14;
  }
  return this;
}

uint64_t ausdk::AUBase::DoInitialize(ausdk::AUBase *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 17))
    return 0;
  result = (*(uint64_t (**)(ausdk::AUBase *))(*(_QWORD *)this + 56))(this);
  if (!(_DWORD)result)
  {
    if ((*(unsigned int (**)(ausdk::AUBase *))(*(_QWORD *)this + 160))(this))
      sub_1A3997244((void **)this + 48, 0x18uLL);
    *((_BYTE *)this + 18) = 1;
    (*(void (**)(ausdk::AUBase *))(*(_QWORD *)this + 496))(this);
    result = 0;
    *((_BYTE *)this + 17) = 1;
    __dmb(0xBu);
  }
  return result;
}

void sub_1A3997244(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      sub_1A395516C();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1A395ED34(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t ausdk::AUBase::Initialize(ausdk::AUBase *this)
{
  return 0;
}

uint64_t ausdk::AUBase::DoReset(ausdk::AUBase *this)
{
  *((_QWORD *)this + 41) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_QWORD *)this + 34) = 0xFFEFFFFFFFFFFFFFLL;
  return (*(uint64_t (**)(ausdk::AUBase *))(*(_QWORD *)this + 72))(this);
}

uint64_t ausdk::AUBase::Reset(ausdk::AUBase *this)
{
  return 0;
}

uint64_t ausdk::AUBase::DispatchGetPropertyInfo(ausdk::AUBase *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, BOOL *a6)
{
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  void *v18;
  void *v20;
  void *v21;

  switch(a2)
  {
    case 0:
    case 25:
    case 54:
      if ((_DWORD)a3)
        goto LABEL_52;
      goto LABEL_3;
    case 1:
    case 23:
      if (a3 > 1)
        goto LABEL_52;
      goto LABEL_45;
    case 2:
      v13 = 8;
      goto LABEL_14;
    case 3:
      LODWORD(v20) = 0;
      v14 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, _QWORD, void **))(*(_QWORD *)this + 248))(this, a3, 0, &v20);
      if ((_DWORD)v14)
        return v14;
      v15 = 4 * (_DWORD)v20;
      goto LABEL_55;
    case 4:
      v14 = 0;
      v15 = 104;
      goto LABEL_55;
    case 8:
      v13 = 40;
LABEL_14:
      *a5 = v13;
      *a6 = ausdk::AUBase::IsStreamFormatWritable(this, a3, a4);
      goto LABEL_47;
    case 11:
      *a5 = 4;
      v14 = 0;
      *a6 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t))(*(_QWORD *)this + 216))(this, a3);
      return v14;
    case 12:
    case 61:
      if (!(_DWORD)a3)
        goto LABEL_7;
      goto LABEL_52;
    case 13:
      if ((_DWORD)a3)
        goto LABEL_52;
      v16 = (*(uint64_t (**)(ausdk::AUBase *, _QWORD))(*(_QWORD *)this + 376))(this, 0);
      if (!v16)
        goto LABEL_58;
      v12 = 4 * v16;
      goto LABEL_43;
    case 14:
      if ((_DWORD)a3)
        goto LABEL_52;
      v11 = 4;
      goto LABEL_46;
    case 16:
      v14 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 296))(this, a3, a4, 0);
      if (!(_DWORD)v14)
        goto LABEL_54;
      return v14;
    case 19:
      *a6 = 0;
      v17 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t, _QWORD, BOOL *))(*(_QWORD *)this + 528))(this, a3, a4, 0, a6);
      v14 = 0;
      *a5 = v17;
      if (!v17)
      {
        (*(void (**)(void **__return_ptr, ausdk::AUBase *, uint64_t, uint64_t))(*(_QWORD *)this + 552))(&v20, this, a3, a4);
        if (v20 == v21)
          v14 = 4294956417;
        else
          v14 = 4294956445;
        if (v20)
        {
          v21 = v20;
          operator delete(v20);
        }
      }
      return v14;
    case 20:
      if ((_DWORD)a3)
        goto LABEL_52;
      if (!(*(unsigned int (**)(ausdk::AUBase *))(*(_QWORD *)this + 360))(this))
        goto LABEL_58;
      goto LABEL_7;
    case 22:
      if ((_DWORD)a3)
        goto LABEL_52;
      v12 = 4;
      goto LABEL_43;
    case 24:
      if ((_DWORD)a3)
        goto LABEL_52;
      v14 = (*(uint64_t (**)(ausdk::AUBase *, _QWORD))(*(_QWORD *)this + 312))(this, 0);
      if ((_DWORD)v14)
        return v14;
LABEL_7:
      v12 = 8;
LABEL_43:
      *a5 = v12;
      *a6 = 0;
      goto LABEL_47;
    case 27:
      if ((_DWORD)a3)
        goto LABEL_52;
      v11 = 40;
      goto LABEL_46;
    case 30:
LABEL_3:
      v11 = 8;
      goto LABEL_46;
    case 32:
      (*(void (**)(void **__return_ptr, ausdk::AUBase *, uint64_t, uint64_t))(*(_QWORD *)this + 552))(&v20, this, a3, a4);
      v18 = v20;
      if (v20 != v21)
      {
        *a5 = (_DWORD)v21 - (_DWORD)v20;
        *a6 = 0;
        if (v18)
        {
          v21 = v18;
          operator delete(v18);
        }
        goto LABEL_48;
      }
      if (v20)
      {
        v21 = v20;
        operator delete(v20);
      }
LABEL_58:
      v14 = 4294956417;
      break;
    case 35:
      v12 = 16;
      goto LABEL_43;
    case 36:
      if ((_DWORD)a3)
        goto LABEL_52;
LABEL_45:
      v11 = 16;
LABEL_46:
      *a5 = v11;
      *a6 = 1;
      goto LABEL_47;
    case 51:
      if ((a3 - 1) > 1)
      {
LABEL_52:
        v14 = 4294956430;
      }
      else
      {
        *a6 = 1;
        *a5 = 4;
LABEL_47:
        if (sub_1A39976F8((uint64_t)this, a3, a4))
LABEL_48:
          v14 = 0;
        else
          v14 = 4294956419;
      }
      break;
    case 53:
      v14 = 0;
LABEL_54:
      v15 = 8;
LABEL_55:
      *a5 = v15;
      *a6 = 0;
      return v14;
    default:
      return (*(uint64_t (**)(ausdk::AUBase *))(*(_QWORD *)this + 80))(this);
  }
  return v14;
}

uint64_t ausdk::AUBase::IsStreamFormatWritable(ausdk::AUBase *this, uint64_t a2, uint64_t a3)
{
  ausdk::AUBase *v3;
  uint64_t (*v7)(ausdk::AUBase *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = this;
  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 != 2 && ((_DWORD)a2 != 1 || *(_DWORD *)(sub_1A395EDFC((uint64_t)this + 80, a3) + 172) == 1))
      return 0;
    v7 = *(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t))(*(_QWORD *)v3 + 368);
    this = v3;
    v8 = a2;
    v9 = a3;
  }
  else
  {
    v7 = *(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t))(*(_QWORD *)this + 368);
    v8 = 2;
    v9 = 0;
  }
  return v7(this, v8, v9);
}

uint64_t sub_1A39976F8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;

  v4 = (_QWORD *)sub_1A3997CB8(a1, a2);
  v5 = v4[5];
  if (v5)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v5 + 32))(v4[5], a3);
  v7 = v4[2];
  if (a3 >= (unint64_t)((v4[3] - v7) >> 3))
    return 0;
  else
    return *(_QWORD *)(v7 + 8 * a3);
}

uint64_t ausdk::AUBase::DispatchGetProperty(ausdk::AUBase *this, int a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const void *v22;
  __int128 v23;
  __int128 v24;
  const void *v25;
  void *v26;
  double v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unsigned int v32;
  void *__src[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  switch(a2)
  {
    case 0:
      __src[0] = 0;
      v9 = (*(uint64_t (**)(ausdk::AUBase *, void **))(*(_QWORD *)this + 272))(this, __src);
      goto LABEL_37;
    case 1:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 15:
    case 17:
    case 18:
    case 21:
    case 23:
    case 26:
    case 28:
    case 29:
    case 31:
    case 33:
    case 34:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 52:
      return (*(uint64_t (**)(ausdk::AUBase *))(*(_QWORD *)this + 88))(this);
    case 2:
      (*(void (**)(void **__return_ptr, ausdk::AUBase *, uint64_t, uint64_t))(*(_QWORD *)this + 392))(__src, this, a3, a4);
      v10 = 0;
      goto LABEL_38;
    case 3:
      v32 = 0;
      v10 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)this + 248))(this, a3, 0, &v32);
      if (!(_DWORD)v10)
      {
        sub_1A399B4AC(__src, v32);
        v10 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, void *, unsigned int *))(*(_QWORD *)this + 248))(this, a3, __src[0], &v32);
        v13 = __src[0];
        if (!(_DWORD)v10)
          memcpy(a5, __src[0], (char *)__src[1] - (char *)__src[0]);
        if (v13)
        {
          __src[1] = v13;
          operator delete(v13);
        }
      }
      return v10;
    case 4:
      v39 = 0;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      *(_OWORD *)__src = 0u;
      v34 = 0u;
      v10 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t, void **))(*(_QWORD *)this + 256))(this, a3, a4, __src);
      v14 = v38;
      a5[4] = v37;
      a5[5] = v14;
      *((_QWORD *)a5 + 12) = v39;
      v15 = v34;
      *a5 = *(_OWORD *)__src;
      a5[1] = v15;
      v16 = v36;
      a5[2] = v35;
      a5[3] = v16;
      return v10;
    case 8:
      (*(void (**)(void **__return_ptr, ausdk::AUBase *, uint64_t, uint64_t))(*(_QWORD *)this + 392))(__src, this, a3, a4);
      v10 = 0;
      v17 = v34;
      *a5 = *(_OWORD *)__src;
      a5[1] = v17;
      *((_QWORD *)a5 + 4) = v35;
      return v10;
    case 11:
      v18 = (_QWORD *)sub_1A3997CB8((uint64_t)this, a3);
      v19 = v18[5];
      if (v19)
        LODWORD(v20) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
      else
        v20 = (v18[3] - v18[2]) >> 3;
      v10 = 0;
      *(_DWORD *)a5 = v20;
      return v10;
    case 12:
      v27 = (*(double (**)(ausdk::AUBase *))(*(_QWORD *)this + 344))(this);
      goto LABEL_48;
    case 13:
      __src[0] = 0;
      v28 = (*(uint64_t (**)(ausdk::AUBase *, void **))(*(_QWORD *)this + 376))(this, __src);
      if (v28)
        v29 = __src[0] == 0;
      else
        v29 = 1;
      if (!v29)
        memcpy(a5, __src[0], 4 * v28);
      return 0;
    case 14:
      v10 = 0;
      v21 = *((_DWORD *)this + 84);
      goto LABEL_50;
    case 16:
      __src[0] = 0;
      v9 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t, void **))(*(_QWORD *)this + 296))(this, a3, a4, __src);
      goto LABEL_37;
    case 19:
      LOBYTE(__src[0]) = 0;
      if (!(*(unsigned int (**)(ausdk::AUBase *, uint64_t, uint64_t, _OWORD *, void **))(*(_QWORD *)this
                                                                                                 + 528))(this, a3, a4, a5, __src))return 4294956417;
      return 0;
    case 20:
      if (!(*(unsigned int (**)(ausdk::AUBase *))(*(_QWORD *)this + 360))(this))
        return 4294956417;
      v27 = (*(double (**)(ausdk::AUBase *))(*(_QWORD *)this + 352))(this);
LABEL_48:
      v10 = 0;
      *(double *)a5 = v27;
      return v10;
    case 22:
      v10 = 0;
      *(_DWORD *)a5 = *((_DWORD *)this + 85);
      *((_DWORD *)this + 85) = 0;
      return v10;
    case 24:
      __src[0] = 0;
      v9 = (*(uint64_t (**)(ausdk::AUBase *, void **))(*(_QWORD *)this + 312))(this, __src);
      goto LABEL_37;
    case 25:
      v22 = (const void *)*((_QWORD *)this + 65);
      *(_QWORD *)a5 = v22;
      if (!v22)
        return 4294956446;
      goto LABEL_52;
    case 27:
      v10 = 0;
      v23 = *((_OWORD *)this + 30);
      v24 = *((_OWORD *)this + 31);
      *((_QWORD *)a5 + 4) = *((_QWORD *)this + 64);
      *a5 = v23;
      a5[1] = v24;
      return v10;
    case 30:
      __src[0] = *(void **)(sub_1A39976F8((uint64_t)this, a3, a4) + 72);
      sub_1A399B520((CFTypeRef *)__src);
      v25 = __src[0];
      sub_1A396C314((const void **)__src);
      if (!v25)
        return 4294956446;
      CFRetain(v25);
      v10 = 0;
      *(_QWORD *)a5 = v25;
      return v10;
    case 32:
      (*(void (**)(void **__return_ptr, ausdk::AUBase *, uint64_t, uint64_t))(*(_QWORD *)this + 552))(__src, this, a3, a4);
      v26 = __src[0];
      if (__src[0] == __src[1])
      {
        if (__src[0])
        {
          __src[1] = __src[0];
          operator delete(__src[0]);
        }
        return 4294956417;
      }
      else
      {
        memcpy(a5, __src[0], (char *)__src[1] - (char *)__src[0]);
        if (v26)
        {
          __src[1] = v26;
          operator delete(v26);
        }
        return 0;
      }
    case 35:
      *(_OWORD *)__src = *a5;
      if (!LODWORD(__src[0]))
        return 4294956445;
      v10 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t))(*(_QWORD *)this + 304))(this, a3);
      *a5 = *(_OWORD *)__src;
      if ((_DWORD)v10 != -10879)
        return v10;
      return (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)this + 88))(this, 35, a3, a4, a5);
    case 36:
      *a5 = *(_OWORD *)((char *)this + 360);
      v22 = (const void *)*((_QWORD *)this + 46);
      if (!v22)
        return 0;
      goto LABEL_52;
    case 51:
      v30 = sub_1A3997CB8((uint64_t)this, a3);
      v10 = 0;
      v21 = *(unsigned __int8 *)(sub_1A399A588(v30, a4) + 168);
LABEL_50:
      *(_DWORD *)a5 = v21;
      return v10;
    case 53:
      __src[0] = 0;
      v9 = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t, void **, char *))(*(_QWORD *)this + 264))(this, a3, a4, __src, (char *)__src + 4);
LABEL_37:
      v10 = v9;
LABEL_38:
      v11 = __src[0];
      goto LABEL_39;
    case 54:
      v22 = (const void *)*((_QWORD *)this + 58);
      *(_QWORD *)a5 = v22;
      if (v22)
LABEL_52:
        CFRetain(v22);
      return 0;
    default:
      if (a2 == 61)
      {
        v10 = 0;
        v11 = (void *)*((_QWORD *)this + 34);
LABEL_39:
        *(_QWORD *)a5 = v11;
      }
      else
      {
        return (*(uint64_t (**)(ausdk::AUBase *))(*(_QWORD *)this + 88))(this);
      }
      return v10;
  }
}

void sub_1A3997C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A3997CB8(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  void *exception;

  if (a2 < 4)
    return a1 + 48 * a2 + 32;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A39532E0((uint64_t)exception, -10866);
    __cxa_throw(exception, (struct type_info *)&unk_1E4A9C228, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_1A3997D20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AUBase::DispatchSetProperty(const void **this, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *__s2, uint64_t a6)
{
  int v6;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  void (*v16)(const void **, uint64_t, uint64_t, uint64_t);
  const void **v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  size_t v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  void *__dst[2];
  __int128 v35;
  uint64_t v36;

  v6 = a6;
  if ((int)a2 > 18)
  {
    if ((int)a2 <= 35)
    {
      switch((int)a2)
      {
        case 19:
          if (a6 < 0xC)
            return 4294956445;
          v12 = a6;
          if (20 * (unint64_t)*((unsigned int *)__s2 + 2) + 12 > a6)
            return 4294956445;
          if ((a6 & 0x1F) != 0)
            v13 = ((unint64_t)a6 >> 5) + 1;
          else
            v13 = (unint64_t)a6 >> 5;
          sub_1A399B540(__dst, v13);
          memcpy(__dst[0], __s2, v12);
          v14 = (*((uint64_t (**)(const void **, uint64_t, uint64_t, void *))*this + 67))(this, a3, a4, __dst[0]);
          if (!(_DWORD)v14)
            (*((void (**)(const void **, uint64_t, uint64_t, uint64_t))*this + 54))(this, 19, a3, a4);
          if (__dst[0])
          {
            __dst[1] = __dst[0];
            operator delete(__dst[0]);
          }
          return v14;
        case 23:
          if (a6 < 0x10)
            return 4294956445;
          return (*((uint64_t (**)(const void **, uint64_t, uint64_t, _QWORD, _QWORD))*this + 30))(this, 23, a4, *__s2, __s2[1]);
        case 25:
          if ((_DWORD)a6 != 8)
            return 4294956445;
          if ((_DWORD)a3)
            return 4294956430;
          sub_1A3998470(this + 65, (const void *)*__s2);
          v16 = (void (*)(const void **, uint64_t, uint64_t, uint64_t))*((_QWORD *)*this + 54);
          v17 = this;
          v18 = 25;
          goto LABEL_58;
        case 27:
          if ((_DWORD)a3)
            return 4294956430;
          if (a6 >= 0x28)
            v21 = 40;
          else
            v21 = a6;
          v22 = memcmp(this + 60, __s2, v21);
          *((_OWORD *)this + 30) = 0u;
          *((_OWORD *)this + 31) = 0u;
          this[64] = 0;
          memcpy(this + 60, __s2, v21);
          if (!v22)
            return 0;
          v16 = (void (*)(const void **, uint64_t, uint64_t, uint64_t))*((_QWORD *)*this + 54);
          v17 = this;
          v18 = 27;
          goto LABEL_58;
        case 30:
          if (!sub_1A39976F8((uint64_t)this, a3, a4))
            return 4294956419;
          if (v6 != 8)
            return 4294956445;
          v24 = (_QWORD *)sub_1A3997CB8((uint64_t)this, a3);
          v25 = v24[5];
          if (v25)
          {
            v26 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v25 + 32))(v24[5], a4);
          }
          else
          {
            v29 = v24[2];
            if (a4 >= (unint64_t)((v24[3] - v29) >> 3))
              v26 = 0;
            else
              v26 = *(_QWORD *)(v29 + 8 * a4);
          }
          sub_1A3998470((const void **)(v26 + 72), (const void *)*__s2);
          v16 = (void (*)(const void **, uint64_t, uint64_t, uint64_t))*((_QWORD *)*this + 54);
          v17 = this;
          v18 = 30;
          v23 = a3;
          goto LABEL_89;
        default:
          goto LABEL_74;
      }
    }
    switch((_DWORD)a2)
    {
      case '$':
        if ((_DWORD)a6 != 16)
          return 4294956445;
        if (!(_DWORD)a3)
        {
          v27 = (void *)__s2[1];
          __dst[0] = *(void **)__s2;
          __dst[1] = v27;
          if (((uint64_t)__dst[0] & 0x80000000) != 0)
          {
            if (!v27)
              return 4294956445;
            v28 = (*((uint64_t (**)(const void **, void **))*this + 41))(this, __dst);
          }
          else
          {
            v28 = (*((uint64_t (**)(const void **, void **))*this + 40))(this, __dst);
          }
          v14 = v28;
          if ((_DWORD)v28)
            return v14;
          v16 = (void (*)(const void **, uint64_t, uint64_t, uint64_t))*((_QWORD *)*this + 54);
          v17 = this;
          v18 = 36;
          goto LABEL_58;
        }
        break;
      case '3':
        if ((a3 - 1) <= 1)
        {
          if (!sub_1A39976F8((uint64_t)this, a3, a4))
            return 4294956419;
          if (v6 == 4)
          {
            if (*((_BYTE *)this + 17))
              return 4294956447;
            v30 = sub_1A3997CB8((uint64_t)this, a3);
            v14 = 0;
            *(_BYTE *)(sub_1A399A588(v30, a4) + 168) = *(_DWORD *)__s2 != 0;
            return v14;
          }
          return 4294956445;
        }
        break;
      case '6':
        if (!(_DWORD)a3)
        {
          if ((_DWORD)a6 == 8)
          {
            sub_1A3998470(this + 58, (const void *)*__s2);
            v16 = (void (*)(const void **, uint64_t, uint64_t, uint64_t))*((_QWORD *)*this + 54);
            v17 = this;
            v18 = 54;
LABEL_58:
            v23 = 0;
LABEL_89:
            v16(v17, v18, v23, a4);
            return 0;
          }
          return 4294956445;
        }
        break;
      default:
LABEL_74:
        v14 = (*((uint64_t (**)(const void **, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))*this + 12))(this, a2, a3, a4, __s2, a6);
        if (!(_DWORD)v14)
          (*((void (**)(const void **, uint64_t, uint64_t, uint64_t))*this + 54))(this, a2, a3, a4);
        return v14;
    }
    return 4294956430;
  }
  switch((int)a2)
  {
    case 0:
      if ((_DWORD)a6 != 8)
        return 4294956445;
      if ((_DWORD)a3)
        return 4294956430;
      return (*((uint64_t (**)(const void **, _QWORD))*this + 36))(this, *__s2);
    case 1:
      if (a6 < 0x10)
        return 4294956445;
      *(_OWORD *)__dst = *(_OWORD *)__s2;
      v19 = (*((uint64_t (**)(const void **, void **))*this + 29))(this, __dst);
      goto LABEL_25;
    case 2:
      if ((_DWORD)a6 != 8)
        return 4294956445;
      if (!sub_1A39976F8((uint64_t)this, a3, a4))
        return 4294956419;
      v36 = 0;
      *(_OWORD *)__dst = 0u;
      v35 = 0u;
      (*((void (**)(void **__return_ptr, const void **, uint64_t, uint64_t))*this + 49))(__dst, this, a3, a4);
      v31 = *(_OWORD *)__dst;
      v32 = v35;
      v33 = v36;
      *(_QWORD *)&v31 = *__s2;
      if (!(*((unsigned int (**)(const void **, uint64_t, uint64_t, __int128 *))*this + 48))(this, a3, a4, &v31))goto LABEL_77;
      if (!memcmp(__dst, &v31, 0x28uLL))
        return 0;
      if (!ausdk::AUBase::IsStreamFormatWritable((ausdk::AUBase *)this, a3, a4))
        goto LABEL_78;
      v19 = (*((uint64_t (**)(const void **, uint64_t, uint64_t, void **, __int128 *))*this + 50))(this, a3, a4, __dst, &v31);
      goto LABEL_25;
    case 8:
      if (a6 < 0x24)
        return 4294956445;
      if (!sub_1A39976F8((uint64_t)this, a3, a4))
        return 4294956419;
      v20 = *((_OWORD *)__s2 + 1);
      *(_OWORD *)__dst = *(_OWORD *)__s2;
      v35 = v20;
      v36 = *((unsigned int *)__s2 + 8);
      if (sub_1A39983CC((uint64_t)__dst)
        && (*((unsigned int (**)(const void **, uint64_t, uint64_t, void **))*this + 48))(this, a3, a4, __dst))
      {
        v33 = 0;
        v31 = 0u;
        v32 = 0u;
        (*((void (**)(__int128 *__return_ptr, const void **, uint64_t, uint64_t))*this + 49))(&v31, this, a3, a4);
        if (!memcmp(&v31, __dst, 0x28uLL))
          return 0;
        if (ausdk::AUBase::IsStreamFormatWritable((ausdk::AUBase *)this, a3, a4))
        {
          v19 = (*((uint64_t (**)(const void **, uint64_t, uint64_t, __int128 *, void **))*this + 50))(this, a3, a4, &v31, __dst);
LABEL_25:
          v14 = v19;
        }
        else
        {
LABEL_78:
          v14 = 4294956431;
        }
      }
      else
      {
LABEL_77:
        v14 = 4294956428;
      }
      break;
    case 11:
      if ((_DWORD)a6 != 4)
        return 4294956445;
      if (!(*((unsigned int (**)(const void **, uint64_t))*this + 27))(this, a3))
        goto LABEL_78;
      v14 = (*((uint64_t (**)(const void **, uint64_t, _QWORD))*this + 28))(this, a3, *(unsigned int *)__s2);
      if (!(_DWORD)v14)
        (*((void (**)(const void **, uint64_t, uint64_t, uint64_t))*this + 54))(this, 11, a3, a4);
      return v14;
    case 14:
      if ((_DWORD)a6 != 4)
        return 4294956445;
      v14 = (*((uint64_t (**)(const void **))*this + 65))(this);
      if (!(_DWORD)v14)
        (*((void (**)(const void **, _QWORD))*this + 64))(this, *(unsigned int *)__s2);
      return v14;
    default:
      goto LABEL_74;
  }
  return v14;
}

void sub_1A39983B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A39983CC(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  _BOOL4 v8;

  result = 0;
  if (*(double *)a1 >= 0.0 && *(double *)a1 < 3000000.0)
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (v3 >= 0xF4240)
      return 0;
    v4 = *(_DWORD *)(a1 + 20);
    if (v4 >= 0xF4240)
      return 0;
    v5 = *(_DWORD *)(a1 + 24);
    if (v5 >= 0xF4240)
      return 0;
    result = 0;
    if ((*(_DWORD *)(a1 + 28) - 1) > 0x3FF || *(_DWORD *)(a1 + 32) > 0x400u)
      return result;
    v6 = *(_DWORD *)(a1 + 8);
    if (!v6)
      return 0;
    v8 = v4 == 1 && v3 == v5;
    return v6 != 1819304813 || v8;
  }
  return result;
}

const void **sub_1A3998470(const void **a1, const void *a2)
{
  if (*a1 != a2)
  {
    sub_1A396C314(a1);
    *a1 = a2;
    sub_1A399B520(a1);
  }
  return a1;
}

uint64_t ausdk::AUBase::DispatchRemovePropertyValue(ausdk::AUBase *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(ausdk::AUBase *, uint64_t, _QWORD, uint64_t);
  ausdk::AUBase *v8;
  uint64_t v9;
  uint64_t result;
  _OWORD *v11;
  _OWORD v12[2];
  uint64_t v13;

  if ((int)a2 > 26)
  {
    if ((_DWORD)a2 == 27)
    {
      if (!(_DWORD)a3)
      {
        v13 = 0;
        memset(v12, 0, sizeof(v12));
        v11 = (_OWORD *)((char *)this + 480);
        if (!memcmp((char *)this + 480, v12, 0x28uLL))
          return 0;
        *((_QWORD *)this + 64) = 0;
        *v11 = 0u;
        *((_OWORD *)this + 31) = 0u;
        v7 = *(void (**)(ausdk::AUBase *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 432);
        v8 = this;
        v9 = 27;
LABEL_16:
        v7(v8, v9, 0, a4);
        return 0;
      }
    }
    else
    {
      if ((_DWORD)a2 != 54)
        return (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 104))(this, a2, a3, a4);
      if (!(_DWORD)a3)
      {
        sub_1A3998470((const void **)this + 58, 0);
        v7 = *(void (**)(ausdk::AUBase *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 432);
        v8 = this;
        v9 = 54;
        goto LABEL_16;
      }
    }
    return 4294956430;
  }
  if ((_DWORD)a2 == 19)
  {
    result = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t))(*(_QWORD *)this + 544))(this, a3, a4);
    if ((_DWORD)result)
      return result;
    (*(void (**)(ausdk::AUBase *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 432))(this, 19, a3, a4);
    return 0;
  }
  if ((_DWORD)a2 != 25)
    return (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 104))(this, a2, a3, a4);
  sub_1A3998470((const void **)this + 65, 0);
  return 0;
}

uint64_t ausdk::AUBase::GetPropertyInfo(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::GetProperty(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, void *a5)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::SetProperty(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, const void *a5)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::RemovePropertyValue(ausdk::AUBase *this)
{
  return 4294956445;
}

uint64_t ausdk::AUBase::AddPropertyListener(ausdk::AUBase *this, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4)
{
  char **v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;

  v8 = (char **)((char *)this + 408);
  v9 = *((_QWORD *)this + 52);
  if (*((_QWORD *)this + 51) == v9)
  {
    sub_1A3998764((void **)this + 51, 0x20uLL);
    v9 = *((_QWORD *)this + 52);
  }
  v10 = *((_QWORD *)this + 53);
  if (v9 >= v10)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)*v8) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1A395516C();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*v8) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)sub_1A3964D20((uint64_t)this + 424, v15);
    else
      v16 = 0;
    v17 = &v16[24 * v12];
    v18 = &v16[24 * v15];
    *(_DWORD *)v17 = a2;
    *((_QWORD *)v17 + 1) = a3;
    *((_QWORD *)v17 + 2) = a4;
    v11 = v17 + 24;
    v20 = (char *)*((_QWORD *)this + 51);
    v19 = (char *)*((_QWORD *)this + 52);
    if (v19 != v20)
    {
      do
      {
        v21 = *(_OWORD *)(v19 - 24);
        *((_QWORD *)v17 - 1) = *((_QWORD *)v19 - 1);
        *(_OWORD *)(v17 - 24) = v21;
        v17 -= 24;
        v19 -= 24;
      }
      while (v19 != v20);
      v19 = *v8;
    }
    *((_QWORD *)this + 51) = v17;
    *((_QWORD *)this + 52) = v11;
    *((_QWORD *)this + 53) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *(_DWORD *)v9 = a2;
    v11 = (char *)(v9 + 24);
    *(_QWORD *)(v9 + 8) = a3;
    *(_QWORD *)(v9 + 16) = a4;
  }
  *((_QWORD *)this + 52) = v11;
  return 0;
}

void sub_1A3998764(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_1A395516C();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)sub_1A3964D20(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t ausdk::AUBase::RemovePropertyListener(ausdk::AUBase *this, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4, int a5)
{
  __int128 *v5;
  uint64_t v6;
  __int128 *v8;
  __int128 v9;

  v6 = *((_QWORD *)this + 51);
  v5 = (__int128 *)*((_QWORD *)this + 52);
  if ((__int128 *)v6 != v5)
  {
    while (*(_DWORD *)v6 != a2
         || *(void (**)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int))(v6 + 8) != a3
         || a5 && *(void **)(v6 + 16) != a4)
    {
      v6 += 24;
      if ((__int128 *)v6 == v5)
        return 0;
    }
    if ((__int128 *)v6 != v5)
    {
      v8 = (__int128 *)(v6 + 24);
      if ((__int128 *)(v6 + 24) != v5)
      {
        do
        {
          if (*(_DWORD *)v8 != a2
            || *((void (**)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int))v8
               + 1) != a3
            || a5 && *((void **)v8 + 2) != a4)
          {
            v9 = *v8;
            *(_QWORD *)(v6 + 16) = *((_QWORD *)v8 + 2);
            *(_OWORD *)v6 = v9;
            v6 += 24;
          }
          v8 = (__int128 *)((char *)v8 + 24);
        }
        while (v8 != v5);
        v5 = (__int128 *)*((_QWORD *)this + 52);
      }
      if ((__int128 *)v6 != v5)
        *((_QWORD *)this + 52) = v6;
    }
  }
  return 0;
}

uint64_t ausdk::AUBase::PropertyChanged(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;

  v4 = *(_QWORD *)(this + 408);
  v5 = *(_QWORD *)(this + 416);
  if (v4 != v5)
  {
    v9 = this;
    do
    {
      if (*(_DWORD *)v4 == (_DWORD)a2)
        this = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v4 + 8))(*(_QWORD *)(v4 + 16), *(_QWORD *)(v9 + 8), a2, a3, a4);
      v4 += 24;
    }
    while (v4 != v5);
  }
  return this;
}

uint64_t ausdk::AUBase::SetRenderNotification(ausdk::AUBase *this, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a3)
{
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  if (!a2)
    return 4294967246;
  *((_BYTE *)this + 248) = 1;
  sub_1A399C7F8((uint64_t)this + 224);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v7 = (unint64_t *)((char *)this + 232);
LABEL_3:
  v8 = atomic_load(v7);
  *(_QWORD *)v6 = v8;
  do
  {
    v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_3;
    }
  }
  while (__stlxr(v6, v7));
  return 0;
}

uint64_t ausdk::AUBase::RemoveRenderNotification(ausdk::AUBase *this, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a3)
{
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  sub_1A399C7F8((uint64_t)this + 224);
  *(_DWORD *)(v6 + 8) = 2;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v7 = (unint64_t *)((char *)this + 232);
LABEL_2:
  v8 = atomic_load(v7);
  *(_QWORD *)v6 = v8;
  do
  {
    v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_2;
    }
  }
  while (__stlxr(v6, v7));
  return 0;
}

uint64_t ausdk::AUBase::GetParameter(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  uint64_t v8;
  char **v9;

  v8 = sub_1A3997CB8((uint64_t)this, a3);
  v9 = (char **)sub_1A395EDFC(v8, a4);
  *a5 = ausdk::AUElement::GetParameter(v9, a2);
  return 0;
}

uint64_t ausdk::AUBase::SetParameter(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  uint64_t v8;
  ausdk::AUElement *v9;

  v8 = sub_1A3997CB8((uint64_t)this, a3);
  v9 = (ausdk::AUElement *)sub_1A395EDFC(v8, a4);
  ausdk::AUElement::SetParameter(v9, a2, a5, 0);
  return 0;
}

uint64_t ausdk::AUBase::ScheduleParameter(ausdk::AUBase *this, const AudioUnitParameterEvent *a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  char **v9;
  const AudioUnitParameterEvent *v10;
  _OWORD *v11;
  unint64_t v12;
  AudioUnitParameterEvent::$30DB46DA13B14C3192C3DF0E34A08043 v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  AudioUnitParameterEvent::$30DB46DA13B14C3192C3DF0E34A08043 eventValues;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;

  v6 = (*(uint64_t (**)(ausdk::AUBase *))(*(_QWORD *)this + 160))(this);
  if (a3)
  {
    v7 = v6;
    v8 = 0;
    v9 = (char **)((char *)this + 384);
    do
    {
      v10 = &a2[v8];
      if (v10->eventType == kParameterEvent_Immediate)
        (*(void (**)(ausdk::AUBase *, _QWORD, _QWORD, _QWORD, _QWORD, AudioUnitParameterValue))(*(_QWORD *)this + 152))(this, v10->parameter, v10->scope, v10->element, v10->eventValues.immediate.bufferOffset, v10->eventValues.immediate.value);
      if (v7)
      {
        v11 = (_OWORD *)*((_QWORD *)this + 49);
        v12 = *((_QWORD *)this + 50);
        if ((unint64_t)v11 >= v12)
        {
          v15 = ((char *)v11 - *v9) >> 5;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 59)
            sub_1A395516C();
          v17 = v12 - (_QWORD)*v9;
          if (v17 >> 4 > v16)
            v16 = v17 >> 4;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
            v18 = 0x7FFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
            v19 = (char *)sub_1A395ED34((uint64_t)this + 400, v18);
          else
            v19 = 0;
          v20 = &v19[32 * v15];
          eventValues = v10->eventValues;
          *(_OWORD *)v20 = *(_OWORD *)&v10->scope;
          *((AudioUnitParameterEvent::$30DB46DA13B14C3192C3DF0E34A08043 *)v20 + 1) = eventValues;
          v23 = (char *)*((_QWORD *)this + 48);
          v22 = (char *)*((_QWORD *)this + 49);
          v24 = v20;
          if (v22 != v23)
          {
            do
            {
              v25 = *((_OWORD *)v22 - 1);
              *((_OWORD *)v24 - 2) = *((_OWORD *)v22 - 2);
              *((_OWORD *)v24 - 1) = v25;
              v24 -= 32;
              v22 -= 32;
            }
            while (v22 != v23);
            v22 = *v9;
          }
          v14 = v20 + 32;
          *((_QWORD *)this + 48) = v24;
          *((_QWORD *)this + 49) = v20 + 32;
          *((_QWORD *)this + 50) = &v19[32 * v18];
          if (v22)
            operator delete(v22);
        }
        else
        {
          v13 = v10->eventValues;
          *v11 = *(_OWORD *)&v10->scope;
          v11[1] = v13;
          v14 = v11 + 2;
        }
        *((_QWORD *)this + 49) = v14;
      }
      ++v8;
    }
    while (v8 != a3);
  }
  return 0;
}

uint64_t ausdk::AUBase::ProcessForScheduledParams(uint64_t a1, __int128 **a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  __int128 *v9;
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  int v19;
  int v21;
  uint64_t v23;
  uint64_t result;
  BOOL v25;
  int v26;
  uint64_t v28;
  BOOL (*v29)(uint64_t, uint64_t);

  v9 = *a2;
  v10 = a2[1];
  v11 = 126 - 2 * __clz(((char *)v10 - (char *)v9) >> 5);
  v29 = sub_1A3998E50;
  if (v10 == v9)
    v12 = 0;
  else
    v12 = v11;
  sub_1A399B5F4(v9, v10, (uint64_t (**)(__int128 *, __int128 *))&v29, v12, 1, a5);
  if ((_DWORD)a3)
  {
    v13 = 0;
    v14 = a3;
    while (1)
    {
      v15 = (unsigned int *)*a2;
      v16 = a2[1];
      v17 = a3;
      v18 = *a2;
      if (*a2 != v16)
        break;
      v23 = (a3 - v13);
      v17 = a3;
LABEL_21:
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 568))(a1, a4, v13, v23, a3);
      if ((_DWORD)result)
        return result;
      v13 = v17;
      v25 = v14 > v23;
      if (v14 >= v23)
        v14 -= v23;
      else
        v14 = 0;
      if (!v25)
        return 0;
    }
    while (1)
    {
      v19 = *((_DWORD *)v18 + 4);
      if (v19 > (int)v13 && v19 < (int)v17)
        break;
      if (*((_DWORD *)v18 + 3) == 2)
      {
        v21 = *((_DWORD *)v18 + 5) + v19;
        if (v21 >= (int)v17 || v21 <= (int)v13)
          v17 = v17;
        else
          v17 = v21;
      }
      v18 += 2;
      if (v18 == v16)
        goto LABEL_28;
    }
    v17 = *((unsigned int *)v18 + 4);
LABEL_28:
    v23 = (v17 - v13);
    while (1)
    {
      if (v15 == (unsigned int *)v16)
        goto LABEL_21;
      v26 = v15[4];
      if (v15[3] != 2)
        break;
      if (v26 < (int)v17 && (int)(v15[5] + v26) > (int)v13)
        goto LABEL_38;
LABEL_40:
      v15 += 8;
    }
    if (v26 > v13)
      goto LABEL_40;
LABEL_38:
    v28 = sub_1A39976F8(a1, *v15, v15[1]);
    if (v28)
      (*(void (**)(uint64_t, _QWORD, unsigned int *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v28 + 32))(v28, v15[2], v15, v13, (v17 - v13), 0);
    goto LABEL_40;
  }
  return 0;
}

BOOL sub_1A3998E50(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 16);
}

uint64_t ausdk::AUBase::SetWantsRenderThreadID(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 264) != a2)
  {
    *(_BYTE *)(this + 264) = a2;
    if ((a2 & 1) == 0)
      *(_QWORD *)(this + 256) = 0;
  }
  return this;
}

uint64_t ausdk::AUBase::DoRender(ausdk::AUBase *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5, AudioBufferList *a6)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  UInt32 v26;
  UInt32 *p_mDataByteSize;
  UInt32 v28;
  uint64_t v29;
  unint64_t i;
  uint64_t v31;
  int v32;
  unint64_t j;
  uint64_t v34;
  int v36;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  UInt32 v43;
  __int16 v44;
  int v45;
  __int16 v46;
  UInt32 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 17))
  {
    v8 = *((_DWORD *)this + 84);
    if (v8 < a5)
    {
      v9 = mach_absolute_time();
      if (*((double *)this + 43) < (double)(v9 - *((_QWORD *)this + 44)))
      {
        *((_QWORD *)this + 44) = v9;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          sub_1A3AB3440((uint64_t)this + 336, a5, v10, v11, v12, v13, v14, v15);
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        sub_1A3AB33D0();
      v16 = 4294956422;
      if (!*((_DWORD *)this + 85))
      {
        *((_DWORD *)this + 85) = -10874;
        (*(void (**)(ausdk::AUBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 22, 0, 0);
      }
      return v16;
    }
    if (v8 != (_DWORD)a5 && *((_BYTE *)this + 376) != 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        sub_1A3AB34BC();
      v16 = 4294967246;
      if (*((_DWORD *)this + 85))
        return v16;
      goto LABEL_48;
    }
    v22 = sub_1A395EDFC((uint64_t)this + 128, a4);
    if ((*(_BYTE *)(v22 + 92) & 0x20) != 0)
      v23 = *(unsigned int *)(v22 + 108);
    else
      v23 = 1;
    if ((_DWORD)v23 == a6->mNumberBuffers)
    {
      if (!(_DWORD)v23)
      {
LABEL_29:
        v29 = v22;
        if (*((_BYTE *)this + 264))
          *((_QWORD *)this + 32) = pthread_self();
        if (*((_BYTE *)this + 248))
        {
          sub_1A3999418((unint64_t *)this + 28);
          *(_DWORD *)buf = *a2 | 4;
          for (i = atomic_load((unint64_t *)this + 28); i; i = *(_QWORD *)i)
            (*(void (**)(_QWORD, uint8_t *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *))(i + 16))(*(_QWORD *)(i + 24), buf, a3, a4, a5, a6);
        }
        v31 = sub_1A3999678(this, (uint64_t)a2, (uint64_t)a3, a4, v29, a5, (uint64_t)a6);
        v16 = v31;
        if ((_DWORD)v31 && !*((_DWORD *)this + 85))
        {
          *((_DWORD *)this + 85) = v31;
          (*(void (**)(ausdk::AUBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 22, 0, 0);
        }
        if (*((_BYTE *)this + 248))
        {
          v32 = (_DWORD)v16 ? 264 : 8;
          *(_DWORD *)buf = *a2 | v32;
          for (j = atomic_load((unint64_t *)this + 28); j; j = *(_QWORD *)j)
            (*(void (**)(_QWORD, uint8_t *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *))(j + 16))(*(_QWORD *)(j + 24), buf, a3, a4, a5, a6);
        }
        v34 = *((_QWORD *)this + 48);
        if (v34 != *((_QWORD *)this + 49))
          *((_QWORD *)this + 49) = v34;
        return v16;
      }
      v24 = 0;
      v25 = *(_DWORD *)(v22 + 104);
      v26 = v25 * a5;
      p_mDataByteSize = &a6->mBuffers[0].mDataByteSize;
      while (1)
      {
        if (*(_QWORD *)(p_mDataByteSize + 1))
        {
          v28 = *p_mDataByteSize;
          if (*p_mDataByteSize < v26)
          {
            v36 = v25;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67110144;
              v39 = a5;
              v40 = 1024;
              v41 = v36;
              v42 = 1024;
              v43 = v26;
              v44 = 1024;
              v45 = v24;
              v46 = 1024;
              v47 = v28;
              _os_log_error_impl(&dword_1A3940000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%u frames, %u bytes/frame, expected %u-byte buffer; ioData.mBuffers[%u].mDataByteSize=%u; kAudio_ParamError",
                buf,
                0x20u);
            }
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              sub_1A3AB34BC();
            v16 = 4294967246;
            if (!*((_DWORD *)this + 85))
            {
              *((_DWORD *)this + 85) = -50;
              (*(void (**)(ausdk::AUBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 22, 0, 0);
            }
            return v16;
          }
          *p_mDataByteSize = v26;
        }
        ++v24;
        p_mDataByteSize += 4;
        if (v23 == v24)
          goto LABEL_29;
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1A3AB352C();
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1A3AB34BC();
    v16 = 4294967246;
    if (!*((_DWORD *)this + 85))
    {
LABEL_48:
      *((_DWORD *)this + 85) = -50;
      (*(void (**)(ausdk::AUBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 22, 0, 0);
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1A3AB3360();
    v16 = 4294956429;
    if (!*((_DWORD *)this + 85))
    {
      *((_DWORD *)this + 85) = -10867;
      (*(void (**)(ausdk::AUBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 22, 0, 0);
    }
  }
  return v16;
}

void sub_1A39992F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  unsigned int *v11;

  if (a2)
  {
    v11 = (unsigned int *)__cxa_begin_catch(exception_object);
    if (a2 == 2)
      sub_1A39993A0(&a10, *v11);
    else
      sub_1A39993A0(&a10, 0xFFFFFFFFLL);
    __cxa_end_catch();
    JUMPOUT(0x1A3999258);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A39993A0(_DWORD **a1, uint64_t a2)
{
  _DWORD *v3;

  v3 = *a1;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_1A3AB3594();
    if (!(_DWORD)a2)
      return a2;
  }
  else if (!(_DWORD)a2)
  {
    return a2;
  }
  if (!v3[85])
  {
    v3[85] = a2;
    (*(void (**)(_DWORD *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 432))(v3, 22, 0, 0);
  }
  return a2;
}

void sub_1A3999418(unint64_t *a1)
{
  unint64_t *v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  NSObject *v8;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint8_t v31;
  char v32[15];

  v2 = a1 + 1;
LABEL_2:
  v3 = (_QWORD *)atomic_load(v2);
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v2);
      if ((_QWORD *)v4 != v3)
      {
        __clrex();
        goto LABEL_2;
      }
    }
    while (__stlxr(0, v2));
    v5 = 0;
    do
    {
      v6 = v5;
      v5 = v3;
      v3 = (_QWORD *)*v3;
      *v5 = v6;
    }
    while (v3);
    v7 = a1 + 2;
    v8 = MEMORY[0x1E0C81028];
    do
    {
      v9 = (unint64_t)v5;
      v5 = (_QWORD *)*v5;
      v10 = *(_DWORD *)(v9 + 8);
      switch(v10)
      {
        case 3:
          v13 = (unint64_t *)atomic_load(a1);
          if (v13)
          {
            do
            {
              v14 = (unint64_t *)*v13;
LABEL_19:
              v15 = atomic_load(v7);
              *v13 = v15;
              do
              {
                v16 = __ldaxr(v7);
                if (v16 != v15)
                {
                  __clrex();
                  goto LABEL_19;
                }
              }
              while (__stlxr((unint64_t)v13, v7));
              v13 = v14;
            }
            while (v14);
          }
LABEL_25:
          v17 = atomic_load(v7);
          *(_QWORD *)v9 = v17;
          do
          {
            v18 = __ldaxr(v7);
            if (v18 != v17)
            {
              __clrex();
              goto LABEL_25;
            }
          }
          while (__stlxr(v9, v7));
          if (atomic_load(a1))
            atomic_store(0, a1);
          break;
        case 2:
          v19 = (unint64_t *)atomic_load(a1);
          if (v19)
          {
            v20 = 0;
            do
            {
              v21 = v19;
              if (v19[2] == *(_QWORD *)(v9 + 16) && v19[3] == *(_QWORD *)(v9 + 24))
              {
                v28 = *v19;
                if (v20)
                  *v20 = v28;
                else
                  atomic_store(v28, a1);
                while (1)
                {
                  v29 = atomic_load(v7);
                  *v19 = v29;
                  while (1)
                  {
                    v30 = __ldaxr(v7);
                    if (v30 != v29)
                      break;
                    if (!__stlxr((unint64_t)v19, v7))
                      goto LABEL_35;
                  }
                  __clrex();
                }
              }
              v19 = (unint64_t *)*v19;
              v20 = v21;
            }
            while (*v21);
          }
          while (1)
          {
LABEL_35:
            v22 = atomic_load(v7);
            *(_QWORD *)v9 = v22;
            while (1)
            {
              v23 = __ldaxr(v7);
              if (v23 != v22)
                break;
              if (!__stlxr(v9, v7))
                goto LABEL_45;
            }
            __clrex();
          }
        case 1:
          v11 = (unint64_t *)atomic_load(a1);
          if (v11)
          {
            do
            {
              v12 = v11;
              if (v11[2] == *(_QWORD *)(v9 + 16) && v11[3] == *(_QWORD *)(v9 + 24))
              {
                while (1)
                {
                  v26 = atomic_load(v7);
                  *(_QWORD *)v9 = v26;
                  while (1)
                  {
                    v27 = __ldaxr(v7);
                    if (v27 != v26)
                      break;
                    if (!__stlxr(v9, v7))
                      goto LABEL_45;
                  }
                  __clrex();
                }
              }
              v11 = (unint64_t *)*v11;
            }
            while (*v12);
            *v12 = v9;
            *(_QWORD *)v9 = 0;
          }
          else
          {
            v25 = atomic_load(a1);
            *(_QWORD *)v9 = v25;
            atomic_store(v9, a1);
          }
          break;
        default:
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
            sub_1A3AB3604(&v31, v32);
          break;
      }
LABEL_45:
      ;
    }
    while (v5);
  }
}

uint64_t sub_1A3999678(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if (*(_QWORD *)(a7 + 16)
    && (!*(_BYTE *)(a5 + 168)
     || ((v14 = a1[21]) == 0
       ? (v15 = (a1[19] - a1[18]) >> 3)
       : (LODWORD(v15) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14)),
         v15 < 2)))
  {
    sub_1A39876C4(a5 + 144, (unsigned int *)a7);
  }
  else
  {
    sub_1A399C510(a5, a6);
  }
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 200))(a1, a2, a3, a4, a6);
  if (!(_DWORD)v16)
  {
    v17 = (_QWORD *)(a5 + 144);
    if (*(_QWORD *)(a7 + 16))
    {
      sub_1A398775C(v17, (_DWORD *)a7);
      *(_DWORD *)v17 = 0;
    }
    else
    {
      sub_1A399C540((uint64_t)v17, (unsigned int *)a7);
    }
  }
  return v16;
}

uint64_t ausdk::AUBase::DoProcess(ausdk::AUBase *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, AudioBufferList *a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  UInt32 v17;
  UInt32 *p_mDataByteSize;
  UInt32 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  UInt32 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)a2 + 1) & 2) != 0)
    goto LABEL_27;
  if (*((_BYTE *)this + 17))
  {
    v10 = *((_DWORD *)this + 84);
    if (v10 < a4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        sub_1A3AB36B4();
      v11 = 4294956422;
      if (!*((_DWORD *)this + 85))
      {
        *((_DWORD *)this + 85) = -10874;
        (*(void (**)(ausdk::AUBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 22, 0, 0);
      }
      return v11;
    }
    if (v10 != (_DWORD)a4 && *((_BYTE *)this + 376) != 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        sub_1A3AB3724();
      v11 = 4294967246;
      if (*((_DWORD *)this + 85))
        return v11;
LABEL_36:
      *((_DWORD *)this + 85) = -50;
      (*(void (**)(ausdk::AUBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 22, 0, 0);
      return v11;
    }
    v13 = sub_1A395EDFC((uint64_t)this + 80, 0);
    if ((*(_BYTE *)(v13 + 92) & 0x20) != 0)
      v14 = *(unsigned int *)(v13 + 108);
    else
      v14 = 1;
    if ((_DWORD)v14 == a5->mNumberBuffers)
    {
      if ((_DWORD)v14)
      {
        v15 = 0;
        v16 = *(_DWORD *)(v13 + 104);
        v17 = v16 * a4;
        p_mDataByteSize = &a5->mBuffers[0].mDataByteSize;
        do
        {
          if (*(_QWORD *)(p_mDataByteSize + 1))
          {
            v19 = *p_mDataByteSize;
            if (*p_mDataByteSize < v17)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67110144;
                v26 = a4;
                v27 = 1024;
                v28 = v16;
                v29 = 1024;
                v30 = v16 * a4;
                v31 = 1024;
                v32 = v15;
                v33 = 1024;
                v34 = v19;
                _os_log_error_impl(&dword_1A3940000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%u frames, %u bytes/frame, expected %u-byte buffer; ioData.mBuffers[%u].mDataByteSize=%u; kAudio_ParamError",
                  buf,
                  0x20u);
              }
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                sub_1A3AB3724();
              v11 = 4294967246;
              if (!*((_DWORD *)this + 85))
              {
                *((_DWORD *)this + 85) = -50;
                (*(void (**)(ausdk::AUBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 22, 0, 0);
              }
              return v11;
            }
            *p_mDataByteSize = v17;
          }
          ++v15;
          p_mDataByteSize += 4;
        }
        while (v14 != v15);
      }
LABEL_27:
      if (*((_BYTE *)this + 264))
        *((_QWORD *)this + 32) = pthread_self();
      if (a3->mSampleTime == *((double *)this + 34))
        return 0;
      v20 = *(_OWORD *)&a3->mSampleTime;
      v21 = *(_OWORD *)&a3->mRateScalar;
      v22 = *(_OWORD *)&a3->mSMPTETime.mHours;
      *((_OWORD *)this + 19) = *(_OWORD *)&a3->mSMPTETime.mSubframes;
      *((_OWORD *)this + 20) = v22;
      *((_OWORD *)this + 17) = v20;
      *((_OWORD *)this + 18) = v21;
      return (*(uint64_t (**)(ausdk::AUBase *, unsigned int *, AudioBufferList *, AudioBufferList *, uint64_t))(*(_QWORD *)this + 176))(this, a2, a5, a5, a4);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1A3AB3794();
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1A3AB3724();
    v11 = 4294967246;
    if (!*((_DWORD *)this + 85))
      goto LABEL_36;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1A3AB3644();
    v11 = 4294956429;
    if (!*((_DWORD *)this + 85))
    {
      *((_DWORD *)this + 85) = -10867;
      (*(void (**)(ausdk::AUBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 22, 0, 0);
    }
  }
  return v11;
}

void sub_1A3999AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  unsigned int *v11;

  if (a2)
  {
    v11 = (unsigned int *)__cxa_begin_catch(exception_object);
    if (a2 == 2)
      sub_1A3999B90(&a10, *v11);
    else
      sub_1A3999B90(&a10, 0xFFFFFFFFLL);
    __cxa_end_catch();
    JUMPOUT(0x1A3999940);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A3999B90(_DWORD **a1, uint64_t a2)
{
  _DWORD *v3;

  v3 = *a1;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_1A3AB37FC();
    if (!(_DWORD)a2)
      return a2;
  }
  else if (!(_DWORD)a2)
  {
    return a2;
  }
  if (!v3[85])
  {
    v3[85] = a2;
    (*(void (**)(_DWORD *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 432))(v3, 22, 0, 0);
  }
  return a2;
}

uint64_t ausdk::AUBase::DoProcessMultiple(ausdk::AUBase *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5, const AudioBufferList **a6, uint64_t a7, AudioBufferList **a8)
{
  uint64_t v9;
  const AudioBufferList **v10;
  uint64_t v11;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  const AudioBufferList *v23;
  uint64_t v24;
  unsigned int v25;
  void **p_mData;
  unsigned int v27;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  AudioBufferList *v34;
  uint64_t v35;
  int v36;
  UInt32 v37;
  UInt32 *p_mDataByteSize;
  UInt32 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v44;
  char *v45;
  BOOL v46;
  unsigned int v47;
  unsigned int v48;
  uint8_t buf[4];
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  UInt32 v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  UInt32 v61;
  uint64_t v62;

  v9 = a7;
  v10 = a6;
  v11 = a5;
  v62 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)a2 + 1) & 2) != 0)
    goto LABEL_59;
  if (!*((_BYTE *)this + 17))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1A3AB386C();
    v17 = 4294956429;
    if (!*((_DWORD *)this + 85))
    {
      *((_DWORD *)this + 85) = -10867;
      (*(void (**)(ausdk::AUBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 22, 0, 0);
    }
    return v17;
  }
  v16 = *((_DWORD *)this + 84);
  if (v16 < a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1A3AB38DC();
    v17 = 4294956422;
    if (!*((_DWORD *)this + 85))
    {
      *((_DWORD *)this + 85) = -10874;
      (*(void (**)(ausdk::AUBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 22, 0, 0);
    }
    return v17;
  }
  if (v16 != (_DWORD)a4 && *((_BYTE *)this + 376) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1A3AB394C();
    v17 = 4294967246;
    if (*((_DWORD *)this + 85))
      return v17;
    goto LABEL_34;
  }
  v47 = a7;
  v48 = a5;
  if ((_DWORD)a5)
  {
    v19 = 0;
    v20 = 1;
    v45 = (char *)this + 80;
    while (1)
    {
      v46 = v20;
      if (v10[v19])
      {
        v21 = sub_1A395EDFC((uint64_t)v45, v19);
        if ((*(_BYTE *)(v21 + 92) & 0x20) != 0)
          v22 = *(unsigned int *)(v21 + 108);
        else
          v22 = 1;
        v23 = a6[v19];
        if ((_DWORD)v22 != v23->mNumberBuffers)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            sub_1A3AB3A24();
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            sub_1A3AB394C();
          v17 = 4294967246;
          if (*((_DWORD *)this + 85))
            return v17;
LABEL_34:
          *((_DWORD *)this + 85) = -50;
          (*(void (**)(ausdk::AUBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 22, 0, 0);
          return v17;
        }
        if ((_DWORD)v22)
          break;
      }
LABEL_29:
      v20 = ++v19 < (unint64_t)v48;
      v10 = a6;
      if (v19 == v48)
        goto LABEL_45;
    }
    v24 = 0;
    v25 = *(_DWORD *)(v21 + 104) * a4;
    p_mData = &v23->mBuffers[0].mData;
    while (*p_mData)
    {
      v27 = *((_DWORD *)p_mData - 1);
      if (v27 < v25)
      {
        v30 = *(_DWORD *)(v21 + 104);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67110400;
          v51 = a4;
          v52 = 1024;
          v53 = v30;
          v54 = 1024;
          v55 = v25;
          v56 = 1024;
          v57 = v19;
          v58 = 1024;
          v59 = v24;
          v60 = 1024;
          v61 = v27;
          _os_log_error_impl(&dword_1A3940000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%u frames, %u bytes/frame, expected %u-byte buffer; inInputBufferLists[%u].mBuffers[%u].mDataByteSize=%u; kAudio_ParamError",
            buf,
            0x26u);
        }
        v10 = a6;
        v29 = v46;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          sub_1A3AB394C();
        goto LABEL_41;
      }
      ++v24;
      p_mData += 2;
      if (v22 == v24)
        goto LABEL_29;
    }
    v10 = a6;
    v29 = v46;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1A3AB394C();
LABEL_41:
    if (!*((_DWORD *)this + 85))
    {
      *((_DWORD *)this + 85) = -50;
      (*(void (**)(ausdk::AUBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 22, 0, 0);
    }
    if (v29)
      return 4294967246;
  }
LABEL_45:
  v9 = v47;
  v11 = v48;
  if (!v47)
  {
LABEL_59:
    if (*((_BYTE *)this + 264))
      *((_QWORD *)this + 32) = pthread_self();
    if (a3->mSampleTime == *((double *)this + 34))
      return 0;
    v40 = *(_OWORD *)&a3->mSampleTime;
    v41 = *(_OWORD *)&a3->mRateScalar;
    v42 = *(_OWORD *)&a3->mSMPTETime.mHours;
    *((_OWORD *)this + 19) = *(_OWORD *)&a3->mSMPTETime.mSubframes;
    *((_OWORD *)this + 20) = v42;
    *((_OWORD *)this + 17) = v40;
    *((_OWORD *)this + 18) = v41;
    return (*(uint64_t (**)(ausdk::AUBase *, unsigned int *, uint64_t, uint64_t, const AudioBufferList **, uint64_t, AudioBufferList **))(*(_QWORD *)this + 184))(this, a2, a4, v11, v10, v9, a8);
  }
  v31 = 0;
  while (!a8[v31])
  {
LABEL_58:
    ++v31;
    v9 = v47;
    v11 = v48;
    v10 = a6;
    if (v31 == v47)
      goto LABEL_59;
  }
  v32 = sub_1A395EDFC((uint64_t)this + 128, v31);
  if ((*(_BYTE *)(v32 + 92) & 0x20) != 0)
    v33 = *(unsigned int *)(v32 + 108);
  else
    v33 = 1;
  v34 = a8[v31];
  if ((_DWORD)v33 == v34->mNumberBuffers)
  {
    if ((_DWORD)v33)
    {
      v35 = 0;
      v36 = *(_DWORD *)(v32 + 104);
      v37 = v36 * a4;
      p_mDataByteSize = &v34->mBuffers[0].mDataByteSize;
      while (1)
      {
        if (*(_QWORD *)(p_mDataByteSize + 1))
        {
          v39 = *p_mDataByteSize;
          if (*p_mDataByteSize < v37)
          {
            v44 = v36;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67110400;
              v51 = a4;
              v52 = 1024;
              v53 = v44;
              v54 = 1024;
              v55 = v37;
              v56 = 1024;
              v57 = v31;
              v58 = 1024;
              v59 = v35;
              v60 = 1024;
              v61 = v39;
              _os_log_error_impl(&dword_1A3940000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%u frames, %u bytes/frame, expected %u-byte buffer; ioOutputBufferLists[%u]->mBuffers[%u].mDataByteSize="
                "%u; kAudio_ParamError",
                buf,
                0x26u);
            }
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              sub_1A3AB394C();
            v17 = 4294967246;
            if (!*((_DWORD *)this + 85))
              goto LABEL_70;
            return v17;
          }
          *p_mDataByteSize = v37;
        }
        ++v35;
        p_mDataByteSize += 4;
        if (v33 == v35)
          goto LABEL_58;
      }
    }
    goto LABEL_58;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    sub_1A3AB39BC();
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    sub_1A3AB394C();
  v17 = 4294967246;
  if (!*((_DWORD *)this + 85))
  {
LABEL_70:
    *((_DWORD *)this + 85) = -50;
    (*(void (**)(ausdk::AUBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 22, 0, 0);
  }
  return v17;
}

void sub_1A399A214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  unsigned int *v15;

  if (a2)
  {
    v15 = (unsigned int *)__cxa_begin_catch(exception_object);
    if (a2 == 2)
      sub_1A399A2BC(&a14, *v15);
    else
      sub_1A399A2BC(&a14, 0xFFFFFFFFLL);
    __cxa_end_catch();
    JUMPOUT(0x1A3999FC0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A399A2BC(_DWORD **a1, uint64_t a2)
{
  _DWORD *v3;

  v3 = *a1;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_1A3AB3A8C();
    if (!(_DWORD)a2)
      return a2;
  }
  else if (!(_DWORD)a2)
  {
    return a2;
  }
  if (!v3[85])
  {
    v3[85] = a2;
    (*(void (**)(_DWORD *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 432))(v3, 22, 0, 0);
  }
  return a2;
}

uint64_t ausdk::AUBase::SetInputCallback(ausdk::AUBase *this, uint64_t a2, uint64_t a3, int (*a4)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a5)
{
  ausdk::AUInputElement *v10;

  v10 = (ausdk::AUInputElement *)sub_1A395EDFC((uint64_t)this + 80, a3);
  ausdk::AUInputElement::SetInputCallback(v10, a4, a5);
  (*(void (**)(ausdk::AUBase *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 432))(this, a2, 1, a3);
  return 0;
}

uint64_t ausdk::AUBase::SetConnection(const void **this, const AudioUnitConnection *a2)
{
  ausdk::AUInputElement *v4;
  OpaqueAudioComponentInstance *sourceAudioUnit;
  uint64_t result;
  UInt32 ioDataSize;
  _QWORD outData[5];

  v4 = (ausdk::AUInputElement *)sub_1A395EDFC((uint64_t)(this + 10), a2->destInputNumber);
  sourceAudioUnit = a2->sourceAudioUnit;
  if (!a2->sourceAudioUnit
    || (ioDataSize = 40,
        result = AudioUnitGetProperty(sourceAudioUnit, 8u, 2u, a2->sourceOutputNumber, outData, &ioDataSize),
        !(_DWORD)result)
    && (result = ausdk::AUBase::DispatchSetProperty(this, 8, 1, a2->destInputNumber, outData, 40), !(_DWORD)result))
  {
    ausdk::AUInputElement::SetConnection(v4, a2);
    (*((void (**)(const void **, uint64_t, uint64_t, _QWORD))*this + 54))(this, 1, 1, a2->destInputNumber);
    return 0;
  }
  return result;
}

uint64_t ausdk::AUBase::SupportedNumChannels(ausdk::AUBase *this, const AUChannelInfo **a2)
{
  return 0;
}

BOOL ausdk::AUBase::ValidFormat(ausdk::AUBase *this, unsigned int a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL8 result;

  result = sub_1A399A4AC(a4);
  if (result)
    return (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  return result;
}

BOOL sub_1A399A4AC(_DWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v6;

  if (a1[2] != 1819304813 || a1[5] != 1)
    return 0;
  v2 = a1[4];
  if ((_DWORD)v2 != a1[6])
    return 0;
  v3 = a1[3];
  if ((v3 & 1) == 0 || (v3 & 0x20) == 0 && a1[7] != 1)
    return 0;
  v4 = 0;
  if ((v3 & 2) == 0 && a1[8] == 32)
  {
    if ((v3 & 0x20) != 0)
      v6 = 1;
    else
      v6 = a1[7];
    return v2 == 4 * v6;
  }
  return v4;
}

__n128 ausdk::AUBase::GetStreamFormat@<Q0>(ausdk::AUBase *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  char *v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;

  if (a2)
  {
    if (a2 == 2)
    {
      v5 = (char *)this + 128;
    }
    else
    {
      if (a2 != 1)
        sub_1A399A644(-10866);
      v5 = (char *)this + 80;
    }
    a2 = a3;
  }
  else
  {
    v5 = (char *)this + 128;
  }
  v6 = sub_1A399A588((uint64_t)v5, a2);
  result = *(__n128 *)(v6 + 80);
  v8 = *(_OWORD *)(v6 + 96);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v8;
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(v6 + 112);
  return result;
}

uint64_t sub_1A399A588(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *exception;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    if (!v4)
    {
LABEL_7:
      v8 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (v8)
        sub_1A3AB3AFC(v8, v9, v10, v11, v12, v13, v14, v15);
      exception = __cxa_allocate_exception(0x18uLL);
      sub_1A39532E0((uint64_t)exception, -10877);
      __cxa_throw(exception, (struct type_info *)&unk_1E4A9C228, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  else
  {
    v6 = a1 + 16;
    v5 = *(_QWORD *)(a1 + 16);
    if (a2 >= (unint64_t)((*(_QWORD *)(v6 + 8) - v5) >> 3))
      goto LABEL_7;
    v4 = *(_QWORD *)(v5 + 8 * a2);
    if (!v4)
      goto LABEL_7;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  if (!result)
    goto LABEL_7;
  return result;
}

void sub_1A399A630(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1A399A644(int a1)
{
  void *exception;
  _DWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_error_impl(&dword_1A3940000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "throwing %d", (uint8_t *)v3, 8u);
  }
  exception = __cxa_allocate_exception(0x18uLL);
  sub_1A39532E0((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E4A9C228, (void (*)(void *))std::runtime_error::~runtime_error);
}

void sub_1A399A6E4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t ausdk::AUBase::SetBusCount(ausdk::AUBase *this, unsigned int a2, unsigned int a3)
{
  ausdk::AUScope *v5;

  if (*((_BYTE *)this + 17))
    return 4294956447;
  v5 = (ausdk::AUScope *)sub_1A3997CB8((uint64_t)this, a2);
  ausdk::AUScope::SetNumberOfElements(v5, a3);
  return 0;
}

uint64_t ausdk::AUBase::ChangeStreamFormat(ausdk::AUBase *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *__s2, const AudioStreamBasicDescription *__s1)
{
  char *v9;
  unsigned int v10;
  uint64_t v11;

  if (memcmp(__s1, __s2, 0x28uLL))
  {
    if ((_DWORD)a2)
    {
      if ((_DWORD)a2 == 2)
      {
        v9 = (char *)this + 128;
      }
      else
      {
        if ((_DWORD)a2 != 1)
          sub_1A399A644(-10866);
        v9 = (char *)this + 80;
      }
      v10 = a3;
    }
    else
    {
      v9 = (char *)this + 128;
      v10 = 0;
    }
    v11 = sub_1A399A588((uint64_t)v9, v10);
    (*(void (**)(uint64_t, const AudioStreamBasicDescription *))(*(_QWORD *)v11 + 56))(v11, __s1);
    (*(void (**)(ausdk::AUBase *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 432))(this, 8, a2, a3);
  }
  return 0;
}

uint64_t ausdk::AUBase::GetChannelLayoutTags(ausdk::AUBase *this, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1A3997CB8((uint64_t)this, a2);
  v5 = sub_1A399A588(v4, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
}

uint64_t ausdk::AUBase::GetAudioChannelLayout(ausdk::AUBase *this, unsigned int a2, unsigned int a3, AudioChannelLayout *a4, BOOL *a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = sub_1A3997CB8((uint64_t)this, a2);
  v9 = sub_1A399A588(v8, a3);
  return (*(uint64_t (**)(uint64_t, AudioChannelLayout *, BOOL *))(*(_QWORD *)v9 + 96))(v9, a4, a5);
}

uint64_t ausdk::AUBase::RemoveAudioChannelLayout(ausdk::AUBase *this, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;

  v4 = sub_1A3997CB8((uint64_t)this, a2);
  v5 = sub_1A399A588(v4, a3);
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD, char *))(*(_QWORD *)v5 + 96))(v5, 0, &v7);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
  return result;
}

uint64_t ausdk::AUBase::SetAudioChannelLayout(ausdk::AUBase *this, uint64_t a2, uint64_t a3, AudioChannelLayout *a4)
{
  uint64_t v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v14;
  _DWORD *v16;
  _DWORD *v17;

  v8 = sub_1A3997CB8((uint64_t)this, a2);
  v9 = (_DWORD *)sub_1A399A588(v8, a3);
  v10 = v9[27];
  if (v10 != sub_1A399A9EC(a4))
    return 4294956445;
  (*(void (**)(_DWORD **__return_ptr, ausdk::AUBase *, uint64_t, uint64_t))(*(_QWORD *)this + 552))(&v16, this, a2, a3);
  v11 = v16;
  if (v16 == v17)
  {
    v14 = 4294956417;
  }
  else
  {
    v12 = v16;
    while (*v12 && *v12 != a4->mChannelLayoutTag)
    {
      if (++v12 == v17)
        goto LABEL_14;
    }
    if (v12 != v17)
    {
      v14 = (*(uint64_t (**)(_DWORD *, AudioChannelLayout *))(*(_QWORD *)v9 + 88))(v9, a4);
      v11 = v16;
      goto LABEL_15;
    }
LABEL_14:
    v14 = 4294956445;
  }
LABEL_15:
  if (v11)
  {
    v17 = v11;
    operator delete(v11);
  }
  return v14;
}

void sub_1A399A9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A399A9EC(_DWORD *a1)
{
  int8x8_t v2;
  char v3;

  if (*a1 == 0x10000)
  {
    v2 = (int8x8_t)a1[1];
    v3 = 1;
    return sub_1A399C5D4(&v2, 0, (uint64_t)&v2, 0x20u, &v3);
  }
  else if (*a1)
  {
    return (unsigned __int16)*a1;
  }
  else
  {
    return a1[2];
  }
}

uint64_t ausdk::AUBase::SaveState(ausdk::AUBase *this, CFMutableDictionaryRef *a2)
{
  unsigned int v4;
  ausdk::AUScope *v5;
  unsigned int v6;
  ausdk::AUScope *v7;
  unsigned int v8;
  ausdk::AUScope *v9;
  CFMutableDictionaryRef v10;
  __CFDictionary *Mutable;
  void *value;
  int v14;
  CFMutableDictionaryRef theDict;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  ausdk::ComponentBase::GetComponentDescription((AudioComponentInstance *)this, (uint64_t)&v16);
  theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  sub_1A399ACAC(theDict, CFSTR("version"), 0);
  sub_1A399ACAC(theDict, CFSTR("type"), v16);
  sub_1A399ACAC(theDict, CFSTR("subtype"), SHIDWORD(v16));
  v14 = v17;
  sub_1A399ACAC(theDict, CFSTR("manufacturer"), v17);
  v4 = 0;
  value = CFDataCreateMutable(0, 0);
  do
  {
    v5 = (ausdk::AUScope *)sub_1A3997CB8((uint64_t)this, v4);
    ausdk::AUScope::SaveState(v5, (__CFData *)value);
    ++v4;
  }
  while (v4 != 3);
  (*(void (**)(ausdk::AUBase *, void *))(*(_QWORD *)this + 280))(this, value);
  CFDictionarySetValue(theDict, CFSTR("data"), value);
  sub_1A399AD0C((const void **)&value, 0);
  CFDictionarySetValue(theDict, CFSTR("name"), *((const void **)this + 46));
  if (!(*(unsigned int (**)(ausdk::AUBase *, uint64_t, _QWORD, _QWORD, int *))(*(_QWORD *)this + 88))(this, 26, 0, 0, &v14))sub_1A399ACAC(theDict, CFSTR("render-quality"), v14);
  v6 = 0;
  while (1)
  {
    v7 = (ausdk::AUScope *)sub_1A3997CB8((uint64_t)this, v6);
    if (ausdk::AUScope::HasElementWithName(v7))
      break;
    if (++v6 == 4)
      goto LABEL_12;
  }
  v8 = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  do
  {
    v9 = (ausdk::AUScope *)sub_1A3997CB8((uint64_t)this, v8);
    ausdk::AUScope::AddElementNamesToDict(v9, Mutable);
    ++v8;
  }
  while (v8 != 4);
  CFDictionarySetValue(theDict, CFSTR("element-name"), Mutable);
  sub_1A399C894((const void **)&Mutable);
LABEL_12:
  v10 = theDict;
  theDict = 0;
  *a2 = v10;
  sub_1A399C8D4((const void **)&value);
  sub_1A399C894((const void **)&theDict);
  return 0;
}

void sub_1A399AC60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  const void *v5;
  va_list va1;
  uint64_t v7;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v5 = va_arg(va2, const void *);
  v7 = va_arg(va2, _QWORD);
  sub_1A399C894((const void **)va);
  sub_1A399C8D4((const void **)va1);
  sub_1A399C894((const void **)va2);
  _Unwind_Resume(a1);
}

void sub_1A399ACAC(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

const void **sub_1A399AD0C(const void **a1, const void *a2)
{
  if (*a1 != a2)
  {
    sub_1A399C8D4(a1);
    *a1 = a2;
    sub_1A399C8B4(a1);
  }
  return a1;
}

uint64_t ausdk::AUBase::RestoreState(AudioComponentInstance *this, CFTypeRef cf)
{
  CFTypeID v4;
  uint64_t result;
  const __CFNumber *Value;
  const __CFNumber *v7;
  CFTypeID v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  CFTypeID v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  CFTypeID v14;
  const __CFData *v15;
  const __CFData *v16;
  CFTypeID v17;
  const UInt8 *BytePtr;
  CFIndex Length;
  const UInt8 *v20;
  ausdk::AUScope *v21;
  const __CFString *v22;
  AudioComponentInstance v23;
  CFTypeID v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  CFTypeID v27;
  const __CFDictionary *v28;
  CFTypeID v29;
  uint64_t v30;
  CFStringRef v31;
  const __CFDictionary *v32;
  const __CFDictionary *v33;
  CFTypeID v34;
  ausdk::AUScope *v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  int valuePtr;
  uint64_t v41;
  uint64_t v42;
  int v43;

  v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID())
    return 4294956445;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  ausdk::ComponentBase::GetComponentDescription(this, (uint64_t)&v41);
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("part")))
    return 4294956445;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("version"));
  if (!Value)
    return 4294956445;
  v7 = Value;
  v8 = CFGetTypeID(Value);
  if (v8 != CFNumberGetTypeID())
    return 4294956445;
  valuePtr = 0;
  CFNumberGetValue(v7, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr)
    return 4294956445;
  v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("subtype"));
  if (!v9)
    return 4294956445;
  v10 = v9;
  v11 = CFGetTypeID(v9);
  if (v11 != CFNumberGetTypeID())
    return 4294956445;
  CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr != HIDWORD(v41))
    return 4294956445;
  v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("manufacturer"));
  if (!v12)
    return 4294956445;
  v13 = v12;
  v14 = CFGetTypeID(v12);
  if (v14 != CFNumberGetTypeID())
    return 4294956445;
  CFNumberGetValue(v13, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr != (_DWORD)v42)
    return 4294956445;
  v15 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("data"));
  if (v15)
  {
    v16 = v15;
    v17 = CFGetTypeID(v15);
    if (v17 == CFDataGetTypeID())
    {
      BytePtr = CFDataGetBytePtr(v16);
      Length = CFDataGetLength(v16);
      if (Length >= 1)
      {
        v20 = &BytePtr[Length];
        do
        {
          v21 = (ausdk::AUScope *)sub_1A3997CB8((uint64_t)this, bswap32(*(_DWORD *)BytePtr));
          BytePtr = ausdk::AUScope::RestoreState(v21, BytePtr + 4);
        }
        while (BytePtr < v20);
      }
    }
  }
  v22 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("name"));
  v23 = this[46];
  if (v23)
    CFRelease(v23);
  if (!v22 || (v24 = CFGetTypeID(v22), v24 != CFStringGetTypeID()))
    v22 = CFSTR("Untitled");
  this[46] = (AudioComponentInstance)v22;
  *((_DWORD *)this + 90) = -1;
  CFRetain(v22);
  (*((void (**)(AudioComponentInstance *, uint64_t, _QWORD, _QWORD))*this + 54))(this, 36, 0, 0);
  v25 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("render-quality"));
  if (v25)
  {
    v26 = v25;
    v27 = CFGetTypeID(v25);
    if (v27 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v26, kCFNumberSInt32Type, &valuePtr);
      ausdk::AUBase::DispatchSetProperty((const void **)this, 26, 0, 0, &valuePtr, 4);
    }
  }
  result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("element-name"));
  if (result)
  {
    v28 = (const __CFDictionary *)result;
    v29 = CFGetTypeID((CFTypeRef)result);
    if (v29 == CFDictionaryGetTypeID())
    {
      v30 = 0;
      do
      {
        v31 = CFStringCreateWithFormat(0, 0, CFSTR("%u"), v30);
        v32 = (const __CFDictionary *)CFDictionaryGetValue(v28, v31);
        if (v32)
        {
          v33 = v32;
          v34 = CFGetTypeID(v32);
          if (v34 == CFDictionaryGetTypeID())
          {
            v35 = (ausdk::AUScope *)sub_1A3997CB8((uint64_t)this, v30);
            ausdk::AUScope::RestoreElementNames(v35, v33, &v38);
            v36 = v38;
            v37 = v39;
            if (v38 != v39)
            {
              do
                (*((void (**)(AudioComponentInstance *, uint64_t, uint64_t, _QWORD))*this + 54))(this, 30, v30, *v36++);
              while (v36 != v37);
              v36 = v38;
            }
            if (v36)
            {
              v39 = v36;
              operator delete(v36);
            }
          }
        }
        CFRelease(v31);
        result = 0;
        v30 = (v30 + 1);
      }
      while ((_DWORD)v30 != 4);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1A399B0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ausdk::AUBase::GetPresets(ausdk::AUBase *this, const __CFArray **a2)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::NewFactoryPresetSet(ausdk::AUBase *this, const AUPreset *a2)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::NewCustomPresetSet(CFTypeRef *this, const AUPreset *a2)
{
  AUPreset *v4;

  v4 = (AUPreset *)(this + 45);
  CFRelease(this[46]);
  *v4 = *a2;
  CFRetain(this[46]);
  return 0;
}

uint64_t ausdk::AUBase::SetAFactoryPresetAsCurrent(CFTypeRef *this, const AUPreset *a2)
{
  BOOL v2;
  uint64_t v3;
  AUPreset *v6;

  v2 = a2->presetNumber < 0 || a2->presetName == 0;
  v3 = !v2;
  if (!v2)
  {
    v6 = (AUPreset *)(this + 45);
    CFRelease(this[46]);
    *v6 = *a2;
    CFRetain(this[46]);
  }
  return v3;
}

BOOL ausdk::AUBase::HasIcon(ausdk::AUBase *this)
{
  const void *v1;
  const void *v2;

  v1 = (const void *)(*(uint64_t (**)(ausdk::AUBase *))(*(_QWORD *)this + 336))(this);
  v2 = v1;
  if (v1)
    CFRelease(v1);
  return v2 != 0;
}

uint64_t ausdk::AUBase::CopyIconLocation(ausdk::AUBase *this)
{
  return 0;
}

uint64_t ausdk::AUBase::GetParameterList(ausdk::AUBase *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v6 = (_QWORD *)sub_1A3997CB8((uint64_t)this, a2);
  v7 = v6[5];
  if (v7)
  {
    LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    if ((_DWORD)v8)
      goto LABEL_3;
LABEL_14:
    v10 = 0;
    goto LABEL_15;
  }
  v8 = (v6[3] - v6[2]) >> 3;
  if (!(_DWORD)v8)
    goto LABEL_14;
LABEL_3:
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = v8;
  do
  {
    v13 = v6[5];
    if (v13)
      v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v9);
    else
      v14 = *(_QWORD *)(v6[2] + 8 * v9);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    if (v15 > v10)
    {
      v11 = v14;
      v10 = v15;
    }
    ++v9;
  }
  while (v12 != v9);
  if (a3 && v11)
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v11 + 24))(v11, a3);
LABEL_15:
  *a4 = v10;
  return 0;
}

uint64_t ausdk::AUBase::GetParameterInfo(ausdk::AUBase *this, unsigned int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  return 4294956418;
}

uint64_t ausdk::AUBase::GetParameterValueStrings(ausdk::AUBase *this, unsigned int a2, unsigned int a3, const __CFArray **a4)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::GetParameterHistoryInfo(ausdk::AUBase *this, unsigned int a2, unsigned int a3, float *a4, float *a5)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::CopyClumpName(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, const __CFString **a5)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::SetNumberOfElements(ausdk::AUBase *this, unsigned int a2, unsigned int a3)
{
  ausdk::AUScope *v4;

  if (!a2 && a3 != 1)
    sub_1A399A644(-10866);
  v4 = (ausdk::AUScope *)sub_1A3997CB8((uint64_t)this, a2);
  return ausdk::AUScope::SetNumberOfElements(v4, a3);
}

uint64_t ausdk::AUBase::CreateElement@<X0>(ausdk::AUBase *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;

  switch(a2)
  {
    case 0:
    case 3:
    case 4:
      result = operator new();
      v6 = result;
      *(_QWORD *)result = &unk_1E4A9D398;
      *(_QWORD *)(result + 8) = this;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 40) = 0;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      break;
    case 1:
      v6 = operator new();
      result = (uint64_t)ausdk::AUIOElement::AUIOElement((ausdk::AUIOElement *)v6, this);
      *(_QWORD *)v6 = &unk_1E4A9C9D8;
      *(_OWORD *)(v6 + 172) = 0u;
      *(_OWORD *)(v6 + 188) = 0u;
      *(_DWORD *)(v6 + 204) = 0;
      break;
    case 2:
      v6 = operator new();
      result = ausdk::AUOutputElement::AUOutputElement((ausdk::AUOutputElement *)v6, this);
      break;
    default:
      sub_1A399A644(-10866);
  }
  *a3 = v6;
  return result;
}

void sub_1A399B458(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A8596C28](v1, 0x10E1C409BA96DF7);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AUBase::GetLoggingString(ausdk::AUBase *this)
{
  uint64_t result;

  result = (uint64_t)this + 440;
  if (*((char *)this + 463) < 0)
    return *(_QWORD *)result;
  return result;
}

_QWORD *sub_1A399B4AC(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1A395F6D4(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1A399B504(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef sub_1A399B520(CFTypeRef *a1)
{
  CFTypeRef result;

  result = *a1;
  if (result)
    return CFRetain(result);
  return result;
}

_QWORD *sub_1A399B540(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1A399B5B4(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_1A399B598(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1A399B5B4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    sub_1A395516C();
  result = (char *)sub_1A395ED34((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void sub_1A399B5F4(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 *v19;
  char v20;
  BOOL v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

LABEL_1:
  v10 = a2 - 2;
  v11 = a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = ((char *)a2 - (char *)v11) >> 5;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(a2 - 2, v11))
        {
          v24 = *v11;
          v26 = v11[1];
          v22 = *(a2 - 1);
          *v11 = *v10;
          v11[1] = v22;
          *v10 = v24;
          *(a2 - 1) = v26;
        }
        return;
      case 3uLL:
        sub_1A399BAC4(v11, v11 + 2, a2 - 2, a3);
        return;
      case 4uLL:
        sub_1A399BFD4((uint64_t)v11, v11 + 2, v11 + 4, a2 - 2, a3);
        return;
      case 5uLL:
        sub_1A399C08C((uint64_t)v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2, a3);
        return;
      default:
        if (v14 <= 767)
        {
          if ((a5 & 1) != 0)
            sub_1A399B948((uint64_t)v11, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            sub_1A399BA14((uint64_t)v11, a2, a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = &v11[2 * (v15 >> 1)];
          if ((unint64_t)v14 <= 0x1000)
          {
            sub_1A399BAC4(&v11[2 * (v15 >> 1)], v11, a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_1A399BAC4(v11, &v11[2 * (v15 >> 1)], a2 - 2, a3);
            sub_1A399BAC4(v11 + 2, v17 - 2, a2 - 4, a3);
            sub_1A399BAC4(v11 + 4, &v11[2 * v16 + 2], a2 - 6, a3);
            sub_1A399BAC4(v17 - 2, v17, &v11[2 * v16 + 2], a3);
            v23 = *v11;
            v25 = v11[1];
            v18 = v17[1];
            *v11 = *v17;
            v11[1] = v18;
            *v17 = v23;
            v17[1] = v25;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(v11 - 2, v11) & 1) == 0)
          {
            v11 = sub_1A399BBC0(v11, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v19 = sub_1A399BCEC(v11, a2, a3);
          if ((v20 & 1) == 0)
            goto LABEL_14;
          v21 = sub_1A399BE1C(v11, v19, a3);
          v11 = v19 + 2;
          if (!sub_1A399BE1C(v19 + 2, a2, a3))
          {
            v12 = v13 + 1;
            if (v21)
              continue;
LABEL_14:
            sub_1A399B5F4(a1, v19, a3, -v13, a5 & 1);
            v11 = v19 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          sub_1A399C16C(v11, a2, a2, (unsigned int (**)(__int128 *, __int128 *))a3, a6);
        return;
    }
  }
}

uint64_t sub_1A399B948(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  if ((_OWORD *)result != a2)
  {
    v20 = v3;
    v21 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 32);
    if ((_OWORD *)(result + 32) != a2)
    {
      v9 = 0;
      v10 = (_OWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v12 = v10[1];
          v18 = *v10;
          v19 = v12;
          v13 = v9;
          while (1)
          {
            v14 = (char *)v6 + v13;
            v15 = *(_OWORD *)((char *)v6 + v13 + 16);
            *((_OWORD *)v14 + 2) = *(_OWORD *)((char *)v6 + v13);
            *((_OWORD *)v14 + 3) = v15;
            if (!v13)
              break;
            v13 -= 32;
            result = (*a3)(&v18, (char *)v6 + v13);
            if ((result & 1) == 0)
            {
              v16 = (_OWORD *)((char *)v6 + v13 + 32);
              goto LABEL_10;
            }
          }
          v16 = v6;
LABEL_10:
          v17 = v19;
          *v16 = v18;
          v16[1] = v17;
        }
        v7 = v10 + 2;
        v9 += 32;
      }
      while (v10 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1A399BA14(uint64_t result, _OWORD *a2, uint64_t (**a3)(__int128 *, _OWORD *))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  if ((_OWORD *)result != a2)
  {
    v17 = v3;
    v18 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 32);
    if ((_OWORD *)(result + 32) != a2)
    {
      v9 = (_OWORD *)(result - 32);
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v11 = v6[1];
          v15 = *v6;
          v16 = v11;
          v12 = v9;
          do
          {
            v13 = v12[3];
            v12[4] = v12[2];
            v12[5] = v13;
            result = (*a3)(&v15, v12);
            v12 -= 2;
          }
          while ((result & 1) != 0);
          v14 = v16;
          v12[4] = v15;
          v12[5] = v14;
        }
        v7 = v6 + 2;
        v9 += 2;
      }
      while (v6 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1A399BAC4(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v14 = *a2;
    v13 = a2[1];
    v15 = a3[1];
    *a2 = *a3;
    a2[1] = v15;
    *a3 = v14;
    a3[1] = v13;
    if (!(*a4)(a2, a1))
      return 1;
    v17 = *a1;
    v16 = a1[1];
    v18 = a2[1];
    *a1 = *a2;
    a1[1] = v18;
    *a2 = v17;
    a2[1] = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v20 = *a1;
    v19 = a1[1];
    v21 = a2[1];
    *a1 = *a2;
    a1[1] = v21;
    *a2 = v20;
    a2[1] = v19;
    if (!(*a4)(a3, a2))
      return 1;
    v23 = *a2;
    v22 = a2[1];
    v24 = a3[1];
    *a2 = *a3;
    a2[1] = v24;
    *a3 = v23;
    a3[1] = v22;
    return 2;
  }
  v11 = *a1;
  v10 = a1[1];
  v12 = a3[1];
  *a1 = *a3;
  a1[1] = v12;
  *a3 = v11;
  a3[1] = v10;
  return 1;
}

__int128 *sub_1A399BBC0(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 v6;
  __int128 *v7;
  __int128 *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = a2;
  v6 = a1[1];
  v17 = *a1;
  v18 = v6;
  if (((*a3)(&v17, a2 - 2) & 1) != 0)
  {
    v7 = a1;
    do
      v7 += 2;
    while (((*a3)(&v17, v7) & 1) == 0);
  }
  else
  {
    v8 = a1 + 2;
    do
    {
      v7 = v8;
      if (v8 >= v4)
        break;
      v9 = (*a3)(&v17, v8);
      v8 = v7 + 2;
    }
    while (!v9);
  }
  if (v7 < v4)
  {
    do
      v4 -= 2;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  while (v7 < v4)
  {
    v10 = v7[1];
    v19 = *v7;
    v20 = v10;
    v11 = v4[1];
    *v7 = *v4;
    v7[1] = v11;
    v12 = v20;
    *v4 = v19;
    v4[1] = v12;
    do
      v7 += 2;
    while (!(*a3)(&v17, v7));
    do
      v4 -= 2;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  v13 = v7 - 2;
  if (v7 - 2 != a1)
  {
    v14 = *(v7 - 1);
    *a1 = *v13;
    a1[1] = v14;
  }
  v15 = v18;
  *v13 = v17;
  *(v7 - 1) = v15;
  return v7;
}

__int128 *sub_1A399BCEC(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  __int128 v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v6 = 0;
  v7 = a1[1];
  v18 = *a1;
  v19 = v7;
  do
    v6 += 2;
  while (((*a3)(&a1[v6], &v18) & 1) != 0);
  v8 = &a1[v6];
  v9 = &a1[v6 - 2];
  if (v6 == 2)
  {
    do
    {
      if (v8 >= a2)
        break;
      a2 -= 2;
    }
    while (((*a3)(a2, &v18) & 1) == 0);
  }
  else
  {
    do
      a2 -= 2;
    while (!(*a3)(a2, &v18));
  }
  if (v8 < a2)
  {
    v10 = &a1[v6];
    v11 = a2;
    do
    {
      v13 = v10[1];
      v20 = *v10;
      v12 = v20;
      v21 = v13;
      v14 = v11[1];
      *v10 = *v11;
      v10[1] = v14;
      *v11 = v12;
      v11[1] = v13;
      do
        v10 += 2;
      while (((*a3)(v10, &v18) & 1) != 0);
      do
        v11 -= 2;
      while (!(*a3)(v11, &v18));
    }
    while (v10 < v11);
    v9 = v10 - 2;
  }
  if (v9 != a1)
  {
    v15 = v9[1];
    *a1 = *v9;
    a1[1] = v15;
  }
  v16 = v19;
  *v9 = v18;
  v9[1] = v16;
  return v9;
}

BOOL sub_1A399BE1C(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v6 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 2;
      if ((*a3)(a2 - 2, a1))
      {
        v10 = *a1;
        v9 = a1[1];
        v11 = *(a2 - 1);
        *a1 = *v8;
        a1[1] = v11;
        *v8 = v10;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_1A399BAC4(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_1A399BFD4((uint64_t)a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_1A399C08C((uint64_t)a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v12 = a1 + 4;
      sub_1A399BAC4(a1, a1 + 2, a1 + 4, a3);
      v13 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v13, v12))
    {
      v16 = v13[1];
      v22 = *v13;
      v23 = v16;
      v17 = v14;
      while (1)
      {
        v18 = (__int128 *)((char *)a1 + v17);
        v19 = *(__int128 *)((char *)a1 + v17 + 80);
        v18[6] = *(__int128 *)((char *)a1 + v17 + 64);
        v18[7] = v19;
        if (v17 == -64)
          break;
        v17 -= 32;
        if (((*a3)(&v22, v18 + 2) & 1) == 0)
        {
          v20 = (__int128 *)((char *)a1 + v17 + 96);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      v21 = v23;
      *v20 = v22;
      v20[1] = v21;
      if (++v15 == 8)
        return v13 + 2 == a2;
    }
    v12 = v13;
    v14 += 32;
    v13 += 2;
    if (v13 == a2)
      return 1;
  }
}

__n128 sub_1A399BFD4(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  sub_1A399BAC4((__int128 *)a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    v12 = *a3;
    v11 = a3[1];
    v13 = a4[1];
    *a3 = *a4;
    a3[1] = v13;
    *a4 = v12;
    a4[1] = v11;
    if ((*a5)(a3, a2))
    {
      v15 = *a2;
      v14 = a2[1];
      v16 = a3[1];
      *a2 = *a3;
      a2[1] = v16;
      *a3 = v15;
      a3[1] = v14;
      if ((*a5)(a2, (__int128 *)a1))
      {
        v17 = *(_OWORD *)a1;
        result = *(__n128 *)(a1 + 16);
        v18 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v18;
        *a2 = v17;
        a2[1] = (__int128)result;
      }
    }
  }
  return result;
}

__n128 sub_1A399C08C(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v12 = sub_1A399BFD4(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(__int128 *, __int128 *, __n128))*a6)(a5, a4, v12))
  {
    v15 = *a4;
    v14 = a4[1];
    v16 = a5[1];
    *a4 = *a5;
    a4[1] = v16;
    *a5 = v15;
    a5[1] = v14;
    if ((*a6)(a4, a3))
    {
      v18 = *a3;
      v17 = a3[1];
      v19 = a4[1];
      *a3 = *a4;
      a3[1] = v19;
      *a4 = v18;
      a4[1] = v17;
      if ((*a6)(a3, a2))
      {
        v21 = *a2;
        v20 = a2[1];
        v22 = a3[1];
        *a2 = *a3;
        a2[1] = v22;
        *a3 = v21;
        a3[1] = v20;
        if ((*a6)(a2, (__int128 *)a1))
        {
          v23 = *(_OWORD *)a1;
          result = *(__n128 *)(a1 + 16);
          v24 = a2[1];
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 16) = v24;
          *a2 = v23;
          a2[1] = (__int128)result;
        }
      }
    }
  }
  return result;
}

__int128 *sub_1A399C16C(__int128 *a1, __int128 *a2, __int128 *a3, unsigned int (**a4)(__int128 *, __int128 *), __n128 a5)
{
  __int128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 *v29;
  __int128 v30;
  __int128 v31;

  if (a1 != a2)
  {
    v7 = a2;
    v9 = (char *)a2 - (char *)a1;
    v10 = ((char *)a2 - (char *)a1) >> 5;
    if ((char *)a2 - (char *)a1 >= 33)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = &a1[2 * v11];
      do
      {
        a5.n128_f64[0] = sub_1A399C33C((uint64_t)a1, a4, v10, v13);
        v13 -= 2;
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (((unsigned int (*)(__int128 *, __int128 *, __n128))*a4)(v15, a1, a5))
        {
          v17 = *v15;
          v16 = v15[1];
          v18 = a1[1];
          *v15 = *a1;
          v15[1] = v18;
          *a1 = v17;
          a1[1] = v16;
          a5.n128_f64[0] = sub_1A399C33C((uint64_t)a1, a4, v10, a1);
        }
        v15 += 2;
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 < 33)
    {
      return v14;
    }
    else
    {
      v29 = v14;
      v19 = (unint64_t)v9 >> 5;
      do
      {
        v20 = 0;
        v30 = *a1;
        v31 = a1[1];
        v21 = a1;
        do
        {
          v22 = &v21[2 * v20 + 2];
          v23 = (2 * v20) | 1;
          v24 = 2 * v20 + 2;
          if (v24 < v19 && (*a4)(&v21[2 * v20 + 2], &v21[2 * v20 + 4]))
          {
            v22 += 2;
            v23 = v24;
          }
          v25 = v22[1];
          *v21 = *v22;
          v21[1] = v25;
          v21 = v22;
          v20 = v23;
        }
        while (v23 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        v7 -= 2;
        if (v22 == v7)
        {
          *v22 = v30;
          v22[1] = v31;
        }
        else
        {
          v26 = v7[1];
          *v22 = *v7;
          v22[1] = v26;
          *v7 = v30;
          v7[1] = v31;
          sub_1A399C46C((uint64_t)a1, (uint64_t)(v22 + 2), (uint64_t (**)(__int128 *, __int128 *))a4, ((char *)(v22 + 2) - (char *)a1) >> 5);
        }
      }
      while (v19-- > 2);
      return v29;
    }
  }
  return a3;
}

double sub_1A399C33C(uint64_t a1, unsigned int (**a2)(__int128 *, __int128 *), uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  double result;
  __int128 v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v25 = v4;
    v26 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - a1) >> 5)
    {
      v12 = ((uint64_t)a4 - a1) >> 4;
      v13 = v12 + 1;
      v14 = (__int128 *)(a1 + 32 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 2))
      {
        v14 += 2;
        v13 = v15;
      }
      if ((((uint64_t (*)(__int128 *, __int128 *))*a2)(v14, v7) & 1) == 0)
      {
        v17 = v7[1];
        v23 = *v7;
        v24 = v17;
        do
        {
          v18 = v14;
          v19 = v14[1];
          *v7 = *v14;
          v7[1] = v19;
          if (v9 < v13)
            break;
          v20 = (2 * v13) | 1;
          v14 = (__int128 *)(a1 + 32 * v20);
          v21 = 2 * v13 + 2;
          if (v21 < a3)
          {
            if ((*a2)((__int128 *)(a1 + 32 * v20), v14 + 2))
            {
              v14 += 2;
              v20 = v21;
            }
          }
          v7 = v18;
          v13 = v20;
        }
        while (!(*a2)(v14, &v23));
        result = *(double *)&v23;
        v22 = v24;
        *v18 = v23;
        v18[1] = v22;
      }
    }
  }
  return result;
}

double sub_1A399C46C(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  double result;
  __int128 v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v19 = v4;
    v20 = v5;
    v9 = v6 >> 1;
    v10 = (__int128 *)(a1 + 32 * (v6 >> 1));
    v11 = (__int128 *)(a2 - 32);
    if ((*a3)(v10, (__int128 *)(a2 - 32)))
    {
      v13 = v11[1];
      v17 = *v11;
      v18 = v13;
      do
      {
        v14 = v10;
        v15 = v10[1];
        *v11 = *v10;
        v11[1] = v15;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (__int128 *)(a1 + 32 * v9);
        v11 = v14;
      }
      while (((*a3)(v10, &v17) & 1) != 0);
      result = *(double *)&v17;
      v16 = v18;
      *v14 = v17;
      v14[1] = v16;
    }
  }
  return result;
}

uint64_t sub_1A399C510(uint64_t a1, unsigned int a2)
{
  if (!*(_BYTE *)(a1 + 168))
    sub_1A399A644(-10851);
  return ausdk::AUBufferList::PrepareBuffer((ausdk::AUBufferList *)(a1 + 144), (const AudioStreamBasicDescription *)(a1 + 80), a2);
}

void *sub_1A399C540(uint64_t a1, unsigned int *__dst)
{
  void *exception;

  if (!*(_DWORD *)a1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1A3AB2564();
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A39532E0((uint64_t)exception, -1);
    __cxa_throw(exception, (struct type_info *)&unk_1E4A9C228, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 8) + 48), (16 * *__dst) | 8);
}

void sub_1A399C5C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A399C5D4(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  unint64_t v5;

  v5 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (*a5)
    return sub_1A399C5F4(a1, a2, v5);
  else
    return sub_1A399C698((uint64_t *)a1, a2, v5);
}

uint64_t sub_1A399C5F4(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3)
      v4 = a3;
    else
      v4 = 64 - a2;
    v5 = (uint64_t)*a1++;
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      v7 = *a1++;
      v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t sub_1A399C698(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3)
      v4 = a3;
    else
      v4 = 64 - a2;
    v5 = *a1++;
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      v7 = *a1++;
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

unint64_t *sub_1A399C744(unint64_t *a1)
{
  unint64_t *i;
  unint64_t *j;
  unint64_t *k;

  for (i = (unint64_t *)atomic_load(a1); i; i = (unint64_t *)atomic_load(a1))
  {
    atomic_store(*i, a1);
    MEMORY[0x1A8596C28]();
  }
  for (j = (unint64_t *)atomic_load(a1 + 1); j; j = (unint64_t *)atomic_load(a1 + 1))
  {
    atomic_store(*j, a1 + 1);
    MEMORY[0x1A8596C28]();
  }
  for (k = (unint64_t *)atomic_load(a1 + 2); k; k = (unint64_t *)atomic_load(a1 + 2))
  {
    atomic_store(*k, a1 + 2);
    MEMORY[0x1A8596C28]();
  }
  return a1;
}

double sub_1A399C7F8(uint64_t a1)
{
  unint64_t *v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  double result;

  v1 = (unint64_t *)(a1 + 16);
LABEL_2:
  v2 = (unint64_t *)atomic_load(v1);
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v1);
      if ((unint64_t *)v3 != v2)
      {
        __clrex();
        goto LABEL_2;
      }
    }
    while (__stlxr(0, v1));
    v4 = *v2;
    if (*v2)
    {
      v5 = (unint64_t *)*v2;
      do
      {
        v6 = v5;
        v5 = (unint64_t *)*v5;
      }
      while (v5);
      while (1)
      {
        v7 = atomic_load(v1);
        *v6 = v7;
        while (1)
        {
          v8 = __ldaxr(v1);
          if (v8 != v7)
            break;
          if (!__stlxr(v4, v1))
            return result;
        }
        __clrex();
      }
    }
  }
  else
  {
    v9 = (_OWORD *)operator new();
    result = 0.0;
    *v9 = 0u;
    v9[1] = 0u;
  }
  return result;
}

void sub_1A399C894(const void **a1)
{
  const void *v1;

  v1 = *a1;
  if (v1)
    CFRelease(v1);
}

CFTypeRef sub_1A399C8B4(CFTypeRef *a1)
{
  CFTypeRef result;

  result = *a1;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_1A399C8D4(const void **a1)
{
  const void *v1;

  v1 = *a1;
  if (v1)
    CFRelease(v1);
}

void sub_1A399C8F4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_1A399C920(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1A399C980(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xEu);
}

void sub_1A399C9B0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x14u);
}

id TTSCurrentSiriVoice(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  BOOL v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  void *v39;
  _QWORD v41[5];
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  _QWORD v47[3];

  v47[2] = *MEMORY[0x1E0C80C00];
  v42 = 0;
  v43 = &v42;
  v44 = 0x2050000000;
  v5 = (void *)qword_1EE6D5818;
  v45 = qword_1EE6D5818;
  if (!qword_1EE6D5818)
  {
    v41[0] = MEMORY[0x1E0C809B0];
    v41[1] = 3221225472;
    v41[2] = sub_1A399D758;
    v41[3] = &unk_1E4A9FC10;
    v41[4] = &v42;
    sub_1A399D758((uint64_t)v41, a2, a3, a4, a5);
    v5 = (void *)v43[3];
  }
  v6 = objc_retainAutorelease(v5);
  _Block_object_dispose(&v42, 8);
  objc_msgSend_sharedPreferences(v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_outputVoice(v11, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_name(v16, v17, v18, v19, v20);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v25
    || (objc_msgSend_languageCode(v16, v21, v22, v23, v24),
        v26 = (void *)objc_claimAutoreleasedReturnValue(),
        v27 = v26 == 0,
        v26,
        v25,
        v27))
  {
    v39 = 0;
  }
  else
  {
    v46[0] = CFSTR("name");
    objc_msgSend_name(v16, v28, v29, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v47[0] = v32;
    v46[1] = CFSTR("languageCode");
    objc_msgSend_languageCode(v16, v33, v34, v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v47[1] = v37;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v38, (uint64_t)v47, (uint64_t)v46, 2);
    v39 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v39;
}

void sub_1A399CB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _TTSSelectedIdentifiersForSpeechSource(void *a1, int a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t isEqual;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  void *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;

  v7 = a1;
  v47 = 0;
  v48 = &v47;
  v49 = 0x2050000000;
  v8 = (void *)qword_1ED1B56B0;
  v50 = qword_1ED1B56B0;
  if (!qword_1ED1B56B0)
  {
    v42 = MEMORY[0x1E0C809B0];
    v43 = 3221225472;
    v44 = (uint64_t)sub_1A399D834;
    v45 = &unk_1E4A9FC10;
    v46 = &v47;
    sub_1A399D834((uint64_t)&v42, v3, v4, v5, v6);
    v8 = (void *)v48[3];
  }
  v9 = objc_retainAutorelease(v8);
  _Block_object_dispose(&v47, 8);
  objc_msgSend_sharedInstance(v9, v10, v11, v12, v13);
  v14 = objc_claimAutoreleasedReturnValue();
  v19 = (void *)v14;
  if (!a2)
    goto LABEL_14;
  v42 = 0;
  v43 = (uint64_t)&v42;
  v44 = 0x2020000000;
  v20 = (uint64_t *)qword_1EE6D5828;
  v45 = (void *)qword_1EE6D5828;
  if (!qword_1EE6D5828)
  {
    v21 = (void *)sub_1A399D888(v14, v15, v16, v17, v18);
    v20 = (uint64_t *)dlsym(v21, "AXSpeechSourceKeyVoiceOver");
    *(_QWORD *)(v43 + 24) = v20;
    qword_1EE6D5828 = (uint64_t)v20;
  }
  _Block_object_dispose(&v42, 8);
  if (!v20)
    sub_1A3AB3B6C(v22, v23, v24, v25, v26);
  isEqual = objc_msgSend_isEqual_(v7, v23, *v20, v25, v26);
  if ((_DWORD)isEqual)
  {
    isEqual = objc_msgSend_voiceOverEnabled(v19, v28, v29, v30, v31);
    if (!(_DWORD)isEqual)
      goto LABEL_15;
  }
  v42 = 0;
  v43 = (uint64_t)&v42;
  v44 = 0x2020000000;
  v32 = (uint64_t *)qword_1EE6D5830;
  v45 = (void *)qword_1EE6D5830;
  if (!qword_1EE6D5830)
  {
    v33 = (void *)sub_1A399D888(isEqual, v28, v29, v30, v31);
    v32 = (uint64_t *)dlsym(v33, "AXSpeechSourceKeySwitchControl");
    *(_QWORD *)(v43 + 24) = v32;
    qword_1EE6D5830 = (uint64_t)v32;
  }
  _Block_object_dispose(&v42, 8);
  if (!v32)
    sub_1A3AB3BE0(v34, v35, v36, v37, v38);
  if (objc_msgSend_isEqual_(v7, v35, *v32, v37, v38)
    && !objc_msgSend_switchControlEnabled(v19, v15, v39, v17, v18))
  {
LABEL_15:
    v40 = (void *)MEMORY[0x1E0C9AA60];
  }
  else
  {
LABEL_14:
    objc_msgSend_selectedSpeechVoiceIdentifiersForSourceKey_(v19, v15, (uint64_t)v7, v17, v18);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v40;
}

void sub_1A399CD78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id TTSSelectedActiveIdentifiersForSpeechSource(void *a1)
{
  return _TTSSelectedIdentifiersForSpeechSource(a1, 1);
}

id TTSSelectedIdentifiersForSpeechSource(void *a1)
{
  return _TTSSelectedIdentifiersForSpeechSource(a1, 0);
}

id TTSRosebudLogger()
{
  if (qword_1EE6D57C8 != -1)
    dispatch_once(&qword_1EE6D57C8, &unk_1E4A9F4A8);
  return (id)qword_1EE6D57C0;
}

void sub_1A399CDF0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Accessibility", "TTSRosebud");
  v1 = (void *)qword_1EE6D57C0;
  qword_1EE6D57C0 = (uint64_t)v0;

}

__CFString *TTSStringForSpeechFootprint(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return 0;
  else
    return off_1E4AA18B0[a1 - 1];
}

__CFString *TTSStringForResourceType(unint64_t a1)
{
  if (a1 > 0xA)
    return (__CFString *)0;
  else
    return *off_1E4AA18D8[a1];
}

id TTSChoseong_JongseongToHangul(void *a1)
{
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v1 = qword_1EE6D57D8;
  v5 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1EE6D57D8, &unk_1E4AA1798);
  objc_msgSend_objectForKey_((void *)qword_1EE6D57D0, v2, (uint64_t)v5, v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (!v6)
    v6 = v5;
  v8 = v6;

  return v8;
}

void sub_1A399CEFC()
{
  void *v0;

  v0 = (void *)qword_1EE6D57D0;
  qword_1EE6D57D0 = (uint64_t)&unk_1E4ABC9B8;

}

id AXSpeechReplaceJapaneseElongationCharactersIfNeeded(void *a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  const char *v18;
  void *v19;
  id v20;
  _QWORD v22[4];
  id v23;
  _QWORD *v24;
  _QWORD v25[5];
  id v26;

  v5 = a1;
  if (qword_1EE6D57E8 != -1)
    dispatch_once(&qword_1EE6D57E8, &unk_1E4AA17B8);
  v6 = (void *)MEMORY[0x1E0CB37A0];
  v7 = objc_msgSend_length(v5, v1, v2, v3, v4);
  objc_msgSend_stringWithCapacity_(v6, v8, v7, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x3032000000;
  v25[3] = sub_1A399D07C;
  v25[4] = sub_1A399D08C;
  v26 = 0;
  v16 = objc_msgSend_length(v5, v12, v13, v14, v15);
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = sub_1A399D094;
  v22[3] = &unk_1E4AA17E0;
  v24 = v25;
  v17 = v11;
  v23 = v17;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v5, v18, 0, v16, 2, v22);
  v19 = v23;
  v20 = v17;

  _Block_object_dispose(v25, 8);
  return v20;
}

void sub_1A399D04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A399D064()
{
  void *v0;

  v0 = (void *)qword_1EE6D57E0;
  qword_1EE6D57E0 = (uint64_t)&unk_1E4ABC9E0;

}

uint64_t sub_1A399D07C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1A399D08C(uint64_t a1)
{

}

void sub_1A399D094(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  v20 = a2;
  if (objc_msgSend_isEqualToString_(v20, v3, (uint64_t)CFSTR("ー"), v4, v5))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (v9)
    {
      objc_msgSend_objectForKey_((void *)qword_1EE6D57E0, v6, v9, v7, v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10;
      if (v10)
      {
        v12 = v10;

        v20 = v12;
      }

    }
  }
  objc_msgSend_appendString_(*(void **)(a1 + 32), v6, (uint64_t)v20, v7, v8);
  v17 = objc_msgSend_copy(v20, v13, v14, v15, v16);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v19 = *(void **)(v18 + 40);
  *(_QWORD *)(v18 + 40) = v17;

}

uint64_t TTSSupportsNeuralVoices()
{
  if (qword_1ED1B5C80 != -1)
    dispatch_once(&qword_1ED1B5C80, &unk_1E4AA1800);
  return byte_1ED1B5C70;
}

uint64_t sub_1A399D184()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  byte_1ED1B5C70 = result;
  return result;
}

uint64_t TTSSupportsNeuralAXVoices()
{
  if (qword_1ED1B5C80 != -1)
    dispatch_once(&qword_1ED1B5C80, &unk_1E4AA1800);
  if (byte_1ED1B5C70)
    return AXRuntimeCheck_VoiceOverSupportsNeuralVoices();
  else
    return 0;
}

uint64_t TTSUseCoreSynthesizerForAV()
{
  return 0;
}

uint64_t TTSUseCoreSynthesizerForTTS()
{
  return 1;
}

uint64_t TTSIsRunningInLoginWindow()
{
  return 0;
}

uint64_t TTSIsPersonalVoicePrivilagedProcess()
{
  if ((AXProcessIsAxctl() & 1) != 0
    || (AXCUProcessIsAXUIServer() & 1) != 0
    || (AXProcessIsLiveSpeech() & 1) != 0
    || (AXProcessMacOSSettingsExtension() & 1) != 0
    || (AXCUProcessIsPreferences() & 1) != 0)
  {
    return 1;
  }
  else
  {
    return AXProcessIsVoicebankingd();
  }
}

uint64_t TTSVoiceWithIdentifierIsAllowedToUseBufferCallbackAPIInCurrentProcess(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v6;

  if (!objc_msgSend_isPersonalVoiceIdentifier_(TTSAlternativeVoices, a2, a1, a4, a5)
    || (TTSIsPersonalVoicePrivilagedProcess() & 1) != 0)
  {
    return 1;
  }
  AXLogSpeechSynthesis();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    sub_1A3AB3C54(v6);

  return 0;
}

uint64_t TTSHasRBSAssertionEntitlement()
{
  if (qword_1EE6D57F8 != -1)
    dispatch_once(&qword_1EE6D57F8, &unk_1E4AA1820);
  return byte_1EE6D57F0;
}

void sub_1A399D300()
{
  void *v0;
  id v1;

  v0 = (void *)xpc_copy_entitlement_for_self();
  if (v0)
  {
    v1 = v0;
    byte_1EE6D57F0 = xpc_BOOL_get_value(v0);
    v0 = v1;
  }

}

uint64_t TTSMostPreferredLocaleOfLocales(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](MEMORY[0x1E0C99DC8], sel_mostPreferredLanguageOf_forUsage_options_, a1, 8, 1);
}

void TTSKickAudioComponentRegistry()
{
  if (qword_1EE6D5800 != -1)
    dispatch_once(&qword_1EE6D5800, &unk_1E4AA1840);
}

id sub_1A399D37C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (id)objc_msgSend_sharedAudioUnitComponentManager(MEMORY[0x1E0C89B20], a2, a3, a4, a5);
}

double TTSSpeechRateToNashvilleRate(double a1)
{
  if (a1 >= 0.5)
    return (a1 + -0.5 + a1 + -0.5) * 2.9 + 1.0;
  else
    return (1.0 - (0.5 - a1 + 0.5 - a1)) * 0.9 + 0.1;
}

_opaque_pthread_t *_GetScheduledPriority(_opaque_pthread_t *result, int a2)
{
  _opaque_pthread_t *v3;
  thread_inspect_t v4;
  thread_inspect_t v5;
  thread_inspect_t v6;
  thread_inspect_t v7;
  mach_msg_type_number_t thread_info_outCnt;
  integer_t v9[4];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  integer_t thread_info_out[4];
  __int128 v14;
  uint64_t v15;

  if (result)
  {
    v3 = result;
    v15 = 0;
    *(_OWORD *)thread_info_out = 0u;
    v14 = 0u;
    *(_OWORD *)v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    v12 = 0;
    thread_info_outCnt = 10;
    v4 = pthread_mach_thread_np(result);
    thread_info(v4, 3u, thread_info_out, &thread_info_outCnt);
    switch(DWORD1(v14))
    {
      case 4:
        thread_info_outCnt = 4;
        v6 = pthread_mach_thread_np(v3);
        thread_info(v6, 0xCu, (thread_info_t)&v11 + 2, &thread_info_outCnt);
        if (a2 || !(_DWORD)v12)
          return (_opaque_pthread_t *)HIDWORD(v11);
        else
          return (_opaque_pthread_t *)HIDWORD(v12);
      case 2:
        thread_info_outCnt = 5;
        v7 = pthread_mach_thread_np(v3);
        thread_info(v7, 0xBu, (thread_info_t)&v10 + 1, &thread_info_outCnt);
        if (a2 || !(_DWORD)v11)
          return (_opaque_pthread_t *)DWORD2(v10);
        else
          return (_opaque_pthread_t *)DWORD1(v11);
      case 1:
        thread_info_outCnt = 5;
        v5 = pthread_mach_thread_np(v3);
        thread_info(v5, 0xAu, v9, &thread_info_outCnt);
        if (a2)
          return (_opaque_pthread_t *)v9[1];
        else
          return (_opaque_pthread_t *)v9[2];
      default:
        return 0;
    }
  }
  return result;
}

BOOL TTSSetThreadPriorityHigh(int a1)
{
  _opaque_pthread_t *v2;
  unsigned int ScheduledPriority;
  int v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  thread_act_t v13;
  kern_return_t v14;
  _opaque_pthread_t *v15;
  _opaque_pthread_t *v16;
  NSObject *v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  sched_param v27;
  int v28;
  integer_t policy_info;

  pthread_once(&stru_1EE6D25A8, sub_1A399D644);
  v2 = pthread_self();
  ScheduledPriority = _GetScheduledPriority(v2, 0);
  if (a1)
    v4 = 97;
  else
    v4 = dword_1EE6D25B8;
  v5 = v4 - ScheduledPriority;
  policy_info = v4 - ScheduledPriority;
  AXTTSLogCommon();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    sub_1A3AB3CF0(v5, v6, v7, v8, v9, v10, v11, v12);

  v13 = MEMORY[0x1A8596F70]();
  v14 = thread_policy_set(v13, 3u, &policy_info, 1u);
  v28 = 0;
  v27 = 0;
  v15 = pthread_self();
  pthread_getschedparam(v15, &v28, &v27);
  v27.sched_priority = v4;
  v16 = pthread_self();
  pthread_setschedparam(v16, 4, &v27);
  AXTTSLogCommon();
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG);
  if (v14)
  {
    if (v18)
      sub_1A3AB3CC0(v17, v19, v20, v21, v22, v23, v24, v25);
  }
  else if (v18)
  {
    sub_1A3AB3C90(v17, v19, v20, v21, v22, v23, v24, v25);
  }

  return v14 == 0;
}

void sub_1A399D644()
{
  _opaque_pthread_t *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = pthread_self();
  dword_1EE6D25B8 = _GetScheduledPriority(v0, 0);
  AXTTSLogCommon();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
    sub_1A3AB3D54(v1, v2, v3, v4, v5, v6, v7, v8);

}

id TTSLocString(void *a1)
{
  uint64_t v1;
  const char *v2;
  id v3;
  void *v4;

  v1 = qword_1EE6D5810;
  v3 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1EE6D5810, &unk_1E4AA1860);
  objc_msgSend_localizedStringForKey_value_table_((void *)qword_1EE6D5808, v2, (uint64_t)v3, (uint64_t)&stru_1E4AA5CE8, (uint64_t)CFSTR("Localizable"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1A399D710()
{
  void *v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v0 = (void *)MEMORY[0x1E0CB34D0];
  v1 = objc_opt_class();
  objc_msgSend_bundleForClass_(v0, v2, v1, v3, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)qword_1EE6D5808;
  qword_1EE6D5808 = v5;

}

Class sub_1A399D758(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Class result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  if (!qword_1EE6D5820)
  {
    v12 = xmmword_1E4AA1880;
    v13 = 0;
    qword_1EE6D5820 = _sl_dlopen();
  }
  if (!qword_1EE6D5820)
    sub_1A3AB3DC4(&v11, a2, a3, a4, a5);
  result = objc_getClass("AFPreferences");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1A3AB3E40((uint64_t)result, v7, v8, v9, v10);
  qword_1EE6D5818 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1A399D834(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Class result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1A399D888(a1, a2, a3, a4, a5);
  result = objc_getClass("AXSettings");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1A3AB3EB8((uint64_t)result, v7, v8, v9, v10);
  qword_1ED1B56B0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1A399D888(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  if (!qword_1ED1B5678)
  {
    v7 = xmmword_1E4AA1898;
    v8 = 0;
    qword_1ED1B5678 = _sl_dlopen();
  }
  if (!qword_1ED1B5678)
    sub_1A3AB3F30(&v6, a2, a3, a4, a5);
  return qword_1ED1B5678;
}

void sub_1A399D930(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

void ausdk::AUElement::UseIndexedParameters(ausdk::AUElement *this, unsigned int a2)
{
  sub_1A399D970((_QWORD *)this + 6, a2);
  *((_BYTE *)this + 40) = 1;
}

void sub_1A399D970(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(a1[1] - *a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      a1[1] = *a1 + 4 * a2;
  }
  else
  {
    sub_1A399ECA4((uint64_t)a1, a2 - v2);
  }
}

BOOL ausdk::AUElement::HasParameterID(ausdk::AUElement *this, unsigned int a2)
{
  if (*((_BYTE *)this + 40))
    return a2 < (unint64_t)((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 2);
  else
    return *((_QWORD *)this + 3) != (_QWORD)sub_1A399D9F0((char **)this + 2, a2);
}

char *sub_1A399D9F0(char **a1, unsigned int a2)
{
  char *result;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;

  v3 = *a1;
  result = a1[1];
  if (result != v3)
  {
    v4 = (result - v3) >> 3;
    do
    {
      v5 = v4 >> 1;
      v6 = &v3[8 * (v4 >> 1)];
      v8 = *(_DWORD *)v6;
      v7 = v6 + 8;
      v4 += ~(v4 >> 1);
      if (v8 < a2)
        v3 = v7;
      else
        v4 = v5;
    }
    while (v4);
  }
  if (v3 != result && *(_DWORD *)v3 == a2)
    return v3;
  return result;
}

float ausdk::AUElement::GetParameter(char **this, unsigned int a2)
{
  char *v3;
  unsigned int *v4;
  char *v5;
  void *exception;

  if (!*((_BYTE *)this + 40))
  {
    v5 = sub_1A399D9F0(this + 2, a2);
    if (this[3] != v5)
    {
      v4 = (unsigned int *)(v5 + 4);
      return COERCE_FLOAT(atomic_load(v4));
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1A3AB3FB4();
LABEL_12:
    exception = __cxa_allocate_exception(0x18uLL);
    sub_1A39532E0((uint64_t)exception, -10878);
    __cxa_throw(exception, (struct type_info *)&unk_1E4A9C228, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v3 = this[6];
  if (a2 >= (unint64_t)((this[7] - v3) >> 2))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1A3AB3FB4();
    goto LABEL_12;
  }
  v4 = (unsigned int *)&v3[4 * a2];
  return COERCE_FLOAT(atomic_load(v4));
}

void sub_1A399DB14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ausdk::AUElement::SetParameter(ausdk::AUElement *this, unsigned int a2, float a3, char a4)
{
  uint64_t v7;
  unsigned int *v8;
  char *v10;
  char *v11;
  ausdk::AUBase *v12;
  void *exception;
  _QWORD v14[2];
  float v15;

  if (*((_BYTE *)this + 40))
  {
    v7 = *((_QWORD *)this + 6);
    if (a2 >= (unint64_t)((*((_QWORD *)this + 7) - v7) >> 2))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        sub_1A3AB3FB4();
      exception = __cxa_allocate_exception(0x18uLL);
      sub_1A39532E0((uint64_t)exception, -10878);
      __cxa_throw(exception, (struct type_info *)&unk_1E4A9C228, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v8 = (unsigned int *)(v7 + 4 * a2);
    goto LABEL_6;
  }
  v10 = (char *)this + 16;
  v11 = sub_1A399D9F0((char **)this + 2, a2);
  if (*((char **)this + 3) != v11)
  {
    v8 = (unsigned int *)(v11 + 4);
LABEL_6:
    atomic_store(LODWORD(a3), v8);
    return;
  }
  v12 = (ausdk::AUBase *)*((_QWORD *)this + 1);
  if (!*((_BYTE *)v12 + 17) || (a4 & 1) != 0)
  {
    v15 = a3;
    v14[0] = v10;
    v14[1] = a2;
    sub_1A399DC60((uint64_t)v14, (unsigned int *)&v15);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_1A3AB401C(v12, a2);
  }
}

void sub_1A399DC4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A399DC60(uint64_t a1, unsigned int *a2)
{
  uint64_t *v3;
  unsigned int v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD v16[2];

  v3 = *(uint64_t **)a1;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = (_DWORD *)*v3;
  v6 = (_DWORD *)v3[1];
  if (v6 == (_DWORD *)*v3)
  {
    v5 = (_DWORD *)v3[1];
  }
  else
  {
    v7 = ((uint64_t)v6 - *v3) >> 3;
    do
    {
      v8 = v7 >> 1;
      v9 = &v5[2 * (v7 >> 1)];
      v11 = *v9;
      v10 = v9 + 2;
      v7 += ~(v7 >> 1);
      if (v11 < v4)
        v5 = v10;
      else
        v7 = v8;
    }
    while (v7);
  }
  if (v6 == v5 || *v5 != v4)
  {
    v16[0] = *(_DWORD *)(a1 + 8);
    v14 = atomic_load(a2);
    v16[1] = v14;
    sub_1A399EE6C(v3, (uint64_t)v5, v16);
  }
  else
  {
    v12 = v5 + 1;
    if (v12 != a2)
    {
      v13 = atomic_load(a2);
      atomic_store(v13, v12);
    }
  }
  return a1;
}

void ausdk::AUElement::SetScheduledEvent(ausdk::AUElement *this, unsigned int a2, const AudioUnitParameterEvent *a3, unsigned int a4, unsigned int a5, char a6)
{
  if (a3->eventType == kParameterEvent_Immediate)
  {
    ausdk::AUElement::SetParameter(this, a2, a3->eventValues.immediate.value, a6);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    sub_1A3AB40B4((uint64_t)this);
  }
}

uint64_t ausdk::AUElement::GetParameterList(uint64_t this, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;

  if (*(_BYTE *)(this + 40))
  {
    v2 = *(_QWORD *)(this + 56) - *(_QWORD *)(this + 48);
    if (v2)
    {
      v3 = 0;
      v4 = 4 * (v2 >> 2);
      do
      {
        a2[v3] = v3;
        ++v3;
        v4 -= 4;
      }
      while (v4);
    }
  }
  else
  {
    v5 = *(unsigned int **)(this + 16);
    v6 = *(unsigned int **)(this + 24);
    while (v5 != v6)
    {
      v7 = *v5;
      v5 += 2;
      *a2++ = v7;
    }
  }
  return this;
}

UInt8 *ausdk::AUElement::SaveState(ausdk::AUElement *this, uint64_t a2, CFDataRef theData)
{
  CFIndex Length;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  UInt8 *result;
  UInt8 bytes[4];
  UInt8 v18[4];
  _OWORD v19[3];
  CFTypeRef v20[2];
  CFTypeRef cf[2];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  *(_OWORD *)cf = 0u;
  v22 = 0u;
  *(_OWORD *)v20 = 0u;
  memset(v19, 0, sizeof(v19));
  Length = CFDataGetLength(theData);
  *(_DWORD *)bytes = 0;
  CFDataAppendBytes(theData, bytes, 4);
  if (*((_BYTE *)this + 40))
  {
    v7 = *((_QWORD *)this + 7) - *((_QWORD *)this + 6);
    if ((v7 & 0x3FFFFFFFCLL) != 0)
    {
      v8 = 0;
      v9 = 0;
      v10 = (v7 >> 2);
      do
      {
        v11 = atomic_load((unsigned int *)(*((_QWORD *)this + 6) + 4 * v8));
        if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, _OWORD *))(**((_QWORD **)this + 1) + 256))(*((_QWORD *)this + 1), a2, v8, v19))
        {
          goto LABEL_5;
        }
        if ((v23 & 0x10) != 0)
        {
          if (cf[1])
            CFRelease(cf[1]);
          if ((_DWORD)v22 == 26 && v20[1])
            CFRelease(v20[1]);
        }
        if ((v23 & 0xA000) == 0)
        {
LABEL_5:
          *(_DWORD *)v18 = bswap32(v8);
          CFDataAppendBytes(theData, v18, 4);
          *(_DWORD *)v18 = bswap32(v11);
          CFDataAppendBytes(theData, v18, 4);
          ++v9;
        }
        ++v8;
      }
      while (v10 != v8);
      goto LABEL_29;
    }
LABEL_28:
    v9 = 0;
    goto LABEL_29;
  }
  v12 = (unsigned int *)*((_QWORD *)this + 2);
  v13 = (unsigned int *)*((_QWORD *)this + 3);
  if (v12 == v13)
    goto LABEL_28;
  v9 = 0;
  do
  {
    v14 = *v12;
    v15 = atomic_load(v12 + 1);
    if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, _OWORD *))(**((_QWORD **)this + 1) + 256))(*((_QWORD *)this + 1), a2, v14, v19))
    {
      goto LABEL_18;
    }
    if ((v23 & 0x10) != 0)
    {
      if (cf[1])
        CFRelease(cf[1]);
      if ((_DWORD)v22 == 26 && v20[1])
        CFRelease(v20[1]);
    }
    if ((v23 & 0xA000) == 0)
    {
LABEL_18:
      *(_DWORD *)v18 = bswap32(v14);
      CFDataAppendBytes(theData, v18, 4);
      *(_DWORD *)v18 = bswap32(v15);
      CFDataAppendBytes(theData, v18, 4);
      ++v9;
    }
    v12 += 2;
  }
  while (v12 != v13);
LABEL_29:
  result = CFDataGetMutableBytePtr(theData);
  *(_DWORD *)&result[Length] = bswap32(v9);
  return result;
}

unsigned int *ausdk::AUElement::RestoreState(ausdk::AUElement *this, const unsigned __int8 *a2)
{
  unsigned int *v2;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;

  v2 = (unsigned int *)(a2 + 4);
  if (*(_DWORD *)a2)
  {
    v4 = bswap32(*(_DWORD *)a2);
    if (v4 <= 1)
      v5 = 1;
    else
      v5 = v4;
    do
    {
      v6 = *v2;
      v7 = v2[1];
      v2 += 2;
      ausdk::AUElement::SetParameter(this, bswap32(v6), COERCE_FLOAT(bswap32(v7)), 0);
      --v5;
    }
    while (v5);
  }
  return v2;
}

ausdk::AUIOElement *ausdk::AUIOElement::AUIOElement(ausdk::AUIOElement *this, ausdk::AUBase *a2)
{
  uint64_t v3;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_QWORD *)this = off_1E4A9C6B0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  sub_1A399B540((_QWORD *)this + 15, 1uLL);
  v3 = *((_QWORD *)this + 15);
  *(_QWORD *)v3 = 0;
  *(_DWORD *)(v3 + 8) = 0;
  *((_DWORD *)this + 36) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_BYTE *)this + 168) = 1;
  *((_QWORD *)this + 10) = 0x40E5888000000000;
  *(_OWORD *)((char *)this + 88) = xmmword_1A3ABF5F0;
  *(_OWORD *)((char *)this + 104) = xmmword_1A3ABF600;
  return this;
}

void sub_1A399E108(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1A396C2C0(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::AUIOElement::SetStreamFormat(ausdk::AUIOElement *this, const AudioStreamBasicDescription *a2)
{
  __int128 v3;
  __int128 v4;
  int v5;

  v3 = *(_OWORD *)&a2->mSampleRate;
  v4 = *(_OWORD *)&a2->mBytesPerPacket;
  *((_QWORD *)this + 14) = *(_QWORD *)&a2->mBitsPerChannel;
  *((_OWORD *)this + 5) = v3;
  *((_OWORD *)this + 6) = v4;
  if (sub_1A399A9EC(*((_DWORD **)this + 15)))
  {
    v5 = *((_DWORD *)this + 27);
    if (v5 != sub_1A399A9EC(*((_DWORD **)this + 15)))
      (*(void (**)(ausdk::AUIOElement *))(*(_QWORD *)this + 104))(this);
  }
  return 0;
}

uint64_t ausdk::AUIOElement::AllocateBuffer(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  ausdk::AUBufferList *v4;
  const AudioStreamBasicDescription *v5;
  int v6;

  v2 = *(_QWORD *)(this + 8);
  if (*(_BYTE *)(v2 + 18))
  {
    v3 = a2;
    if (!a2)
      v3 = *(_DWORD *)(v2 + 336);
    v4 = (ausdk::AUBufferList *)(this + 144);
    v5 = (const AudioStreamBasicDescription *)(this + 80);
    if (*(_BYTE *)(this + 168))
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)this + 72))(this))
        v6 = v3;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    return ausdk::AUBufferList::Allocate(v4, v5, v6);
  }
  return this;
}

_QWORD *ausdk::AUIOElement::DeallocateBuffer(ausdk::AUIOElement *this)
{
  return ausdk::AUBufferList::Deallocate((_QWORD *)this + 18);
}

void ausdk::AUIOElement::GetChannelLayoutTags(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t ausdk::AUIOElement::GetAudioChannelLayout(ausdk::AUIOElement *this, AudioChannelLayout *a2, BOOL *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;

  *a3 = 1;
  if (!sub_1A399A9EC(*((_DWORD **)this + 15)))
    return 0;
  v5 = (_DWORD *)*((_QWORD *)this + 15);
  v6 = v5[2];
  v7 = (20 * v6 + 12);
  if (a2 && 20 * v6 != -12)
    memcpy(a2, v5, (20 * v6 + 12));
  return v7;
}

uint64_t ausdk::AUIOElement::SetAudioChannelLayout(ausdk::AUIOElement *this, AudioChannelLayout *a2)
{
  int v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t result;
  void *__dst[2];
  uint64_t v12;

  v4 = *((_DWORD *)this + 27);
  if (v4 != sub_1A399A9EC(a2))
    return 4294956445;
  v5 = 20 * a2->mNumberChannelDescriptions + 12;
  v6 = (v5 & 0x1C) == 0;
  v7 = v5 >> 5;
  if (v6)
    v8 = v7;
  else
    v8 = v7 + 1;
  sub_1A399B540(__dst, v8);
  memcpy(__dst[0], a2, 20 * a2->mNumberChannelDescriptions + 12);
  v9 = (void *)*((_QWORD *)this + 15);
  if (v9)
  {
    *((_QWORD *)this + 16) = v9;
    operator delete(v9);
  }
  result = 0;
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)__dst;
  *((_QWORD *)this + 17) = v12;
  return result;
}

uint64_t ausdk::AUIOElement::RemoveAudioChannelLayout(ausdk::AUIOElement *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  __int128 v6;

  sub_1A399B540(&v5, 1uLL);
  v2 = v5;
  *v5 = 0;
  *((_DWORD *)v2 + 2) = 0;
  v3 = (void *)*((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 16) = v3;
    operator delete(v3);
    v2 = v5;
  }
  *((_QWORD *)this + 15) = v2;
  *((_OWORD *)this + 8) = v6;
  return 0;
}

uint64_t ausdk::AUScope::SetNumberOfElements(ausdk::AUScope *this, unsigned int a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  int64x2_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  char *v32;

  result = *((_QWORD *)this + 5);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  v4 = a2;
  v5 = *((_QWORD *)this + 3);
  v6 = (int64x2_t *)((char *)this + 16);
  v7 = (v5 - *((_QWORD *)this + 2)) >> 3;
  if (v7 >= a2)
  {
    if (v7 > a2)
    {
      v25 = (uint64_t *)(v5 - 8);
      v26 = v5 - 8;
      do
      {
        result = *v25;
        *v25 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        *((_QWORD *)this + 3) = v25;
        v27 = v26 - *((_QWORD *)this + 2);
        v26 -= 8;
        --v25;
      }
      while (v4 < v27 >> 3);
    }
  }
  else
  {
    result = sub_1A3986F58((char **)this + 2, a2);
    if ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3 < v4)
    {
      do
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)this + 416))(&v28, *(_QWORD *)this, *((unsigned int *)this + 2));
        v9 = (uint64_t *)*((_QWORD *)this + 3);
        v8 = *((_QWORD *)this + 4);
        if ((unint64_t)v9 >= v8)
        {
          v12 = ((uint64_t)v9 - v6->i64[0]) >> 3;
          if ((unint64_t)(v12 + 1) >> 61)
            sub_1A395516C();
          v13 = v8 - v6->i64[0];
          v14 = v13 >> 2;
          if (v13 >> 2 <= (unint64_t)(v12 + 1))
            v14 = v12 + 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          v32 = (char *)this + 32;
          if (v15)
            v16 = (char *)sub_1A3964890((uint64_t)this + 32, v15);
          else
            v16 = 0;
          v17 = (uint64_t *)&v16[8 * v12];
          v18 = &v16[8 * v15];
          v31 = v18;
          v19 = v28;
          v28 = 0;
          *v17 = v19;
          v11 = v17 + 1;
          v30.i64[1] = (uint64_t)(v17 + 1);
          v21 = (_QWORD *)*((_QWORD *)this + 2);
          v20 = (_QWORD *)*((_QWORD *)this + 3);
          if (v20 == v21)
          {
            v23 = vdupq_n_s64((unint64_t)v20);
          }
          else
          {
            do
            {
              v22 = *--v20;
              *v20 = 0;
              *--v17 = v22;
            }
            while (v20 != v21);
            v23 = *v6;
            v11 = (_QWORD *)v30.i64[1];
            v18 = v31;
          }
          *((_QWORD *)this + 2) = v17;
          *((_QWORD *)this + 3) = v11;
          v30 = v23;
          v24 = (char *)*((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v18;
          v31 = v24;
          v29 = v23.i64[0];
          sub_1A3987664((uint64_t)&v29);
        }
        else
        {
          v10 = v28;
          v28 = 0;
          *v9 = v10;
          v11 = v9 + 1;
        }
        *((_QWORD *)this + 3) = v11;
        result = v28;
        v28 = 0;
        if (result)
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          v11 = (_QWORD *)*((_QWORD *)this + 3);
        }
      }
      while (((uint64_t)v11 - v6->i64[0]) >> 3 < v4);
    }
  }
  return result;
}

void sub_1A399E5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

BOOL ausdk::AUScope::HasElementWithName(ausdk::AUScope *this)
{
  unint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  for (i = 0; ; ++i)
  {
    v3 = *((_QWORD *)this + 5);
    if (v3)
      LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    else
      v4 = (*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3;
    if (i >= v4)
      break;
    v5 = *((_QWORD *)this + 5);
    if (v5)
    {
      v6 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 32))(v5, i);
      if (!v6)
        continue;
    }
    else
    {
      v7 = *((_QWORD *)this + 2);
      if (i >= (*((_QWORD *)this + 3) - v7) >> 3)
        continue;
      v6 = *(_QWORD *)(v7 + 8 * i);
      if (!v6)
        continue;
    }
    if (*(_QWORD *)(v6 + 72))
      return i < v4;
  }
  return i < v4;
}

void ausdk::AUScope::AddElementNamesToDict(ausdk::AUScope *this, __CFDictionary *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFStringRef v10;
  __CFDictionary *v11;
  void *value;
  CFStringRef v13;
  void *Mutable;

  if (ausdk::AUScope::HasElementWithName(this))
  {
    v4 = 0;
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    while (1)
    {
      v5 = *((_QWORD *)this + 5);
      if (v5)
        LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      else
        v6 = (*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3;
      if (v4 >= v6)
      {
        v13 = CFStringCreateWithFormat(0, 0, CFSTR("%u"), *((unsigned int *)this + 2));
        CFDictionarySetValue(a2, v13, Mutable);
        sub_1A396C314((const void **)&v13);
        sub_1A399C894((const void **)&Mutable);
        return;
      }
      v7 = *((_QWORD *)this + 5);
      if (v7)
        break;
      v9 = *((_QWORD *)this + 2);
      if (v4 < (*((_QWORD *)this + 3) - v9) >> 3)
      {
        v8 = *(_QWORD *)(v9 + 8 * v4);
        if (v8)
          goto LABEL_12;
      }
LABEL_14:
      ++v4;
    }
    v8 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 32))(v7, v4);
    if (!v8)
      goto LABEL_14;
LABEL_12:
    if (*(_QWORD *)(v8 + 72))
    {
      v10 = CFStringCreateWithFormat(0, 0, CFSTR("%u"), v4);
      v11 = (__CFDictionary *)Mutable;
      value = *(void **)(v8 + 72);
      v13 = v10;
      sub_1A399B520((CFTypeRef *)&value);
      CFDictionarySetValue(v11, v10, value);
      sub_1A396C314((const void **)&value);
      sub_1A396C314((const void **)&v13);
    }
    goto LABEL_14;
  }
}

void sub_1A399E7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  sub_1A396C314((const void **)va);
  sub_1A399C894((const void **)va1);
  _Unwind_Resume(a1);
}

void ausdk::AUScope::RestoreElementNames(ausdk::AUScope *this@<X0>, const __CFDictionary *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  CFIndex Count;
  unint64_t v9;
  uint64_t i;
  const void *Value;
  const void *v12;
  CFTypeID v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  void **keys[3];
  char buffer[16];
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *((_QWORD *)this + 5);
  if (v6)
    LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  else
    v7 = (*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3;
  Count = CFDictionaryGetCount(a2);
  v9 = Count & ~(Count >> 63);
  sub_1A399EDB8(keys, v9);
  CFDictionaryGetKeysAndValues(a2, (const void **)keys[0], 0);
  if (Count >= 1)
  {
    for (i = 0; i != v9; ++i)
    {
      v28 = 0;
      *(_OWORD *)buffer = 0u;
      v31 = 0u;
      CFStringGetCString((CFStringRef)keys[0][i], buffer, 32, 0x600u);
      if (sscanf(buffer, "%u", &v28))
      {
        if (v28 < v7)
        {
          Value = CFDictionaryGetValue(a2, keys[0][i]);
          v12 = Value;
          if (Value)
          {
            v13 = CFGetTypeID(Value);
            if (v13 == CFStringGetTypeID())
            {
              v14 = *((_QWORD *)this + 5);
              if (v14)
              {
                v15 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, v28);
                if (v15)
                  goto LABEL_12;
              }
              else
              {
                v19 = *((_QWORD *)this + 2);
                if (v28 < (unint64_t)((*((_QWORD *)this + 3) - v19) >> 3))
                {
                  v15 = *(_QWORD *)(v19 + 8 * v28);
                  if (v15)
                  {
LABEL_12:
                    sub_1A3998470((const void **)(v15 + 72), v12);
                    v17 = a3[1];
                    v16 = (unint64_t)a3[2];
                    if ((unint64_t)v17 >= v16)
                    {
                      v20 = *a3;
                      v21 = v17 - *a3;
                      v22 = v21 + 1;
                      if ((unint64_t)(v21 + 1) >> 62)
                        sub_1A395516C();
                      v23 = v16 - (_QWORD)v20;
                      if (v23 >> 1 > v22)
                        v22 = v23 >> 1;
                      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
                        v24 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v24 = v22;
                      if (v24)
                      {
                        v25 = (char *)sub_1A3958A04((uint64_t)(a3 + 2), v24);
                        v20 = *a3;
                        v17 = a3[1];
                      }
                      else
                      {
                        v25 = 0;
                      }
                      v26 = (unsigned int *)&v25[4 * v21];
                      *v26 = v28;
                      v18 = v26 + 1;
                      while (v17 != v20)
                      {
                        v27 = *--v17;
                        *--v26 = v27;
                      }
                      *a3 = v26;
                      a3[1] = v18;
                      a3[2] = (unsigned int *)&v25[4 * v24];
                      if (v20)
                        operator delete(v20);
                    }
                    else
                    {
                      *v17 = v28;
                      v18 = v17 + 1;
                    }
                    a3[1] = v18;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (keys[0])
  {
    keys[1] = keys[0];
    operator delete(keys[0]);
  }
}

void sub_1A399EAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

UInt8 *ausdk::AUScope::SaveState(ausdk::AUScope *this, __CFData *a2)
{
  uint64_t v4;
  UInt8 *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  UInt8 v10[4];
  UInt8 bytes[4];

  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    result = (UInt8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    result = (UInt8 *)((*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3);
    if (!(_DWORD)result)
      return result;
  }
  v6 = 0;
  v7 = result;
  do
  {
    v8 = *((_QWORD *)this + 5);
    if (v8)
      v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v6);
    else
      v9 = *(ausdk::AUElement **)(*((_QWORD *)this + 2) + 8 * v6);
    result = (UInt8 *)(*(uint64_t (**)(ausdk::AUElement *))(*(_QWORD *)v9 + 16))(v9);
    if ((_DWORD)result)
    {
      *(_DWORD *)bytes = bswap32(*((_DWORD *)this + 2));
      CFDataAppendBytes(a2, bytes, 4);
      *(_DWORD *)v10 = bswap32(v6);
      CFDataAppendBytes(a2, v10, 4);
      result = ausdk::AUElement::SaveState(v9, *((unsigned int *)this + 2), a2);
    }
    ++v6;
  }
  while (v7 != v6);
  return result;
}

const unsigned __int8 *ausdk::AUScope::RestoreState(ausdk::AUScope *this, const unsigned __int8 *a2)
{
  const unsigned __int8 *v3;
  unint64_t v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  uint64_t v7;

  v3 = a2 + 4;
  v4 = bswap32(*(_DWORD *)a2);
  v5 = *((_QWORD *)this + 5);
  if (!v5)
  {
    v7 = *((_QWORD *)this + 2);
    if (v4 >= (*((_QWORD *)this + 3) - v7) >> 3)
      return &a2[8 * bswap32(*((_DWORD *)a2 + 1)) + 8];
    v6 = *(ausdk::AUElement **)(v7 + 8 * v4);
    if (!v6)
      return &a2[8 * bswap32(*((_DWORD *)a2 + 1)) + 8];
    return (const unsigned __int8 *)ausdk::AUElement::RestoreState(v6, v3);
  }
  v6 = (ausdk::AUElement *)(*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)v5 + 32))(*((_QWORD *)this + 5), v4);
  if (v6)
    return (const unsigned __int8 *)ausdk::AUElement::RestoreState(v6, v3);
  return &a2[8 * bswap32(*((_DWORD *)a2 + 1)) + 8];
}

void sub_1A399EC78(uint64_t a1)
{
  sub_1A396C2C0(a1);
  JUMPOUT(0x1A8596C28);
}

uint64_t sub_1A399EC9C()
{
  return 0;
}

void sub_1A399ECA4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unsigned int v18;

  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 16;
  v5 = v6;
  v7 = *(unsigned int **)(v4 - 8);
  if (a2 <= (v6 - (uint64_t)v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += a2;
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  else
  {
    v8 = *(unsigned int **)a1;
    v9 = (uint64_t)v7 - *(_QWORD *)a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      sub_1A395516C();
    v11 = v9 >> 2;
    v12 = v5 - (_QWORD)v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1A3958A04(v4, v13);
      v8 = *(unsigned int **)a1;
      v7 = *(unsigned int **)(a1 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    if (v7 != v8)
    {
      do
      {
        v18 = atomic_load(--v7);
        *((_DWORD *)v15 - 1) = v18;
        v15 -= 4;
      }
      while (v7 != v8);
      v8 = *(unsigned int **)a1;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *sub_1A399EDB8(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1A399EE2C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1A399EE10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1A399EE2C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_1A395516C();
  result = (char *)sub_1A3964890((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_DWORD *sub_1A399EE6C(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int v17;
  void *__p;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v4 = (_DWORD *)a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = (a2 - *a1) >> 3;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v13 = ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v13 >> 61)
      sub_1A395516C();
    v14 = v10 - v7;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v23 = v9;
    if (v15)
      v16 = (char *)sub_1A3964890(v9, v15);
    else
      v16 = 0;
    __p = v16;
    v20 = &v16[8 * v8];
    v21 = v20;
    v22 = &v16[8 * v15];
    sub_1A399F070(&__p, a3);
    v4 = (_DWORD *)sub_1A399F1A8(a1, &__p, v4);
    if (v21 != v20)
      v21 += (v20 - v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (a2 == v6)
  {
    *(_DWORD *)a2 = *a3;
    v17 = atomic_load(a3 + 1);
    *(_DWORD *)(v7 + 8 * v8 + 4) = v17;
    a1[1] = a2 + 8;
  }
  else
  {
    sub_1A399EFFC((uint64_t)a1, a2, v6, (char *)(a2 + 8));
    *v4 = *a3;
    v12 = atomic_load(a3 + 1);
    atomic_store(v12, (unsigned int *)(v7 + 8 * v8 + 4));
  }
  return v4;
}

void sub_1A399EFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A399EFFC(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  uint64_t v5;
  _DWORD *v6;
  char *v7;
  unsigned int *v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;

  v4 = *(char **)(result + 8);
  v5 = v4 - a4;
  v6 = (_DWORD *)(a2 + v4 - a4);
  v7 = v4;
  while ((unint64_t)v6 < a3)
  {
    v8 = v6 + 1;
    v9 = *v6;
    v6 += 2;
    *(_DWORD *)v7 = v9;
    LODWORD(v8) = atomic_load(v8);
    *((_DWORD *)v7 + 1) = (_DWORD)v8;
    v7 += 8;
  }
  *(_QWORD *)(result + 8) = v7;
  if (v4 != a4)
  {
    v10 = (unsigned int *)(v4 - 4);
    v11 = 8 * (v5 >> 3);
    do
    {
      *(v10 - 1) = *(_DWORD *)(a2 + v11 - 8);
      v12 = atomic_load((unsigned int *)(a2 + v11 - 4));
      atomic_store(v12, v10);
      v10 -= 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

void sub_1A399F070(_QWORD *a1, _DWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  int v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _DWORD *v19;
  uint64_t v20;
  char *v21;
  unsigned int *v22;
  int v23;
  char *v24;
  unsigned int v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v6 = (char *)*a1;
    v5 = (char *)a1[1];
    v7 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == v6)
        v15 = 1;
      else
        v15 = (v4 - v6) >> 2;
      v16 = (char *)sub_1A3964890(a1[4], v15);
      v18 = &v16[8 * (v15 >> 2)];
      v19 = (_DWORD *)a1[1];
      v4 = v18;
      v20 = a1[2] - (_QWORD)v19;
      if (v20)
      {
        v4 = &v18[v20];
        v21 = &v16[8 * (v15 >> 2)];
        do
        {
          v22 = v19 + 1;
          v23 = *v19;
          v19 += 2;
          *(_DWORD *)v21 = v23;
          LODWORD(v22) = atomic_load(v22);
          *((_DWORD *)v21 + 1) = (_DWORD)v22;
          v21 += 8;
        }
        while (v21 != v4);
      }
      v24 = (char *)*a1;
      *a1 = v16;
      a1[1] = v18;
      a1[2] = v4;
      a1[3] = &v16[8 * v17];
      if (v24)
      {
        operator delete(v24);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v8 = v7 >> 3;
      v9 = v7 >> 3 < -1;
      v10 = (v7 >> 3) + 2;
      if (!v9)
        v10 = v8 + 1;
      if (v5 == v4)
      {
        v14 = &v5[-8 * (v10 >> 1)];
      }
      else
      {
        do
        {
          v11 = &v5[-8 * (v10 >> 1)];
          v12 = (unsigned int *)(v5 + 4);
          v13 = *(_DWORD *)v5;
          v5 += 8;
          *(_DWORD *)v11 = v13;
          LODWORD(v12) = atomic_load(v12);
          atomic_store(v12, (unsigned int *)v11 + 1);
        }
        while (v5 != v4);
        v4 = (char *)a1[1];
        v14 = &v5[-8 * (v10 >> 1)];
      }
      a1[1] = &v4[-8 * (v10 >> 1)];
      a1[2] = v14;
      v4 = v14;
    }
  }
  *(_DWORD *)v4 = *a2;
  v25 = atomic_load(a2 + 1);
  *((_DWORD *)v4 + 1) = v25;
  a1[2] += 8;
}

uint64_t sub_1A399F1A8(_QWORD *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t result;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  _DWORD *v11;
  unsigned int *v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;

  result = a2[1];
  v5 = (_DWORD *)*a1;
  v6 = result;
  if ((_DWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *(v7 - 2);
      v7 -= 2;
      *(_DWORD *)(v6 - 8) = v8;
      v6 -= 8;
      v9 = atomic_load(v7 + 1);
      *(_DWORD *)(v6 + 4) = v9;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v10 = (_DWORD *)a1[1];
  v11 = (_DWORD *)a2[2];
  if (v10 != a3)
  {
    do
    {
      v12 = a3 + 1;
      v13 = *a3;
      a3 += 2;
      *v11 = v13;
      LODWORD(v12) = atomic_load(v12);
      v11[1] = (_DWORD)v12;
      v11 += 2;
    }
    while (a3 != v10);
    v6 = a2[1];
  }
  a2[2] = v11;
  v14 = (_DWORD *)*a1;
  *a1 = v6;
  a2[1] = v14;
  v15 = a1[1];
  a1[1] = a2[2];
  a2[2] = v15;
  v16 = a1[2];
  a1[2] = a2[3];
  a2[3] = v16;
  *a2 = a2[1];
  return result;
}

_UNKNOWN **ausdk::BufferAllocator::instance(ausdk::BufferAllocator *this)
{
  return &off_1EE6D17E0;
}

void sub_1A399F2F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A399F6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A399F798(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  id v41;
  void *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;

  v5 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend_escapedPatternForString_(MEMORY[0x1E0CB38E8], a2, (uint64_t)CFSTR("[[SSMLESCAPED]]"), a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_escapedPatternForString_(MEMORY[0x1E0CB38E8], v7, (uint64_t)CFSTR("[[[SSMLESCAPED]]]"), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v5, v11, (uint64_t)CFSTR("%@(?<enclosedssml>((.|\\n)*?))%@"), v12, v13, v6, v10);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v51 = 0;
  objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E0CB38E8], v15, (uint64_t)v14, 1, (uint64_t)&v51);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = v51;
  v18 = (void *)qword_1EE6D5840;
  qword_1EE6D5840 = v16;

  if (v17)
  {
    AXTTSLogCommon();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      sub_1A3AB41A0((uint64_t)v17, v22, v23, v24, v25, v26, v27, v28);

  }
  v29 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend_escapedPatternForString_(MEMORY[0x1E0CB38E8], v19, (uint64_t)CFSTR("[[SSMLESCAPED]]"), v20, v21);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_escapedPatternForString_(MEMORY[0x1E0CB38E8], v31, (uint64_t)CFSTR("[[[SSMLESCAPED]]]"), v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v29, v35, (uint64_t)CFSTR("(?<delimiter>(%@|%@))"), v36, v37, v30, v34);
  v38 = (void *)objc_claimAutoreleasedReturnValue();

  v50 = v17;
  objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E0CB38E8], v39, (uint64_t)v38, 1, (uint64_t)&v50);
  v40 = objc_claimAutoreleasedReturnValue();
  v41 = v50;

  v42 = (void *)qword_1EE6D5848;
  qword_1EE6D5848 = v40;

  if (v41)
  {
    AXTTSLogCommon();
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      sub_1A3AB4138((uint64_t)v41, v43, v44, v45, v46, v47, v48, v49);

  }
}

void sub_1A399F968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A399F9BC()
{
  void *v0;

  JUMPOUT(0x1A399F9B0);
}

void sub_1A399F9C8()
{
  JUMPOUT(0x1A399F9B0);
}

void sub_1A399FB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;

  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1A399FBA8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1A399FBB8(uint64_t a1)
{

}

void sub_1A399FBC0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  void *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (*(_BYTE *)(a1 + 40))
    v8 = v5;
  else
    v8 = v6;
  v9 = v8;
  v52 = v5;
  if (*(_BYTE *)(a1 + 40))
    v10 = v7;
  else
    v10 = v5;
  v11 = v10;
  v53 = v9;
  objc_msgSend_sharedInstance(TTSRegexCache, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_escapedPatternForString_(MEMORY[0x1E0CB38E8], v17, (uint64_t)v9, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_regexForString_(v16, v21, (uint64_t)v20, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v30 = objc_msgSend_length(v25, v26, v27, v28, v29);
  objc_msgSend_matchesInString_options_range_(v24, v31, (uint64_t)v25, 0, 0, v30);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  objc_msgSend_reverseObjectEnumerator(v32, v33, v34, v35, v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v38, (uint64_t)&v54, (uint64_t)v58, 16);
  if (v43)
  {
    v44 = *(_QWORD *)v55;
    do
    {
      for (i = 0; i != v43; ++i)
      {
        if (*(_QWORD *)v55 != v44)
          objc_enumerationMutation(v37);
        v46 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
        v47 = objc_msgSend_range(*(void **)(*((_QWORD *)&v54 + 1) + 8 * i), v39, v40, v41, v42, v52);
        objc_msgSend_stringByReplacingCharactersInRange_withString_(v46, v48, v47, (uint64_t)v48, (uint64_t)v11);
        v49 = objc_claimAutoreleasedReturnValue();
        v50 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v51 = *(void **)(v50 + 40);
        *(_QWORD *)(v50 + 40) = v49;

      }
      v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v39, (uint64_t)&v54, (uint64_t)v58, 16);
    }
    while (v43);
  }

}

void sub_1A399FDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A399FF00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A39A011C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A39A0258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A39A033C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A39A0494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A39A069C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v7;

  _Unwind_Resume(a1);
}

uint64_t CoreSynthesizer.Utterance.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void CoreSynthesizer.Utterance.behavior.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

void CoreSynthesizer.Utterance.isoPrioritizedBehavior.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 17);
}

void CoreSynthesizer.Utterance.replacementOptions.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
}

id CoreSynthesizer.Utterance.voice.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char v14;
  int v15;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  v7 = *(_QWORD *)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 80);
  v9 = *(_QWORD *)(v1 + 88);
  v10 = *(_QWORD *)(v1 + 96);
  v11 = *(_QWORD *)(v1 + 104);
  v12 = *(void **)(v1 + 112);
  v13 = *(_QWORD *)(v1 + 120);
  v14 = *(_BYTE *)(v1 + 132);
  v15 = *(_DWORD *)(v1 + 128);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v13;
  *(_BYTE *)(a1 + 100) = v14;
  *(_DWORD *)(a1 + 96) = v15;
  return sub_1A39A07C8(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

id sub_1A39A07C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  id result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a11;
  }
  return result;
}

uint64_t CoreSynthesizer.Utterance.voiceSettings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CoreSynthesizer.Utterance.voiceSettings.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 136) = a1;
  return result;
}

uint64_t (*CoreSynthesizer.Utterance.voiceSettings.modify())()
{
  return nullsub_19;
}

uint64_t CoreSynthesizer.Utterance.speech.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A0888(v1 + 144, a1);
}

uint64_t sub_1A39A0888(uint64_t a1, uint64_t a2)
{
  return _s9UtteranceV6SpeechOwcp(a2, a1);
}

uint64_t CoreSynthesizer.Utterance.priority.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 192);
}

uint64_t CoreSynthesizer.Utterance.externalTracingId.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 200);
}

uint64_t sub_1A39A08A8()
{
  return 0;
}

void sub_1A39A08B0(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void sub_1A39A08B8(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static CoreSynthesizer.Utterance.ReplacementOptions.emoji.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1A39A08D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

_OWORD *CoreSynthesizer.Utterance.init(id:speech:voice:priority:behavior:isoPrioritizedBehavior:replacementOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, char *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>)
{
  int v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v11 = *(_DWORD *)(a4 + 96);
  v12 = *(_BYTE *)(a4 + 100);
  v13 = *a6;
  v14 = *a7;
  v15 = *a8;
  *(_QWORD *)(a9 + 136) = 0;
  *(_BYTE *)(a9 + 16) = v13;
  *(_QWORD *)(a9 + 192) = a5;
  *(_BYTE *)(a9 + 17) = v14;
  *(_QWORD *)(a9 + 24) = v15;
  v16 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)a4;
  *(_OWORD *)(a9 + 48) = v16;
  v17 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a9 + 80) = v17;
  v18 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a9 + 112) = v18;
  *(_BYTE *)(a9 + 132) = v12;
  *(_DWORD *)(a9 + 128) = v11;
  if (a2)
  {
    *(_BYTE *)(a9 + 200) = 1;
  }
  else
  {
    *(_BYTE *)(a9 + 200) = 0;
    a1 = sub_1A3A29694(6);
  }
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  return sub_1A39A19B4(a3, (_OWORD *)(a9 + 144));
}

_OWORD *CoreSynthesizer.Utterance.init(id:ssml:voice:priority:behavior:isoPrioritizedBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  int v10;
  char v11;
  char v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v18;
  char v19;

  v10 = *(_DWORD *)(a5 + 96);
  v11 = *(_BYTE *)(a5 + 100);
  v12 = *a7;
  v13 = *a8;
  *(_QWORD *)&v18 = a3;
  *((_QWORD *)&v18 + 1) = a4;
  v19 = 0;
  *(_QWORD *)(a9 + 136) = 0;
  *(_BYTE *)(a9 + 16) = v12;
  *(_QWORD *)(a9 + 192) = a6;
  *(_BYTE *)(a9 + 17) = v13;
  *(_QWORD *)(a9 + 24) = 1;
  v14 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(a9 + 48) = v14;
  v15 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a9 + 80) = v15;
  v16 = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(a9 + 112) = v16;
  *(_BYTE *)(a9 + 132) = v11;
  *(_DWORD *)(a9 + 128) = v10;
  if (a2)
  {
    *(_BYTE *)(a9 + 200) = 1;
  }
  else
  {
    *(_BYTE *)(a9 + 200) = 0;
    a1 = sub_1A3A29694(6);
  }
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  return sub_1A39A19B4(&v18, (_OWORD *)(a9 + 144));
}

uint64_t CoreSynthesizer.Utterance.init(id:voice:priority:behavior:isoPrioritizedBehavior:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, char *a6@<X5>, void (*a7)(_QWORD *__return_ptr)@<X6>, _OWORD *a8@<X8>)
{
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[2];
  _OWORD v49[2];
  __int128 v50[2];
  char v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;

  v11 = a3[1];
  v37 = a3[2];
  v38 = *a3;
  v35 = a3[4];
  v36 = a3[3];
  v33 = a3[6];
  v34 = a3[5];
  v31 = a3[8];
  v32 = a3[7];
  v29 = a3[10];
  v30 = a3[9];
  v28 = a3[11];
  v12 = *((unsigned int *)a3 + 24) | ((unint64_t)*((unsigned __int8 *)a3 + 100) << 32);
  v13 = *a5;
  v14 = *a6;
  a7(v52);
  v15 = v53;
  v16 = v54;
  sub_1A39A19CC(v52, v53);
  TTSMarkupSpeech.ssmlTag.getter(v15, v16);
  LOBYTE(v50[0]) = 0;
  sub_1A39A19F0();
  v17 = sub_1A3AB494C();
  if ((v17 & 1) == 0)
  {
    MEMORY[0x1E0C80A78](v17);
    *((_QWORD *)&v40 + 1) = &type metadata for TTSMarkup.SpeechDocument;
    *(_QWORD *)&v41 = &protocol witness table for TTSMarkup.SpeechDocument;
    *(_QWORD *)&v39 = swift_allocObject();
    TTSMarkup.SpeechDocument.init(_:)((uint64_t (*)(void))sub_1A39A1A34, (_QWORD *)(v39 + 16));
    sub_1A39A47C4((uint64_t)v52);
    sub_1A39A1AB8(&v39, (uint64_t)v52);
  }
  sub_1A39A1AD0((uint64_t)v52, (uint64_t)v50);
  v51 = 2;
  LOBYTE(v40) = v13;
  *((_QWORD *)&v47 + 1) = 0;
  *(_QWORD *)&v49[1] = a4;
  BYTE1(v40) = v14;
  *((_QWORD *)&v40 + 1) = 1;
  *(_QWORD *)&v41 = v38;
  *((_QWORD *)&v41 + 1) = v11;
  *(_QWORD *)&v42 = v37;
  *((_QWORD *)&v42 + 1) = v36;
  *(_QWORD *)&v43 = v35;
  *((_QWORD *)&v43 + 1) = v34;
  *(_QWORD *)&v44 = v33;
  *((_QWORD *)&v44 + 1) = v32;
  *(_QWORD *)&v45 = v31;
  *((_QWORD *)&v45 + 1) = v30;
  *(_QWORD *)&v46 = v29;
  *((_QWORD *)&v46 + 1) = v28;
  BYTE4(v47) = BYTE4(v12);
  LODWORD(v47) = v12;
  if (a2)
  {
    BYTE8(v49[1]) = 1;
    v18 = a1;
  }
  else
  {
    BYTE8(v49[1]) = 0;
    v18 = sub_1A3A29694(6);
    a2 = v19;
  }
  *(_QWORD *)&v39 = v18;
  *((_QWORD *)&v39 + 1) = a2;
  sub_1A39A19B4(v50, v48);
  v20 = v49[0];
  a8[10] = v48[1];
  a8[11] = v20;
  *(_OWORD *)((char *)a8 + 185) = *(_OWORD *)((char *)v49 + 9);
  v21 = v46;
  a8[6] = v45;
  a8[7] = v21;
  v22 = v48[0];
  a8[8] = v47;
  a8[9] = v22;
  v23 = v42;
  a8[2] = v41;
  a8[3] = v23;
  v24 = v44;
  a8[4] = v43;
  a8[5] = v24;
  v25 = v40;
  *a8 = v39;
  a8[1] = v25;
  return sub_1A39A47C4((uint64_t)v52);
}

Swift::String __swiftcall CoreSynthesizer.Utterance.asPlainText()()
{
  uint64_t v0;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String result;
  _QWORD v8[4];
  __int128 v9[2];
  char v10;

  sub_1A39A0888(v0 + 144, (uint64_t)v9);
  if (v10)
  {
    if (v10 == 1)
    {
      object = (void *)*((_QWORD *)&v9[0] + 1);
      countAndFlagsBits = *(_QWORD *)&v9[0];
    }
    else
    {
      sub_1A39A1AB8(v9, (uint64_t)v8);
      sub_1A39A19CC(v8, v8[3]);
      v3 = TTSMarkupSpeech.asPlainText()();
      countAndFlagsBits = v3._countAndFlagsBits;
      object = v3._object;
      sub_1A39A47C4((uint64_t)v8);
    }
  }
  else
  {
    TTSMarkup.SpeechDocument.init(ssml:)((uint64_t)v8);
    v4 = TTSMarkupSpeech.asPlainText()();
    countAndFlagsBits = v4._countAndFlagsBits;
    object = v4._object;
    sub_1A39A1B14((uint64_t)v8);
  }
  v5 = countAndFlagsBits;
  v6 = object;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t sub_1A39A0DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[29] = a2;
  v3[30] = a3;
  v3[28] = a1;
  v4 = sub_1A3AB4724();
  v3[31] = v4;
  v3[32] = *(_QWORD *)(v4 - 8);
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A39A0E28()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _OWORD *v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);

  v1 = objc_msgSend(*(id *)(v0 + 232), sel_voice);
  *(_QWORD *)(v0 + 280) = v1;
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 240);
    v3 = objc_msgSend(v1, sel_identifier);
    v4 = sub_1A3AB497C();
    v6 = v5;

    *(_QWORD *)(v0 + 288) = v6;
    v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 264)
                                                            + *(_QWORD *)(*(_QWORD *)v2 + 264));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 296) = v7;
    *v7 = v0;
    v7[1] = sub_1A39A1004;
    return v21(v0 + 16, v4, v6);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 272);
    v10 = *(_QWORD *)(v0 + 248);
    v11 = *(_QWORD *)(v0 + 256);
    v12 = sub_1A39AACDC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v12, v10);
    v13 = sub_1A3AB470C();
    v14 = sub_1A3AB4FD0();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1A3940000, v13, v14, "Utterance had no voice!", v15, 2u);
      MEMORY[0x1A859781C](v15, -1, -1);
    }
    v16 = *(_QWORD *)(v0 + 272);
    v17 = *(_QWORD *)(v0 + 248);
    v18 = *(_QWORD *)(v0 + 256);
    v19 = *(void **)(v0 + 232);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    v20 = *(_OWORD **)(v0 + 224);
    *(_OWORD *)((char *)v20 + 185) = 0u;
    v20[10] = 0u;
    v20[11] = 0u;
    v20[8] = 0u;
    v20[9] = 0u;
    v20[6] = 0u;
    v20[7] = 0u;
    v20[4] = 0u;
    v20[5] = 0u;
    v20[2] = 0u;
    v20[3] = 0u;
    *v20 = 0u;
    v20[1] = 0u;
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A39A1004()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1A39A1060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint8_t *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  void *v46;
  void *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
    v4 = *(_QWORD *)(v0 + 32);
    v3 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
    v5 = *(_QWORD *)(v0 + 56);
    v54 = (__int128 *)(v0 + 168);
    v56 = *(_QWORD *)(v0 + 72);
    v51 = *(_QWORD *)(v0 + 80);
    v52 = *(_QWORD *)(v0 + 64);
    v7 = *(_QWORD *)(v0 + 104);
    v49 = *(void **)(v0 + 96);
    v50 = *(_QWORD *)(v0 + 88);
    v48 = *(unsigned int *)(v0 + 112) | ((unint64_t)*(unsigned __int8 *)(v0 + 116) << 32);
    v8 = objc_msgSend(*(id *)(v0 + 232), sel_ssmlRepresentation);
    v58 = v5;
    v60 = v0 + 120;
    v53 = v3;
    v57 = v6;
    if (v8)
    {
      v9 = v8;
      v10 = sub_1A3AB497C();
      v12 = v11;

      v13 = 0;
    }
    else
    {
      v34 = *(void **)(v0 + 232);
      v35 = objc_msgSend(v34, sel_speechString);
      v10 = sub_1A3AB497C();
      v12 = v36;

      objc_msgSend(v34, sel_rate);
      v38 = v37;
      objc_msgSend(v34, sel_pitchMultiplier);
      v40 = v39;
      objc_msgSend(v34, sel_volume);
      *(_DWORD *)(v0 + 136) = v38;
      *(_BYTE *)(v0 + 140) = 0;
      *(_DWORD *)(v0 + 144) = v40;
      *(_BYTE *)(v0 + 148) = 0;
      *(_DWORD *)(v0 + 152) = v41;
      v13 = 1;
      *(_BYTE *)(v0 + 156) = 0;
    }
    v42 = *(_QWORD *)(v0 + 224);
    v46 = *(void **)(v0 + 232);
    v47 = *(void **)(v0 + 280);
    *(_QWORD *)(v0 + 120) = v10;
    *(_QWORD *)(v0 + 128) = v12;
    *(_BYTE *)(v0 + 160) = v13;
    sub_1A39A0888(v60, (uint64_t)v54);
    *(_QWORD *)(v42 + 136) = 0;
    *(_WORD *)(v42 + 16) = 0;
    *(_QWORD *)(v42 + 192) = 10;
    *(_QWORD *)(v42 + 24) = 1;
    *(_QWORD *)(v42 + 32) = v2;
    *(_QWORD *)(v42 + 40) = v1;
    *(_QWORD *)(v42 + 48) = v4;
    *(_QWORD *)(v42 + 56) = v53;
    *(_QWORD *)(v42 + 64) = v57;
    *(_QWORD *)(v42 + 72) = (unsigned __int16)v58;
    *(_QWORD *)(v42 + 80) = v52;
    *(_QWORD *)(v42 + 88) = v56;
    *(_QWORD *)(v42 + 96) = v51;
    *(_QWORD *)(v42 + 104) = v50;
    *(_QWORD *)(v42 + 112) = v49;
    *(_QWORD *)(v42 + 120) = v7 & 0x1FFFFFFFFLL;
    *(_BYTE *)(v42 + 132) = BYTE4(v48) & 1;
    *(_DWORD *)(v42 + 128) = v48;
    *(_BYTE *)(v42 + 200) = 0;
    sub_1A39A07C8(v2, v1, v4, v53, v57, v58, v52, v56, v51, v50, v49);
    *(_QWORD *)v42 = sub_1A3A29694(6);
    *(_QWORD *)(v42 + 8) = v43;
    sub_1A39A19B4(v54, (_OWORD *)(v42 + 144));
    swift_release();

    sub_1A39A2EB8(v2, v1, v4, v53, v57, v58, v52, v56, v51, v50, v49);
    sub_1A39A2F28(v60);
  }
  else
  {
    v14 = *(void **)(v0 + 280);
    v16 = *(_QWORD *)(v0 + 256);
    v15 = *(_QWORD *)(v0 + 264);
    v17 = *(_QWORD *)(v0 + 248);
    v18 = sub_1A39AACDC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v18, v17);
    v19 = v14;
    v20 = sub_1A3AB470C();
    v21 = sub_1A3AB4FD0();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(void **)(v0 + 280);
    v25 = *(_QWORD *)(v0 + 256);
    v24 = *(_QWORD *)(v0 + 264);
    v26 = *(_QWORD *)(v0 + 248);
    v27 = *(void **)(v0 + 232);
    if (v22)
    {
      v61 = *(_QWORD *)(v0 + 248);
      v59 = *(_QWORD *)(v0 + 264);
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v62 = v29;
      *(_DWORD *)v28 = 136315138;
      v30 = objc_msgSend(v23, sel_identifier);
      v55 = v25;
      v31 = sub_1A3AB497C();
      v33 = v32;

      *(_QWORD *)(v0 + 216) = sub_1A39A2878(v31, v33, &v62);
      sub_1A3AB5138();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A3940000, v20, v21, "Could not resolve %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A859781C](v29, -1, -1);
      MEMORY[0x1A859781C](v28, -1, -1);
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v59, v61);
    }
    else
    {

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    }
    v44 = *(_OWORD **)(v0 + 224);
    *(_OWORD *)((char *)v44 + 185) = 0u;
    v44[10] = 0u;
    v44[11] = 0u;
    v44[8] = 0u;
    v44[9] = 0u;
    v44[6] = 0u;
    v44[7] = 0u;
    v44[4] = 0u;
    v44[5] = 0u;
    v44[2] = 0u;
    v44[3] = 0u;
    *v44 = 0u;
    v44[1] = 0u;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39A14F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  __int128 v8[2];
  char v9;

  sub_1A39A0888(v0, (uint64_t)v8);
  if (!v9 || v9 == 1)
    return *(_QWORD *)&v8[0];
  sub_1A39A1AB8(v8, (uint64_t)v5);
  v2 = v6;
  v3 = v7;
  sub_1A39A19CC(v5, v6);
  v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
  sub_1A39A47C4((uint64_t)v5);
  return v1;
}

uint64_t CoreSynthesizer.Utterance.Speech.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;
  __int128 v7[2];
  char v8;

  sub_1A39A0888(v0, (uint64_t)v7);
  if (v8 && v8 != 1)
  {
    sub_1A39A1AB8(v7, (uint64_t)v4);
    v1 = v5;
    v2 = v6;
    sub_1A39A19CC(v4, v5);
    (*(void (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
    sub_1A39A47C4((uint64_t)v4);
  }
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t CoreSynthesizer.Utterance.Speech.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;
  __int128 v7[2];
  char v8;

  sub_1A3AB56FC();
  sub_1A39A0888(v0, (uint64_t)v7);
  if (v8 && v8 != 1)
  {
    sub_1A39A1AB8(v7, (uint64_t)v4);
    v1 = v5;
    v2 = v6;
    sub_1A39A19CC(v4, v5);
    (*(void (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
    sub_1A39A47C4((uint64_t)v4);
  }
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A39A16EC()
{
  sub_1A39A14F4();
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39A1728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;
  __int128 v7[2];
  char v8;

  sub_1A3AB56FC();
  sub_1A39A0888(v0, (uint64_t)v7);
  if (v8 && v8 != 1)
  {
    sub_1A39A1AB8(v7, (uint64_t)v4);
    v1 = v5;
    v2 = v6;
    sub_1A39A19CC(v4, v5);
    (*(void (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
    sub_1A39A47C4((uint64_t)v4);
  }
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t CoreSynthesizer.Utterance.ReplacementOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CoreSynthesizer.Utterance.ReplacementOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_1A39A17F0()
{
  return &unk_1A3ABF640;
}

_QWORD *sub_1A39A17FC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1A39A1808()
{
  sub_1A3AB56FC();
  sub_1A3AB5708();
  return sub_1A3AB5738();
}

uint64_t sub_1A39A184C()
{
  return sub_1A3AB5708();
}

uint64_t sub_1A39A1874()
{
  sub_1A3AB56FC();
  sub_1A3AB5708();
  return sub_1A3AB5738();
}

BOOL sub_1A39A18B4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void sub_1A39A18C8(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1A39A18D0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1A39A18E4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1A39A18F8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1A39A190C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1A39A193C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1A39A1968@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1A39A198C(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1A39A19A0(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_OWORD *sub_1A39A19B4(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

_QWORD *sub_1A39A19CC(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1A39A19F0()
{
  unint64_t result;

  result = qword_1EE6D29F8;
  if (!qword_1EE6D29F8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for SSMLTag, &type metadata for SSMLTag);
    atomic_store(result, (unint64_t *)&qword_1EE6D29F8);
  }
  return result;
}

uint64_t sub_1A39A1A34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[40];
  _QWORD v5[5];

  sub_1A39A1AD0(*(_QWORD *)(v1 + 16), (uint64_t)v4);
  static TTSMarkup.SpeechBuilder.buildExpression(_:)(v5, v4);
  sub_1A39A47C4((uint64_t)v4);
  static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v5, a1);
  return sub_1A39A47C4((uint64_t)v5);
}

uint64_t sub_1A39A1A8C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 24);
  return swift_deallocObject();
}

uint64_t sub_1A39A1AB8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1A39A1AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1A39A1B14(uint64_t a1)
{
  _s8SentenceVwxx(a1);
  return a1;
}

_QWORD *sub_1A39A1B48(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1A39A1B5C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1A39A1B70(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1A39A1B84(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1A39A1B98(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1A39A1BAC()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1A39A1BBC()
{
  return sub_1A3AB5210();
}

_QWORD *sub_1A39A1BD4(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *sub_1A39A1BE8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1A39A1BF8(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t CoreSynthesizer.Utterance.ssml.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v9;
  char v10;

  sub_1A39A0888(v0 + 144, (uint64_t)&v8);
  if (!v10)
    return v8;
  if (v10 == 1)
  {
    MEMORY[0x1E0C80A78](v9);
    TTSMarkup.SpeechDocument.init(_:)((uint64_t (*)(void))sub_1A39A323C, v5);
    swift_bridgeObjectRelease();
    v1 = TTSMarkupSpeech.ssml.getter((uint64_t)&type metadata for TTSMarkup.SpeechDocument, (uint64_t)&protocol witness table for TTSMarkup.SpeechDocument);
    sub_1A39A1B14((uint64_t)v5);
  }
  else
  {
    sub_1A39A1AB8(&v8, (uint64_t)v5);
    v2 = v6;
    v3 = v7;
    sub_1A39A19CC(v5, v6);
    v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
    sub_1A39A47C4((uint64_t)v5);
  }
  return v1;
}

uint64_t CoreSynthesizer.Utterance.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  __int128 v20[2];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  char v28;
  int v29;
  char v30;

  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  LOBYTE(v20[0]) = *(_BYTE *)(v1 + 16);
  sub_1A39A33AC();
  sub_1A3AB48D4();
  LOBYTE(v20[0]) = *(_BYTE *)(v1 + 17);
  sub_1A39A33F0();
  sub_1A3AB48D4();
  sub_1A3AB5708();
  v3 = *(_QWORD *)(v1 + 40);
  if (!v3)
  {
    sub_1A3AB5714();
    v13 = *(_QWORD *)(v1 + 136);
    if (v13)
      goto LABEL_3;
LABEL_5:
    sub_1A3AB5714();
    goto LABEL_6;
  }
  v4 = *(_BYTE *)(v1 + 132);
  v5 = *(_DWORD *)(v1 + 128);
  v7 = *(_QWORD *)(v1 + 112);
  v6 = *(_QWORD *)(v1 + 120);
  v9 = *(_QWORD *)(v1 + 80);
  v8 = *(_QWORD *)(v1 + 88);
  v11 = *(_QWORD *)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 72);
  v12 = *(_OWORD *)(v1 + 48);
  *(_QWORD *)&v20[0] = *(_QWORD *)(v1 + 32);
  *((_QWORD *)&v20[0] + 1) = v3;
  v20[1] = v12;
  v21 = v11;
  v22 = v10;
  v23 = v9;
  v24 = v8;
  v25 = *(_OWORD *)(v1 + 96);
  v26 = v7;
  v27 = v6;
  v28 = BYTE4(v6) & 1;
  v29 = v5;
  v30 = v4 & 1;
  sub_1A3AB5714();
  sub_1A39A3434();
  sub_1A3AB48D4();
  v13 = *(_QWORD *)(v1 + 136);
  if (!v13)
    goto LABEL_5;
LABEL_3:
  sub_1A3AB5714();
  swift_bridgeObjectRetain();
  sub_1A39A2F4C(a1, v13);
  swift_bridgeObjectRelease();
LABEL_6:
  sub_1A39A0888(v1 + 144, (uint64_t)v20);
  if ((_BYTE)v22 && v22 != 1)
  {
    sub_1A39A1AB8(v20, (uint64_t)v17);
    v14 = v18;
    v15 = v19;
    sub_1A39A19CC(v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v15 + 48))(v14, v15);
    sub_1A39A47C4((uint64_t)v17);
  }
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  sub_1A3AB5708();
  return sub_1A3AB5714();
}

uint64_t CoreSynthesizer.Utterance.hashValue.getter()
{
  _BYTE v1[72];

  sub_1A3AB56FC();
  CoreSynthesizer.Utterance.hash(into:)((uint64_t)v1);
  return sub_1A3AB5738();
}

uint64_t sub_1A39A1FA4()
{
  _BYTE v1[72];

  sub_1A3AB56FC();
  CoreSynthesizer.Utterance.hash(into:)((uint64_t)v1);
  return sub_1A3AB5738();
}

uint64_t sub_1A39A1FE4()
{
  _BYTE v1[72];

  sub_1A3AB56FC();
  CoreSynthesizer.Utterance.hash(into:)((uint64_t)v1);
  return sub_1A3AB5738();
}

uint64_t sub_1A39A201C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A39A202C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v6[9] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  v6[11] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[12] = swift_task_alloc();
  sub_1A3AB50FC();
  v6[13] = swift_task_alloc();
  v6[14] = *(_QWORD *)(a3 - 8);
  v6[15] = swift_task_alloc();
  v9 = swift_getAssociatedTypeWitness();
  v6[16] = v9;
  v6[17] = *(_QWORD *)(v9 - 8);
  v6[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A39A2158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v10;
  _QWORD *v11;
  int *v12;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = sub_1A3AB4850();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v4);
  sub_1A3AB4B44();
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  swift_getAssociatedConformanceWitness();
  sub_1A3AB512C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    v8 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
  }
  else
  {
    v10 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    v12 = (int *)((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v11;
    *v11 = v0;
    v11[1] = sub_1A39A22F4;
    return ((uint64_t (*)(_QWORD, _QWORD))v12)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 96));
  }
}

uint64_t sub_1A39A22F4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1A39A2360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v9;
  _QWORD *v10;
  int *v11;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  sub_1A3AB4C58();
  sub_1A3AB4C28();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  swift_getAssociatedConformanceWitness();
  sub_1A3AB512C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    v7 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
  }
  else
  {
    v9 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    v11 = (int *)((char *)v9 + *v9);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v10;
    *v10 = v0;
    v10[1] = sub_1A39A22F4;
    return ((uint64_t (*)(_QWORD, _QWORD))v11)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 96));
  }
}

uint64_t sub_1A39A24E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39A2584(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  char v20;
  char v21;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(float *)(*(_QWORD *)(v3 + 56) + 4 * v11);
    swift_bridgeObjectRetain();
    v19 = sub_1A39A2734(v16, v17);
    v21 = v20;
    result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(float *)(*(_QWORD *)(a2 + 56) + 4 * v19) != v18)
      return 0;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
  return result;
}

unint64_t sub_1A39A2734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A3AB56FC();
  sub_1A3AB4A30();
  v4 = sub_1A3AB5738();
  return sub_1A39A2798(a1, a2, v4);
}

unint64_t sub_1A39A2798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1A3AB5654() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1A3AB5654() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1A39A2878(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1A39A2948(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1A39A47E4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1A39A47E4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1A39A47C4((uint64_t)v12);
  return v7;
}

uint64_t sub_1A39A2948(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1A3AB5144();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1A39A2B00(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1A3AB5318();
  if (!v8)
  {
    sub_1A3AB5438();
    __break(1u);
LABEL_17:
    result = sub_1A3AB54BC();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1A39A2B00(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1A39A2B94(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1A39A2D6C(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1A39A2D6C(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1A39A2B94(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1A39A2D08(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1A3AB52B8();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1A3AB5438();
      __break(1u);
LABEL_10:
      v2 = sub_1A3AB4AB4();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1A3AB54BC();
    __break(1u);
LABEL_14:
    result = sub_1A3AB5438();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1A39A2D08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1A39A4820(&qword_1EE6D2A50);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1A39A2D6C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D2A50);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

void sub_1A39A2EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
}

uint64_t sub_1A39A2F28(uint64_t a1)
{
  _s9UtteranceV6SpeechOwxx(a1);
  return a1;
}

uint64_t sub_1A39A2F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;

  v2 = a2 + 64;
  v3 = 1 << *(_BYTE *)(a2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a2 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  while (1)
  {
    if (v5)
    {
      v5 &= v5 - 1;
      goto LABEL_5;
    }
    v10 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v10 >= v6)
      goto LABEL_19;
    v11 = *(_QWORD *)(v2 + 8 * v10);
    ++v9;
    if (!v11)
    {
      v9 = v10 + 1;
      if (v10 + 1 >= v6)
        goto LABEL_19;
      v11 = *(_QWORD *)(v2 + 8 * v9);
      if (!v11)
        break;
    }
LABEL_18:
    v5 = (v11 - 1) & v11;
LABEL_5:
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    swift_bridgeObjectRelease();
    sub_1A3AB5720();
    result = sub_1A3AB5738();
    v8 ^= result;
  }
  v12 = v10 + 2;
  if (v12 >= v6)
  {
LABEL_19:
    swift_release();
    return sub_1A3AB5708();
  }
  v11 = *(_QWORD *)(v2 + 8 * v12);
  if (v11)
  {
    v9 = v12;
    goto LABEL_18;
  }
  while (1)
  {
    v9 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v9 >= v6)
      goto LABEL_19;
    v11 = *(_QWORD *)(v2 + 8 * v9);
    ++v12;
    if (v11)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t _s12TextToSpeech15CoreSynthesizerC9UtteranceV0C0O2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  __int128 v18[2];
  char v19;

  sub_1A39A0888(a1, (uint64_t)v18);
  if (v19 && v19 != 1)
  {
    sub_1A39A1AB8(v18, (uint64_t)v15);
    v5 = v16;
    v6 = v17;
    sub_1A39A19CC(v15, v16);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(v5, v6);
    v3 = v7;
    sub_1A39A47C4((uint64_t)v15);
  }
  else
  {
    v3 = *((_QWORD *)&v18[0] + 1);
    v4 = *(_QWORD *)&v18[0];
  }
  sub_1A39A0888(a2, (uint64_t)v18);
  if (v19 && v19 != 1)
  {
    sub_1A39A1AB8(v18, (uint64_t)v15);
    v9 = v16;
    v10 = v17;
    sub_1A39A19CC(v15, v16);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 48))(v9, v10);
    v8 = v12;
    sub_1A39A47C4((uint64_t)v15);
    if (v4 != v11)
    {
LABEL_12:
      v13 = sub_1A3AB5654();
      goto LABEL_13;
    }
  }
  else
  {
    v8 = *((_QWORD *)&v18[0] + 1);
    if (v4 != *(_QWORD *)&v18[0])
      goto LABEL_12;
  }
  if (v3 != v8)
    goto LABEL_12;
  v13 = 1;
LABEL_13:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

uint64_t sub_1A39A323C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v17[5];
  uint64_t v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[6];

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(unsigned int *)(v1 + 32);
  v5 = *(_BYTE *)(v1 + 36);
  v6 = *(unsigned int *)(v1 + 40);
  v7 = *(_BYTE *)(v1 + 44);
  v15 = *(unsigned int *)(v1 + 48);
  v8 = *(_BYTE *)(v1 + 52);
  swift_bridgeObjectRetain();
  TTSMarkup.SpeechText.init(_:)(v2, v3, v24);
  v9 = (void *)v24[0];
  v18[0] = v24[0];
  v18[1] = v24[1];
  v18[2] = v24[2];
  v19 = v24[3];
  LOBYTE(v21[0]) = v5;
  TTSMarkupSpeech.rate(_:)(v4 | ((unint64_t)v5 << 32), (uint64_t)&type metadata for TTSMarkup.SpeechText, (uint64_t)&protocol witness table for TTSMarkup.SpeechText, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v10 = v22;
  v11 = v23;
  sub_1A39A19CC(v21, v22);
  LOBYTE(v24[0]) = v7;
  TTSMarkupSpeech.pitch(_:)(v6 | ((unint64_t)v7 << 32), v10, v11, v18);
  v12 = v19;
  v13 = v20;
  sub_1A39A19CC(v18, v19);
  LOBYTE(v24[0]) = v8;
  TTSMarkupSpeech.volume(_:)(v15 | ((unint64_t)v8 << 32), v12, v13, v17);
  static TTSMarkup.SpeechBuilder.buildExpression(_:)(v24, v17);
  sub_1A39A47C4((uint64_t)v17);
  sub_1A39A47C4((uint64_t)v18);
  sub_1A39A47C4((uint64_t)v21);
  static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v24, a1);
  return sub_1A39A47C4((uint64_t)v24);
}

unint64_t sub_1A39A33AC()
{
  unint64_t result;

  result = qword_1EE6D2A08;
  if (!qword_1EE6D2A08)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSSpeechQueue.QueuingBehavior, &type metadata for TTSSpeechQueue.QueuingBehavior);
    atomic_store(result, (unint64_t *)&qword_1EE6D2A08);
  }
  return result;
}

unint64_t sub_1A39A33F0()
{
  unint64_t result;

  result = qword_1EE6D2A10;
  if (!qword_1EE6D2A10)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSSpeechQueue.IsoPrioritizedBehavior, &type metadata for TTSSpeechQueue.IsoPrioritizedBehavior);
    atomic_store(result, (unint64_t *)&qword_1EE6D2A10);
  }
  return result;
}

unint64_t sub_1A39A3434()
{
  unint64_t result;

  result = qword_1EE6D2478;
  if (!qword_1EE6D2478)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Voice, &type metadata for CoreSynthesizer.Voice);
    atomic_store(result, (unint64_t *)&qword_1EE6D2478);
  }
  return result;
}

uint64_t _s12TextToSpeech15CoreSynthesizerC9UtteranceV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[5];
  __int16 v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  int v66;
  char v67;
  int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  int v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  int v96;
  char v97;

  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v4 || (v5 = sub_1A3AB5654(), v6 = 0, (v5 & 1) != 0))
  {
    LOBYTE(v70) = *(_BYTE *)(a1 + 16);
    LOBYTE(v59[0]) = *(_BYTE *)(a2 + 16);
    if (!static TTSSpeechQueue.QueuingBehavior.== infix(_:_:)((unsigned __int8 *)&v70, (unsigned __int8 *)v59))
      goto LABEL_20;
    LOBYTE(v70) = *(_BYTE *)(a1 + 17);
    LOBYTE(v59[0]) = *(_BYTE *)(a2 + 17);
    if ((static TTSSpeechQueue.IsoPrioritizedBehavior.== infix(_:_:)(&v70, v59) & 1) == 0
      || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
    {
      goto LABEL_20;
    }
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 56);
    v12 = *(_QWORD *)(a1 + 64);
    v11 = *(_QWORD *)(a1 + 72);
    v14 = *(_QWORD *)(a1 + 80);
    v13 = *(_QWORD *)(a1 + 88);
    v16 = *(_QWORD *)(a1 + 96);
    v15 = *(_QWORD *)(a1 + 104);
    v17 = *(void **)(a1 + 112);
    v18 = *(_QWORD *)(a1 + 120);
    v19 = *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32);
    v20 = *(_QWORD *)(a2 + 32);
    v21 = *(_QWORD *)(a2 + 40);
    v22 = *(_QWORD *)(a2 + 48);
    v23 = *(_QWORD *)(a2 + 56);
    v24 = *(_QWORD *)(a2 + 64);
    v25 = *(_QWORD *)(a2 + 72);
    v26 = *(_QWORD *)(a2 + 80);
    v27 = *(_QWORD *)(a2 + 88);
    v28 = *(void **)(a2 + 112);
    v57 = *(_QWORD *)(a2 + 104);
    v58 = *(_QWORD *)(a2 + 96);
    v29 = *(unsigned int *)(a2 + 128) | ((unint64_t)*(unsigned __int8 *)(a2 + 132) << 32);
    v30 = HIDWORD(v19);
    v31 = *(_QWORD *)(a2 + 120);
    if (v8)
    {
      v70 = *(_QWORD *)(a1 + 32);
      v71 = v8;
      v72 = v10;
      v73 = v9;
      v74 = v12;
      v75 = v11;
      v76 = v14;
      v77 = v13;
      v78 = v16;
      v79 = v15;
      v80 = v17;
      v81 = v18;
      v82 = v19;
      v83 = BYTE4(v19);
      v52 = v14;
      v53 = v13;
      v50 = v9;
      v51 = v11;
      v49 = v7;
      v55 = v10;
      v56 = v12;
      v54 = v16;
      v48 = v19;
      if (v21)
      {
        v59[0] = v20;
        v59[1] = v21;
        v59[2] = v22;
        v59[3] = v23;
        v59[4] = v24;
        v60 = v25;
        v61 = v26;
        v62 = v27;
        v63 = v58;
        v64 = v57;
        v65 = v28;
        v66 = v31;
        v67 = BYTE4(v31) & 1;
        v68 = v29;
        v69 = BYTE4(v29) & 1;
        v47 = v15;
        v32 = v17;
        sub_1A39A4780();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v33 = v32;
        v34 = sub_1A3AB494C();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1A39A2EB8(v49, v8, v55, v50, v56, v51, v52, v53, v54, v47, v32);
        if ((v34 & 1) == 0)
          goto LABEL_20;
        goto LABEL_14;
      }
      v38 = v15;
      v39 = v17;
      v45 = v26;
      v46 = v27;
      v43 = v23;
      v44 = v24;
      v42 = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40 = v39;
      v22 = v42;
      v23 = v43;
      v24 = v44;
      v26 = v45;
      v27 = v46;
      LODWORD(v19) = v48;
      v17 = v39;
      v15 = v38;
      v16 = v54;
      v10 = v55;
      v7 = v49;
      v9 = v50;
      v12 = v56;
      v11 = v51;
      v14 = v52;
      v13 = v53;
    }
    else if (!v21)
    {
LABEL_14:
      v35 = *(_QWORD *)(a2 + 136);
      if (*(_QWORD *)(a1 + 136))
      {
        if (!v35)
          goto LABEL_20;
        swift_bridgeObjectRetain();
        v36 = swift_bridgeObjectRetain();
        v37 = sub_1A39A2584(v36, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v37 & 1) == 0)
          goto LABEL_20;
LABEL_23:
        if ((_s12TextToSpeech15CoreSynthesizerC9UtteranceV0C0O2eeoiySbAG_AGtFZ_0(a1 + 144, a2 + 144) & 1) != 0
          && *(_QWORD *)(a1 + 192) == *(_QWORD *)(a2 + 192))
        {
          v6 = *(_BYTE *)(a1 + 200) ^ *(_BYTE *)(a2 + 200) ^ 1;
          return v6 & 1;
        }
        goto LABEL_20;
      }
      if (!v35)
        goto LABEL_23;
LABEL_20:
      v6 = 0;
      return v6 & 1;
    }
    v70 = v7;
    v71 = v8;
    v72 = v10;
    v73 = v9;
    v74 = v12;
    v75 = v11;
    v76 = v14;
    v77 = v13;
    v78 = v16;
    v79 = v15;
    v80 = v17;
    v81 = v18;
    v82 = v19;
    v83 = v30;
    v84 = v20;
    v85 = v21;
    v86 = v22;
    v87 = v23;
    v88 = v24;
    v89 = v25;
    v90 = v26;
    v91 = v27;
    v92 = v58;
    v93 = v57;
    v94 = v28;
    v95 = v31;
    v96 = v29;
    v97 = BYTE4(v29);
    sub_1A39A07C8(v20, v21, v22, v23, v24, v25, v26, v27, v58, v57, v28);
    sub_1A39A469C((uint64_t)&v70);
    goto LABEL_20;
  }
  return v6 & 1;
}

unint64_t sub_1A39A3870()
{
  unint64_t result;

  result = qword_1EE6D2A20;
  if (!qword_1EE6D2A20)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Utterance.Speech, &type metadata for CoreSynthesizer.Utterance.Speech);
    atomic_store(result, (unint64_t *)&qword_1EE6D2A20);
  }
  return result;
}

unint64_t sub_1A39A38B8()
{
  unint64_t result;

  result = qword_1EE6D2A28;
  if (!qword_1EE6D2A28)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Utterance.ReplacementOptions, &type metadata for CoreSynthesizer.Utterance.ReplacementOptions);
    atomic_store(result, (unint64_t *)&qword_1EE6D2A28);
  }
  return result;
}

unint64_t sub_1A39A3900()
{
  unint64_t result;

  result = qword_1EE6D2A30;
  if (!qword_1EE6D2A30)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Utterance.ReplacementOptions, &type metadata for CoreSynthesizer.Utterance.ReplacementOptions);
    atomic_store(result, (unint64_t *)&qword_1EE6D2A30);
  }
  return result;
}

unint64_t sub_1A39A3948()
{
  unint64_t result;

  result = qword_1EE6D2A38;
  if (!qword_1EE6D2A38)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Utterance.ReplacementOptions, &type metadata for CoreSynthesizer.Utterance.ReplacementOptions);
    atomic_store(result, (unint64_t *)&qword_1EE6D2A38);
  }
  return result;
}

unint64_t sub_1A39A3990()
{
  unint64_t result;

  result = qword_1EE6D2A40;
  if (!qword_1EE6D2A40)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Utterance.ReplacementOptions, &type metadata for CoreSynthesizer.Utterance.ReplacementOptions);
    atomic_store(result, (unint64_t *)&qword_1EE6D2A40);
  }
  return result;
}

unint64_t sub_1A39A39D8()
{
  unint64_t result;

  result = qword_1EE6D2A48;
  if (!qword_1EE6D2A48)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Utterance, &type metadata for CoreSynthesizer.Utterance);
    atomic_store(result, (unint64_t *)&qword_1EE6D2A48);
  }
  return result;
}

uint64_t sub_1A39A3A1C()
{
  return MEMORY[0x1E0DEA978];
}

uint64_t _s9UtteranceVwxx(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  result = swift_bridgeObjectRelease();
  v3 = *(unsigned __int8 *)(a1 + 184);
  if (v3 == 2)
    return sub_1A39A47C4(a1 + 144);
  if (v3 <= 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s9UtteranceVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  __int128 v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v5;
    v6 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    v7 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v7;
    v8 = *(void **)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v8;
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = v8;
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v10;
    *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v12;
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v13 = *(unsigned __int8 *)(a2 + 184);
  swift_bridgeObjectRetain();
  if (v13 == 2)
  {
    v15 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 168) = v15;
    (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 144, a2 + 144);
    *(_BYTE *)(a1 + 184) = 2;
  }
  else
  {
    v14 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = v14;
    if (v13 == 1)
    {
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
      *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
      *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
      *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
      *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
      *(_BYTE *)(a1 + 184) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 184) = 0;
    }
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  return a1;
}

uint64_t _s9UtteranceVwca(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  int v11;
  void *v12;
  int v13;
  int v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = (_OWORD *)(a1 + 32);
  v5 = (_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v7 = *(void **)(a2 + 112);
      v8 = *(void **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v7;
      v9 = v7;

      v10 = *(_DWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
      *(_DWORD *)(a1 + 120) = v10;
      v11 = *(_DWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
      *(_DWORD *)(a1 + 128) = v11;
    }
    else
    {
      sub_1A39A3FE0(a1 + 32);
      v17 = *(_OWORD *)(a2 + 48);
      v16 = *(_OWORD *)(a2 + 64);
      *v4 = *v5;
      *(_OWORD *)(a1 + 48) = v17;
      *(_OWORD *)(a1 + 64) = v16;
      v19 = *(_OWORD *)(a2 + 96);
      v18 = *(_OWORD *)(a2 + 112);
      v20 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
      *(_OWORD *)(a1 + 96) = v19;
      *(_OWORD *)(a1 + 112) = v18;
      *(_OWORD *)(a1 + 80) = v20;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v12 = *(void **)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v12;
    v13 = *(_DWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
    *(_DWORD *)(a1 + 120) = v13;
    v14 = *(_DWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
    *(_DWORD *)(a1 + 128) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v12;
  }
  else
  {
    v21 = *v5;
    v22 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v22;
    *v4 = v21;
    v23 = *(_OWORD *)(a2 + 80);
    v24 = *(_OWORD *)(a2 + 96);
    v25 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
    *(_OWORD *)(a1 + 96) = v24;
    *(_OWORD *)(a1 + 112) = v25;
    *(_OWORD *)(a1 + 80) = v23;
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1A39A2F28(a1 + 144);
    v26 = *(unsigned __int8 *)(a2 + 184);
    if (v26 == 2)
    {
      v30 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 168) = v30;
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      (**(void (***)(uint64_t, uint64_t))(v30 - 8))(a1 + 144, a2 + 144);
      *(_BYTE *)(a1 + 184) = 2;
    }
    else
    {
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      if (v26 == 1)
      {
        v27 = *(_DWORD *)(a2 + 160);
        *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
        *(_DWORD *)(a1 + 160) = v27;
        v28 = *(_DWORD *)(a2 + 168);
        *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
        *(_DWORD *)(a1 + 168) = v28;
        v29 = *(_DWORD *)(a2 + 176);
        *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
        *(_DWORD *)(a1 + 176) = v29;
        *(_BYTE *)(a1 + 184) = 1;
      }
      else
      {
        *(_BYTE *)(a1 + 184) = 0;
      }
      swift_bridgeObjectRetain();
    }
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  return a1;
}

uint64_t sub_1A39A3FE0(uint64_t a1)
{
  _s5VoiceVwxx(a1);
  return a1;
}

__n128 _s9UtteranceVwtk(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t _s9UtteranceVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 40))
  {
    v5 = *(_QWORD *)(a2 + 40);
    if (v5)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v5;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRelease();
      v6 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v6;
      swift_bridgeObjectRelease();
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRelease();
      v7 = *(void **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);

      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
      *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
      goto LABEL_6;
    }
    sub_1A39A3FE0(a1 + 32);
  }
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v10;
LABEL_6:
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1A39A2F28(a1 + 144);
    v11 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v11;
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  return a1;
}

uint64_t _s9UtteranceVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 201))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s9UtteranceVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 200) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 201) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 201) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.Utterance()
{
  return &type metadata for CoreSynthesizer.Utterance;
}

uint64_t _s5VoiceVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s9UtteranceV6SpeechOwxx(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 3)
    v1 = *(_DWORD *)a1 + 3;
  if (v1 == 2)
    return sub_1A39A47C4(a1);
  else
    return swift_bridgeObjectRelease();
}

uint64_t _s9UtteranceV6SpeechOwcp(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 3)
    v3 = *(_DWORD *)a2 + 3;
  if (v3 == 2)
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 2;
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    if (v3 == 1)
    {
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 40) = 0;
    }
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t _s9UtteranceV6SpeechOwca(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 == 2)
      sub_1A39A47C4(a1);
    else
      swift_bridgeObjectRelease();
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      v9 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 2;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      if (v5 == 1)
      {
        v6 = *(_DWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
        *(_DWORD *)(a1 + 16) = v6;
        v7 = *(_DWORD *)(a2 + 24);
        *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
        *(_DWORD *)(a1 + 24) = v7;
        v8 = *(_DWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
        *(_DWORD *)(a1 + 32) = v8;
        *(_BYTE *)(a1 + 40) = 1;
      }
      else
      {
        *(_BYTE *)(a1 + 40) = 0;
      }
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

__n128 _s9UtteranceV6SpeechOwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s9UtteranceV6SpeechOwta(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  char v7;
  __int128 v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 == 2)
      sub_1A39A47C4(a1);
    else
      swift_bridgeObjectRelease();
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v7 = 2;
    }
    else if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 29) = *(_QWORD *)(a2 + 29);
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(_BYTE *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t _s9UtteranceV6SpeechOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t _s9UtteranceV6SpeechOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A39A4638(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t sub_1A39A4654(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.Utterance.Speech()
{
  return &type metadata for CoreSynthesizer.Utterance.Speech;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.Utterance.ReplacementOptions()
{
  return &type metadata for CoreSynthesizer.Utterance.ReplacementOptions;
}

uint64_t sub_1A39A469C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *(_QWORD *)(a1 + 104);
  v2 = *(_QWORD *)(a1 + 120);
  v11 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 160);
  v10 = *(_OWORD *)(a1 + 168);
  v8 = *(void **)(a1 + 184);
  sub_1A39A2EB8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(void **)(a1 + 80));
  sub_1A39A2EB8(v12, v11, v2, v3, v4, v5, v6, v7, v10, *((uint64_t *)&v10 + 1), v8);
  return a1;
}

unint64_t sub_1A39A4780()
{
  unint64_t result;

  result = qword_1EE6D2480;
  if (!qword_1EE6D2480)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Voice, &type metadata for CoreSynthesizer.Voice);
    atomic_store(result, (unint64_t *)&qword_1EE6D2480);
  }
  return result;
}

uint64_t sub_1A39A47C4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1A39A47E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1A39A4820(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1A8597720]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void sub_1A39A486C()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _OWORD v20[5];
  uint64_t v21;
  __int128 v22[2];
  uint64_t v23;
  uint64_t v24;
  char v25;

  v0 = (void *)sub_1A3AB4958();
  v1 = TTSLocString(v0);

  if (v1)
  {
    v2 = sub_1A3AB497C();
    v4 = v3;

    sub_1A39A4820(&qword_1EE6D2A58);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
    *(_QWORD *)(inited + 32) = 30049;
    *(_QWORD *)(inited + 40) = 0xE200000000000000;
    v22[0] = xmmword_1A3ABF9A0;
    v22[1] = xmmword_1A3ABF9B0;
    v23 = sub_1A3A65558();
    v24 = v6;
    v25 = 0;
    v7 = sub_1A39A4EBC((uint64_t)&unk_1E4A97038, &qword_1EE6D2A80, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_1A39A50A8);
    sub_1A39A4820(&qword_1EE6D2A60);
    swift_arrayDestroy();
    v8 = sub_1A39A4EBC(MEMORY[0x1E0DEE9D8], &qword_1EE6D2A78, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_1A39A50B0);
    sub_1A3A66DA8(v22, v7, v8, (uint64_t)&unk_1E4A96FD8, (uint64_t)&unk_1E4A97008, (uint64_t)v20);
    v9 = v20[3];
    *(_OWORD *)(inited + 80) = v20[2];
    *(_OWORD *)(inited + 96) = v9;
    *(_OWORD *)(inited + 112) = v20[4];
    *(_QWORD *)(inited + 128) = v21;
    v10 = v20[1];
    *(_OWORD *)(inited + 48) = v20[0];
    *(_OWORD *)(inited + 64) = v10;
    v11 = sub_1A39A4B10(inited);
    sub_1A39A4820(&qword_1EE6D2A68);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1A3ABF990;
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = 0x694D797244746577;
    *(_QWORD *)(v13 + 24) = 0xE900000000000078;
    v14 = (void *)sub_1A3AB4958();
    v15 = TTSLocString(v14);

    if (v15)
    {
      v16 = sub_1A3AB497C();
      v18 = v17;

      *(_QWORD *)(v13 + 32) = v16;
      *(_QWORD *)(v13 + 40) = v18;
      *(_QWORD *)(v13 + 48) = 0x42C8000000000000;
      *(_DWORD *)(v13 + 56) = 1065353216;
      *(_QWORD *)(v13 + 64) = 0;
      *(_QWORD *)(v13 + 72) = 0;
      *(_QWORD *)(v12 + 32) = v13 | 0xC000000000000000;
      v19 = sub_1A39A9D98();
      sub_1A3A6B480(v2, v4, v11, v12, 0xD00000000000001DLL, 0x80000001A3AEF280, 0, 0, (uint64_t)&qword_1EE6D5DD8, v19 & 1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t sub_1A39A4B10(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A39A4820(&qword_1EE6D2A70);
  v2 = sub_1A3AB54B0();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v21 = v2 + 64;
  swift_retain();
  v5 = a1 + 64;
  while (1)
  {
    v22 = v4;
    v6 = *(_QWORD *)(v5 - 24);
    v23 = *(_QWORD *)(v5 - 32);
    v7 = *(_QWORD *)(v5 - 16);
    v8 = *(_QWORD *)(v5 - 8);
    v9 = *(_QWORD *)v5;
    v10 = *(_QWORD *)(v5 + 8);
    v11 = *(_QWORD *)(v5 + 16);
    v12 = *(_QWORD *)(v5 + 24);
    v13 = *(_BYTE *)(v5 + 32);
    v24 = *(_OWORD *)(v5 + 56);
    v25 = *(_OWORD *)(v5 + 40);
    swift_bridgeObjectRetain();
    sub_1A39A5070(v7, v8, v9, v10, v11, v12, v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1A39A2734(v23, v6);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = (uint64_t *)(v3[6] + 16 * result);
    *v16 = v23;
    v16[1] = v6;
    v17 = v3[7] + 88 * result;
    *(_QWORD *)v17 = v7;
    *(_QWORD *)(v17 + 8) = v8;
    *(_QWORD *)(v17 + 16) = v9;
    *(_QWORD *)(v17 + 24) = v10;
    *(_QWORD *)(v17 + 32) = v11;
    *(_QWORD *)(v17 + 40) = v12;
    *(_BYTE *)(v17 + 48) = v13;
    *(_OWORD *)(v17 + 56) = v25;
    *(_OWORD *)(v17 + 72) = v24;
    v18 = v3[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v3[2] = v20;
    v5 += 104;
    v4 = v22 - 1;
    if (v22 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *sub_1A39A4CDC()
{
  if (qword_1EE6D5DD0 != -1)
    swift_once();
  return &qword_1EE6D5DD8;
}

uint64_t static TTSAudioEffect.Reverb.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (qword_1EE6D5DD0 != -1)
    swift_once();
  v2 = unk_1EE6D5DE0;
  v3 = qword_1EE6D5DE8;
  v4 = qword_1EE6D5E00;
  v5 = byte_1EE6D5E08;
  v6 = qword_1EE6D5E10;
  v7 = unk_1EE6D5E18;
  v8 = qword_1EE6D5E20;
  v9 = unk_1EE6D5E28;
  *(_QWORD *)a1 = qword_1EE6D5DD8;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)algn_1EE6D5DF0;
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t sub_1A39A4DEC(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x1A85964CC](*(_QWORD *)(v1 + 40), a1, 4);
  return sub_1A39A4E20(a1, v3);
}

unint64_t sub_1A39A4E20(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1A39A4EBC(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v3;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  uint64_t v25;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return MEMORY[0x1E0DEE9E0];
  sub_1A39A4820(a2);
  v5 = (_QWORD *)sub_1A3AB54B0();
  v6 = *(_DWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(unsigned __int8 *)(a1 + 76);
  v24 = *(unsigned int *)(a1 + 72);
  v12 = *(_BYTE *)(a1 + 77);
  result = sub_1A39A4DEC(v6);
  if ((v14 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return MEMORY[0x1E0DEE9E0];
  }
  v15 = v11;
  v16 = (char *)(a1 + 125);
  v17 = v24 | (v15 << 32);
  while (1)
  {
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v5[6] + 4 * result) = v6;
    v18 = v5[7] + 40 * result;
    *(_QWORD *)v18 = v7;
    *(_QWORD *)(v18 + 8) = v8;
    *(_QWORD *)(v18 + 16) = v9;
    *(_QWORD *)(v18 + 24) = v10;
    *(_BYTE *)(v18 + 36) = BYTE4(v17);
    *(_DWORD *)(v18 + 32) = v17;
    *(_BYTE *)(v18 + 37) = v12 & 1;
    v19 = v5[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      break;
    v5[2] = v21;
    a3(v7, v8, v9, v10, v17);
    if (!--v3)
      return (unint64_t)v5;
    v6 = *(_DWORD *)(v16 - 45);
    v25 = *(_QWORD *)(v16 - 37);
    v8 = *(_QWORD *)(v16 - 29);
    v9 = *(_QWORD *)(v16 - 21);
    v10 = *(_QWORD *)(v16 - 13);
    v17 = *(unsigned int *)(v16 - 5) | ((unint64_t)*(v16 - 1) << 32);
    v12 = *v16;
    result = sub_1A39A4DEC(v6);
    v16 += 48;
    v7 = v25;
    if ((v22 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A39A503C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A39A5070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A39A50A8()
{
  return swift_bridgeObjectRetain();
}

TextToSpeech::SSMLTag_optional __swiftcall SSMLTag.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  TextToSpeech::SSMLTag_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1A3AB54E0();
  result.value = swift_bridgeObjectRelease();
  v5 = 16;
  if (v3 < 0x10)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t SSMLTag.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A39A5138 + 4 * byte_1A3ABF9C0[*v0]))(0x6B61657073, 0xE500000000000000);
}

uint64_t sub_1A39A5138()
{
  return 0x73612D796173;
}

uint64_t sub_1A39A514C()
{
  return 0x79646F736F7270;
}

uint64_t sub_1A39A5164()
{
  return 0x6F69647561;
}

uint64_t sub_1A39A5174()
{
  return 0x656D656E6F6870;
}

uint64_t sub_1A39A518C()
{
  return 112;
}

uint64_t sub_1A39A5198()
{
  return 115;
}

uint64_t sub_1A39A51A4()
{
  return 6452595;
}

uint64_t sub_1A39A51B4()
{
  return 0x6563696F76;
}

uint64_t sub_1A39A51C4()
{
  return 1735287148;
}

uint64_t sub_1A39A51D4()
{
  return 0x7369736168706D65;
}

uint64_t sub_1A39A51EC(uint64_t a1)
{
  return a1 + 495;
}

uint64_t sub_1A39A51F4()
{
  return 1802658157;
}

uint64_t sub_1A39A5204()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_1A39A521C()
{
  return 1668506980;
}

uint64_t sub_1A39A522C()
{
  return 0x74786554776172;
}

uint64_t sub_1A39A5244()
{
  return sub_1A39A5250();
}

uint64_t sub_1A39A5250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = SSMLTag.rawValue.getter();
  v2 = v1;
  if (v0 == SSMLTag.rawValue.getter() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1A39A52E4()
{
  sub_1A3AB56FC();
  SSMLTag.rawValue.getter();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A39A5348()
{
  SSMLTag.rawValue.getter();
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39A5398()
{
  sub_1A3AB56FC();
  SSMLTag.rawValue.getter();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

TextToSpeech::SSMLTag_optional sub_1A39A53F8(Swift::String *a1)
{
  return SSMLTag.init(rawValue:)(*a1);
}

uint64_t sub_1A39A5404@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SSMLTag.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A39A5438()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_parent;
  swift_beginAccess();
  return MEMORY[0x1A85978E8](v1);
}

void sub_1A39A5480(void *a1)
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();

}

void (*sub_1A39A54D4(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_parent;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1A85978E8](v5);
  return sub_1A39A5544;
}

void sub_1A39A5544(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();

  }
  free(v3);
}

uint64_t sub_1A39A55AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tag);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t sub_1A39A55F8(char *a1)
{
  uint64_t v1;
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tag);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t (*sub_1A39A5648())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39A568C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagName);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1A39A56E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagName);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1A39A573C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1A39A5780(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A39A4820(&qword_1EE6D2360);
  v2 = (_QWORD *)sub_1A3AB54B0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1A39A2734(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1A39A58A0()
{
  return sub_1A39A64B8();
}

uint64_t sub_1A39A58AC(uint64_t a1)
{
  return sub_1A39A6508(a1, &OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_attributes);
}

uint64_t (*sub_1A39A58B8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39A58FC()
{
  return sub_1A39A64B8();
}

uint64_t sub_1A39A5908(uint64_t a1)
{
  return sub_1A39A6508(a1, &OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_children);
}

uint64_t (*sub_1A39A5914())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39A5958()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_range;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_1A39A599C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_range);
  result = swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1A39A59F0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39A5A34()
{
  return sub_1A39A5A9C(&OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagStartRange);
}

uint64_t sub_1A39A5A40(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1A39A5AEC(a1, a2, a3, &OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagStartRange);
}

uint64_t (*sub_1A39A5A4C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39A5A90()
{
  return sub_1A39A5A9C(&OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagEndRange);
}

uint64_t sub_1A39A5A9C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + *a1;
  swift_beginAccess();
  return *(_QWORD *)v2;
}

uint64_t sub_1A39A5AE0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1A39A5AEC(a1, a2, a3, &OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagEndRange);
}

uint64_t sub_1A39A5AEC(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;

  v8 = v4 + *a4;
  result = swift_beginAccess();
  *(_QWORD *)v8 = a1;
  *(_QWORD *)(v8 + 8) = a2;
  *(_BYTE *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*sub_1A39A5B48())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39A5B8C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_utf8StartOffset;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_1A39A5BD0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_utf8StartOffset);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_1A39A5C18())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39A5C5C()
{
  return sub_1A39A669C(&OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_rawText);
}

uint64_t sub_1A39A5C68(uint64_t a1, uint64_t a2)
{
  return sub_1A39A66F8(a1, a2, &OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_rawText);
}

uint64_t (*sub_1A39A5C74())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_1A39A5CB8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  objc_class *v8;
  id v17;

  v17 = objc_allocWithZone(v8);
  return sub_1A39A5D40(a1, a2, a3, a4, a5, a6, a7, a8);
}

id sub_1A39A5D40(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  objc_super v26;

  v14 = *a1;
  swift_unknownObjectWeakInit();
  v15 = OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_attributes;
  v16 = v8;
  v17 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v8[v15] = sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_children] = v17;
  v18 = &v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagStartRange];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 1;
  v19 = &v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagEndRange];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 1;
  v20 = &v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_rawText];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tag] = v14;
  v21 = &v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_tagName];
  *(_QWORD *)v21 = a2;
  *((_QWORD *)v21 + 1) = a3;
  v22 = &v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_range];
  *(_QWORD *)v22 = a4;
  *((_QWORD *)v22 + 1) = a5;
  swift_beginAccess();
  *(_QWORD *)v20 = a6;
  *((_QWORD *)v20 + 1) = a7;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v16[OBJC_IVAR____TtC12TextToSpeech14ParsedSSMLNode_utf8StartOffset] = a8;

  v26.receiver = v16;
  v26.super_class = (Class)type metadata accessor for ParsedSSMLNode();
  return objc_msgSendSuper2(&v26, sel_init);
}

uint64_t type metadata accessor for ParsedSSMLNode()
{
  return objc_opt_self();
}

void ParsedSSMLNode.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ParsedSSMLNode.__deallocating_deinit()
{
  return sub_1A39A8C1C(type metadata accessor for ParsedSSMLNode);
}

void sub_1A39A5F8C(uint64_t a1)
{
  sub_1A39A6084(a1, 0xD000000000000021, 0x80000001A3AEF760, &qword_1EE6E6CF0);
}

void sub_1A39A5FB0(uint64_t a1)
{
  sub_1A39A6084(a1, 0xD000000000000089, 0x80000001A3AEF6D0, &qword_1EE6E6CF8);
}

void sub_1A39A5FD8(uint64_t a1)
{
  sub_1A39A6084(a1, 0xD000000000000053, 0x80000001A3AEF670, &qword_1EE6E6D00);
}

void sub_1A39A5FFC(uint64_t a1)
{
  sub_1A39A6084(a1, 0xD00000000000001FLL, 0x80000001A3AEF650, &qword_1EE6E6D08);
}

void sub_1A39A6020(uint64_t a1)
{
  sub_1A39A6084(a1, 0xD000000000000080, 0x80000001A3AEF5C0, &qword_1EE6E6D10);
}

void sub_1A39A6044(uint64_t a1)
{
  sub_1A39A6084(a1, 0xD00000000000001CLL, 0x80000001A3AEF5A0, &qword_1EE6E6D18);
}

void sub_1A39A6068(uint64_t a1)
{
  sub_1A39A6084(a1, 0x242A735C5ELL, 0xE500000000000000, &qword_1EE6E6D20);
}

void sub_1A39A6084(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  id v5;
  void *v6;
  id v7;

  v5 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v6 = (void *)sub_1A3AB4958();
  v7 = objc_msgSend(v5, sel_regexForString_, v6);

  if (v7)
    *a4 = v7;
  else
    __break(1u);
}

uint64_t sub_1A39A6118()
{
  return sub_1A39A64B8();
}

uint64_t sub_1A39A6124(uint64_t a1)
{
  return sub_1A39A6508(a1, &OBJC_IVAR____TtC12TextToSpeech10SSMLParser_elementStack);
}

uint64_t (*sub_1A39A6130())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39A6174()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12TextToSpeech10SSMLParser_currentUTF16Position;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_1A39A61B8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12TextToSpeech10SSMLParser_currentUTF16Position);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_1A39A6200())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_1A39A6244()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC12TextToSpeech10SSMLParser_ssml);
  swift_beginAccess();
  return *v1;
}

void sub_1A39A6288(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC12TextToSpeech10SSMLParser_ssml);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*sub_1A39A62D8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39A631C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t result;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90);
  v3 = v2();
  v4 = (void *)(*(uint64_t (**)(void))((*v1 & *v0) + 0xA8))();
  v5 = objc_msgSend(v4, sel_length);

  result = v2();
  if (!__OFSUB__(v5, result))
    return v3;
  __break(1u);
  return result;
}

void sub_1A39A63A4()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
  v3 = (*(uint64_t (**)(void))((*v1 & *v0) + 0xC0))();
  v5 = objc_msgSend(v2, sel_substringWithRange_, v3, v4);

  if (!v5)
    __break(1u);
}

uint64_t sub_1A39A642C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xD0))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39A646C(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xD8);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A39A64AC()
{
  return sub_1A39A64B8();
}

uint64_t sub_1A39A64B8()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A39A64FC(uint64_t a1)
{
  return sub_1A39A6508(a1, &OBJC_IVAR____TtC12TextToSpeech10SSMLParser_roots);
}

uint64_t sub_1A39A6508(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1A39A6554())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39A6598()
{
  _QWORD *v0;
  uint64_t (*v1)(void);
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  id v7;
  id v8;

  v1 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0);
  v2 = v1();
  if (v2 >> 62)
    v3 = sub_1A3AB5480();
  else
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  v4 = swift_bridgeObjectRelease();
  if (v3 != 1)
    return 0;
  v5 = ((uint64_t (*)(uint64_t))v1)(v4);
  if (!(v5 >> 62))
  {
    result = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_6;
    goto LABEL_12;
  }
  result = sub_1A3AB5480();
  if (!result)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_6:
  if ((v5 & 0xC000000000000001) != 0)
  {
    v7 = (id)MEMORY[0x1A85960B8](0, v5);
    goto LABEL_9;
  }
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = *(id *)(v5 + 32);
LABEL_9:
    v8 = v7;
    swift_bridgeObjectRelease();
    return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A39A6690()
{
  return sub_1A39A669C(&OBJC_IVAR____TtC12TextToSpeech10SSMLParser_preamble);
}

uint64_t sub_1A39A669C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_1A39A66EC(uint64_t a1, uint64_t a2)
{
  return sub_1A39A66F8(a1, a2, &OBJC_IVAR____TtC12TextToSpeech10SSMLParser_preamble);
}

uint64_t sub_1A39A66F8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)(v3 + *a3);
  swift_beginAccess();
  *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1A39A6750())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id SSMLParser.__allocating_init(ssml:)()
{
  objc_class *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  objc_super v7;

  v1 = (char *)objc_allocWithZone(v0);
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_elementStack] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_roots] = v2;
  v3 = &v1[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_preamble];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = v1;
  v5 = sub_1A3AB4958();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v4[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_ssml] = v5;
  *(_QWORD *)&v4[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_currentUTF16Position] = 0;

  v7.receiver = v4;
  v7.super_class = v0;
  return objc_msgSendSuper2(&v7, sel_init);
}

id SSMLParser.init(ssml:)()
{
  char *v0;
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;
  objc_super v6;

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_elementStack] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_roots] = v1;
  v2 = &v0[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_preamble];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v3 = v0;
  v4 = sub_1A3AB4958();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_ssml] = v4;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_currentUTF16Position] = 0;

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for SSMLParser();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for SSMLParser()
{
  return objc_opt_self();
}

id sub_1A39A6920()
{
  return sub_1A39A6958(&qword_1EE6D5E38, (id *)&qword_1EE6E6CF8);
}

id sub_1A39A693C()
{
  return sub_1A39A6958(&qword_1EE6D5E48, (id *)&qword_1EE6E6D08);
}

id sub_1A39A6958(_QWORD *a1, id *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v5)(void);
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0xA8);
  v6 = *a2;
  v7 = (void *)v5();
  v8 = (*(uint64_t (**)(void))((*v4 & *v2) + 0xC0))();
  v10 = objc_msgSend(v6, sel_firstMatchInString_options_range_, v7, 0, v8, v9);

  return v10;
}

uint64_t sub_1A39A6A28()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t (*v9)(void);
  uint64_t result;

  if (qword_1EE6D5E50 != -1)
    swift_once();
  swift_beginAccess();
  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8);
  v3 = (id)qword_1EE6E6D10;
  v4 = (void *)v2();
  v5 = (*(uint64_t (**)(void))((*v1 & *v0) + 0xC0))();
  v7 = objc_msgSend(v3, sel_firstMatchInString_options_range_, v4, 0, v5, v6);

  if (!v7)
    return 0;
  v8 = objc_msgSend(v7, sel_range);

  v9 = *(uint64_t (**)(void))((*v1 & *v0) + 0x90);
  result = v9();
  if (!__OFSUB__(v8, result))
    return v9();
  __break(1u);
  return result;
}

id sub_1A39A6B68()
{
  return sub_1A39A6958(&qword_1EE6D5E58, (id *)&qword_1EE6E6D18);
}

unint64_t static SSMLParser.parse(ssml:)()
{
  uint64_t v0;
  uint64_t v1;
  objc_class *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  objc_super v16;

  v1 = v0;
  v2 = (objc_class *)type metadata accessor for SSMLParser();
  v3 = (char *)objc_allocWithZone(v2);
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_elementStack] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_roots] = v4;
  v5 = &v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_preamble];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  swift_bridgeObjectRetain();
  v6 = v3;
  v7 = sub_1A3AB4958();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v6[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_ssml] = v7;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_currentUTF16Position] = 0;

  v16.receiver = v6;
  v16.super_class = v2;
  v8 = objc_msgSendSuper2(&v16, sel_init);
  v9 = MEMORY[0x1E0DEEDD8];
  v10 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x130))();
  if (!v1)
  {
    v11 = *(uint64_t (**)(uint64_t))((*(_QWORD *)v9 & *v8) + 0xD0);
    v9 = v11(v10);
    if (v9 >> 62)
      v12 = sub_1A3AB5480();
    else
      v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    v13 = swift_bridgeObjectRelease();
    if (v12)
    {
      v9 = v11(v13);

      return v9;
    }
    sub_1A39A8E44();
    swift_allocError();
    *v15 = 0xD000000000000013;
    v15[1] = 0x80000001A3AEF320;
    swift_willThrow();
  }

  return v9;
}

_QWORD *static SSMLParser.parseRootElement(ssml:)()
{
  uint64_t v0;
  uint64_t v1;
  objc_class *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  objc_super v18;
  uint64_t v19;

  v1 = v0;
  v2 = (objc_class *)type metadata accessor for SSMLParser();
  v3 = (char *)objc_allocWithZone(v2);
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_elementStack] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_roots] = v4;
  v5 = &v3[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_preamble];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  swift_bridgeObjectRetain();
  v6 = v3;
  v7 = sub_1A3AB4958();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v6[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_ssml] = v7;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12TextToSpeech10SSMLParser_currentUTF16Position] = 0;

  v18.receiver = v6;
  v18.super_class = v2;
  v8 = objc_msgSendSuper2(&v18, sel_init);
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = v8;
  v11 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x130))();
  if (!v1)
  {
    v12 = (*(uint64_t (**)(uint64_t))((*v9 & *v8) + 0xE8))(v11);
    if (v12)
    {
      v10 = (_QWORD *)v12;

      return v10;
    }
    sub_1A3AB52AC();
    v14 = sub_1A3AB4A84();
    v15 = (*(uint64_t (**)(uint64_t))((*v9 & *v8) + 0xD0))(v14);
    if (v15 >> 62)
      v16 = sub_1A3AB5480();
    else
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    v19 = v16;
    sub_1A3AB5624();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    v10 = 0;
    sub_1A39A8E44();
    swift_allocError();
    *v17 = 0;
    v17[1] = 0xE000000000000000;
    swift_willThrow();
  }

  return v10;
}

void sub_1A39A6F7C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t (*v4)(void);
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, _QWORD);
  _QWORD *v20;
  void *v21;
  char **v22;
  uint64_t v23;
  void *v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t (*v30)(void);
  void *v31;
  char **v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  void *v40;
  char v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  void *v46;
  id v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t (*v51)(void);
  uint64_t (*v52)(void);
  _BYTE v53[32];
  unint64_t v54;
  unint64_t v55;
  id v56;

  v2 = v0;
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v52 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90);
  if (!v52())
  {
    if (qword_1EE6D5E30 != -1)
      swift_once();
    swift_beginAccess();
    v4 = *(uint64_t (**)(void))((*v3 & *v0) + 0xA8);
    v5 = (id)qword_1EE6E6CF0;
    v6 = (void *)v4();
    v7 = (*(uint64_t (**)(void))((*v3 & *v0) + 0xC0))();
    v9 = objc_msgSend(v5, sel_firstMatchInString_options_range_, v6, 0, v7, v8);

    if (v9)
    {
      v10 = (void *)v4();
      v11 = objc_msgSend(v9, sel_range);
      v13 = objc_msgSend(v10, sel_substringWithRange_, v11, v12);

      v14 = sub_1A3AB497C();
      v16 = v15;

      (*(void (**)(uint64_t, uint64_t))((*v3 & *v2) + 0xF8))(v14, v16);
      objc_msgSend(v9, sel_range);
      v18 = v17;
      v19 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))((*v3 & *v2) + 0xA0))(v53);
      if (__OFADD__(*v20, v18))
      {
        __break(1u);
        return;
      }
      *v20 += v18;
      v19(v53, 0);

    }
  }
  v51 = *(uint64_t (**)(void))((*v3 & *v2) + 0xC8);
  v21 = (void *)v51();
  v22 = &selRef_isActive;
  v23 = (uint64_t)objc_msgSend(v21, sel_length);

  if (v23 >= 1)
  {
    do
    {
      v29 = v52();
      v30 = *(uint64_t (**)(void))((*v3 & *v2) + 0xA8);
      v31 = (void *)v30();
      v32 = v22;
      v33 = objc_msgSend(v31, v22[47]);

      if ((id)v29 == v33)
        break;
      if (qword_1EE6D5E60 != -1)
        swift_once();
      swift_beginAccess();
      v34 = (id)qword_1EE6E6D20;
      v35 = (void *)v30();
      v36 = (*(uint64_t (**)(void))((*v3 & *v2) + 0xC0))();
      v38 = objc_msgSend(v34, sel_firstMatchInString_options_range_, v35, 0, v36, v37);

      if (v38)
        break;
      v39 = (void *)(*(uint64_t (**)(void))((*v3 & *v2) + 0x110))();

      if (v39)
      {
        v26 = (*(uint64_t (**)(void))((*v3 & *v2) + 0x140))();
        if (v1)
          return;
        v22 = v32;
      }
      else
      {
        v24 = (void *)(*(uint64_t (**)(void))((*v3 & *v2) + 0x118))();

        v22 = v32;
        if (v24)
        {
          v25 = *(uint64_t (**)(void))((*v3 & *v2) + 0x148);
        }
        else
        {
          v40 = (void *)(*(uint64_t (**)(void))((*v3 & *v2) + 0x128))();

          if (v40)
          {
            v25 = *(uint64_t (**)(void))((*v3 & *v2) + 0x150);
          }
          else
          {
            (*(void (**)(void))((*v3 & *v2) + 0x120))();
            if ((v41 & 1) != 0)
            {
              v54 = 0;
              v55 = 0xE000000000000000;
              sub_1A3AB52AC();
              v42 = swift_bridgeObjectRelease();
              v54 = 0xD000000000000018;
              v55 = 0x80000001A3AEF390;
              v43 = (void *)((uint64_t (*)(uint64_t))v51)(v42);
              v44 = objc_msgSend(v43, sel_description);
              sub_1A3AB497C();

              sub_1A3AB4A84();
              swift_bridgeObjectRelease();
              v45 = sub_1A3AB4A84();
              v46 = (void *)((uint64_t (*)(uint64_t))v51)(v45);
              v47 = objc_msgSend(v46, (SEL)v32 + 2376);

              v56 = v47;
              sub_1A3AB5624();
              sub_1A3AB4A84();
              swift_bridgeObjectRelease();
              v48 = v54;
              v49 = v55;
              sub_1A39A8E44();
              swift_allocError();
              *v50 = v48;
              v50[1] = v49;
              swift_willThrow();
              return;
            }
            v25 = *(uint64_t (**)(void))((*v3 & *v2) + 0x158);
          }
        }
        v26 = v25();
        if (v1)
          return;
      }
      v27 = (void *)((uint64_t (*)(uint64_t))v51)(v26);
      v28 = objc_msgSend(v27, (SEL)v22 + 2376);

    }
    while ((uint64_t)v28 > 0);
  }
}

uint64_t sub_1A39A74BC(void *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t result;
  unint64_t v9;
  _QWORD v10[6];
  unint64_t v11;

  v11 = sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
  if (qword_1EE6D5E40 != -1)
    swift_once();
  swift_beginAccess();
  v2 = (id)qword_1EE6E6D00;
  v3 = objc_msgSend(a1, sel_length);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = &v11;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = sub_1A39A8EAC;
  *(_QWORD *)(v5 + 24) = v4;
  v10[4] = sub_1A39A9090;
  v10[5] = v5;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = sub_1A39A7684;
  v10[3] = &unk_1E4A9F7E8;
  v6 = _Block_copy(v10);
  v7 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_enumerateMatchesInString_options_range_usingBlock_, v7, 0, 0, v3, v6);

  _Block_release(v6);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v7 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v9 = v11;
    swift_release();
    return v9;
  }
  return result;
}

void sub_1A39A7684(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(void *, uint64_t, uint64_t);
  id v8;

  v7 = *(void (**)(void *, uint64_t, uint64_t))(a1 + 32);
  v8 = a2;
  v7(a2, a3, a4);

}

void sub_1A39A76E0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  char v33;
  id v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  char **v42;
  char *v43;
  uint64_t v44;
  BOOL v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t (*v57)(uint64_t *);
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t rawValue;
  void *rawValue_8;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  id v67;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
  if (!v3)
  {
    sub_1A39A8E44();
    swift_allocError();
    *v50 = 0xD000000000000014;
    v50[1] = 0x80000001A3AEF3E0;
    swift_willThrow();
    return;
  }
  v4 = (void *)v3;
  v5 = (void *)sub_1A3AB4958();
  v67 = objc_msgSend(v4, sel_rangeWithName_, v5);
  v7 = v6;

  objc_msgSend(v4, sel_range);
  v8 = *(uint64_t (**)(void))((*v2 & *v1) + 0xA8);
  v9 = v8();
  sub_1A3AB497C();

  v10 = sub_1A3AB4FA0();
  v63 = v11;
  v64 = v10;
  LOBYTE(v9) = v12;
  v13 = swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v14 = (void *)((uint64_t (*)(uint64_t))v8)(v13);
    v15 = objc_msgSend(v14, sel_substringWithRange_, v67, v7);

    rawValue = sub_1A3AB497C();
    v17 = v16;

    v18 = (void *)v8();
    v19 = (void *)sub_1A3AB4958();
    rawValue_8 = v4;
    v20 = objc_msgSend(v4, sel_rangeWithName_, v19);
    v22 = v21;

    v23 = objc_msgSend(v18, sel_substringWithRange_, v20, v22);
    if (!v23)
    {
      sub_1A3AB497C();
      v23 = (id)sub_1A3AB4958();
      v24 = swift_bridgeObjectRelease();
    }
    ((void (*)(uint64_t))v8)(v24);
    v25 = sub_1A3AB49DC();
    v27 = v26;
    v28 = sub_1A3AB4AF0();
    v29 = v28;
    v30 = (v25 >> 59) & 1;
    if ((v27 & 0x1000000000000000) == 0)
      LOBYTE(v30) = 1;
    if ((v28 & 0xC) == 4 << v30)
    {
      v29 = sub_1A39A9718(v28, v25, v27);
      if ((v27 & 0x1000000000000000) == 0)
        goto LABEL_9;
    }
    else if ((v27 & 0x1000000000000000) == 0)
    {
LABEL_9:
      swift_bridgeObjectRelease();
      v31 = v29 >> 16;
      goto LABEL_10;
    }
    v60 = v25 & 0xFFFFFFFFFFFFLL;
    if ((v27 & 0x2000000000000000) != 0)
      v60 = HIBYTE(v27) & 0xF;
    if (v60 >= v29 >> 16)
    {
      v31 = sub_1A3AB4ACC();
      swift_bridgeObjectRelease();
LABEL_10:
      swift_bridgeObjectRetain();
      v32._countAndFlagsBits = rawValue;
      v32._object = v17;
      SSMLTag.init(rawValue:)(v32);
      v33 = v65;
      if (v65 == 16)
        v33 = 13;
      LOBYTE(v65) = v33;
      v34 = objc_allocWithZone((Class)type metadata accessor for ParsedSSMLNode());
      v35 = sub_1A39A5D40((char *)&v65, rawValue, (uint64_t)v17, v64, v63, 0, 0, v31);
      v36 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      (*(void (**)(uint64_t, uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v35) + 0x138))(v64, v63, 0);
      v37 = (*(uint64_t (**)(id))((*v36 & *v1) + 0x138))(v23);

      v38 = (*(uint64_t (**)(uint64_t))((*v36 & *v35) + 0xF0))(v37);
      v39 = (*(uint64_t (**)(uint64_t))((*v36 & *v1) + 0x90))(v38);
      v40 = objc_msgSend(rawValue_8, sel_range);
      v42 = &selRef_isActive;
      if (__OFADD__(v40, v41))
      {
        __break(1u);
      }
      else
      {
        if (v39 >= (uint64_t)v40 + v41)
        {
          v65 = 0;
          v66 = 0xE000000000000000;
          sub_1A3AB52AC();
          v51 = swift_bridgeObjectRelease();
          v65 = 0x7320726573726150;
          v66 = 0xEF2064656C6C6174;
          v52 = (void *)((uint64_t (*)(uint64_t))v8)(v51);
          v53 = objc_msgSend(v52, sel_description);
          sub_1A3AB497C();

          sub_1A3AB4A84();
          swift_bridgeObjectRelease();
          v54 = v65;
          v55 = v66;
          sub_1A39A8E44();
          swift_allocError();
          *v56 = v54;
          v56[1] = v55;
          swift_willThrow();

          return;
        }
        v43 = (char *)objc_msgSend(rawValue_8, sel_range);
        v45 = __OFADD__(v43, v44);
        v46 = &v43[v44];
        if (!v45)
        {
          (*(void (**)(char *))((*v36 & *v1) + 0x98))(v46);
          v47 = (void *)sub_1A3AB4958();
          objc_msgSend(rawValue_8, sel_rangeWithName_, v47);
          v49 = v48;

          if (v49 >= 1)
          {
            (*(void (**)(_QWORD *))((*v36 & *v1) + 0x160))(v35);

            return;
          }
          v57 = *(uint64_t (**)(uint64_t *))((*v36 & *v1) + 0x88);
          v42 = v35;
          v1 = (_QWORD *)v57(&v65);
          v59 = v58;
          MEMORY[0x1A8595980]();
          if (*(_QWORD *)((*v59 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*v59 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            goto LABEL_20;
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_28:
      sub_1A3AB4BE0();
LABEL_20:
      sub_1A3AB4C10();
      sub_1A3AB4BC8();
      ((void (*)(uint64_t *, _QWORD))v1)(&v65, 0);

      return;
    }
  }
  __break(1u);
}

void sub_1A39A7CD0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  BOOL v47;
  char *v48;
  uint64_t v49;
  void *v50;
  id v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(void);
  unint64_t v58;
  unint64_t v59;
  id v60;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
  if (!v3)
  {
    sub_1A39A8E44();
    swift_allocError();
    *v32 = 0xD000000000000014;
    v32[1] = 0x80000001A3AEF3E0;
    swift_willThrow();
    return;
  }
  v4 = (void *)v3;
  v5 = (*(uint64_t (**)(void))((*v2 & *v0) + 0x78))();
  if (v5 >> 62)
    v6 = sub_1A3AB5480();
  else
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    sub_1A3AB52AC();
    swift_bridgeObjectRelease();
    v33 = objc_msgSend(v4, sel_description);
    sub_1A3AB497C();

    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A39A8E44();
    swift_allocError();
    *v34 = 0xD000000000000029;
    v34[1] = 0x80000001A3AEF420;
    swift_willThrow();

    return;
  }
  v8 = (char **)(*(uint64_t (**)(unint64_t *))((*v2 & *v1) + 0x88))(&v58);
  v9 = v7;
  if (!(*v7 >> 62))
  {
    if (*(_QWORD *)((*v7 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_7;
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  v55 = sub_1A3AB5480();
  swift_bridgeObjectRelease();
  if (!v55)
    goto LABEL_31;
LABEL_7:
  v10 = sub_1A39A9824();
  if (v10)
    goto LABEL_11;
  if (*v9 >> 62)
    goto LABEL_34;
  v11 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  v12 = v11 - 1;
  if (__OFSUB__(v11, 1))
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    return;
  }
  while (1)
  {
    v10 = sub_1A39A9790(v12);
LABEL_11:
    v13 = (_QWORD *)v10;
    v14 = ((uint64_t (*)(unint64_t *, _QWORD))v8)(&v58, 0);
    v57 = *(uint64_t (**)(void))((*v2 & *v1) + 0xA8);
    v15 = (void *)((uint64_t (*)(uint64_t))v57)(v14);
    v16 = (void *)sub_1A3AB4958();
    v60 = v4;
    v17 = objc_msgSend(v4, sel_rangeWithName_, v16);
    v19 = v18;

    v20 = objc_msgSend(v15, sel_substringWithRange_, v17, v19);
    v21 = sub_1A3AB497C();
    v23 = v22;

    v24 = *(uint64_t (**)(void))((*v2 & *v13) + 0xD0);
    if (v24() == v21 && v25 == v23)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v27 = sub_1A3AB5654();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
        v58 = 0;
        v59 = 0xE000000000000000;
        sub_1A3AB52AC();
        v28 = swift_bridgeObjectRelease();
        v58 = 0xD000000000000017;
        v59 = 0x80000001A3AEF400;
        ((void (*)(uint64_t))v24)(v28);
        sub_1A3AB4A84();
        swift_bridgeObjectRelease();
        sub_1A3AB4A84();
        sub_1A3AB4A84();
        swift_bridgeObjectRelease();
        v29 = v58;
        v30 = v59;
        sub_1A39A8E44();
        swift_allocError();
        *v31 = v29;
        v31[1] = v30;
        swift_willThrow();

        goto LABEL_28;
      }
    }
    swift_bridgeObjectRelease();
    objc_msgSend(v60, sel_range);
    v35 = v57();
    v4 = (void *)sub_1A3AB497C();

    v8 = (char **)sub_1A3AB4FA0();
    v37 = v36;
    LOBYTE(v35) = v38;
    v39 = swift_bridgeObjectRelease();
    if ((v35 & 1) != 0)
      goto LABEL_38;
    if (v37 >> 14 >= (unint64_t)(*(uint64_t (**)(uint64_t))((*v2 & *v13) + 0x118))(v39) >> 14)
      break;
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v56 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
    v12 = v56 - 1;
    if (__OFSUB__(v56, 1))
      goto LABEL_36;
  }
  (*(void (**)(void))((*v2 & *v13) + 0x120))();
  (*(void (**)(char **, unint64_t, _QWORD))((*v2 & *v13) + 0x150))(v8, v37, 0);
  v40 = (*(uint64_t (**)(_QWORD *))((*v2 & *v1) + 0x160))(v13);
  v41 = (*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0x90))(v40);
  v8 = &selRef_isActive;
  v42 = v60;
  v43 = objc_msgSend(v60, sel_range);
  if (__OFADD__(v43, v44))
    goto LABEL_33;
  if (v41 >= (uint64_t)v43 + v44)
  {
    v58 = 0;
    v59 = 0xE000000000000000;
    sub_1A3AB52AC();
    v49 = swift_bridgeObjectRelease();
    v58 = 0x7320726573726150;
    v59 = 0xEF2064656C6C6174;
    v50 = (void *)((uint64_t (*)(uint64_t))v57)(v49);
    v51 = objc_msgSend(v50, sel_description);
    sub_1A3AB497C();

    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    v52 = v58;
    v53 = v59;
    sub_1A39A8E44();
    swift_allocError();
    *v54 = v52;
    v54[1] = v53;
    swift_willThrow();
  }
  else
  {
    v45 = (char *)objc_msgSend(v42, sel_range);
    v47 = __OFADD__(v45, v46);
    v48 = &v45[v46];
    if (v47)
      goto LABEL_37;
    (*(void (**)(char *))((*v2 & *v1) + 0x98))(v48);
  }

LABEL_28:
}

void sub_1A39A833C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  BOOL v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  id v15;
  _QWORD *v16;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
  if (!v3)
  {
    sub_1A39A8E44();
    swift_allocError();
    *v12 = 0xD000000000000014;
    v12[1] = 0x80000001A3AEF3E0;
    swift_willThrow();
    return;
  }
  v4 = (void *)v3;
  v5 = (*(uint64_t (**)(void))((*v2 & *v0) + 0x90))();
  v6 = objc_msgSend(v4, sel_range);
  if (__OFADD__(v6, v7))
  {
    __break(1u);
  }
  else
  {
    if (v5 >= (uint64_t)v6 + v7)
    {
      sub_1A3AB52AC();
      v13 = swift_bridgeObjectRelease();
      v14 = (void *)(*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0xA8))(v13);
      v15 = objc_msgSend(v14, sel_description);
      sub_1A3AB497C();

      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      sub_1A39A8E44();
      swift_allocError();
      *v16 = 0x7320726573726150;
      v16[1] = 0xEF2064656C6C6174;
      swift_willThrow();

      return;
    }
    v8 = (char *)objc_msgSend(v4, sel_range);
    v10 = __OFADD__(v8, v9);
    v11 = &v8[v9];
    if (!v10)
    {
      (*(void (**)(char *))((*v2 & *v1) + 0x98))(v11);

      return;
    }
  }
  __break(1u);
}

int64_t sub_1A39A8534()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int64_t result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
  if ((v5 & 1) != 0)
  {
    sub_1A39A8E44();
    swift_allocError();
    *v30 = 0xD000000000000014;
    v31 = 0x80000001A3AEF3E0;
LABEL_13:
    v30[1] = v31;
    return swift_willThrow();
  }
  v6 = v3;
  v7 = v4;
  v8 = *(uint64_t (**)(void))((*v2 & *v0) + 0xA8);
  v9 = v8();
  sub_1A3AB497C();

  v10 = sub_1A3AB4FA0();
  v39 = v11;
  LOBYTE(v9) = v12;
  result = swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    goto LABEL_20;
  ((void (*)(int64_t))v8)(result);
  v14 = sub_1A3AB49DC();
  v16 = v15;
  result = sub_1A3AB4AF0();
  v17 = result;
  v18 = (v14 >> 59) & 1;
  if ((v16 & 0x1000000000000000) == 0)
    LOBYTE(v18) = 1;
  if ((result & 0xC) == 4 << v18)
  {
    result = sub_1A39A9718(result, v14, v16);
    v17 = result;
    if ((v16 & 0x1000000000000000) == 0)
      goto LABEL_7;
LABEL_15:
    v36 = v14 & 0xFFFFFFFFFFFFLL;
    if ((v16 & 0x2000000000000000) != 0)
      v36 = HIBYTE(v16) & 0xF;
    if (v36 < v17 >> 16)
      goto LABEL_21;
    v20 = sub_1A3AB4ACC();
    v19 = swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  if ((v16 & 0x1000000000000000) != 0)
    goto LABEL_15;
LABEL_7:
  v19 = swift_bridgeObjectRelease();
  v20 = v17 >> 16;
LABEL_8:
  LOBYTE(v37) = 15;
  v21 = (void *)((uint64_t (*)(uint64_t))v8)(v19);
  v22 = objc_msgSend(v21, sel_substringWithRange_, v6, v7);

  v23 = sub_1A3AB497C();
  v25 = v24;

  v26 = objc_allocWithZone((Class)type metadata accessor for ParsedSSMLNode());
  v27 = sub_1A39A5D40((char *)&v37, 0, 0xE000000000000000, v10, v39, v23, v25, v20);
  v28 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x160))();

  v29 = (*(uint64_t (**)(void))((*v28 & *v1) + 0x90))();
  result = v6 + v7;
  if (!__OFADD__(v6, v7))
  {
    if (v29 < result)
      return (*(uint64_t (**)(void))((*v28 & *v1) + 0x98))();
    v37 = 0;
    v38 = 0xE000000000000000;
    sub_1A3AB52AC();
    v32 = swift_bridgeObjectRelease();
    v37 = 0x7320726573726150;
    v38 = 0xEF2064656C6C6174;
    v33 = (void *)((uint64_t (*)(uint64_t))v8)(v32);
    v34 = objc_msgSend(v33, sel_description);
    sub_1A3AB497C();

    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    v35 = v37;
    v31 = v38;
    sub_1A39A8E44();
    swift_allocError();
    *v30 = v35;
    goto LABEL_13;
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

void sub_1A39A88B8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v5)(void);
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v23)(_BYTE *);
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t (*v27)(_BYTE *);
  _QWORD *v28;
  void (*v29)(_BYTE *, _QWORD);
  _QWORD *v30;
  _QWORD *v31;
  _BYTE v32[32];

  v2 = v1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x78);
  v6 = v5();
  if (v6 >> 62)
    v7 = sub_1A3AB5480();
  else
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = swift_bridgeObjectRelease();
  if (v7)
  {
    v9 = ((uint64_t (*)(uint64_t))v5)(v8);
    if (v9 >> 62)
      v10 = sub_1A3AB5480();
    else
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = swift_bridgeObjectRelease();
    v12 = __OFSUB__(v10, 1);
    v13 = v10 - 1;
    if (v12)
    {
      __break(1u);
    }
    else
    {
      v14 = ((uint64_t (*)(uint64_t))v5)(v11);
      v9 = v14;
      if ((v14 & 0xC000000000000001) == 0)
      {
        if ((v13 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v13 < *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v15 = *(id *)(v14 + 8 * v13 + 32);
          goto LABEL_11;
        }
        __break(1u);
        goto LABEL_29;
      }
    }
    v15 = (id)MEMORY[0x1A85960B8](v13, v9);
LABEL_11:
    v16 = v15;
    swift_bridgeObjectRelease();
    v17 = (*(uint64_t (**)(id))((*v4 & *a1) + 0xA8))(v16);
    v9 = ((uint64_t (*)(uint64_t))v5)(v17);
    if (!(v9 >> 62))
    {
      v18 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_13;
    }
LABEL_29:
    v18 = sub_1A3AB5480();
LABEL_13:
    v19 = swift_bridgeObjectRelease();
    v12 = __OFSUB__(v18, 1);
    v20 = v18 - 1;
    if (v12)
    {
      __break(1u);
    }
    else
    {
      v21 = ((uint64_t (*)(uint64_t))v5)(v19);
      v9 = v21;
      if ((v21 & 0xC000000000000001) == 0)
      {
        if ((v20 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v20 < *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v22 = *(id *)(v21 + 8 * v20 + 32);
          goto LABEL_18;
        }
        __break(1u);
        goto LABEL_34;
      }
    }
    v22 = (_QWORD *)MEMORY[0x1A85960B8](v20, v9);
LABEL_18:
    v2 = v22;
    swift_bridgeObjectRelease();
    v23 = *(uint64_t (**)(_BYTE *))((*v4 & *v2) + 0x110);
    v24 = a1;
    a1 = (_QWORD *)v23(v32);
    v26 = v25;
    MEMORY[0x1A8595980]();
    if (*(_QWORD *)((*v26 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_19:
      sub_1A3AB4C10();
      sub_1A3AB4BC8();
      ((void (*)(_BYTE *, _QWORD))a1)(v32, 0);

      return;
    }
LABEL_34:
    sub_1A3AB4BE0();
    goto LABEL_19;
  }
  v27 = *(uint64_t (**)(_BYTE *))((*v4 & *v2) + 0xE0);
  v28 = a1;
  v29 = (void (*)(_BYTE *, _QWORD))v27(v32);
  v31 = v30;
  MEMORY[0x1A8595980]();
  if (*(_QWORD *)((*v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1A3AB4BE0();
  sub_1A3AB4C10();
  sub_1A3AB4BC8();
  v29(v32, 0);
}

id SSMLParser.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SSMLParser.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SSMLParser.__deallocating_deinit()
{
  return sub_1A39A8C1C(type metadata accessor for SSMLParser);
}

id sub_1A39A8C1C(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

unint64_t ParsedSSMLNode.printNode(_:indent:)(uint64_t a1, uint64_t a2)
{
  return sub_1A39A98F8(a2);
}

uint64_t ParsedSSMLNode.description.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178))();
  if (!v3)
    (*(void (**)(uint64_t))((*v1 & *v0) + 0xD0))(v2);
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  v4 = sub_1A3AB4A84();
  (*(void (**)(uint64_t))((*v1 & *v0) + 0x118))(v4);
  sub_1A3AB53CC();
  sub_1A3AB4A84();
  sub_1A3AB53CC();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  return 60;
}

unint64_t sub_1A39A8E44()
{
  unint64_t result;

  result = qword_1EE6D2B00;
  if (!qword_1EE6D2B00)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for SSMLParserError, &type metadata for SSMLParserError);
    atomic_store(result, (unint64_t *)&qword_1EE6D2B00);
  }
  return result;
}

uint64_t sub_1A39A8E88()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1A39A8EAC(void *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;

  if (!a1)
    return sub_1A3AB4208();
  v3 = *(void **)(v1 + 16);
  v4 = *(uint64_t **)(v1 + 24);
  v5 = (void *)sub_1A3AB4958();
  v6 = objc_msgSend(a1, sel_rangeWithName_, v5);
  v8 = v7;

  if (v6 != (id)sub_1A3AB4208()
    || (v9 = (void *)sub_1A3AB4958(),
        v6 = objc_msgSend(a1, sel_rangeWithName_, v9),
        v8 = v10,
        v9,
        result = sub_1A3AB4208(),
        v6 != (id)result))
  {
    v12 = (void *)sub_1A3AB4958();
    v13 = objc_msgSend(a1, sel_rangeWithName_, v12);
    v15 = v14;

    v16 = objc_msgSend(v3, sel_substringWithRange_, v13, v15);
    v17 = sub_1A3AB497C();
    v19 = v18;

    v20 = objc_msgSend(v3, sel_substringWithRange_, v6, v8);
    v21 = sub_1A3AB497C();
    v23 = v22;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = *v4;
    *v4 = 0x8000000000000000;
    sub_1A39A93EC(v21, v23, v17, v19, isUniquelyReferenced_nonNull_native);
    *v4 = v25;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A39A9080()
{
  return swift_deallocObject();
}

uint64_t sub_1A39A9090()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1A39A90B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1A39A90C0()
{
  return swift_release();
}

uint64_t sub_1A39A90C8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820(&qword_1EE6D2360);
  v42 = a2;
  v6 = sub_1A3AB5498();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1A3AB56FC();
    sub_1A3AB4A30();
    result = sub_1A3AB5738();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1A39A93EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_1A39A2734(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1A39A9560();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1A39A90C8(v17, a5 & 1);
  v23 = sub_1A39A2734(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1A3AB5678();
  __break(1u);
  return result;
}

void *sub_1A39A9560()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D2360);
  v2 = *v0;
  v3 = sub_1A3AB548C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A39A9718(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_1A3AB4AF0();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x1A85958A8](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t sub_1A39A9790(unint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v3;
  if (!(_DWORD)result || (v3 & 0x8000000000000000) != 0 || (v3 & 0x4000000000000000) != 0)
    sub_1A39A9890(v3);
  v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    v6 = v5 - 1;
    v7 = (v3 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 32;
    v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
    memmove((void *)v7, (const void *)(v7 + 8), 8 * (v5 - 1 - a1));
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10) = v6;
    sub_1A3AB4BC8();
    return v8;
  }
  return result;
}

uint64_t sub_1A39A9824()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v0 = v1;
  if (!(_DWORD)result || (v1 & 0x8000000000000000) != 0 || (v1 & 0x4000000000000000) != 0)
    sub_1A39A9890(v1);
  v3 = v1 & 0xFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
    *(_QWORD *)(v3 + 16) = v5;
    sub_1A3AB4BC8();
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1A39A9890(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1A3AB5480();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x1A85960C4);
}

unint64_t sub_1A39A98F8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;

  v2 = v1;
  sub_1A39A9EC0();
  v4 = MEMORY[0x1E0DEA968];
  v5 = sub_1A3AB518C();
  v7 = v6;
  v8 = objc_msgSend(v2, sel_description, 45, 0xE100000000000000, 0, 0xE000000000000000);
  sub_1A3AB497C();

  swift_bridgeObjectRetain();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A39A4820(&qword_1EE6D2500);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(v9 + 56) = v4;
  *(_QWORD *)(v9 + 32) = v5;
  *(_QWORD *)(v9 + 40) = v7;
  sub_1A3AB56D8();
  v10 = swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x100))(v10);
  v12 = result;
  if (!(result >> 62))
  {
    v13 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  result = sub_1A3AB5480();
  v13 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  v14 = __OFADD__(a1, 1);
  v15 = a1 + 1;
  if (v14)
  {
    __break(1u);
  }
  else if (v13 >= 1)
  {
    for (i = 0; i != v13; ++i)
    {
      if ((v12 & 0xC000000000000001) != 0)
        v17 = (id)MEMORY[0x1A85960B8](i, v12);
      else
        v17 = *(id *)(v12 + 8 * i + 32);
      v18 = v17;
      sub_1A39A98F8(v15);

    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for TTSSpeechQueue.State(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SSMLTag(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SSMLTag(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_1A39A9BD4 + 4 * byte_1A3ABF9D5[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_1A39A9C08 + 4 * byte_1A3ABF9D0[v4]))();
}

uint64_t sub_1A39A9C08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A39A9C10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A39A9C18);
  return result;
}

uint64_t sub_1A39A9C24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A39A9C2CLL);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_1A39A9C30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A39A9C38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A39A9C44(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1A39A9C4C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SSMLTag()
{
  return &type metadata for SSMLTag;
}

_QWORD *initializeBufferWithCopyOfBuffer for SSMLParserError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SSMLParserError()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for SSMLParserError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SSMLParserError(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for SSMLParserError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SSMLParserError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SSMLParserError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1A39A9D98()
{
  return 0;
}

ValueMetadata *type metadata accessor for SSMLParserError()
{
  return &type metadata for SSMLParserError;
}

uint64_t method lookup function for ParsedSSMLNode()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for SSMLParser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SSMLParser.roots.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SSMLParser.roots.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SSMLParser.roots.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SSMLParser.root.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SSMLParser.__allocating_init(ssml:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 264))();
}

uint64_t dispatch thunk of SSMLParser.parse()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

void type metadata accessor for MatchingFlags()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1EE6D2B08)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EE6D2B08);
  }
}

unint64_t sub_1A39A9EC0()
{
  unint64_t result;

  result = qword_1ED1B5370;
  if (!qword_1ED1B5370)
  {
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ED1B5370);
  }
  return result;
}

uint64_t TTSMarkup.Phoneme.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v4 = *((_BYTE *)v3 + 8);
  v5 = v3[2];
  v6 = v3[3];
  v8 = *v3;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  v12 = *((_OWORD *)v3 + 2);
  return (*(uint64_t (**)(uint64_t *))(a3 + 56))(&v8);
}

uint64_t TTSMarkup.Phoneme.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8);
  v6 = v5();
  if (!*(_QWORD *)(v6 + 16) || (v7 = sub_1A39A2734(26736, 0xE200000000000000), (v8 & 1) == 0))
  {

    result = swift_bridgeObjectRelease();
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  v9 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v7);
  v11 = *v9;
  v10 = v9[1];
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRelease();
  if (*(_QWORD *)(((uint64_t (*)(uint64_t))v5)(v12) + 16)
    && (sub_1A39A2734(0x7465626168706C61, 0xE800000000000000), (v13 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v14 = sub_1A3AB54E0();
    swift_bridgeObjectRelease();
    v15 = v14 == 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    v15 = 0;
  }
  v17 = *(uint64_t (**)(uint64_t))((*v4 & *a1) + 0x100);
  v18 = swift_bridgeObjectRetain();
  v19 = v17(v18);
  if (!(v19 >> 62))
  {
    result = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_10;
LABEL_15:

    swift_bridgeObjectRelease();
    v23 = 0;
    v25 = 0;
    goto LABEL_16;
  }
  result = sub_1A3AB5480();
  if (!result)
    goto LABEL_15;
LABEL_10:
  if ((v19 & 0xC000000000000001) != 0)
  {
    v20 = (_QWORD *)MEMORY[0x1A85960B8](0, v19);
    goto LABEL_13;
  }
  if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v20 = *(id *)(v19 + 32);
LABEL_13:
    v21 = v20;
    v22 = swift_bridgeObjectRelease();
    v23 = (*(uint64_t (**)(uint64_t))((*v4 & *v21) + 0x178))(v22);
    v25 = v24;

LABEL_16:
    *(_QWORD *)a2 = MEMORY[0x1E0DEE9D8];
    *(_BYTE *)(a2 + 8) = v15;
    *(_QWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 24) = v10;
    *(_QWORD *)(a2 + 32) = v23;
    *(_QWORD *)(a2 + 40) = v25;
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t TTSMarkup.Phoneme.Alphabet.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1A3AB54E0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void static TTSMarkup.Phoneme.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t TTSMarkup.Phoneme.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Phoneme.eventTaps.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.Phoneme.eventTaps.modify())()
{
  return nullsub_19;
}

unint64_t TTSMarkup.Phoneme.attributes.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  sub_1A39A4820(&qword_1EE6D2368);
  inited = swift_initStackObject();
  v5 = inited;
  *(_OWORD *)(inited + 16) = xmmword_1A3ABFBB0;
  *(_QWORD *)(inited + 32) = 0x7465626168706C61;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v6 = 6385769;
  if (v1)
    v6 = 0x61706D61732D78;
  v7 = 0xE300000000000000;
  if (v1)
    v7 = 0xE700000000000000;
  *(_QWORD *)(inited + 48) = v6;
  *(_QWORD *)(inited + 56) = v7;
  *(_QWORD *)(inited + 64) = 26736;
  *(_QWORD *)(inited + 72) = 0xE200000000000000;
  *(_QWORD *)(inited + 80) = v3;
  *(_QWORD *)(inited + 88) = v2;
  swift_bridgeObjectRetain();
  return sub_1A39A5780(v5);
}

uint64_t TTSMarkup.Phoneme.Alphabet.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x61706D61732D78;
  else
    return 6385769;
}

uint64_t TTSMarkup.Phoneme.Alphabet.description.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x61706D61732D78;
  else
    return 6385769;
}

uint64_t sub_1A39AA368(char *a1, char *a2)
{
  return sub_1A39AA374(*a1, *a2);
}

uint64_t sub_1A39AA374(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x61706D61732D78;
  else
    v3 = 6385769;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x61706D61732D78;
  else
    v5 = 6385769;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE300000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1A39AA410()
{
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A39AA488()
{
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39AA4DC()
{
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A39AA550@<X0>(char *a1@<X8>)
{
  return TTSMarkup.Phoneme.Alphabet.init(rawValue:)(a1);
}

void sub_1A39AA55C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 6385769;
  if (*v1)
    v2 = 0x61706D61732D78;
  v3 = 0xE300000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1A39AA594()
{
  _BYTE *v0;

  if (*v0)
    return 0x61706D61732D78;
  else
    return 6385769;
}

char *TTSMarkup.Phoneme.init(alphabet:phonemes:orthography:)@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v6;

  v6 = *result;
  *(_QWORD *)a6 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a6 + 8) = v6;
  *(_QWORD *)(a6 + 16) = a2;
  *(_QWORD *)(a6 + 24) = a3;
  *(_QWORD *)(a6 + 32) = a4;
  *(_QWORD *)(a6 + 40) = a5;
  return result;
}

double TTSMarkup.Phoneme.content.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  v3 = *(_QWORD *)(v1 + 40);
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(a1 + 24) = &type metadata for TTSMarkup.SpeechText;
    *(_QWORD *)(a1 + 32) = &protocol witness table for TTSMarkup.SpeechText;
    v5 = swift_allocObject();
    v6 = (_QWORD *)(v5 + 16);
    *(_QWORD *)a1 = v5;
    swift_bridgeObjectRetain();
    TTSMarkup.SpeechText.init(_:)(v4, v3, v6);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void sub_1A39AA670(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

double sub_1A39AA680@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  v3 = *(_QWORD *)(v1 + 40);
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(a1 + 24) = &type metadata for TTSMarkup.SpeechText;
    *(_QWORD *)(a1 + 32) = &protocol witness table for TTSMarkup.SpeechText;
    v5 = swift_allocObject();
    v6 = (_QWORD *)(v5 + 16);
    *(_QWORD *)a1 = v5;
    swift_bridgeObjectRetain();
    TTSMarkup.SpeechText.init(_:)(v4, v3, v6);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1A39AA714()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A39AA71C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*sub_1A39AA744())()
{
  return nullsub_19;
}

uint64_t sub_1A39AA760()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1A39AA798()
{
  unint64_t result;

  result = qword_1EE6D2B10;
  if (!qword_1EE6D2B10)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSMarkup.Phoneme.Alphabet, &type metadata for TTSMarkup.Phoneme.Alphabet);
    atomic_store(result, (unint64_t *)&qword_1EE6D2B10);
  }
  return result;
}

uint64_t _s7PhonemeVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s7PhonemeVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s7PhonemeVwca(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 _s7PhonemeVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s7PhonemeVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7PhonemeVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s7PhonemeVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Phoneme()
{
  return &type metadata for TTSMarkup.Phoneme;
}

uint64_t _s7PhonemeV8AlphabetOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s7PhonemeV8AlphabetOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A39AAAE4 + 4 * byte_1A3ABFBC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A39AAB18 + 4 * byte_1A3ABFBC0[v4]))();
}

uint64_t sub_1A39AAB18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A39AAB20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A39AAB28);
  return result;
}

uint64_t sub_1A39AAB34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A39AAB3CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A39AAB40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A39AAB48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1A39AAB54(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Phoneme.Alphabet()
{
  return &type metadata for TTSMarkup.Phoneme.Alphabet;
}

float sub_1A39AAB70(float a1)
{
  float v1;

  v1 = a1 + 1.0;
  if (v1 <= 0.05)
    v1 = 0.05;
  return logf(v1) / 0.057762;
}

float sub_1A39AABB0(float a1)
{
  return exp2f((float)(a1 + -69.0) / 12.0) * 440.0;
}

float sub_1A39AABE4(float a1)
{
  return (float)((float)(logf(a1 / 220.0) * 12.0) / 0.69315) + 57.0;
}

float sub_1A39AAC28(float a1)
{
  return log10f(a1) * 20.0;
}

float sub_1A39AAC44(float a1)
{
  return __exp10f(a1 / 20.0);
}

uint64_t sub_1A39AAC50(uint64_t a1)
{
  return sub_1A39AAD78(a1, qword_1EE6E6D28);
}

uint64_t sub_1A39AAC7C()
{
  return sub_1A39AACF8(qword_1EE6D6270, (uint64_t)qword_1EE6E6D28);
}

uint64_t sub_1A39AAC98(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1A39AACB0(uint64_t a1)
{
  return sub_1A39AAD78(a1, qword_1EE6E6CB8);
}

uint64_t sub_1A39AACDC()
{
  return sub_1A39AACF8(&qword_1EE6D4A08, (uint64_t)qword_1EE6E6CB8);
}

uint64_t sub_1A39AACF8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = sub_1A3AB4724();
  return sub_1A39AAC98(v3, a2);
}

uint64_t sub_1A39AAD38(uint64_t a1)
{
  return sub_1A39AAD78(a1, qword_1EE6E6D40);
}

uint64_t sub_1A39AAD5C()
{
  return sub_1A39AACF8(qword_1EE6D6280, (uint64_t)qword_1EE6E6D40);
}

uint64_t sub_1A39AAD78(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1A3AB4724();
  sub_1A39AB688(v3, a2);
  sub_1A39AAC98(v3, (uint64_t)a2);
  return sub_1A3AB4718();
}

uint64_t CoreSynthesizer.Voice.description.getter()
{
  sub_1A3AB52AC();
  sub_1A3AB4A84();
  swift_bridgeObjectRetain();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  swift_bridgeObjectRetain();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  sub_1A3AB53CC();
  sub_1A3AB4A84();
  sub_1A3AB4538();
  sub_1A39AAFF0();
  swift_bridgeObjectRetain();
  sub_1A3AB4EC8();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  swift_bridgeObjectRetain();
  sub_1A3AB4EC8();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  return 0;
}

unint64_t sub_1A39AAFF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED1B5300;
  if (!qword_1ED1B5300)
  {
    v1 = sub_1A3AB4538();
    result = MEMORY[0x1A8597738](MEMORY[0x1E0CB0E58], v1);
    atomic_store(result, (unint64_t *)&qword_1ED1B5300);
  }
  return result;
}

uint64_t CoreSynthesizer.Utterance.description.getter()
{
  uint64_t v0;

  sub_1A3AB52AC();
  sub_1A3AB4A84();
  swift_bridgeObjectRetain();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  if (*(_QWORD *)(v0 + 40))
    CoreSynthesizer.Voice.description.getter();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  sub_1A3AB5624();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  sub_1A3AB49E8();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  sub_1A3AB49E8();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  return 0;
}

uint64_t CoreSynthesizer.Utterance.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  char v17;
  uint64_t v18;
  unint64_t v19;

  v18 = 0x3D686365657053;
  v19 = 0xE700000000000000;
  sub_1A39A0888(v0 + 144, (uint64_t)v16);
  if (!v17)
  {
    v1 = 0x27203A4C4D53535BLL;
    v2 = 0xE800000000000000;
    goto LABEL_5;
  }
  if (v17 == 1)
  {
    v1 = 0x203A63697361425BLL;
    v2 = 0xE900000000000027;
LABEL_5:
    v13[0] = v1;
    v13[1] = v2;
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_1A39A1AB8(v16, (uint64_t)v13);
  v3 = v14;
  v4 = v15;
  sub_1A39A19CC(v13, v14);
  (*(void (**)(uint64_t, uint64_t))(v4 + 48))(v3, v4);
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A39A47C4((uint64_t)v13);
LABEL_7:
  v5 = v18;
  v6 = v19;
  v7 = sub_1A39AB4D8(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v9 = *((_QWORD *)v7 + 2);
  v8 = *((_QWORD *)v7 + 3);
  if (v9 >= v8 >> 1)
    v7 = sub_1A39AB4D8((char *)(v8 > 1), v9 + 1, 1, v7);
  *((_QWORD *)v7 + 2) = v9 + 1;
  v10 = &v7[16 * v9];
  *((_QWORD *)v10 + 4) = v5;
  *((_QWORD *)v10 + 5) = v6;
  *(_QWORD *)&v16[0] = CoreSynthesizer.Utterance.description.getter();
  *((_QWORD *)&v16[0] + 1) = v11;
  sub_1A3AB4A84();
  v13[0] = v7;
  sub_1A39A4820(&qword_1EE6D2380);
  sub_1A39AB5D8();
  sub_1A3AB4910();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  return *(_QWORD *)&v16[0];
}

char *sub_1A39AB4D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1ED1B5468);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_1A39AB5D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6D2B18;
  if (!qword_1EE6D2B18)
  {
    v1 = sub_1A39AB624(&qword_1EE6D2380);
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EE6D2B18);
  }
  return result;
}

uint64_t sub_1A39AB624(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1A859772C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSSpeechQueue.Log()
{
  return &type metadata for TTSSpeechQueue.Log;
}

ValueMetadata *_s3LogVMa()
{
  return &_s3LogVN;
}

uint64_t *sub_1A39AB688(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

BOOL static FormattedStream.EscapeStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FormattedStream.EscapeStyle.hash(into:)()
{
  return sub_1A3AB5708();
}

uint64_t sub_1A39AB714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A39AB774(a1, a2, a3, (void (*)(_BYTE *))FormattedStream.EscapeStyle.hash(into:));
}

uint64_t _s12TextToSpeech15FormattedStreamC11EscapeStyleO9hashValueSivg_0()
{
  sub_1A3AB56FC();
  sub_1A3AB5708();
  return sub_1A3AB5738();
}

uint64_t sub_1A39AB768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A39AB774(a1, a2, a3, (void (*)(_BYTE *))FormattedStream.BracketStyle.AnglingStyle.hash(into:));
}

uint64_t sub_1A39AB774(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  _BYTE v6[72];

  sub_1A3AB56FC();
  a4(v6);
  return sub_1A3AB5738();
}

uint64_t sub_1A39AB7B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 112))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39AB7E0(uint64_t *a1)
{
  return sub_1A39AB834(*a1);
}

uint64_t sub_1A39AB804()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1A39AB834(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

char *FormattedStream.__allocating_init(_:)(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)swift_allocObject();
  v3 = *(_QWORD *)v2;
  *((_QWORD *)v2 + 2) = 0;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 32))(&v2[*(_QWORD *)(v3 + 104)], a1);
  return v2;
}

char *FormattedStream.init(_:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;

  v2 = *(_QWORD *)v1;
  *((_QWORD *)v1 + 2) = 0;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 32))(&v1[*(_QWORD *)(v2 + 104)], a1);
  return v1;
}

uint64_t sub_1A39AB900()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  result = swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = __OFADD__(v2, 4);
  v4 = v2 + 4;
  if (v3)
    __break(1u);
  else
    *(_QWORD *)(v0 + 16) = v4;
  return result;
}

uint64_t sub_1A39AB94C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  result = swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = __OFSUB__(v2, 4);
  v4 = v2 - 4;
  if (v3)
    __break(1u);
  else
    *(_QWORD *)(v0 + 16) = v4;
  return result;
}

uint64_t sub_1A39AB998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
  v2 = MEMORY[0x1A85958FC](32, 0xE100000000000000, v1);
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 208))(v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39AB9E0(void (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 168))();
  a1(v3);
  return (*(uint64_t (**)(void))(*(_QWORD *)v1 + 176))();
}

uint64_t sub_1A39ABA28(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t (*v6)(uint64_t, unint64_t);

  (*(void (**)(void))(*(_QWORD *)v2 + 184))();
  v6 = *(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v2 + 208);
  v6(a1, a2);
  return v6(10, 0xE100000000000000);
}

uint64_t sub_1A39ABA8C()
{
  swift_beginAccess();
  sub_1A3AB53D8();
  return swift_endAccess();
}

uint64_t sub_1A39ABAF4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v4 = v3;
  if (*a3)
  {
    if (*a3 == 1)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_1A39A9EC0();
      a1 = sub_1A3AB5174();
      a2 = v8;
    }
  }
  else
  {
    sub_1A39A9EC0();
    sub_1A3AB5174();
    a1 = sub_1A3AB5174();
    a2 = v7;
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 208))(a1, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39ABC88(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;

  if (*a3)
  {
    if (*a3 != 1)
    {
      v7 = 60;
      v8 = 0xE100000000000000;
      sub_1A3AB4A84();
      goto LABEL_7;
    }
    v4 = 12092;
    v5 = 0xE200000000000000;
  }
  else
  {
    v4 = 60;
    v5 = 0xE100000000000000;
  }
  v7 = v4;
  v8 = v5;
  sub_1A3AB4A84();
LABEL_7:
  sub_1A3AB4A84();
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 208))(v7, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39ABD34(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, unint64_t);
  char v12;

  v6 = *a3;
  if (v6 == 2)
    v7 = 8739;
  else
    v7 = 34;
  if (v6 == 2)
    v8 = 0xE200000000000000;
  else
    v8 = 0xE100000000000000;
  if (v6 == 2)
    v9 = 8994;
  else
    v9 = 34;
  v10 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 208);
  v10(v7, v8);
  swift_bridgeObjectRelease();
  v12 = v6;
  (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v3 + 216))(a1, a2, &v12);
  v10(v9, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39ABDE0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  char *v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  void (*v8)(uint64_t, uint64_t);
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(uint64_t, unint64_t);
  _BYTE v20[16];
  _QWORD *v21;
  _QWORD v22[2];

  v19 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)v2 + 200);
  v19(572662307, 0xE400000000000000);
  v22[0] = 10;
  v22[1] = 0xE100000000000000;
  v21 = v22;
  swift_bridgeObjectRetain();
  v5 = sub_1A39AC208(0x7FFFFFFFFFFFFFFFLL, 1, sub_1A39AC82C, (uint64_t)v20, a1, a2);
  v6 = *((_QWORD *)v5 + 2);
  if (v6)
  {
    v7 = *(void (**)(uint64_t))(*(_QWORD *)v2 + 184);
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 208);
    v9 = (uint64_t *)(v5 + 56);
    do
    {
      v10 = *(v9 - 3);
      v11 = *(v9 - 2);
      v12 = *(v9 - 1);
      v13 = *v9;
      v14 = swift_bridgeObjectRetain();
      v7(v14);
      v15 = MEMORY[0x1A85957F4](v10, v11, v12, v13);
      v17 = v16;
      swift_bridgeObjectRelease();
      v8(v15, v17);
      swift_bridgeObjectRelease();
      v8(10, 0xE100000000000000);
      v9 += 4;
      --v6;
    }
    while (v6);
  }
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, unint64_t))v19)(589439522, 0xE400000000000000);
}

uint64_t sub_1A39ABF20(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t result;
  void (*v15)(uint64_t, unint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  v21 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v20 - v11;
  v13 = *a2;
  if (sub_1A3AB4F34() == 1)
  {
    result = sub_1A3AB4F70();
    if (v25)
    {
      v23 = v13;
      (*(void (**)(uint64_t, uint64_t, char *))(*v4 + 232))(v24, v25, &v23);
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v15 = *(void (**)(uint64_t, unint64_t))(*v4 + 208);
    v15(91, 0xE100000000000000);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v9, a1, a3);
    sub_1A3AB4B44();
    swift_getAssociatedConformanceWitness();
    sub_1A3AB512C();
    if (v25)
    {
      v16 = v24;
      v17 = *v4;
      LOBYTE(v24) = v13;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(v17 + 232))(v16, v25, &v24);
      swift_bridgeObjectRelease();
      sub_1A3AB512C();
      v18 = v25;
      if (v25)
      {
        v19 = v24;
        do
        {
          v15(8236, 0xE200000000000000);
          LOBYTE(v24) = v13;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*v4 + 232))(v19, v18, &v24);
          swift_bridgeObjectRelease();
          sub_1A3AB512C();
          v19 = v24;
          v18 = v25;
        }
        while (v25);
      }
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, AssociatedTypeWitness);
    return ((uint64_t (*)(uint64_t, unint64_t))v15)(93, 0xE100000000000000);
  }
  return result;
}

uint64_t FormattedStream.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
  return v0;
}

uint64_t FormattedStream.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_deallocClassInstance();
}

char *sub_1A39AC208(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t v44;
  _QWORD v46[4];

  v46[3] = a4;
  if (a1 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v11 = a5;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = MEMORY[0x1E0DEE9D8];
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = 15;
  v15 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v16 = HIBYTE(a6) & 0xF) : (v16 = v11 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v15 = v11 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((v11 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    sub_1A39AC620(v30 | (v15 << 16), v43, a2 & 1, v14);
    swift_bridgeObjectRelease();
    v10 = *(char **)(v14 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_38;
  }
  v38 = a1;
  v39 = v14;
  v44 = 4 * v16;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v9 = 15;
  v8 = 15;
  v17 = 15;
  while (1)
  {
    v46[0] = sub_1A3AB4B20();
    v46[1] = v18;
    v19 = a3(v46);
    if (v7)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    v6 = v19;
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      break;
    v9 = sub_1A3AB4A54();
LABEL_9:
    if (v44 == v9 >> 14)
      goto LABEL_29;
  }
  if (v8 >> 14 == v9 >> 14 && (a2 & 1) != 0)
  {
    v9 = sub_1A3AB4A54();
    *(_QWORD *)(v43 + 16) = v9;
    v8 = v9;
    v17 = v9;
    goto LABEL_9;
  }
  if (v9 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_41;
  }
  v20 = sub_1A3AB4B38();
  v40 = v21;
  v41 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = sub_1A39AC72C(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
  v27 = *((_QWORD *)v10 + 2);
  v26 = *((_QWORD *)v10 + 3);
  v6 = v27 + 1;
  if (v27 >= v26 >> 1)
    v10 = sub_1A39AC72C((char *)(v26 > 1), v27 + 1, 1, v10);
  *((_QWORD *)v10 + 2) = v6;
  v28 = &v10[32 * v27];
  *((_QWORD *)v28 + 4) = v41;
  *((_QWORD *)v28 + 5) = v23;
  *((_QWORD *)v28 + 6) = v25;
  *((_QWORD *)v28 + 7) = v40;
  *(_QWORD *)(v39 + 16) = v10;
  v29 = sub_1A3AB4A54();
  v9 = v29;
  *(_QWORD *)(v43 + 16) = v29;
  if (*((_QWORD *)v10 + 2) != v38)
  {
    v8 = v29;
    v17 = v29;
    goto LABEL_9;
  }
  v17 = v29;
  v8 = v29;
LABEL_29:
  if (v44 == v8 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v44 >= v17 >> 14)
  {
    v6 = sub_1A3AB4B38();
    v8 = v31;
    v9 = v32;
    v11 = v33;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_43;
    goto LABEL_34;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  v10 = sub_1A39AC72C(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
LABEL_34:
  v35 = *((_QWORD *)v10 + 2);
  v34 = *((_QWORD *)v10 + 3);
  if (v35 >= v34 >> 1)
    v10 = sub_1A39AC72C((char *)(v34 > 1), v35 + 1, 1, v10);
  *((_QWORD *)v10 + 2) = v35 + 1;
  v36 = &v10[32 * v35];
  *((_QWORD *)v36 + 4) = v6;
  *((_QWORD *)v36 + 5) = v8;
  *((_QWORD *)v36 + 6) = v9;
  *((_QWORD *)v36 + 7) = v11;
  *(_QWORD *)(v39 + 16) = v10;
LABEL_37:
  swift_bridgeObjectRetain();
  swift_release();
LABEL_38:
  swift_release();
  return v10;
}

uint64_t sub_1A39AC620(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  char *v18;

  v10 = *(_QWORD *)(a2 + 16) >> 14;
  v11 = (v10 == a1 >> 14) & a3;
  if (v11 == 1)
    return v11 ^ 1u;
  if (a1 >> 14 < v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  v4 = a4;
  v5 = sub_1A3AB4B38();
  v6 = v12;
  v7 = v13;
  v8 = v14;
  v9 = *(char **)(v4 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    v9 = sub_1A39AC72C(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    *(_QWORD *)(v4 + 16) = v9;
  }
  v17 = *((_QWORD *)v9 + 2);
  v16 = *((_QWORD *)v9 + 3);
  if (v17 >= v16 >> 1)
  {
    v9 = sub_1A39AC72C((char *)(v16 > 1), v17 + 1, 1, v9);
    *(_QWORD *)(v4 + 16) = v9;
  }
  *((_QWORD *)v9 + 2) = v17 + 1;
  v18 = &v9[32 * v17];
  *((_QWORD *)v18 + 4) = v5;
  *((_QWORD *)v18 + 5) = v6;
  *((_QWORD *)v18 + 6) = v7;
  *((_QWORD *)v18 + 7) = v8;
  return v11 ^ 1u;
}

char *sub_1A39AC72C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D2B20);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1A39AC82C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_1A3AB5654() & 1;
}

void sub_1A39AC880()
{
  JUMPOUT(0x1A8597738);
}

void sub_1A39AC890()
{
  JUMPOUT(0x1A8597738);
}

uint64_t sub_1A39AC8A0()
{
  return 16;
}

__n128 sub_1A39AC8AC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A39AC8BC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for FormattedStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormattedStream);
}

uint64_t method lookup function for FormattedStream()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FormattedStream.indentLevel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of FormattedStream.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of FormattedStream.indent()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of FormattedStream.dedent()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of FormattedStream.writeIndent()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of FormattedStream.withIndent(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of FormattedStream.line(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of FormattedStream.write(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of FormattedStream.writeEscaped(_:style:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of FormattedStream.writeBracketed(_:style:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of FormattedStream.writeQuoted(_:style:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of FormattedStream.writeMultilineString(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of FormattedStream.writeQuotedValues<A>(_:style:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t sub_1A39AC9EC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for FormattedStream.EscapeStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormattedStream.EscapeStyle);
}

uint64_t type metadata accessor for FormattedStream.BracketStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormattedStream.BracketStyle);
}

uint64_t _s5VoiceV6GenderOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_1A39ACAA4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A39ACAF0 + 4 * byte_1A3ABFD4D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A39ACB24 + 4 * asc_1A3ABFD48[v4]))();
}

uint64_t sub_1A39ACB24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A39ACB2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A39ACB34);
  return result;
}

uint64_t sub_1A39ACB40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A39ACB48);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A39ACB4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A39ACB54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for FormattedStream.BracketStyle.AnglingStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormattedStream.BracketStyle.AnglingStyle);
}

uint64_t sub_1A39ACB6C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A39ACB90()
{
  return swift_deallocObject();
}

uint64_t sub_1A39ACBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1A85976A8](a1, v6, a5);
}

void __swiftcall CoreSynthesizer.Voice._bridgeToObjectiveC()(TTSSpeechVoice *__return_ptr retstr)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  int v20;
  int v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int16 v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _QWORD *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85[4];
  uint64_t v86;
  uint64_t v87;

  v2 = sub_1A3AB4538();
  v83 = *(_QWORD *)(v2 - 8);
  v84 = v2;
  v3 = MEMORY[0x1E0C80A78](v2);
  v82 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v81 = (char *)&v73 - v5;
  v7 = *v1;
  v6 = v1[1];
  v9 = v1[3];
  v8 = v1[4];
  v74 = *((unsigned __int8 *)v1 + 40);
  v76 = *((unsigned __int8 *)v1 + 41);
  v10 = v1[6];
  v75 = *((char *)v1 + 56);
  v11 = v1[8];
  v78 = (id)v1[10];
  sub_1A39A4820((uint64_t *)&unk_1EE6D23A0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABFEE0;
  *(_QWORD *)(inited + 32) = sub_1A3AB497C();
  *(_QWORD *)(inited + 40) = v13;
  v14 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = v8;
  *(_QWORD *)(inited + 80) = sub_1A3AB497C();
  *(_QWORD *)(inited + 88) = v15;
  *(_QWORD *)(inited + 120) = v14;
  *(_QWORD *)(inited + 96) = v7;
  *(_QWORD *)(inited + 104) = v6;
  v16 = v11;
  *(_QWORD *)(inited + 128) = sub_1A3AB497C();
  *(_QWORD *)(inited + 136) = v17;
  v18 = *(_QWORD *)(v11 + 16);
  v77 = (_QWORD *)inited;
  if (v18)
  {
    v73 = v10;
    v86 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1A39AE488(0, v18, 0);
    v19 = sub_1A39AE5A4(v16);
    v21 = v20;
    v23 = v22 & 1;
    v79 = v16;
    v80 = v16 + 56;
    do
    {
      if (v19 < 0 || v19 >= 1 << *(_BYTE *)(v16 + 32))
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        JUMPOUT(0x1A39AD560);
      }
      if (((*(_QWORD *)(v80 + (((unint64_t)v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
        goto LABEL_29;
      if (*(_DWORD *)(v16 + 36) != v21)
        goto LABEL_30;
      v25 = v83;
      v24 = v84;
      v26 = *(_QWORD *)(v16 + 48) + *(_QWORD *)(v83 + 72) * v19;
      v27 = v81;
      (*(void (**)(char *, int64_t, uint64_t))(v83 + 16))(v81, v26, v84);
      v28 = v82;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v82, v27, v24);
      v29 = sub_1A3AB43D0();
      v31 = v30;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
      v32 = v86;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A39AE488(0, *(_QWORD *)(v32 + 16) + 1, 1);
        v32 = v86;
      }
      v34 = *(_QWORD *)(v32 + 16);
      v33 = *(_QWORD *)(v32 + 24);
      if (v34 >= v33 >> 1)
      {
        sub_1A39AE488((char *)(v33 > 1), v34 + 1, 1);
        v32 = v86;
      }
      *(_QWORD *)(v32 + 16) = v34 + 1;
      v35 = v32 + 16 * v34;
      *(_QWORD *)(v35 + 32) = v29;
      *(_QWORD *)(v35 + 40) = v31;
      v16 = v79;
      v36 = sub_1A39AE644(v19, v21, v23 & 1, v79);
      v19 = v36;
      v21 = v37;
      v23 = v38 & 1;
      --v18;
    }
    while (v18);
    sub_1A39AE728(v36, v37, v38 & 1);
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x1E0DEA968];
    inited = (uint64_t)v77;
    v10 = v73;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32 = MEMORY[0x1E0DEE9D8];
  }
  v39 = v75;
  *(_QWORD *)(inited + 168) = sub_1A39A4820(&qword_1EE6D2380);
  *(_QWORD *)(inited + 144) = v32;
  *(_QWORD *)(inited + 176) = sub_1A3AB497C();
  *(_QWORD *)(inited + 184) = v40;
  v41 = sub_1A3AB497C();
  *(_QWORD *)(inited + 216) = v14;
  *(_QWORD *)(inited + 192) = v41;
  *(_QWORD *)(inited + 200) = v42;
  *(_QWORD *)(inited + 224) = sub_1A3AB497C();
  *(_QWORD *)(inited + 232) = v43;
  *(_QWORD *)(inited + 240) = sub_1A3AB497C();
  *(_QWORD *)(inited + 248) = v44;
  *(_QWORD *)(inited + 264) = v14;
  strcpy((char *)(inited + 272), "NoveltyVoice");
  *(_BYTE *)(inited + 285) = 0;
  *(_WORD *)(inited + 286) = -5120;
  v45 = sub_1A39AE734();
  v86 = *(_QWORD *)sub_1A3A39180();
  v85[0] = v10;
  sub_1A39AE770();
  sub_1A3AB51C8();
  *(_QWORD *)(inited + 288) = sub_1A3AB50B4();
  *(_QWORD *)(inited + 312) = v45;
  strcpy((char *)(inited + 320), "PersonalVoice");
  *(_WORD *)(inited + 334) = -4864;
  LOBYTE(v86) = v39;
  LOBYTE(v85[0]) = 7;
  static CoreSynthesizer.Voice.VoiceType.== infix(_:_:)(&v86, (unsigned __int8 *)v85);
  *(_QWORD *)(inited + 336) = sub_1A3AB50B4();
  *(_QWORD *)(inited + 360) = v45;
  *(_QWORD *)(inited + 368) = 0xD000000000000010;
  *(_QWORD *)(inited + 376) = 0x80000001A3AEF840;
  objc_msgSend(v78, sel_auComponentDesc);
  v46 = WORD2(v86);
  v47 = HIWORD(HIDWORD(v86));
  v48 = BYTE6(v86);
  LODWORD(v84) = HIDWORD(v86) >> 8;
  v49 = BYTE5(v86);
  v50 = BYTE4(v86);
  v51 = (HIBYTE(v86) + 1);
  if (v86 < 0)
    v51 = ((HIDWORD(v86) >> 30) & 0xFFFFC0FF | ((HIBYTE(HIDWORD(v86)) & 0x3F) << 8)) + 33217;
  v86 = (v51 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v51) >> 3)) & 7)));
  v52 = MEMORY[0x1A859580C](&v86);
  v54 = (v47 + 1);
  if (v48 >= 0x80)
    v54 = ((v48 >> 6) & 0xFFFFC0FF | ((v47 & 0x3F) << 8)) + 33217;
  v55 = v52;
  v56 = v53;
  v86 = (v54 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v54) >> 3)) & 7)));
  MEMORY[0x1A859580C](&v86);
  v86 = v55;
  v87 = v56;
  swift_bridgeObjectRetain();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v57 = v86;
  v58 = v87;
  v59 = (v84 + 1);
  if (v49 >= 0x80)
    v59 = (v46 & 0x3F00 | (v49 >> 6)) + 33217;
  v86 = (v59 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v59) >> 3)) & 7)));
  MEMORY[0x1A859580C](&v86);
  v86 = v57;
  v87 = v58;
  swift_bridgeObjectRetain();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v60 = v86;
  v61 = v87;
  v62 = (v46 + 1);
  if (v50 >= 0x80)
    v62 = ((v50 >> 6) & 0xFFFFC0FF | ((v46 & 0x3F) << 8)) + 33217;
  v63 = MEMORY[0x1E0DEA968];
  v64 = v77;
  v86 = (v62 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v62) >> 3)) & 7)));
  MEMORY[0x1A859580C](&v86);
  v86 = v60;
  v87 = v61;
  swift_bridgeObjectRetain();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v65 = v87;
  v64[48] = v86;
  v64[49] = v65;
  v64[51] = v63;
  v64[52] = 0xD00000000000001BLL;
  v64[53] = 0x80000001A3AEF860;
  v66 = objc_msgSend(v78, sel_synthesizerBundleIdentifier);
  if (v66)
  {
    v67 = v66;
    v68 = sub_1A3AB497C();
    v70 = v69;

    v71 = v64 + 54;
    v64[57] = v63;
    if (v70)
    {
      *v71 = v68;
      v72 = v74;
      goto LABEL_27;
    }
  }
  else
  {
    v71 = v64 + 54;
    v64[57] = v63;
  }
  v72 = v74;
  *v71 = 0;
  v70 = 0xE000000000000000;
LABEL_27:
  v64[55] = v70;
  sub_1A39AD574((uint64_t)v64);
  __asm { BR              X10 }
}

unint64_t sub_1A39AD574(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A39A4820(&qword_1EE6D2390);
  v2 = sub_1A3AB54B0();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1A39AE7CC(v6, (uint64_t)&v15);
    v7 = v15;
    v8 = v16;
    result = sub_1A39A2734(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1A39AE7B4(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1A39AD69C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[3];
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1A39A4820(&qword_1EE6D2398);
    v2 = sub_1A3AB54B0();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_37;
      v14 = *(_QWORD *)(v28 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_37;
        v14 = *(_QWORD *)(v28 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v27)
            goto LABEL_37;
          v14 = *(_QWORD *)(v28 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    sub_1A39A47E4(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(_QWORD *)&v39 = v19;
    *((_QWORD *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(_QWORD *)&v37[0] = v19;
    *((_QWORD *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1A39AE7B4(v38, v32);
    v33 = v29;
    v34 = v30;
    v35 = v31;
    sub_1A39AE7B4(v32, v36);
    v29 = v33;
    v30 = v34;
    v31 = v35;
    sub_1A39AE7B4(v36, v37);
    sub_1A39AE7B4(v37, &v33);
    result = sub_1A3AB5264();
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(_QWORD *)(v10 + 32) = v31;
    result = (uint64_t)sub_1A39AE7B4(&v33, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_1A39AE7C4();
    return v2;
  }
  v14 = *(_QWORD *)(v28 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t static CoreSynthesizer.Voice._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  int v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t result;
  _OWORD v13[6];
  int v14;
  char v15;

  v4 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v5 = objc_msgSend(a1, sel_identifier);
  if (!v5)
  {
    sub_1A3AB497C();
    v5 = (id)sub_1A3AB4958();
    swift_bridgeObjectRelease();
  }
  v6 = objc_msgSend(v4, sel_resourceWithVoiceId_, v5);

  if (v6)
  {
    sub_1A39A2EB8(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72), *(void **)(a2 + 80));
    CoreSynthesizer.Voice.init(resource:)(v6, (uint64_t)v13);
    v7 = v14;
    v8 = v15;
    v9 = v13[1];
    *(_OWORD *)a2 = v13[0];
    *(_OWORD *)(a2 + 16) = v9;
    v10 = v13[3];
    *(_OWORD *)(a2 + 32) = v13[2];
    *(_OWORD *)(a2 + 48) = v10;
    v11 = v13[5];
    *(_OWORD *)(a2 + 64) = v13[4];
    *(_OWORD *)(a2 + 80) = v11;
    *(_BYTE *)(a2 + 100) = v8;
    *(_DWORD *)(a2 + 96) = v7;
    return 1;
  }
  else
  {
    result = sub_1A3AB5444();
    __break(1u);
  }
  return result;
}

void static CoreSynthesizer.Voice._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 v32;

  if (!a1)
    goto LABEL_7;
  v4 = (void *)objc_opt_self();
  v5 = a1;
  v6 = objc_msgSend(v4, sel_sharedInstance);
  v7 = objc_msgSend(v5, sel_identifier);
  if (!v7)
  {
    sub_1A3AB497C();
    v7 = (id)sub_1A3AB4958();
    swift_bridgeObjectRelease();
  }
  v8 = objc_msgSend(v6, sel_resourceWithVoiceId_, v7);

  if (v8 && (v20 = v5, CoreSynthesizer.Voice.init(resource:)(v8, (uint64_t)&v21), v19 = v22, (_QWORD)v22))
  {
    v9 = v23;
    v10 = v24;
    v11 = v25;
    v12 = v26;
    v13 = v27;
    v18 = v28;
    v14 = v31 | ((unint64_t)v32 << 32);
    v16 = v29;
    v15 = v30;
    v17 = v21;

    *(_QWORD *)a2 = v17;
    *(_OWORD *)(a2 + 8) = v19;
    *(_QWORD *)(a2 + 24) = v9;
    *(_QWORD *)(a2 + 32) = v10;
    *(_WORD *)(a2 + 40) = v11;
    *(_QWORD *)(a2 + 48) = v12;
    *(_BYTE *)(a2 + 56) = v13;
    *(_OWORD *)(a2 + 64) = v18;
    *(_QWORD *)(a2 + 80) = v16;
    *(_DWORD *)(a2 + 88) = v15;
    *(_BYTE *)(a2 + 92) = BYTE4(v15) & 1;
    *(_DWORD *)(a2 + 96) = v14;
    *(_BYTE *)(a2 + 100) = BYTE4(v14) & 1;
  }
  else
  {
LABEL_7:
    sub_1A3AB5444();
    __break(1u);
  }
}

uint64_t sub_1A39ADDF4(void *a1, uint64_t a2)
{
  static CoreSynthesizer.Voice._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  return 1;
}

uint64_t sub_1A39ADE10(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820(&qword_1EE6D2390);
  v6 = sub_1A3AB5498();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_1A39AE7B4(v24, v35);
      }
      else
      {
        sub_1A39A47E4((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_1A3AB56FC();
      sub_1A3AB4A30();
      result = sub_1A3AB5738();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_1A39AE7B4(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

_OWORD *sub_1A39AE10C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1A39A2734(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        sub_1A39A47C4((uint64_t)v19);
        return sub_1A39AE7B4(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1A39AE2A4();
      goto LABEL_7;
    }
    sub_1A39ADE10(v15, a4 & 1);
    v21 = sub_1A39A2734(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1A39AE23C(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_1A3AB5678();
  __break(1u);
  return result;
}

_OWORD *sub_1A39AE23C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1A39AE7B4(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void *sub_1A39AE2A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D2390);
  v2 = *v0;
  v3 = sub_1A3AB548C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_1A39A47E4(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1A39AE7B4(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

char *sub_1A39AE488(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A39AE4A4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1A39AE4A4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1ED1B5468);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_1A39AE5A4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_1A39AE644(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1A39AE728(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_1A39AE734()
{
  unint64_t result;

  result = qword_1EE6D2388;
  if (!qword_1EE6D2388)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE6D2388);
  }
  return result;
}

unint64_t sub_1A39AE770()
{
  unint64_t result;

  result = qword_1ED1B5340;
  if (!qword_1ED1B5340)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Voice.Trait, &type metadata for CoreSynthesizer.Voice.Trait);
    atomic_store(result, (unint64_t *)&qword_1ED1B5340);
  }
  return result;
}

_OWORD *sub_1A39AE7B4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1A39AE7C4()
{
  return swift_release();
}

uint64_t sub_1A39AE7CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D2378);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

float Optional<A>.auParamValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  float v13;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v5);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v12, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
    return *(float *)sub_1A3A23A2C();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    v13 = (*(float (**)(uint64_t, uint64_t))(a2 + 8))(v8, a2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v13;
}

void sub_1A39AE944(uint64_t a1@<X1>, uint64_t a2@<X2>, float *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + a1 - 8);
  v5 = sub_1A3AB50FC();
  *a3 = Optional<A>.auParamValue.getter(v5, v4);
}

uint64_t sub_1A39AE988(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  float v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a4 + a3 - 8);
  v5 = *a1;
  v6 = sub_1A3AB50FC();
  return Optional<A>.auParamValue.setter(v6, v4, v5);
}

uint64_t Optional<A>.auParamValue.setter(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v3;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v4, a1);
  v8.n128_u32[0] = *(_DWORD *)sub_1A3A23A2C();
  v9 = *(_QWORD *)(a1 + 16);
  if (v8.n128_f32[0] == a3)
  {
    v10 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, float))(a2 + 32))(v9, a2, a3);
    v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v9 - 8) + 56))(v4, v10, 1, v9, v8);
}

uint64_t (*Optional<A>.auParamValue.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)a1 = a2;
  *(float *)(a1 + 24) = Optional<A>.auParamValue.getter(a2, a3);
  return sub_1A39AEAA4;
}

uint64_t sub_1A39AEAA4(uint64_t a1)
{
  return Optional<A>.auParamValue.setter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(float *)(a1 + 24));
}

uint64_t Optional<A>.init(auVal:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  __n128 v8;
  uint64_t v9;

  v8.n128_u32[0] = *(_DWORD *)sub_1A3A23A2C();
  if (v8.n128_f32[0] == a4)
  {
    v9 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, float))(a2 + 32))(a1, a2, a4);
    v9 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(a1 - 8) + 56))(a3, v9, 1, a1, v8);
}

float sub_1A39AEB50(uint64_t a1, uint64_t a2)
{
  return Optional<A>.auParamValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_1A39AEB58(uint64_t a1, uint64_t a2, float a3)
{
  return Optional<A>.auParamValue.setter(a1, *(_QWORD *)(a2 - 8), a3);
}

uint64_t (*sub_1A39AEB60(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = a2;
  v5 = *(_QWORD *)(a3 - 8);
  *(_QWORD *)(a1 + 16) = v5;
  *(float *)(a1 + 24) = Optional<A>.auParamValue.getter(a2, v5);
  return sub_1A39AEBA4;
}

uint64_t sub_1A39AEBA4(uint64_t a1)
{
  return Optional<A>.auParamValue.setter(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(float *)(a1 + 24));
}

uint64_t sub_1A39AEBD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  return Optional<A>.init(auVal:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3, a4);
}

float sub_1A39AEBE4@<S0>(float *a1@<X0>, _DWORD *a2@<X8>)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

float sub_1A39AEBF0(float *a1, _DWORD *a2)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

void Float.auParamValue.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*Float.auParamValue.modify(uint64_t a1))()
{
  _DWORD *v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1;
  return sub_1A39B12B4;
}

float sub_1A39AEC20()
{
  uint64_t v0;

  return *(float *)v0;
}

void sub_1A39AEC28(float a1)
{
  float *v1;

  *v1 = a1;
}

float (*sub_1A39AEC30(uint64_t a1))(uint64_t a1)
{
  _DWORD *v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1;
  return sub_1A39AEC4C;
}

float sub_1A39AEC4C(uint64_t a1)
{
  float result;

  result = *(float *)(a1 + 8);
  **(float **)a1 = result;
  return result;
}

void sub_1A39AEC5C(float *a1@<X8>, float a2@<S0>)
{
  *a1 = a2;
}

Swift::Bool __swiftcall Bool.init(auVal:)(Swift::Float auVal)
{
  return auVal > 0.0;
}

float Bool.auParamValue.getter(char a1)
{
  float result;

  result = 0.0;
  if ((a1 & 1) != 0)
    return 1.0;
  return result;
}

_BYTE *sub_1A39AEC84@<X0>(_BYTE *result@<X0>, float *a2@<X8>)
{
  float v2;

  v2 = 0.0;
  if (*result)
    v2 = 1.0;
  *a2 = v2;
  return result;
}

float *sub_1A39AECA0(float *result, BOOL *a2)
{
  *a2 = *result > 0.0;
  return result;
}

void Bool.auParamValue.setter(float a1)
{
  BOOL *v1;

  *v1 = a1 > 0.0;
}

uint64_t (*Bool.auParamValue.modify(uint64_t a1))()
{
  _BYTE *v1;
  float v2;

  *(_QWORD *)a1 = v1;
  v2 = 0.0;
  if (*v1)
    v2 = 1.0;
  *(float *)(a1 + 8) = v2;
  return sub_1A39B12B8;
}

float sub_1A39AECF0()
{
  _BYTE *v0;
  float result;

  result = 0.0;
  if (*v0)
    return 1.0;
  return result;
}

void sub_1A39AED08(float a1)
{
  BOOL *v1;

  *v1 = a1 > 0.0;
}

uint64_t (*sub_1A39AED18(uint64_t a1))(uint64_t result)
{
  _BYTE *v1;
  float v2;

  *(_QWORD *)a1 = v1;
  v2 = 0.0;
  if (*v1)
    v2 = 1.0;
  *(float *)(a1 + 8) = v2;
  return sub_1A39AED44;
}

uint64_t sub_1A39AED44(uint64_t result)
{
  **(_BYTE **)result = *(float *)(result + 8) > 0.0;
  return result;
}

void sub_1A39AED5C(BOOL *a1@<X8>, float a2@<S0>)
{
  *a1 = a2 > 0.0;
}

Swift::Int __swiftcall Int.init(auVal:)(Swift::Float auVal)
{
  Swift::Int result;

  if ((~LODWORD(auVal) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (auVal <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (auVal < 9.2234e18)
    return (uint64_t)auVal;
LABEL_7:
  __break(1u);
  return result;
}

float Int.auParamValue.getter(uint64_t a1)
{
  return (float)a1;
}

float sub_1A39AEDB8@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  float result;

  result = (float)*a1;
  *a2 = result;
  return result;
}

float *sub_1A39AEDC8(float *result, _QWORD *a2)
{
  float v2;

  v2 = *result;
  if ((~*(_DWORD *)result & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 9.2234e18)
  {
    *a2 = (uint64_t)v2;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void Int.auParamValue.setter(float a1)
{
  _QWORD *v1;

  if ((~LODWORD(a1) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a1 <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a1 < 9.2234e18)
  {
    *v1 = (uint64_t)a1;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t (*Int.auParamValue.modify(uint64_t a1))()
{
  uint64_t *v1;

  *(_QWORD *)a1 = v1;
  *(float *)(a1 + 8) = (float)*v1;
  return sub_1A39AEE7C;
}

float sub_1A39AEE80()
{
  uint64_t *v0;

  return (float)*v0;
}

void sub_1A39AEE8C(float a1)
{
  _QWORD *v1;

  if ((~LODWORD(a1) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a1 <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a1 < 9.2234e18)
  {
    *v1 = (uint64_t)a1;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t (*sub_1A39AEED4(uint64_t a1))()
{
  uint64_t *v1;

  *(_QWORD *)a1 = v1;
  *(float *)(a1 + 8) = (float)*v1;
  return sub_1A39AEE7C;
}

uint64_t sub_1A39AEEF4(uint64_t result, char a2)
{
  float v2;
  BOOL v3;

  v2 = *(float *)(result + 8);
  v3 = (LODWORD(v2) & 0x7F800000) == 2139095040;
  if ((a2 & 1) == 0)
    goto LABEL_6;
  if ((LODWORD(v2) & 0x7F800000) == 0x7F800000)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v2 <= -9.2234e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v3 = v2 == 9.2234e18;
  if (v2 < 9.2234e18)
  {
LABEL_9:
    **(_QWORD **)result = (uint64_t)v2;
    return result;
  }
  __break(1u);
LABEL_6:
  if (v3)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v2 <= -9.2234e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v2 < 9.2234e18)
    goto LABEL_9;
LABEL_14:
  __break(1u);
  return result;
}

void sub_1A39AEF80(_QWORD *a1@<X8>, float a2@<S0>)
{
  if ((~LODWORD(a2) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a2 < 9.2234e18)
  {
    *a1 = (uint64_t)a2;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_1A39AEFC8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1A39AEFFC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 136))(*a1);
}

uint64_t sub_1A39AF028()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

void sub_1A39AF058(char a1)
{
  _BYTE *v1;
  uint64_t v3;
  _QWORD *v4;
  void *v5;

  v3 = swift_beginAccess();
  v1[16] = a1;
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 176))(v3);
  if (v4)
  {
    v5 = v4;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x70))();

  }
}

uint64_t (*sub_1A39AF0C8(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A39AF108;
}

uint64_t sub_1A39AF10C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39AF13C(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(_QWORD **)a2 + 160))(*a1);
}

id sub_1A39AF16C()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 24);
}

void sub_1A39AF19C(void *a1)
{
  _QWORD *v1;
  void *v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;

  swift_beginAccess();
  v3 = (void *)v1[3];
  v1[3] = a1;
  v4 = a1;

  v5 = (_QWORD *)(*(uint64_t (**)(void))(*v1 + 176))();
  if (v5)
  {
    v6 = v5;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x70))();

    v4 = v6;
  }

}

uint64_t (*sub_1A39AF22C(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A39AF108;
}

void sub_1A39AF26C(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD *v5;
  id v6;

  v4 = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(**(_QWORD **)(a1 + 24) + 176))(v4);
    if (v5)
    {
      v6 = v5;
      (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x70))();

    }
  }
}

uint64_t sub_1A39AF2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D2470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A39AF330()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x1A85978E8](v0 + 120);
}

void sub_1A39AF370(void *a1)
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();

}

void (*sub_1A39AF3BC(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = MEMORY[0x1A85978E8](v1 + 120);
  return sub_1A39AF424;
}

void sub_1A39AF424(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();

  }
  free(v3);
}

uint64_t sub_1A39AF48C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = *(_QWORD *)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 32);
  v13 = sub_1A39AF518(a3, v11);
  v14 = sub_1A39B0B80(a1, a2, v13, a4, a5, v5, v11, v12);

  sub_1A39A47C4(a3);
  return v14;
}

uint64_t sub_1A39AF518(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t AUParamWrapper.deinit()
{
  uint64_t v0;

  sub_1A39A47C4(v0 + 32);
  sub_1A39B11F4(v0 + 72, &qword_1EE6D2470);
  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t AUParamWrapper.__deallocating_deinit()
{
  uint64_t v0;

  sub_1A39A47C4(v0 + 32);
  sub_1A39B11F4(v0 + 72, &qword_1EE6D2470);
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t AUParamValue.wrapper.getter()
{
  sub_1A39B08DC();
  return swift_retain();
}

uint64_t AUParamValue.wrapper.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*AUParamValue.wrapper.modify())()
{
  return nullsub_19;
}

uint64_t AUParamValue.init(param:defaultValue:internalOnly:featureFlag:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[40];

  v14 = type metadata accessor for AUParamWrapper();
  sub_1A39AF2E8(a4, (uint64_t)v17);
  v15 = sub_1A39B0B80(1, a1, a2, (uint64_t)v17, a3, v14, a5, a6);

  sub_1A39B11F4(a4, &qword_1EE6D2470);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a2, a5);
  *a7 = v15;
  return result;
}

uint64_t AUParamValue.projectedValue.getter()
{
  return swift_retain();
}

uint64_t AUParamValue.wrappedValue.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  float v5;
  float v6;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (void *)(*(uint64_t (**)(void))(**(_QWORD **)v1 + 152))();
  objc_msgSend(v4, sel_value);
  v6 = v5;

  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)(a1 + 24) + 32))(v3, v6);
}

uint64_t sub_1A39AF748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for AUParamValue(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8), a4);
  return AUParamValue.wrappedValue.getter(v4);
}

void sub_1A39AF790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for AUParamValue(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  sub_1A39B0C70(a1, v5);
}

uint64_t AUParamValue.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  sub_1A39B0C70(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

void (*AUParamValue.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  AUParamValue.wrappedValue.getter(a2);
  return sub_1A39AF8A0;
}

void sub_1A39AF8A0(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_1A39B0C70((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    sub_1A39B0C70((*a1)[5], v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t sub_1A39AF948()
{
  sub_1A39B08DC();
  return swift_retain();
}

id TTSMagicFirstPartyAudioUnit.__allocating_init(componentDescription:options:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  objc_class *v4;
  id v5;
  id v6;
  id v7;
  _QWORD v9[2];
  int v10;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x1E0C80C00];
  v11[0] = 0;
  v9[0] = a1;
  v9[1] = a2;
  v10 = a3;
  v5 = objc_msgSend(objc_allocWithZone(v4), sel_initWithComponentDescription_options_error_, v9, a4, v11);
  if (v5)
  {
    v6 = v11[0];
  }
  else
  {
    v7 = v11[0];
    sub_1A3AB42BC();

    swift_willThrow();
  }
  return v5;
}

void *TTSMagicFirstPartyAudioUnit.init(componentDescription:options:)(unint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  char *v4;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  void (*v13)(void);
  id v14;
  id v15;
  id v16;
  _DWORD v18[5];
  objc_super v19;
  id v20[2];

  v7 = a2;
  v8 = a1;
  v20[1] = *(id *)MEMORY[0x1E0C80C00];
  v9 = HIDWORD(a1);
  v10 = HIDWORD(a2);
  *(_QWORD *)&v4[OBJC_IVAR____TtC12TextToSpeech27TTSMagicFirstPartyAudioUnit____lazy_storage___allValueParams] = 0;
  v20[0] = 0;
  v19.receiver = v4;
  v19.super_class = (Class)type metadata accessor for TTSMagicFirstPartyAudioUnit();
  v18[0] = v8;
  v18[1] = v9;
  v18[2] = v7;
  v18[3] = v10;
  v18[4] = a3;
  v11 = objc_msgSendSuper2(&v19, sel_initWithComponentDescription_options_error_, v18, a4, v20);
  v12 = v11;
  if (v11)
  {
    v13 = *(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x70);
    v14 = v20[0];
    v15 = v12;
    v13();

  }
  else
  {
    v16 = v20[0];
    sub_1A3AB42BC();

    swift_willThrow();
  }
  return v12;
}

uint64_t sub_1A39AFBE8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OBJC_IVAR____TtC12TextToSpeech27TTSMagicFirstPartyAudioUnit____lazy_storage___allValueParams;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC12TextToSpeech27TTSMagicFirstPartyAudioUnit____lazy_storage___allValueParams])
  {
    v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC12TextToSpeech27TTSMagicFirstPartyAudioUnit____lazy_storage___allValueParams];
  }
  else
  {
    v2 = sub_1A39AFC4C(v0);
    *(_QWORD *)&v0[v1] = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1A39AFC4C(void *a1)
{
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[2];
  _OWORD v23[2];
  void *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v16 = sub_1A3AB575C();
  v15 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)&v26 + 1) = type metadata accessor for TTSMagicFirstPartyAudioUnit();
  v24 = a1;
  v4 = a1;
  sub_1A3AB5744();
  v28 = MEMORY[0x1E0DEE9D8];
  v14 = v3;
  sub_1A3AB5750();
  sub_1A3AB53C0();
  swift_release();
  swift_retain();
  sub_1A3AB54C8();
  while (v27)
  {
    v5 = v24;
    v6 = v25;
    v22[0] = v24;
    v22[1] = v25;
    sub_1A39AE7B4(&v26, v23);
    v17[0] = v5;
    v17[1] = v6;
    sub_1A39A47E4((uint64_t)v23, (uint64_t)&v18);
    sub_1A39A4820(&qword_1ED1B5278);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v7 = *((_QWORD *)&v20 + 1);
      v8 = v21;
      sub_1A39A19CC(&v19, *((uint64_t *)&v20 + 1));
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
      sub_1A39A47C4((uint64_t)&v19);
      if (*(_BYTE *)(v9 + 112) == 1 && (TTSIsInternalBuild() & 1) == 0)
      {
LABEL_11:
        sub_1A39B11F4((uint64_t)v22, &qword_1ED1B5288);
        swift_release();
        goto LABEL_5;
      }
      sub_1A39AF2E8(v9 + 72, (uint64_t)&v19);
      if (*((_QWORD *)&v20 + 1))
      {
        sub_1A39A1AB8(&v19, (uint64_t)v17);
        v10 = sub_1A3AB458C();
        sub_1A39A47C4((uint64_t)v17);
        if ((v10 & 1) == 0)
          goto LABEL_11;
      }
      else
      {
        sub_1A39B11F4((uint64_t)&v19, &qword_1EE6D2470);
      }
      v11 = swift_retain();
      MEMORY[0x1A8595980](v11);
      if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1A3AB4BE0();
      sub_1A3AB4C10();
      sub_1A3AB4BC8();
      swift_release();
    }
    else
    {
      v21 = 0;
      v19 = 0u;
      v20 = 0u;
      sub_1A39B11F4((uint64_t)&v19, &qword_1ED1B5280);
    }
    sub_1A39B11F4((uint64_t)v22, &qword_1ED1B5288);
LABEL_5:
    sub_1A3AB54C8();
  }
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v14, v16);
  return v28;
}

uint64_t sub_1A39AFF2C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC12TextToSpeech27TTSMagicFirstPartyAudioUnit____lazy_storage___allValueParams) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1A39AFF44(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1A39AFBE8();
  return sub_1A39AFF78;
}

uint64_t sub_1A39AFF78(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + OBJC_IVAR____TtC12TextToSpeech27TTSMagicFirstPartyAudioUnit____lazy_storage___allValueParams) = *a1;
  return swift_bridgeObjectRelease();
}

void sub_1A39AFF90()
{
  _QWORD *v0;
  void *v1;
  unint64_t v2;
  _QWORD *v3;
  void *v4;
  id v5;

  v1 = (void *)objc_opt_self();
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
  v3 = v0;
  sub_1A39B08E4(v2, v3);
  swift_bridgeObjectRelease();

  sub_1A39B11BC(0, (unint64_t *)&unk_1ED1B5290);
  v4 = (void *)sub_1A3AB4BA4();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v1, sel_createTreeWithChildren_, v4);

  objc_msgSend(v3, sel_setParameterTree_, v5);
}

unint64_t sub_1A39B0084(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A39A4820(&qword_1EE6D2B30);
  v2 = (_QWORD *)sub_1A3AB54B0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_1A39A2734(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id TTSMagicFirstPartyAudioUnit.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TTSMagicFirstPartyAudioUnit();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A39B024C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820(&qword_1EE6D2B30);
  v38 = a2;
  v6 = sub_1A3AB5498();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    sub_1A3AB56FC();
    sub_1A3AB4A30();
    result = sub_1A3AB5738();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t sub_1A39B0558(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1A3AB5234();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1A3AB56FC();
        swift_bridgeObjectRetain();
        sub_1A3AB4A30();
        v9 = sub_1A3AB5738();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

id sub_1A39B072C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D2B30);
  v2 = *v0;
  v3 = sub_1A3AB548C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A39B08DC()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1A39B08E4(unint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void *);
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v14 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    v4 = sub_1A3AB5480();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      for (i = 4; ; ++i)
      {
        v6 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v7 = MEMORY[0x1A85960B8](i - 4, a1);
          v8 = i - 3;
          if (__OFADD__(v6, 1))
            goto LABEL_16;
        }
        else
        {
          v7 = *(_QWORD *)(a1 + 8 * i);
          swift_retain();
          v8 = i - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        if (((*(uint64_t (**)(void))(*(_QWORD *)v7 + 128))() & 1) != 0)
        {
          v9 = *(uint64_t (**)(void *))(*(_QWORD *)v7 + 184);
          v10 = a2;
          v11 = v9(a2);
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 152))(v11);
          v12 = swift_release();
          MEMORY[0x1A8595980](v12);
          if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1A3AB4BE0();
          sub_1A3AB4C10();
          sub_1A3AB4BC8();
        }
        else
        {
          swift_release();
        }
        if (v8 == v4)
        {
          swift_bridgeObjectRelease();
          return v14;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1A39B0A94(char a1, void *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v16;
  void (*v17)(uint64_t, uint64_t);
  id v18;
  uint64_t v20[5];

  v20[3] = a7;
  v20[4] = a8;
  v16 = sub_1A39B1230(v20);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(v16, a3, a7);
  swift_unknownObjectWeakInit();
  *(_BYTE *)(a6 + 16) = a1;
  *(_QWORD *)(a6 + 24) = a2;
  sub_1A39A1AD0((uint64_t)v20, a6 + 32);
  v17 = *(void (**)(uint64_t, uint64_t))(a8 + 8);
  v18 = a2;
  v17(a7, a8);
  objc_msgSend(v18, sel_setValue_);
  sub_1A39B126C(a4, a6 + 72);
  *(_BYTE *)(a6 + 112) = a5;
  sub_1A39A47C4((uint64_t)v20);
  return a6;
}

uint64_t sub_1A39B0B80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v14 = a1;
  v15 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AUParamWrapper();
  v18 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, a7);
  return sub_1A39B0A94(v14, a2, (uint64_t)v17, a4, a5, v18, a7, a8);
}

uint64_t type metadata accessor for AUParamWrapper()
{
  return objc_opt_self();
}

void sub_1A39B0C70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v4;

  v4 = (id)(*(uint64_t (**)(void))(**(_QWORD **)v2 + 152))();
  (*(void (**)(_QWORD))(*(_QWORD *)(a2 + 24) + 8))(*(_QWORD *)(a2 + 16));
  objc_msgSend(v4, sel_setValue_);

}

uint64_t type metadata accessor for TTSMagicFirstPartyAudioUnit()
{
  return objc_opt_self();
}

uint64_t sub_1A39B0CF8()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  id v16;
  double v17;
  id v18;
  id v19;
  char isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  char v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;

  v44 = (_QWORD *)sub_1A39B0084(MEMORY[0x1E0DEE9D8]);
  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
  if (v1 >> 62)
    goto LABEL_32;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    return (uint64_t)v44;
  }
  while (2)
  {
    if (v2 >= 1)
    {
      v3 = 0;
      v4 = v1 & 0xC000000000000001;
      v41 = v2;
      v42 = v1 & 0xC000000000000001;
      v43 = v1;
      while (1)
      {
        if (v4)
        {
          v5 = (_QWORD *)MEMORY[0x1A85960B8](v3, v1);
        }
        else
        {
          v5 = *(_QWORD **)(v1 + 8 * v3 + 32);
          swift_retain();
        }
        v6 = v5[7];
        v7 = v5[8];
        sub_1A39A19CC(v5 + 4, v6);
        v8 = (*(float (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
        if (v8 != *(float *)sub_1A3A23A2C())
          break;
        swift_release();
LABEL_6:
        if (v2 == ++v3)
          goto LABEL_33;
      }
      v9 = (void *)(*(uint64_t (**)(void))(*v5 + 152))();
      v10 = objc_msgSend(v9, sel_identifier);

      v11 = sub_1A3AB497C();
      v1 = v12;

      v13 = v5[7];
      v14 = v5[8];
      sub_1A39A19CC(v5 + 4, v13);
      v15 = (*(float (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
      v16 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
      *(float *)&v17 = v15;
      v18 = objc_msgSend(v16, sel_initWithFloat_, v17);
      if (!v18)
      {
        swift_bridgeObjectRetain();
        v30 = sub_1A39A2734(v11, v1);
        v32 = v31;
        swift_bridgeObjectRelease();
        if ((v32 & 1) != 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            sub_1A39B072C();
          swift_bridgeObjectRelease();
          v33 = *(void **)(v44[7] + 8 * v30);
          sub_1A39B0558(v30, (uint64_t)v44);
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
        }
        swift_bridgeObjectRelease();
        v1 = v43;
        goto LABEL_6;
      }
      v19 = v18;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v22 = sub_1A39A2734(v11, v1);
      v23 = v44[2];
      v24 = (v21 & 1) == 0;
      v25 = v23 + v24;
      if (__OFADD__(v23, v24))
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        swift_bridgeObjectRetain();
        v2 = sub_1A3AB5480();
        swift_bridgeObjectRelease();
        if (!v2)
          goto LABEL_33;
        continue;
      }
      v26 = v21;
      if (v44[3] < v25)
      {
        sub_1A39B024C(v25, isUniquelyReferenced_nonNull_native);
        v27 = sub_1A39A2734(v11, v1);
        if ((v26 & 1) != (v28 & 1))
          goto LABEL_35;
        v22 = v27;
        v29 = v44;
        if ((v26 & 1) == 0)
          goto LABEL_27;
LABEL_23:
        v34 = v29;
        v35 = v29[7];

        *(_QWORD *)(v35 + 8 * v22) = v19;
LABEL_29:
        v44 = v34;
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v4 = v42;
        v1 = v43;
        v2 = v41;
        goto LABEL_6;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v29 = v44;
        if ((v21 & 1) != 0)
          goto LABEL_23;
      }
      else
      {
        sub_1A39B072C();
        v29 = v44;
        if ((v26 & 1) != 0)
          goto LABEL_23;
      }
LABEL_27:
      v29[(v22 >> 6) + 8] |= 1 << v22;
      v36 = (uint64_t *)(v29[6] + 16 * v22);
      *v36 = v11;
      v36[1] = v1;
      *(_QWORD *)(v29[7] + 8 * v22) = v19;
      v37 = v29[2];
      v38 = __OFADD__(v37, 1);
      v39 = v37 + 1;
      if (v38)
        goto LABEL_31;
      v34 = v29;
      v29[2] = v39;
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }
    break;
  }
  __break(1u);
LABEL_35:
  result = sub_1A3AB5678();
  __break(1u);
  return result;
}

uint64_t sub_1A39B10DC()
{
  return 16;
}

__n128 sub_1A39B10E8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A39B10F4()
{
  return 16;
}

__n128 sub_1A39B1100(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of AUParamConvertible.auParamValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AUParamConvertible.auParamValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AUParamConvertible.auParamValue.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AUParamConvertible.init(auVal:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t method lookup function for AUParamWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AUParamWrapper.enabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of AUParamWrapper.enabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of AUParamWrapper.enabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of AUParamWrapper.param.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of AUParamWrapper.param.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of AUParamWrapper.param.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t sub_1A39B1180()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for AUParamValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AUParamValue);
}

uint64_t method lookup function for TTSMagicFirstPartyAudioUnit()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TTSMagicFirstPartyAudioUnit.buildParams()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t sub_1A39B11BC(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1A39B11F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1A39A4820(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *sub_1A39B1230(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1A39B126C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D2470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SpeechSlicer.VoiceQuery(uint64_t a1)
{
  return sub_1A39B9724(a1, (uint64_t *)&unk_1EE6D68E0);
}

uint64_t SpeechSlicer.slices(synthesizer:utteranceVoice:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 128) = a1;
  *(_QWORD *)(v3 + 136) = v2;
  sub_1A39B1450(a2, v3 + 16);
  return swift_task_switch();
}

uint64_t sub_1A39B1318()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = v0[16];
  v1 = v0[17];
  v0[15] = *(_QWORD *)(v1 + *(int *)(type metadata accessor for SpeechSlicer(0) + 24));
  v3 = swift_task_alloc();
  v0[18] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v0 + 2;
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[19] = v4;
  v5 = sub_1A39A4820(&qword_1EE6D2B50);
  v6 = type metadata accessor for SpeechSlicer.Slice(0);
  v7 = sub_1A39B1660();
  *v4 = v0;
  v4[1] = sub_1A39B13EC;
  return sub_1A39A202C((uint64_t)&unk_1EE6D2B48, v3, v5, v6, v7);
}

uint64_t sub_1A39B13EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_1A39B1450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D23C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SpeechSlicer(uint64_t a1)
{
  return sub_1A39B9724(a1, (uint64_t *)&unk_1EE6D6890);
}

uint64_t sub_1A39B14AC(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  id v9;
  _QWORD *v10;

  v8 = *a2;
  sub_1A39B1450(a4, v4 + 16);
  swift_retain();
  v9 = a3;
  sub_1A39B9EA0(a4);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 120) = v10;
  *v10 = v4;
  v10[1] = sub_1A39B154C;
  return sub_1A39B16AC(a1, v8, (uint64_t)v9, v4 + 16);
}

uint64_t sub_1A39B154C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A39B1598(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  _QWORD *v8;

  v7 = *(void **)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_1A39B1604;
  return sub_1A39B14AC(a1, a2, v7, v6);
}

uint64_t sub_1A39B1604()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t type metadata accessor for SpeechSlicer.Slice(uint64_t a1)
{
  return sub_1A39B9724(a1, (uint64_t *)&unk_1EE6D68A0);
}

unint64_t sub_1A39B1660()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6D2B58;
  if (!qword_1EE6D2B58)
  {
    v1 = sub_1A39AB624(&qword_1EE6D2B50);
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EE6D2B58);
  }
  return result;
}

uint64_t sub_1A39B16AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;

  *(_QWORD *)(v4 + 672) = a3;
  *(_QWORD *)(v4 + 664) = a2;
  *(_QWORD *)(v4 + 656) = a1;
  v6 = sub_1A3AB4424();
  *(_QWORD *)(v4 + 680) = v6;
  *(_QWORD *)(v4 + 688) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 696) = swift_task_alloc();
  *(_QWORD *)(v4 + 704) = sub_1A39A4820(&qword_1ED1B52F8);
  *(_QWORD *)(v4 + 712) = swift_task_alloc();
  sub_1A39A4820(&qword_1ED1B52F0);
  *(_QWORD *)(v4 + 720) = swift_task_alloc();
  *(_QWORD *)(v4 + 728) = swift_task_alloc();
  *(_QWORD *)(v4 + 736) = swift_task_alloc();
  v7 = sub_1A3AB4520();
  *(_QWORD *)(v4 + 744) = v7;
  *(_QWORD *)(v4 + 752) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 760) = swift_task_alloc();
  *(_QWORD *)(v4 + 768) = swift_task_alloc();
  sub_1A39A4820(&qword_1EE6D2B68);
  *(_QWORD *)(v4 + 776) = swift_task_alloc();
  v8 = sub_1A3AB45F8();
  *(_QWORD *)(v4 + 784) = v8;
  *(_QWORD *)(v4 + 792) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 800) = swift_task_alloc();
  *(_QWORD *)(v4 + 808) = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  *(_QWORD *)(v4 + 816) = swift_task_alloc();
  *(_QWORD *)(v4 + 824) = swift_task_alloc();
  sub_1A39A4820(&qword_1ED1B5320);
  *(_QWORD *)(v4 + 832) = swift_task_alloc();
  *(_QWORD *)(v4 + 840) = swift_task_alloc();
  v9 = sub_1A3AB4538();
  *(_QWORD *)(v4 + 848) = v9;
  *(_QWORD *)(v4 + 856) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 864) = swift_task_alloc();
  *(_QWORD *)(v4 + 872) = swift_task_alloc();
  v10 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v4 + 880) = *(_OWORD *)a4;
  *(_OWORD *)(v4 + 896) = v10;
  v11 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v4 + 912) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v4 + 928) = v11;
  v12 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v4 + 944) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v4 + 960) = v12;
  v13 = *(_DWORD *)(a4 + 96);
  *(_BYTE *)(v4 + 980) = *(_BYTE *)(a4 + 100);
  *(_DWORD *)(v4 + 976) = v13;
  return swift_task_switch();
}

uint64_t sub_1A39B18CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 792);
  v2 = *(_QWORD *)(v0 + 784);
  v3 = *(_QWORD *)(v0 + 664);
  v4 = *(_QWORD *)(v0 + 656);
  v5 = (int *)type metadata accessor for SpeechSlicer.Slice(0);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 93) = 0;
  v6 = v5[5];
  *(_DWORD *)(v0 + 1104) = v6;
  v7 = v4 + v6;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
  *(_QWORD *)(v0 + 984) = v8;
  v8(v7, 1, 1, v2);
  *(_QWORD *)(v4 + v5[7]) = 0;
  v9 = v5[10];
  *(_DWORD *)(v0 + 1108) = v9;
  v10 = (_QWORD *)(v4 + v9);
  v11 = v5[6];
  *(_DWORD *)(v0 + 1112) = v11;
  v12 = (_QWORD *)(v4 + v11);
  *v12 = 0;
  v12[1] = 0xE000000000000000;
  v13 = v5[8];
  *(_DWORD *)(v0 + 1116) = v13;
  *(_QWORD *)(v4 + v13) = MEMORY[0x1E0DEE9D8];
  v14 = v3
      + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery;
  v15 = v5[9];
  *(_DWORD *)(v0 + 1120) = v15;
  sub_1A39B7B30(v14, v4 + v15, type metadata accessor for SpeechSlicer.VoiceQuery);
  v16 = *(_QWORD *)(v3
                  + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey
                  + 8);
  *v10 = *(_QWORD *)(v3
                   + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey);
  v10[1] = v16;
  v17 = v5[11];
  *(_DWORD *)(v0 + 1124) = v17;
  *(_QWORD *)(v4 + v17) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 992) = v18;
  *v18 = v0;
  v18[1] = sub_1A39B1A28;
  v19 = *(_QWORD *)(v0 + 656);
  v18[46] = *(_QWORD *)(v0 + 664);
  v18[47] = v19;
  return swift_task_switch();
}

uint64_t sub_1A39B1A28()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39B1A7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  void *v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101[3];
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110[3];
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v119)(_QWORD);
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  int *v123;

  v1 = *(_QWORD *)(v0 + 888);
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 672)) + 0x150))();
  *(_QWORD *)(v0 + 1000) = v3;
  if (!v1)
  {
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 856) + 56);
    v7(*(_QWORD *)(v0 + 840), 1, 1, *(_QWORD *)(v0 + 848));
    goto LABEL_7;
  }
  v4 = *(_QWORD *)(v0 + 856);
  v5 = *(_QWORD *)(v0 + 848);
  v6 = *(_QWORD *)(v0 + 840);
  CoreSynthesizer.Voice.primaryLocale.getter(v6);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v7(v6, 0, 1, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) == 1)
  {
LABEL_7:
    *(_QWORD *)(v0 + 1008) = v7;
    sub_1A39B11F4(*(_QWORD *)(v0 + 840), &qword_1ED1B5320);
    v119 = (uint64_t (*)(_QWORD))(**(int **)(*(_QWORD *)v3 + 184) + *(_QWORD *)(*(_QWORD *)v3 + 184));
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1016) = v15;
    *v15 = v0;
    v15[1] = sub_1A39B2628;
    return v119(*(_QWORD *)(v0 + 872));
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 856) + 32))(*(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 848));
  sub_1A39B7B30(*(_QWORD *)(v0 + 656) + *(int *)(v0 + 1120), *(_QWORD *)(v0 + 824), type metadata accessor for SpeechSlicer.VoiceQuery);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v9 = *(_QWORD *)(v0 + 1000);
      v10 = *(uint64_t **)(v0 + 824);
      sub_1A39A2EB8(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 904), *(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936), *(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 952), *(void **)(v0 + 960));
      v11 = *v10;
      v12 = v10[1];
      *(_QWORD *)(v0 + 1024) = v12;
      v118 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v9 + 264)
                                                               + *(_QWORD *)(*(_QWORD *)v9 + 264));
      v13 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1032) = v13;
      *v13 = v0;
      v13[1] = sub_1A39B30B0;
      return v118(v0 + 224, v11, v12);
    }
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 872);
    v17 = *(_QWORD *)(v0 + 856);
    v18 = *(_QWORD *)(v0 + 848);
    v19 = *(_QWORD *)(v0 + 824);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v16, v19, v18);
  }
  v20 = (uint64_t *)(*(_QWORD *)(v0 + 656) + *(int *)(v0 + 1108));
  v21 = v20[1];
  if (v21)
  {
    v22 = *v20;
    v23 = *(uint64_t (**)(uint64_t))((*v2 & **(_QWORD **)(v0 + 672)) + 0x270);
    v24 = swift_bridgeObjectRetain();
    v25 = v23(v24);
    if (*(_QWORD *)(v25 + 16))
    {
      v26 = sub_1A39A2734(v22, v21);
      if ((v27 & 1) != 0)
      {
        v28 = *(_QWORD *)(v0 + 872);
        v29 = *(_QWORD *)(v0 + 856);
        v30 = *(_QWORD *)(v0 + 848);
        v31 = *(_QWORD *)(v0 + 832);
        v32 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v26);
        *(_QWORD *)(v0 + 1040) = v32;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v31, v28, v30);
        v7(v31, 0, 1, v30);
        v33 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 1048) = v33;
        *v33 = v0;
        v33[1] = sub_1A39B32E8;
        return sub_1A39E8938(*(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 832), v32);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v0 + 656) + 8))
  {
    v34 = *(_QWORD *)(v0 + 872);
    v35 = *(_QWORD *)(v0 + 856);
    v36 = *(_QWORD *)(v0 + 848);
    v37 = *(void **)(v0 + 672);
    sub_1A39A2EB8(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 904), *(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936), *(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 952), *(void **)(v0 + 960));
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (*(_QWORD *)(v0 + 888))
  {
    v38 = *(void **)(v0 + 960);
    v39 = *(_QWORD *)(v0 + 864);
    v88 = *(_QWORD *)(v0 + 856);
    v92 = *(_QWORD *)(v0 + 848);
    v40 = *(_QWORD *)(v0 + 768);
    v41 = *(_QWORD *)(v0 + 760);
    v94 = *(_QWORD *)(v0 + 752);
    v97 = *(_QWORD *)(v0 + 744);
    v90 = *(_QWORD *)(v0 + 736);
    v99 = *(_QWORD *)(v0 + 728);
    v104 = *(_QWORD *)(v0 + 704);
    v108 = *(_QWORD *)(v0 + 712);
    v113 = *(_QWORD *)(v0 + 688);
    v120 = *(_QWORD *)(v0 + 680);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42 = v38;
    CoreSynthesizer.Voice.primaryLocale.getter(v39);
    sub_1A3AB452C();
    v43 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
    v43(v39, v92);
    sub_1A3AB44FC();
    v44 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
    v44(v40, v97);
    sub_1A3AB452C();
    sub_1A3AB44FC();
    v44(v41, v97);
    v45 = v108 + *(int *)(v104 + 48);
    sub_1A39B9F00(v90, v108, &qword_1ED1B52F0);
    sub_1A39B9F00(v99, v45, &qword_1ED1B52F0);
    v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v113 + 48);
    if (v46(v108, 1, v120) == 1)
    {
      v47 = *(_QWORD *)(v0 + 736);
      v48 = *(_QWORD *)(v0 + 680);
      sub_1A39B11F4(*(_QWORD *)(v0 + 728), &qword_1ED1B52F0);
      sub_1A39B11F4(v47, &qword_1ED1B52F0);
      if (v46(v45, 1, v48) == 1)
      {
        v121 = v43;
        v49 = *(void **)(v0 + 960);
        *(_OWORD *)v101 = *(_OWORD *)(v0 + 944);
        v114 = *(_QWORD *)(v0 + 936);
        v105 = *(_QWORD *)(v0 + 920);
        v109 = *(_QWORD *)(v0 + 928);
        v50 = *(_QWORD *)(v0 + 912);
        v51 = *(_QWORD *)(v0 + 904);
        v52 = *(_QWORD *)(v0 + 896);
        v53 = *(_QWORD *)(v0 + 888);
        v54 = *(_QWORD *)(v0 + 880);
        sub_1A39B11F4(*(_QWORD *)(v0 + 712), &qword_1ED1B52F0);
        sub_1A39A2EB8(v54, v53, v52, v51, v50, v105, v109, v114, v101[0], v101[1], v49);
LABEL_26:
        v117 = *(_DWORD *)(v0 + 976);
        v112 = *(_BYTE *)(v0 + 980);
        v78 = *(_QWORD *)(v0 + 968);
        v107 = *(_QWORD *)(v0 + 960);
        v103 = *(_OWORD *)(v0 + 944);
        v100 = *(unsigned __int8 *)(v0 + 936);
        v79 = *(_QWORD *)(v0 + 928);
        v80 = *(unsigned __int16 *)(v0 + 920);
        v81 = *(_QWORD *)(v0 + 912);
        v96 = *(_OWORD *)(v0 + 880);
        v98 = *(_OWORD *)(v0 + 896);
        v82 = *(_QWORD *)(v0 + 872);
        v83 = *(_QWORD *)(v0 + 848);
        v84 = *(void **)(v0 + 672);
        v85 = *(_QWORD *)(v0 + 656);
        swift_release();

        swift_release();
        v121(v82, v83);
        sub_1A39A2EB8(*(_QWORD *)v85, *(_QWORD *)(v85 + 8), *(_QWORD *)(v85 + 16), *(_QWORD *)(v85 + 24), *(_QWORD *)(v85 + 32), *(_QWORD *)(v85 + 40), *(_QWORD *)(v85 + 48), *(_QWORD *)(v85 + 56), *(_QWORD *)(v85 + 64), *(_QWORD *)(v85 + 72), *(void **)(v85 + 80));
        *(_OWORD *)v85 = v96;
        *(_OWORD *)(v85 + 16) = v98;
        *(_QWORD *)(v85 + 32) = v81;
        *(_QWORD *)(v85 + 40) = v80;
        *(_QWORD *)(v85 + 48) = v79;
        *(_QWORD *)(v85 + 56) = v100;
        *(_OWORD *)(v85 + 64) = v103;
        *(_QWORD *)(v85 + 80) = v107;
        *(_QWORD *)(v85 + 88) = v78 & 0x1FFFFFFFFLL;
        *(_BYTE *)(v85 + 100) = v112 & 1;
        *(_DWORD *)(v85 + 96) = v117;
        goto LABEL_16;
      }
      goto LABEL_23;
    }
    v55 = *(_QWORD *)(v0 + 680);
    sub_1A39B9F00(*(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720), &qword_1ED1B52F0);
    if (v46(v45, 1, v55) == 1)
    {
      v56 = *(_QWORD *)(v0 + 736);
      v57 = *(_QWORD *)(v0 + 720);
      v58 = *(_QWORD *)(v0 + 688);
      v59 = *(_QWORD *)(v0 + 680);
      sub_1A39B11F4(*(_QWORD *)(v0 + 728), &qword_1ED1B52F0);
      sub_1A39B11F4(v56, &qword_1ED1B52F0);
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);
LABEL_23:
      v60 = *(void **)(v0 + 960);
      *(_OWORD *)v110 = *(_OWORD *)(v0 + 944);
      v122 = *(_QWORD *)(v0 + 936);
      v115 = *(_QWORD *)(v0 + 928);
      v61 = *(_QWORD *)(v0 + 920);
      v62 = *(_QWORD *)(v0 + 912);
      v63 = *(_QWORD *)(v0 + 904);
      v64 = *(_QWORD *)(v0 + 896);
      v65 = *(_QWORD *)(v0 + 888);
      v66 = *(_QWORD *)(v0 + 880);
      sub_1A39B11F4(*(_QWORD *)(v0 + 712), &qword_1ED1B52F8);
      sub_1A39A2EB8(v66, v65, v64, v63, v62, v61, v115, v122, v110[0], v110[1], v60);
      goto LABEL_24;
    }
    v121 = v43;
    v95 = *(void **)(v0 + 960);
    v93 = *(_OWORD *)(v0 + 944);
    v116 = *(_QWORD *)(v0 + 936);
    v106 = *(_QWORD *)(v0 + 920);
    v111 = *(_QWORD *)(v0 + 928);
    v102 = *(_QWORD *)(v0 + 912);
    v89 = *(_QWORD *)(v0 + 896);
    v91 = *(_QWORD *)(v0 + 904);
    v86 = *(_QWORD *)(v0 + 880);
    v87 = *(_QWORD *)(v0 + 888);
    v69 = *(_QWORD *)(v0 + 736);
    v70 = *(_QWORD *)(v0 + 728);
    v71 = *(_QWORD *)(v0 + 720);
    v72 = *(_QWORD *)(v0 + 712);
    v73 = *(_QWORD *)(v0 + 696);
    v74 = *(_QWORD *)(v0 + 688);
    v75 = *(_QWORD *)(v0 + 680);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 32))(v73, v45, v75);
    sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
    v76 = sub_1A3AB494C();
    v77 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
    v77(v73, v75);
    sub_1A39B11F4(v70, &qword_1ED1B52F0);
    sub_1A39B11F4(v69, &qword_1ED1B52F0);
    v77(v71, v75);
    sub_1A39B11F4(v72, &qword_1ED1B52F0);
    sub_1A39A2EB8(v86, v87, v89, v91, v102, v106, v111, v116, v93, *((uint64_t *)&v93 + 1), v95);
    if ((v76 & 1) != 0)
      goto LABEL_26;
  }
LABEL_24:
  v67 = *(int **)(**(_QWORD **)(v0 + 1000) + 304);
  v123 = (int *)((char *)v67 + *v67);
  v68 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1096) = v68;
  *v68 = v0;
  v68[1] = sub_1A39B4B80;
  return ((uint64_t (*)(uint64_t, _QWORD))v123)(v0 + 16, *(_QWORD *)(v0 + 872));
}

uint64_t sub_1A39B2628()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39B267C()
{
  uint64_t v0;
  void (*v1)(uint64_t, _QWORD, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  int *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[3];
  uint64_t v88;
  void *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97[3];
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106[3];
  uint64_t v107;
  int v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  uint64_t (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  char v114;
  int *v115;

  v1 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 1008);
  sub_1A39B7B30(*(_QWORD *)(v0 + 656) + *(int *)(v0 + 1120), *(_QWORD *)(v0 + 824), type metadata accessor for SpeechSlicer.VoiceQuery);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v3 = *(_QWORD *)(v0 + 1000);
      v4 = *(uint64_t **)(v0 + 824);
      sub_1A39A2EB8(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 904), *(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936), *(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 952), *(void **)(v0 + 960));
      v5 = *v4;
      v6 = v4[1];
      *(_QWORD *)(v0 + 1024) = v6;
      v112 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 264)
                                                               + *(_QWORD *)(*(_QWORD *)v3 + 264));
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1032) = v7;
      *v7 = v0;
      v7[1] = sub_1A39B30B0;
      return v112(v0 + 224, v5, v6);
    }
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 872);
    v10 = *(_QWORD *)(v0 + 856);
    v11 = *(_QWORD *)(v0 + 848);
    v12 = *(_QWORD *)(v0 + 824);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v9, v12, v11);
  }
  v13 = (uint64_t *)(*(_QWORD *)(v0 + 656) + *(int *)(v0 + 1108));
  v14 = v13[1];
  if (v14)
  {
    v15 = *v13;
    v16 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 672)) + 0x270);
    v17 = swift_bridgeObjectRetain();
    v18 = v16(v17);
    if (*(_QWORD *)(v18 + 16))
    {
      v19 = sub_1A39A2734(v15, v14);
      if ((v20 & 1) != 0)
      {
        v21 = *(_QWORD *)(v0 + 872);
        v22 = *(_QWORD *)(v0 + 856);
        v23 = *(_QWORD *)(v0 + 848);
        v24 = *(_QWORD *)(v0 + 832);
        v25 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
        *(_QWORD *)(v0 + 1040) = v25;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v24, v21, v23);
        v1(v24, 0, 1, v23);
        v26 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 1048) = v26;
        *v26 = v0;
        v26[1] = sub_1A39B32E8;
        return sub_1A39E8938(*(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 832), v25);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v0 + 656) + 8))
  {
    v27 = *(_QWORD *)(v0 + 872);
    v28 = *(_QWORD *)(v0 + 856);
    v29 = *(_QWORD *)(v0 + 848);
    v30 = *(void **)(v0 + 672);
    sub_1A39A2EB8(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 904), *(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936), *(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 952), *(void **)(v0 + 960));
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
LABEL_12:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (*(_QWORD *)(v0 + 888))
  {
    v31 = *(void **)(v0 + 960);
    v32 = *(_QWORD *)(v0 + 864);
    v84 = *(_QWORD *)(v0 + 856);
    v88 = *(_QWORD *)(v0 + 848);
    v33 = *(_QWORD *)(v0 + 768);
    v34 = *(_QWORD *)(v0 + 760);
    v90 = *(_QWORD *)(v0 + 752);
    v92 = *(_QWORD *)(v0 + 744);
    v86 = *(_QWORD *)(v0 + 736);
    v94 = *(_QWORD *)(v0 + 728);
    v35 = *(_QWORD *)(v0 + 712);
    v100 = *(_QWORD *)(v0 + 704);
    v104 = *(_QWORD *)(v0 + 688);
    v109 = *(_QWORD *)(v0 + 680);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36 = v31;
    CoreSynthesizer.Voice.primaryLocale.getter(v32);
    sub_1A3AB452C();
    v37 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
    v37(v32, v88);
    sub_1A3AB44FC();
    v38 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    v38(v33, v92);
    sub_1A3AB452C();
    sub_1A3AB44FC();
    v38(v34, v92);
    v39 = v35 + *(int *)(v100 + 48);
    sub_1A39B9F00(v86, v35, &qword_1ED1B52F0);
    sub_1A39B9F00(v94, v39, &qword_1ED1B52F0);
    v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48);
    if (v40(v35, 1, v109) == 1)
    {
      v41 = *(_QWORD *)(v0 + 736);
      v42 = *(_QWORD *)(v0 + 680);
      sub_1A39B11F4(*(_QWORD *)(v0 + 728), &qword_1ED1B52F0);
      sub_1A39B11F4(v41, &qword_1ED1B52F0);
      if (v40(v39, 1, v42) == 1)
      {
        v110 = v37;
        v43 = *(void **)(v0 + 960);
        *(_OWORD *)v97 = *(_OWORD *)(v0 + 944);
        v101 = *(_QWORD *)(v0 + 928);
        v105 = *(_QWORD *)(v0 + 936);
        v44 = *(_QWORD *)(v0 + 920);
        v45 = *(_QWORD *)(v0 + 912);
        v46 = *(_QWORD *)(v0 + 904);
        v47 = *(_QWORD *)(v0 + 896);
        v48 = *(_QWORD *)(v0 + 888);
        v49 = *(_QWORD *)(v0 + 880);
        sub_1A39B11F4(*(_QWORD *)(v0 + 712), &qword_1ED1B52F0);
        sub_1A39A2EB8(v49, v48, v47, v46, v45, v44, v101, v105, v97[0], v97[1], v43);
LABEL_21:
        v108 = *(_DWORD *)(v0 + 976);
        v114 = *(_BYTE *)(v0 + 980);
        v72 = *(_QWORD *)(v0 + 968);
        v103 = *(_QWORD *)(v0 + 960);
        v99 = *(_OWORD *)(v0 + 944);
        v96 = *(unsigned __int8 *)(v0 + 936);
        v73 = *(_QWORD *)(v0 + 928);
        v74 = *(unsigned __int16 *)(v0 + 920);
        v75 = *(_QWORD *)(v0 + 912);
        v91 = *(_OWORD *)(v0 + 880);
        v93 = *(_OWORD *)(v0 + 896);
        v76 = *(_QWORD *)(v0 + 872);
        v77 = *(_QWORD *)(v0 + 848);
        v78 = *(void **)(v0 + 672);
        v79 = *(_QWORD *)(v0 + 656);
        swift_release();

        swift_release();
        v110(v76, v77);
        sub_1A39A2EB8(*(_QWORD *)v79, *(_QWORD *)(v79 + 8), *(_QWORD *)(v79 + 16), *(_QWORD *)(v79 + 24), *(_QWORD *)(v79 + 32), *(_QWORD *)(v79 + 40), *(_QWORD *)(v79 + 48), *(_QWORD *)(v79 + 56), *(_QWORD *)(v79 + 64), *(_QWORD *)(v79 + 72), *(void **)(v79 + 80));
        *(_OWORD *)v79 = v91;
        *(_OWORD *)(v79 + 16) = v93;
        *(_QWORD *)(v79 + 32) = v75;
        *(_QWORD *)(v79 + 40) = v74;
        *(_QWORD *)(v79 + 48) = v73;
        *(_QWORD *)(v79 + 56) = v96;
        *(_OWORD *)(v79 + 64) = v99;
        *(_QWORD *)(v79 + 80) = v103;
        *(_QWORD *)(v79 + 88) = v72 & 0x1FFFFFFFFLL;
        *(_BYTE *)(v79 + 100) = v114 & 1;
        *(_DWORD *)(v79 + 96) = v108;
        goto LABEL_12;
      }
      goto LABEL_19;
    }
    v50 = *(_QWORD *)(v0 + 680);
    sub_1A39B9F00(*(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720), &qword_1ED1B52F0);
    if (v40(v39, 1, v50) == 1)
    {
      v51 = *(_QWORD *)(v0 + 736);
      v52 = *(_QWORD *)(v0 + 720);
      v53 = *(_QWORD *)(v0 + 688);
      v54 = *(_QWORD *)(v0 + 680);
      sub_1A39B11F4(*(_QWORD *)(v0 + 728), &qword_1ED1B52F0);
      sub_1A39B11F4(v51, &qword_1ED1B52F0);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
LABEL_19:
      v55 = *(void **)(v0 + 960);
      *(_OWORD *)v106 = *(_OWORD *)(v0 + 944);
      v113 = *(_QWORD *)(v0 + 936);
      v111 = *(_QWORD *)(v0 + 928);
      v56 = *(_QWORD *)(v0 + 920);
      v57 = *(_QWORD *)(v0 + 912);
      v58 = *(_QWORD *)(v0 + 904);
      v59 = *(_QWORD *)(v0 + 896);
      v60 = *(_QWORD *)(v0 + 888);
      v61 = *(_QWORD *)(v0 + 880);
      sub_1A39B11F4(*(_QWORD *)(v0 + 712), &qword_1ED1B52F8);
      sub_1A39A2EB8(v61, v60, v59, v58, v57, v56, v111, v113, v106[0], v106[1], v55);
      goto LABEL_22;
    }
    v110 = v37;
    v89 = *(void **)(v0 + 960);
    *(_OWORD *)v87 = *(_OWORD *)(v0 + 944);
    v102 = *(_QWORD *)(v0 + 928);
    v107 = *(_QWORD *)(v0 + 936);
    v95 = *(_QWORD *)(v0 + 912);
    v98 = *(_QWORD *)(v0 + 920);
    v83 = *(_QWORD *)(v0 + 896);
    v85 = *(_QWORD *)(v0 + 904);
    v82 = *(_QWORD *)(v0 + 888);
    v62 = *(_QWORD *)(v0 + 880);
    v63 = *(_QWORD *)(v0 + 736);
    v64 = *(_QWORD *)(v0 + 728);
    v65 = *(_QWORD *)(v0 + 720);
    v66 = *(_QWORD *)(v0 + 712);
    v67 = *(_QWORD *)(v0 + 696);
    v68 = *(_QWORD *)(v0 + 688);
    v69 = *(_QWORD *)(v0 + 680);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 32))(v67, v39, v69);
    sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
    v70 = sub_1A3AB494C();
    v71 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
    v71(v67, v69);
    sub_1A39B11F4(v64, &qword_1ED1B52F0);
    sub_1A39B11F4(v63, &qword_1ED1B52F0);
    v71(v65, v69);
    sub_1A39B11F4(v66, &qword_1ED1B52F0);
    sub_1A39A2EB8(v62, v82, v83, v85, v95, v98, v102, v107, v87[0], v87[1], v89);
    if ((v70 & 1) != 0)
      goto LABEL_21;
  }
LABEL_22:
  v80 = *(int **)(**(_QWORD **)(v0 + 1000) + 304);
  v115 = (int *)((char *)v80 + *v80);
  v81 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1096) = v81;
  *v81 = v0;
  v81[1] = sub_1A39B4B80;
  return ((uint64_t (*)(uint64_t, _QWORD))v115)(v0 + 16, *(_QWORD *)(v0 + 872));
}

uint64_t sub_1A39B30B0()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1A39B3110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v1 = *(_QWORD *)(v0 + 872);
  v2 = *(_QWORD *)(v0 + 856);
  v3 = *(_QWORD *)(v0 + 848);
  v4 = *(void **)(v0 + 672);
  v5 = *(_QWORD *)(v0 + 656);
  swift_release();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v14 = *(_OWORD *)(v0 + 224);
  v12 = *(_OWORD *)(v0 + 256);
  v13 = *(_OWORD *)(v0 + 240);
  v10 = *(_OWORD *)(v0 + 288);
  v11 = *(_OWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 312);
  v8 = *(_DWORD *)(v0 + 320);
  LOBYTE(v2) = *(_BYTE *)(v0 + 324);
  sub_1A39A2EB8(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72), *(void **)(v5 + 80));
  *(_OWORD *)v5 = v14;
  *(_OWORD *)(v5 + 16) = v13;
  *(_OWORD *)(v5 + 32) = v12;
  *(_OWORD *)(v5 + 48) = v11;
  *(_OWORD *)(v5 + 64) = v10;
  *(_QWORD *)(v5 + 80) = v7;
  *(_QWORD *)(v5 + 88) = v6;
  *(_BYTE *)(v5 + 100) = v2;
  *(_DWORD *)(v5 + 96) = v8;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39B32E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 832);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_1A39B11F4(v1, &qword_1ED1B5320);
  return swift_task_switch();
}

uint64_t sub_1A39B335C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  int *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[3];
  uint64_t v77;
  void *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[3];
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95[3];
  uint64_t v96;
  int v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  char v103;
  int *v104;

  v1 = *(_QWORD *)(v0 + 792);
  v2 = *(_QWORD *)(v0 + 784);
  v3 = *(_QWORD *)(v0 + 776);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_1A39B11F4(v3, &qword_1EE6D2B68);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v0 + 800), v3, v2);
    v4 = sub_1A3AB45EC();
    *(_QWORD *)(v0 + 1056) = v5;
    if (v5)
    {
      v6 = v4;
      v7 = v5;
      v8 = *(_QWORD *)(v0 + 1000);
      v9 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 984);
      v10 = *(_QWORD *)(v0 + 800);
      v11 = *(_QWORD *)(v0 + 792);
      v12 = *(_QWORD *)(v0 + 784);
      v13 = *(_QWORD *)(v0 + 656) + *(int *)(v0 + 1104);
      sub_1A39B11F4(v13, &qword_1EE6D2B68);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v13, v10, v12);
      v9(v13, 0, 1, v12);
      v101 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v8 + 264)
                                                               + *(_QWORD *)(*(_QWORD *)v8 + 264));
      v14 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1064) = v14;
      *v14 = v0;
      v14[1] = sub_1A39B3C80;
      return v101(v0 + 120, v6, v7);
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 792) + 8))(*(_QWORD *)(v0 + 800), *(_QWORD *)(v0 + 784));
  }
  if (*(_QWORD *)(*(_QWORD *)(v0 + 656) + 8))
  {
    v16 = *(_QWORD *)(v0 + 872);
    v17 = *(_QWORD *)(v0 + 856);
    v18 = *(_QWORD *)(v0 + 848);
    v19 = *(void **)(v0 + 672);
    sub_1A39A2EB8(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 904), *(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936), *(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 952), *(void **)(v0 + 960));
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (*(_QWORD *)(v0 + 888))
  {
    v20 = *(void **)(v0 + 960);
    v21 = *(_QWORD *)(v0 + 864);
    v73 = *(_QWORD *)(v0 + 856);
    v77 = *(_QWORD *)(v0 + 848);
    v22 = *(_QWORD *)(v0 + 768);
    v23 = *(_QWORD *)(v0 + 760);
    v79 = *(_QWORD *)(v0 + 752);
    v81 = *(_QWORD *)(v0 + 744);
    v75 = *(_QWORD *)(v0 + 736);
    v83 = *(_QWORD *)(v0 + 728);
    v24 = *(_QWORD *)(v0 + 712);
    v89 = *(_QWORD *)(v0 + 704);
    v93 = *(_QWORD *)(v0 + 688);
    v98 = *(_QWORD *)(v0 + 680);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25 = v20;
    CoreSynthesizer.Voice.primaryLocale.getter(v21);
    sub_1A3AB452C();
    v26 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
    v26(v21, v77);
    sub_1A3AB44FC();
    v27 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
    v27(v22, v81);
    sub_1A3AB452C();
    sub_1A3AB44FC();
    v27(v23, v81);
    v28 = v24 + *(int *)(v89 + 48);
    sub_1A39B9F00(v75, v24, &qword_1ED1B52F0);
    sub_1A39B9F00(v83, v28, &qword_1ED1B52F0);
    v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
    if (v29(v24, 1, v98) == 1)
    {
      v30 = *(_QWORD *)(v0 + 736);
      v31 = *(_QWORD *)(v0 + 680);
      sub_1A39B11F4(*(_QWORD *)(v0 + 728), &qword_1ED1B52F0);
      sub_1A39B11F4(v30, &qword_1ED1B52F0);
      if (v29(v28, 1, v31) == 1)
      {
        v99 = v26;
        v32 = *(void **)(v0 + 960);
        *(_OWORD *)v86 = *(_OWORD *)(v0 + 944);
        v90 = *(_QWORD *)(v0 + 928);
        v94 = *(_QWORD *)(v0 + 936);
        v33 = *(_QWORD *)(v0 + 920);
        v34 = *(_QWORD *)(v0 + 912);
        v35 = *(_QWORD *)(v0 + 904);
        v36 = *(_QWORD *)(v0 + 896);
        v37 = *(_QWORD *)(v0 + 888);
        v38 = *(_QWORD *)(v0 + 880);
        sub_1A39B11F4(*(_QWORD *)(v0 + 712), &qword_1ED1B52F0);
        sub_1A39A2EB8(v38, v37, v36, v35, v34, v33, v90, v94, v86[0], v86[1], v32);
LABEL_17:
        v97 = *(_DWORD *)(v0 + 976);
        v103 = *(_BYTE *)(v0 + 980);
        v61 = *(_QWORD *)(v0 + 968);
        v92 = *(_QWORD *)(v0 + 960);
        v88 = *(_OWORD *)(v0 + 944);
        v85 = *(unsigned __int8 *)(v0 + 936);
        v62 = *(_QWORD *)(v0 + 928);
        v63 = *(unsigned __int16 *)(v0 + 920);
        v64 = *(_QWORD *)(v0 + 912);
        v80 = *(_OWORD *)(v0 + 880);
        v82 = *(_OWORD *)(v0 + 896);
        v65 = *(_QWORD *)(v0 + 872);
        v66 = *(_QWORD *)(v0 + 848);
        v67 = *(void **)(v0 + 672);
        v68 = *(_QWORD *)(v0 + 656);
        swift_release();

        swift_release();
        v99(v65, v66);
        sub_1A39A2EB8(*(_QWORD *)v68, *(_QWORD *)(v68 + 8), *(_QWORD *)(v68 + 16), *(_QWORD *)(v68 + 24), *(_QWORD *)(v68 + 32), *(_QWORD *)(v68 + 40), *(_QWORD *)(v68 + 48), *(_QWORD *)(v68 + 56), *(_QWORD *)(v68 + 64), *(_QWORD *)(v68 + 72), *(void **)(v68 + 80));
        *(_OWORD *)v68 = v80;
        *(_OWORD *)(v68 + 16) = v82;
        *(_QWORD *)(v68 + 32) = v64;
        *(_QWORD *)(v68 + 40) = v63;
        *(_QWORD *)(v68 + 48) = v62;
        *(_QWORD *)(v68 + 56) = v85;
        *(_OWORD *)(v68 + 64) = v88;
        *(_QWORD *)(v68 + 80) = v92;
        *(_QWORD *)(v68 + 88) = v61 & 0x1FFFFFFFFLL;
        *(_BYTE *)(v68 + 100) = v103 & 1;
        *(_DWORD *)(v68 + 96) = v97;
        goto LABEL_8;
      }
      goto LABEL_15;
    }
    v39 = *(_QWORD *)(v0 + 680);
    sub_1A39B9F00(*(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720), &qword_1ED1B52F0);
    if (v29(v28, 1, v39) == 1)
    {
      v40 = *(_QWORD *)(v0 + 736);
      v41 = *(_QWORD *)(v0 + 720);
      v42 = *(_QWORD *)(v0 + 688);
      v43 = *(_QWORD *)(v0 + 680);
      sub_1A39B11F4(*(_QWORD *)(v0 + 728), &qword_1ED1B52F0);
      sub_1A39B11F4(v40, &qword_1ED1B52F0);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
LABEL_15:
      v44 = *(void **)(v0 + 960);
      *(_OWORD *)v95 = *(_OWORD *)(v0 + 944);
      v102 = *(_QWORD *)(v0 + 936);
      v100 = *(_QWORD *)(v0 + 928);
      v45 = *(_QWORD *)(v0 + 920);
      v46 = *(_QWORD *)(v0 + 912);
      v47 = *(_QWORD *)(v0 + 904);
      v48 = *(_QWORD *)(v0 + 896);
      v49 = *(_QWORD *)(v0 + 888);
      v50 = *(_QWORD *)(v0 + 880);
      sub_1A39B11F4(*(_QWORD *)(v0 + 712), &qword_1ED1B52F8);
      sub_1A39A2EB8(v50, v49, v48, v47, v46, v45, v100, v102, v95[0], v95[1], v44);
      goto LABEL_18;
    }
    v99 = v26;
    v78 = *(void **)(v0 + 960);
    *(_OWORD *)v76 = *(_OWORD *)(v0 + 944);
    v91 = *(_QWORD *)(v0 + 928);
    v96 = *(_QWORD *)(v0 + 936);
    v84 = *(_QWORD *)(v0 + 912);
    v87 = *(_QWORD *)(v0 + 920);
    v72 = *(_QWORD *)(v0 + 896);
    v74 = *(_QWORD *)(v0 + 904);
    v71 = *(_QWORD *)(v0 + 888);
    v51 = *(_QWORD *)(v0 + 880);
    v52 = *(_QWORD *)(v0 + 736);
    v53 = *(_QWORD *)(v0 + 728);
    v54 = *(_QWORD *)(v0 + 720);
    v55 = *(_QWORD *)(v0 + 712);
    v56 = *(_QWORD *)(v0 + 696);
    v57 = *(_QWORD *)(v0 + 688);
    v58 = *(_QWORD *)(v0 + 680);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v56, v28, v58);
    sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
    v59 = sub_1A3AB494C();
    v60 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v60(v56, v58);
    sub_1A39B11F4(v53, &qword_1ED1B52F0);
    sub_1A39B11F4(v52, &qword_1ED1B52F0);
    v60(v54, v58);
    sub_1A39B11F4(v55, &qword_1ED1B52F0);
    sub_1A39A2EB8(v51, v71, v72, v74, v84, v87, v91, v96, v76[0], v76[1], v78);
    if ((v59 & 1) != 0)
      goto LABEL_17;
  }
LABEL_18:
  v69 = *(int **)(**(_QWORD **)(v0 + 1000) + 304);
  v104 = (int *)((char *)v69 + *v69);
  v70 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1096) = v70;
  *v70 = v0;
  v70[1] = sub_1A39B4B80;
  return ((uint64_t (*)(uint64_t, _QWORD))v104)(v0 + 16, *(_QWORD *)(v0 + 872));
}

uint64_t sub_1A39B3C80()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1A39B3CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  _QWORD *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = *(int *)(v0 + 1124);
  v2 = *(_QWORD *)(v0 + 656);
  v50 = *(_OWORD *)(v0 + 136);
  v53 = *(_OWORD *)(v0 + 120);
  v45 = *(_OWORD *)(v0 + 168);
  v48 = *(_OWORD *)(v0 + 152);
  v43 = *(_OWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_DWORD *)(v0 + 216);
  v6 = *(_BYTE *)(v0 + 220);
  sub_1A39A2EB8(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(void **)(v2 + 80));
  *(_OWORD *)v2 = v53;
  *(_OWORD *)(v2 + 16) = v50;
  *(_OWORD *)(v2 + 32) = v48;
  *(_OWORD *)(v2 + 48) = v45;
  *(_OWORD *)(v2 + 64) = v43;
  *(_QWORD *)(v2 + 80) = v3;
  *(_QWORD *)(v2 + 88) = v4;
  *(_BYTE *)(v2 + 100) = v6;
  *(_DWORD *)(v2 + 96) = v5;
  sub_1A39A1AD0(*(_QWORD *)(v2 + v1) + 16, v0 + 328);
  v7 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 360);
  sub_1A39A19CC((_QWORD *)(v0 + 328), v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
  if (*(_QWORD *)(v0 + 392))
  {
    v9 = *(int *)(v0 + 1124);
    v46 = v9;
    v54 = *(int *)(v0 + 1116);
    v38 = *(_QWORD *)(v0 + 816);
    v10 = *(_QWORD *)(v0 + 656);
    v51 = (_QWORD *)(v10 + *(int *)(v0 + 1112));
    sub_1A39A1AB8((__int128 *)(v0 + 368), v0 + 448);
    sub_1A39A47C4(v0 + 328);
    v11 = (uint64_t *)(*(_QWORD *)(v10 + v9)
                    + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children);
    swift_beginAccess();
    v41 = *v11;
    v13 = *(_QWORD *)(v0 + 472);
    v12 = *(_QWORD *)(v0 + 480);
    sub_1A39A19CC((_QWORD *)(v0 + 448), v13);
    swift_bridgeObjectRetain();
    v14 = sub_1A3A5E028();
    TTSMarkupSpeech.rate(_:)(v14 | ((HIDWORD(v14) & 1) << 32), v13, v12, (uint64_t *)(v0 + 408));
    v15 = *(_QWORD *)(v0 + 432);
    v16 = *(_QWORD *)(v0 + 440);
    sub_1A39A19CC((_QWORD *)(v0 + 408), v15);
    v17 = sub_1A3A5E008();
    TTSMarkupSpeech.pitch(_:)(v17 | ((HIDWORD(v17) & 1) << 32), v15, v16, (uint64_t *)(v0 + 488));
    v18 = *(_QWORD *)(v0 + 512);
    v19 = *(_QWORD *)(v0 + 520);
    sub_1A39A19CC((_QWORD *)(v0 + 488), v18);
    v20 = sub_1A3AB45E0();
    TTSMarkupSpeech.volume(_:)(v20 | ((HIDWORD(v20) & 1) << 32), v18, v19, (uint64_t *)(v0 + 528));
    sub_1A39A47C4(v0 + 448);
    sub_1A39A1AB8((__int128 *)(v0 + 528), v0 + 448);
    sub_1A39A47C4(v0 + 488);
    sub_1A39A47C4(v0 + 408);
    sub_1A39A1AD0(v0 + 448, v0 + 568);
    swift_storeEnumTagMultiPayload();
    type metadata accessor for SpeechSlicer.TrackedSSMLNode(0);
    v21 = swift_allocObject();
    *(_QWORD *)(v0 + 1072) = v21;
    swift_weakInit();
    sub_1A39A1AB8((__int128 *)(v0 + 568), v21 + 16);
    *(_QWORD *)(v21
              + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children) = v41;
    swift_weakAssign();
    sub_1A39B9E5C(v38, v21+ OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery);
    v22 = (_QWORD *)(v21
                   + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey);
    *v22 = 0;
    v22[1] = 0;
    v23 = *(_QWORD *)(v10 + v46);
    *(_QWORD *)(v0 + 1080) = v23;
    sub_1A39A4820((uint64_t *)&unk_1EE6D23B0);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1A3AC00A0;
    *(_QWORD *)(v24 + 32) = v21;
    v56 = v24;
    sub_1A3AB4BC8();
    v25 = (uint64_t *)(v23
                    + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children);
    swift_beginAccess();
    *v25 = v56;
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v51 = 0;
    v51[1] = 0xE000000000000000;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v10 + v54) = MEMORY[0x1E0DEE9D8];
    swift_retain();
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1088) = v26;
    *v26 = v0;
    v26[1] = sub_1A39B4308;
    v27 = *(_QWORD *)(v0 + 656);
    v26[46] = v23;
    v26[47] = v27;
    return swift_task_switch();
  }
  else
  {
    v37 = *(void **)(v0 + 960);
    v36 = *(_OWORD *)(v0 + 944);
    v49 = *(_QWORD *)(v0 + 936);
    v42 = *(_QWORD *)(v0 + 920);
    v44 = *(_QWORD *)(v0 + 928);
    v40 = *(_QWORD *)(v0 + 912);
    v29 = *(_QWORD *)(v0 + 904);
    v30 = *(_QWORD *)(v0 + 896);
    v31 = *(_QWORD *)(v0 + 888);
    v32 = *(_QWORD *)(v0 + 880);
    v55 = *(_QWORD *)(v0 + 872);
    v47 = *(_QWORD *)(v0 + 856);
    v52 = *(_QWORD *)(v0 + 848);
    v39 = *(_QWORD *)(v0 + 800);
    v33 = *(_QWORD *)(v0 + 792);
    v35 = *(_QWORD *)(v0 + 784);
    v34 = *(void **)(v0 + 672);
    swift_release();

    swift_release();
    sub_1A39A2EB8(v32, v31, v30, v29, v40, v42, v44, v49, v36, *((uint64_t *)&v36 + 1), v37);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v39, v35);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v55, v52);
    sub_1A39B11F4(v0 + 368, &qword_1EE6D2B60);
    sub_1A39A47C4(v0 + 328);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A39B4308()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A39B4368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  void *v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[3];
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82[3];
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  int *v93;

  v1 = *(_QWORD *)(v0 + 800);
  v2 = *(_QWORD *)(v0 + 792);
  v3 = *(_QWORD *)(v0 + 784);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1A39A47C4(v0 + 448);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 656) + 8))
  {
    v4 = *(_QWORD *)(v0 + 872);
    v5 = *(_QWORD *)(v0 + 856);
    v6 = *(_QWORD *)(v0 + 848);
    v7 = *(void **)(v0 + 672);
    sub_1A39A2EB8(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 904), *(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936), *(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 952), *(void **)(v0 + 960));
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (*(_QWORD *)(v0 + 888))
  {
    v9 = *(void **)(v0 + 960);
    v10 = *(_QWORD *)(v0 + 864);
    v62 = *(_QWORD *)(v0 + 856);
    v66 = *(_QWORD *)(v0 + 848);
    v11 = *(_QWORD *)(v0 + 768);
    v12 = *(_QWORD *)(v0 + 760);
    v69 = *(_QWORD *)(v0 + 752);
    v71 = *(_QWORD *)(v0 + 744);
    v64 = *(_QWORD *)(v0 + 736);
    v73 = *(_QWORD *)(v0 + 728);
    v13 = *(_QWORD *)(v0 + 712);
    v80 = *(_QWORD *)(v0 + 704);
    v85 = *(_QWORD *)(v0 + 688);
    v90 = *(_QWORD *)(v0 + 680);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = v9;
    CoreSynthesizer.Voice.primaryLocale.getter(v10);
    sub_1A3AB452C();
    v15 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
    v15(v10, v66);
    sub_1A3AB44FC();
    v16 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
    v16(v11, v71);
    sub_1A3AB452C();
    sub_1A3AB44FC();
    v16(v12, v71);
    v17 = v13 + *(int *)(v80 + 48);
    sub_1A39B9F00(v64, v13, &qword_1ED1B52F0);
    sub_1A39B9F00(v73, v17, &qword_1ED1B52F0);
    v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
    if (v18(v13, 1, v90) == 1)
    {
      v19 = *(_QWORD *)(v0 + 736);
      v20 = *(_QWORD *)(v0 + 680);
      sub_1A39B11F4(*(_QWORD *)(v0 + 728), &qword_1ED1B52F0);
      sub_1A39B11F4(v19, &qword_1ED1B52F0);
      if (v18(v17, 1, v20) == 1)
      {
        v91 = v15;
        v21 = (int *)(v0 + 976);
        v22 = *(void **)(v0 + 960);
        *(_OWORD *)v74 = *(_OWORD *)(v0 + 944);
        v86 = *(_QWORD *)(v0 + 936);
        v77 = *(_QWORD *)(v0 + 920);
        v81 = *(_QWORD *)(v0 + 928);
        v23 = *(_QWORD *)(v0 + 912);
        v24 = *(_QWORD *)(v0 + 904);
        v25 = *(_QWORD *)(v0 + 896);
        v26 = *(_QWORD *)(v0 + 888);
        v27 = *(_QWORD *)(v0 + 880);
        sub_1A39B11F4(*(_QWORD *)(v0 + 712), &qword_1ED1B52F0);
        sub_1A39A2EB8(v27, v26, v25, v24, v23, v77, v81, v86, v74[0], v74[1], v22);
LABEL_13:
        v89 = *v21;
        v84 = *((_BYTE *)v21 + 4);
        v51 = *(_QWORD *)(v0 + 968);
        v79 = *(_QWORD *)(v0 + 960);
        v76 = *(_OWORD *)(v0 + 944);
        v72 = *(unsigned __int8 *)(v0 + 936);
        v52 = *(_QWORD *)(v0 + 928);
        v53 = *(unsigned __int16 *)(v0 + 920);
        v54 = *(_QWORD *)(v0 + 912);
        v68 = *(_OWORD *)(v0 + 880);
        v70 = *(_OWORD *)(v0 + 896);
        v55 = *(_QWORD *)(v0 + 872);
        v56 = *(_QWORD *)(v0 + 848);
        v57 = *(void **)(v0 + 672);
        v58 = *(_QWORD *)(v0 + 656);
        swift_release();

        swift_release();
        v91(v55, v56);
        sub_1A39A2EB8(*(_QWORD *)v58, *(_QWORD *)(v58 + 8), *(_QWORD *)(v58 + 16), *(_QWORD *)(v58 + 24), *(_QWORD *)(v58 + 32), *(_QWORD *)(v58 + 40), *(_QWORD *)(v58 + 48), *(_QWORD *)(v58 + 56), *(_QWORD *)(v58 + 64), *(_QWORD *)(v58 + 72), *(void **)(v58 + 80));
        *(_OWORD *)v58 = v68;
        *(_OWORD *)(v58 + 16) = v70;
        *(_QWORD *)(v58 + 32) = v54;
        *(_QWORD *)(v58 + 40) = v53;
        *(_QWORD *)(v58 + 48) = v52;
        *(_QWORD *)(v58 + 56) = v72;
        *(_OWORD *)(v58 + 64) = v76;
        *(_QWORD *)(v58 + 80) = v79;
        *(_QWORD *)(v58 + 88) = v51 & 0x1FFFFFFFFLL;
        *(_BYTE *)(v58 + 100) = v84 & 1;
        *(_DWORD *)(v58 + 96) = v89;
        goto LABEL_3;
      }
      goto LABEL_10;
    }
    v28 = *(_QWORD *)(v0 + 680);
    sub_1A39B9F00(*(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720), &qword_1ED1B52F0);
    if (v18(v17, 1, v28) == 1)
    {
      v29 = *(_QWORD *)(v0 + 736);
      v30 = *(_QWORD *)(v0 + 720);
      v31 = *(_QWORD *)(v0 + 688);
      v32 = *(_QWORD *)(v0 + 680);
      sub_1A39B11F4(*(_QWORD *)(v0 + 728), &qword_1ED1B52F0);
      sub_1A39B11F4(v29, &qword_1ED1B52F0);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
LABEL_10:
      v33 = *(void **)(v0 + 960);
      *(_OWORD *)v82 = *(_OWORD *)(v0 + 944);
      v92 = *(_QWORD *)(v0 + 936);
      v87 = *(_QWORD *)(v0 + 928);
      v34 = *(_QWORD *)(v0 + 920);
      v35 = *(_QWORD *)(v0 + 912);
      v36 = *(_QWORD *)(v0 + 904);
      v37 = *(_QWORD *)(v0 + 896);
      v38 = *(_QWORD *)(v0 + 888);
      v39 = *(_QWORD *)(v0 + 880);
      sub_1A39B11F4(*(_QWORD *)(v0 + 712), &qword_1ED1B52F8);
      sub_1A39A2EB8(v39, v38, v37, v36, v35, v34, v87, v92, v82[0], v82[1], v33);
      goto LABEL_11;
    }
    v91 = v15;
    v21 = (int *)(v0 + 976);
    v67 = *(void **)(v0 + 960);
    v65 = *(_OWORD *)(v0 + 944);
    v88 = *(_QWORD *)(v0 + 936);
    v78 = *(_QWORD *)(v0 + 920);
    v83 = *(_QWORD *)(v0 + 928);
    v75 = *(_QWORD *)(v0 + 912);
    v63 = *(_QWORD *)(v0 + 904);
    v60 = *(_QWORD *)(v0 + 888);
    v61 = *(_QWORD *)(v0 + 896);
    v59 = *(_QWORD *)(v0 + 880);
    v42 = *(_QWORD *)(v0 + 736);
    v43 = *(_QWORD *)(v0 + 728);
    v44 = *(_QWORD *)(v0 + 720);
    v45 = *(_QWORD *)(v0 + 712);
    v46 = *(_QWORD *)(v0 + 696);
    v47 = *(_QWORD *)(v0 + 688);
    v48 = *(_QWORD *)(v0 + 680);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v46, v17, v48);
    sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
    v49 = sub_1A3AB494C();
    v50 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    v50(v46, v48);
    sub_1A39B11F4(v43, &qword_1ED1B52F0);
    sub_1A39B11F4(v42, &qword_1ED1B52F0);
    v50(v44, v48);
    sub_1A39B11F4(v45, &qword_1ED1B52F0);
    sub_1A39A2EB8(v59, v60, v61, v63, v75, v78, v83, v88, v65, *((uint64_t *)&v65 + 1), v67);
    if ((v49 & 1) != 0)
      goto LABEL_13;
  }
LABEL_11:
  v40 = *(int **)(**(_QWORD **)(v0 + 1000) + 304);
  v93 = (int *)((char *)v40 + *v40);
  v41 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1096) = v41;
  *v41 = v0;
  v41[1] = sub_1A39B4B80;
  return ((uint64_t (*)(uint64_t, _QWORD))v93)(v0 + 16, *(_QWORD *)(v0 + 872));
}

uint64_t sub_1A39B4B80()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39B4BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 872);
  v2 = *(_QWORD *)(v0 + 856);
  v3 = *(_QWORD *)(v0 + 848);
  v4 = *(void **)(v0 + 672);
  swift_release();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(unsigned int *)(v0 + 976) | ((unint64_t)*(unsigned __int8 *)(v0 + 980) << 32);
  v24 = *(_QWORD *)(v0 + 928);
  v25 = *(_QWORD *)(v0 + 936);
  if (v5)
  {
    v19 = *(unsigned int *)(v0 + 112) | ((unint64_t)*(unsigned __int8 *)(v0 + 116) << 32);
    v7 = *(_QWORD *)(v0 + 88);
    v18 = *(_QWORD *)(v0 + 96);
    v23 = *(_QWORD *)(v0 + 80);
    v17 = *(_QWORD *)(v0 + 72);
    v16 = *(_QWORD *)(v0 + 64);
    v8 = *(_QWORD *)(v0 + 48);
    v21 = *(_QWORD *)(v0 + 104);
    v22 = *(_QWORD *)(v0 + 56);
    v9 = *(_QWORD *)(v0 + 32);
    v10 = *(_QWORD *)(v0 + 40);
    v11 = *(_QWORD *)(v0 + 16);
    sub_1A39A2EB8(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 904), *(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 920), v24, v25, *(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 952), *(void **)(v0 + 960));
    v20 = v5;
    v12 = v8;
    v24 = v16;
    v25 = v17;
    v13 = v18;
    v6 = v19;
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 920);
    v23 = *(_QWORD *)(v0 + 944);
    v7 = *(_QWORD *)(v0 + 952);
    v13 = *(_QWORD *)(v0 + 960);
    v20 = *(_QWORD *)(v0 + 888);
    v21 = *(_QWORD *)(v0 + 968);
    v12 = *(_QWORD *)(v0 + 912);
    v10 = *(_QWORD *)(v0 + 904);
    v9 = *(_QWORD *)(v0 + 896);
    v11 = *(_QWORD *)(v0 + 880);
  }
  v14 = *(_QWORD *)(v0 + 656);
  sub_1A39A2EB8(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24), *(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40), *(_QWORD *)(v14 + 48), *(_QWORD *)(v14 + 56), *(_QWORD *)(v14 + 64), *(_QWORD *)(v14 + 72), *(void **)(v14 + 80));
  *(_QWORD *)v14 = v11;
  *(_QWORD *)(v14 + 8) = v20;
  *(_QWORD *)(v14 + 16) = v9;
  *(_QWORD *)(v14 + 24) = v10;
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v22;
  *(_QWORD *)(v14 + 48) = v24;
  *(_QWORD *)(v14 + 56) = v25;
  *(_QWORD *)(v14 + 64) = v23;
  *(_QWORD *)(v14 + 72) = v7;
  *(_QWORD *)(v14 + 80) = v13;
  *(_QWORD *)(v14 + 88) = v21;
  *(_BYTE *)(v14 + 100) = BYTE4(v6);
  *(_DWORD *)(v14 + 96) = v6;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39B4E68()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33[2];
  unint64_t v34;

  v1 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (uint64_t)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SpeechSlicer(0);
  v5 = *(int *)(v4 + 28);
  v6 = *(_QWORD *)&v0[v5];
  if (!(v6 >> 62))
  {
    v7 = *(char **)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v7 = (char *)sub_1A3AB5480();
  if (!v7)
    return swift_bridgeObjectRelease();
LABEL_3:
  v8 = v7 - 1;
  if (__OFSUB__(v7, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  v30 = v4;
  v31 = v5;
  if ((v6 & 0xC000000000000001) != 0)
  {
LABEL_34:
    v9 = MEMORY[0x1A85960B8](v8, v6);
    goto LABEL_8;
  }
  if (((unint64_t)v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  if ((unint64_t)v8 >= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v9 = *(_QWORD *)(v6 + 8 * (_QWORD)v8 + 32);
  swift_retain();
LABEL_8:
  v29 = v0;
  swift_bridgeObjectRelease();
  v34 = MEMORY[0x1E0DEE9D8];
  swift_retain_n();
  v7 = (char *)&unk_1EE6D6000;
  v32 = v9;
  while (1)
  {
    sub_1A39A1AD0(v9 + 16, (uint64_t)v33);
    sub_1A39B7B30(v9 + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery, v3, type metadata accessor for SpeechSlicer.VoiceQuery);
    v10 = *(_QWORD *)(v9
                    + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey);
    v11 = *(_QWORD *)(v9
                    + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey
                    + 8);
    type metadata accessor for SpeechSlicer.TrackedSSMLNode(0);
    v12 = swift_allocObject();
    swift_weakInit();
    sub_1A39A1AB8(v33, v12 + 16);
    *(_QWORD *)(v12
              + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children) = MEMORY[0x1E0DEE9D8];
    swift_weakAssign();
    sub_1A39B9E5C(v3, v12+ OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery);
    v13 = (_QWORD *)(v12
                   + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey);
    *v13 = v10;
    v13[1] = v11;
    if (!(v34 >> 62))
    {
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_11;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v15 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
    if (v15 < 0)
      break;
LABEL_11:
    sub_1A39B738C(0, 0, v12);
    Strong = swift_weakLoadStrong();
    swift_release();
    swift_release_n();
    if (!Strong)
      goto LABEL_15;
    swift_retain();
    v9 = Strong;
  }
  __break(1u);
LABEL_15:
  v3 = v34;
  v6 = v34 >> 62;
  if (v34 >> 62)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    if (!sub_1A3AB5480())
      goto LABEL_38;
LABEL_17:
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_40;
    }
    swift_retain();
    swift_bridgeObjectRelease();
    if (v6)
    {
      swift_bridgeObjectRetain();
      result = sub_1A3AB5480();
      v17 = result;
      if (!result)
        goto LABEL_24;
    }
    else
    {
      v17 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (!v17)
        goto LABEL_24;
    }
    if (v17 < 1)
    {
      __break(1u);
      return result;
    }
    v19 = *(_QWORD *)(v3 + 32);
    swift_retain();
    v20 = v17 - 1;
    if (v17 != 1)
    {
      v25 = (uint64_t *)(v3 + 40);
      do
      {
        v26 = *v25;
        swift_weakAssign();
        v27 = (_QWORD *)(v19
                       + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children);
        swift_beginAccess();
        swift_retain_n();
        v28 = swift_retain();
        MEMORY[0x1A8595980](v28);
        if (*(_QWORD *)((*v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1A3AB4BE0();
        sub_1A3AB4C10();
        sub_1A3AB4BC8();
        swift_endAccess();
        swift_release_n();
        ++v25;
        v19 = v26;
        --v20;
      }
      while (v20);
    }
LABEL_24:
    swift_bridgeObjectRelease();
    v7 = v29;
    v21 = &v29[*(int *)(v30 + 24)];
    v22 = swift_retain();
    MEMORY[0x1A8595980](v22);
    if (*(_QWORD *)((*(_QWORD *)v21 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)v21 & 0xFFFFFFFFFFFFFF8)
                                                                                + 0x18) >> 1)
    {
LABEL_25:
      sub_1A3AB4C10();
      sub_1A3AB4BC8();
      swift_release();
      swift_release();
      swift_release();
      v23 = v34;
      v24 = v31;
      result = swift_bridgeObjectRelease();
      *(_QWORD *)&v7[v24] = v23;
      return result;
    }
LABEL_40:
    sub_1A3AB4BE0();
    goto LABEL_25;
  }
  v16 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v16)
    goto LABEL_17;
LABEL_38:
  swift_release();
  return swift_bridgeObjectRelease_n();
}

uint64_t SpeechSlicer.init(speechRoot:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;

  type metadata accessor for SpeechSlicer.VoiceQuery(0);
  swift_storeEnumTagMultiPayload();
  v4 = (int *)type metadata accessor for SpeechSlicer(0);
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + v4[6]) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + v4[7]) = v5;
  *(_BYTE *)(a2 + v4[8]) = 0;
  *(_QWORD *)(a2 + v4[9]) = v5;
  sub_1A39A1AD0((uint64_t)a1, a2 + v4[5]);
  TTSMarkupVisitor.visit(_:)(a1, (uint64_t)v4, (uint64_t)&protocol witness table for SpeechSlicer);
  return sub_1A39A47C4((uint64_t)a1);
}

unint64_t sub_1A39B53E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37[2];

  v3 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v36 - v7;
  v9 = type metadata accessor for SpeechSlicer(0);
  v10 = *(int *)(v9 + 28);
  v11 = *(_QWORD *)(v1 + v10);
  if (!((unint64_t)v11 >> 62))
  {
    v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFF8);
    if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      sub_1A39A1AD0(a1, (uint64_t)v37);
      v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v13)
        goto LABEL_9;
LABEL_4:
      v14 = v13 - 1;
      if (__OFSUB__(v13, 1))
      {
        __break(1u);
      }
      else if ((v11 & 0xC000000000000001) == 0)
      {
        if ((v14 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v14 < *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          swift_retain();
          goto LABEL_9;
        }
        __break(1u);
        goto LABEL_46;
      }
      MEMORY[0x1A85960B8](v14, v11);
LABEL_9:
      swift_bridgeObjectRelease();
      sub_1A39B7B30(v1, (uint64_t)v8, type metadata accessor for SpeechSlicer.VoiceQuery);
      v15 = *(_QWORD *)(v1 + *(int *)(v9 + 36));
      v16 = *(_QWORD *)(v15 + 16);
      if (v16)
      {
        v17 = v15 + 16 * v16;
        v19 = *(_QWORD *)(v17 + 16);
        v18 = *(_QWORD *)(v17 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        v19 = 0;
        v18 = 0;
      }
      type metadata accessor for SpeechSlicer.TrackedSSMLNode(0);
      v11 = swift_allocObject();
      swift_weakInit();
      sub_1A39A1AB8(v37, v11 + 16);
      v12 = &unk_1EE6D6000;
      *(_QWORD *)(v11
                + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children) = MEMORY[0x1E0DEE9D8];
      swift_weakAssign();
      swift_release();
      sub_1A39B9E5C((uint64_t)v8, v11+ OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery);
      v27 = (_QWORD *)(v11
                     + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey);
      *v27 = v19;
      v27[1] = v18;
      v9 = *(_QWORD *)(v1 + v10);
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        v28 = sub_1A3AB5480();
        if (v28)
        {
LABEL_22:
          v14 = v28 - 1;
          if (!__OFSUB__(v28, 1))
          {
            if ((v9 & 0xC000000000000001) == 0)
            {
              if ((v14 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else if (v14 < *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                v29 = *(_QWORD *)(v9 + 8 * v14 + 32);
                swift_retain();
                goto LABEL_27;
              }
              __break(1u);
              goto LABEL_50;
            }
LABEL_47:
            v29 = MEMORY[0x1A85960B8](v14, v9);
LABEL_27:
            swift_bridgeObjectRelease();
            v30 = (_QWORD *)(v29 + v12[280]);
            swift_beginAccess();
            v31 = swift_retain();
            MEMORY[0x1A8595980](v31);
            if (*(_QWORD *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            {
LABEL_28:
              sub_1A3AB4C10();
              sub_1A3AB4BC8();
              swift_endAccess();
              swift_release();
              return v11;
            }
LABEL_50:
            sub_1A3AB4BE0();
            goto LABEL_28;
          }
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }
      else
      {
        v28 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v28)
          goto LABEL_22;
      }
      swift_bridgeObjectRelease();
      return v11;
    }
    sub_1A39A1AD0(a1, (uint64_t)v37);
    v20 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20)
      goto LABEL_12;
LABEL_17:
    swift_bridgeObjectRelease();
    sub_1A39B7B30(v1, (uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
    v22 = *(_QWORD *)(v1 + *(int *)(v9 + 36));
    v23 = *(_QWORD *)(v22 + 16);
    if (v23)
    {
      v24 = v22 + 16 * v23;
      v26 = *(_QWORD *)(v24 + 16);
      v25 = *(_QWORD *)(v24 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      v26 = 0;
      v25 = 0;
    }
    type metadata accessor for SpeechSlicer.TrackedSSMLNode(0);
    v11 = swift_allocObject();
    swift_weakInit();
    sub_1A39A1AB8(v37, v11 + 16);
    *(_QWORD *)(v11
              + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children) = MEMORY[0x1E0DEE9D8];
    swift_weakAssign();
    swift_release();
    sub_1A39B9E5C((uint64_t)v6, v11+ OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery);
    v32 = (_QWORD *)(v11
                   + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey);
    *v32 = v26;
    v32[1] = v25;
    v33 = (_QWORD *)(v1 + *(int *)(v9 + 24));
    v34 = swift_retain();
    MEMORY[0x1A8595980](v34);
    if (*(_QWORD *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1A3AB4BE0();
    sub_1A3AB4C10();
    sub_1A3AB4BC8();
    return v11;
  }
  if (v11 < 0)
    v12 = *(_QWORD **)(v1 + v10);
  else
    v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  v35 = sub_1A3AB5480();
  swift_bridgeObjectRelease();
  if (v35)
  {
    sub_1A39A1AD0(a1, (uint64_t)v37);
    swift_bridgeObjectRetain();
    v13 = sub_1A3AB5480();
    if (!v13)
      goto LABEL_9;
    goto LABEL_4;
  }
  sub_1A39A1AD0(a1, (uint64_t)v37);
  swift_bridgeObjectRetain();
  v20 = sub_1A3AB5480();
  if (!v20)
    goto LABEL_17;
LABEL_12:
  result = v20 - 1;
  if (__OFSUB__(v20, 1))
  {
    __break(1u);
    goto LABEL_54;
  }
  if ((v11 & 0xC000000000000001) != 0)
  {
LABEL_54:
    MEMORY[0x1A85960B8](result, v11);
    goto LABEL_17;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A39B5900(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t result;
  _QWORD v5[3];
  _BYTE v6[40];
  __int128 v7;

  sub_1A39B53E4(a1);
  swift_release();
  sub_1A39A1AD0(a1, (uint64_t)v5);
  sub_1A39A4820(&qword_1EE6D2B78);
  if (swift_dynamicCast())
  {
    v3 = (void *)v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_1A39A1AD0(a1, (uint64_t)&v7);
    sub_1A39A47C4((uint64_t)&v7);
  }
  else
  {
    sub_1A39A1AD0(a1, (uint64_t)&v7);
    sub_1A39A1AB8(&v7, (uint64_t)v6);
    result = swift_dynamicCast();
    if (!(_DWORD)result)
      return result;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  result = type metadata accessor for SpeechSlicer(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = 1;
  return result;
}

unint64_t sub_1A39B5A0C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  sub_1A39B53E4((uint64_t)a1);
  v3 = type metadata accessor for SpeechSlicer(0);
  v4 = (_QWORD *)(v1 + *(int *)(v3 + 28));
  MEMORY[0x1A8595980]();
  if (*(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1A3AB4BE0();
  sub_1A3AB4C10();
  sub_1A3AB4BC8();
  TTSMarkupVisitor.visitChildren(_:)(a1, v3, (uint64_t)&protocol witness table for SpeechSlicer);
  if (!(*v4 >> 62))
  {
    if (*(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v7 = sub_1A3AB5480();
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_11;
LABEL_5:
  if (sub_1A39A9824())
    return swift_release();
  if (*v4 >> 62)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    v8 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
    result = v8 - 1;
    if (!__OFSUB__(v8, 1))
      goto LABEL_8;
    goto LABEL_14;
  }
  v5 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = v5 - 1;
  if (!__OFSUB__(v5, 1))
  {
LABEL_8:
    sub_1A39A9790(result);
    return swift_release();
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t SpeechSlicer.visit(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD v19[5];

  v3 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v19[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v19[-1] - v8;
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v19[-1] - v10;
  sub_1A39B7B30(v1, (uint64_t)&v19[-1] - v10, type metadata accessor for SpeechSlicer.VoiceQuery);
  swift_bridgeObjectRetain();
  sub_1A3AB4448();
  swift_storeEnumTagMultiPayload();
  sub_1A39B7B30(v1, (uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  v12 = sub_1A39B7740((uint64_t)v6, (uint64_t)v9);
  sub_1A39B7B74((uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  if ((v12 & 1) == 0)
  {
    sub_1A39B79FC((uint64_t)v9, v1);
    v13 = *(int *)(type metadata accessor for SpeechSlicer(0) + 32);
    if ((*(_BYTE *)(v1 + v13) & 1) != 0)
    {
      sub_1A39B4E68();
      *(_BYTE *)(v1 + v13) = 0;
    }
  }
  sub_1A39B7B74((uint64_t)v9, type metadata accessor for SpeechSlicer.VoiceQuery);
  v19[3] = &type metadata for TTSMarkup.Language;
  v19[4] = &protocol witness table for TTSMarkup.Language;
  v19[0] = swift_allocObject();
  sub_1A39B7A74(a1, v19[0] + 16);
  v14 = type metadata accessor for SpeechSlicer(0);
  TTSMarkupVisitor.visitChildren(_:)(v19, v14, (uint64_t)&protocol witness table for SpeechSlicer);
  sub_1A39A47C4((uint64_t)v19);
  sub_1A39B7B30(v1, (uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  v15 = sub_1A39B7740((uint64_t)v6, (uint64_t)v11);
  sub_1A39B7B74((uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  if ((v15 & 1) == 0)
  {
    sub_1A39B79FC((uint64_t)v11, v1);
    v16 = *(int *)(v14 + 32);
    if ((*(_BYTE *)(v1 + v16) & 1) != 0)
    {
      sub_1A39B4E68();
      *(_BYTE *)(v1 + v16) = 0;
    }
  }
  return sub_1A39B7B74((uint64_t)v11, type metadata accessor for SpeechSlicer.VoiceQuery);
}

uint64_t SpeechSlicer.visit(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD v31[3];
  ValueMetadata *v32;
  _UNKNOWN **v33;

  v3 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v31[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (_QWORD *)((char *)&v31[-1] - v8);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v31[-1] - v10;
  v12 = a1[11];
  if (v12)
  {
    v13 = a1[10];
    v14 = type metadata accessor for SpeechSlicer(0);
    v15 = *(int *)(v14 + 36);
    v16 = *(char **)(v1 + v15);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = sub_1A39AB4D8(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
    v18 = *((_QWORD *)v16 + 2);
    v17 = *((_QWORD *)v16 + 3);
    if (v18 >= v17 >> 1)
      v16 = sub_1A39AB4D8((char *)(v17 > 1), v18 + 1, 1, v16);
    *((_QWORD *)v16 + 2) = v18 + 1;
    v19 = &v16[16 * v18];
    *((_QWORD *)v19 + 4) = v13;
    *((_QWORD *)v19 + 5) = v12;
    *(_QWORD *)(v1 + v15) = v16;
    v20 = *(int *)(v14 + 32);
    if (*(_BYTE *)(v1 + v20) == 1)
    {
      sub_1A39B4E68();
      *(_BYTE *)(v1 + v20) = 0;
    }
    v32 = &type metadata for TTSMarkup.Voice;
    v33 = &protocol witness table for TTSMarkup.Voice;
    v31[0] = swift_allocObject();
    sub_1A39B7AF4((uint64_t)a1, v31[0] + 16);
    TTSMarkupVisitor.visitChildren(_:)(v31, v14, (uint64_t)&protocol witness table for SpeechSlicer);
    sub_1A39A47C4((uint64_t)v31);
    v21 = *(_QWORD *)(v1 + v15);
    if (*(_QWORD *)(v21 + 16))
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v23 = *(_QWORD *)(v21 + 16);
        if (v23)
        {
LABEL_11:
          *(_QWORD *)(v21 + 16) = v23 - 1;
          result = swift_bridgeObjectRelease();
          *(_QWORD *)(v1 + v15) = v21;
          return result;
        }
        goto LABEL_21;
      }
    }
    else
    {
      __break(1u);
    }
    result = (uint64_t)sub_1A39B772C(v21);
    v21 = result;
    v23 = *(_QWORD *)(result + 16);
    if (v23)
      goto LABEL_11;
LABEL_21:
    __break(1u);
    return result;
  }
  sub_1A39B7B30(v1, (uint64_t)&v31[-1] - v10, type metadata accessor for SpeechSlicer.VoiceQuery);
  v24 = a1[2];
  *v9 = a1[1];
  v9[1] = v24;
  swift_storeEnumTagMultiPayload();
  sub_1A39B7B30(v1, (uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  swift_bridgeObjectRetain();
  v25 = sub_1A39B7740((uint64_t)v6, (uint64_t)v9);
  sub_1A39B7B74((uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  if ((v25 & 1) == 0)
  {
    sub_1A39B79FC((uint64_t)v9, v1);
    v26 = *(int *)(type metadata accessor for SpeechSlicer(0) + 32);
    if ((*(_BYTE *)(v1 + v26) & 1) != 0)
    {
      sub_1A39B4E68();
      *(_BYTE *)(v1 + v26) = 0;
    }
  }
  sub_1A39B7B74((uint64_t)v9, type metadata accessor for SpeechSlicer.VoiceQuery);
  v32 = &type metadata for TTSMarkup.Voice;
  v33 = &protocol witness table for TTSMarkup.Voice;
  v31[0] = swift_allocObject();
  sub_1A39B7AF4((uint64_t)a1, v31[0] + 16);
  v27 = type metadata accessor for SpeechSlicer(0);
  TTSMarkupVisitor.visitChildren(_:)(v31, v27, (uint64_t)&protocol witness table for SpeechSlicer);
  sub_1A39A47C4((uint64_t)v31);
  sub_1A39B7B30(v1, (uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  v28 = sub_1A39B7740((uint64_t)v6, (uint64_t)v11);
  sub_1A39B7B74((uint64_t)v6, type metadata accessor for SpeechSlicer.VoiceQuery);
  if ((v28 & 1) == 0)
  {
    sub_1A39B79FC((uint64_t)v11, v1);
    v29 = *(int *)(v27 + 32);
    if ((*(_BYTE *)(v1 + v29) & 1) != 0)
    {
      sub_1A39B4E68();
      *(_BYTE *)(v1 + v29) = 0;
    }
  }
  return sub_1A39B7B74((uint64_t)v11, type metadata accessor for SpeechSlicer.VoiceQuery);
}

unint64_t SpeechSlicer.visitAnyElement(_:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  v2 = a1[3];
  v3 = a1[4];
  sub_1A39A19CC(a1, v2);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 24))(v6, v2, v3);
  v4 = v6[3];
  sub_1A39B11F4((uint64_t)v6, &qword_1EE6D2B60);
  if (v4)
    return sub_1A39B5A0C(a1);
  else
    return sub_1A39B5900((uint64_t)a1);
}

uint64_t sub_1A39B6190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for SpeechSlicer.Slice(0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(v1 + *(int *)(v3 + 28));
  if (!v6)
  {
    sub_1A39B7B30(v1, (uint64_t)v5, type metadata accessor for SpeechSlicer.Slice);
LABEL_5:
    v8 = *(_QWORD *)&v5[*(int *)(v2 + 24)];
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  v7 = objc_msgSend(v6, sel_transformedString);
  v8 = sub_1A3AB497C();
  v10 = v9;

  sub_1A39B7B30(v1, (uint64_t)v5, type metadata accessor for SpeechSlicer.Slice);
  if (!v10)
    goto LABEL_5;
LABEL_6:
  sub_1A39B7B74((uint64_t)v5, type metadata accessor for SpeechSlicer.Slice);
  return v8;
}

void SpeechSlicer.Slice.transform(block:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = type metadata accessor for SpeechSlicer.Slice(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v17 - v7;
  v9 = *(int *)(v5 + 28);
  v10 = *(void **)(v1 + v9);
  if (!v10)
  {
    sub_1A39B7B30(v1, (uint64_t)&v17 - v7, type metadata accessor for SpeechSlicer.Slice);
LABEL_5:
    v15 = (uint64_t *)&v8[*(int *)(v4 + 24)];
    v12 = *v15;
    v14 = v15[1];
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  v11 = objc_msgSend(v10, sel_transformedString);
  v12 = sub_1A3AB497C();
  v14 = v13;

  sub_1A39B7B30(v1, (uint64_t)v8, type metadata accessor for SpeechSlicer.Slice);
  if (!v14)
    goto LABEL_5;
LABEL_6:
  sub_1A39B7B74((uint64_t)v8, type metadata accessor for SpeechSlicer.Slice);
  v16 = a1(v12, v14);
  swift_bridgeObjectRelease();

  *(_QWORD *)(v2 + v9) = v16;
}

unint64_t SpeechSlicer.Slice.handle(event:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v2 = a1[2];
  v3 = a1[3];
  v21 = a1[1];
  v22 = *a1;
  *(_QWORD *)&v24 = *a1;
  *((_QWORD *)&v24 + 1) = v21;
  v19 = v3;
  v20 = v2;
  v25 = v2;
  v26 = v3;
  v4 = type metadata accessor for SpeechSlicer.Slice(0);
  v5 = (uint64_t *)(v1 + *(int *)(v4 + 24));
  v6 = *v5;
  v7 = v5[1];
  result = sub_1A39B650C();
  v10 = *(_QWORD *)(v1 + *(int *)(v4 + 32));
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = result >> 14;
    v13 = (_OWORD *)(v10 + 32);
    v14 = v9 >> 14;
    swift_bridgeObjectRetain();
    do
    {
      sub_1A39B7BB0(v13, &v24);
      if (v12 < *((_QWORD *)&v24 + 1) >> 14
        && (unint64_t)v24 >> 14 != *((_QWORD *)&v24 + 1) >> 14
        && (unint64_t)v24 >> 14 < v14
        && v12 != v14)
      {
        v17 = v28;
        v18 = v29;
        sub_1A39A19CC(v27, v28);
        v23[0] = v22;
        v23[1] = v21;
        v23[2] = v20;
        v23[3] = v19;
        (*(void (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 96))(v23, &v24, v6, v7, v17, v18);
      }
      sub_1A39B7C04((uint64_t)&v24);
      v13 = (_OWORD *)((char *)v13 + 72);
      --v11;
    }
    while (v11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A39B650C()
{
  _QWORD *v0;

  return ((uint64_t (*)(_QWORD, _QWORD))((char *)sub_1A39B6538 + 4 * byte_1A3AC00B0[v0[2] >> 61]))(*v0, v0[1]);
}

uint64_t sub_1A39B6538()
{
  return 15;
}

uint64_t sub_1A39B658C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 368) = a1;
  *(_QWORD *)(v2 + 376) = v1;
  return swift_task_switch();
}

uint64_t sub_1A39B65A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;

  v86 = (_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 368);
  v1 = *(_QWORD *)(v0 + 376);
  v3 = (int *)type metadata accessor for SpeechSlicer.Slice(0);
  *(_QWORD *)(v0 + 384) = v3;
  v4 = v3[6];
  *(_DWORD *)(v0 + 464) = v4;
  v5 = (char *)(v1 + v4);
  v6 = *(_QWORD *)(v1 + v4);
  *(_QWORD *)(v0 + 392) = v6;
  v7 = *((_QWORD *)v5 + 1);
  *(_QWORD *)(v0 + 400) = v7;
  if ((v7 & 0x2000000000000000) != 0)
    v8 = HIBYTE(v7) & 0xF;
  else
    v8 = v6;
  if (((v7 >> 60) & ((v6 & 0x800000000000000) == 0)) != 0)
    v9 = 11;
  else
    v9 = 7;
  v10 = v2 + 16;
  sub_1A39A1AD0(v2 + 16, v0 + 240);
  v11 = (unint64_t *)(v2
                           + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_children);
  swift_beginAccess();
  if (*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = *(_QWORD *)((*v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v13 = *(_QWORD *)(v0 + 264);
  v14 = *(_QWORD *)(v0 + 272);
  sub_1A39A19CC(v86, v13);
  if (!v12)
  {
    (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
    v20 = *(_QWORD *)(v0 + 224);
    sub_1A39B11F4(v0 + 200, &qword_1EE6D2B60);
    v17 = (_QWORD *)(v0 + 240);
    if (v20)
    {
LABEL_77:
      sub_1A39A47C4((uint64_t)v17);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v21 = v9 | (v8 << 16);
    sub_1A39A1AD0(v10, v0 + 160);
    sub_1A39A4820(&qword_1EE6D2B78);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_68:
      v66 = *(_QWORD *)(v0 + 264);
      v67 = *(_QWORD *)(v0 + 272);
      sub_1A39A19CC(v17, v66);
      (*(void (**)(uint64_t, uint64_t))(v67 + 48))(v66, v67);
      v69 = v68;
      v70 = v5;
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      v71 = *((_QWORD *)v5 + 1);
      v72 = HIBYTE(v71) & 0xF;
      if ((v71 & 0x2000000000000000) == 0)
        v72 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFLL;
      if (4 * v72 < v21 >> 14)
      {
        __break(1u);
      }
      else
      {
        v69 = *(_QWORD *)(v0 + 376);
        v73 = 7;
        if (((v71 >> 60) & ((*(_QWORD *)v5 & 0x800000000000000) == 0)) != 0)
          v73 = 11;
        v74 = v73 | (v72 << 16);
        sub_1A39A1AD0((uint64_t)v17, v0 + 48);
        *(_QWORD *)(v0 + 16) = v21;
        *(_QWORD *)(v0 + 24) = v74;
        *(_QWORD *)(v0 + 32) = v21;
        *(_QWORD *)(v0 + 40) = v74;
        v9 = v3[8];
        v70 = *(char **)(v69 + v9);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          goto LABEL_74;
      }
      v70 = sub_1A39B7610(0, *((_QWORD *)v70 + 2) + 1, 1, v70);
LABEL_74:
      v76 = *((_QWORD *)v70 + 2);
      v75 = *((_QWORD *)v70 + 3);
      if (v76 >= v75 >> 1)
        v70 = sub_1A39B7610((char *)(v75 > 1), v76 + 1, 1, v70);
      v78 = *(_QWORD *)(v0 + 368);
      v77 = *(_QWORD *)(v0 + 376);
      *((_QWORD *)v70 + 2) = v76 + 1;
      v79 = &v70[72 * v76];
      *((_OWORD *)v79 + 2) = *(_OWORD *)(v0 + 16);
      v80 = *(_OWORD *)(v0 + 32);
      v81 = *(_OWORD *)(v0 + 48);
      v82 = *(_OWORD *)(v0 + 64);
      *((_QWORD *)v79 + 12) = *(_QWORD *)(v0 + 80);
      *((_OWORD *)v79 + 4) = v81;
      *((_OWORD *)v79 + 5) = v82;
      *((_OWORD *)v79 + 3) = v80;
      *(_QWORD *)(v69 + v9) = v70;
      sub_1A39B79FC(v78+ OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery, v77 + v3[9]);
      v83 = *(_QWORD *)(v78
                      + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey);
      v84 = *(_QWORD *)(v78
                      + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceSelectionKey
                      + 8);
      v85 = (_QWORD *)(v77 + v3[10]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *v85 = v83;
      v85[1] = v84;
      v17 = (_QWORD *)(v0 + 240);
      goto LABEL_77;
    }
    v22 = *(_QWORD **)(v0 + 280);
    if (!v22)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_68;
    }
    v9 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v22) + 0x160);
    v23 = v22;
    v24 = ((uint64_t (*)(void))v9)();
    v25 = *((_QWORD *)v5 + 1);
    if ((v25 & 0x1000000000000000) != 0)
    {
      result = sub_1A3AB4AB4();
      v27 = v24 - result;
      if (!__OFSUB__(v24, result))
      {
LABEL_24:
        if (v27 < 1)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          *(_QWORD *)(v0 + 336) = 0;
          *(_QWORD *)(v0 + 344) = 0xE000000000000000;
          *(_QWORD *)(v0 + 352) = 32;
          *(_QWORD *)(v0 + 360) = 0xE100000000000000;
          sub_1A39A9EC0();
          sub_1A3AB518C();
          sub_1A3AB4A84();
          swift_bridgeObjectRelease();
          v28 = *(_QWORD *)v5;
          v9 = *((_QWORD *)v5 + 1);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v29 = HIBYTE(v9) & 0xF;
          if ((v9 & 0x2000000000000000) == 0)
            v29 = v28;
          v30 = v29 << 16;
          if ((v9 & 0x1000000000000000) == 0 || (v28 & 0x800000000000000) != 0)
            v21 = v30 | 7;
          else
            v21 = v30 | 0xB;
        }
        v17 = (_QWORD *)(v0 + 240);
        goto LABEL_68;
      }
    }
    else
    {
      if ((v25 & 0x2000000000000000) != 0)
        result = HIBYTE(v25) & 0xF;
      else
        result = *(_QWORD *)v5 & 0xFFFFFFFFFFFFLL;
      v27 = v24 - result;
      if (!__OFSUB__(v24, result))
        goto LABEL_24;
    }
    __break(1u);
    return result;
  }
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 408) = *(_QWORD *)v5;
  *(_QWORD *)(v0 + 416) = *((_QWORD *)v5 + 1);
  v15 = *v11;
  *(_QWORD *)(v0 + 424) = *v11;
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = sub_1A3AB5480();
  }
  else
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v17 = (_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 432) = v16;
  if (!v16)
  {
    v16 = *(_QWORD *)(v0 + 416);
    v31 = *(_QWORD *)(v0 + 408);
    v32 = *(int *)(v0 + 464);
    v5 = *(char **)(v0 + 376);
    swift_bridgeObjectRelease();
    v33 = v31 & 0xFFFFFFFFFFFFLL;
    if ((v16 & 0x2000000000000000) != 0)
      v33 = HIBYTE(v16) & 0xF;
    v35 = *(_QWORD *)&v5[v32];
    v34 = *(_QWORD *)&v5[v32 + 8];
    if ((v34 & 0x2000000000000000) != 0)
      v9 = HIBYTE(v34) & 0xF;
    else
      v9 = v35 & 0xFFFFFFFFFFFFLL;
    if (((v34 >> 60) & ((v35 & 0x800000000000000) == 0)) != 0)
      v36 = 11;
    else
      v36 = 7;
    if (v9 >= v33)
    {
      v37 = *(_QWORD *)(v0 + 400);
      if ((v37 & 0x2000000000000000) != 0)
        v38 = HIBYTE(v37) & 0xF;
      else
        v38 = *(_QWORD *)(v0 + 392) & 0xFFFFFFFFFFFFLL;
      v39 = (uint64_t *)(*(_QWORD *)(v0 + 376) + *(int *)(v0 + 464));
      v40 = *(_QWORD *)(v0 + 264);
      v41 = *(_QWORD *)(v0 + 272);
      sub_1A39A19CC(v86, v40);
      (*(void (**)(uint64_t, uint64_t))(v41 + 40))(v40, v41);
      v5 = v42;
      v16 = (uint64_t)v39;
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      v43 = *v39;
      v44 = v39[1];
      v45 = HIBYTE(v44) & 0xF;
      if ((v44 & 0x2000000000000000) == 0)
        v45 = *v39 & 0xFFFFFFFFFFFFLL;
      if (v45 >= v38)
      {
        v46 = v36 | (v9 << 16);
        v47 = *(_QWORD *)(v0 + 416);
        v48 = *(_QWORD *)(v0 + 400);
        v5 = *(char **)(v0 + 376);
        v49 = *(_QWORD *)(v0 + 384);
        v50 = HIBYTE(v47) & 0xF;
        if ((v47 & 0x2000000000000000) == 0)
          v50 = *(_QWORD *)(v0 + 408);
        if (((v47 >> 60) & ((*(_QWORD *)(v0 + 408) & 0x800000000000000) == 0)) != 0)
          v51 = 11;
        else
          v51 = 7;
        v52 = v51 | (v50 << 16);
        v53 = HIBYTE(v48) & 0xF;
        if ((v48 & 0x2000000000000000) == 0)
          v53 = *(_QWORD *)(v0 + 392);
        if (((v48 >> 60) & ((*(_QWORD *)(v0 + 392) & 0x800000000000000) == 0)) != 0)
          v54 = 11;
        else
          v54 = 7;
        v55 = v54 | (v53 << 16);
        if (((v44 >> 60) & ((v43 & 0x800000000000000) == 0)) != 0)
          v56 = 11;
        else
          v56 = 7;
        v57 = v56 | (v45 << 16);
        sub_1A39A1AD0((uint64_t)v86, v0 + 120);
        *(_QWORD *)(v0 + 88) = v55;
        *(_QWORD *)(v0 + 96) = v57;
        *(_QWORD *)(v0 + 104) = v52;
        *(_QWORD *)(v0 + 112) = v46;
        v9 = *(int *)(v49 + 32);
        v16 = *(_QWORD *)&v5[v9];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          goto LABEL_59;
        goto LABEL_83;
      }
LABEL_82:
      __break(1u);
LABEL_83:
      v16 = (uint64_t)sub_1A39B7610(0, *(_QWORD *)(v16 + 16) + 1, 1, (char *)v16);
LABEL_59:
      v59 = *(_QWORD *)(v16 + 16);
      v58 = *(_QWORD *)(v16 + 24);
      if (v59 >= v58 >> 1)
        v16 = (uint64_t)sub_1A39B7610((char *)(v58 > 1), v59 + 1, 1, (char *)v16);
      *(_QWORD *)(v16 + 16) = v59 + 1;
      v60 = v16 + 72 * v59;
      *(_OWORD *)(v60 + 32) = *(_OWORD *)(v0 + 88);
      v61 = *(_OWORD *)(v0 + 104);
      v62 = *(_OWORD *)(v0 + 120);
      v63 = *(_OWORD *)(v0 + 136);
      *(_QWORD *)(v60 + 96) = *(_QWORD *)(v0 + 152);
      *(_OWORD *)(v60 + 64) = v62;
      *(_OWORD *)(v60 + 80) = v63;
      *(_OWORD *)(v60 + 48) = v61;
      *(_QWORD *)&v5[v9] = v16;
      goto LABEL_77;
    }
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  if (v16 < 1)
  {
    __break(1u);
    goto LABEL_81;
  }
  *(_QWORD *)(v0 + 440) = 0;
  v18 = *(_QWORD *)(v0 + 424);
  if ((v18 & 0xC000000000000001) != 0)
  {
    v19 = MEMORY[0x1A85960B8](0);
  }
  else
  {
    v19 = *(_QWORD *)(v18 + 32);
    swift_retain();
  }
  *(_QWORD *)(v0 + 448) = v19;
  v64 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 456) = v64;
  *v64 = v0;
  v64[1] = sub_1A39B6D30;
  v65 = *(_QWORD *)(v0 + 376);
  v64[46] = v19;
  v64[47] = v65;
  return swift_task_switch();
}

uint64_t sub_1A39B6D30()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39B6D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v2 = *(_QWORD *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 432);
  swift_release();
  if (v2 + 1 == v3)
  {
    v4 = *(char **)(v0 + 416);
    v5 = *(_QWORD *)(v0 + 408);
    v6 = *(int *)(v0 + 464);
    v7 = *(_QWORD *)(v0 + 376);
    swift_bridgeObjectRelease();
    v8 = v5 & 0xFFFFFFFFFFFFLL;
    if (((unint64_t)v4 & 0x2000000000000000) != 0)
      v8 = ((unint64_t)v4 >> 56) & 0xF;
    v10 = *(_QWORD *)(v7 + v6);
    v9 = *(_QWORD *)(v7 + v6 + 8);
    if ((v9 & 0x2000000000000000) != 0)
      v11 = HIBYTE(v9) & 0xF;
    else
      v11 = v10 & 0xFFFFFFFFFFFFLL;
    if (((v9 >> 60) & ((v10 & 0x800000000000000) == 0)) != 0)
      v12 = 11;
    else
      v12 = 7;
    if (v11 < v8)
    {
      __break(1u);
    }
    else
    {
      v5 = v0 + 240;
      v13 = *(_QWORD *)(v0 + 400);
      if ((v13 & 0x2000000000000000) != 0)
        v14 = HIBYTE(v13) & 0xF;
      else
        v14 = *(_QWORD *)(v0 + 392) & 0xFFFFFFFFFFFFLL;
      v15 = (char *)(*(_QWORD *)(v0 + 376) + *(int *)(v0 + 464));
      v16 = *(_QWORD *)(v0 + 264);
      v1 = *(_QWORD *)(v0 + 272);
      sub_1A39A19CC((_QWORD *)(v0 + 240), v16);
      (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v16, v1);
      v7 = v17;
      v4 = v15;
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      v18 = *(_QWORD *)v15;
      v19 = *((_QWORD *)v15 + 1);
      v20 = HIBYTE(v19) & 0xF;
      if ((v19 & 0x2000000000000000) == 0)
        v20 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFLL;
      if (v20 >= v14)
      {
        v21 = v12 | (v11 << 16);
        v22 = *(_QWORD *)(v0 + 416);
        v23 = *(_QWORD *)(v0 + 400);
        v7 = *(_QWORD *)(v0 + 376);
        v24 = *(_QWORD *)(v0 + 384);
        v25 = HIBYTE(v22) & 0xF;
        if ((v22 & 0x2000000000000000) == 0)
          v25 = *(_QWORD *)(v0 + 408);
        if (((v22 >> 60) & ((*(_QWORD *)(v0 + 408) & 0x800000000000000) == 0)) != 0)
          v26 = 11;
        else
          v26 = 7;
        v27 = v26 | (v25 << 16);
        v28 = HIBYTE(v23) & 0xF;
        if ((v23 & 0x2000000000000000) == 0)
          v28 = *(_QWORD *)(v0 + 392);
        if (((v23 >> 60) & ((*(_QWORD *)(v0 + 392) & 0x800000000000000) == 0)) != 0)
          v29 = 11;
        else
          v29 = 7;
        v30 = v29 | (v28 << 16);
        if (((v19 >> 60) & ((v18 & 0x800000000000000) == 0)) != 0)
          v31 = 11;
        else
          v31 = 7;
        v32 = v31 | (v20 << 16);
        sub_1A39A1AD0(v0 + 240, v0 + 120);
        *(_QWORD *)(v0 + 88) = v30;
        *(_QWORD *)(v0 + 96) = v32;
        *(_QWORD *)(v0 + 104) = v27;
        *(_QWORD *)(v0 + 112) = v21;
        v1 = *(int *)(v24 + 32);
        v4 = *(char **)(v7 + v1);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          goto LABEL_31;
        goto LABEL_40;
      }
    }
    __break(1u);
LABEL_40:
    v4 = sub_1A39B7610(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
LABEL_31:
    v34 = *((_QWORD *)v4 + 2);
    v33 = *((_QWORD *)v4 + 3);
    if (v34 >= v33 >> 1)
      v4 = sub_1A39B7610((char *)(v33 > 1), v34 + 1, 1, v4);
    *((_QWORD *)v4 + 2) = v34 + 1;
    v35 = &v4[72 * v34];
    *((_OWORD *)v35 + 2) = *(_OWORD *)(v0 + 88);
    v36 = *(_OWORD *)(v0 + 104);
    v37 = *(_OWORD *)(v0 + 120);
    v38 = *(_OWORD *)(v0 + 136);
    *((_QWORD *)v35 + 12) = *(_QWORD *)(v0 + 152);
    *((_OWORD *)v35 + 4) = v37;
    *((_OWORD *)v35 + 5) = v38;
    *((_OWORD *)v35 + 3) = v36;
    *(_QWORD *)(v7 + v1) = v4;
    sub_1A39A47C4(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v40 = *(_QWORD *)(v0 + 440) + 1;
  *(_QWORD *)(v0 + 440) = v40;
  v41 = *(_QWORD *)(v0 + 424);
  if ((v41 & 0xC000000000000001) != 0)
  {
    v42 = MEMORY[0x1A85960B8]();
  }
  else
  {
    v42 = *(_QWORD *)(v41 + 8 * v40 + 32);
    swift_retain();
  }
  *(_QWORD *)(v0 + 448) = v42;
  v43 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 456) = v43;
  *v43 = v0;
  v43[1] = sub_1A39B6D30;
  v44 = *(_QWORD *)(v0 + 376);
  v43[46] = v42;
  v43[47] = v44;
  return swift_task_switch();
}

uint64_t sub_1A39B7078()
{
  uint64_t v0;

  sub_1A39A47C4(v0 + 16);
  sub_1A39B7B74(v0 + OBJC_IVAR____TtCV12TextToSpeech12SpeechSlicerP33_AA4177673707DD5115CAF93C9D57DEC615TrackedSSMLNode_voiceQuery, type metadata accessor for SpeechSlicer.VoiceQuery);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t sub_1A39B70EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v11;

  v1 = sub_1A3AB4538();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39B7B30(v0, (uint64_t)v7, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1A3AB5708();
      sub_1A3AB4A30();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return sub_1A3AB5708();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    sub_1A3AB5708();
    sub_1A39B9F44((unint64_t *)&qword_1ED1B5300, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E58]);
    sub_1A3AB48D4();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

uint64_t sub_1A39B7258()
{
  sub_1A3AB56FC();
  sub_1A39B70EC();
  return sub_1A3AB5738();
}

uint64_t sub_1A39B7298()
{
  sub_1A3AB56FC();
  sub_1A39B70EC();
  return sub_1A3AB5738();
}

unint64_t sub_1A39B7300(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  v2 = a1[3];
  v3 = a1[4];
  sub_1A39A19CC(a1, v2);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 24))(v6, v2, v3);
  v4 = v6[3];
  sub_1A39B11F4((uint64_t)v6, &qword_1EE6D2B60);
  if (v4)
    return sub_1A39B5A0C(a1);
  else
    return sub_1A39B5900((uint64_t)a1);
}

char *sub_1A39B738C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *result;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
  }
  swift_bridgeObjectRetain();
  v22 = sub_1A3AB5480();
  swift_bridgeObjectRelease();
  if (v22 < v5)
    goto LABEL_30;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    v10 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    v14 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v7 = *v4;
  if (*v4 >> 62)
    goto LABEL_33;
  v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_35;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if (v7 >> 62)
    goto LABEL_36;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x1A85960C4](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v6);
  type metadata accessor for SpeechSlicer.TrackedSSMLNode(0);
  swift_arrayDestroy();
  if (!v8)
  {
LABEL_27:
    *v15 = v3;
    return (char *)sub_1A3AB4BC8();
  }
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v23 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
    v17 = v23 - v5;
    if (!__OFSUB__(v23, v5))
      goto LABEL_21;
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v16 = *(_QWORD *)(v13 + 16);
  v17 = v16 - v5;
  if (__OFSUB__(v16, v5))
    goto LABEL_39;
LABEL_21:
  result = (char *)(v15 + 1);
  v19 = (char *)(v13 + 32 + 8 * v5);
  if (v15 + 1 != (_QWORD *)v19 || result >= &v19[8 * v17])
    result = (char *)memmove(result, v19, 8 * v17);
  if (v7 >> 62)
  {
LABEL_40:
    swift_bridgeObjectRetain();
    v24 = sub_1A3AB5480();
    result = (char *)swift_bridgeObjectRelease();
    v21 = v24 + v8;
    if (!__OFADD__(v24, v8))
      goto LABEL_26;
    goto LABEL_42;
  }
  v20 = *(_QWORD *)(v13 + 16);
  v21 = v20 + v8;
  if (!__OFADD__(v20, v8))
  {
LABEL_26:
    *(_QWORD *)(v13 + 16) = v21;
    goto LABEL_27;
  }
LABEL_42:
  __break(1u);
  return result;
}

char *sub_1A39B7610(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D2B98);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8])
      memmove(v12, v13, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A39B772C(uint64_t a1)
{
  return sub_1A39AB4D8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1A39B7740(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  char v22;
  char v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v29 = a2;
  v3 = sub_1A3AB4538();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v28 - v11;
  v13 = sub_1A39A4820(&qword_1EE6D2B80);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v16[*(int *)(v14 + 48)];
  sub_1A39B7B30(a1, (uint64_t)v16, type metadata accessor for SpeechSlicer.VoiceQuery);
  sub_1A39B7B30(v29, (uint64_t)v17, type metadata accessor for SpeechSlicer.VoiceQuery);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_1A39B7B30((uint64_t)v16, (uint64_t)v12, type metadata accessor for SpeechSlicer.VoiceQuery);
    if (!swift_getEnumCaseMultiPayload())
    {
      v24 = v17;
      v25 = v3;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v24, v3);
      v23 = MEMORY[0x1A8595254](v12, v6);
      v26 = *(void (**)(char *, uint64_t))(v4 + 8);
      v26(v6, v25);
      v26(v12, v25);
      sub_1A39B7B74((uint64_t)v16, type metadata accessor for SpeechSlicer.VoiceQuery);
      return v23 & 1;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v3);
    goto LABEL_15;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      goto LABEL_19;
LABEL_15:
    sub_1A39B11F4((uint64_t)v16, &qword_1EE6D2B80);
    goto LABEL_16;
  }
  sub_1A39B7B30((uint64_t)v16, (uint64_t)v10, type metadata accessor for SpeechSlicer.VoiceQuery);
  v20 = *v10;
  v19 = v10[1];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (v20 == *(_QWORD *)v17 && v19 == *((_QWORD *)v17 + 1))
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_19;
  }
  v22 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
  {
LABEL_19:
    sub_1A39B7B74((uint64_t)v16, type metadata accessor for SpeechSlicer.VoiceQuery);
    v23 = 1;
    return v23 & 1;
  }
  sub_1A39B7B74((uint64_t)v16, type metadata accessor for SpeechSlicer.VoiceQuery);
LABEL_16:
  v23 = 0;
  return v23 & 1;
}

uint64_t sub_1A39B79FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A39B7A40()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 24);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A39B7A74(uint64_t a1, uint64_t a2)
{
  _s8LanguageVwcp(a2, a1);
  return a2;
}

uint64_t sub_1A39B7AB0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 56);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A39B7AF4(uint64_t a1, uint64_t a2)
{
  _s5VoiceVwcp_0(a2, a1);
  return a2;
}

uint64_t sub_1A39B7B30(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1A39B7B74(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *sub_1A39B7BB0(_OWORD *a1, _OWORD *a2)
{
  __int128 v3;

  *a2 = *a1;
  a2[1] = a1[1];
  v3 = *(_OWORD *)((char *)a1 + 56);
  *(_OWORD *)((char *)a2 + 56) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 2), (uint64_t)(a1 + 2));
  return a2;
}

uint64_t sub_1A39B7C04(uint64_t a1)
{
  sub_1A39A47C4(a1 + 32);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for SpeechSlicer(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v9 = sub_1A3AB4538();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    v12 = a3[5];
    v13 = *(_OWORD *)((char *)a2 + v12 + 24);
    *(_OWORD *)((char *)a1 + v12 + 24) = v13;
    (**(void (***)(void))(v13 - 8))();
    v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    v15 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *(uint64_t *)((char *)a1 + v15) = *(uint64_t *)((char *)a2 + v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SpeechSlicer(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;

  type metadata accessor for SpeechSlicer.VoiceQuery(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (!EnumCaseMultiPayload)
  {
    v5 = sub_1A3AB4538();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  sub_1A39A47C4(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for SpeechSlicer(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = sub_1A3AB4538();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  v10 = a3[5];
  v11 = *(_OWORD *)((char *)a2 + v10 + 24);
  *(_OWORD *)((char *)a1 + v10 + 24) = v11;
  (**(void (***)(void))(v11 - 8))();
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  v13 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SpeechSlicer(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1A39B7B74((uint64_t)a1, type metadata accessor for SpeechSlicer.VoiceQuery);
    v6 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = sub_1A3AB4538();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  sub_1A39B8070((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]));
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_1A39B8070(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

char *initializeWithTake for SpeechSlicer(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;

  v6 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = sub_1A3AB4538();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  *((_QWORD *)v10 + 4) = *((_QWORD *)v11 + 4);
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v13 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[v13] = a2[v13];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  return a1;
}

char *assignWithTake for SpeechSlicer(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_1A39B7B74((uint64_t)a1, type metadata accessor for SpeechSlicer.VoiceQuery);
    v6 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v7 = sub_1A3AB4538();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  sub_1A39A47C4((uint64_t)&a1[v8]);
  v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  v12 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SpeechSlicer()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A39B83D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for SpeechSlicer()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A39B8464(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_1A39B84E0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SpeechSlicer.VoiceQuery(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SpeechSlicer.Slice(_QWORD *a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  id v32;
  int EnumCaseMultiPayload;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    if (v7)
    {
      *v4 = *a2;
      v4[1] = v7;
      v8 = a2[3];
      v4[2] = a2[2];
      v4[3] = v8;
      v4[4] = a2[4];
      *((_WORD *)v4 + 20) = *((_WORD *)a2 + 20);
      v4[6] = a2[6];
      *((_BYTE *)v4 + 56) = *((_BYTE *)a2 + 56);
      v9 = a2[9];
      v4[8] = a2[8];
      v4[9] = v9;
      v10 = (void *)a2[10];
      v4[10] = v10;
      *((_DWORD *)v4 + 22) = *((_DWORD *)a2 + 22);
      *((_BYTE *)v4 + 92) = *((_BYTE *)a2 + 92);
      *((_DWORD *)v4 + 24) = *((_DWORD *)a2 + 24);
      *((_BYTE *)v4 + 100) = *((_BYTE *)a2 + 100);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = v10;
    }
    else
    {
      v13 = *((_OWORD *)a2 + 5);
      *((_OWORD *)v4 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)v4 + 5) = v13;
      *(_QWORD *)((char *)v4 + 93) = *(uint64_t *)((char *)a2 + 93);
      v14 = *((_OWORD *)a2 + 1);
      *(_OWORD *)v4 = *(_OWORD *)a2;
      *((_OWORD *)v4 + 1) = v14;
      v15 = *((_OWORD *)a2 + 3);
      *((_OWORD *)v4 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)v4 + 3) = v15;
    }
    v16 = a3[5];
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_1A3AB45F8();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_1A39A4820(&qword_1EE6D2B68);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v22 = a3[6];
    v23 = a3[7];
    v24 = (_QWORD *)((char *)v4 + v22);
    v25 = (uint64_t *)((char *)a2 + v22);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = *(void **)((char *)a2 + v23);
    *(_QWORD *)((char *)v4 + v23) = v27;
    v28 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    v29 = (_QWORD *)((char *)v4 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    swift_bridgeObjectRetain();
    v32 = v27;
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v35 = v30[1];
      *v29 = *v30;
      v29[1] = v35;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v34 = sub_1A3AB4538();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v29, v30, v34);
      swift_storeEnumTagMultiPayload();
    }
    v36 = a3[10];
    v37 = a3[11];
    v38 = (_QWORD *)((char *)v4 + v36);
    v39 = (uint64_t *)((char *)a2 + v36);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    *(_QWORD *)((char *)v4 + v37) = *(uint64_t *)((char *)a2 + v37);
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for SpeechSlicer.Slice(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;

  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  v4 = a1 + a2[5];
  v5 = sub_1A3AB45F8();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v7 = a1 + a2[9];
  type metadata accessor for SpeechSlicer.VoiceQuery(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (!EnumCaseMultiPayload)
  {
    v9 = sub_1A3AB4538();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for SpeechSlicer.Slice(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;

  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v8 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v8;
    v9 = *(void **)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v9;
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = v9;
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 93) = *(_QWORD *)(a2 + 93);
    v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
  }
  v14 = a3[5];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = sub_1A3AB45F8();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_1A39A4820(&qword_1EE6D2B68);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v20 = a3[6];
  v21 = a3[7];
  v22 = (_QWORD *)(a1 + v20);
  v23 = (_QWORD *)(a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = *(void **)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v25;
  v26 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  swift_bridgeObjectRetain();
  v30 = v25;
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v33 = v28[1];
    *v27 = *v28;
    v27[1] = v33;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v32 = sub_1A3AB4538();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v27, v28, v32);
    swift_storeEnumTagMultiPayload();
  }
  v34 = a3[10];
  v35 = a3[11];
  v36 = (_QWORD *)(a1 + v34);
  v37 = (_QWORD *)(a2 + v34);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  *(_QWORD *)(a1 + v35) = *(_QWORD *)(a2 + v35);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SpeechSlicer.Slice(uint64_t a1, __int128 *a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  int v11;
  void *v12;
  int v13;
  int v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  int EnumCaseMultiPayload;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;

  v6 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v6)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v7 = (void *)*((_QWORD *)a2 + 10);
      v8 = *(void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v7;
      v9 = v7;

      v10 = *((_DWORD *)a2 + 22);
      *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
      *(_DWORD *)(a1 + 88) = v10;
      v11 = *((_DWORD *)a2 + 24);
      *(_BYTE *)(a1 + 100) = *((_BYTE *)a2 + 100);
      *(_DWORD *)(a1 + 96) = v11;
    }
    else
    {
      sub_1A39A3FE0(a1);
      v17 = a2[1];
      v16 = a2[2];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v17;
      *(_OWORD *)(a1 + 32) = v16;
      v19 = a2[4];
      v18 = a2[5];
      v20 = a2[3];
      *(_QWORD *)(a1 + 93) = *(_QWORD *)((char *)a2 + 93);
      *(_OWORD *)(a1 + 64) = v19;
      *(_OWORD *)(a1 + 80) = v18;
      *(_OWORD *)(a1 + 48) = v20;
    }
  }
  else if (v6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    v12 = (void *)*((_QWORD *)a2 + 10);
    *(_QWORD *)(a1 + 80) = v12;
    v13 = *((_DWORD *)a2 + 22);
    *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
    *(_DWORD *)(a1 + 88) = v13;
    v14 = *((_DWORD *)a2 + 24);
    *(_BYTE *)(a1 + 100) = *((_BYTE *)a2 + 100);
    *(_DWORD *)(a1 + 96) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v12;
  }
  else
  {
    v21 = *a2;
    v22 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v22;
    *(_OWORD *)a1 = v21;
    v23 = a2[3];
    v24 = a2[4];
    v25 = a2[5];
    *(_QWORD *)(a1 + 93) = *(_QWORD *)((char *)a2 + 93);
    *(_OWORD *)(a1 + 64) = v24;
    *(_OWORD *)(a1 + 80) = v25;
    *(_OWORD *)(a1 + 48) = v23;
  }
  v26 = a3[5];
  v27 = (void *)(a1 + v26);
  v28 = (char *)a2 + v26;
  v29 = sub_1A3AB45F8();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v30 + 8))(v27, v29);
LABEL_13:
    v34 = sub_1A39A4820(&qword_1EE6D2B68);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, char *, uint64_t))(v30 + 24))(v27, v28, v29);
LABEL_14:
  v35 = a3[6];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = a3[7];
  v39 = *(void **)(a1 + v38);
  v40 = *(void **)((char *)a2 + v38);
  *(_QWORD *)(a1 + v38) = v40;
  v41 = v40;

  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((__int128 *)a1 != a2)
  {
    v42 = a3[9];
    v43 = (_QWORD *)(a1 + v42);
    v44 = (_QWORD *)((char *)a2 + v42);
    sub_1A39B7B74(a1 + v42, type metadata accessor for SpeechSlicer.VoiceQuery);
    v45 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *v43 = *v44;
      v43[1] = v44[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      v47 = sub_1A3AB4538();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v43, v44, v47);
      swift_storeEnumTagMultiPayload();
    }
  }
  v48 = a3[10];
  v49 = (_QWORD *)(a1 + v48);
  v50 = (_QWORD *)((char *)a2 + v48);
  *v49 = *v50;
  v49[1] = v50[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for SpeechSlicer.Slice(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 93) = *(_QWORD *)(a2 + 93);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  v9 = a3[5];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v12 = sub_1A3AB45F8();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_1A39A4820(&qword_1EE6D2B68);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v16 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = sub_1A3AB4538();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload();
  }
  v21 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  return a1;
}

uint64_t assignWithTake for SpeechSlicer.Slice(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  if (*(_QWORD *)(a1 + 8))
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v6;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRelease();
      v7 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = v7;
      swift_bridgeObjectRelease();
      *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRelease();
      v8 = *(void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

      *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
      goto LABEL_6;
    }
    sub_1A39A3FE0(a1);
  }
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 93) = *(_QWORD *)(a2 + 93);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
LABEL_6:
  v12 = a3[5];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = sub_1A3AB45F8();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_11:
    v20 = sub_1A39A4820(&qword_1EE6D2B68);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_12:
  v21 = a3[6];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  v26 = a3[7];
  v27 = *(void **)(a1 + v26);
  *(_QWORD *)(a1 + v26) = *(_QWORD *)(a2 + v26);

  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v28 = a3[9];
    v29 = (void *)(a1 + v28);
    v30 = (const void *)(a2 + v28);
    sub_1A39B7B74(a1 + v28, type metadata accessor for SpeechSlicer.VoiceQuery);
    v31 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v32 = sub_1A3AB4538();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v29, v30, v32);
      swift_storeEnumTagMultiPayload();
    }
  }
  v33 = a3[10];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (uint64_t *)(a2 + v33);
  v37 = *v35;
  v36 = v35[1];
  *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SpeechSlicer.Slice()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A39B948C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = sub_1A39A4820(&qword_1EE6D2B68);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[6] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for SpeechSlicer.Slice()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A39B9544(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1A39A4820(&qword_1EE6D2B68);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6] + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[9];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_1A39B95EC()
{
  unint64_t v0;
  unint64_t v1;

  sub_1A39B96B4();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SpeechSlicer.VoiceQuery(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_1A39B96B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE6D2B70)
  {
    sub_1A3AB45F8();
    v0 = sub_1A3AB50FC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE6D2B70);
  }
}

uint64_t sub_1A39B9708()
{
  return type metadata accessor for SpeechSlicer.TrackedSSMLNode(0);
}

uint64_t type metadata accessor for SpeechSlicer.TrackedSSMLNode(uint64_t a1)
{
  return sub_1A39B9724(a1, (uint64_t *)&unk_1EE6D68D0);
}

uint64_t sub_1A39B9724(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A39B9758()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SpeechSlicer.VoiceQuery(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t _s10BreadCrumbVwxx(uint64_t a1)
{
  return sub_1A39A47C4(a1 + 32);
}

_OWORD *_s10BreadCrumbVwcp(_OWORD *a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)a1 + 56) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return a1;
}

_QWORD *_s10BreadCrumbVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  sub_1A39B8070(a1 + 4, a2 + 4);
  return a1;
}

__n128 _s7ManagerVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s10BreadCrumbVwta(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  sub_1A39A47C4(a1 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t _s10BreadCrumbVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s10BreadCrumbVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.BreadCrumb()
{
  return &type metadata for TTSMarkup.BreadCrumb;
}

uint64_t *sub_1A39B9998(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = sub_1A3AB4538();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1A39B9A70(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
    return swift_bridgeObjectRelease();
  if (!(_DWORD)result)
  {
    v3 = sub_1A3AB4538();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

_QWORD *sub_1A39B9AD0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = sub_1A3AB4538();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *sub_1A39B9B80(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_1A39B7B74((uint64_t)a1, type metadata accessor for SpeechSlicer.VoiceQuery);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = sub_1A3AB4538();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *sub_1A39B9C50(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_1A3AB4538();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1A39B9CD8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1A39B7B74((uint64_t)a1, type metadata accessor for SpeechSlicer.VoiceQuery);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_1A3AB4538();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TTSMacroLanguageDisambiguationMapping(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for TTSMacroLanguageDisambiguationMapping(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1A39B9D94()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1A39B9DA4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A3AB4538();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_1A39B9E14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6D68F0;
  if (!qword_1EE6D68F0)
  {
    v1 = type metadata accessor for SpeechSlicer.VoiceQuery(255);
    result = MEMORY[0x1A8597738](&unk_1A3AC0200, v1);
    atomic_store(result, (unint64_t *)&qword_1EE6D68F0);
  }
  return result;
}

uint64_t sub_1A39B9E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SpeechSlicer.VoiceQuery(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A39B9EA0(uint64_t a1)
{
  sub_1A39A07C8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(void **)(a1 + 80));
  return a1;
}

uint64_t sub_1A39B9F00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1A39A4820(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1A39B9F44(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1A8597738](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A39B9F84()
{
  unint64_t result;

  result = sub_1A39A5780((uint64_t)&unk_1E4A99B30);
  qword_1EE6D4DF8 = result;
  return result;
}

unint64_t sub_1A39B9FA8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A39A4820(&qword_1ED1B5450);
  v2 = (_QWORD *)sub_1A3AB54B0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1A39A2734(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A39BA0C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = sub_1A39A4820(&qword_1EE6D2BC0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A39A4820(&qword_1EE6D2BC8);
  v6 = sub_1A3AB54B0();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1A39B9F00(v12, (uint64_t)v5, &qword_1EE6D2BC0);
    result = sub_1A39BC700((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_1A3AB4424();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A39BA254()
{
  uint64_t inited;
  unint64_t result;

  sub_1A39A4820(&qword_1ED1B5470);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABFBB0;
  *(_QWORD *)(inited + 32) = 0x55522D7572;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  *(_QWORD *)(inited + 48) = &unk_1E4A99CE0;
  *(_QWORD *)(inited + 56) = 0x4F4E2D626ELL;
  *(_QWORD *)(inited + 64) = 0xE500000000000000;
  *(_QWORD *)(inited + 72) = &unk_1E4A99CB0;
  result = sub_1A39B9FA8(inited);
  qword_1ED1B5B60 = result;
  return result;
}

unint64_t sub_1A39BA2D0()
{
  uint64_t inited;
  unint64_t result;

  sub_1A39A4820(&qword_1ED1B5470);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3AC0230;
  *(_QWORD *)(inited + 32) = 0x4B482D687ALL;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  *(_QWORD *)(inited + 48) = &unk_1E4A99C80;
  *(_QWORD *)(inited + 56) = 0x4F4D2D687ALL;
  *(_QWORD *)(inited + 64) = 0xE500000000000000;
  *(_QWORD *)(inited + 72) = &unk_1E4A99BB0;
  *(_QWORD *)(inited + 80) = 26746;
  *(_QWORD *)(inited + 88) = 0xE200000000000000;
  *(_QWORD *)(inited + 96) = &unk_1E4A99BE0;
  *(_QWORD *)(inited + 104) = 0x41532D7261;
  *(_QWORD *)(inited + 112) = 0xE500000000000000;
  *(_QWORD *)(inited + 120) = &unk_1E4A99C10;
  *(_QWORD *)(inited + 128) = 0x4F4E2D6F6ELL;
  *(_QWORD *)(inited + 136) = 0xE500000000000000;
  *(_QWORD *)(inited + 144) = &unk_1E4A99C50;
  result = sub_1A39B9FA8(inited);
  qword_1ED1B5B50 = result;
  return result;
}

unint64_t sub_1A39BA398()
{
  unint64_t result;

  result = sub_1A39A5780((uint64_t)&unk_1E4A98B18);
  qword_1EE6E6CD0 = result;
  return result;
}

uint64_t *sub_1A39BA3BC()
{
  if (qword_1EE6D4DE0 != -1)
    swift_once();
  return &qword_1EE6E6CD0;
}

uint64_t Locale.LanguageCode.macroLanguage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (qword_1EE6D4E00 != -1)
    swift_once();
  v2 = qword_1EE6D4DF8;
  v3 = sub_1A3AB43F4();
  if (*(_QWORD *)(v2 + 16) && (sub_1A39A2734(v3, v4), (v5 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1A3AB4430();
    v6 = sub_1A3AB4424();
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a1;
    v9 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v6 = sub_1A3AB4424();
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a1;
    v9 = 1;
  }
  return v7(v8, v9, 1, v6);
}

uint64_t Locale.LanguageCode.isMacroLanguage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (qword_1EE6D4E00 != -1)
    swift_once();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_1A39BA568(v0);
  v2 = sub_1A3AB43F4();
  v4 = sub_1A39BA6FC(v2, v3, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1A39BA568(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = sub_1A3AB4ED4();
  v3 = 0;
  v18 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_1A39BC8AC(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1A39BA6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_1A3AB56FC();
    sub_1A3AB4A30();
    v6 = sub_1A3AB5738();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_1A3AB5654() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_1A3AB5654() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t Locale.LanguageCode.childLanguages.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v1 = sub_1A3AB4424();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EE6D4E00 != -1)
    v3 = swift_once();
  v6 = qword_1EE6D4DF8;
  MEMORY[0x1E0C80A78](v3);
  v15[-2] = v0;
  swift_bridgeObjectRetain();
  v7 = sub_1A39BAA14((uint64_t)sub_1A39BC5D8, (uint64_t)&v15[-4], v6);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v15[0] = MEMORY[0x1E0DEE9D8];
    sub_1A39BE040(0, v8, 0);
    v9 = v15[0];
    v10 = v7 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_1A3AB4430();
      v15[0] = v9;
      v12 = *(_QWORD *)(v9 + 16);
      v11 = *(_QWORD *)(v9 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1A39BE040(v11 > 1, v12 + 1, 1);
        v9 = v15[0];
      }
      v10 += 16;
      *(_QWORD *)(v9 + 16) = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v9+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v12, v5, v1);
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v13 = sub_1A39BED30(v9);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1A39BAA14(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD *);
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *);
  uint64_t v26;
  int64_t v27;
  _QWORD v28[2];
  uint64_t v29;

  v4 = a3;
  v5 = (uint64_t (*)(_QWORD *))result;
  v6 = 0;
  v7 = *(_QWORD *)(a3 + 64);
  v26 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v27 = (unint64_t)(v8 + 63) >> 6;
  v11 = MEMORY[0x1E0DEE9D8];
  v24 = (uint64_t (*)(_QWORD *))result;
  if ((v9 & v7) != 0)
    goto LABEL_6;
LABEL_7:
  if (__OFADD__(v6++, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v6 >= v27)
    goto LABEL_33;
  v15 = *(_QWORD *)(v26 + 8 * v6);
  if (v15)
    goto LABEL_19;
  v16 = v6 + 1;
  if (v6 + 1 >= v27)
    goto LABEL_33;
  v15 = *(_QWORD *)(v26 + 8 * v16);
  if (v15)
  {
LABEL_18:
    v6 = v16;
LABEL_19:
    v10 = (v15 - 1) & v15;
    for (i = __clz(__rbit64(v15)) + (v6 << 6); ; i = v12 | (v6 << 6))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * i);
      v18 = *v17;
      v19 = v17[1];
      v28[0] = *v17;
      v28[1] = v19;
      swift_bridgeObjectRetain();
      v20 = v5(v28);
      if (v3)
        break;
      if ((v20 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        v29 = v11;
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1A39AE488(0, *(_QWORD *)(v11 + 16) + 1, 1);
          v11 = v29;
        }
        v22 = *(_QWORD *)(v11 + 16);
        v21 = *(_QWORD *)(v11 + 24);
        if (v22 >= v21 >> 1)
        {
          result = (uint64_t)sub_1A39AE488((char *)(v21 > 1), v22 + 1, 1);
          v11 = v29;
        }
        *(_QWORD *)(v11 + 16) = v22 + 1;
        v23 = v11 + 16 * v22;
        *(_QWORD *)(v23 + 32) = v18;
        *(_QWORD *)(v23 + 40) = v19;
        v4 = a3;
        v5 = v24;
        if (!v10)
          goto LABEL_7;
      }
      else
      {
        result = swift_bridgeObjectRelease();
        if (!v10)
          goto LABEL_7;
      }
LABEL_6:
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return v11;
  }
  v16 = v6 + 2;
  if (v6 + 2 >= v27)
  {
LABEL_33:
    swift_release();
    return v11;
  }
  v15 = *(_QWORD *)(v26 + 8 * v16);
  if (v15)
    goto LABEL_18;
  v16 = v6 + 3;
  if (v6 + 3 >= v27)
    goto LABEL_33;
  v15 = *(_QWORD *)(v26 + 8 * v16);
  if (v15)
    goto LABEL_18;
  v16 = v6 + 4;
  if (v6 + 4 >= v27)
    goto LABEL_33;
  v15 = *(_QWORD *)(v26 + 8 * v16);
  if (v15)
    goto LABEL_18;
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v27)
      goto LABEL_33;
    v15 = *(_QWORD *)(v26 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_19;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1A39BAC88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_BYTE *, _QWORD);
  void (*v13)(_BYTE *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[32];
  _BYTE v32[32];
  uint64_t v33;

  v30 = a2;
  v4 = sub_1A3AB43AC();
  v28 = *(_QWORD *)(v4 - 8);
  v29 = v4;
  MEMORY[0x1E0C80A78](v4);
  v27 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A3AB4538();
  v25 = *(_QWORD *)(v6 - 8);
  v26 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (v9)
  {
    v24[1] = v2;
    v33 = MEMORY[0x1E0DEE9D8];
    sub_1A39AE488(0, v9, 0);
    v10 = v33;
    v11 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      v12 = (void (*)(_BYTE *, _QWORD))sub_1A3AB4394();
      v13 = (void (*)(_BYTE *, _QWORD))sub_1A3AB44CC();
      v15 = v14;
      v16 = sub_1A3AB4424();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
      {
        swift_bridgeObjectRetain();
        sub_1A3AB4400();
      }
      v13(v31, 0);
      v12(v32, 0);
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v27, v30, v29);
      sub_1A3AB43B8();
      v17 = sub_1A3AB43D0();
      v19 = v18;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v26);
      swift_bridgeObjectRelease();
      v33 = v10;
      v21 = *(_QWORD *)(v10 + 16);
      v20 = *(_QWORD *)(v10 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_1A39AE488((char *)(v20 > 1), v21 + 1, 1);
        v10 = v33;
      }
      v11 += 16;
      *(_QWORD *)(v10 + 16) = v21 + 1;
      v22 = v10 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v17;
      *(_QWORD *)(v22 + 40) = v19;
      --v9;
    }
    while (v9);
  }
  return v10;
}

unint64_t sub_1A39BAEA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;

  sub_1A39A4820(&qword_1EE6D2BB8);
  v0 = sub_1A39A4820(&qword_1EE6D2BC0);
  v1 = *(unsigned __int8 *)(*(_QWORD *)(v0 - 8) + 80);
  v2 = (v1 + 32) & ~v1;
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1A3ABF990;
  v4 = *(int *)(v0 + 48);
  sub_1A3AB4418();
  sub_1A39A4820(&qword_1EE6D2BB0);
  type metadata accessor for TTSMacroLanguageDisambiguationMapping();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1A3AC0240;
  sub_1A39A4820(&qword_1EE6D2BA0);
  sub_1A3AB4484();
  sub_1A3AB4418();
  swift_storeEnumTagMultiPayload();
  sub_1A3AB4484();
  sub_1A3AB4418();
  swift_storeEnumTagMultiPayload();
  sub_1A3AB4418();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v3 + v2 + v4) = v5;
  result = sub_1A39BA0C0(v3);
  qword_1EE6E6D58 = result;
  return result;
}

uint64_t Locale.withTTSLanguageDisambiguation(overrides:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  size_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int EnumCaseMultiPayload;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  int v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  char *v77;
  char v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  char *v82;
  char *v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  char *v86;
  char *v87;
  void (*v88)(uint64_t *, _QWORD);
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *);
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(char *, char *, uint64_t);
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  unsigned int (*v120)(char *, uint64_t, uint64_t);
  void (*v121)(char *, uint64_t);
  uint64_t v122;
  void (**v123)(char *);
  char *v124;
  uint64_t v125;

  v115 = a1;
  v104 = sub_1A3AB43AC();
  v103 = *(_QWORD *)(v104 - 8);
  v4 = MEMORY[0x1E0C80A78](v104);
  v102 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v101 = (char *)&v92 - v6;
  v108 = sub_1A39A4820(&qword_1EE6D2370);
  MEMORY[0x1E0C80A78](v108);
  v113 = (uint64_t)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A39A4820(&qword_1EE6D2350);
  v9 = MEMORY[0x1E0C80A78](v8);
  v106 = (uint64_t)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v116 = (uint64_t)&v92 - v12;
  MEMORY[0x1E0C80A78](v11);
  v112 = (uint64_t)&v92 - v13;
  v107 = sub_1A3AB4490();
  v111 = *(_QWORD *)(v107 - 8);
  v14 = MEMORY[0x1E0C80A78](v107);
  v105 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v110 = (char *)&v92 - v16;
  v122 = type metadata accessor for TTSMacroLanguageDisambiguationMapping();
  v109 = *(_QWORD *)(v122 - 8);
  v17 = MEMORY[0x1E0C80A78](v122);
  v123 = (void (**)(char *))((char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v92 - v19;
  v21 = sub_1A39A4820(&qword_1ED1B52F0);
  v22 = MEMORY[0x1E0C80A78](v21);
  v100 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v119 = (char *)&v92 - v25;
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v92 - v26;
  v28 = sub_1A3AB4520();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = MEMORY[0x1E0C80A78](v28);
  v124 = (char *)&v92 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v92 - v32;
  v34 = sub_1A3AB4424();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = MEMORY[0x1E0C80A78](v34);
  v117 = (char *)&v92 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x1E0C80A78](v36);
  v99 = (char *)&v92 - v39;
  MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v92 - v40;
  v118 = v2;
  sub_1A3AB452C();
  sub_1A3AB44FC();
  v121 = *(void (**)(char *, uint64_t))(v29 + 8);
  v121(v33, v28);
  v120 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  if (v120(v27, 1, v34) == 1)
  {
    sub_1A39B11F4((uint64_t)v27, &qword_1ED1B52F0);
    v42 = v118;
LABEL_36:
    v80 = sub_1A3AB4538();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(a2, v42, v80);
  }
  v114 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
  v114(v41, v27, v34);
  if (qword_1EE6D4E00 != -1)
    swift_once();
  v43 = swift_bridgeObjectRetain();
  v44 = sub_1A39BA568(v43);
  v45 = sub_1A3AB43F4();
  v47 = sub_1A39BA6FC(v45, v46, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v42 = v118;
  if ((v47 & 1) == 0)
  {
LABEL_35:
    (*(void (**)(char *, uint64_t))(v35 + 8))(v41, v34);
    goto LABEL_36;
  }
  v48 = v115;
  if (v115 && *(_QWORD *)(v115 + 16) && (v49 = sub_1A39BC700((uint64_t)v41), (v50 & 1) != 0))
  {
    v51 = *(_QWORD *)(*(_QWORD *)(v48 + 56) + 8 * v49);
    swift_bridgeObjectRetain();
  }
  else
  {
    v51 = MEMORY[0x1E0DEE9D8];
  }
  if (qword_1EE6D6A00 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1EE6E6D58 + 16))
  {
    sub_1A39BC700((uint64_t)v41);
    if ((v52 & 1) != 0)
    {
      v125 = v51;
      v53 = swift_bridgeObjectRetain();
      sub_1A39BE20C(v53);
      v51 = v125;
    }
  }
  v54 = *(_QWORD *)(v51 + 16);
  if (!v54)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  v55 = (*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
  v92 = v51;
  v56 = v51 + v55;
  v115 = *(_QWORD *)(v109 + 72);
  v109 = v28;
  v97 = a2;
  v96 = v20;
  v95 = v34;
  v94 = v35;
  v93 = v41;
  while (1)
  {
    sub_1A39BEF3C(v56, (uint64_t)v20);
    sub_1A3AB452C();
    sub_1A39BEF3C((uint64_t)v20, (uint64_t)v123);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v58 = a2;
        v59 = v119;
        (*v123)(v124);
        v60 = (uint64_t)v59;
        a2 = v58;
        v28 = v109;
        swift_release();
        goto LABEL_32;
      }
      v60 = (uint64_t)v119;
      v73 = v119;
      v74 = (char *)v123;
    }
    else
    {
      v61 = sub_1A39A4820(&qword_1EE6D2BA0);
      v62 = (char *)v123 + *(int *)(v61 + 48);
      v64 = v110;
      v63 = v111;
      v65 = v107;
      v98 = *(void (**)(char *))(v111 + 32);
      v98(v110);
      v114(v117, v62, v34);
      v66 = v65;
      v67 = v112;
      (*(void (**)(uint64_t, char *, uint64_t))(v63 + 16))(v112, v64, v65);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v67, 0, 1, v65);
      v68 = v116;
      sub_1A3AB4508();
      v69 = v113;
      v70 = v113 + *(int *)(v108 + 48);
      sub_1A39B9F00(v67, v113, &qword_1EE6D2350);
      sub_1A39B9F00(v68, v70, &qword_1EE6D2350);
      v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
      if (v71(v69, 1, v66) == 1)
      {
        sub_1A39B11F4(v116, &qword_1EE6D2350);
        sub_1A39B11F4(v67, &qword_1EE6D2350);
        (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v66);
        v72 = v71(v70, 1, v66);
        v35 = v94;
        v41 = v93;
        if (v72 != 1)
          goto LABEL_27;
        sub_1A39B11F4(v113, &qword_1EE6D2350);
        a2 = v97;
        v42 = v118;
        v20 = v96;
        v34 = v95;
        v28 = v109;
      }
      else
      {
        v75 = v106;
        sub_1A39B9F00(v69, v106, &qword_1EE6D2350);
        if (v71(v70, 1, v66) == 1)
        {
          sub_1A39B11F4(v116, &qword_1EE6D2350);
          sub_1A39B11F4(v112, &qword_1EE6D2350);
          v76 = *(void (**)(char *, uint64_t))(v111 + 8);
          v76(v110, v66);
          v76((char *)v75, v66);
          v35 = v94;
          v41 = v93;
LABEL_27:
          sub_1A39B11F4(v113, &qword_1EE6D2370);
          a2 = v97;
          v42 = v118;
          v20 = v96;
          v34 = v95;
          v28 = v109;
LABEL_28:
          (*(void (**)(char *, uint64_t))(v35 + 8))(v117, v34);
          v60 = (uint64_t)v119;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v119, 1, 1, v34);
          goto LABEL_32;
        }
        v77 = v105;
        ((void (*)(char *, uint64_t, uint64_t))v98)(v105, v70, v66);
        sub_1A39B9F44(&qword_1EE6D2BA8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0C48], MEMORY[0x1E0CB0C68]);
        v78 = sub_1A3AB494C();
        v79 = *(void (**)(char *, uint64_t))(v111 + 8);
        v79(v77, v66);
        sub_1A39B11F4(v116, &qword_1EE6D2350);
        sub_1A39B11F4(v112, &qword_1EE6D2350);
        v79(v110, v66);
        v79((char *)v75, v66);
        sub_1A39B11F4(v69, &qword_1EE6D2350);
        a2 = v97;
        v42 = v118;
        v20 = v96;
        v34 = v95;
        v35 = v94;
        v41 = v93;
        v28 = v109;
        if ((v78 & 1) == 0)
          goto LABEL_28;
      }
      v60 = (uint64_t)v119;
      v73 = v119;
      v74 = v117;
    }
    v114(v73, v74, v34);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v60, 0, 1, v34);
LABEL_32:
    v121(v124, v28);
    if (v120((char *)v60, 1, v34) != 1)
      break;
    sub_1A39BEF80((uint64_t)v20);
    sub_1A39B11F4(v60, &qword_1ED1B52F0);
    v56 += v115;
    if (!--v54)
      goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  v82 = v99;
  v114(v99, (char *)v60, v34);
  sub_1A3AB43D0();
  v83 = v101;
  sub_1A3AB43A0();
  v84 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
  v85 = v35;
  v86 = v100;
  v84(v100, v82, v34);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v86, 0, 1, v34);
  v87 = v41;
  v88 = (void (*)(uint64_t *, _QWORD))sub_1A3AB4394();
  sub_1A3AB44E4();
  v88(&v125, 0);
  v89 = v103;
  v90 = v104;
  (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v102, v83, v104);
  sub_1A3AB43B8();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v83, v90);
  v91 = *(void (**)(char *, uint64_t))(v85 + 8);
  v91(v82, v34);
  sub_1A39BEF80((uint64_t)v20);
  return ((uint64_t (*)(char *, uint64_t))v91)(v87, v34);
}

id TTSAXResource.primaryLocales.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20[2];
  char *v21;

  v1 = sub_1A3AB4538();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(v0, sel_languages);
  if (result)
  {
    v6 = result;
    v7 = sub_1A3AB4BB0();

    v8 = MEMORY[0x1E0DEE9D8];
    v21 = (char *)MEMORY[0x1E0DEE9D8];
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
      swift_bridgeObjectRetain();
      v10 = (uint64_t *)(v7 + 40);
      do
      {
        v11 = *v10;
        v20[0] = *(v10 - 1);
        v20[1] = v11;
        sub_1A39BBD34(&v21, v20, &v19);
        swift_bridgeObjectRelease();
        v12 = v19;
        v21 = v19;
        v10 += 2;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
    }
    else
    {
      v12 = (char *)MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    v13 = *((_QWORD *)v12 + 2);
    if (v13)
    {
      v20[0] = v8;
      sub_1A39BE06C(0, v13, 0);
      v14 = v20[0];
      v15 = v12 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_1A3AB4448();
        v20[0] = v14;
        v17 = *(_QWORD *)(v14 + 16);
        v16 = *(_QWORD *)(v14 + 24);
        if (v17 >= v16 >> 1)
        {
          sub_1A39BE06C(v16 > 1, v17 + 1, 1);
          v14 = v20[0];
        }
        v15 += 16;
        *(_QWORD *)(v14 + 16) = v17 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v14+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v17, v4, v1);
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (id)MEMORY[0x1E0DEE9D8];
    }
    return (id)v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A39BBD34@<X0>(char **a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char **v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char **v43;
  char *v44;

  v43 = a3;
  v5 = sub_1A3AB44F0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A39A4820(&qword_1ED1B52F0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A3AB43AC();
  v41 = *(_QWORD *)(v12 - 8);
  v42 = v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v17 = *a2;
  v16 = a2[1];
  if (qword_1ED1B5B58 != -1)
    swift_once();
  v18 = qword_1ED1B5B50;
  if (*(_QWORD *)(qword_1ED1B5B50 + 16))
  {
    swift_bridgeObjectRetain();
    v19 = sub_1A39A2734(v17, v16);
    if ((v20 & 1) != 0)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v44 = v15;
      swift_bridgeObjectRetain();
      result = sub_1A39BE30C(v21);
      *v43 = v44;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v40 = v14;
  sub_1A3AB43A0();
  swift_bridgeObjectRetain();
  sub_1A3AB44C0();
  sub_1A3AB44D8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v23 = sub_1A3AB4424();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v11, 1, v23) == 1)
  {
    sub_1A39B11F4((uint64_t)v11, &qword_1ED1B52F0);
LABEL_13:
    v30 = v43;
    v32 = v41;
    v31 = v42;
    goto LABEL_14;
  }
  v25 = sub_1A3AB43F4();
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v23);
  v28 = qword_1ED1B5B50;
  if (!*(_QWORD *)(qword_1ED1B5B50 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v29 = sub_1A39A2734(v25, v27);
  v30 = v43;
  v32 = v41;
  v31 = v42;
  if ((v33 & 1) != 0)
  {
    v34 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v29);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v35 = (uint64_t)v40;
    v36 = sub_1A39BAC88(v34, (uint64_t)v40);
    swift_bridgeObjectRelease();
    v44 = v15;
    swift_bridgeObjectRetain();
    sub_1A39BE30C(v36);
    *v30 = v44;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v35, v31);
  }
  swift_bridgeObjectRelease();
LABEL_14:
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v15 = sub_1A39AB4D8(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
  v38 = *((_QWORD *)v15 + 2);
  v37 = *((_QWORD *)v15 + 3);
  if (v38 >= v37 >> 1)
    v15 = sub_1A39AB4D8((char *)(v37 > 1), v38 + 1, 1, v15);
  *((_QWORD *)v15 + 2) = v38 + 1;
  v39 = &v15[16 * v38];
  *((_QWORD *)v39 + 4) = v17;
  *((_QWORD *)v39 + 5) = v16;
  swift_bridgeObjectRelease();
  *v30 = v15;
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v40, v31);
}

void TTSAXResource.secondaryLocales.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  int v40;
  int v41;
  char v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v1 = sub_1A3AB4538();
  v51 = *(_QWORD *)(v1 - 8);
  v52 = v1;
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(v0, sel_synthesisProviderVoice);
  v5 = objc_msgSend(v4, sel_supportedLanguages);

  v6 = sub_1A3AB4BB0();
  v7 = sub_1A39BEFBC(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v8 = objc_msgSend(v0, sel_synthesisProviderVoice);
  v9 = objc_msgSend(v8, sel_primaryLanguages);

  v10 = sub_1A3AB4BB0();
  v11 = sub_1A39BE568(v10, v7);
  swift_bridgeObjectRelease();
  v55 = v11;
  v12 = objc_msgSend(v0, sel_synthesisProviderVoice);
  LODWORD(v10) = objc_msgSend(v12, sel_isFirstParty);

  if ((_DWORD)v10)
  {
    v13 = 0;
    v14 = *(_QWORD *)(v7 + 56);
    v49 = v7 + 56;
    v15 = 1 << *(_BYTE *)(v7 + 32);
    v16 = -1;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    v17 = v16 & v14;
    v50 = (unint64_t)(v15 + 63) >> 6;
    v53 = v3;
    while (1)
    {
      if (v17)
      {
        v18 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v19 = v18 | (v13 << 6);
      }
      else
      {
        v20 = v13 + 1;
        if (__OFADD__(v13, 1))
          goto LABEL_48;
        if (v20 >= v50)
        {
LABEL_33:
          swift_release();
          goto LABEL_34;
        }
        v21 = *(_QWORD *)(v49 + 8 * v20);
        ++v13;
        if (!v21)
        {
          v13 = v20 + 1;
          if (v20 + 1 >= v50)
            goto LABEL_33;
          v21 = *(_QWORD *)(v49 + 8 * v13);
          if (!v21)
          {
            v13 = v20 + 2;
            if (v20 + 2 >= v50)
              goto LABEL_33;
            v21 = *(_QWORD *)(v49 + 8 * v13);
            if (!v21)
            {
              v22 = v20 + 3;
              if (v22 >= v50)
                goto LABEL_33;
              v21 = *(_QWORD *)(v49 + 8 * v22);
              if (!v21)
              {
                while (1)
                {
                  v13 = v22 + 1;
                  if (__OFADD__(v22, 1))
                    goto LABEL_49;
                  if (v13 >= v50)
                    goto LABEL_33;
                  v21 = *(_QWORD *)(v49 + 8 * v13);
                  ++v22;
                  if (v21)
                    goto LABEL_21;
                }
              }
              v13 = v22;
            }
          }
        }
LABEL_21:
        v17 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v13 << 6);
      }
      v23 = v7;
      v24 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v19);
      v25 = *v24;
      v26 = v24[1];
      v27 = qword_1ED1B5B68;
      swift_bridgeObjectRetain();
      if (v27 != -1)
        swift_once();
      v28 = qword_1ED1B5B60;
      if (*(_QWORD *)(qword_1ED1B5B60 + 16))
      {
        v29 = sub_1A39A2734(v25, v26);
        v30 = MEMORY[0x1E0DEE9D8];
        if ((v31 & 1) != 0)
        {
          v30 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v29);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        v30 = MEMORY[0x1E0DEE9D8];
      }
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)(v30 + 16);
      if (v32)
      {
        v33 = (uint64_t *)(v30 + 40);
        do
        {
          v34 = *(v33 - 1);
          v35 = *v33;
          swift_bridgeObjectRetain();
          sub_1A39BC8AC(&v54, v34, v35);
          swift_bridgeObjectRelease();
          v33 += 2;
          --v32;
        }
        while (v32);
      }
      swift_bridgeObjectRelease();
      v3 = v53;
      v7 = v23;
    }
  }
  swift_bridgeObjectRelease();
LABEL_34:
  v36 = v55;
  v37 = *(_QWORD *)(v55 + 16);
  if (v37)
  {
    v54 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1A39BE06C(0, v37, 0);
    v38 = v54;
    v39 = sub_1A39AE5A4(v36);
    v41 = v40;
    v43 = v42 & 1;
    while ((v39 & 0x8000000000000000) == 0 && v39 < 1 << *(_BYTE *)(v36 + 32))
    {
      if (((*(_QWORD *)(v36 + 56 + (((unint64_t)v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
        goto LABEL_46;
      if (*(_DWORD *)(v36 + 36) != v41)
        goto LABEL_47;
      swift_bridgeObjectRetain();
      sub_1A3AB4448();
      v54 = v38;
      v45 = *(_QWORD *)(v38 + 16);
      v44 = *(_QWORD *)(v38 + 24);
      if (v45 >= v44 >> 1)
      {
        sub_1A39BE06C(v44 > 1, v45 + 1, 1);
        v38 = v54;
      }
      *(_QWORD *)(v38 + 16) = v45 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v51 + 32))(v38+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v45, v3, v52);
      v46 = sub_1A39AE644(v39, v41, v43 & 1, v36);
      v39 = v46;
      v41 = v47;
      v43 = v48 & 1;
      if (!--v37)
      {
        sub_1A39AE728(v46, v47, v48 & 1);
        swift_bridgeObjectRelease_n();
        return;
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1A39BC5D8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v2 = *a1;
  v1 = a1[1];
  if (qword_1EE6D4E00 != -1)
    swift_once();
  v3 = qword_1EE6D4DF8;
  if (!*(_QWORD *)(qword_1EE6D4DF8 + 16))
    goto LABEL_12;
  swift_bridgeObjectRetain();
  v4 = sub_1A39A2734(v2, v1);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    sub_1A3AB43F4();
    goto LABEL_13;
  }
  v6 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v4);
  v8 = *v6;
  v7 = v6[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = sub_1A3AB43F4();
  if (!v7)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v8 == v9 && v7 == v10)
  {
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    v12 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v12 & 1;
  }
}

unint64_t sub_1A39BC700(uint64_t a1)
{
  uint64_t v2;

  sub_1A3AB4424();
  sub_1A39B9F44(&qword_1EE6D2348, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
  v2 = sub_1A3AB48C8();
  return sub_1A39BC76C(a1, v2);
}

unint64_t sub_1A39BC76C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_1A3AB4424();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
      v14 = sub_1A3AB494C();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_1A39BC8AC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_1A3AB56FC();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  v8 = sub_1A3AB5738();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1A3AB5654() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1A3AB5654() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1A39BD2FC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1A39BCA58(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_1A3AB4424();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_1A39B9F44(&qword_1EE6D2348, v11, MEMORY[0x1E0CB0B00]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = sub_1A3AB48C8();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
      v21 = sub_1A3AB494C();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    sub_1A39BD494((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_1A39BCCB4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  sub_1A39A4820((uint64_t *)&unk_1ED1B5430);
  v3 = sub_1A3AB527C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_1A3AB56FC();
      sub_1A3AB4A30();
      result = sub_1A3AB5738();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1A39BCF90()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = sub_1A3AB4424();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_1A39A4820(&qword_1EE6D2BD0);
  v6 = sub_1A3AB527C();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v5 + 48);
      v23 = *(_QWORD *)(v36 + 72);
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v22 + v23 * v17, v2);
      sub_1A39B9F44(&qword_1EE6D2348, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
      result = sub_1A3AB48C8();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v23, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t sub_1A39BD2FC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1A39BCCB4();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1A39BD698();
      goto LABEL_22;
    }
    sub_1A39BDA6C();
  }
  v11 = *v4;
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  result = sub_1A3AB5738();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_1A3AB5654(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_1A3AB566C();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_1A3AB5654();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_1A39BD494(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = sub_1A3AB4424();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_1A39BCF90();
  }
  else
  {
    if (v11 > v10)
    {
      sub_1A39BD848();
      goto LABEL_12;
    }
    sub_1A39BDD18();
  }
  v12 = *v3;
  sub_1A39B9F44(&qword_1EE6D2348, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
  v13 = sub_1A3AB48C8();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
      v18 = sub_1A3AB494C();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1A3AB566C();
  __break(1u);
  return result;
}

void *sub_1A39BD698()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_1A39A4820((uint64_t *)&unk_1ED1B5430);
  v2 = *v0;
  v3 = sub_1A3AB5270();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1A39BD848()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = sub_1A3AB4424();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A4820(&qword_1EE6D2BD0);
  v6 = *v0;
  v7 = sub_1A3AB5270();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1A39BDA6C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_1A39A4820((uint64_t *)&unk_1ED1B5430);
  v3 = sub_1A3AB527C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_1A3AB56FC();
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    result = sub_1A3AB5738();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1A39BDD18()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = sub_1A3AB4424();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  sub_1A39A4820(&qword_1EE6D2BD0);
  v7 = sub_1A3AB527C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    sub_1A39B9F44(&qword_1EE6D2348, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
    result = sub_1A3AB48C8();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

size_t sub_1A39BE040(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_1A39BE098(a1, a2, a3, (_QWORD *)*v3, &qword_1EE6D2BD8, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0AE8]);
  *v3 = result;
  return result;
}

size_t sub_1A39BE06C(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_1A39BE098(a1, a2, a3, (_QWORD *)*v3, &qword_1ED1B5458, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0E38]);
  *v3 = result;
  return result;
}

size_t sub_1A39BE098(size_t result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A39A4820(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_29;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  v18 = *(_QWORD *)(a6(0) - 8);
  if ((v8 & 1) != 0)
  {
    if (v16 < a4
      || (v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(_QWORD *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v16;
}

size_t sub_1A39BE20C(size_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = sub_1A39BE3F4(result, v11, 1, v3);
  v3 = (_QWORD *)result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = (v3[3] >> 1) - v3[2];
  result = type metadata accessor for TTSMacroLanguageDisambiguationMapping();
  if (v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v8 = v3[2];
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    v3[2] = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1A39BE30C(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)sub_1A39AB4D8((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

size_t sub_1A39BE3F4(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A39A4820(&qword_1EE6D2BB0);
  v10 = *(_QWORD *)(type metadata accessor for TTSMacroLanguageDisambiguationMapping() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(type metadata accessor for TTSMacroLanguageDisambiguationMapping() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

uint64_t sub_1A39BE568(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t isStackAllocationSafe;
  char v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = a2;
  v28 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  v26 = a1;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a2 + 56;
    v25[0] = a1 + 32;
    swift_bridgeObjectRetain();
    v5 = 0;
    while (1)
    {
      v6 = (uint64_t *)(v25[0] + 16 * v5);
      v8 = *v6;
      v7 = v6[1];
      ++v5;
      sub_1A3AB56FC();
      swift_bridgeObjectRetain();
      sub_1A3AB4A30();
      v9 = sub_1A3AB5738();
      v10 = -1 << *(_BYTE *)(v2 + 32);
      v11 = v9 & ~v10;
      if (((*(_QWORD *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
      {
        v12 = *(_QWORD *)(v2 + 48);
        v13 = (_QWORD *)(v12 + 16 * v11);
        v14 = *v13 == v8 && v13[1] == v7;
        if (v14 || (sub_1A3AB5654() & 1) != 0)
        {
          isStackAllocationSafe = swift_bridgeObjectRelease();
          v27 = v5;
LABEL_19:
          v19 = *(_BYTE *)(v2 + 32);
          v20 = (unint64_t)((1 << v19) + 63) >> 6;
          v21 = 8 * v20;
          if ((v19 & 0x3Fu) < 0xE
            || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
          {
            MEMORY[0x1E0C80A78](isStackAllocationSafe);
            memcpy((char *)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v21);
            v22 = sub_1A39BE874((uint64_t)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            v23 = (void *)swift_slowAlloc();
            memcpy(v23, (const void *)(v2 + 56), v21);
            v22 = sub_1A39BE874((uint64_t)v23, v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
            MEMORY[0x1A859781C](v23, -1, -1);
          }
          return v22;
        }
        v15 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v15;
          if (((*(_QWORD *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
            break;
          v16 = (_QWORD *)(v12 + 16 * v11);
          v17 = *v16 == v8 && v16[1] == v7;
          if (v17 || (sub_1A3AB5654() & 1) != 0)
          {
            v27 = v5;
            isStackAllocationSafe = swift_bridgeObjectRelease();
            goto LABEL_19;
          }
        }
      }
      swift_bridgeObjectRelease();
      if (v5 == v3)
      {
        swift_bridgeObjectRelease();
        return v2;
      }
    }
  }
  return v2;
}

uint64_t sub_1A39BE874(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  unint64_t v26;
  _QWORD *v27;
  BOOL v28;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v30 = (unint64_t *)result;
  v31 = v6 - 1;
  v8 = *a5;
  v7 = a5[1];
  v9 = *(_QWORD *)(*a5 + 16);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain();
    return sub_1A39BEA9C(v30, a2, v31, a3);
  }
  v32 = a3 + 56;
  while ((v7 & 0x8000000000000000) == 0)
  {
    if (v7 >= v9)
      goto LABEL_29;
    v11 = v8 + 16 * v7;
    v13 = *(_QWORD *)(v11 + 32);
    v12 = *(_QWORD *)(v11 + 40);
    a5[1] = v7 + 1;
    sub_1A3AB56FC();
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    v14 = sub_1A3AB5738();
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    v18 = 1 << v16;
    if (((1 << v16) & *(_QWORD *)(v32 + 8 * (v16 >> 6))) == 0)
      goto LABEL_4;
    v19 = *(_QWORD *)(a3 + 48);
    v20 = (_QWORD *)(v19 + 16 * v16);
    v21 = *v20 == v13 && v20[1] == v12;
    if (!v21 && (sub_1A3AB5654() & 1) == 0)
    {
      v24 = ~v15;
      for (i = v16 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v32 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v19 + 16 * v26);
        v28 = *v27 == v13 && v27[1] == v12;
        if (v28 || (sub_1A3AB5654() & 1) != 0)
        {
          result = swift_bridgeObjectRelease();
          v17 = v26 >> 6;
          v18 = 1 << v26;
          goto LABEL_15;
        }
      }
LABEL_4:
      result = swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    result = swift_bridgeObjectRelease();
LABEL_15:
    v22 = v30[v17];
    v30[v17] = v22 & ~v18;
    if ((v18 & v22) != 0)
    {
      v23 = v31 - 1;
      if (__OFSUB__(v31, 1))
        goto LABEL_30;
      --v31;
      if (!v23)
        return MEMORY[0x1E0DEE9E8];
    }
LABEL_5:
    v8 = *a5;
    v7 = a5[1];
    v9 = *(_QWORD *)(*a5 + 16);
    if (v7 == v9)
      goto LABEL_2;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A39BEA9C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x1E0DEE9E8];
LABEL_36:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_1A39A4820((uint64_t *)&unk_1ED1B5430);
  result = sub_1A3AB5288();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    sub_1A3AB56FC();
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    result = sub_1A3AB5738();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1A39BED30(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = sub_1A3AB4424();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v18 - v8;
  v10 = sub_1A39A4820(&qword_1ED1B52F0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  sub_1A39B9F44(&qword_1EE6D2348, v3, MEMORY[0x1E0CB0B00]);
  v19 = sub_1A3AB4ED4();
  if (v13)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v18 = *(_QWORD *)(v4 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    while (1)
    {
      v15(v12, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v16(v12, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v12, v2);
      sub_1A39BCA58((uint64_t)v9, v7);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v2);
      v14 += v18;
      if (!--v13)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_7:
    v16(v12, 1, 1, v2);
  }
  return v19;
}

uint64_t type metadata accessor for TTSMacroLanguageDisambiguationMapping()
{
  uint64_t result;

  result = qword_1EE6D4E08;
  if (!qword_1EE6D4E08)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A39BEF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTSMacroLanguageDisambiguationMapping();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A39BEF80(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TTSMacroLanguageDisambiguationMapping();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A39BEFBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1A3AB4ED4();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1A39BC8AC(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TTSMacroLanguageDisambiguationMapping(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = sub_1A3AB4424();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_retain();
    }
    else
    {
      v10 = sub_1A3AB4490();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = *(int *)(sub_1A39A4820(&qword_1EE6D2BA0) + 48);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = sub_1A3AB4424();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for TTSMacroLanguageDisambiguationMapping(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
LABEL_5:
    v4 = sub_1A3AB4424();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    v3 = sub_1A3AB4490();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    a1 += *(int *)(sub_1A39A4820(&qword_1EE6D2BA0) + 48);
    goto LABEL_5;
  }
  return swift_release();
}

_QWORD *initializeWithCopy for TTSMacroLanguageDisambiguationMapping(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v6 = sub_1A3AB4424();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_retain();
  }
  else
  {
    v7 = sub_1A3AB4490();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(sub_1A39A4820(&qword_1EE6D2BA0) + 48);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1A3AB4424();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for TTSMacroLanguageDisambiguationMapping(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_1A39BEF80((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v6 = sub_1A3AB4424();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      swift_retain();
    }
    else
    {
      v7 = sub_1A3AB4490();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = *(int *)(sub_1A39A4820(&qword_1EE6D2BA0) + 48);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = sub_1A3AB4424();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for TTSMacroLanguageDisambiguationMapping(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v12 = sub_1A3AB4424();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = sub_1A3AB4490();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = *(int *)(sub_1A39A4820(&qword_1EE6D2BA0) + 48);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = sub_1A3AB4424();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for TTSMacroLanguageDisambiguationMapping(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_1A39BEF80((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v12 = sub_1A3AB4424();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = sub_1A3AB4490();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = *(int *)(sub_1A39A4820(&qword_1EE6D2BA0) + 48);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = sub_1A3AB4424();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1A39BF62C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v0 = sub_1A3AB4490();
  if (v1 <= 0x3F)
  {
    v2 = sub_1A3AB4424();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      v4 = *(_QWORD *)(v2 - 8) + 64;
      swift_getTupleTypeLayout2();
      v7 = &v6;
      v8 = MEMORY[0x1E0DEE9D0] + 64;
      v9 = v4;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v0;
}

uint64_t TTSMarkup.Language.init(_:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;
  uint64_t v27;
  _QWORD v28[7];

  v27 = MEMORY[0x1E0DEE9D8];
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8))();
  if (!*(_QWORD *)(v5 + 16) || (v6 = sub_1A39A2734(0x676E616C3A6C6D78, 0xE800000000000000), (v7 & 1) == 0))
  {

    result = swift_bridgeObjectRelease();
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
    return result;
  }
  v8 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v6);
  v10 = *v8;
  v9 = v8[1];
  swift_bridgeObjectRetain();
  v11 = swift_bridgeObjectRelease();
  v28[5] = v10;
  v28[6] = v9;
  v12 = (*(uint64_t (**)(uint64_t))((*v4 & *a1) + 0x100))(v11);
  v13 = v12;
  if (!(v12 >> 62))
  {
    v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_5;
LABEL_20:
    v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_21:
    swift_bridgeObjectRelease_n();
    v25 = sub_1A39A4820(&qword_1EE6D2BE0);
    v26 = &protocol witness table for <A> [A];

    *(_QWORD *)&v24 = v17;
    sub_1A39A1AB8(&v24, (uint64_t)v28);
    sub_1A39B7A74((uint64_t)&v27, (uint64_t)a2);
    return sub_1A39BFBB4((uint64_t)&v27);
  }
  swift_bridgeObjectRetain();
  result = sub_1A3AB5480();
  v14 = result;
  if (!result)
    goto LABEL_20;
LABEL_5:
  if (v14 >= 1)
  {
    v16 = 0;
    v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v13 & 0xC000000000000001) != 0)
        v18 = (id)MEMORY[0x1A85960B8](v16, v13);
      else
        v18 = *(id *)(v13 + 8 * v16 + 32);
      v19 = v18;
      sub_1A39D518C((uint64_t)&v22);

      if (v23)
      {
        sub_1A39A1AB8(&v22, (uint64_t)&v24);
        sub_1A39A1AB8(&v24, (uint64_t)&v22);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = sub_1A39BFBD8(0, v17[2] + 1, 1, v17);
        v21 = v17[2];
        v20 = v17[3];
        if (v21 >= v20 >> 1)
          v17 = sub_1A39BFBD8((_QWORD *)(v20 > 1), v21 + 1, 1, v17);
        v17[2] = v21 + 1;
        sub_1A39A1AB8(&v22, (uint64_t)&v17[5 * v21 + 4]);
      }
      else
      {
        sub_1A39BFB74((uint64_t)&v22);
      }
      ++v16;
    }
    while (v14 != v16);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

void static TTSMarkup.Language.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t TTSMarkup.Language.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Language.eventTaps.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.Language.eventTaps.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Language._content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.Language._content.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 8;
  sub_1A39A47C4(v3);
  return sub_1A39A1AB8(a1, v3);
}

uint64_t (*TTSMarkup.Language._content.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Language.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.Language.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(a3 + 88))(v3);
}

uint64_t TTSMarkup.Language.init(languageCode:speech:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, _QWORD *a4@<X8>)
{
  a4[6] = a1;
  *a4 = MEMORY[0x1E0DEE9D8];
  a4[7] = a2;
  return a3();
}

unint64_t TTSMarkup.Language.attributes.getter()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;

  sub_1A39A4820(&qword_1EE6D2368);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(inited + 32) = 0x676E616C3A6C6D78;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v2 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(inited + 48) = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(inited + 56) = v2;
  swift_bridgeObjectRetain();
  return sub_1A39A5780(inited);
}

void sub_1A39BFAE4(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

unint64_t sub_1A39BFAF0()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;

  sub_1A39A4820(&qword_1EE6D2368);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(inited + 32) = 0x676E616C3A6C6D78;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v2 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(inited + 48) = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(inited + 56) = v2;
  swift_bridgeObjectRetain();
  return sub_1A39A5780(inited);
}

uint64_t sub_1A39BFB60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t sub_1A39BFB74(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A39A4820(&qword_1EE6D2B60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A39BFBB4(uint64_t a1)
{
  _s8LanguageVwxx(a1);
  return a1;
}

_QWORD *sub_1A39BFBD8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D2BE8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_1A39A4820(&qword_1EE6D2B78);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t _s8LanguageVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1A39A47C4(a1 + 8);
  return swift_bridgeObjectRelease();
}

uint64_t _s8LanguageVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a2 + 8;
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 8, v4, v6);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s8LanguageVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1A39B8070(a1 + 1, a2 + 1);
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 _s8LanguageVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s8LanguageVwta(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  sub_1A39A47C4(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s8LanguageVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s8LanguageVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Language()
{
  return &type metadata for TTSMarkup.Language;
}

uint64_t VocalizerProsody.rate.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t VocalizerProsody.rate.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*VocalizerProsody.rate.modify())()
{
  return nullsub_19;
}

uint64_t VocalizerProsody.pitch.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t VocalizerProsody.pitch.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*VocalizerProsody.pitch.modify())()
{
  return nullsub_19;
}

uint64_t VocalizerProsody.volume.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t VocalizerProsody.volume.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*VocalizerProsody.volume.modify())()
{
  return nullsub_19;
}

uint64_t VocalizerMarkupWriter.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VocalizerMarkupWriter.language.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*VocalizerMarkupWriter.language.modify())()
{
  return nullsub_19;
}

uint64_t VocalizerMarkupWriter.phonemeMappings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VocalizerMarkupWriter.phonemeMappings.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*VocalizerMarkupWriter.phonemeMappings.modify())()
{
  return nullsub_19;
}

__n128 VocalizerMarkupWriter.defaultProsody.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1[3].n128_u64[0];
  result = v1[2];
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  return result;
}

__n128 VocalizerMarkupWriter.defaultProsody.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = a1[1].n128_u64[0];
  result = *a1;
  v1[2] = *a1;
  v1[3].n128_u64[0] = v2;
  return result;
}

uint64_t (*VocalizerMarkupWriter.defaultProsody.modify())()
{
  return nullsub_19;
}

__n128 sub_1A39C008C@<Q0>(uint64_t a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  uint64_t v3;
  __n128 result;
  unint64_t v5;

  v2 = v1[4].n128_u64[0];
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(_QWORD *)(v2 + 48);
    *(_OWORD *)a1 = *(_OWORD *)(v2 + 32);
    *(_QWORD *)(a1 + 16) = v3;
    sub_1A39C1768(0, 1);
  }
  else
  {
    v5 = v1[3].n128_u64[0];
    result = v1[2];
    *(__n128 *)a1 = result;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return result;
}

float VocalizerMarkupWriter.standardVoiceMidiPitch.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 72);
}

void VocalizerMarkupWriter.standardVoiceMidiPitch.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 72) = a1;
}

uint64_t (*VocalizerMarkupWriter.standardVoiceMidiPitch.modify())()
{
  return nullsub_19;
}

int64x2_t VocalizerMarkupWriter.init(stream:)@<Q0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  uint64_t v4;
  int64x2_t result;

  a2->i64[1] = 0x53552D6E65;
  a2[1].i64[0] = 0xE500000000000000;
  v4 = MEMORY[0x1E0DEE9D8];
  a2[1].i64[1] = sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
  result = vdupq_n_s64(0x64uLL);
  a2[2] = result;
  a2[3].i64[0] = 80;
  a2[3].i8[8] = 0;
  a2[4].i64[0] = v4;
  a2[4].i32[2] = 1110441984;
  a2->i64[0] = a1;
  return result;
}

uint64_t VocalizerMarkupWriter.visit(_:)(uint64_t a1, uint64_t a2)
{
  return TTSMarkupVisitor.visit(_:)((_QWORD *)(a1 + 8), a2, (uint64_t)&protocol witness table for VocalizerMarkupWriter<A>);
}

void VocalizerMarkupWriter.visit(_:)()
{
  uint64_t *v0;
  double v1;
  uint64_t v2;

  v1 = sub_1A3A82C8C() * 1000.0;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 9.22337204e18)
  {
    v2 = *v0;
    sub_1A3AB5624();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v2 + 208))(0x65737561705C1B20, 0xE90000000000003DLL);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t VocalizerMarkupWriter.visit(_:)()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v1 + 208))(0x3D6B726D5C1B20, 0xE700000000000000);
  return swift_bridgeObjectRelease();
}

uint64_t VocalizerMarkupWriter.visit(_:)(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v4 = v1[56];
  swift_bridgeObjectRetain();
  if ((v4 & 1) == 0)
  {
    v5 = (void *)sub_1A3AB4958();
    v6 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    v7 = (void *)sub_1A3AB4958();
    v8 = objc_msgSend(v6, sel_regexForString_, v7);

    if (v8)
    {
      v9 = objc_msgSend(v8, sel_firstMatchInString_options_range_, v5, 0, 0, objc_msgSend(v5, sel_length));
      if (v9)
      {
        v10 = v9;
        v11 = (void *)sub_1A3AB4958();
        v12 = objc_msgSend(v10, sel_rangeWithName_, v11);
        v14 = v13;

        if (v12 == (id)sub_1A3AB4208())
        {

        }
        else
        {
          swift_bridgeObjectRelease();
          v15 = (void *)sub_1A3AB4958();
          v16 = objc_msgSend(v5, sel_stringByReplacingCharactersInRange_withString_, v12, v14, v15);

          v3 = sub_1A3AB497C();
          v2 = v17;

        }
      }

    }
  }
  v1[56] = 1;
  (*(void (**)(uint64_t, uint64_t))(**(_QWORD **)v1 + 208))(v3, v2);
  return swift_bridgeObjectRelease();
}

id VocalizerMarkupWriter.visit(_:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  char v6;
  char v7;
  char v8;
  id result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE v17[56];
  char v18[8];
  char v19;

  v3 = v2;
  if (*(_BYTE *)(a1 + 8) == 14)
  {
    sub_1A39C1878(a1, (uint64_t)v18);
  }
  else
  {
    v18[0] = *(_BYTE *)(a1 + 8);
    v17[0] = 0;
    sub_1A39C192C();
    v6 = sub_1A3AB494C();
    sub_1A39C1878(a1, (uint64_t)v18);
    if ((v6 & 1) != 0)
    {
      sub_1A39C18B4((uint64_t)v18);
      sub_1A39C1878(a1, (uint64_t)v17);
      goto LABEL_8;
    }
  }
  if (v19 == 14)
  {
    sub_1A39C18B4((uint64_t)v18);
    sub_1A39C1878(a1, (uint64_t)v17);
    goto LABEL_9;
  }
  v17[0] = v19;
  sub_1A39C192C();
  v7 = sub_1A3AB494C();
  sub_1A39C18B4((uint64_t)v18);
  sub_1A39C1878(a1, (uint64_t)v17);
  if ((v7 & 1) != 0)
  {
LABEL_8:
    sub_1A39C18B4((uint64_t)v17);
    goto LABEL_12;
  }
LABEL_9:
  if (v17[8] == 14)
  {
    sub_1A39C18B4((uint64_t)v17);
    goto LABEL_13;
  }
  sub_1A39C192C();
  v8 = sub_1A3AB494C();
  sub_1A39C18B4((uint64_t)v17);
  if ((v8 & 1) != 0)
  {
LABEL_12:
    v3[56] = 1;
    (*(void (**)(uint64_t, unint64_t))(**(_QWORD **)v3 + 208))(0x6570733D6E745C1BLL, 0xEB000000005C6C6CLL);
    TTSMarkupVisitor.visit(_:)((_QWORD *)(a1 + 16), a2, (uint64_t)&protocol witness table for VocalizerMarkupWriter<A>);
    return (id)(*(uint64_t (**)(uint64_t, unint64_t))(**(_QWORD **)v3 + 208))(0x726F6E3D6E745C1BLL, 0xEC0000005C6C616DLL);
  }
LABEL_13:
  result = (id)AXTTSLogCommon();
  if (result)
  {
    v10 = result;
    sub_1A3AB4FD0();
    sub_1A39A4820(&qword_1EE6D23F8);
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1A3ABF990;
    if (*(_BYTE *)(a1 + 8) == 14)
    {
      v12 = 0;
      v13 = 0;
    }
    else
    {
      v12 = TTSMarkup.SayAs.Interpretation.rawValue.getter();
      v13 = v14;
    }
    *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v11 + 64) = sub_1A39C18E8();
    v15 = 0x3E6C696E3CLL;
    if (v13)
      v15 = v12;
    v16 = 0xE500000000000000;
    if (v13)
      v16 = v13;
    *(_QWORD *)(v11 + 32) = v15;
    *(_QWORD *)(v11 + 40) = v16;
    sub_1A3AB46F4();

    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void VocalizerMarkupWriter.visit(_:)(uint64_t a1, uint64_t a2)
{
  float *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  int v54;

  v5 = *(unsigned int *)(a1 + 56) | ((unint64_t)*(unsigned __int8 *)(a1 + 60) << 32);
  if (*(unsigned __int8 *)(a1 + 60) >> 2 > 0x3EuLL)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v47) = *(_DWORD *)(a1 + 56);
    BYTE4(v47) = BYTE4(v5);
    sub_1A39C0B78(v2[18]);
    v7 = v6;
  }
  v8 = *(unsigned int *)(a1 + 48) | ((unint64_t)*(unsigned __int8 *)(a1 + 52) << 32);
  if (*(unsigned __int8 *)(a1 + 52) == 255)
  {
    v9 = 0;
  }
  else
  {
    LODWORD(v47) = *(_DWORD *)(a1 + 48);
    BYTE4(v47) = BYTE4(v8) & 1;
    v9 = sub_1A39C0D30();
  }
  v10 = *(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
  if (*(unsigned __int8 *)(a1 + 68) != 255)
  {
    sub_1A39C9214();
    LODWORD(v47) = v10;
    BYTE4(v47) = BYTE4(v10) & 1;
    v11 = sub_1A39C9214() * 80.0;
    if ((~LODWORD(v11) & 0x7F800000) != 0)
    {
      if (v11 > -9.2234e18)
      {
        if (v11 < 9.2234e18)
        {
          v12 = (uint64_t)v11;
          goto LABEL_13;
        }
LABEL_43:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_43;
  }
  v12 = 0;
LABEL_13:
  v13 = v5 >> 34;
  v14 = HIDWORD(v10);
  if (HIDWORD(v8) < 0xFF)
    goto LABEL_19;
  if (v13 >= 0x3F && v14 >= 0xFF)
  {
    TTSMarkupVisitor.visit(_:)((_QWORD *)(a1 + 8), a2, (uint64_t)&protocol witness table for VocalizerMarkupWriter<A>);
    return;
  }
  v15 = *((_QWORD *)v2 + 8);
  if (*(_QWORD *)(v15 + 16))
  {
    v9 = *(_QWORD *)(v15 + 32);
LABEL_19:
    if (v13 < 0x3F)
      goto LABEL_24;
    goto LABEL_20;
  }
  v9 = *((_QWORD *)v2 + 4);
  if (v13 < 0x3F)
    goto LABEL_24;
LABEL_20:
  v16 = *((_QWORD *)v2 + 8);
  if (*(_QWORD *)(v16 + 16))
    v7 = *(_QWORD *)(v16 + 40);
  else
    v7 = *((_QWORD *)v2 + 5);
LABEL_24:
  v17 = (_QWORD *)*((_QWORD *)v2 + 8);
  v18 = *((_QWORD *)v2 + 6);
  v19 = v17[2];
  v21 = v14 > 0xFE || v19 == 0;
  if (v14 >= 0xFF)
    v22 = *((_QWORD *)v2 + 6);
  else
    v22 = v12;
  if (v14 >= 0xFF && v19)
  {
    v21 = 0;
    v22 = v17[6];
  }
  v23 = *((_QWORD *)v2 + 1);
  v24 = *((_OWORD *)v2 + 1);
  v26 = *((_QWORD *)v2 + 4);
  v25 = *((_QWORD *)v2 + 5);
  v27 = *((_BYTE *)v2 + 56);
  v28 = *((_DWORD *)v2 + 18);
  v29 = v25;
  v30 = *((_QWORD *)v2 + 6);
  v31 = v26;
  if (!v21)
  {
    v29 = v17[5];
    v30 = v17[6];
    v31 = v17[4];
  }
  v39 = v30;
  v47 = *(_QWORD *)v2;
  v48 = v23;
  v49 = v24;
  *(_QWORD *)&v50 = v26;
  *((_QWORD *)&v50 + 1) = v25;
  v51 = v18;
  v52 = v27;
  v53 = v17;
  v54 = v28;
  v44 = v9;
  v45 = v7;
  v46 = v22;
  if (!v21)
  {
    v25 = v17[5];
    v18 = v17[6];
    v26 = v17[4];
  }
  *(_QWORD *)&v42 = v26;
  *((_QWORD *)&v42 + 1) = v25;
  v43 = v18;
  sub_1A39C0E70(&v44, (uint64_t *)&v42);
  sub_1A39C1264(0, 0, v9, v7, v22);
  TTSMarkupVisitor.visit(_:)((_QWORD *)(a1 + 8), a2, (uint64_t)&protocol witness table for VocalizerMarkupWriter<A>);
  v32 = *((_QWORD *)v2 + 1);
  v33 = *((_QWORD *)v2 + 2);
  v34 = *((_QWORD *)v2 + 3);
  v35 = *((_QWORD *)v2 + 6);
  v36 = *((_BYTE *)v2 + 56);
  v37 = (_QWORD *)*((_QWORD *)v2 + 8);
  v38 = *((_DWORD *)v2 + 18);
  v47 = *(_QWORD *)v2;
  v48 = v32;
  *(_QWORD *)&v49 = v33;
  *((_QWORD *)&v49 + 1) = v34;
  v50 = *((_OWORD *)v2 + 2);
  v51 = v35;
  v52 = v36;
  v53 = v37;
  v54 = v38;
  v44 = v31;
  v45 = v29;
  v46 = v39;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1A39C008C((uint64_t)&v42);
  v40 = v42;
  v41 = v43;
  sub_1A39C0E70(&v44, (uint64_t *)&v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

void sub_1A39C0B78(float a1)
{
  unsigned int *v1;
  unsigned int v3;
  unint64_t v4;
  float v5;
  uint64_t v6;
  BOOL v7;
  float v8;
  float v9;

  v3 = *((unsigned __int8 *)v1 + 4);
  v4 = *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
  sub_1A39AABB0(a1);
  if (!(v3 >> 6))
    return;
  if (v3 >> 6 == 1)
  {
    sub_1A39AABE4(*(float *)&v4);
LABEL_8:
    sub_1A39C0B78(a1);
    return;
  }
  v5 = *(float *)&v4;
  v6 = HIDWORD(v4) & 0x3F;
  if (!(_DWORD)v6)
    goto LABEL_8;
  if ((_DWORD)v6 == 1)
  {
    sub_1A3A4934C(-12.0, 12.0, 0.0, 200.0, *(float *)&v4);
    goto LABEL_8;
  }
  v7 = *(float *)&v4 <= 0.0;
  if (*(float *)&v4 < 0.0)
  {
    v8 = sub_1A3A4934C(-100.0, 0.0, 50.0, 100.0, *(float *)&v4);
    if ((~LODWORD(v8) & 0x7F800000) != 0)
    {
      if (v8 > -9.2234e18)
      {
        v7 = v8 <= 9.2234e18;
        if (v8 < 9.2234e18)
          return;
        __break(1u);
        goto LABEL_14;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_14:
  if (!v7)
  {
    v9 = sub_1A3A4934C(0.0, 100.0, 100.0, 200.0, v5);
    if ((~LODWORD(v9) & 0x7F800000) != 0)
    {
      if (v9 > -9.2234e18)
      {
        if (v9 < 9.2234e18)
          return;
LABEL_24:
        __break(1u);
        return;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
}

uint64_t sub_1A39C0D30()
{
  uint64_t v0;
  float v1;
  float v2;
  BOOL v3;
  float v4;

  v1 = *(float *)v0;
  if ((*(_BYTE *)(v0 + 4) & 1) == 0)
    __asm { BR              X10 }
  v2 = *(float *)v0;
  v3 = v1 <= 1.0;
  if (v1 >= 1.0)
  {
LABEL_9:
    if (v3)
      return 100;
    v4 = sub_1A3A4934C(1.0, 4.0, 100.0, 400.0, v2);
    if ((~LODWORD(v4) & 0x7F800000) != 0)
    {
      if (v4 > -9.2234e18)
      {
        if (v4 < 9.2234e18)
          return (uint64_t)v4;
LABEL_20:
        __break(1u);
        JUMPOUT(0x1A39C0E5CLL);
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v4 = sub_1A3A4934C(0.0, 1.0, 50.0, 100.0, v1);
  if ((~LODWORD(v4) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v4 <= -9.2234e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v3 = v4 <= 9.2234e18;
  if (v4 >= 9.2234e18)
  {
    __break(1u);
    goto LABEL_9;
  }
  return (uint64_t)v4;
}

uint64_t *sub_1A39C0E70(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *result;
  v4 = result[2];
  v5 = *a2;
  v6 = a2[2];
  v7 = *v2;
  if (result[1] == a2[1])
  {
    if (v3 == v5)
      goto LABEL_3;
  }
  else
  {
    sub_1A3AB5624();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 208))(0x3D68637469705C1BLL, 0xE800000000000000);
    result = (uint64_t *)swift_bridgeObjectRelease();
    if (v3 == v5)
    {
LABEL_3:
      if (v4 == v6)
        return result;
      goto LABEL_4;
    }
  }
  sub_1A3AB5624();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 208))(0x3D657461725C1BLL, 0xE700000000000000);
  result = (uint64_t *)swift_bridgeObjectRelease();
  if (v4 == v6)
    return result;
LABEL_4:
  sub_1A3AB5624();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 208))(0x3D6C6F765C1BLL, 0xE600000000000000);
  return (uint64_t *)swift_bridgeObjectRelease();
}

void VocalizerMarkupWriter.visit(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_opt_self();
  v6 = (void *)sub_1A3AB4958();
  v7 = (void *)sub_1A3AB4958();
  v8 = objc_msgSend(v5, sel_lhPhonemesFromIPA_language_, v6, v7);

  if (v8)
  {
    v9 = sub_1A3AB497C();
    v11 = v10;

    v12 = v2 + 3;
    swift_bridgeObjectRetain();
    if (v4)
    {
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v15 = *v12;
      *v12 = 0x8000000000000000;
      sub_1A39A93EC(v3, v4, v9, v11, isUniquelyReferenced_nonNull_native);
      *v12 = v15;
    }
    else
    {
      sub_1A39C14B0(v9, v11);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *((_BYTE *)v2 + 56) = 1;
    v14 = *v2;
    sub_1A3AB52AC();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 208))(0x686C3D696F745C1BLL, 0xEA00000000005C70);
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_1A39C1264(unint64_t result, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t *v5;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v7 = *v5;
  v8 = *(_QWORD *)(*v5 + 16);
  if (v8 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v9 = result;
  v10 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = 1 - v10;
  if (__OFSUB__(1, v10))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v12 = v8 + v11;
  if (__OFADD__(v8, v11))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v12 > *(_QWORD *)(v7 + 24) >> 1)
  {
    if (v8 <= v12)
      v16 = v8 + v11;
    else
      v16 = v8;
    result = (unint64_t)sub_1A39C139C((char *)result, v16, 1, (char *)v7);
    v7 = result;
  }
  v17 = v7 + 32;
  v18 = (_QWORD *)(v7 + 32 + 24 * v9);
  if (!v11)
    goto LABEL_19;
  v19 = *(_QWORD *)(v7 + 16);
  v20 = __OFSUB__(v19, a2);
  v21 = v19 - a2;
  if (v20)
    goto LABEL_25;
  result = (unint64_t)(v18 + 3);
  v22 = (_QWORD *)(v17 + 24 * a2);
  if (v18 + 3 != v22 || result >= (unint64_t)&v22[3 * v21])
    result = (unint64_t)memmove((void *)result, v22, 24 * v21);
  v23 = *(_QWORD *)(v7 + 16);
  v20 = __OFADD__(v23, v11);
  v24 = v23 + v11;
  if (!v20)
  {
    *(_QWORD *)(v7 + 16) = v24;
LABEL_19:
    *v18 = a3;
    v25 = v17 + 24 * v9;
    *(_QWORD *)(v25 + 8) = a4;
    *(_QWORD *)(v25 + 16) = a5;
    *v5 = v7;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

char *sub_1A39C139C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D2BF8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1A39C14B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1A39A2734(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1A39A9560();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v6);
  sub_1A39C1594(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_1A39C1594(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1A3AB5234();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1A3AB56FC();
        swift_bridgeObjectRetain();
        sub_1A3AB4A30();
        v9 = sub_1A3AB5738();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1A39C1768(unint64_t result, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_1A39C139C((char *)result, v10, 1, (char *)v4);
    v4 = result;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 24 * v6;
  v14 = (const void *)(v4 + 32 + 24 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 24 * v13)
    result = (unint64_t)memmove((void *)result, v14, 24 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1A39C1878(uint64_t a1, uint64_t a2)
{
  _s5SayAsVwcp(a2, a1);
  return a2;
}

uint64_t sub_1A39C18B4(uint64_t a1)
{
  _s5SayAsVwxx(a1);
  return a1;
}

unint64_t sub_1A39C18E8()
{
  unint64_t result;

  result = qword_1EE6D23D0;
  if (!qword_1EE6D23D0)
  {
    result = MEMORY[0x1A8597738](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EE6D23D0);
  }
  return result;
}

unint64_t sub_1A39C192C()
{
  unint64_t result;

  result = qword_1EE6D2BF0;
  if (!qword_1EE6D2BF0)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSMarkup.SayAs.Interpretation, &type metadata for TTSMarkup.SayAs.Interpretation);
    atomic_store(result, (unint64_t *)&qword_1EE6D2BF0);
  }
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for VocalizerProsody(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for VocalizerProsody(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for VocalizerProsody(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for VocalizerProsody()
{
  return &type metadata for VocalizerProsody;
}

uint64_t sub_1A39C19E0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1A39C19E8()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39C1A20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1A39C1A9C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

__n128 sub_1A39C1B58(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1A39C1B7C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

uint64_t sub_1A39C1C00(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 76))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1A39C1C48(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 76) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 76) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for VocalizerMarkupWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VocalizerMarkupWriter);
}

uint64_t TTSMarkup.Sentence.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v7[5];

  v7[3] = &type metadata for TTSMarkup.Sentence;
  v7[4] = &protocol witness table for TTSMarkup.Sentence;
  v7[0] = swift_allocObject();
  sub_1A39C1D5C(v3, v7[0] + 16);
  TTSMarkupVisitor.visit(_:)(v7, a2, a3);
  return sub_1A39A47C4((uint64_t)v7);
}

uint64_t sub_1A39C1D30()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 24);
  return swift_deallocObject();
}

uint64_t sub_1A39C1D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v3 = a2 + 8;
  v4 = a1 + 8;
  v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(v3, v4, v6);
  return a2;
}

uint64_t TTSMarkup.Sentence.init(_:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;
  _OWORD v20[3];

  *(_QWORD *)&v20[0] = MEMORY[0x1E0DEE9D8];
  v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x100))();
  v5 = v4;
  if (!(v4 >> 62))
  {
    v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_3;
LABEL_17:
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_18:
    swift_bridgeObjectRelease_n();
    v18 = sub_1A39A4820(&qword_1EE6D2BE0);
    v19 = &protocol witness table for <A> [A];

    *(_QWORD *)&v17 = v9;
    result = sub_1A39A1AB8(&v17, (uint64_t)v20 + 8);
    v14 = v20[1];
    *a2 = v20[0];
    a2[1] = v14;
    a2[2] = v20[2];
    return result;
  }
  swift_bridgeObjectRetain();
  result = sub_1A3AB5480();
  v6 = result;
  if (!result)
    goto LABEL_17;
LABEL_3:
  if (v6 >= 1)
  {
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v10 = (id)MEMORY[0x1A85960B8](v8, v5);
      else
        v10 = *(id *)(v5 + 8 * v8 + 32);
      v11 = v10;
      sub_1A39D518C((uint64_t)&v15);

      if (v16)
      {
        sub_1A39A1AB8(&v15, (uint64_t)&v17);
        sub_1A39A1AB8(&v17, (uint64_t)&v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_1A39BFBD8(0, v9[2] + 1, 1, v9);
        v13 = v9[2];
        v12 = v9[3];
        if (v13 >= v12 >> 1)
          v9 = sub_1A39BFBD8((_QWORD *)(v12 > 1), v13 + 1, 1, v9);
        v9[2] = v13 + 1;
        sub_1A39A1AB8(&v15, (uint64_t)&v9[5 * v13 + 4]);
      }
      else
      {
        sub_1A39BFB74((uint64_t)&v15);
      }
      ++v8;
    }
    while (v6 != v8);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

void static TTSMarkup.Sentence.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t TTSMarkup.Sentence.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Sentence.eventTaps.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.Sentence.eventTaps.modify())()
{
  return nullsub_19;
}

unint64_t TTSMarkup.Sentence.attributes.getter()
{
  return sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
}

uint64_t TTSMarkup.Sentence._content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.Sentence._content.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 8;
  sub_1A39A47C4(v3);
  return sub_1A39A1AB8(a1, v3);
}

uint64_t (*TTSMarkup.Sentence._content.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Sentence.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.Sentence.init(speech:)@<X0>(uint64_t (*a1)(void)@<X0>, _QWORD *a2@<X8>)
{
  *a2 = MEMORY[0x1E0DEE9D8];
  return a1();
}

void sub_1A39C20AC(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

unint64_t sub_1A39C20B8()
{
  return sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
}

uint64_t _s8SentenceVwxx(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  swift_bridgeObjectRelease();
  return sub_1A39A47C4(v1);
}

uint64_t _s8SentenceVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = a2 + 8;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = v4;
  v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_bridgeObjectRetain();
  v6(a1 + 8, v3, v5);
  return a1;
}

_QWORD *_s8SentenceVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1A39B8070(a1 + 1, v3);
  return a1;
}

uint64_t _s8SentenceVwta(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  sub_1A39A47C4(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for TTSMarkup.Sentence()
{
  return &type metadata for TTSMarkup.Sentence;
}

uint64_t sub_1A39C2214()
{
  uint64_t v0;

  v0 = sub_1A39A4820(&qword_1EE6D2C00);
  sub_1A39AB688(v0, qword_1EE6E6D60);
  sub_1A39AAC98(v0, (uint64_t)qword_1EE6E6D60);
  return sub_1A3AB4694();
}

uint64_t sub_1A39C2284(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  id v29;

  v2 = type metadata accessor for PronunciationRuleSet();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1A3A30634();
  v29 = v6;
  v27 = MEMORY[0x1E0DEE9D8];
  v7 = objc_msgSend(a1, sel_primaryLanguage);
  v8 = sub_1A3AB497C();
  v10 = v9;

  v11 = (unint64_t)objc_msgSend(a1, sel_type);
  if (v11 <= 0xA && ((1 << v11) & 0x4D8) != 0)
  {
    v13 = objc_msgSend(a1, sel_type) == (id)3 ? 0x80000001A3AEFB30 : 0x80000001A3AEFB10;
    v14 = sub_1A3A31368(v8, v10, 0xD000000000000019, v13);
    swift_bridgeObjectRelease();
    if (v14)
      sub_1A39C2528(v14);
  }
  v15 = sub_1A3A31370(v8, v10);
  v16 = a1;
  v17 = sub_1A39C2DCC(v15, v16);
  swift_bridgeObjectRelease();

  v18 = v17[2];
  if (v18)
  {
    v19 = *(unsigned __int8 *)(v3 + 80);
    v26[1] = v17;
    v20 = (uint64_t)v17 + ((v19 + 32) & ~v19);
    v21 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_1A39C3D68(v20, (uint64_t)v5);
      v22 = v16;
      swift_bridgeObjectRetain();
      sub_1A39C3150((uint64_t)v5, v22, v8, v10);

      v23 = swift_bridgeObjectRelease();
      MEMORY[0x1A8595980](v23);
      if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1A3AB4BE0();
      sub_1A3AB4C10();
      sub_1A3AB4BC8();
      sub_1A39C3DAC((uint64_t)v5);
      v20 += v21;
      --v18;
    }
    while (v18);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = v27;
  swift_release();

  return v24;
}

uint64_t sub_1A39C2528(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x1A85960C4](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1A39C2C24(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_1A3AB4BC8();
  }
  __break(1u);
  return result;
}

uint64_t TTSPronunciationUtils.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t TTSPronunciationUtils.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1A39C26F8()
{
  return swift_allocObject();
}

void sub_1A39C2708()
{
  __asm { BR              X11 }
}

uint64_t sub_1A39C2754()
{
  char v0;

  sub_1A3AB49F4();
  sub_1A3AB49F4();
  v0 = sub_1A3AB4AFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

size_t sub_1A39C29A0(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_1A39C29BC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

size_t sub_1A39C29BC(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A39A4820(&qword_1EE6D2C48);
  v10 = *(_QWORD *)(type metadata accessor for PronunciationRuleSet() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(type metadata accessor for PronunciationRuleSet() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

void (*sub_1A39C2B30(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1A39C2BB0(v6, a2, a3);
  return sub_1A39C2B84;
}

void sub_1A39C2B84(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1A39C2BB0(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1A85960B8](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1A39C2C1C;
  }
  __break(1u);
  return result;
}

void sub_1A39C2C1C(id *a1)
{

}

uint64_t sub_1A39C2C24(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  void (*v10)(_QWORD *);
  id *v11;
  id v12;
  void (*v13[4])(id *);

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1A3AB5480();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = sub_1A3AB5480();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_1A39C3EF8(&qword_1EE6D2C18, &qword_1EE6D2C08, MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            sub_1A39A4820(&qword_1EE6D2C08);
            v10 = sub_1A39C2B30(v13, i, a3);
            v12 = *v11;
            ((void (*)(void (**)(id *), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1A39C3E1C();
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1A39C2DCC(uint64_t a1, id a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  _BYTE *v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD v34[2];
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v41 = type metadata accessor for PronunciationRuleSet();
  v5 = MEMORY[0x1E0C80A78](v41);
  v37 = (uint64_t)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v34 - v8;
  MEMORY[0x1E0C80A78](v7);
  v12 = (char *)v34 - v11;
  result = (id)MEMORY[0x1E0DEE9D8];
  v45 = MEMORY[0x1E0DEE9D8];
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v15 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v16 = *(_QWORD *)(v10 + 72);
    v39 = a2;
    v40 = v16;
    v34[1] = v2;
    v35 = v15;
    v17 = a1 + v15;
    v38 = "tion found for %@";
    v36 = 0x80000001A3AEFBB0;
    while (1)
    {
      sub_1A39C3D68(v17, (uint64_t)v12);
      v44 = *(_QWORD *)&v12[*(int *)(v41 + 28)];
      swift_retain();
      result = objc_msgSend(a2, sel_voiceId);
      if (!result)
      {
        __break(1u);
        return result;
      }
      v18 = result;
      v42 = sub_1A3AB497C();

      v19 = objc_msgSend(a2, sel_speechVoice);
      v20 = objc_msgSend(v19, sel_synthesisProviderVoice);

      v21 = objc_msgSend(v20, sel_synthesizerBundleIdentifier);
      if (v21)
      {
        v22 = sub_1A3AB497C();
        v24 = v23;

        if (v22 == 0xD00000000000002BLL && v24 == v36)
        {
          swift_bridgeObjectRelease();
LABEL_12:
          v26 = 2;
          a2 = v39;
          goto LABEL_16;
        }
        v25 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        if ((v25 & 1) != 0)
          goto LABEL_12;
      }
      a2 = v39;
      v27 = objc_msgSend(v39, sel_type);
      if ((unint64_t)(v27 - 2) >= 9)
        v26 = 1;
      else
        v26 = byte_1A3AC03FA[(_QWORD)(v27 - 2)];
LABEL_16:
      v43 = v26;
      sub_1A39C2708();
      v29 = v28;
      swift_release();
      swift_bridgeObjectRelease();
      sub_1A39C3D68((uint64_t)v12, (uint64_t)v9);
      if ((v29 & 1) != 0)
      {
        v30 = v9[*(int *)(v41 + 44)];
        sub_1A39C3DAC((uint64_t)v9);
        if ((v30 & 1) != 0)
        {
          sub_1A39C3F90((uint64_t)v12, v37);
          v31 = v45;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1A39C29A0(0, *(_QWORD *)(v31 + 16) + 1, 1);
            v31 = v45;
          }
          v33 = *(_QWORD *)(v31 + 16);
          v32 = *(_QWORD *)(v31 + 24);
          if (v33 >= v32 >> 1)
          {
            sub_1A39C29A0(v32 > 1, v33 + 1, 1);
            v31 = v45;
          }
          *(_QWORD *)(v31 + 16) = v33 + 1;
          sub_1A39C3F90(v37, v31 + v35 + v33 * v40);
          goto LABEL_5;
        }
      }
      else
      {
        sub_1A39C3DAC((uint64_t)v9);
      }
      sub_1A39C3DAC((uint64_t)v12);
LABEL_5:
      v17 += v40;
      if (!--v14)
        return (id)v45;
    }
  }
  return result;
}

void sub_1A39C3150(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  int *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  char *v31;
  char v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  _BOOL8 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  id v66;
  id v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  _QWORD v101[2];

  v80 = a4;
  v79 = a3;
  v82 = a2;
  v77 = sub_1A39A4820(&qword_1EE6D2C00);
  v76 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77);
  v75 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A39A4820(&qword_1EE6D2C20);
  MEMORY[0x1E0C80A78](v6);
  v74 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A3AB4268();
  v88 = *(_QWORD *)(v8 - 8);
  v89 = v8;
  MEMORY[0x1E0C80A78](v8);
  v87 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(objc_allocWithZone((Class)TTSRuleset), sel_init);
  v95 = 0x5F656C75727861;
  v96 = 0xE700000000000000;
  v11 = (int *)type metadata accessor for PronunciationRuleSet();
  swift_bridgeObjectRetain();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  sub_1A3AB4364();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  swift_bridgeObjectRetain();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  v12 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setIdentifier_, v12);

  objc_msgSend(v10, sel_setPriority_, *(_QWORD *)(a1 + v11[10]));
  if (*(_QWORD *)(a1 + v11[8] + 8))
  {
    v13 = objc_allocWithZone((Class)TTSRegex);
    swift_bridgeObjectRetain();
    v14 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
    v15 = objc_msgSend(v13, sel_initWithPerlPattern_, v14);

    objc_msgSend(v10, sel_setActivationRegex_, v15);
  }
  v83 = v10;
  v16 = v11[9];
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + v16) + 16);
  if (!v17)
    return;
  v18 = 0;
  v19 = 88;
  v73 = xmmword_1A3ABF990;
  v78 = "tion found for %@";
  v72 = 0x80000001A3AEFBB0;
  v85 = v16;
  v86 = a1;
  v84 = v17;
  while (1)
  {
    v20 = *(_QWORD *)(a1 + v16);
    if (v18 >= *(_QWORD *)(v20 + 16))
      break;
    v21 = (_QWORD *)(v20 + v19);
    if (*((_BYTE *)v21 - 23) != 1)
      goto LABEL_7;
    v90 = v19;
    v22 = *(v21 - 7);
    v23 = *(v21 - 6);
    v24 = *(v21 - 4);
    v93 = *(v21 - 5);
    v25 = *((_BYTE *)v21 - 24);
    v26 = *(v21 - 2);
    v27 = *v21;
    v28 = objc_allocWithZone((Class)TTSRuleReplacement);
    swift_bridgeObjectRetain();
    v94 = v24;
    swift_bridgeObjectRetain();
    v91 = v26;
    sub_1A39C3E58(v26);
    v92 = v27;
    swift_bridgeObjectRetain();
    v29 = objc_msgSend(v28, sel_init);
    if (HIDWORD(v18))
      goto LABEL_46;
    v30 = v29;
    objc_msgSend(v29, sel_setOriginalRulesetIndex_, v18);
    v101[0] = v22;
    v101[1] = v23;
    swift_bridgeObjectRetain();
    v31 = v87;
    sub_1A3AB425C();
    sub_1A39A9EC0();
    sub_1A3AB5168();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v31, v89);
    swift_bridgeObjectRelease();
    v32 = sub_1A3AB4AFC();
    swift_bridgeObjectRelease();
    if ((v32 & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v101[0] = 6446127;
      v101[1] = 0xE300000000000000;
      swift_bridgeObjectRetain();
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      sub_1A3AB4A84();
    }
    v33 = v93;
    v34 = objc_allocWithZone((Class)TTSRegex);
    v35 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
    v36 = objc_msgSend(v34, sel_initWithPerlPattern_, v35);

    objc_msgSend(v30, sel_setRegex_, v36);
    v100 = v25;
    v99 = 1;
    sub_1A39C3E70();
    sub_1A3AB4B74();
    sub_1A3AB4B74();
    if (v101[0] == v97 && v101[1] == v98)
    {
      swift_bridgeObjectRelease_n();
      v37 = 1;
    }
    else
    {
      v38 = sub_1A3AB5654();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v38 & 1) != 0)
      {
        v37 = 1;
      }
      else
      {
        v81 = v23;
        v101[0] = v33;
        v101[1] = v94;
        v39 = qword_1EE6D6A88;
        swift_bridgeObjectRetain();
        if (v39 != -1)
          swift_once();
        v40 = v77;
        v41 = sub_1A39AAC98(v77, (uint64_t)qword_1EE6E6D60);
        swift_beginAccess();
        v42 = v76;
        v43 = v75;
        (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v75, v41, v40);
        sub_1A39C3EB4();
        sub_1A39C3EF8((unint64_t *)&qword_1EE6D2C38, &qword_1EE6D2C00, MEMORY[0x1E0DF1F60]);
        v44 = (uint64_t)v74;
        sub_1A3AB48EC();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v40);
        swift_bridgeObjectRelease();
        v45 = sub_1A39A4820(&qword_1EE6D2C40);
        v37 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v44, 1, v45) != 1;
        sub_1A39C3F38(v44);
        v33 = v93;
      }
    }
    objc_msgSend(v30, sel_setIsTerminalRule_, v37);
    if ((v25 & 1) == 0)
    {
      v53 = (void *)sub_1A3AB4958();
      goto LABEL_38;
    }
    v46 = objc_msgSend(v82, sel_speechVoice);
    v47 = objc_msgSend(v46, sel_synthesisProviderVoice);

    v48 = objc_msgSend(v47, sel_synthesizerBundleIdentifier);
    v49 = v94;
    if (v48)
    {
      v50 = sub_1A3AB497C();
      v52 = v51;

      if (v50 == 0xD00000000000002BLL && v52 == v72)
      {
        swift_bridgeObjectRelease();
LABEL_29:
        v55 = (void *)objc_opt_self();
        v56 = (void *)sub_1A3AB4958();
        v57 = (void *)sub_1A3AB4958();
        v58 = objc_msgSend(v55, sel_eloquencePhonemesFromIPA_language_, v56, v57);

        if (!v58)
          goto LABEL_42;
        sub_1A3AB497C();

        v101[0] = 5988384;
        v101[1] = 0xE300000000000000;
        sub_1A3AB4A84();
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }
      v54 = sub_1A3AB5654();
      swift_bridgeObjectRelease();
      if ((v54 & 1) != 0)
        goto LABEL_29;
    }
    if (objc_msgSend(v82, sel_type) == (id)2)
    {
      v101[0] = 0;
      v101[1] = 0xE000000000000000;
      sub_1A3AB52AC();
      swift_bridgeObjectRelease();
      strcpy((char *)v101, "[[inpt PHON]] ");
      HIBYTE(v101[1]) = -18;
      v59 = (void *)objc_opt_self();
      v60 = (void *)sub_1A3AB4958();
      v61 = objc_msgSend(v59, sel_applebetPhonemesFromIPA_, v60);

      if (!v61)
        goto LABEL_48;
      sub_1A3AB497C();

      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
    }
    else
    {
      v62 = (void *)objc_opt_self();
      v63 = (void *)sub_1A3AB4958();
      v64 = (void *)sub_1A3AB4958();
      v65 = objc_msgSend(v62, sel_lhPhonemesFromIPA_language_, v63, v64);

      if (!v65)
        goto LABEL_42;
      sub_1A3AB497C();

      v101[0] = 724526428;
      v101[1] = 0xE400000000000000;
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
    }
LABEL_36:
    sub_1A3AB4A84();
    if (!v101[1])
    {
LABEL_42:
      v68 = (id)AXTTSLogCommon();
      if (!v68)
        goto LABEL_47;
      v69 = v68;
      sub_1A3AB4FE8();
      sub_1A39A4820(&qword_1EE6D23F8);
      v70 = swift_allocObject();
      *(_OWORD *)(v70 + 16) = v73;
      *(_QWORD *)(v70 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v70 + 64) = sub_1A39C18E8();
      *(_QWORD *)(v70 + 32) = v33;
      *(_QWORD *)(v70 + 40) = v49;
      swift_bridgeObjectRetain();
      sub_1A3AB46F4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      sub_1A39C3F78(v91);
      v16 = v85;
      v19 = v90;
      goto LABEL_6;
    }
    v53 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
LABEL_38:
    v16 = v85;
    v19 = v90;
    objc_msgSend(v30, sel_setReplacement_, v53);

    v66 = objc_msgSend(v30, sel_replacement);
    if (!v66)
    {
      sub_1A3AB497C();
      v66 = (id)sub_1A3AB4958();
      swift_bridgeObjectRelease();
    }
    v67 = objc_msgSend((id)objc_opt_self(), sel_processReplacementStringForSpecialCharacters_, v66);

    if (!v67)
    {
      sub_1A3AB497C();
      v67 = (id)sub_1A3AB4958();
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v30, sel_setReplacement_, v67);

    objc_msgSend(v83, sel_addRuleReplacement_, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1A39C3F78(v91);

LABEL_6:
    swift_bridgeObjectRelease();
    a1 = v86;
    v17 = v84;
LABEL_7:
    ++v18;
    v19 += 64;
    if (v17 == v18)
      return;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
}

uint64_t sub_1A39C3D68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PronunciationRuleSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A39C3DAC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PronunciationRuleSet();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for TTSPronunciationUtils()
{
  return objc_opt_self();
}

uint64_t method lookup function for TTSPronunciationUtils()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static TTSPronunciationUtils.rulesets(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

unint64_t sub_1A39C3E1C()
{
  unint64_t result;

  result = qword_1EE6D2C10;
  if (!qword_1EE6D2C10)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE6D2C10);
  }
  return result;
}

uint64_t sub_1A39C3E58(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_retain();
  return result;
}

unint64_t sub_1A39C3E70()
{
  unint64_t result;

  result = qword_1EE6D2C28;
  if (!qword_1EE6D2C28)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for PronuncationRule.ReplacementType, &type metadata for PronuncationRule.ReplacementType);
    atomic_store(result, (unint64_t *)&qword_1EE6D2C28);
  }
  return result;
}

unint64_t sub_1A39C3EB4()
{
  unint64_t result;

  result = qword_1EE6D2C30;
  if (!qword_1EE6D2C30)
  {
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEA980], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EE6D2C30);
  }
  return result;
}

uint64_t sub_1A39C3EF8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1A39AB624(a2);
    result = MEMORY[0x1A8597738](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A39C3F38(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A39A4820(&qword_1EE6D2C20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A39C3F78(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_release();
  return result;
}

uint64_t sub_1A39C3F90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PronunciationRuleSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A39C3FD4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1A39C3FF8()
{
  unint64_t result;

  result = qword_1EE6D2C50;
  if (!qword_1EE6D2C50)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for RulesetTargetSynthesizer, &type metadata for RulesetTargetSynthesizer);
    atomic_store(result, (unint64_t *)&qword_1EE6D2C50);
  }
  return result;
}

uint64_t sub_1A39C403C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _DWORD v20[8];
  int v21;
  char v22;
  __int16 v23;
  char v24;
  __int16 v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v4 = *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
  v5 = v2[2] | ((unint64_t)*((unsigned __int8 *)v2 + 12) << 32);
  v6 = v2[4] | ((unint64_t)*((unsigned __int8 *)v2 + 20) << 32);
  sub_1A39A1AD0(a1, (uint64_t)&v21);
  sub_1A39A4820(&qword_1EE6D2B78);
  if (swift_dynamicCast())
  {
    v27 = v17;
    v28 = v18;
    v29 = v19;
    v7 = v20[0] | ((unint64_t)LOBYTE(v20[1]) << 32);
    v25 = *(_WORD *)((char *)&v20[1] + 1);
    v26 = HIBYTE(v20[1]);
    v8 = v20[2] | ((unint64_t)LOBYTE(v20[3]) << 32);
    v23 = *(_WORD *)((char *)&v20[3] + 1);
    v24 = HIBYTE(v20[3]);
    v9 = v20[4] | ((unint64_t)LOBYTE(v20[5]) << 32);
    a2[3] = (uint64_t)&type metadata for TTSMarkup.Prosody;
    a2[4] = (uint64_t)&protocol witness table for TTSMarkup.Prosody;
    result = swift_allocObject();
    *a2 = result;
    v11 = v28;
    *(_OWORD *)(result + 16) = v27;
    *(_OWORD *)(result + 32) = v11;
    *(_OWORD *)(result + 48) = v29;
    if (HIDWORD(v4) <= 0xFE)
      v12 = v4;
    else
      v12 = v7;
    *(_BYTE *)(result + 68) = BYTE4(v12);
    *(_DWORD *)(result + 64) = v12;
    *(_WORD *)(result + 69) = v25;
    *(_BYTE *)(result + 71) = v26;
    if (v6 >> 34 <= 0x3E)
      v13 = v6;
    else
      v13 = v8;
    *(_BYTE *)(result + 76) = BYTE4(v13);
    *(_DWORD *)(result + 72) = v13;
    *(_WORD *)(result + 77) = v23;
    *(_BYTE *)(result + 79) = v24;
    if (HIDWORD(v5) <= 0xFE)
      v14 = v5;
    else
      v14 = v9;
    *(_BYTE *)(result + 84) = BYTE4(v14);
    *(_DWORD *)(result + 80) = v14;
  }
  else
  {
    v19 = 0u;
    memset(v20, 0, 21);
    v18 = 0u;
    v17 = 0u;
    v15 = sub_1A39B11F4((uint64_t)&v17, &qword_1EE6D2C58);
    BYTE4(v17) = BYTE4(v4);
    LODWORD(v17) = v4;
    BYTE4(v27) = BYTE4(v6);
    LODWORD(v27) = v6;
    v22 = BYTE4(v5);
    v21 = v5;
    MEMORY[0x1E0C80A78](v15);
    a2[3] = (uint64_t)&type metadata for TTSMarkup.Prosody;
    a2[4] = (uint64_t)&protocol witness table for TTSMarkup.Prosody;
    v16 = swift_allocObject();
    *a2 = v16;
    return TTSMarkup.Prosody.init(rate:pitch:volume:speech:)((int *)&v17, (int *)&v27, &v21, (uint64_t (*)(void))sub_1A39C42A0, v16 + 16);
  }
  return result;
}

uint64_t sub_1A39C42A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[5];

  static TTSMarkup.SpeechBuilder.buildExpression(_:)(v4, *(_QWORD *)(v1 + 16));
  static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v4, a1);
  return sub_1A39A47C4((uint64_t)v4);
}

uint64_t sub_1A39C42E4()
{
  return sub_1A39C4864();
}

char *TTSMarkup.SpeechText.phonemes(_:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v9 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v13 = *a1;
  a4[3] = (uint64_t)&type metadata for TTSMarkup.Phoneme;
  a4[4] = (uint64_t)&protocol witness table for TTSMarkup.Phoneme;
  v10 = swift_allocObject();
  v11 = v10 + 16;
  *a4 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return TTSMarkup.Phoneme.init(alphabet:phonemes:orthography:)(&v13, a2, a3, v9, v8, v11);
}

uint64_t sub_1A39C4394()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t TTSMarkup.SpeechText.substitute(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v14;
  id v15;

  v6 = *(void **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  if (a2)
  {
    MEMORY[0x1E0C80A78](a1);
    a3[3] = (uint64_t)&type metadata for TTSMarkup.Sub;
    a3[4] = (uint64_t)&protocol witness table for TTSMarkup.Sub;
    v11 = swift_allocObject();
    v12 = (_QWORD *)(v11 + 16);
    *a3 = v11;
    swift_bridgeObjectRetain();
    return sub_1A3A55B28(a1, a2, (uint64_t (*)(void))sub_1A39C4534, v12);
  }
  else
  {
    a3[3] = (uint64_t)&type metadata for TTSMarkup.SpeechText;
    a3[4] = (uint64_t)&protocol witness table for TTSMarkup.SpeechText;
    v14 = (_QWORD *)swift_allocObject();
    *a3 = (uint64_t)v14;
    v14[2] = v6;
    v14[3] = v5;
    v14[4] = v8;
    v14[5] = v7;
    v15 = v6;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1A39C4500()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A39C4534@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  _QWORD v10[5];
  _QWORD v11[5];

  v4 = (void *)v1[2];
  v3 = v1[3];
  v6 = v1[4];
  v5 = v1[5];
  v10[3] = &type metadata for TTSMarkup.SpeechText;
  v10[4] = &protocol witness table for TTSMarkup.SpeechText;
  v7 = (_QWORD *)swift_allocObject();
  v10[0] = v7;
  v7[2] = v4;
  v7[3] = v3;
  v7[4] = v6;
  v7[5] = v5;
  v8 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static TTSMarkup.SpeechBuilder.buildExpression(_:)(v11, v10);
  sub_1A39A47C4((uint64_t)v10);
  static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v11, a1);
  return sub_1A39A47C4((uint64_t)v11);
}

uint64_t sub_1A39C45E0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 32);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A39C4614@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  int v7;
  uint64_t *v8;
  uint64_t v10[5];
  int v11;
  BOOL v12;
  int v13;
  char v14;
  int v15;
  char v16;

  v7 = *((unsigned __int8 *)a1 + 4);
  v11 = *a1;
  v12 = v7 != 0;
  v14 = -1;
  v13 = 0;
  v16 = -4;
  v15 = 0;
  v10[3] = a2;
  v10[4] = a3;
  v8 = sub_1A39B1230(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v8, v4, a2);
  sub_1A39C403C((uint64_t)v10, a4);
  return sub_1A39A47C4((uint64_t)v10);
}

uint64_t sub_1A39C46B4@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  int v7;
  char v8;
  uint64_t *v9;
  uint64_t v11[5];
  int v12;
  char v13;
  int v14;
  char v15;
  int v16;
  char v17;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 4);
  v13 = -1;
  v12 = 0;
  v15 = -1;
  v14 = 0;
  v17 = v8;
  v16 = v7;
  v11[3] = a2;
  v11[4] = a3;
  v9 = sub_1A39B1230(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v9, v4, a2);
  sub_1A39C403C((uint64_t)v11, a4);
  return sub_1A39A47C4((uint64_t)v11);
}

uint64_t sub_1A39C4740@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  int v7;
  BOOL v8;
  char v9;
  uint64_t *v10;
  uint64_t v12[5];
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  char v18;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 4) == 0;
  v14 = -1;
  v13 = 0;
  v9 = 1;
  if (v8)
    v9 = 0;
  v15 = v7;
  v16 = v9;
  v18 = -4;
  v17 = 0;
  v12[3] = a2;
  v12[4] = a3;
  v10 = sub_1A39B1230(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v10, v4, a2);
  sub_1A39C403C((uint64_t)v12, a4);
  return sub_1A39A47C4((uint64_t)v12);
}

uint64_t TTSMarkupSpeech.emphasis(_:)@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  char v5;

  v5 = *a1;
  a2[3] = (uint64_t)&type metadata for TTSMarkup.Emphasis;
  a2[4] = (uint64_t)&protocol witness table for TTSMarkup.Emphasis;
  v3 = swift_allocObject();
  *a2 = v3;
  return TTSMarkup.Emphasis.init(_:speech:)(&v5, sub_1A39C4858, v3 + 16);
}

uint64_t sub_1A39C485C()
{
  return sub_1A39C4864();
}

uint64_t sub_1A39C4864()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 24);
  return swift_deallocObject();
}

uint64_t TTSMarkupSpeech.language(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;

  a3[3] = (uint64_t)&type metadata for TTSMarkup.Language;
  a3[4] = (uint64_t)&protocol witness table for TTSMarkup.Language;
  v6 = swift_allocObject();
  v7 = (_QWORD *)(v6 + 16);
  *a3 = v6;
  swift_bridgeObjectRetain();
  return TTSMarkup.Language.init(languageCode:speech:)(a1, a2, sub_1A39C4858, v7);
}

uint64_t sub_1A39C492C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 24);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t TTSMarkupSpeech.preferringSelection(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  a3[3] = (uint64_t)&type metadata for TTSMarkup.Voice;
  a3[4] = (uint64_t)&protocol witness table for TTSMarkup.Voice;
  v6 = swift_allocObject();
  v7 = v6 + 16;
  *a3 = v6;
  swift_bridgeObjectRetain();
  return TTSMarkup.Voice.init(voiceSelectionClientKey:speech:)(a1, a2, sub_1A39C4858, v7);
}

uint64_t sub_1A39C49F0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 56);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t TTSMarkupSpeech.preferringAccessibilitySelections()@<X0>(uint64_t *a1@<X8>)
{
  return TTSMarkupSpeech.preferringSelection(_:)(0x6269737365636361, 0xED00007974696C69, a1);
}

uint64_t TTSMarkupSpeech.rate(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t *v7;
  int v8;
  char v9;

  if ((a1 & 0x100000000) != 0)
  {
    a4[3] = a2;
    a4[4] = a3;
    v7 = sub_1A39B1230(a4);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v7, v4, a2);
  }
  else
  {
    v8 = a1;
    v9 = 1;
    return sub_1A39C4614(&v8, a2, a3, a4);
  }
}

uint64_t TTSMarkupSpeech.rate(_:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t *v6;
  int v8;
  char v9;

  if (*a1 == 5)
  {
    a4[3] = a2;
    a4[4] = a3;
    v6 = sub_1A39B1230(a4);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, v4, a2);
  }
  else
  {
    v8 = *a1;
    v9 = 0;
    return sub_1A39C4614(&v8, a2, a3, a4);
  }
}

uint64_t TTSMarkupSpeech.pitch(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t *v7;
  int v8;
  char v9;

  if ((a1 & 0x100000000) != 0)
  {
    a4[3] = a2;
    a4[4] = a3;
    v7 = sub_1A39B1230(a4);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v7, v4, a2);
  }
  else
  {
    v8 = a1;
    v9 = -126;
    return sub_1A39C46B4(&v8, a2, a3, a4);
  }
}

uint64_t TTSMarkupSpeech.pitch(_:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t *v6;
  int v8;
  char v9;

  if (*a1 == 5)
  {
    a4[3] = a2;
    a4[4] = a3;
    v6 = sub_1A39B1230(a4);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, v4, a2);
  }
  else
  {
    v8 = *a1;
    v9 = 0;
    return sub_1A39C46B4(&v8, a2, a3, a4);
  }
}

uint64_t TTSMarkupSpeech.volume(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t *v9;
  int v10;
  char v11;
  int v12;
  char v13;

  if ((a1 & 0x100000000) != 0)
  {
    a4[3] = a2;
    a4[4] = a3;
    v9 = sub_1A39B1230(a4);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v9, v4, a2);
  }
  else
  {
    sub_1A39C932C((uint64_t)&v12, *(float *)&a1);
    v10 = v12;
    v11 = v13;
    return sub_1A39C4740(&v10, a2, a3, a4);
  }
}

uint64_t TTSMarkupSpeech.volume(_:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t *v6;
  int v8;
  char v9;

  if (*a1 == 6)
  {
    a4[3] = a2;
    a4[4] = a3;
    v6 = sub_1A39B1230(a4);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, v4, a2);
  }
  else
  {
    v8 = *a1;
    v9 = 0;
    return sub_1A39C4740(&v8, a2, a3, a4);
  }
}

uint64_t TTSMarkupSpeech.voice(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;

  if (a2)
  {
    MEMORY[0x1E0C80A78](a1);
    a5[3] = (uint64_t)&type metadata for TTSMarkup.Voice;
    a5[4] = (uint64_t)&protocol witness table for TTSMarkup.Voice;
    v10 = swift_allocObject();
    v11 = v10 + 16;
    *a5 = v10;
    swift_bridgeObjectRetain();
    return TTSMarkup.Voice.init(named:speech:)(a1, a2, sub_1A39C4858, v11);
  }
  else
  {
    a5[3] = a3;
    a5[4] = a4;
    v13 = sub_1A39B1230(a5);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v13, v5, a3);
  }
}

uint64_t sub_1A39C4E20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7[3];
  __int128 v8;
  _QWORD v9[5];

  v3 = *(_QWORD *)(v1 + 32);
  v8 = *(_OWORD *)(v1 + 16);
  v6 = v8;
  v4 = sub_1A39B1230(v7);
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v4, v3);
  static TTSMarkup.SpeechBuilder.buildExpression(_:)(v9, v7);
  sub_1A39A47C4((uint64_t)v7);
  static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v9, a1);
  return sub_1A39A47C4((uint64_t)v9);
}

uint64_t TTSMarkupSpeech.marker(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  swift_retain();
  TTSMarkupSpeech.tap(_:)((uint64_t)sub_1A39C4F54, v10, a3, a4, a5);
  return swift_release();
}

uint64_t sub_1A39C4F30()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t TTSMarkup.SpeechText.word(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;

  v8 = *(void **)v3;
  v7 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = v8;
  v11[5] = v7;
  v11[6] = v10;
  v11[7] = v9;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_1A39C5054;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  TTSMarkupSpeech.tap(_:)((uint64_t)sub_1A39C4F54, v12, (uint64_t)&type metadata for TTSMarkup.SpeechText, (uint64_t)&protocol witness table for TTSMarkup.SpeechText, a3);
  swift_release();
  return swift_release();
}

{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;

  v8 = *(void **)v3;
  v7 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = v8;
  v11[5] = v7;
  v11[6] = v10;
  v11[7] = v9;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_1A39C5184;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  TTSMarkupSpeech.tap(_:)((uint64_t)sub_1A39C4F54, v12, (uint64_t)&type metadata for TTSMarkup.SpeechText, (uint64_t)&protocol witness table for TTSMarkup.SpeechText, a3);
  swift_release();
  return swift_release();
}

uint64_t sub_1A39C5054(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(result + 16))
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
  return result;
}

uint64_t sub_1A39C5184(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(result + 16))
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(result + 24));
  return result;
}

uint64_t TTSMarkup.SpeechText.sentence(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;

  v8 = *(void **)v3;
  v7 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = v8;
  v11[5] = v7;
  v11[6] = v10;
  v11[7] = v9;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_1A39C52B8;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  TTSMarkupSpeech.tap(_:)((uint64_t)sub_1A39C4F54, v12, (uint64_t)&type metadata for TTSMarkup.SpeechText, (uint64_t)&protocol witness table for TTSMarkup.SpeechText, a3);
  swift_release();
  return swift_release();
}

{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;

  v8 = *(void **)v3;
  v7 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = v8;
  v11[5] = v7;
  v11[6] = v10;
  v11[7] = v9;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_1A39C53EC;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  TTSMarkupSpeech.tap(_:)((uint64_t)sub_1A39C4F54, v12, (uint64_t)&type metadata for TTSMarkup.SpeechText, (uint64_t)&protocol witness table for TTSMarkup.SpeechText, a3);
  swift_release();
  return swift_release();
}

uint64_t sub_1A39C52B8(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 16) == 1)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
  return result;
}

uint64_t sub_1A39C53EC(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 16) == 1)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(result + 24));
  return result;
}

uint64_t TTSMarkup.SpeechText.paragraph(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;

  v8 = *(void **)v3;
  v7 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = v8;
  v11[5] = v7;
  v11[6] = v10;
  v11[7] = v9;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_1A39C5524;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  TTSMarkupSpeech.tap(_:)((uint64_t)sub_1A39C4F54, v12, (uint64_t)&type metadata for TTSMarkup.SpeechText, (uint64_t)&protocol witness table for TTSMarkup.SpeechText, a3);
  swift_release();
  return swift_release();
}

{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;

  v8 = *(void **)v3;
  v7 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = v8;
  v11[5] = v7;
  v11[6] = v10;
  v11[7] = v9;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_1A39C5694;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  TTSMarkupSpeech.tap(_:)((uint64_t)sub_1A39C4F54, v12, (uint64_t)&type metadata for TTSMarkup.SpeechText, (uint64_t)&protocol witness table for TTSMarkup.SpeechText, a3);
  swift_release();
  return swift_release();
}

uint64_t sub_1A39C5524(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 16) == 2)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
  return result;
}

uint64_t sub_1A39C5658()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A39C5694(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 16) == 2)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(result + 24));
  return result;
}

uint64_t sub_1A39C56D0(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t (*v3)(__int128 *);
  uint64_t v4;
  __int128 v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 16);
  if (v2 >> 61 == 1)
  {
    v3 = *(uint64_t (**)(__int128 *))(v1 + 16);
    v4 = *(_QWORD *)(result + 24);
    v5 = *(_OWORD *)result;
    v6 = v2;
    v7 = v4;
    return v3(&v5);
  }
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for ProsodyModifier(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ProsodyModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 21))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ProsodyModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 21) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProsodyModifier()
{
  return &type metadata for ProsodyModifier;
}

uint64_t TTSMarkup.Voice.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD v32[8];

  v27 = MEMORY[0x1E0DEE9D8];
  v28 = 0;
  v29 = 0xE000000000000000;
  v30 = 0;
  v32[5] = 0;
  v32[6] = 0;
  v31 = MEMORY[0x1E0DEE9D8];
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8))();
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_1A39A2734(1701667182, 0xE400000000000000), (v7 & 1) != 0))
  {
    v8 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v6);
    v10 = *v8;
    v9 = v8[1];
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRelease();
    v28 = v10;
    v29 = v9;
  }
  else
  {
    v11 = swift_bridgeObjectRelease();
  }
  v12 = (*(uint64_t (**)(uint64_t))((*v4 & *a1) + 0x100))(v11);
  v13 = v12;
  if (!(v12 >> 62))
  {
    v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_7;
LABEL_21:
    v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_22:
    swift_bridgeObjectRelease_n();
    v25 = sub_1A39A4820(&qword_1EE6D2BE0);
    v26 = &protocol witness table for <A> [A];

    *(_QWORD *)&v24 = v17;
    sub_1A39A1AB8(&v24, (uint64_t)v32);
    sub_1A39B7AF4((uint64_t)&v27, a2);
    return sub_1A39C615C((uint64_t)&v27);
  }
  swift_bridgeObjectRetain();
  result = sub_1A3AB5480();
  v14 = result;
  if (!result)
    goto LABEL_21;
LABEL_7:
  if (v14 >= 1)
  {
    v16 = 0;
    v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v13 & 0xC000000000000001) != 0)
        v18 = (id)MEMORY[0x1A85960B8](v16, v13);
      else
        v18 = *(id *)(v13 + 8 * v16 + 32);
      v19 = v18;
      sub_1A39D518C((uint64_t)&v22);

      if (v23)
      {
        sub_1A39A1AB8(&v22, (uint64_t)&v24);
        sub_1A39A1AB8(&v24, (uint64_t)&v22);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = sub_1A39BFBD8(0, v17[2] + 1, 1, v17);
        v21 = v17[2];
        v20 = v17[3];
        if (v21 >= v20 >> 1)
          v17 = sub_1A39BFBD8((_QWORD *)(v20 > 1), v21 + 1, 1, v17);
        v17[2] = v21 + 1;
        sub_1A39A1AB8(&v22, (uint64_t)&v17[5 * v21 + 4]);
      }
      else
      {
        sub_1A39BFB74((uint64_t)&v22);
      }
      ++v16;
    }
    while (v14 != v16);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

void static TTSMarkup.Voice.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t TTSMarkup.Voice.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Voice.eventTaps.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.Voice.eventTaps.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Voice.Gender.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1A3AB54E0();
  result = swift_bridgeObjectRelease();
  v4 = 3;
  if (v2 < 3)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t TTSMarkup.Voice.Gender.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1701601645;
  if (*v0 != 1)
    v1 = 0x656C616D6566;
  if (*v0)
    return v1;
  else
    return 0x6669636570736E75;
}

uint64_t sub_1A39C5B70(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1A39C5B7C(*a1, *a2);
}

uint64_t sub_1A39C5B7C(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEB00000000646569;
  v3 = 0x6669636570736E75;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 1701601645;
    else
      v5 = 0x656C616D6566;
    if (v4 == 1)
      v6 = 0xE400000000000000;
    else
      v6 = 0xE600000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6669636570736E75;
  v6 = 0xEB00000000646569;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 1701601645;
    else
      v3 = 0x656C616D6566;
    if (v7 == 1)
      v2 = 0xE400000000000000;
    else
      v2 = 0xE600000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1A39C5C84()
{
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A39C5D20()
{
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39C5D98()
{
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A39C5E30@<X0>(char *a1@<X8>)
{
  return TTSMarkup.Voice.Gender.init(rawValue:)(a1);
}

void sub_1A39C5E3C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEB00000000646569;
  v4 = 0xE400000000000000;
  v5 = 1701601645;
  if (v2 != 1)
  {
    v5 = 0x656C616D6566;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6669636570736E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t TTSMarkup.Voice._content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 40, a1);
}

uint64_t TTSMarkup.Voice._content.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 40;
  sub_1A39A47C4(v3);
  return sub_1A39A1AB8(a1, v3);
}

uint64_t (*TTSMarkup.Voice._content.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Voice.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 40, a1);
}

uint64_t TTSMarkup.Voice.voiceSelectionClientKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TTSMarkup.Voice.voiceSelectionClientKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return result;
}

uint64_t (*TTSMarkup.Voice.voiceSelectionClientKey.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Voice.init(named:speech:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  *(_BYTE *)(a4 + 24) = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a4 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a4 + 80) = 0;
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)a4 = v4;
  *(_QWORD *)(a4 + 8) = a1;
  *(_QWORD *)(a4 + 16) = a2;
  return a3();
}

uint64_t TTSMarkup.Voice.init(gender:spokenLanguages:speech:)@<X0>(uint64_t (*a1)(uint64_t)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = swift_bridgeObjectRelease();
  v5 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 16) = 0xE000000000000000;
  return a1(v4);
}

uint64_t TTSMarkup.Voice.init(voiceSelectionClientKey:speech:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  *(_BYTE *)(a4 + 24) = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a4 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)a4 = v4;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0xE000000000000000;
  *(_QWORD *)(a4 + 80) = a1;
  *(_QWORD *)(a4 + 88) = a2;
  return a3();
}

unint64_t TTSMarkup.Voice.attributes.getter()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;

  sub_1A39A4820(&qword_1EE6D2368);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(inited + 32) = 1701667182;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v2 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(inited + 48) = *(_QWORD *)(v0 + 8);
  *(_QWORD *)(inited + 56) = v2;
  swift_bridgeObjectRetain();
  return sub_1A39A5780(inited);
}

uint64_t TTSMarkup.Voice.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(a3 + 80))(v3);
}

void sub_1A39C60D4(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

unint64_t sub_1A39C60E0()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;

  sub_1A39A4820(&qword_1EE6D2368);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(inited + 32) = 1701667182;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v2 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(inited + 48) = *(_QWORD *)(v0 + 8);
  *(_QWORD *)(inited + 56) = v2;
  swift_bridgeObjectRetain();
  return sub_1A39A5780(inited);
}

uint64_t sub_1A39C6148@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 40, a1);
}

uint64_t sub_1A39C615C(uint64_t a1)
{
  _s5VoiceVwxx_0(a1);
  return a1;
}

unint64_t sub_1A39C6184()
{
  unint64_t result;

  result = qword_1EE6D2C60;
  if (!qword_1EE6D2C60)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSMarkup.Voice.Gender, &type metadata for TTSMarkup.Voice.Gender);
    atomic_store(result, (unint64_t *)&qword_1EE6D2C60);
  }
  return result;
}

uint64_t _s5VoiceVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A39A47C4(a1 + 40);
  return swift_bridgeObjectRelease();
}

uint64_t _s5VoiceVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = a2 + 40;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(a1 + 40, v5, v7);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s5VoiceVwca_0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1A39B8070((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 _s5VoiceVwtk_0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t _s5VoiceVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  sub_1A39A47C4(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5VoiceVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s5VoiceVwst_0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Voice()
{
  return &type metadata for TTSMarkup.Voice;
}

uint64_t _s5VoiceV6GenderOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A39C6504 + 4 * byte_1A3AC0449[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A39C6538 + 4 * asc_1A3AC0444[v4]))();
}

uint64_t sub_1A39C6538(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A39C6540(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A39C6548);
  return result;
}

uint64_t sub_1A39C6554(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A39C655CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A39C6560(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A39C6568(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Voice.Gender()
{
  return &type metadata for TTSMarkup.Voice.Gender;
}

double sub_1A39C6584@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = a1;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 1;
  result = 2.06158465e11;
  *(_OWORD *)(a2 + 16) = xmmword_1A3AC0530;
  return result;
}

uint64_t sub_1A39C65A4()
{
  uint64_t *v0;
  uint64_t v1;

  sub_1A3A82C8C();
  v1 = *v0;
  sub_1A3AB4A84();
  sub_1A3AB4EA4();
  sub_1A3AB4A84();
  (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)v1 + 208))(0, 0xE000000000000000);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39C668C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v1 + 208))(0x20636E79735B5BLL, 0xE700000000000000);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39C6720(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;

  v3 = v2;
  if (*(unsigned __int8 *)(a1 + 52) != 255)
  {
    v6 = *(float *)(a1 + 48);
    v8 = *((float *)v2 + 4);
    v7 = *((float *)v2 + 5);
    v9 = *((float *)v2 + 6);
    if ((((unint64_t)*(unsigned __int8 *)(a1 + 52) << 32) & 0x100000000) == 0)
      __asm { BR              X10 }
    if (v6 >= 1.0)
    {
      if (v6 <= 1.0)
      {
        if ((*((_BYTE *)v2 + 12) & 1) == 0)
          goto LABEL_11;
        goto LABEL_12;
      }
      v10 = 1.0;
      v11 = 2.0;
      v7 = *((float *)v2 + 4);
    }
    else
    {
      v10 = 0.0;
      v11 = 1.0;
      v9 = *((float *)v2 + 4);
    }
    v8 = sub_1A3A4934C(v10, v11, v7, v9, v6);
    if ((*((_BYTE *)v2 + 12) & 1) == 0)
    {
LABEL_11:
      if (v8 == *((float *)v2 + 2))
        goto LABEL_13;
    }
LABEL_12:
    *((float *)v2 + 2) = v8;
    *((_BYTE *)v2 + 12) = 0;
    v12 = *v2;
    v27 = 0;
    v28 = 0xE000000000000000;
    sub_1A3AB4A84();
    sub_1A3AB4EB0();
    sub_1A3AB4A84();
    (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)v12 + 208))(0, 0xE000000000000000);
    swift_bridgeObjectRelease();
  }
LABEL_13:
  v13 = *(unsigned int *)(a1 + 56) | ((unint64_t)*(unsigned __int8 *)(a1 + 60) << 32);
  if (*(unsigned __int8 *)(a1 + 60) >> 2 <= 0x3EuLL)
  {
    LODWORD(v27) = *(_DWORD *)(a1 + 56);
    BYTE4(v27) = BYTE4(v13);
    sub_1A39C6BE0(*((float *)v2 + 7));
    v14 = *v2;
    v27 = 0x20736162705B5BLL;
    v28 = 0xE700000000000000;
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 208))(0x20736162705B5BLL, 0xE700000000000000);
    swift_bridgeObjectRelease();
  }
  if (*(unsigned __int8 *)(a1 + 68) != 255)
  {
    v15 = *(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
    LODWORD(v27) = *(_DWORD *)(a1 + 64);
    BYTE4(v27) = BYTE4(v15) & 1;
    sub_1A39C9214();
    v16 = *v2;
    v27 = 0;
    v28 = 0xE000000000000000;
    sub_1A3AB4A84();
    sub_1A3AB4EB0();
    sub_1A3AB4A84();
    (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)v16 + 208))(0, 0xE000000000000000);
    swift_bridgeObjectRelease();
  }
  result = TTSMarkupVisitor.visit(_:)((_QWORD *)(a1 + 8), a2, (uint64_t)&off_1E4A98760);
  if (v13 >> 34 <= 0x3E)
  {
    LODWORD(v27) = v13;
    BYTE4(v27) = BYTE4(v13);
    v18 = sub_1A39C6BE0(*((float *)v2 + 7));
    v20 = v19;
    v21 = sub_1A39C6D0C();
    if ((v21 & 1) == 0)
    {
      v21 = sub_1A39C6D0C();
      if ((v21 & 1) == 0)
        return swift_bridgeObjectRelease();
    }
    v30 = 0;
    v22 = MEMORY[0x1E0C80A78](v21);
    if ((v20 & 0x1000000000000000) != 0 || !(v20 & 0x2000000000000000 | v18 & 0x1000000000000000))
    {
      sub_1A3AB52A0();
    }
    else
    {
      MEMORY[0x1E0C80A78](v22);
      if ((v20 & 0x2000000000000000) != 0)
      {
        v27 = v18;
        v28 = v20 & 0xFFFFFFFFFFFFFFLL;
        v24 = (v18 > 0x20u || ((0x100003E01uLL >> v18) & 1) == 0)
           && (v23 = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0
           && *v23 == 0;
        v29 = v24;
        result = swift_bridgeObjectRelease();
        goto LABEL_34;
      }
      if ((v18 & 0x1000000000000000) != 0)
      {
        ((void (*)(uint64_t *__return_ptr, uint64_t))sub_1A39C7174)(&v27, (v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v26 = sub_1A3AB5318();
        ((void (*)(uint64_t *__return_ptr, uint64_t))sub_1A39C7174)(&v27, v26);
      }
      v29 = v27;
    }
    result = swift_bridgeObjectRelease();
LABEL_34:
    if ((v29 & 1) == 0)
      return result;
    v25 = *v3;
    v27 = 0x20736162705B5BLL;
    v28 = 0xE700000000000000;
    sub_1A3A49368();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 208))(v27, v28);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A39C6BE0(float a1)
{
  unsigned int *v1;
  unsigned int v2;
  unint64_t v3;
  float v4;
  uint64_t v6;

  v2 = *((unsigned __int8 *)v1 + 4);
  v3 = *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
  v4 = sub_1A39AABB0(a1);
  if (!(v2 >> 6))
    __asm { BR              X10 }
  if (v2 >> 6 == 1)
  {
    sub_1A39AABE4(*(float *)&v3);
    sub_1A3AB4EB0();
    return 0;
  }
  else
  {
    v6 = HIDWORD(v3) & 0x3F;
    if ((_DWORD)v6)
    {
      if ((_DWORD)v6 != 1)
        sub_1A39AAB70(*(float *)&v3 / 100.0);
    }
    else
    {
      sub_1A39AABE4(v4 + *(float *)&v3);
    }
    return sub_1A3A49368();
  }
}

void sub_1A39C6CE8()
{
  JUMPOUT(0x1A39C6CD0);
}

void sub_1A39C6CF4()
{
  JUMPOUT(0x1A39C6CD0);
}

void sub_1A39C6D00()
{
  JUMPOUT(0x1A39C6CD0);
}

uint64_t sub_1A39C6D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = sub_1A3AB4AA8();
  if (v1)
  {
    v2 = v0;
    v3 = v1;
    do
    {
      v6 = sub_1A3AB4AA8();
      if (!v7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v2 == v6 && v3 == v7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v4 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v4 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      v2 = sub_1A3AB4AA8();
      v3 = v5;
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  sub_1A3AB4AA8();
  v9 = v8;
  swift_bridgeObjectRelease();
  v10 = v9 == 0;
  swift_bridgeObjectRelease();
  return v10;
}

void sub_1A39C6E70()
{
  uint64_t *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[2];

  v1 = (void *)objc_opt_self();
  v2 = (void *)sub_1A3AB4958();
  v3 = objc_msgSend(v1, sel_applebetPhonemesFromIPA_, v2);

  if (v3)
  {
    sub_1A3AB497C();

    v4 = *v0;
    sub_1A3AB52AC();
    swift_bridgeObjectRelease();
    strcpy((char *)v5, "[[inpt PHON]] ");
    HIBYTE(v5[1]) = -18;
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v4 + 208))(v5[0], v5[1]);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1A39C6FAC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v1 + 208))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1A39C6FDC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  if (*(_BYTE *)(result + 8) != 14)
  {
    v4 = result;
    sub_1A39C192C();
    if ((sub_1A3AB494C() & 1) != 0)
    {
      (*(void (**)(uint64_t, unint64_t))(**(_QWORD **)v2 + 208))(0x4C20726168635B5BLL, 0xED00005D5D4C5254);
      TTSMarkupVisitor.visit(_:)((_QWORD *)(v4 + 16), a2, (uint64_t)&off_1E4A98760);
      return (*(uint64_t (**)(uint64_t, unint64_t))(**(_QWORD **)v2 + 208))(0x4E20726168635B5BLL, 0xED00005D5D4D524FLL);
    }
    else
    {
      result = sub_1A3AB494C();
      if ((result & 1) != 0)
      {
        (*(void (**)(uint64_t, unint64_t))(**(_QWORD **)v2 + 208))(0x4C2072626D6E5B5BLL, 0xED00005D5D4C5254);
        TTSMarkupVisitor.visit(_:)((_QWORD *)(v4 + 16), a2, (uint64_t)&off_1E4A98760);
        return (*(uint64_t (**)(uint64_t, unint64_t))(**(_QWORD **)v2 + 208))(0x4E2072626D6E5B5BLL, 0xED00005D5D4D524FLL);
      }
    }
  }
  return result;
}

_BYTE *sub_1A39C7174@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1A39C71E0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for SpeechStringIntervalTree()
{
  return swift_release();
}

uint64_t sub_1A39C71F0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t sub_1A39C7234(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return a1;
}

__n128 _s6MarkerVwtk(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A39C72B4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t _s5PauseVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s5PauseVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for PlainTalkWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlainTalkWriter);
}

uint64_t TTSMarkup.Prosody.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(a3 + 64))(v3);
}

__n128 TTSMarkup.Prosody.init(_:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t i;
  id v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t (*v26)(uint64_t, uint64_t, void *);
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t (*v39)(uint64_t, uint64_t, void *);
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t (*v50)(uint64_t, unint64_t, void *);
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __n128 result;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _UNKNOWN **v75;
  _OWORD v76[3];
  _BYTE v77[21];
  uint64_t v78;

  *(_QWORD *)&v76[0] = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)v77 = 0;
  v77[4] = -1;
  *(_DWORD *)&v77[8] = 0;
  v77[12] = -4;
  *(_DWORD *)&v77[16] = 0;
  v77[20] = -1;
  v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x100))();
  v6 = v5;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1A3AB5480();
  }
  else
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    if (v7 < 1)
    {
      __break(1u);
      goto LABEL_53;
    }
    for (i = 0; i != v7; ++i)
    {
      if ((v6 & 0xC000000000000001) != 0)
        v12 = (id)MEMORY[0x1A85960B8](i, v6);
      else
        v12 = *(id *)(v6 + 8 * i + 32);
      v13 = v12;
      sub_1A39D518C((uint64_t)&v71);

      if (v72)
      {
        sub_1A39A1AB8(&v71, (uint64_t)&v73);
        sub_1A39A1AB8(&v73, (uint64_t)&v71);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = sub_1A39BFBD8(0, v10[2] + 1, 1, v10);
        v15 = v10[2];
        v14 = v10[3];
        if (v15 >= v14 >> 1)
          v10 = sub_1A39BFBD8((_QWORD *)(v14 > 1), v15 + 1, 1, v10);
        v10[2] = v15 + 1;
        sub_1A39A1AB8(&v71, (uint64_t)&v10[5 * v15 + 4]);
      }
      else
      {
        sub_1A39BFB74((uint64_t)&v71);
      }
    }
  }
  swift_bridgeObjectRelease_n();
  v74 = sub_1A39A4820(&qword_1EE6D2BE0);
  v75 = &protocol witness table for <A> [A];
  *(_QWORD *)&v73 = v10;
  v16 = sub_1A39A1AB8(&v73, (uint64_t)v76 + 8);
  v17 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8);
  v18 = v17(v16);
  if (!*(_QWORD *)(v18 + 16))
    goto LABEL_23;
  v19 = sub_1A39A2734(1702125938, 0xE400000000000000);
  if ((v20 & 1) == 0)
    goto LABEL_23;
  v21 = (uint64_t *)(*(_QWORD *)(v18 + 56) + 16 * v19);
  v22 = *v21;
  v23 = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  TTSMarkup.Prosody.PredefinedRate.init(rawValue:)((char *)&v73);
  v24 = v73;
  if (v73 == 5)
  {
    v25 = sub_1A3A617E0();
    swift_beginAccess();
    v26 = *(uint64_t (**)(uint64_t, uint64_t, void *))(*(_QWORD *)*v25 + 144);
    swift_retain();
    LODWORD(v27) = v26(v22, v23, &unk_1E4A9BEE8);
    v29 = v28;
    swift_release();
    if (v29)
    {
      swift_bridgeObjectRelease();
      v24 = COERCE_UNSIGNED_INT(v27 / 100.0) | 0x100000000;
      goto LABEL_22;
    }
LABEL_23:
    v30 = swift_bridgeObjectRelease();
    goto LABEL_24;
  }
LABEL_22:
  v30 = swift_bridgeObjectRelease();
  *(_DWORD *)v77 = v24;
  v77[4] = BYTE4(v24);
LABEL_24:
  v31 = v17(v30);
  if (!*(_QWORD *)(v31 + 16))
    goto LABEL_30;
  v32 = sub_1A39A2734(0x656D756C6F76, 0xE600000000000000);
  if ((v33 & 1) == 0)
    goto LABEL_30;
  v34 = (uint64_t *)(*(_QWORD *)(v31 + 56) + 16 * v32);
  v35 = *v34;
  v36 = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  TTSMarkup.Prosody.PredefinedVolume.init(rawValue:)((char *)&v73);
  v37 = v73;
  if (v73 == 6)
  {
    v38 = sub_1A3A617E0();
    swift_beginAccess();
    v39 = *(uint64_t (**)(uint64_t, uint64_t, void *))(*(_QWORD *)*v38 + 160);
    swift_retain();
    v40 = v39(v35, v36, &unk_1E4A9BF48);
    v42 = v41;
    swift_release();
    if (v42)
    {
      swift_bridgeObjectRelease();
      v37 = v40 | 0x100000000;
      goto LABEL_29;
    }
LABEL_30:
    v43 = swift_bridgeObjectRelease();
    goto LABEL_31;
  }
LABEL_29:
  v43 = swift_bridgeObjectRelease();
  *(_DWORD *)&v77[16] = v37;
  v77[20] = BYTE4(v37);
LABEL_31:
  v44 = v17(v43);
  if (!*(_QWORD *)(v44 + 16) || (v45 = sub_1A39A2734(0x6863746970, 0xE500000000000000), (v46 & 1) == 0))
  {

    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  v47 = (uint64_t *)(*(_QWORD *)(v44 + 56) + 16 * v45);
  v7 = *v47;
  v6 = v47[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  TTSMarkup.Prosody.PredefinedPitch.init(rawValue:)((char *)&v73);
  v48 = v73;
  if (v73 == 5)
  {
    v49 = sub_1A3A617E0();
    swift_beginAccess();
    v50 = *(uint64_t (**)(uint64_t, unint64_t, void *))(*(_QWORD *)*v49 + 144);
    swift_retain();
    v51 = v50(v7, v6, &unk_1E4A9BF18);
    v53 = v52;
    swift_release();
    if (v53)
    {
      swift_bridgeObjectRelease();
      v48 = v51 | 0x4000000000;
      goto LABEL_49;
    }
    swift_beginAccess();
    v10 = (_QWORD *)*v49;
    v78 = MEMORY[0x1E0DEE9D8];
    swift_retain();
    sub_1A39AE488(0, 3, 0);
    v56 = v78;
    v2 = *(_QWORD *)(v78 + 16);
    v9 = *(_QWORD *)(v78 + 24);
    v57 = v9 >> 1;
    v8 = v2 + 1;
    if (v9 >> 1 > v2)
    {
LABEL_41:
      *(_QWORD *)(v56 + 16) = v8;
      v58 = v56 + 16 * v2;
      *(_QWORD *)(v58 + 32) = 31304;
      *(_QWORD *)(v58 + 40) = 0xE200000000000000;
      v78 = v56;
      v59 = v2 + 2;
      if (v57 <= v8)
      {
        v69 = v8;
        v70 = v59;
        sub_1A39AE488((char *)(v9 > 1), v59, 1);
        v59 = v70;
        v8 = v69;
        v56 = v78;
      }
      *(_QWORD *)(v56 + 16) = v59;
      v60 = v56 + 16 * v8;
      *(_QWORD *)(v60 + 32) = 29811;
      *(_QWORD *)(v60 + 40) = 0xE200000000000000;
      v78 = v56;
      v62 = *(_QWORD *)(v56 + 16);
      v61 = *(_QWORD *)(v56 + 24);
      v63 = v62 + 1;
      if (v62 >= v61 >> 1)
      {
        sub_1A39AE488((char *)(v61 > 1), v62 + 1, 1);
        v63 = v62 + 1;
        v56 = v78;
      }
      *(_QWORD *)(v56 + 16) = v63;
      v64 = v56 + 16 * v62;
      *(_QWORD *)(v64 + 32) = 37;
      *(_QWORD *)(v64 + 40) = 0xE100000000000000;
      v65 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*v10 + 168))(v7, v6, v56);
      v67 = v66;
      swift_release();
      swift_release();
      if (v67 && (TTSMarkup.Prosody.RelativePitchUnit.init(rawValue:)((char *)&v78), v78 != 3))
        v48 = v65 | ((unint64_t)v78 << 32) | 0xFFFFFF8000000000;
      else
        v48 = 0xFC00000000;
      goto LABEL_49;
    }
LABEL_53:
    v68 = v8;
    sub_1A39AE488((char *)(v9 > 1), v8, 1);
    v8 = v68;
    v56 = v78;
    v9 = *(_QWORD *)(v78 + 24);
    v57 = v9 >> 1;
    goto LABEL_41;
  }
LABEL_49:
  swift_bridgeObjectRelease();

  if (((v48 >> 34) & 0x3F) != 0x3F)
  {
    *(_DWORD *)&v77[8] = v48;
    v77[12] = BYTE4(v48);
  }
LABEL_37:
  v54 = *(_OWORD *)v77;
  *(_OWORD *)(a2 + 32) = v76[2];
  *(_OWORD *)(a2 + 48) = v54;
  *(_QWORD *)(a2 + 61) = *(_QWORD *)&v77[13];
  result = (__n128)v76[1];
  *(_OWORD *)a2 = v76[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void static TTSMarkup.Prosody.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t TTSMarkup.Prosody.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Prosody.eventTaps.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.Prosody.eventTaps.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Prosody._content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.Prosody._content.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 8;
  sub_1A39A47C4(v3);
  return sub_1A39A1AB8(a1, v3);
}

uint64_t (*TTSMarkup.Prosody._content.modify())()
{
  return nullsub_19;
}

uint64_t TTSMarkup.Prosody.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.Prosody.PredefinedRate.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A39C7B90 + 4 * byte_1A3AC05B0[*v0]))(0x776F6C732D78, 0xE600000000000000);
}

uint64_t sub_1A39C7B90()
{
  return 2003790963;
}

uint64_t sub_1A39C7BA0()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1A39C7BB0()
{
  return 1953718630;
}

uint64_t sub_1A39C7BC0()
{
  return 0x747361662D78;
}

uint64_t TTSMarkup.Prosody.PredefinedRate.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A39C7BFC + 4 * byte_1A3AC05B5[*v0]))(0x776F6C732D78, 0xE600000000000000);
}

uint64_t sub_1A39C7BFC()
{
  return 2003790963;
}

uint64_t sub_1A39C7C0C()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1A39C7C1C()
{
  return 1953718630;
}

uint64_t sub_1A39C7C2C()
{
  return 0x747361662D78;
}

uint64_t TTSMarkup.Prosody.PredefinedRate.init(rawValue:)@<X0>(char *a1@<X8>)
{
  return sub_1A39C877C(a1);
}

void sub_1A39C7C48(char *a1)
{
  sub_1A39C7FEC(*a1);
}

uint64_t sub_1A39C7C54(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 29811;
    else
      v3 = 37;
    if (v2 == 1)
      v4 = 0xE200000000000000;
    else
      v4 = 0xE100000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 29811;
      else
        v6 = 37;
      if (v5 == 1)
        v7 = 0xE200000000000000;
      else
        v7 = 0xE100000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE200000000000000;
    v3 = 31304;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE200000000000000;
  if (v3 != 31304)
  {
LABEL_21:
    v8 = sub_1A3AB5654();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1A39C7D24(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A39C7D6C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A39C7DD8 + 4 * byte_1A3AC05C5[a2]))(0x74666F732D78);
}

uint64_t sub_1A39C7DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x74666F732D78 && v1 == v2)
    v3 = 1;
  else
    v3 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_1A39C7E94(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A39C7EDC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A39C7F40 + 4 * byte_1A3AC05D0[a2]))(7827308);
}

uint64_t sub_1A39C7F40(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 7827308 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1A39C7FEC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A39C8034(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A39C8090 + 4 * byte_1A3AC05DA[a2]))(2003790963);
}

uint64_t sub_1A39C8090(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 2003790963 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1A39C8134()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A3AB56FC();
  __asm { BR              X9 }
}

uint64_t sub_1A39C817C()
{
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

void sub_1A39C81E4(char a1)
{
  sub_1A3AB56FC();
  __asm { BR              X10 }
}

uint64_t sub_1A39C8230()
{
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

void sub_1A39C82A8()
{
  __asm { BR              X10 }
}

uint64_t sub_1A39C82E0()
{
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

void sub_1A39C8334()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A3AB56FC();
  __asm { BR              X9 }
}

uint64_t sub_1A39C8378()
{
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

void sub_1A39C83E0(uint64_t a1, char a2)
{
  sub_1A3AB56FC();
  __asm { BR              X10 }
}

uint64_t sub_1A39C8428()
{
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A39C84A0@<X0>(char *a1@<X8>)
{
  return TTSMarkup.Prosody.PredefinedRate.init(rawValue:)(a1);
}

uint64_t sub_1A39C84AC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1A39C84D8 + 4 * byte_1A3AC05FA[*v0]))();
}

void sub_1A39C84D8(_QWORD *a1@<X8>)
{
  *a1 = 2003790963;
  a1[1] = 0xE400000000000000;
}

void sub_1A39C84EC(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6D756964656DLL;
  a1[1] = v1;
}

void sub_1A39C8500(_QWORD *a1@<X8>)
{
  *a1 = 1953718630;
  a1[1] = 0xE400000000000000;
}

void sub_1A39C8514(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x747361662D78;
  a1[1] = v1;
}

uint64_t sub_1A39C8528()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A39C8554 + 4 * byte_1A3AC05FF[*v0]))(0x776F6C732D78, 0xE600000000000000);
}

uint64_t sub_1A39C8554()
{
  return 2003790963;
}

uint64_t sub_1A39C8564()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1A39C8574()
{
  return 1953718630;
}

uint64_t sub_1A39C8584()
{
  return 0x747361662D78;
}

uint64_t TTSMarkup.Prosody.Rate.description.getter()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 4) & 1) == 0)
    __asm { BR              X10 }
  sub_1A3AB4EB0();
  sub_1A3AB4A84();
  return 0;
}

void sub_1A39C8630()
{
  JUMPOUT(0x1A39C85F4);
}

void sub_1A39C8640()
{
  JUMPOUT(0x1A39C85F4);
}

void sub_1A39C8650()
{
  JUMPOUT(0x1A39C85F4);
}

void sub_1A39C8660()
{
  JUMPOUT(0x1A39C85F4);
}

uint64_t TTSMarkup.Prosody.PredefinedPitch.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A39C86A0 + 4 * byte_1A3AC0609[*v0]))(0x776F6C2D78, 0xE500000000000000);
}

uint64_t sub_1A39C86A0()
{
  return 7827308;
}

uint64_t sub_1A39C86B0()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1A39C86C4()
{
  return 1751607656;
}

uint64_t sub_1A39C86D4()
{
  return 0x686769682D78;
}

uint64_t TTSMarkup.Prosody.PredefinedPitch.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A39C8714 + 4 * byte_1A3AC060E[*v0]))(0x776F6C2D78, 0xE500000000000000);
}

uint64_t sub_1A39C8714()
{
  return 7827308;
}

uint64_t sub_1A39C8724()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1A39C8738()
{
  return 1751607656;
}

uint64_t sub_1A39C8748()
{
  return 0x686769682D78;
}

float TTSMarkup.Prosody.PredefinedPitch.relativePercentage.getter()
{
  char *v0;

  return flt_1A3AC0B50[*v0];
}

uint64_t TTSMarkup.Prosody.PredefinedPitch.init(rawValue:)@<X0>(char *a1@<X8>)
{
  return sub_1A39C877C(a1);
}

uint64_t sub_1A39C877C@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1A3AB54E0();
  result = swift_bridgeObjectRelease();
  v4 = 5;
  if (v2 < 5)
    v4 = v2;
  *a1 = v4;
  return result;
}

void sub_1A39C87D0(char *a1)
{
  sub_1A39C7E94(*a1);
}

void sub_1A39C87DC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A3AB56FC();
  __asm { BR              X9 }
}

uint64_t sub_1A39C8824()
{
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

void sub_1A39C8894()
{
  __asm { BR              X10 }
}

uint64_t sub_1A39C88CC()
{
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

void sub_1A39C8928()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A3AB56FC();
  __asm { BR              X9 }
}

uint64_t sub_1A39C896C()
{
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A39C89DC@<X0>(char *a1@<X8>)
{
  return TTSMarkup.Prosody.PredefinedPitch.init(rawValue:)(a1);
}

uint64_t sub_1A39C89E8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1A39C8A14 + 4 * byte_1A3AC0622[*v0]))();
}

void sub_1A39C8A14(_QWORD *a1@<X8>)
{
  *a1 = 7827308;
  a1[1] = 0xE300000000000000;
}

void sub_1A39C8A28(_QWORD *a1@<X8>)
{
  *a1 = 0x6D756964656DLL;
  a1[1] = 0xE600000000000000;
}

void sub_1A39C8A40(_QWORD *a1@<X8>)
{
  *a1 = 1751607656;
  a1[1] = 0xE400000000000000;
}

void sub_1A39C8A54(_QWORD *a1@<X8>)
{
  *a1 = 0x686769682D78;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1A39C8A6C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A39C8A98 + 4 * byte_1A3AC0627[*v0]))(0x776F6C2D78, 0xE500000000000000);
}

uint64_t sub_1A39C8A98()
{
  return 7827308;
}

uint64_t sub_1A39C8AA8()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1A39C8ABC()
{
  return 1751607656;
}

uint64_t sub_1A39C8ACC()
{
  return 0x686769682D78;
}

uint64_t TTSMarkup.Prosody.RelativePitchUnit.description.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 29811;
  if (*v0 != 1)
    v1 = 37;
  if (*v0)
    return v1;
  else
    return 31304;
}

uint64_t TTSMarkup.Prosody.RelativePitchUnit.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 29811;
  if (*v0 != 1)
    v1 = 37;
  if (*v0)
    return v1;
  else
    return 31304;
}

uint64_t TTSMarkup.Prosody.RelativePitchUnit.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1A3AB54E0();
  result = swift_bridgeObjectRelease();
  v4 = 3;
  if (v2 < 3)
    v4 = v2;
  *a1 = v4;
  return result;
}

void *static TTSMarkup.Prosody.RelativePitchUnit.allCases.getter()
{
  return &unk_1E4A9B5D8;
}

uint64_t sub_1A39C8BB4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1A39C7C54(*a1, *a2);
}

uint64_t sub_1A39C8BC0()
{
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A39C8C3C()
{
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39C8C94()
{
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A39C8D0C@<X0>(char *a1@<X8>)
{
  return TTSMarkup.Prosody.RelativePitchUnit.init(rawValue:)(a1);
}

void sub_1A39C8D18(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE200000000000000;
  v4 = 0xE200000000000000;
  v5 = 29811;
  if (v2 != 1)
  {
    v5 = 37;
    v4 = 0xE100000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 31304;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1A39C8D54()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 29811;
  if (*v0 != 1)
    v1 = 37;
  if (*v0)
    return v1;
  else
    return 31304;
}

void sub_1A39C8D8C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4A9B6F8;
}

uint64_t TTSMarkup.Prosody.Pitch.description.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(v0 + 4) >> 6;
  if (!v1)
    __asm { BR              X10 }
  if (v1 == 1)
  {
    v3 = 0;
    sub_1A3AB4EB0();
    sub_1A3AB4A84();
  }
  else
  {
    v3 = sub_1A3A49368();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
  }
  return v3;
}

void sub_1A39C8EA4()
{
  JUMPOUT(0x1A39C8E94);
}

void sub_1A39C8EB8()
{
  JUMPOUT(0x1A39C8E94);
}

void sub_1A39C8EC8()
{
  JUMPOUT(0x1A39C8E94);
}

uint64_t TTSMarkup.Prosody.PredefinedVolume.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A39C8F0C + 4 * byte_1A3AC0631[*v0]))(0x746E656C6973, 0xE600000000000000);
}

uint64_t sub_1A39C8F0C()
{
  return 0x74666F732D78;
}

uint64_t sub_1A39C8F1C()
{
  return 1952870259;
}

uint64_t sub_1A39C8F2C()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1A39C8F3C()
{
  return 1685417836;
}

uint64_t sub_1A39C8F4C()
{
  return 0x64756F6C2D78;
}

uint64_t TTSMarkup.Prosody.PredefinedVolume.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A39C8F88 + 4 * byte_1A3AC0637[*v0]))(0x746E656C6973, 0xE600000000000000);
}

uint64_t sub_1A39C8F88()
{
  return 0x74666F732D78;
}

uint64_t sub_1A39C8F98()
{
  return 1952870259;
}

uint64_t sub_1A39C8FA8()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1A39C8FB8()
{
  return 1685417836;
}

uint64_t sub_1A39C8FC8()
{
  return 0x64756F6C2D78;
}

float TTSMarkup.Prosody.PredefinedVolume.amplitude.getter()
{
  char *v0;

  return flt_1A3AC0B64[*v0];
}

uint64_t TTSMarkup.Prosody.PredefinedVolume.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1A3AB54E0();
  result = swift_bridgeObjectRelease();
  v4 = 6;
  if (v2 < 6)
    v4 = v2;
  *a1 = v4;
  return result;
}

void sub_1A39C9044(char *a1)
{
  sub_1A39C7D24(*a1);
}

void sub_1A39C9050()
{
  char *v0;

  sub_1A39C81E4(*v0);
}

void sub_1A39C9058()
{
  __asm { BR              X10 }
}

uint64_t sub_1A39C9090()
{
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

void sub_1A39C90F4(uint64_t a1)
{
  char *v1;

  sub_1A39C83E0(a1, *v1);
}

uint64_t sub_1A39C90FC@<X0>(char *a1@<X8>)
{
  return TTSMarkup.Prosody.PredefinedVolume.init(rawValue:)(a1);
}

uint64_t sub_1A39C9108()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1A39C9134 + 4 * byte_1A3AC0643[*v0]))();
}

void sub_1A39C9134(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x74666F732D78;
  a1[1] = v1;
}

void sub_1A39C9148(_QWORD *a1@<X8>)
{
  *a1 = 1952870259;
  a1[1] = 0xE400000000000000;
}

void sub_1A39C915C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6D756964656DLL;
  a1[1] = v1;
}

void sub_1A39C9170(_QWORD *a1@<X8>)
{
  *a1 = 1685417836;
  a1[1] = 0xE400000000000000;
}

void sub_1A39C9184(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x64756F6C2D78;
  a1[1] = v1;
}

uint64_t sub_1A39C9198()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A39C91C4 + 4 * byte_1A3AC0649[*v0]))(0x746E656C6973, 0xE600000000000000);
}

uint64_t sub_1A39C91C4()
{
  return 0x74666F732D78;
}

uint64_t sub_1A39C91D4()
{
  return 1952870259;
}

uint64_t sub_1A39C91E4()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1A39C91F4()
{
  return 1685417836;
}

uint64_t sub_1A39C9204()
{
  return 0x64756F6C2D78;
}

float sub_1A39C9214()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 4) & 1) != 0)
    return roundf(sub_1A39AAC44(*(float *)v0) * 100.0) / 100.0;
  else
    return flt_1A3AC0B64[(char)*(_DWORD *)v0];
}

uint64_t TTSMarkup.Prosody.Volume.description.getter()
{
  uint64_t v0;
  uint64_t v2;

  if ((*(_BYTE *)(v0 + 4) & 1) == 0)
    __asm { BR              X10 }
  v2 = sub_1A3A49368();
  sub_1A3AB4A84();
  return v2;
}

void sub_1A39C92DC()
{
  JUMPOUT(0x1A39C92A0);
}

void sub_1A39C92EC()
{
  JUMPOUT(0x1A39C92A0);
}

void sub_1A39C92FC()
{
  JUMPOUT(0x1A39C92A0);
}

void sub_1A39C930C()
{
  JUMPOUT(0x1A39C92A0);
}

void sub_1A39C931C()
{
  JUMPOUT(0x1A39C92A0);
}

void sub_1A39C932C(uint64_t a1@<X8>, float a2@<S0>)
{
  float v4;

  if (a2 == 0.0)
    v4 = 0.0;
  else
    v4 = sub_1A39AAC28(a2);
  *(float *)a1 = v4;
  *(_BYTE *)(a1 + 4) = a2 != 0.0;
}

uint64_t TTSMarkup.Prosody.init(rate:pitch:volume:speech:)@<X0>(int *a1@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  int v5;
  char v6;
  int v7;
  char v8;
  int v9;
  char v10;

  v5 = *a1;
  v6 = *((_BYTE *)a1 + 4);
  v7 = *a2;
  v8 = *((_BYTE *)a2 + 4);
  v9 = *a3;
  v10 = *((_BYTE *)a3 + 4);
  *(_QWORD *)a5 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a5 + 52) = v6;
  *(_DWORD *)(a5 + 48) = v5;
  *(_BYTE *)(a5 + 60) = v8;
  *(_DWORD *)(a5 + 56) = v7;
  *(_BYTE *)(a5 + 68) = v10;
  *(_DWORD *)(a5 + 64) = v9;
  return a4();
}

uint64_t TTSMarkup.Prosody.attributes.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  uint64_t v11;

  v1 = MEMORY[0x1E0DEE9E0];
  if (v0[52] != 255)
  {
    if ((((unint64_t)v0[52] << 32) & 0x100000000) == 0)
      __asm { BR              X10 }
    sub_1A3AB4EB0();
    sub_1A3AB4A84();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1A39A93EC(0, 0xE000000000000000, 1702125938, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  if (v0[60] >> 2 <= 0x3EuLL)
  {
    v3 = TTSMarkup.Prosody.Pitch.description.getter();
    v5 = v4;
    v6 = swift_isUniquelyReferenced_nonNull_native();
    sub_1A39A93EC(v3, v5, 0x6863746970, 0xE500000000000000, v6);
    swift_bridgeObjectRelease();
  }
  if (v0[68] != 255)
  {
    if ((((unint64_t)v0[68] << 32) & 0x100000000) == 0)
      __asm { BR              X10 }
    v10 = sub_1A3A49368();
    v11 = v7;
    sub_1A3AB4A84();
    v8 = swift_isUniquelyReferenced_nonNull_native();
    sub_1A39A93EC(v10, v11, 0x656D756C6F76, 0xE600000000000000, v8);
    swift_bridgeObjectRelease();
  }
  return v1;
}

void sub_1A39C961C()
{
  JUMPOUT(0x1A39C94A4);
}

void sub_1A39C9630()
{
  JUMPOUT(0x1A39C94A4);
}

void sub_1A39C963C()
{
  JUMPOUT(0x1A39C94A4);
}

void sub_1A39C9650()
{
  JUMPOUT(0x1A39C95C4);
}

void sub_1A39C9660()
{
  JUMPOUT(0x1A39C95C4);
}

void sub_1A39C9670()
{
  JUMPOUT(0x1A39C95C4);
}

void sub_1A39C9680()
{
  JUMPOUT(0x1A39C95C4);
}

void sub_1A39C9690(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

unint64_t sub_1A39C96AC()
{
  unint64_t result;

  result = qword_1EE6D2C68;
  if (!qword_1EE6D2C68)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSMarkup.Prosody.PredefinedRate, &type metadata for TTSMarkup.Prosody.PredefinedRate);
    atomic_store(result, (unint64_t *)&qword_1EE6D2C68);
  }
  return result;
}

unint64_t sub_1A39C96F4()
{
  unint64_t result;

  result = qword_1EE6D2C70;
  if (!qword_1EE6D2C70)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSMarkup.Prosody.PredefinedPitch, &type metadata for TTSMarkup.Prosody.PredefinedPitch);
    atomic_store(result, (unint64_t *)&qword_1EE6D2C70);
  }
  return result;
}

unint64_t sub_1A39C973C()
{
  unint64_t result;

  result = qword_1EE6D2C78;
  if (!qword_1EE6D2C78)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSMarkup.Prosody.RelativePitchUnit, &type metadata for TTSMarkup.Prosody.RelativePitchUnit);
    atomic_store(result, (unint64_t *)&qword_1EE6D2C78);
  }
  return result;
}

unint64_t sub_1A39C9784()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6D2C80;
  if (!qword_1EE6D2C80)
  {
    v1 = sub_1A39AB624(&qword_1EE6D2C88);
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE6D2C80);
  }
  return result;
}

unint64_t sub_1A39C97D4()
{
  unint64_t result;

  result = qword_1EE6D2C90;
  if (!qword_1EE6D2C90)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSMarkup.Prosody.PredefinedVolume, &type metadata for TTSMarkup.Prosody.PredefinedVolume);
    atomic_store(result, (unint64_t *)&qword_1EE6D2C90);
  }
  return result;
}

uint64_t _s7ProsodyVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a2 + 8;
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 8, v4, v6);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  return a1;
}

uint64_t _s7ProsodyVwca(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1A39B8070((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  v4 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v4;
  v5 = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v5;
  v6 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v6;
  return a1;
}

__n128 _s7ProsodyVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 61) = *(_QWORD *)(a2 + 61);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s7ProsodyVwta(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  sub_1A39A47C4(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

uint64_t _s7ProsodyVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 69))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s7ProsodyVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 68) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 69) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 69) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody()
{
  return &type metadata for TTSMarkup.Prosody;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody.PredefinedRate()
{
  return &type metadata for TTSMarkup.Prosody.PredefinedRate;
}

uint64_t _s7ProsodyV5PitchOwCP(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t sub_1A39C9AC0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t sub_1A39C9AC8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody.Rate()
{
  return &type metadata for TTSMarkup.Prosody.Rate;
}

uint64_t _s5VoiceV7QualityOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s7ProsodyV15PredefinedPitchOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A39C9BC0 + 4 * byte_1A3AC0665[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A39C9BF4 + 4 * byte_1A3AC0660[v4]))();
}

uint64_t sub_1A39C9BF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A39C9BFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A39C9C04);
  return result;
}

uint64_t sub_1A39C9C10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A39C9C18);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A39C9C1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A39C9C24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody.PredefinedPitch()
{
  return &type metadata for TTSMarkup.Prosody.PredefinedPitch;
}

uint64_t _s7ProsodyV17RelativePitchUnitOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A39C9C8C + 4 * byte_1A3AC066F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A39C9CC0 + 4 * byte_1A3AC066A[v4]))();
}

uint64_t sub_1A39C9CC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A39C9CC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A39C9CD0);
  return result;
}

uint64_t sub_1A39C9CDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A39C9CE4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A39C9CE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A39C9CF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody.RelativePitchUnit()
{
  return &type metadata for TTSMarkup.Prosody.RelativePitchUnit;
}

uint64_t _s7ProsodyV5PitchOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3E && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 62);
  v3 = ((*(unsigned __int8 *)(a1 + 4) >> 6) & 0xFFFFFFC3 | (4 * ((*(unsigned __int8 *)(a1 + 4) >> 2) & 0xF))) ^ 0x3F;
  if (v3 >= 0x3D)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s7ProsodyV5PitchOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3D)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 62;
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
    {
      *(_DWORD *)result = 0;
      *(_BYTE *)(result + 4) = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_1A39C9DB4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4) >> 6;
}

uint64_t sub_1A39C9DC0(uint64_t result)
{
  *(_BYTE *)(result + 4) &= 0x3Fu;
  return result;
}

unsigned int *sub_1A39C9DD8(unsigned int *result, uint64_t a2)
{
  *((_BYTE *)result + 4) = ((*result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32)) & 0x3FFFFFFFFLL | (a2 << 38)) >> 32;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody.Pitch()
{
  return &type metadata for TTSMarkup.Prosody.Pitch;
}

uint64_t _s7ProsodyV16PredefinedVolumeOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s7ProsodyV16PredefinedVolumeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1A39C9EE4 + 4 * byte_1A3AC0679[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1A39C9F18 + 4 * byte_1A3AC0674[v4]))();
}

uint64_t sub_1A39C9F18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A39C9F20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A39C9F28);
  return result;
}

uint64_t sub_1A39C9F34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A39C9F3CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1A39C9F40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A39C9F48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody.PredefinedVolume()
{
  return &type metadata for TTSMarkup.Prosody.PredefinedVolume;
}

uint64_t _s7ProsodyV6VolumeOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s7ProsodyV6VolumeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Prosody.Volume()
{
  return &type metadata for TTSMarkup.Prosody.Volume;
}

uint64_t sub_1A39CA014()
{
  return sub_1A39A669C(&OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_ssml);
}

uint64_t sub_1A39CA02C(uint64_t a1, uint64_t a2)
{
  return sub_1A39A66F8(a1, a2, &OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_ssml);
}

uint64_t sub_1A39CA038@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x68))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A39CA078(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x70);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t (*sub_1A39CA0CC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39CA11C()
{
  return sub_1A39A669C(&OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_voiceName);
}

uint64_t sub_1A39CA134(uint64_t a1, uint64_t a2)
{
  return sub_1A39A66F8(a1, a2, &OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_voiceName);
}

uint64_t sub_1A39CA140@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x80))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A39CA180(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x88);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t (*sub_1A39CA1D4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_1A39CA224(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  void *v4;

  v3 = a1 + *a3;
  swift_beginAccess();
  if (!*(_QWORD *)(v3 + 8))
    return 0;
  swift_bridgeObjectRetain();
  v4 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1A39CA298()
{
  return sub_1A39A669C(&OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_language);
}

uint64_t sub_1A39CA2B0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  if (a3)
  {
    v6 = sub_1A3AB497C();
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39CA328(uint64_t a1, uint64_t a2)
{
  return sub_1A39A66F8(a1, a2, &OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_language);
}

uint64_t sub_1A39CA334@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x98))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A39CA374(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xA0);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t (*sub_1A39CA3C8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_1A39CA40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  objc_super v19;

  v13 = (char *)objc_allocWithZone(v6);
  v14 = &v13[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_voiceName];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v15 = &v13[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_language];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v16 = &v13[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_ssml];
  *(_QWORD *)v16 = a1;
  *((_QWORD *)v16 + 1) = a2;
  swift_beginAccess();
  *(_QWORD *)v14 = a3;
  *((_QWORD *)v14 + 1) = a4;
  v17 = v13;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)v15 = a5;
  *((_QWORD *)v15 + 1) = a6;

  swift_bridgeObjectRelease();
  v19.receiver = v17;
  v19.super_class = v6;
  return objc_msgSendSuper2(&v19, sel_init);
}

uint64_t type metadata accessor for VoiceTaggedSSMLSnippet()
{
  return objc_opt_self();
}

void VoiceTaggedSSMLSnippet.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VoiceTaggedSSMLSnippet.__deallocating_deinit()
{
  return sub_1A39A8C1C(type metadata accessor for VoiceTaggedSSMLSnippet);
}

uint64_t sub_1A39CA64C()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A39CA6FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12TextToSpeech10TaggedSSML_ssmlSnippets);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39CA74C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x60))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39CA78C(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x68);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t (*sub_1A39CA7CC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_1A39CA81C()
{
  void *v0;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  v0 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1A39CA880()
{
  return sub_1A39A669C(&OBJC_IVAR____TtC12TextToSpeech10TaggedSSML_originalSSML);
}

uint64_t sub_1A39CA898(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v6 = sub_1A3AB497C();
  v8 = v7;
  v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39CA900(uint64_t a1, uint64_t a2)
{
  return sub_1A39A66F8(a1, a2, &OBJC_IVAR____TtC12TextToSpeech10TaggedSSML_originalSSML);
}

uint64_t sub_1A39CA90C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x78))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A39CA94C(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x80);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t (*sub_1A39CA9A0())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id sub_1A39CA9E4(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v5[OBJC_IVAR____TtC12TextToSpeech10TaggedSSML_ssmlSnippets] = MEMORY[0x1E0DEE9D8];
  v6 = &v5[OBJC_IVAR____TtC12TextToSpeech10TaggedSSML_originalSSML];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for TaggedSSML()
{
  return objc_opt_self();
}

id TaggedSSML.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void TaggedSSML.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id TaggedSSML.__deallocating_deinit()
{
  return sub_1A39A8C1C(type metadata accessor for TaggedSSML);
}

uint64_t sub_1A39CAB34@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x70))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A39CAB74(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x78);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1A39CABC8()
{
  return sub_1A39A669C(&OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_currentVoiceName);
}

uint64_t sub_1A39CABD4(uint64_t a1, uint64_t a2)
{
  return sub_1A39A66F8(a1, a2, &OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_currentVoiceName);
}

uint64_t (*sub_1A39CABE0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39CAC24@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x88))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A39CAC64(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x90);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1A39CACB8()
{
  return sub_1A39A669C(&OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_currentLanguage);
}

uint64_t sub_1A39CACC4(uint64_t a1, uint64_t a2)
{
  return sub_1A39A66F8(a1, a2, &OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_currentLanguage);
}

uint64_t (*sub_1A39CACD0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id SSMLVoiceTagger.init()()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  objc_super v5;

  v1 = &v0[OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_currentVoiceName];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v2 = &v0[OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_currentLanguage];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_leafPiles] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_voiceTagRanges] = v3;
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for SSMLVoiceTagger();
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t type metadata accessor for SSMLVoiceTagger()
{
  return objc_opt_self();
}

_QWORD *sub_1A39CAE20(unint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  objc_class *v29;
  char *v30;
  unint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t (*v46)(void);
  unint64_t v47;
  unint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  objc_class *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  void (*v69)(uint64_t *, _QWORD);
  _QWORD *v70;
  _QWORD *v71;
  objc_class *v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t *v76;
  char *v77;
  void (*v78)(uint64_t *, _QWORD);
  _QWORD *v79;
  _QWORD *v80;
  uint64_t (*v82)(uint64_t *);
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  objc_super v100;
  uint64_t v101;
  unint64_t v102;
  objc_super v103;
  objc_super v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;

  v3 = v2;
  type metadata accessor for SSMLParser();
  swift_bridgeObjectRetain();
  v97 = a1;
  v98 = a2;
  v6 = SSMLParser.__allocating_init(ssml:)();
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x130))();
  sub_1A39A4820(&qword_1EE6D2CE0);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1A3ABF990;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  v9 = (id)MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v8 + 64) = MEMORY[0x1E0DEE9D8];
  v10 = (char *)v2 + OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_leafPiles;
  swift_beginAccess();
  v95 = v10;
  *(_QWORD *)v10 = v8;
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD, _QWORD))((*v7 & *v3) + 0x78))(0, 0);
  v11 = (*(uint64_t (**)(_QWORD, _QWORD))((*v7 & *v3) + 0x90))(0, 0);
  v87 = v6;
  v12 = (*(uint64_t (**)(uint64_t))((*v7 & *v6) + 0xE8))(v11);
  if (v12)
  {
    v13 = (void *)v12;
    sub_1A39CBCE4(v12);

  }
  v14 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_voiceTagRanges);
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v16 = v98;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = (unint64_t *)(v14 + 40);
    v18 = v97;
    do
    {
      v19 = *(v17 - 1);
      v20 = *v17;
      v21 = sub_1A3AB4B38();
      sub_1A39CB854(v21, v22, v23, v24);
      swift_bridgeObjectRelease();
      v105 = 0;
      v106 = 0xE000000000000000;
      v107 = 32;
      v108 = 0xE100000000000000;
      sub_1A39A9EC0();
      v25 = sub_1A3AB518C();
      v18 = sub_1A39CB940(v19, v20, v25, v26, v18, v16);
      v28 = v27;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = v28;
      v17 += 2;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v9 = (id)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v16 = v98;
    swift_bridgeObjectRetain();
    v18 = v97;
  }
  v29 = (objc_class *)type metadata accessor for TaggedSSML();
  v30 = (char *)objc_allocWithZone(v29);
  *(_QWORD *)&v30[OBJC_IVAR____TtC12TextToSpeech10TaggedSSML_ssmlSnippets] = v9;
  v31 = (unint64_t *)&v30[OBJC_IVAR____TtC12TextToSpeech10TaggedSSML_originalSSML];
  *v31 = v18;
  v31[1] = v16;
  v104.receiver = v30;
  v104.super_class = v29;
  swift_bridgeObjectRetain();
  v32 = objc_msgSendSuper2(&v104, sel_init);
  v33 = v32;
  v34 = *(_QWORD *)(*(_QWORD *)v10 + 16);
  v35 = (unint64_t)v87;
  if (v34 < 2)
  {
    v72 = (objc_class *)type metadata accessor for VoiceTaggedSSMLSnippet();
    v73 = (char *)objc_allocWithZone(v72);
    v74 = &v73[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_voiceName];
    *(_QWORD *)v74 = 0;
    *((_QWORD *)v74 + 1) = 0;
    v75 = &v73[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_language];
    *(_QWORD *)v75 = 0;
    *((_QWORD *)v75 + 1) = 0;
    v76 = (unint64_t *)&v73[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_ssml];
    *v76 = v18;
    v76[1] = v16;
    swift_beginAccess();
    *(_QWORD *)v74 = 0;
    *((_QWORD *)v74 + 1) = 0;
    v77 = v73;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)v75 = 0;
    *((_QWORD *)v75 + 1) = 0;

    swift_bridgeObjectRelease();
    v103.receiver = v77;
    v103.super_class = v72;
    objc_msgSendSuper2(&v103, sel_init);
    v78 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))((*v7 & *v33) + 0x70))(&v105);
    v80 = v79;
    MEMORY[0x1A8595980]();
    if (*(_QWORD *)((*v80 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v80 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1A3AB4BE0();
    sub_1A3AB4C10();
    sub_1A3AB4BC8();
    v78(&v105, 0);

  }
  else
  {
    v85 = (_QWORD *)v18;
    v86 = v16;
    v36 = 0;
    v82 = *(uint64_t (**)(uint64_t *))((*v7 & *v32) + 0x70);
    v83 = *(_QWORD *)(*(_QWORD *)v10 + 16);
    v84 = v32;
    while (v36 != v34)
    {
      v9 = *(id *)(*(_QWORD *)v95 + 16);
      if (v36 >= (unint64_t)v9)
        goto LABEL_45;
      v37 = (_QWORD *)(*(_QWORD *)v95 + 40 * v36);
      v38 = v37[5];
      v91 = v37[6];
      v92 = v36 + 1;
      v89 = v37[4];
      v90 = v37[7];
      swift_bridgeObjectRetain();
      v39 = v86;
      swift_bridgeObjectRetain();
      v88 = v38;
      swift_bridgeObjectRetain();
      v40 = 0;
      v33 = v85;
      v93 = v9;
      v94 = v36;
      do
      {
        if ((id)v40 == v9)
        {
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        if (v40 != v36)
        {
          if (v40 >= *(_QWORD *)(*(_QWORD *)v95 + 16))
            goto LABEL_42;
          v42 = *(_QWORD *)(*(_QWORD *)v95 + 40 * v40 + 64);
          if (v42 >> 62)
          {
            swift_bridgeObjectRetain();
            v36 = sub_1A3AB5480();
            v96 = v40;
            if (v36)
            {
LABEL_21:
              if (v36 >= 1)
              {
                v43 = 0;
                v99 = v42 & 0xC000000000000001;
                while (1)
                {
                  v44 = v99 ? (_QWORD *)MEMORY[0x1A85960B8](v43, v42) : *(id *)(v42 + 8 * v43 + 32);
                  v45 = v44;
                  v46 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v44) + 0x118);
                  v47 = v46();
                  v46();
                  v49 = (void *)(v48 >> 14);
                  if (v48 >> 14 < v47 >> 14)
                    break;
                  ++v43;
                  v50 = sub_1A3AB4B38();
                  sub_1A39CB854(v50, v51, v52, v53);
                  v54 = swift_bridgeObjectRelease();
                  v55 = ((uint64_t (*)(uint64_t))v46)(v54);
                  v35 = v42;
                  v57 = v56;
                  v105 = 0;
                  v106 = 0xE000000000000000;
                  v101 = 32;
                  v102 = 0xE100000000000000;
                  sub_1A39A9EC0();
                  v58 = sub_1A3AB518C();
                  v60 = v59;
                  v61 = v57;
                  v42 = v35;
                  v33 = (_QWORD *)sub_1A39CB940(v55, v61, v58, v60, (unint64_t)v33, v39);
                  v41 = v62;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  v39 = v41;
                  if (v36 == v43)
                    goto LABEL_14;
                }
                __break(1u);
                goto LABEL_40;
              }
              goto LABEL_43;
            }
          }
          else
          {
            v36 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            v96 = v40;
            if (v36)
              goto LABEL_21;
          }
          v41 = v39;
LABEL_14:
          swift_bridgeObjectRelease();
          v39 = v41;
          v9 = v93;
          v36 = v94;
          v40 = v96;
        }
        ++v40;
      }
      while ((id)v40 != v9);
      v63 = (objc_class *)type metadata accessor for VoiceTaggedSSMLSnippet();
      v64 = (char *)objc_allocWithZone(v63);
      v65 = &v64[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_voiceName];
      *(_QWORD *)v65 = 0;
      *((_QWORD *)v65 + 1) = 0;
      v66 = &v64[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_language];
      *(_QWORD *)v66 = 0;
      *((_QWORD *)v66 + 1) = 0;
      v67 = &v64[OBJC_IVAR____TtC12TextToSpeech22VoiceTaggedSSMLSnippet_ssml];
      *(_QWORD *)v67 = v33;
      *((_QWORD *)v67 + 1) = v39;
      swift_beginAccess();
      *(_QWORD *)v65 = v89;
      *((_QWORD *)v65 + 1) = v88;
      v68 = v64;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      *(_QWORD *)v66 = v91;
      *((_QWORD *)v66 + 1) = v90;

      swift_bridgeObjectRelease();
      v100.receiver = v68;
      v100.super_class = v63;
      v9 = objc_msgSendSuper2(&v100, sel_init);
      v33 = v84;
      v69 = (void (*)(uint64_t *, _QWORD))v82(&v105);
      v71 = v70;
      MEMORY[0x1A8595980]();
      v35 = *(_QWORD *)((*v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v35 >= *(_QWORD *)((*v71 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1A3AB4BE0();
      sub_1A3AB4C10();
      sub_1A3AB4BC8();
      v69(&v105, 0);
      v36 = v92;
      v34 = v83;
      v49 = v87;
      if (v92 == v83)
      {
LABEL_40:

        swift_bridgeObjectRelease();
        return v33;
      }
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    sub_1A3AB4BE0();
    sub_1A3AB4C10();
    sub_1A3AB4BC8();
    ((void (*)(uint64_t *, _QWORD))v9)(&v105, 0);

    return (_QWORD *)v35;
  }
  return v33;
}

unint64_t sub_1A39CB854(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1A39A9718(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1A39A9718(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_1A3AB4ACC();
  }
  __break(1u);
  return result;
}

uint64_t sub_1A39CB940(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  swift_bridgeObjectRetain();
  sub_1A3AB5120();
  v13 = v12;
  swift_bridgeObjectRelease();
  if ((v13 & 0x1000000000000000) != 0)
    goto LABEL_25;
  swift_bridgeObjectRetain();
  sub_1A3AB5120();
  v15 = v14;
  result = swift_bridgeObjectRelease();
  if ((v15 & 0x1000000000000000) != 0)
    goto LABEL_25;
  v17 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v17) = 1;
  v18 = 4 << v17;
  v19 = a1;
  if ((a1 & 0xC) == 4 << v17)
  {
    result = sub_1A39A9718(a1, a5, a6);
    v19 = result;
  }
  v40 = a3;
  v20 = a2;
  v21 = a5 & 0x800000000000000;
  if ((a6 & 0x1000000000000000) != 0)
  {
    v23 = a6 & 0x2000000000000000;
    v25 = a5 & 0xFFFFFFFFFFFFLL;
    v24 = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000) != 0)
      v32 = HIBYTE(a6) & 0xF;
    else
      v32 = a5 & 0xFFFFFFFFFFFFLL;
    if (v32 < v19 >> 16)
      goto LABEL_43;
    result = sub_1A3AB4ACC();
    v22 = result;
    if (v21)
      v26 = 7;
    else
      v26 = 11;
  }
  else
  {
    v22 = v19 >> 16;
    v23 = a6 & 0x2000000000000000;
    v24 = HIBYTE(a6) & 0xF;
    v25 = a5 & 0xFFFFFFFFFFFFLL;
    v26 = 7;
  }
  if (!v23)
    v24 = v25;
  v27 = 4 << (v21 >> 59);
  v28 = v26 | (v24 << 16);
  a2 = v20;
  if ((a6 & 0x1000000000000000) == 0)
    v27 = 8;
  v29 = v20;
  if ((v20 & 0xC) == v27)
  {
    v33 = v20;
    v34 = v22;
    result = sub_1A39A9718(v33, a5, a6);
    v22 = v34;
    v29 = result;
  }
  if ((v26 & 0xC) == v18)
  {
    v35 = v26 | (v24 << 16);
    v36 = v22;
    result = sub_1A39A9718(v35, a5, a6);
    v22 = v36;
    v28 = result;
    if ((a6 & 0x1000000000000000) == 0)
    {
LABEL_17:
      v30 = (v28 >> 16) - (v29 >> 16);
      if ((a4 & 0x1000000000000000) == 0)
        goto LABEL_18;
      goto LABEL_37;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
    goto LABEL_17;
  }
  if (v24 < v29 >> 16)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v24 >= v28 >> 16)
  {
    v37 = v22;
    v38 = sub_1A3AB4ACC();
    v22 = v37;
    v30 = v38;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_18:
      if ((a4 & 0x2000000000000000) != 0)
      {
        result = HIBYTE(a4) & 0xF;
        v31 = v22 + result;
        if (!__OFADD__(v22, result))
          goto LABEL_23;
      }
      else
      {
        result = v40 & 0xFFFFFFFFFFFFLL;
        v31 = v22 + (v40 & 0xFFFFFFFFFFFFLL);
        if (!__OFADD__(v22, v40 & 0xFFFFFFFFFFFFLL))
          goto LABEL_23;
      }
      goto LABEL_39;
    }
LABEL_37:
    v39 = v22;
    result = sub_1A3AB4AB4();
    v31 = v39 + result;
    if (!__OFADD__(v39, result))
    {
LABEL_23:
      result = v31 + v30;
      if (!__OFADD__(v31, v30))
      {
        MEMORY[0x1A8595800](result);
LABEL_25:
        sub_1A3AB4B38();
        sub_1A39CD080();
        sub_1A3AB4A6C();
        swift_bridgeObjectRelease();
        sub_1A3AB4A6C();
        sub_1A39CCE14(a2, a5, a6);
        sub_1A3AB4A6C();
        swift_bridgeObjectRelease();
        return 0;
      }
      goto LABEL_40;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1A39CBCE4(unint64_t a1)
{
  _QWORD *v1;
  char *v2;
  _QWORD *v3;
  char v5;
  uint64_t *v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *__return_ptr);
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char **v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  char v26;
  int64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t j;
  id v63;
  void *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  id v86;
  char isUniquelyReferenced_nonNull_native;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v3 = v1;
  v5 = sub_1A39CC5B8();
  v6 = (uint64_t *)MEMORY[0x1E0DEEDD8];
  if ((v5 & 1) != 0)
  {
    v7 = (char **)((char *)v1 + OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_leafPiles);
    v8 = swift_beginAccess();
    v9 = *((_QWORD *)*v7 + 2);
    if (v9)
    {
      v10 = (uint64_t)&(*v7)[40 * v9];
      v12 = *(_QWORD *)(v10 + 8);
      v11 = *(_QWORD *)(v10 + 16);
      v8 = swift_bridgeObjectRetain();
    }
    else
    {
      v12 = 0;
      v11 = 0;
    }
    v22 = *(uint64_t (**)(void))((*v6 & *v1) + 0x88);
    v23 = ((uint64_t (*)(uint64_t))v22)(v8);
    if (v11)
    {
      if (!v24)
        goto LABEL_79;
      if (v12 == v23 && v11 == v24)
      {
        swift_bridgeObjectRelease();
        v23 = swift_bridgeObjectRelease();
      }
      else
      {
        v26 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        v23 = swift_bridgeObjectRelease();
        if ((v26 & 1) == 0)
          goto LABEL_80;
      }
    }
    else if (v24)
    {
      goto LABEL_79;
    }
    v65 = *((_QWORD *)*v7 + 2);
    if (v65)
    {
      v66 = &(*v7)[40 * v65];
      v68 = *((_QWORD *)v66 - 1);
      v67 = *(_QWORD *)v66;
      v23 = swift_bridgeObjectRetain();
    }
    else
    {
      v68 = 0;
      v67 = 0;
    }
    v69 = (*(uint64_t (**)(uint64_t))((*v6 & *v1) + 0x70))(v23);
    if (v67)
    {
      if (v70)
      {
        if (v68 == v69 && v67 == v70)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_85;
        }
        v72 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        v23 = swift_bridgeObjectRelease();
        if ((v72 & 1) != 0)
        {
LABEL_85:
          v84 = *((_QWORD *)*v7 + 2);
          swift_beginAccess();
          v85 = *v7;
          v86 = (id)a1;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v7 = v85;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if (v84)
              goto LABEL_87;
          }
          else
          {
            v85 = sub_1A39CD06C((uint64_t)v85);
            *v7 = v85;
            if (v84)
            {
LABEL_87:
              if (v84 <= *((_QWORD *)v85 + 2))
              {
                MEMORY[0x1A8595980]();
                if (*(_QWORD *)((*(_QWORD *)&v85[40 * v84 + 24] & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)&v85[40 * v84 + 24] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                {
LABEL_89:
                  sub_1A3AB4C10();
                  sub_1A3AB4BC8();
                  return swift_endAccess();
                }
LABEL_94:
                sub_1A3AB4BE0();
                goto LABEL_89;
              }
LABEL_93:
              __break(1u);
              goto LABEL_94;
            }
          }
          __break(1u);
          goto LABEL_93;
        }
LABEL_80:
        v73 = (*(uint64_t (**)(uint64_t))((*v6 & *v1) + 0x70))(v23);
        v75 = v74;
        v76 = v22();
        v78 = v77;
        v79 = *v7;
        v80 = swift_isUniquelyReferenced_nonNull_native();
        *v7 = v79;
        if ((v80 & 1) == 0)
        {
          v79 = sub_1A39CCF58(0, *((_QWORD *)v79 + 2) + 1, 1, v79);
          *v7 = v79;
        }
        v82 = *((_QWORD *)v79 + 2);
        v81 = *((_QWORD *)v79 + 3);
        if (v82 >= v81 >> 1)
        {
          v79 = sub_1A39CCF58((char *)(v81 > 1), v82 + 1, 1, v79);
          *v7 = v79;
        }
        *((_QWORD *)v79 + 2) = v82 + 1;
        v83 = &v79[40 * v82];
        *((_QWORD *)v83 + 4) = v73;
        *((_QWORD *)v83 + 5) = v75;
        *((_QWORD *)v83 + 6) = v76;
        *((_QWORD *)v83 + 7) = v78;
        *((_QWORD *)v83 + 8) = MEMORY[0x1E0DEE9D8];
        goto LABEL_85;
      }
    }
    else if (!v70)
    {
      goto LABEL_85;
    }
LABEL_79:
    v23 = swift_bridgeObjectRelease();
    goto LABEL_80;
  }
  v13 = *(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0xB8);
  v13(&v102);
  sub_1A39CC8C8();
  sub_1A3AB4B74();
  sub_1A3AB4B74();
  if (v100 == v98 && v101 == v99)
  {
    v14 = swift_bridgeObjectRelease_n();
  }
  else
  {
    v15 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    v14 = swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      v21 = 0;
      v20 = 0;
      goto LABEL_25;
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))((*v6 & *(_QWORD *)a1) + 0xE8))(v14);
  if (*(_QWORD *)(v16 + 16) && (v17 = sub_1A39A2734(0x676E616C3A6C6D78, 0xE800000000000000), (v18 & 1) != 0))
  {
    v19 = (char **)(*(_QWORD *)(v16 + 56) + 16 * v17);
    v21 = *v19;
    v20 = (uint64_t)v19[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    v21 = 0;
    v20 = 0;
  }
  v14 = swift_bridgeObjectRelease();
LABEL_25:
  ((void (*)(uint64_t *__return_ptr, uint64_t))v13)(&v102, v14);
  sub_1A3AB4B74();
  sub_1A3AB4B74();
  v27 = v99;
  if (v100 == v98 && v101 == v99)
  {
    v28 = swift_bridgeObjectRelease_n();
    goto LABEL_29;
  }
  v29 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  v28 = swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
  {
LABEL_29:
    v30 = (*(uint64_t (**)(uint64_t))((*v6 & *(_QWORD *)a1) + 0xE8))(v28);
    if (*(_QWORD *)(v30 + 16) && (v31 = sub_1A39A2734(1701667182, 0xE400000000000000), (v32 & 1) != 0))
    {
      v33 = (uint64_t *)(*(_QWORD *)(v30 + 56) + 16 * v31);
      v34 = *v33;
      v35 = v33[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      v34 = 0;
      v35 = 0;
    }
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  v34 = 0;
  v35 = 0;
LABEL_35:
  if ((sub_1A39CC74C() & 1) == 0)
    goto LABEL_49;
  v36 = (*(uint64_t (**)(void))((*v6 & *(_QWORD *)a1) + 0x130))();
  if ((v38 & 1) != 0)
    goto LABEL_49;
  v27 = v36;
  v2 = v37;
  v39 = (*(uint64_t (**)(void))((*v6 & *(_QWORD *)a1) + 0x148))();
  v96 = v41;
  v97 = v39;
  if ((v42 & 1) != 0)
    goto LABEL_49;
  v92 = v2;
  v93 = (char *)v27;
  v95 = (uint64_t)v21;
  v43 = (unint64_t)&off_1EE6D2000;
  v2 = (char *)OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_voiceTagRanges;
  v21 = *(char **)((char *)v3 + OBJC_IVAR____TtC12TextToSpeech15SSMLVoiceTagger_voiceTagRanges);
  v44 = *((_QWORD *)v21 + 2);
  v27 = v44 + 2;
  if (__OFADD__(v44, 2))
    goto LABEL_104;
  v45 = (char *)swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v2[(_QWORD)v3] = v21;
  v40 = v2;
  if (!(_DWORD)v45 || v27 > *((_QWORD *)v21 + 3) >> 1)
  {
    if (v44 <= v27)
      v46 = v44 + 2;
    else
      v46 = v44;
    v47 = sub_1A39CCE60(v45, v46, 1, v21);
    v40 = v2;
    v21 = v47;
  }
  v2 = v93;
  *(_QWORD *)&v40[(_QWORD)v3] = v21;
  v44 = *((_QWORD *)v21 + 2);
  v43 = *((_QWORD *)v21 + 3);
  v27 = v44 + 1;
  if (v44 >= v43 >> 1)
    goto LABEL_105;
  while (1)
  {
    *((_QWORD *)v21 + 2) = v27;
    v48 = &v21[16 * v44];
    *((_QWORD *)v48 + 4) = v2;
    *((_QWORD *)v48 + 5) = v92;
    v49 = *(char **)&v40[(_QWORD)v3];
    v27 = *((_QWORD *)v49 + 2);
    v50 = *((_QWORD *)v49 + 3);
    if (v27 >= v50 >> 1)
    {
      v2 = v40;
      v49 = sub_1A39CCE60((char *)(v50 > 1), v27 + 1, 1, v49);
      *(_QWORD *)&v2[(_QWORD)v3] = v49;
    }
    *((_QWORD *)v49 + 2) = v27 + 1;
    v51 = &v49[16 * v27];
    v21 = (char *)v95;
    *((_QWORD *)v51 + 4) = v97;
    *((_QWORD *)v51 + 5) = v96;
LABEL_49:
    v52 = *v6;
    if (v35 | v20)
      break;
    v44 = a1;
    v53 = (*(uint64_t (**)(void))((v52 & *(_QWORD *)a1) + 0x100))();
    a1 = v53;
    if ((unint64_t)v53 >> 62)
    {
      if (v53 < 0)
        v44 = v53;
      else
        v44 = v53 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v20 = sub_1A3AB5480();
      if (!v20)
        goto LABEL_99;
    }
    else
    {
      v20 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v20)
        goto LABEL_99;
    }
    if (v20 >= 1)
    {
      for (i = 0; i != v20; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
          v55 = (id)MEMORY[0x1A85960B8](i, a1);
        else
          v55 = *(id *)(a1 + 8 * i + 32);
        v56 = v55;
        sub_1A39CBCE4();

      }
LABEL_99:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease_n();
    }
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    v89 = v21;
    v90 = v40;
    v91 = sub_1A39CCE60((char *)(v43 > 1), v27, 1, v89);
    v40 = v90;
    v21 = v91;
    *(_QWORD *)&v40[(_QWORD)v3] = v91;
  }
  v57 = (*(uint64_t (**)(void))((v52 & *v3) + 0x70))();
  v96 = v58;
  v97 = v57;
  v59 = (*(uint64_t (**)(void))((*v6 & *v3) + 0x88))();
  v94 = v60;
  v95 = v59;
  v2 = *(char **)((*v6 & *v3) + 0x90);
  swift_bridgeObjectRetain();
  ((void (*)(char *, uint64_t))v2)(v21, v20);
  v27 = *(_QWORD *)((*v6 & *v3) + 0x78);
  v61 = ((uint64_t (*)(uint64_t, uint64_t))v27)(v34, v35);
  v44 = a1;
  a1 = (*(uint64_t (**)(uint64_t))((*v6 & *(_QWORD *)a1) + 0x100))(v61);
  if (a1 >> 62)
  {
    v34 = sub_1A3AB5480();
    if (!v34)
      goto LABEL_101;
  }
  else
  {
    v43 = a1 & 0xFFFFFFFFFFFFF8;
    v34 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v34)
      goto LABEL_101;
  }
  if (v34 < 1)
    goto LABEL_103;
  for (j = 0; j != v34; ++j)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v63 = (id)MEMORY[0x1A85960B8](j, a1);
    else
      v63 = *(id *)(a1 + 8 * j + 32);
    v64 = v63;
    sub_1A39CBCE4();

  }
LABEL_101:
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t))v2)(v95, v94);
  ((void (*)(uint64_t, uint64_t))v27)(v97, v96);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39CC5B8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  char v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v16;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (*(_QWORD *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))(&v16);
  v3 = v16 - 1;
  if (v3 < 0xF && ((0x45CDu >> v3) & 1) != 0)
    return (0x7E7Fu >> v3) & 1;
  v4 = (*(uint64_t (**)(_QWORD *))((*v1 & *v0) + 0x100))(v2);
  v5 = v4;
  if (v4 >> 62)
    goto LABEL_20;
  v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v6)
  {
    while (1)
    {
      v7 = (v5 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1A85960B8](0, v5) : *(id *)(v5 + 32);
      v8 = v7;
      v9 = sub_1A39CC5B8();

      if ((v9 & 1) == 0)
        break;
      if (v6 != 1)
      {
        v10 = 5;
        while (1)
        {
          v11 = (v5 & 0xC000000000000001) != 0
              ? (id)MEMORY[0x1A85960B8](v10 - 4, v5)
              : *(id *)(v5 + 8 * v10);
          v12 = v11;
          v13 = v10 - 3;
          if (__OFADD__(v10 - 4, 1))
            break;
          v14 = sub_1A39CC5B8();

          if ((v14 & 1) == 0)
            goto LABEL_17;
          ++v10;
          if (v13 == v6)
            goto LABEL_16;
        }
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        v6 = sub_1A3AB5480();
        if (v6)
          continue;
      }
      goto LABEL_16;
    }
LABEL_17:
    swift_bridgeObjectRelease_n();
    return 0;
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
    return 1;
  }
}

uint64_t sub_1A39CC74C()
{
  _QWORD *v0;
  void (*v1)(uint64_t *__return_ptr);
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8);
  v1(&v11);
  sub_1A39CC8C8();
  sub_1A3AB4B74();
  sub_1A3AB4B74();
  if (v9 == v7 && v10 == v8)
  {
    swift_bridgeObjectRelease_n();
    v5 = 1;
  }
  else
  {
    v3 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    v4 = swift_bridgeObjectRelease();
    if ((v3 & 1) != 0)
    {
      v5 = 1;
    }
    else
    {
      ((void (*)(uint64_t *__return_ptr, uint64_t))v1)(&v11, v4);
      sub_1A3AB4B74();
      sub_1A3AB4B74();
      if (v9 == v7 && v10 == v8)
        v5 = 1;
      else
        v5 = sub_1A3AB5654();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return v5 & 1;
}

unint64_t sub_1A39CC8C8()
{
  unint64_t result;

  result = qword_1EE6D2CE8;
  if (!qword_1EE6D2CE8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for SSMLTag, &type metadata for SSMLTag);
    atomic_store(result, (unint64_t *)&qword_1EE6D2CE8);
  }
  return result;
}

id SSMLVoiceTagger.__deallocating_deinit()
{
  return sub_1A39A8C1C(type metadata accessor for SSMLVoiceTagger);
}

uint64_t method lookup function for VoiceTaggedSSMLSnippet()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.ssml.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.ssml.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.ssml.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.voiceName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.voiceName.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.voiceName.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.language.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.language.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of VoiceTaggedSSMLSnippet.language.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t method lookup function for TaggedSSML()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TaggedSSML.ssmlSnippets.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of TaggedSSML.ssmlSnippets.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of TaggedSSML.ssmlSnippets.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of TaggedSSML.originalSSML.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of TaggedSSML.originalSSML.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of TaggedSSML.originalSSML.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t destroy for SSMLLeafPile()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for SSMLLeafPile(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SSMLLeafPile(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SSMLLeafPile(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SSMLLeafPile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SSMLLeafPile(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SSMLLeafPile(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SSMLLeafPile()
{
  return &type metadata for SSMLLeafPile;
}

uint64_t method lookup function for SSMLVoiceTagger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SSMLVoiceTagger.currentVoiceName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SSMLVoiceTagger.currentVoiceName.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SSMLVoiceTagger.currentVoiceName.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SSMLVoiceTagger.currentLanguage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SSMLVoiceTagger.currentLanguage.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SSMLVoiceTagger.currentLanguage.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SSMLVoiceTagger.tagSSML(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

unint64_t sub_1A39CCE14(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return sub_1A3AB4B38();
  __break(1u);
  return result;
}

char *sub_1A39CCE60(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D2CF0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A39CCF58(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D2CE0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A39CD06C(uint64_t a1)
{
  return sub_1A39CCF58(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_1A39CD080()
{
  unint64_t result;

  result = qword_1EE6D2CF8;
  if (!qword_1EE6D2CF8)
  {
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EE6D2CF8);
  }
  return result;
}

uint64_t TTSAURenderer.executor.getter()
{
  return swift_retain();
}

uint64_t sub_1A39CD0D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 208))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39CD104(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 216);
  v4 = *a1;
  return v3(v2);
}

void *sub_1A39CD140()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 40);
  v2 = v1;
  return v1;
}

void sub_1A39CD180(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = a1;

}

uint64_t (*sub_1A39CD1C4())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1A39CD200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v4[8] = swift_task_alloc();
  type metadata accessor for TTSAURenderer();
  v4[9] = sub_1A39D4188(&qword_1EE6D2D08, v5, (uint64_t (*)(uint64_t))type metadata accessor for TTSAURenderer, (uint64_t)&protocol conformance descriptor for TTSAURenderer);
  v4[10] = sub_1A3AB4C70();
  v4[11] = v6;
  return swift_task_switch();
}

uint64_t sub_1A39CD29C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 64);
  if (v2)
  {
    *(_QWORD *)(v0 + 96) = v2;
    *(_QWORD *)(v0 + 104) = v2;
    swift_retain();
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v3;
    sub_1A39A4820(&qword_1EE6D09F0);
    *v3 = v0;
    v3[1] = sub_1A39CD440;
    return sub_1A3AB4DC0();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 48);
    v9 = *(void **)(v0 + 32);
    v10 = *(void **)(v1 + 48);
    *(_QWORD *)(v1 + 48) = v9;
    v11 = v9;

    sub_1A39A4820(&qword_1EE6D2D10);
    v12 = TTSAsyncThrowingChannel.__allocating_init()();
    v13 = sub_1A3AB4D00();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 1, 1, v13);
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = v1;
    v14[3] = v6;
    v14[4] = v1;
    v14[5] = v8;
    v14[6] = v7;
    v14[7] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain_n();
    *(_QWORD *)(v1 + 64) = sub_1A39CDB64(v5, (uint64_t)&unk_1EE6D2D20, (uint64_t)v14);
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v12);
  }
}

uint64_t sub_1A39CD440()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A39CD494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  sub_1A39CD704(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 64);
  if (*(_QWORD *)(v0 + 96))
  {
    if (v2)
    {
      swift_retain();
      swift_retain();
      sub_1A39A4820(&qword_1EE6D09F0);
      v3 = sub_1A3AB4DA8();
      swift_release();
      swift_release();
      v1 = *(_QWORD *)(v0 + 56);
      if ((v3 & 1) != 0)
        goto LABEL_10;
      v2 = *(_QWORD *)(v1 + 64);
    }
  }
  else if (!v2)
  {
    goto LABEL_10;
  }
  swift_retain();
  swift_release();
  if (v2)
  {
LABEL_9:
    *(_QWORD *)(v0 + 96) = v2;
    *(_QWORD *)(v0 + 104) = v2;
    swift_retain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v4;
    sub_1A39A4820(&qword_1EE6D09F0);
    *v4 = v0;
    v4[1] = sub_1A39CD440;
    return sub_1A3AB4DC0();
  }
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 64);
  if (v2)
  {
    swift_retain();
    goto LABEL_9;
  }
LABEL_10:
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  v10 = *(void **)(v0 + 32);
  v11 = *(void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = v10;
  v12 = v10;

  sub_1A39A4820(&qword_1EE6D2D10);
  v13 = TTSAsyncThrowingChannel.__allocating_init()();
  v14 = sub_1A3AB4D00();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v1;
  v15[3] = v7;
  v15[4] = v1;
  v15[5] = v9;
  v15[6] = v8;
  v15[7] = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain_n();
  *(_QWORD *)(v1 + 64) = sub_1A39CDB64(v6, (uint64_t)&unk_1EE6D2D20, (uint64_t)v15);
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v13);
}

uint64_t type metadata accessor for TTSAURenderer()
{
  return objc_opt_self();
}

void sub_1A39CD704(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t sub_1A39CD710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v8 = sub_1A3AB4C88();
  v7[7] = v8;
  v7[8] = *(_QWORD *)(v8 - 8);
  v7[9] = swift_task_alloc();
  type metadata accessor for TTSAURenderer();
  sub_1A39D4188(&qword_1EE6D2D08, v9, (uint64_t (*)(uint64_t))type metadata accessor for TTSAURenderer, (uint64_t)&protocol conformance descriptor for TTSAURenderer);
  v7[10] = sub_1A3AB4C70();
  v7[11] = v10;
  return swift_task_switch();
}

uint64_t sub_1A39CD7B0()
{
  uint64_t *v0;
  _QWORD *v1;

  TTSKickAudioComponentRegistry();
  v1 = (_QWORD *)swift_task_alloc();
  v0[12] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_1A39CD804;
  return sub_1A39CF164(v0[4], v0[5]);
}

uint64_t sub_1A39CD804()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  _QWORD *v4;

  v2 = *v1;
  v2[13] = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = (_QWORD *)swift_task_alloc();
  v2[14] = (uint64_t)v4;
  *v4 = v2;
  v4[1] = sub_1A39CD894;
  return sub_1A39CE02C(v2[6]);
}

uint64_t sub_1A39CD894()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A39CD904()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v1 = *(void **)(v0 + 104);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = v1;
  sub_1A39A4820(&qword_1EE6D09F0);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 56);

    TTSAsyncThrowingChannel.finish()();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = *(void **)(v0 + 16);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 24);

    TTSAsyncThrowingChannel.fail<>(_:)(v1);
    v8 = *(void **)(v7 + 32);
    *(_QWORD *)(v7 + 32) = 0;

    v6 = v1;
  }

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39CD9E0()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v1 = *(void **)(v0 + 120);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = v1;
  sub_1A39A4820(&qword_1EE6D09F0);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 56);

    TTSAsyncThrowingChannel.finish()();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = *(void **)(v0 + 16);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 24);

    TTSAsyncThrowingChannel.fail<>(_:)(v1);
    v8 = *(void **)(v7 + 32);
    *(_QWORD *)(v7 + 32) = 0;

    v6 = v1;
  }

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39CDABC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A39CDB00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0[4];
  v3 = v0[5];
  v5 = v0[6];
  v4 = v0[7];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1A39B1604;
  return sub_1A39CD710((uint64_t)v6, v7, v8, v2, v3, v5, v4);
}

uint64_t sub_1A39CDB64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1A3AB4D00();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1A3AB4CF4();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_1A39D4F2C(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A3AB4C70();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1A39CDC90()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 64))
  {
    swift_retain();
    sub_1A39A4820(&qword_1EE6D09F0);
    sub_1A3AB4DB4();
    swift_release();
  }
  *(_QWORD *)(v0 + 64) = 0;
  return swift_release();
}

uint64_t TTSAURenderer.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  TTSAURenderer.init()();
  return v0;
}

uint64_t TTSAURenderer.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;

  v1 = sub_1A3AB500C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A3AB5000();
  MEMORY[0x1E0C80A78](v5);
  v6 = sub_1A3AB4808();
  MEMORY[0x1E0C80A78](v6);
  type metadata accessor for TTSExecutor.Serialized();
  v7 = sub_1A3A630D8();
  *(_QWORD *)(v0 + 16) = TTSExecutor.Serialized.__allocating_init(executor:)(v7);
  sub_1A39B11BC(0, (unint64_t *)&qword_1ED1B5420);
  sub_1A3AB47FC();
  sub_1A3AB4FF4();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF8D0], v1);
  *(_QWORD *)(v0 + 24) = sub_1A3AB5030();
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  if (TTSSpeechUnitTestingMode())
    v8 = 512;
  else
    v8 = 256;
  *(_DWORD *)(v0 + 56) = v8;
  *(_DWORD *)(v0 + 60) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 0;
  sub_1A39A4820(&qword_1EE6D09A0);
  *(_QWORD *)(v0 + 80) = sub_1A3A3FDCC();
  *(_QWORD *)(v0 + 88) = 0;
  v9 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = v9;
  return v0;
}

id *TTSAURenderer.deinit()
{
  id *v0;
  id v1;

  v1 = v0[12];
  if (v1)
    objc_msgSend(v1, sel_invalidate);
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TTSAURenderer.__deallocating_deinit()
{
  TTSAURenderer.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1A39CDF80()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 80) + 160))();
  v2 = sub_1A39D192C(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v2 & 0x8000000000000000) != 0 || (v3 = (_QWORD *)v2, (v2 & 0x4000000000000000) != 0))
  {
    v3 = sub_1A39D1A24(v2);
    swift_release();
  }
  v5 = v3;
  sub_1A39D18B0((uint64_t *)&v5, sub_1A39D2494);
  swift_release();
  return (uint64_t)v5;
}

uint64_t sub_1A39CE02C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[17] = a1;
  v2[18] = v1;
  v3 = sub_1A3AB53A8();
  v2[19] = v3;
  v2[20] = *(_QWORD *)(v3 - 8);
  v2[21] = swift_task_alloc();
  v2[22] = type metadata accessor for TTSAURenderer.SpeechBuffer();
  v2[23] = swift_task_alloc();
  type metadata accessor for TTSAURenderer();
  sub_1A39D4188(&qword_1EE6D2D08, v4, (uint64_t (*)(uint64_t))type metadata accessor for TTSAURenderer, (uint64_t)&protocol conformance descriptor for TTSAURenderer);
  v2[24] = sub_1A3AB4C70();
  v2[25] = v5;
  return swift_task_switch();
}

uint64_t sub_1A39CE11C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void (*v5)(void);
  id v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(void **)(v1 + 48);
  *(_QWORD *)(v0 + 208) = v2;
  if (!v2)
    goto LABEL_5;
  v3 = *(void **)(v1 + 32);
  *(_QWORD *)(v0 + 216) = v3;
  if (!v3)
    goto LABEL_5;
  *(_DWORD *)(v1 + 60) = 0;
  v4 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v0 + 224) = v4;
  v5 = *(void (**)(void))(*(_QWORD *)v4 + 160);
  *(_QWORD *)(v0 + 232) = v5;
  v6 = v2;
  v7 = v3;
  v5();
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_cancelSpeechRequest);
  objc_msgSend(v7, sel_maximumFramesToRender);
  objc_msgSend(v7, sel_synthesizeSpeechRequest_, v6);
  objc_msgSend(v7, sel_maximumFramesToRender);
  if ((sub_1A3AB4DCC() & 1) != 0)
  {
    v9 = *(void **)(v0 + 208);
    v8 = *(void **)(v0 + 216);
    TTSAsyncThrowingChannel.finish()();

LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 240) = v11;
  *v11 = v0;
  v11[1] = sub_1A39CE294;
  return sub_1A39CEB98();
}

uint64_t sub_1A39CE294(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  *(_QWORD *)(v5 + 248) = a2;
  *(_QWORD *)(v5 + 256) = v2;
  swift_task_dealloc();
  if (!v2)
    *(_DWORD *)(v5 + 292) = a1;
  return swift_task_switch();
}

uint64_t sub_1A39CE34C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  void (**v14)(id, uint64_t, uint64_t, id, _QWORD, id, void *);
  id v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void (*v21)(void *);
  uint64_t v22;
  uint64_t v23;
  void *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;

  if ((*(_BYTE *)(v0 + 292) & 0x80) != 0)
    objc_msgSend(*(id *)(v0 + 216), sel_reset);
  v1 = *(void **)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  v4 = *(_QWORD *)(v2 + 104);
  if (v4 >> 62)
  {
    v18 = v1;
    swift_bridgeObjectRetain();
    v5 = sub_1A3AB5480();
    if (!v5)
      goto LABEL_12;
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v1;
    swift_bridgeObjectRetain();
    if (!v5)
      goto LABEL_12;
  }
  if (v5 < 1)
    __break(1u);
  v7 = 0;
  v32 = v4 & 0xC000000000000001;
  v33 = v5;
  v34 = v4;
  do
  {
    if (v32)
      v8 = (id)MEMORY[0x1A85960B8](v7, v4);
    else
      v8 = *(id *)(v4 + 8 * v7 + 32);
    v10 = v8;
    v11 = *(void **)(v0 + 248);
    v12 = *(_QWORD *)(v0 + 144);
    ++v7;
    *(_DWORD *)(v0 + 288) = 64;
    LODWORD(v9) = *(_DWORD *)(v12 + 60);
    *(double *)(v0 + 16) = (double)v9;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 24) = 0u;
    *(_QWORD *)(v0 + 72) = 1;
    v13 = objc_msgSend(v8, sel_AUAudioUnit);
    v14 = (void (**)(id, uint64_t, uint64_t, id, _QWORD, id, void *))objc_msgSend(v13, sel_renderBlock);

    v15 = objc_msgSend(v11, sel_frameLength);
    v16 = objc_msgSend(v11, sel_mutableAudioBufferList);
    *(_QWORD *)(v0 + 112) = sub_1A39D4CEC;
    *(_QWORD *)(v0 + 120) = v3;
    *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 88) = 1107296256;
    *(_QWORD *)(v0 + 96) = sub_1A39CF0BC;
    *(_QWORD *)(v0 + 104) = &unk_1E4AA2668;
    v17 = _Block_copy((const void *)(v0 + 80));
    swift_retain_n();
    swift_release();
    v14[2](v14, v0 + 288, v0 + 16, v15, 0, v16, v17);

    _Block_release(v17);
    _Block_release(v14);
    swift_release();
    v4 = v34;
  }
  while (v33 != v7);
LABEL_12:
  swift_release();
  v20 = *(void **)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 256);
  v21 = *(void (**)(void *))(v0 + 232);
  swift_bridgeObjectRelease();
  v21(v20);
  v22 = swift_bridgeObjectRetain();
  v23 = sub_1A39D192C(v22);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 128) = v23;
  sub_1A39D18B0((uint64_t *)(v0 + 128), sub_1A39D1B54);
  if (v19)
    return swift_release();
  v25 = *(void **)(v0 + 248);
  v27 = *(int **)(v0 + 176);
  v26 = *(_QWORD *)(v0 + 184);
  v28 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v0 + 128);
  LODWORD(v28) = *(_DWORD *)(v28 + 60);
  v30 = v25;
  sub_1A3AB437C();
  *(_DWORD *)(v26 + v27[5]) = v28;
  *(_QWORD *)(v26 + v27[6]) = v30;
  *(_QWORD *)(v26 + v27[7]) = v29;
  v31 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 264) = v31;
  *v31 = v0;
  v31[1] = sub_1A39CE6EC;
  return TTSAsyncThrowingChannel.send(_:)(*(_QWORD *)(v0 + 184));
}

uint64_t sub_1A39CE6EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc();
  sub_1A39D4D28(v1);
  return swift_task_switch();
}

uint64_t sub_1A39CE778()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;
  int v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_DWORD *)(v1 + 56);
  v3 = *(_DWORD *)(v1 + 60);
  v4 = __CFADD__(v3, v2);
  v5 = v3 + v2;
  if (v4)
    __break(1u);
  v6 = *(_DWORD *)(v0 + 292);
  *(_DWORD *)(v1 + 60) = v5;
  if ((v6 & 0x80) != 0)
  {
    objc_msgSend(*(id *)(v0 + 216), sel_maximumFramesToRender);
    sub_1A3AB539C();
    v11 = dword_1EE6D2D90;
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 272) = v12;
    *v12 = v0;
    v12[1] = sub_1A39CE91C;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1EE6D2D90 + v11))(5000000000000000, 0, 0, 0, 1);
  }
  else
  {
    v7 = *(void **)(v0 + 248);

    if ((sub_1A3AB4DCC() & 1) != 0)
    {
      v9 = *(void **)(v0 + 208);
      v8 = *(void **)(v0 + 216);
      TTSAsyncThrowingChannel.finish()();

      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v13 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 240) = v13;
      *v13 = v0;
      v13[1] = sub_1A39CE294;
      return sub_1A39CEB98();
    }
  }
}

uint64_t sub_1A39CE91C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[20] + 8))(v2[21], v2[19]);
  return swift_task_switch();
}

uint64_t sub_1A39CE9D8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(v0 + 248);
  objc_msgSend(*(id *)(v0 + 216), sel_maximumFramesToRender);

  v3 = *(void **)(v0 + 208);
  v2 = *(void **)(v0 + 216);
  TTSAsyncThrowingChannel.finish()();

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39CEA7C()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 248);
  v2 = *(void **)(v0 + 216);

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39CEB10()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39CEB98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[12] = v0;
  type metadata accessor for TTSAURenderer();
  v1[13] = sub_1A39D4188(&qword_1EE6D2D08, v2, (uint64_t (*)(uint64_t))type metadata accessor for TTSAURenderer, (uint64_t)&protocol conformance descriptor for TTSAURenderer);
  v1[14] = sub_1A3AB4C70();
  v1[15] = v3;
  return swift_task_switch();
}

uint64_t sub_1A39CEC0C()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t (*v3)(void);
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD *v10;

  v1 = *(_QWORD **)(v0 + 96);
  v2 = (void *)v1[4];
  *(_QWORD *)(v0 + 128) = v2;
  if (v2)
  {
    v3 = *(uint64_t (**)(void))(*v1 + 208);
    v4 = v2;
    v5 = v3();
    *(_QWORD *)(v0 + 136) = v5;
    if (v5)
    {
      v6 = (void *)v5;
      v7 = *(_QWORD *)(v0 + 96);
      v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C89AB8]), sel_initWithPCMFormat_frameCapacity_, v5, *(unsigned int *)(v7 + 56));
      *(_QWORD *)(v0 + 144) = v8;
      if (v8)
      {
        *(_DWORD *)(v0 + 168) = *(_DWORD *)(v7 + 56);
        swift_getObjectType();
        sub_1A3AB4C70();
        return swift_task_switch();
      }

      v4 = v6;
    }

  }
  sub_1A39D4A1C();
  swift_allocError();
  *v10 = 3;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39CED2C()
{
  uint64_t v0;
  int v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_DWORD *)(v0 + 168);
  v2 = *(void **)(v0 + 144);
  v3 = *(void **)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 56) = v0 + 80;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1A39CEDAC;
  v5 = swift_continuation_init();
  sub_1A39CEEB0(v5, v4, v3, v1, v2);
  return swift_continuation_await();
}

uint64_t sub_1A39CEDAC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 152) = v2;
  if (v2)
  {
    swift_willThrow();
  }
  else
  {
    *(_DWORD *)(v1 + 172) = *(_DWORD *)(v1 + 80);
    *(_QWORD *)(v1 + 160) = *(_QWORD *)(v1 + 88);
  }
  return swift_task_switch();
}

uint64_t sub_1A39CEE28()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 136);
  v2 = *(void **)(v0 + 128);

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(unsigned int *)(v0 + 172), *(_QWORD *)(v0 + 160));
}

uint64_t sub_1A39CEE70()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 136);
  v2 = *(void **)(v0 + 128);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39CEEB0(uint64_t a1, uint64_t a2, void *a3, int a4, void *a5)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v9 = sub_1A3AB47E4();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v23 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1A3AB4808();
  v13 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a3;
  *(_DWORD *)(v16 + 24) = a4;
  *(_QWORD *)(v16 + 32) = a5;
  *(_QWORD *)(v16 + 40) = a1;
  aBlock[4] = sub_1A39D4B7C;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A39CF138;
  aBlock[3] = &unk_1E4AA2618;
  v17 = _Block_copy(aBlock);
  v18 = a3;
  v19 = a5;
  sub_1A3AB47F0();
  v24 = MEMORY[0x1E0DEE9D8];
  sub_1A39D4188(&qword_1EE6D23C0, 255, v10, MEMORY[0x1E0DEF510]);
  sub_1A39A4820(&qword_1EE6D23D8);
  sub_1A39C3EF8((unint64_t *)&qword_1EE6D23E0, &qword_1EE6D23D8, MEMORY[0x1E0DEAF38]);
  sub_1A3AB5228();
  MEMORY[0x1A8595E0C](0, v15, v12, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v22);
  return swift_release();
}

uint64_t sub_1A39CF0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v12 = v11(a2, a3, a4, a5, a6);
  swift_release();
  return v12;
}

uint64_t sub_1A39CF138(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_1A39CF164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  type metadata accessor for TTSAURenderer();
  sub_1A39D4188(&qword_1EE6D2D08, v4, (uint64_t (*)(uint64_t))type metadata accessor for TTSAURenderer, (uint64_t)&protocol conformance descriptor for TTSAURenderer);
  v3[20] = sub_1A3AB4C70();
  v3[21] = v5;
  return swift_task_switch();
}

uint64_t sub_1A39CF20C()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  id v3;
  void *v4;
  BOOL v5;
  int v6;
  int32x4_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t (*v17)(void);
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  int32x2_t v25;
  _BYTE v26[20];

  v1 = *(_QWORD **)(v0 + 152);
  v2 = (void *)v1[6];
  *(_QWORD *)(v0 + 176) = v2;
  if (v2)
  {
    v3 = objc_msgSend(v2, sel_voice);
    objc_msgSend(v3, sel_auComponentDesc);
    v25 = *(int32x2_t *)&v26[12];

    v4 = (void *)v1[4];
    if (!v4
      || (v1[11] ? (v5 = *(_QWORD *)(v0 + 136) == 0) : (v5 = 0),
          !v5 ? (v6 = 0) : (v6 = 1),
          (objc_msgSend(v4, sel_componentDescription, *(_QWORD *)&v26[12]),
           v7 = vdupq_lane_s32(v25, 0),
           v7.i64[0] = *(_QWORD *)v26,
           v7.i32[2] = *(_DWORD *)&v26[8],
           (vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v7, *(int32x4_t *)v26))), 0xFuLL))) & 1) != 0)|| v6))
    {
      objc_msgSend((id)objc_opt_self(), sel_registerFirstPartyInProcessAudioUnits);
      v12 = (void *)objc_opt_self();
      *(_QWORD *)(v0 + 56) = v0 + 128;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1A39CF5C8;
      v13 = swift_continuation_init();
      *(_DWORD *)(v0 + 192) = *(_DWORD *)v26;
      v14 = v0 + 192;
      *(_QWORD *)(v14 - 112) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v14 - 104) = 0x40000000;
      *(_QWORD *)(v14 - 96) = sub_1A39CFB94;
      *(_QWORD *)(v14 - 88) = &unk_1E4A9F810;
      *(_QWORD *)(v14 - 80) = v13;
      *(_DWORD *)(v14 + 4) = *(_DWORD *)&v26[4];
      *(_DWORD *)(v14 + 8) = *(_DWORD *)&v26[8];
      *(int32x2_t *)(v14 + 12) = v25;
      objc_msgSend(v12, sel_instantiateWithComponentDescription_options_completionHandler_, v14, 1, v14 - 112);
      return swift_continuation_await();
    }
    v9 = *(_QWORD *)(v0 + 144);
    v8 = *(_QWORD *)(v0 + 152);
    sub_1A39CFCB8(*(_QWORD **)(v0 + 136));
    v10 = *(_QWORD *)(v8 + 104);
    swift_bridgeObjectRetain();
    LOBYTE(v9) = sub_1A39D0B54(v9, v10, (uint64_t)&unk_1EE6D2D78);
    swift_bridgeObjectRelease();
    v11 = *(_QWORD *)(v0 + 152);
    if ((v9 & 1) != 0)
    {
      if ((*(_BYTE *)(v11 + 72) & 1) != 0)
      {
LABEL_19:
        v18 = *(_QWORD *)(v8 + 104);
        if (v18 >> 62)
        {
          swift_bridgeObjectRetain();
          v19 = sub_1A3AB5480();
          if (v19)
            goto LABEL_21;
        }
        else
        {
          v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v19)
          {
LABEL_21:
            if (v19 < 1)
              __break(1u);
            v20 = 0;
            do
            {
              if ((v18 & 0xC000000000000001) != 0)
                v21 = (id)MEMORY[0x1A85960B8](v20, v18);
              else
                v21 = *(id *)(v18 + 8 * v20 + 32);
              v22 = v21;
              ++v20;
              v23 = objc_msgSend(v21, sel_AUAudioUnit);
              objc_msgSend(v23, sel_reset);

            }
            while (v19 != v20);
          }
        }
        v24 = *(void **)(v0 + 176);
        swift_bridgeObjectRelease();

        v17 = *(uint64_t (**)(void))(v0 + 8);
        return v17();
      }
    }
    else
    {
      *(_QWORD *)(v8 + 104) = *(_QWORD *)(v0 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v11 + 72) = 0;
    }
    sub_1A39D0148();
    goto LABEL_19;
  }
  sub_1A39D4A1C();
  swift_allocError();
  *v16 = 1;
  swift_willThrow();
  v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_1A39CF5C8()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 184) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1A39CF668()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _BYTE *v27;
  void (*v28)(id);
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  id v36;
  uint64_t (*v37)(void);
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  void *v45;

  v1 = v0[19];
  v2 = (void *)v0[16];
  v3 = objc_msgSend((id)objc_opt_self(), sel_makeAU_, v2);
  v4 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = v3;

  sub_1A39CFF0C();
  v5 = *(void **)(v1 + 32);
  if (v5)
  {
    v6 = v0[19];
    objc_msgSend(v5, sel_setMaximumFramesToRender_, *(unsigned int *)(v6 + 56));
    v7 = *(void **)(v6 + 32);
    if (v7)
    {
      v8 = v0[19];
      v9 = objc_msgSend(v7, sel_outputBusses);
      v10 = objc_msgSend(v9, sel_objectAtIndexedSubscript_, 0);

      objc_msgSend(v10, sel_setEnabled_, 1);
      v11 = *(void **)(v8 + 32);
      if (v11)
        objc_msgSend(v11, sel_setRenderingOffline_, 1);
    }
  }
  v12 = v0[19];
  *(_QWORD *)(v12 + 88) = 0;
  swift_bridgeObjectRelease();
  v13 = *(void **)(v12 + 32);
  if (v13)
  {
    v14 = (void **)(v0 + 10);
    v15 = v0[19];
    v16 = swift_allocObject();
    swift_weakInit();
    v0[14] = sub_1A39D4A84;
    v0[15] = v16;
    v0[10] = MEMORY[0x1E0C809B0];
    v0[11] = 1107296256;
    v0[12] = sub_1A39CFC20;
    v0[13] = &unk_1E4AA25C8;
    v17 = _Block_copy(v0 + 10);
    v18 = v13;
    swift_release();
    objc_msgSend(v18, sel_setSpeechSynthesisOutputMetadataBlock_, v17);
    _Block_release(v17);

    v19 = *(void **)(v15 + 32);
    if (v19)
    {
      *v14 = 0;
      v20 = objc_msgSend(v19, sel_allocateRenderResourcesAndReturnError_, v0 + 10);
      v21 = *v14;
      if (!v20)
      {
        v34 = (void *)v0[22];
        v36 = v21;
        sub_1A3AB42BC();

        goto LABEL_15;
      }
      v22 = *(void **)(v0[19] + 32);
      v23 = v21;
      if (v22)
      {
        v24 = objc_msgSend(v22, sel_outputBusses);
        v25 = objc_msgSend(v24, sel_objectAtIndexedSubscript_, 0);

        v26 = objc_msgSend(v25, sel_format);
        if (v26)
        {
          v27 = (_BYTE *)v0[19];
          v28 = *(void (**)(id))(*(_QWORD *)v27 + 216);
          v29 = v26;
          v28(v26);

          v27[72] = 0;
          v31 = v0[18];
          v30 = v0[19];
          sub_1A39CFCB8((_QWORD *)v0[17]);
          v32 = *(_QWORD *)(v30 + 104);
          swift_bridgeObjectRetain();
          LOBYTE(v31) = sub_1A39D0B54(v31, v32, (uint64_t)&unk_1EE6D2D78);
          swift_bridgeObjectRelease();
          v33 = v0[19];
          if ((v31 & 1) != 0)
          {
            if ((*(_BYTE *)(v33 + 72) & 1) != 0)
            {
LABEL_19:
              v39 = *(_QWORD *)(v30 + 104);
              if (v39 >> 62)
              {
                swift_bridgeObjectRetain();
                v40 = sub_1A3AB5480();
                if (v40)
                  goto LABEL_21;
              }
              else
              {
                v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
                if (v40)
                {
LABEL_21:
                  if (v40 < 1)
                    __break(1u);
                  v41 = 0;
                  do
                  {
                    if ((v39 & 0xC000000000000001) != 0)
                      v42 = (id)MEMORY[0x1A85960B8](v41, v39);
                    else
                      v42 = *(id *)(v39 + 8 * v41 + 32);
                    v43 = v42;
                    ++v41;
                    v44 = objc_msgSend(v42, sel_AUAudioUnit);
                    objc_msgSend(v44, sel_reset);

                  }
                  while (v40 != v41);
                }
              }
              v45 = (void *)v0[22];
              swift_bridgeObjectRelease();

              v37 = (uint64_t (*)(void))v0[1];
              return v37();
            }
          }
          else
          {
            *(_QWORD *)(v30 + 104) = v0[18];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(_BYTE *)(v33 + 72) = 0;
          }
          sub_1A39D0148();
          goto LABEL_19;
        }
      }
    }
  }
  v34 = (void *)v0[22];
  sub_1A39D4A1C();
  swift_allocError();
  *v35 = 0;
LABEL_15:
  swift_willThrow();

  v37 = (uint64_t (*)(void))v0[1];
  return v37();
}

uint64_t sub_1A39CFAF4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;

  v2 = *(void **)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  swift_willThrow();
  sub_1A39D4A1C();
  swift_allocError();
  *v3 = v1;
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39CFB94(uint64_t result, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  if (a3)
  {
    sub_1A39A4820(&qword_1EE6D09F0);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1A39CFC20(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v4)(uint64_t, id);
  uint64_t v5;
  id v6;

  v4 = *(void (**)(uint64_t, id))(a1 + 32);
  sub_1A39B11BC(0, &qword_1EE6D4000);
  v5 = sub_1A3AB4BB0();
  swift_retain();
  v6 = a3;
  v4(v5, v6);
  swift_release();
  swift_bridgeObjectRelease();

}

_QWORD *sub_1A39CFCB8(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  double v20;

  v2 = result;
  v3 = *(_QWORD *)(v1 + 88);
  if (!result)
  {
    if (!v3)
      return result;
LABEL_6:
    result = *(_QWORD **)(v1 + 32);
    if (!result)
      return result;
    result = objc_msgSend(result, sel_parameterTree);
    if (!result)
      return result;
    v6 = result;
    v7 = objc_msgSend(result, sel_allParameters);

    sub_1A39B11BC(0, &qword_1EE6D2D68);
    v8 = sub_1A3AB4BB0();

    if (!v2)
      return (_QWORD *)swift_bridgeObjectRelease();
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = sub_1A3AB5480();
      result = (_QWORD *)swift_bridgeObjectRelease();
      if (v9)
        goto LABEL_11;
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (_QWORD *)swift_bridgeObjectRetain();
      if (v9)
      {
LABEL_11:
        if (v9 < 1)
        {
          __break(1u);
          return result;
        }
        for (i = 0; i != v9; ++i)
        {
          if ((v8 & 0xC000000000000001) != 0)
            v11 = (id)MEMORY[0x1A85960B8](i, v8);
          else
            v11 = *(id *)(v8 + 8 * i + 32);
          v12 = v11;
          v13 = objc_msgSend(v11, sel_identifier);
          v14 = sub_1A3AB497C();
          v16 = v15;

          if (v2[2] && (v17 = sub_1A39A2734(v14, v16), (v18 & 1) != 0))
          {
            v19 = *(_DWORD *)(v2[7] + 4 * v17);
            swift_bridgeObjectRelease();
            LODWORD(v20) = v19;
            objc_msgSend(v12, sel_setValue_, v20);

          }
          else
          {

            swift_bridgeObjectRelease();
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 88) = v2;
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  if (!v3)
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1A39A2584(v4, v3);
  swift_bridgeObjectRelease();
  result = (_QWORD *)swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
    goto LABEL_6;
  return result;
}

void sub_1A39CFF0C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  BOOL v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;

  v1 = *(void **)(v0 + 32);
  if (v1)
  {
    v2 = v0;
    v16 = v1;
    if (!TTSHasRBSAssertionEntitlement()
      || (objc_msgSend(v16, sel_remoteProcessIdentifier) ? (v3 = MEMORY[0x1E0D87DF0] == 0) : (v3 = 1), v3))
    {

    }
    else
    {
      v4 = objc_msgSend((id)objc_opt_self(), sel_targetWithPid_, objc_msgSend(v16, sel_remoteProcessIdentifier));
      v5 = (void *)sub_1A3AB4958();
      v6 = (void *)sub_1A3AB4958();
      v7 = objc_msgSend((id)objc_opt_self(), sel_attributeWithDomain_name_, v5, v6);

      sub_1A39A4820((uint64_t *)&unk_1EE6D23B0);
      v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_1A3AC00A0;
      *(_QWORD *)(v8 + 32) = v7;
      sub_1A3AB4BC8();
      v9 = objc_allocWithZone(MEMORY[0x1E0D87C90]);
      v10 = v4;
      v11 = v7;
      v12 = (void *)sub_1A3AB4958();
      sub_1A39B11BC(0, &qword_1EE6D2D60);
      v13 = (void *)sub_1A3AB4BA4();
      swift_bridgeObjectRelease();
      v14 = objc_msgSend(v9, sel_initWithExplanation_target_attributes_, v12, v10, v13);

      v15 = *(void **)(v2 + 96);
      *(_QWORD *)(v2 + 96) = v14;

    }
  }
}

void sub_1A39D0148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char **v3;
  char **v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  unsigned int v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char **v37;
  uint64_t v38;
  id v39[2];

  v2 = v1;
  v39[1] = *(id *)MEMORY[0x1E0C80C00];
  v3 = (char **)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
  if (v3)
  {
    v4 = v3;
    if ((*(_BYTE *)(v0 + 72) & 1) != 0)
    {

    }
    else
    {
      v5 = *(_QWORD *)(v0 + 104);
      if (v5 >> 62)
        goto LABEL_20;
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (; v6; v6 = sub_1A3AB5480())
      {
        v32 = v2;
        v33 = v0;
        v36 = v5 & 0xC000000000000001;
        v37 = v4;
        v2 = 4;
        v34 = v6;
        v35 = v5;
        v4 = &selRef_isActive;
        while (1)
        {
          v7 = v36 ? (id)MEMORY[0x1A85960B8](v2 - 4, v5) : *(id *)(v5 + 8 * v2);
          v8 = v7;
          if (__OFADD__(v2 - 4, 1))
            break;
          v38 = v2 - 3;
          v9 = objc_msgSend(v7, sel_AUAudioUnit);
          v10 = objc_msgSend(v9, sel_renderResourcesAllocated);

          if (v10)
          {
            v11 = objc_msgSend(v8, sel_AUAudioUnit);
            objc_msgSend(v11, sel_deallocateRenderResources);

          }
          v12 = objc_msgSend(v8, sel_AUAudioUnit, v32);
          objc_msgSend(v12, sel_setRenderingOffline_, 1);

          v13 = objc_msgSend(v8, sel_AUAudioUnit);
          objc_msgSend(v13, sel_setMaximumFramesToRender_, *(unsigned int *)(v0 + 56));

          v14 = objc_msgSend(v8, sel_AUAudioUnit);
          v15 = objc_msgSend(v14, sel_outputBusses);

          v16 = objc_msgSend(v15, sel_objectAtIndexedSubscript_, 0);
          v39[0] = 0;
          LODWORD(v15) = objc_msgSend(v16, sel_setFormat_error_, v37, v39);

          v17 = v39[0];
          if (!(_DWORD)v15)
            goto LABEL_18;
          v18 = v39[0];
          v19 = objc_msgSend(v8, (SEL)&TTSExecutor.Serialized.ivar_base_size + 2);
          v20 = objc_msgSend(v19, sel_outputBusses);

          v21 = objc_msgSend(v20, sel_objectAtIndexedSubscript_, 0);
          objc_msgSend(v21, sel_setEnabled_, 1);

          v22 = objc_msgSend(v8, (SEL)&TTSExecutor.Serialized.ivar_base_size + 2);
          v23 = objc_msgSend(v22, sel_inputBusses);

          v24 = objc_msgSend(v23, sel_objectAtIndexedSubscript_, 0);
          v39[0] = 0;
          LODWORD(v23) = objc_msgSend(v24, sel_setFormat_error_, v37, v39);

          v17 = v39[0];
          if (!(_DWORD)v23)
            goto LABEL_18;
          v25 = v39[0];
          v26 = objc_msgSend(v8, (SEL)&TTSExecutor.Serialized.ivar_base_size + 2);
          v27 = objc_msgSend(v26, sel_inputBusses);

          v28 = objc_msgSend(v27, sel_objectAtIndexedSubscript_, 0);
          objc_msgSend(v28, sel_setEnabled_, 1);

          v29 = objc_msgSend(v8, (SEL)&TTSExecutor.Serialized.ivar_base_size + 2);
          v39[0] = 0;
          LODWORD(v27) = objc_msgSend(v29, sel_allocateRenderResourcesAndReturnError_, v39);

          v17 = v39[0];
          if (!(_DWORD)v27)
          {
LABEL_18:
            v31 = v17;
            swift_bridgeObjectRelease();
            sub_1A3AB42BC();

            swift_willThrow();
            return;
          }
          v30 = v39[0];

          ++v2;
          v5 = v35;
          v0 = v33;
          if (v38 == v34)
          {

            swift_bridgeObjectRelease();
            goto LABEL_22;
          }
        }
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease();
LABEL_22:
      *(_BYTE *)(v0 + 72) = 1;
    }
  }
}

uint64_t static TTSAURenderer.format(forVoice:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1EE6D2D30 + dword_1EE6D2D30);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A39D5170;
  return v5(a1);
}

uint64_t sub_1A39D0754(void *a1, void *aBlock)
{
  _QWORD *v2;
  id v4;
  _QWORD *v5;
  uint64_t (*v7)(id);

  v2[2] = a1;
  v2[3] = _Block_copy(aBlock);
  v7 = (uint64_t (*)(id))((char *)&dword_1EE6D2D30 + dword_1EE6D2D30);
  v4 = a1;
  v5 = (_QWORD *)swift_task_alloc();
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1A39D07D4;
  return v7(v4);
}

uint64_t sub_1A39D07D4(void *a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, _QWORD);
  void *v4;
  uint64_t v6;

  v3 = *(void (***)(_QWORD, _QWORD))(*v1 + 24);
  v4 = *(void **)(*v1 + 16);
  v6 = *v1;
  swift_task_dealloc();

  ((void (**)(_QWORD, void *))v3)[2](v3, a1);
  _Block_release(v3);

  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1A39D084C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for TTSAURenderer();
  v2 = sub_1A39D4188(&qword_1EE6D2DD8, v1, (uint64_t (*)(uint64_t))type metadata accessor for TTSAURenderer, (uint64_t)&protocol conformance descriptor for TTSAURenderer);
  return TTSActor.unownedExecutor.getter(v0, v2);
}

uint64_t sub_1A39D0890()
{
  return swift_retain();
}

uint64_t TTSAURenderer.SpeechBuffer.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A3AB4388();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t TTSAURenderer.SpeechBuffer.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A3AB4388();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*TTSAURenderer.SpeechBuffer.id.modify())()
{
  return nullsub_19;
}

uint64_t TTSAURenderer.SpeechBuffer.offset.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for TTSAURenderer.SpeechBuffer() + 20));
}

uint64_t TTSAURenderer.SpeechBuffer.offset.setter(int a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TTSAURenderer.SpeechBuffer();
  *(_DWORD *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*TTSAURenderer.SpeechBuffer.offset.modify())(_QWORD, _QWORD)
{
  type metadata accessor for TTSAURenderer.SpeechBuffer();
  return nullsub_19;
}

id TTSAURenderer.SpeechBuffer.audio.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for TTSAURenderer.SpeechBuffer() + 24));
}

void TTSAURenderer.SpeechBuffer.audio.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for TTSAURenderer.SpeechBuffer() + 24);

  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*TTSAURenderer.SpeechBuffer.audio.modify())(_QWORD, _QWORD)
{
  type metadata accessor for TTSAURenderer.SpeechBuffer();
  return nullsub_19;
}

uint64_t TTSAURenderer.SpeechBuffer.markers.getter()
{
  type metadata accessor for TTSAURenderer.SpeechBuffer();
  return swift_bridgeObjectRetain();
}

uint64_t TTSAURenderer.SpeechBuffer.markers.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TTSAURenderer.SpeechBuffer() + 28);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TTSAURenderer.SpeechBuffer.markers.modify())(_QWORD, _QWORD)
{
  type metadata accessor for TTSAURenderer.SpeechBuffer();
  return nullsub_19;
}

uint64_t TTSAURenderer.SpeechBuffer.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  unint64_t v6;

  v2 = v1;
  sub_1A3AB4388();
  sub_1A39D4188(&qword_1ED1B52E0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1A3AB48D4();
  v4 = type metadata accessor for TTSAURenderer.SpeechBuffer();
  sub_1A3AB5720();
  v5 = *(id *)(v1 + *(int *)(v4 + 24));
  sub_1A3AB50D8();

  v6 = *(_QWORD *)(v2 + *(int *)(v4 + 28));
  swift_bridgeObjectRetain();
  sub_1A39D3870(a1, v6);
  return swift_bridgeObjectRelease();
}

id sub_1A39D0B54(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id result;
  void *v14;
  id v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  id v21;
  void *v22;
  unint64_t v24;
  void **v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;

  v4 = a2;
  v5 = a1;
  v6 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_47:
    swift_bridgeObjectRetain();
    v29 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
    if (v7 == v29)
      goto LABEL_4;
LABEL_48:
    LOBYTE(v7) = 0;
    return (id)(v7 & 1);
  }
  swift_bridgeObjectRetain();
  v7 = sub_1A3AB5480();
  swift_bridgeObjectRelease();
  v8 = (unint64_t)v4 >> 62;
  if ((unint64_t)v4 >> 62)
    goto LABEL_47;
LABEL_3:
  if (v7 != *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_48;
LABEL_4:
  if (!v7)
    goto LABEL_37;
  v9 = v5 & 0xFFFFFFFFFFFFFF8;
  if (v5 < 0)
    v9 = v5;
  if (!v6)
    v9 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
  v10 = v4 & 0xFFFFFFFFFFFFFF8;
  v11 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v4 < 0)
    v12 = v4;
  else
    v12 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v8)
    v11 = v12;
  if (v9 == v11)
  {
LABEL_37:
    LOBYTE(v7) = 1;
    return (id)(v7 & 1);
  }
  if ((v7 & 0x8000000000000000) != 0)
    goto LABEL_54;
  v30 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
    goto LABEL_55;
  for (result = *(id *)(v5 + 32); ; result = (id)MEMORY[0x1A85960B8](0, v5))
  {
    v14 = result;
    if ((v4 & 0xC000000000000001) == 0)
      break;
    v15 = (id)MEMORY[0x1A85960B8](0, v4);
LABEL_21:
    v16 = v15;
    sub_1A39B11BC(0, (unint64_t *)a3);
    a3 = sub_1A3AB50CC();

    if ((a3 & 1) == 0)
      goto LABEL_48;
    v17 = v7 - 1;
    if (v7 == 1)
      return (id)(v7 & 1);
    if (((v4 | v5) & 0xC000000000000001) != 0)
    {
      v18 = 0;
      v19 = v7 - 2;
      while (v17 != v18)
      {
        v7 = v18 + 1;
        if (v30)
          v20 = (id)MEMORY[0x1A85960B8](v18 + 1, v5);
        else
          v20 = *(id *)(v5 + 40 + 8 * v18);
        a3 = (uint64_t)v20;
        if ((v4 & 0xC000000000000001) != 0)
        {
          v21 = (id)MEMORY[0x1A85960B8](v18 + 1, v4);
        }
        else
        {
          if (v7 >= *(_QWORD *)(v10 + 16))
            goto LABEL_53;
          v21 = *(id *)(v4 + 40 + 8 * v18);
        }
        v22 = v21;
        v7 = sub_1A3AB50CC();

        if ((v7 & 1) != 0 && v19 != v18++)
          continue;
        return (id)(v7 & 1);
      }
      __break(1u);
    }
    else
    {
      v24 = *(_QWORD *)(v10 + 16);
      if (v24 <= 1)
        v24 = 1;
      a3 = v24 - 1;
      v25 = (void **)(v5 + 40);
      v10 = v4 + 40;
      while (v17)
      {
        if (!a3)
          goto LABEL_52;
        v27 = *v25++;
        v26 = v27;
        v28 = *(void **)v10;
        v10 += 8;
        v4 = v26;
        v5 = v28;
        v7 = sub_1A3AB50CC();

        if ((v7 & 1) != 0)
        {
          --a3;
          if (--v17)
            continue;
        }
        return (id)(v7 & 1);
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    ;
  }
  if (*(_QWORD *)(v10 + 16))
  {
    v15 = *(id *)(v4 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t TTSAURenderer.SpeechBuffer.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  _BYTE v6[72];

  v1 = v0;
  sub_1A3AB56FC();
  sub_1A3AB4388();
  sub_1A39D4188(&qword_1ED1B52E0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1A3AB48D4();
  v2 = type metadata accessor for TTSAURenderer.SpeechBuffer();
  sub_1A3AB5720();
  v3 = *(id *)(v0 + *(int *)(v2 + 24));
  sub_1A3AB50D8();

  v4 = *(_QWORD *)(v1 + *(int *)(v2 + 28));
  swift_bridgeObjectRetain();
  sub_1A39D3870((uint64_t)v6, v4);
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A39D0F20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  unint64_t v5;
  _BYTE v7[72];

  v3 = v1;
  sub_1A3AB56FC();
  sub_1A3AB4388();
  sub_1A39D4188(&qword_1ED1B52E0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1A3AB48D4();
  sub_1A3AB5720();
  v4 = *(id *)(v1 + *(int *)(a1 + 24));
  sub_1A3AB50D8();

  v5 = *(_QWORD *)(v3 + *(int *)(a1 + 28));
  swift_bridgeObjectRetain();
  sub_1A39D3870((uint64_t)v7, v5);
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A39D0FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  id v6;
  unint64_t v7;

  v4 = v2;
  sub_1A3AB4388();
  sub_1A39D4188(&qword_1ED1B52E0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1A3AB48D4();
  sub_1A3AB5720();
  v6 = *(id *)(v2 + *(int *)(a2 + 24));
  sub_1A3AB50D8();

  v7 = *(_QWORD *)(v4 + *(int *)(a2 + 28));
  swift_bridgeObjectRetain();
  sub_1A39D3870(a1, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39D10AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  id v5;
  unint64_t v6;
  _BYTE v8[72];

  v4 = v2;
  sub_1A3AB56FC();
  sub_1A3AB4388();
  sub_1A39D4188(&qword_1ED1B52E0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1A3AB48D4();
  sub_1A3AB5720();
  v5 = *(id *)(v2 + *(int *)(a2 + 24));
  sub_1A3AB50D8();

  v6 = *(_QWORD *)(v4 + *(int *)(a2 + 28));
  swift_bridgeObjectRetain();
  sub_1A39D3870((uint64_t)v8, v6);
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

_DWORD *sub_1A39D117C@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_1A39D1188@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_1A39D1198(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

void sub_1A39D11A4(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1A39D11AC@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1A39D11C0@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_1A39D11D4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1A39D11E8(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1A39D1218@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1A39D1244@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1A39D1268(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_1A39D127C(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *sub_1A39D1290(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *sub_1A39D12A4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1A39D12B8(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1A39D12CC(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1A39D12E0(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1A39D12F4()
{
  _DWORD *v0;

  return *v0 == 0;
}

_DWORD *sub_1A39D1304(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

BOOL sub_1A39D1318(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1A39D132C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = sub_1A39D3F04(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1A39D1368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = sub_1A3AB5390();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t sub_1A39D140C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  sub_1A3AB53A8();
  sub_1A39D4188(&qword_1EE6D2D98, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  sub_1A3AB5684();
  sub_1A39D4188(&qword_1EE6D2DA0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0B60], MEMORY[0x1E0DF0B90]);
  sub_1A3AB53B4();
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v4;
  v4(v1, v2);
  v5 = (_QWORD *)swift_task_alloc();
  v0[13] = v5;
  *v5 = v0;
  v5[1] = sub_1A39D152C;
  return sub_1A3AB5690();
}

uint64_t sub_1A39D152C()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1A39D15D8()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39D1614(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_1A39D5174;
  return v6();
}

uint64_t sub_1A39D1668(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_1A39D5174;
  return v7();
}

uint64_t sub_1A39D16BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1A3AB4D00();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1A3AB4CF4();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1A39D4F2C(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A3AB4C70();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1A39D1800(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1A39D1864;
  return v6(a1);
}

uint64_t sub_1A39D1864()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A39D18B0(uint64_t *a1, void (*a2)(_QWORD *))
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _QWORD v8[2];

  v4 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    sub_1A39D3E44();
  v6 = *(_QWORD *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  a2(v8);
  return sub_1A3AB5330();
}

uint64_t sub_1A39D192C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v2 = sub_1A3AB524C();
    if (v2)
      goto LABEL_3;
    return MEMORY[0x1E0DEE9D8];
  }
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
LABEL_3:
  if (v2 <= 0)
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    sub_1A39A4820((uint64_t *)&unk_1EE6D23B0);
    v3 = (_QWORD *)swift_allocObject();
    v4 = j__malloc_size(v3);
    v5 = v4 - 32;
    if (v4 < 32)
      v5 = v4 - 25;
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  v6 = sub_1A39D3B3C(&v8, v3 + 4, v2, a1);
  result = sub_1A39AE7C4();
  if (v6 == (_QWORD *)v2)
    return (uint64_t)v3;
  __break(1u);
  return result;
}

_QWORD *sub_1A39D1A24(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v2 <= 0)
    {
      v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      sub_1A39A4820((uint64_t *)&unk_1EE6D23B0);
      v3 = (_QWORD *)swift_allocObject();
      v4 = j__malloc_size(v3);
      v5 = v4 - 32;
      if (v4 < 32)
        v5 = v4 - 25;
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1A39D3984((uint64_t)(v3 + 4), v2, v1);
    v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v2 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
    if (!v2)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t type metadata accessor for TTSAURenderer.SpeechBuffer()
{
  uint64_t result;

  result = qword_1EE6D7910;
  if (!qword_1EE6D7910)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1A39D1B54(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  BOOL v21;
  id v22;
  id v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  char v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  char *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;

  v3 = a1[1];
  v4 = sub_1A3AB5618();
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_158;
    if (v3)
      sub_1A39D2CE4(0, v3, 1, a1);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_157;
  v116 = v4;
  v118 = v3;
  v114 = a1;
  if (v3 > 1)
  {
    v6 = v5 >> 1;
    sub_1A39B11BC(0, &qword_1EE6D4000);
    v7 = sub_1A3AB4BF8();
    *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    v3 = v118;
    v123 = (char *)((v7 & 0xFFFFFFFFFFFFFF8) + 32);
    v124 = v7;
LABEL_12:
    v9 = 0;
    v10 = *a1;
    v115 = v10 - 8;
    v8 = (char *)MEMORY[0x1E0DEE9D8];
    v11 = &selRef__applyWebKitBehaviors;
    while (1)
    {
      v13 = v9 + 1;
      v119 = v9;
      if (v9 + 1 >= v3)
        goto LABEL_49;
      v14 = *(void **)(v10 + 8 * v9);
      v15 = *(id *)(v10 + 8 * v13);
      v16 = v14;
      v17 = objc_msgSend(v15, v11[242]);
      if (v17 != objc_msgSend(v16, v11[242]))
        break;
      v18 = objc_msgSend(v15, sel_mark);
      if (v18 == objc_msgSend(v16, sel_mark) && objc_msgSend(v15, sel_mark) == (id)1)
      {
        v19 = objc_msgSend(v15, sel_textRange);
        v20 = objc_msgSend(v16, sel_textRange);

        v21 = (uint64_t)v19 < (uint64_t)v20;
        v13 = v9 + 1;
        goto LABEL_21;
      }

      v25 = v9 + 2;
      if (v9 + 2 >= v118)
        goto LABEL_41;
      v120 = 1;
LABEL_28:
      v26 = v25;
      do
      {
        v25 = v26;
        v29 = *(void **)(v10 + 8 * v13);
        v30 = *(id *)(v10 + 8 * v26);
        v31 = v29;
        v11 = &selRef__applyWebKitBehaviors;
        v32 = v31;
        v33 = objc_msgSend(v30, sel_byteSampleOffset);
        if (v33 == objc_msgSend(v32, sel_byteSampleOffset))
        {
          v34 = objc_msgSend(v30, sel_mark);
          if (v34 == objc_msgSend(v32, sel_mark) && objc_msgSend(v30, sel_mark) == (id)1)
          {
            v35 = objc_msgSend(v30, sel_textRange);
            v36 = objc_msgSend(v32, sel_textRange);

            v9 = v119;
            if (((v120 ^ ((uint64_t)v35 >= (uint64_t)v36)) & 1) == 0)
              goto LABEL_39;
          }
          else
          {

            v9 = v119;
            if (!v120)
              goto LABEL_48;
          }
        }
        else
        {
          v27 = objc_msgSend(v30, sel_byteSampleOffset);
          v28 = objc_msgSend(v32, sel_byteSampleOffset);

          if (((v120 ^ ((uint64_t)v27 >= (uint64_t)v28)) & 1) == 0)
            goto LABEL_39;
        }
        v26 = v25 + 1;
        v13 = v25;
      }
      while (v25 + 1 < v118);
      ++v25;
LABEL_39:
      if (v120)
      {
        if (v25 < v9)
          goto LABEL_159;
LABEL_41:
        if (v9 < v25)
        {
          v37 = (uint64_t *)(v115 + 8 * v25);
          v38 = v25;
          v39 = v9;
          v40 = (uint64_t *)(v10 + 8 * v9);
          do
          {
            if (v39 != --v38)
            {
              if (!v10)
                goto LABEL_164;
              v41 = *v40;
              *v40 = *v37;
              *v37 = v41;
            }
            ++v39;
            --v37;
            ++v40;
          }
          while (v39 < v38);
        }
      }
LABEL_48:
      v13 = v25;
      v3 = v118;
LABEL_49:
      if (v13 >= v3)
        goto LABEL_74;
      if (__OFSUB__(v13, v9))
        goto LABEL_156;
      if (v13 - v9 >= v116)
        goto LABEL_74;
      if (__OFADD__(v9, v116))
        goto LABEL_160;
      if (v9 + v116 >= v3)
        v42 = v3;
      else
        v42 = v9 + v116;
      if (v42 < v9)
      {
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
        return;
      }
      if (v13 == v42)
        goto LABEL_74;
      v113 = v8;
      v43 = v115 + 8 * v13;
      v117 = v42;
      while (2)
      {
        v44 = *(void **)(v10 + 8 * v13);
        v121 = v43;
        while (1)
        {
          v45 = v13;
          v46 = *(void **)v43;
          v47 = v44;
          v48 = v46;
          v49 = objc_msgSend(v47, v11[242]);
          if (v49 == objc_msgSend(v48, v11[242]))
          {
            v50 = objc_msgSend(v47, sel_mark);
            if (v50 != objc_msgSend(v48, sel_mark) || objc_msgSend(v47, sel_mark) != (id)1)
            {

              if (!v10)
                goto LABEL_162;
              goto LABEL_71;
            }
            v51 = objc_msgSend(v47, sel_textRange);
            v52 = objc_msgSend(v48, sel_textRange);
          }
          else
          {
            v51 = objc_msgSend(v47, v11[242]);
            v52 = objc_msgSend(v48, v11[242]);
          }
          v53 = v52;

          if ((uint64_t)v51 >= (uint64_t)v53)
            break;
          if (!v10)
            goto LABEL_162;
LABEL_71:
          v13 = v45;
          v54 = *(void **)v43;
          v44 = *(void **)(v43 + 8);
          *(_QWORD *)v43 = v44;
          *(_QWORD *)(v43 + 8) = v54;
          v43 -= 8;
          if (v45 == ++v9)
            goto LABEL_60;
        }
        v13 = v45;
LABEL_60:
        ++v13;
        v9 = v119;
        v43 = v121 + 8;
        if (v13 != v117)
          continue;
        break;
      }
      v13 = v117;
      v8 = v113;
LABEL_74:
      if (v13 < v9)
        goto LABEL_151;
      v122 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_1A39D3764(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      v56 = *((_QWORD *)v8 + 2);
      v55 = *((_QWORD *)v8 + 3);
      v12 = v56 + 1;
      if (v56 >= v55 >> 1)
        v8 = sub_1A39D3764((char *)(v55 > 1), v56 + 1, 1, v8);
      *((_QWORD *)v8 + 2) = v12;
      v57 = v8 + 32;
      v58 = &v8[16 * v56 + 32];
      *(_QWORD *)v58 = v9;
      *((_QWORD *)v58 + 1) = v122;
      if (v56)
      {
        while (2)
        {
          v59 = v12 - 1;
          if (v12 >= 4)
          {
            v64 = &v57[16 * v12];
            v65 = *((_QWORD *)v64 - 8);
            v66 = *((_QWORD *)v64 - 7);
            v70 = __OFSUB__(v66, v65);
            v67 = v66 - v65;
            if (v70)
              goto LABEL_140;
            v69 = *((_QWORD *)v64 - 6);
            v68 = *((_QWORD *)v64 - 5);
            v70 = __OFSUB__(v68, v69);
            v62 = v68 - v69;
            v63 = v70;
            if (v70)
              goto LABEL_141;
            v71 = v12 - 2;
            v72 = &v57[16 * v12 - 32];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v70 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v70)
              goto LABEL_142;
            v70 = __OFADD__(v62, v75);
            v76 = v62 + v75;
            if (v70)
              goto LABEL_144;
            if (v76 >= v67)
            {
              v94 = &v57[16 * v59];
              v96 = *(_QWORD *)v94;
              v95 = *((_QWORD *)v94 + 1);
              v70 = __OFSUB__(v95, v96);
              v97 = v95 - v96;
              if (v70)
                goto LABEL_150;
              v87 = v62 < v97;
            }
            else
            {
LABEL_93:
              if ((v63 & 1) != 0)
                goto LABEL_143;
              v71 = v12 - 2;
              v77 = &v57[16 * v12 - 32];
              v79 = *(_QWORD *)v77;
              v78 = *((_QWORD *)v77 + 1);
              v80 = __OFSUB__(v78, v79);
              v81 = v78 - v79;
              v82 = v80;
              if (v80)
                goto LABEL_145;
              v83 = &v57[16 * v59];
              v85 = *(_QWORD *)v83;
              v84 = *((_QWORD *)v83 + 1);
              v70 = __OFSUB__(v84, v85);
              v86 = v84 - v85;
              if (v70)
                goto LABEL_147;
              if (__OFADD__(v81, v86))
                goto LABEL_149;
              if (v81 + v86 < v62)
                goto LABEL_105;
              v87 = v62 < v86;
            }
            if (v87)
              v59 = v71;
          }
          else
          {
            if (v12 == 3)
            {
              v61 = *((_QWORD *)v8 + 4);
              v60 = *((_QWORD *)v8 + 5);
              v70 = __OFSUB__(v60, v61);
              v62 = v60 - v61;
              v63 = v70;
              goto LABEL_93;
            }
            v88 = *((_QWORD *)v8 + 4);
            v89 = *((_QWORD *)v8 + 5);
            v70 = __OFSUB__(v89, v88);
            v81 = v89 - v88;
            v82 = v70;
LABEL_105:
            if ((v82 & 1) != 0)
              goto LABEL_146;
            v90 = &v57[16 * v59];
            v92 = *(_QWORD *)v90;
            v91 = *((_QWORD *)v90 + 1);
            v70 = __OFSUB__(v91, v92);
            v93 = v91 - v92;
            if (v70)
              goto LABEL_148;
            if (v93 < v81)
              goto LABEL_14;
          }
          v98 = v59 - 1;
          if (v59 - 1 >= v12)
          {
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
            goto LABEL_161;
          }
          v99 = v10;
          if (!v10)
            goto LABEL_163;
          v100 = v8;
          v101 = &v57[16 * v98];
          v102 = *(_QWORD *)v101;
          v103 = &v57[16 * v59];
          v104 = *((_QWORD *)v103 + 1);
          v105 = v99;
          sub_1A39D2FB0((char *)(v99 + 8 * *(_QWORD *)v101), (char *)(v99 + 8 * *(_QWORD *)v103), v99 + 8 * v104, v123);
          if (v1)
            goto LABEL_134;
          if (v104 < v102)
            goto LABEL_137;
          if (v59 > *((_QWORD *)v100 + 2))
            goto LABEL_138;
          *(_QWORD *)v101 = v102;
          *(_QWORD *)&v57[16 * v98 + 8] = v104;
          v106 = *((_QWORD *)v100 + 2);
          if (v59 >= v106)
            goto LABEL_139;
          v8 = v100;
          v12 = v106 - 1;
          memmove(&v57[16 * v59], v103 + 16, 16 * (v106 - 1 - v59));
          *((_QWORD *)v100 + 2) = v106 - 1;
          v10 = v105;
          v11 = &selRef__applyWebKitBehaviors;
          if (v106 <= 2)
            goto LABEL_14;
          continue;
        }
      }
      v12 = 1;
LABEL_14:
      v3 = v118;
      v9 = v122;
      if (v122 >= v118)
        goto LABEL_123;
    }
    v22 = objc_msgSend(v15, v11[242]);
    v23 = objc_msgSend(v16, v11[242]);

    v21 = (uint64_t)v22 < (uint64_t)v23;
    v13 = v9 + 1;
LABEL_21:
    v24 = v21;
    v120 = v24;
    v25 = v9 + 2;
    if (v9 + 2 >= v118)
      goto LABEL_39;
    goto LABEL_28;
  }
  v8 = (char *)MEMORY[0x1E0DEE9D8];
  v124 = MEMORY[0x1E0DEE9D8];
  v123 = (char *)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
  if (v3 == 1)
    goto LABEL_12;
  v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_123:
  if (v12 >= 2)
  {
    v107 = *v114;
    do
    {
      v108 = v12 - 2;
      if (v12 < 2)
        goto LABEL_152;
      if (!v107)
        goto LABEL_165;
      v109 = *(_QWORD *)&v8[16 * v108 + 32];
      v110 = *(_QWORD *)&v8[16 * v12 + 24];
      sub_1A39D2FB0((char *)(v107 + 8 * v109), (char *)(v107 + 8 * *(_QWORD *)&v8[16 * v12 + 16]), v107 + 8 * v110, v123);
      if (v1)
        break;
      if (v110 < v109)
        goto LABEL_153;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_1A39D385C((uint64_t)v8);
      if (v108 >= *((_QWORD *)v8 + 2))
        goto LABEL_154;
      v111 = &v8[16 * v108 + 32];
      *(_QWORD *)v111 = v109;
      *((_QWORD *)v111 + 1) = v110;
      v112 = *((_QWORD *)v8 + 2);
      if (v12 > v112)
        goto LABEL_155;
      memmove(&v8[16 * v12 + 16], &v8[16 * v12 + 32], 16 * (v112 - v12));
      *((_QWORD *)v8 + 2) = v112 - 1;
      v12 = v112 - 1;
    }
    while (v112 > 2);
  }
LABEL_134:
  swift_bridgeObjectRelease();
  *(_QWORD *)((v124 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
  sub_1A3AB4BC8();
  swift_bridgeObjectRelease();
}

void sub_1A39D2494(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  BOOL v20;
  id v21;
  id v22;
  int v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id *v115;
  uint64_t v116;
  uint64_t v117;

  v2 = v1;
  v4 = a1[1];
  v5 = sub_1A3AB5618();
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_148;
    if (v4)
      sub_1A39D2E6C(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_147;
  v7 = v5;
  v114 = v4;
  v110 = a1;
  if (v4 <= 1)
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
    v117 = MEMORY[0x1E0DEE9D8];
    v115 = (id *)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v13 < 2)
        goto LABEL_124;
      goto LABEL_112;
    }
  }
  else
  {
    v8 = v6 >> 1;
    sub_1A39B11BC(0, &qword_1EE6D4000);
    v9 = sub_1A3AB4BF8();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v4 = v114;
    v115 = (id *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v117 = v9;
  }
  v112 = v7;
  v11 = 0;
  v12 = *a1;
  v111 = *a1 - 8;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v116 = *a1;
  while (1)
  {
    v14 = v11++;
    if (v11 < v4)
    {
      v15 = *(void **)(v12 + 8 * v14);
      v16 = *(id *)(v12 + 8 * v11);
      v17 = v15;
      if (objc_msgSend(v16, sel_mark) == (id)1 && objc_msgSend(v17, sel_mark) == (id)1)
      {
        v18 = objc_msgSend(v16, sel_textRange);
        v19 = objc_msgSend(v17, sel_textRange);

        v20 = (uint64_t)v18 < (uint64_t)v19;
      }
      else
      {
        v21 = objc_msgSend(v16, sel_byteSampleOffset);
        v22 = objc_msgSend(v17, sel_byteSampleOffset);

        v20 = (uint64_t)v21 < (uint64_t)v22;
      }
      v23 = v20;
      v24 = v14 + 2;
      if (v14 + 2 >= v114)
      {
LABEL_30:
        v12 = v116;
        if (!v23)
        {
LABEL_40:
          v11 = v24;
          v4 = v114;
          goto LABEL_41;
        }
      }
      else
      {
        v12 = v116;
        do
        {
          v28 = *(void **)(v12 + 8 * v11);
          v29 = *(id *)(v12 + 8 * v24);
          v30 = v28;
          if (objc_msgSend(v29, sel_mark) == (id)1 && objc_msgSend(v30, sel_mark) == (id)1)
          {
            v31 = objc_msgSend(v29, sel_textRange);
            v32 = objc_msgSend(v30, sel_textRange);

            if (((v23 ^ ((uint64_t)v31 >= (uint64_t)v32)) & 1) == 0)
              goto LABEL_30;
          }
          else
          {
            v25 = objc_msgSend(v29, sel_byteSampleOffset);
            v26 = objc_msgSend(v30, sel_byteSampleOffset);

            if (v23 == (uint64_t)v25 >= (uint64_t)v26)
              goto LABEL_30;
          }
          v27 = v24 + 1;
          v11 = v24;
          v24 = v27;
          v12 = v116;
        }
        while (v27 < v114);
        v24 = v27;
        if (!v23)
          goto LABEL_40;
      }
      if (v24 < v14)
        goto LABEL_149;
      if (v14 < v24)
      {
        v33 = (uint64_t *)(v111 + 8 * v24);
        v34 = v24;
        v35 = v14;
        v36 = (uint64_t *)(v12 + 8 * v14);
        while (1)
        {
          if (v35 != --v34)
          {
            if (!v12)
              goto LABEL_154;
            v37 = *v36;
            *v36 = *v33;
            *v33 = v37;
          }
          ++v35;
          --v33;
          ++v36;
          if (v35 >= v34)
            goto LABEL_40;
        }
      }
      goto LABEL_40;
    }
LABEL_41:
    if (v11 < v4)
    {
      if (__OFSUB__(v11, v14))
        goto LABEL_146;
      if (v11 - v14 < v112)
        break;
    }
LABEL_63:
    if (v11 < v14)
      goto LABEL_141;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_1A39D3764(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v51 = *((_QWORD *)v10 + 2);
    v50 = *((_QWORD *)v10 + 3);
    v13 = v51 + 1;
    v12 = v116;
    if (v51 >= v50 >> 1)
    {
      v100 = sub_1A39D3764((char *)(v50 > 1), v51 + 1, 1, v10);
      v12 = v116;
      v10 = v100;
    }
    *((_QWORD *)v10 + 2) = v13;
    v52 = v10 + 32;
    v53 = &v10[16 * v51 + 32];
    *(_QWORD *)v53 = v14;
    *((_QWORD *)v53 + 1) = v11;
    if (v51)
    {
      while (1)
      {
        v54 = v13 - 1;
        if (v13 >= 4)
        {
          v59 = &v52[16 * v13];
          v60 = *((_QWORD *)v59 - 8);
          v61 = *((_QWORD *)v59 - 7);
          v65 = __OFSUB__(v61, v60);
          v62 = v61 - v60;
          if (v65)
            goto LABEL_130;
          v64 = *((_QWORD *)v59 - 6);
          v63 = *((_QWORD *)v59 - 5);
          v65 = __OFSUB__(v63, v64);
          v57 = v63 - v64;
          v58 = v65;
          if (v65)
            goto LABEL_131;
          v66 = v13 - 2;
          v67 = &v52[16 * v13 - 32];
          v69 = *(_QWORD *)v67;
          v68 = *((_QWORD *)v67 + 1);
          v65 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          if (v65)
            goto LABEL_132;
          v65 = __OFADD__(v57, v70);
          v71 = v57 + v70;
          if (v65)
            goto LABEL_134;
          if (v71 >= v62)
          {
            v89 = &v52[16 * v54];
            v91 = *(_QWORD *)v89;
            v90 = *((_QWORD *)v89 + 1);
            v65 = __OFSUB__(v90, v91);
            v92 = v90 - v91;
            if (v65)
              goto LABEL_140;
            v82 = v57 < v92;
            goto LABEL_100;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v83 = *((_QWORD *)v10 + 4);
            v84 = *((_QWORD *)v10 + 5);
            v65 = __OFSUB__(v84, v83);
            v76 = v84 - v83;
            v77 = v65;
            goto LABEL_94;
          }
          v56 = *((_QWORD *)v10 + 4);
          v55 = *((_QWORD *)v10 + 5);
          v65 = __OFSUB__(v55, v56);
          v57 = v55 - v56;
          v58 = v65;
        }
        if ((v58 & 1) != 0)
          goto LABEL_133;
        v66 = v13 - 2;
        v72 = &v52[16 * v13 - 32];
        v74 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        v75 = __OFSUB__(v73, v74);
        v76 = v73 - v74;
        v77 = v75;
        if (v75)
          goto LABEL_135;
        v78 = &v52[16 * v54];
        v80 = *(_QWORD *)v78;
        v79 = *((_QWORD *)v78 + 1);
        v65 = __OFSUB__(v79, v80);
        v81 = v79 - v80;
        if (v65)
          goto LABEL_137;
        if (__OFADD__(v76, v81))
          goto LABEL_139;
        if (v76 + v81 >= v57)
        {
          v82 = v57 < v81;
LABEL_100:
          if (v82)
            v54 = v66;
          goto LABEL_102;
        }
LABEL_94:
        if ((v77 & 1) != 0)
          goto LABEL_136;
        v85 = &v52[16 * v54];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v65 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v65)
          goto LABEL_138;
        if (v88 < v76)
          goto LABEL_14;
LABEL_102:
        v93 = v54 - 1;
        if (v54 - 1 >= v13)
        {
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
          goto LABEL_151;
        }
        if (!v12)
          goto LABEL_153;
        v94 = v10;
        v95 = &v52[16 * v93];
        v96 = *(_QWORD *)v95;
        v97 = &v52[16 * v54];
        v98 = *((_QWORD *)v97 + 1);
        sub_1A39D33F4((void **)(v12 + 8 * *(_QWORD *)v95), (id *)(v12 + 8 * *(_QWORD *)v97), v12 + 8 * v98, v115);
        if (v1)
          goto LABEL_124;
        if (v98 < v96)
          goto LABEL_127;
        if (v54 > *((_QWORD *)v94 + 2))
          goto LABEL_128;
        *(_QWORD *)v95 = v96;
        *(_QWORD *)&v52[16 * v93 + 8] = v98;
        v99 = *((_QWORD *)v94 + 2);
        if (v54 >= v99)
          goto LABEL_129;
        v10 = v94;
        v13 = v99 - 1;
        memmove(&v52[16 * v54], v97 + 16, 16 * (v99 - 1 - v54));
        *((_QWORD *)v94 + 2) = v99 - 1;
        v12 = v116;
        if (v99 <= 2)
          goto LABEL_14;
      }
    }
    v13 = 1;
LABEL_14:
    v4 = v114;
    if (v11 >= v114)
    {
      v2 = v1;
      if (v13 < 2)
      {
LABEL_124:
        swift_bridgeObjectRelease();
        *(_QWORD *)((v117 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
        sub_1A3AB4BC8();
        swift_bridgeObjectRelease();
        return;
      }
LABEL_112:
      v101 = *v110;
      while (1)
      {
        v102 = v13 - 2;
        if (v13 < 2)
          goto LABEL_142;
        if (!v101)
          goto LABEL_155;
        v103 = v10;
        v104 = v10 + 32;
        v105 = *(_QWORD *)&v10[16 * v102 + 32];
        v106 = *(_QWORD *)&v10[16 * v13 + 24];
        sub_1A39D33F4((void **)(v101 + 8 * v105), (id *)(v101 + 8 * *(_QWORD *)&v104[16 * v13 - 16]), v101 + 8 * v106, v115);
        if (v2)
          goto LABEL_124;
        if (v106 < v105)
          goto LABEL_143;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v103 = sub_1A39D385C((uint64_t)v103);
        if (v102 >= *((_QWORD *)v103 + 2))
          goto LABEL_144;
        v107 = &v103[16 * v102 + 32];
        *(_QWORD *)v107 = v105;
        *((_QWORD *)v107 + 1) = v106;
        v108 = *((_QWORD *)v103 + 2);
        if (v13 > v108)
          goto LABEL_145;
        v10 = v103;
        memmove(&v103[16 * v13 + 16], &v103[16 * v13 + 32], 16 * (v108 - v13));
        *((_QWORD *)v103 + 2) = v108 - 1;
        v13 = v108 - 1;
        if (v108 <= 2)
          goto LABEL_124;
      }
    }
  }
  if (__OFADD__(v14, v112))
    goto LABEL_150;
  if (v14 + v112 >= v4)
    v38 = v4;
  else
    v38 = v14 + v112;
  if (v38 >= v14)
  {
    if (v11 != v38)
    {
      v109 = v10;
      v39 = v111 + 8 * v11;
      v113 = v38;
      do
      {
        v40 = *(void **)(v12 + 8 * v11);
        v41 = v14;
        v42 = v39;
        while (1)
        {
          v43 = *(void **)v42;
          v44 = v40;
          v45 = v43;
          if (objc_msgSend(v44, sel_mark) == (id)1 && objc_msgSend(v45, sel_mark) == (id)1)
          {
            v46 = objc_msgSend(v44, sel_textRange);
            v47 = objc_msgSend(v45, sel_textRange);
          }
          else
          {
            v46 = objc_msgSend(v44, sel_byteSampleOffset);
            v47 = objc_msgSend(v45, sel_byteSampleOffset);
          }
          v48 = v47;

          if ((uint64_t)v46 >= (uint64_t)v48)
            break;
          v12 = v116;
          if (!v116)
            goto LABEL_152;
          v49 = *(void **)v42;
          v40 = *(void **)(v42 + 8);
          *(_QWORD *)v42 = v40;
          *(_QWORD *)(v42 + 8) = v49;
          v42 -= 8;
          if (v11 == ++v14)
            goto LABEL_52;
        }
        v12 = v116;
LABEL_52:
        ++v11;
        v39 += 8;
        v14 = v41;
      }
      while (v11 != v113);
      v11 = v113;
      v10 = v109;
    }
    goto LABEL_63;
  }
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
}

void sub_1A39D2CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v20;

  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    v7 = *(void **)(v5 + 8 * v4);
    v8 = a1;
    v20 = v6;
    while (1)
    {
      v9 = *(void **)v6;
      v10 = v7;
      v11 = v9;
      v12 = objc_msgSend(v10, sel_byteSampleOffset);
      if (v12 != objc_msgSend(v11, sel_byteSampleOffset))
        break;
      v13 = objc_msgSend(v10, sel_mark);
      if (v13 == objc_msgSend(v11, sel_mark) && objc_msgSend(v10, sel_mark) == (id)1)
      {
        v14 = objc_msgSend(v10, sel_textRange);
        v15 = objc_msgSend(v11, sel_textRange);
LABEL_11:
        v16 = v15;

        if ((uint64_t)v14 >= (uint64_t)v16)
          goto LABEL_4;
        if (!v5)
          goto LABEL_17;
        goto LABEL_15;
      }

      if (!v5)
      {
LABEL_17:
        __break(1u);
        return;
      }
LABEL_15:
      v17 = *(void **)v6;
      v7 = *(void **)(v6 + 8);
      *(_QWORD *)v6 = v7;
      *(_QWORD *)(v6 + 8) = v17;
      v6 -= 8;
      if (v4 == ++v8)
      {
LABEL_4:
        ++v4;
        v6 = v20 + 8;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
    }
    v14 = objc_msgSend(v10, sel_byteSampleOffset);
    v15 = objc_msgSend(v11, sel_byteSampleOffset);
    goto LABEL_11;
  }
}

void sub_1A39D2E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v18;

  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    v7 = *(void **)(v5 + 8 * v4);
    v8 = a1;
    v18 = v6;
    while (1)
    {
      v9 = *(void **)v6;
      v10 = v7;
      v11 = v9;
      if (objc_msgSend(v10, sel_mark) == (id)1 && objc_msgSend(v11, sel_mark) == (id)1)
      {
        v12 = objc_msgSend(v10, sel_textRange);
        v13 = objc_msgSend(v11, sel_textRange);
      }
      else
      {
        v12 = objc_msgSend(v10, sel_byteSampleOffset);
        v13 = objc_msgSend(v11, sel_byteSampleOffset);
      }
      v14 = v13;

      if ((uint64_t)v12 >= (uint64_t)v14)
      {
LABEL_4:
        ++v4;
        v6 = v18 + 8;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
      if (!v5)
        break;
      v15 = *(void **)v6;
      v7 = *(void **)(v6 + 8);
      *(_QWORD *)v6 = v7;
      *(_QWORD *)(v6 + 8) = v15;
      v6 -= 8;
      if (v4 == ++v8)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_1A39D2FB0(char *__src, char *a2, unint64_t a3, char *a4)
{
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  char *v13;
  char *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id *v23;
  BOOL v24;
  id *v25;
  char **v26;
  char *v27;
  id *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  char *v35;
  id v36;
  BOOL v37;
  id v38;
  id v39;
  BOOL v40;
  void **v42;
  void **v43;
  id *v45;
  id *__srca;

  v5 = (void **)__src;
  v6 = a2 - __src;
  v7 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v7 = a2 - __src;
  v8 = v7 >> 3;
  __srca = (id *)a2;
  v9 = a3 - (_QWORD)a2;
  v10 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v10 = a3 - (_QWORD)a2;
  v11 = v10 >> 3;
  if (v8 >= v10 >> 3)
  {
    if (a4 != a2 || &a2[8 * v11] <= a4)
      memmove(a4, a2, 8 * v11);
    v43 = (void **)a4;
    v13 = &a4[8 * v11];
    if (v5 >= __srca || v9 < 8)
    {
LABEL_52:
      v12 = v43;
      goto LABEL_53;
    }
    v25 = (id *)(a3 - 8);
    v26 = &selRef__applyWebKitBehaviors;
    v42 = v5;
    while (1)
    {
      v45 = v25 + 1;
      v27 = v13 - 8;
      v28 = __srca - 1;
      v29 = *(__srca - 1);
      v30 = *((id *)v13 - 1);
      v31 = v29;
      v32 = objc_msgSend(v30, v26[242]);
      if (v32 == objc_msgSend(v31, v26[242]))
      {
        v33 = objc_msgSend(v30, sel_mark);
        if (v33 != objc_msgSend(v31, sel_mark) || objc_msgSend(v30, sel_mark) != (id)1)
        {

          goto LABEL_42;
        }
        v34 = objc_msgSend(v30, sel_textRange);
        v35 = v13;
        v36 = objc_msgSend(v31, sel_textRange);

        v37 = (uint64_t)v34 < (uint64_t)v36;
      }
      else
      {
        v38 = objc_msgSend(v30, v26[242]);
        v35 = v13;
        v39 = objc_msgSend(v31, v26[242]);

        v37 = (uint64_t)v38 < (uint64_t)v39;
      }
      v13 = v35;
      v5 = v42;
      if (!v37)
      {
        v28 = (id *)v27;
        if (v45 == (id *)v35)
        {
          v13 = v27;
          v26 = &selRef__applyWebKitBehaviors;
          if (v25 < (id *)v35)
            goto LABEL_50;
        }
        else
        {
          v13 = v27;
LABEL_48:
          v26 = &selRef__applyWebKitBehaviors;
        }
LABEL_49:
        *v25 = *v28;
        goto LABEL_50;
      }
LABEL_42:
      if (v45 != __srca)
      {
        --__srca;
        goto LABEL_48;
      }
      v40 = v25 >= __srca--;
      v26 = &selRef__applyWebKitBehaviors;
      if (v40)
        goto LABEL_49;
LABEL_50:
      if (__srca > v5)
      {
        --v25;
        if (v13 > (char *)v43)
          continue;
      }
      goto LABEL_52;
    }
  }
  v12 = (void **)a4;
  if (a4 != __src || &__src[8 * v8] <= a4)
    memmove(a4, __src, 8 * v8);
  v13 = &a4[8 * v8];
  if ((unint64_t)__srca < a3 && v6 >= 8)
  {
    do
    {
      v14 = v13;
      v15 = *v12;
      v16 = *__srca;
      v17 = v15;
      v18 = objc_msgSend(v16, sel_byteSampleOffset);
      if (v18 == objc_msgSend(v17, sel_byteSampleOffset))
      {
        v19 = objc_msgSend(v16, sel_mark);
        if (v19 != objc_msgSend(v17, sel_mark) || objc_msgSend(v16, sel_mark) != (id)1)
        {

LABEL_21:
          v23 = __srca;
          v24 = v5 == __srca++;
          v13 = v14;
          if (v24)
            goto LABEL_23;
LABEL_22:
          *v5 = *v23;
          goto LABEL_23;
        }
        v20 = objc_msgSend(v16, sel_textRange);
        v21 = objc_msgSend(v17, sel_textRange);
      }
      else
      {
        v20 = objc_msgSend(v16, sel_byteSampleOffset);
        v21 = objc_msgSend(v17, sel_byteSampleOffset);
      }
      v22 = v21;

      if ((uint64_t)v20 < (uint64_t)v22)
        goto LABEL_21;
      v23 = v12;
      v24 = v5 == v12++;
      v13 = v14;
      if (!v24)
        goto LABEL_22;
LABEL_23:
      ++v5;
    }
    while (v12 < (void **)v13 && (unint64_t)__srca < a3);
  }
  __srca = v5;
LABEL_53:
  if (__srca != v12
    || __srca >= (void **)((char *)v12
                         + ((v13 - (char *)v12 + (v13 - (char *)v12 < 0 ? 7uLL : 0)) & 0xFFFFFFFFFFFFFFF8)))
  {
    memmove(__srca, v12, 8 * ((v13 - (char *)v12) / 8));
  }
  return 1;
}

uint64_t sub_1A39D33F4(void **__dst, id *__src, unint64_t a3, id *a4)
{
  id *v5;
  void **v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  char *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id *v21;
  BOOL v22;
  id *v23;
  void *v24;
  char *v25;
  id *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  BOOL v33;
  void **v35;
  id *v36;
  id *v38;

  v5 = __src;
  v6 = __dst;
  v7 = (char *)__src - (char *)__dst;
  v8 = (char *)__src - (char *)__dst + 7;
  if ((char *)__src - (char *)__dst >= 0)
    v8 = (char *)__src - (char *)__dst;
  v9 = v8 >> 3;
  v10 = a3 - (_QWORD)__src;
  v11 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v11 = a3 - (_QWORD)__src;
  v12 = v11 >> 3;
  if (v9 >= v11 >> 3)
  {
    if (a4 != __src || &__src[v12] <= a4)
      memmove(a4, __src, 8 * v12);
    v35 = a4;
    v14 = (char *)&a4[v12];
    if (v6 >= v5 || v10 < 8)
    {
LABEL_49:
      v13 = v35;
      goto LABEL_50;
    }
    v23 = (id *)(a3 - 8);
    while (1)
    {
      v36 = v23 + 1;
      v38 = (id *)v14;
      v25 = v14 - 8;
      v24 = (void *)*((_QWORD *)v14 - 1);
      v26 = v5 - 1;
      v27 = *(v5 - 1);
      v28 = v24;
      v29 = v27;
      if (objc_msgSend(v28, sel_mark) != (id)1)
        goto LABEL_34;
      if (objc_msgSend(v29, sel_mark) == (id)1)
      {
        v30 = objc_msgSend(v28, sel_textRange);
        v31 = objc_msgSend(v29, sel_textRange);
      }
      else
      {
LABEL_34:
        v30 = objc_msgSend(v28, sel_byteSampleOffset);
        v31 = objc_msgSend(v29, sel_byteSampleOffset);
      }
      v32 = v31;

      if ((uint64_t)v30 < (uint64_t)v32)
        break;
      v26 = (id *)v25;
      if (v36 != v38)
      {
        v14 = v25;
LABEL_45:
        v13 = v35;
        goto LABEL_46;
      }
      v14 = v25;
      v13 = v35;
      if (v23 >= v38)
        goto LABEL_46;
LABEL_47:
      if (v5 <= v6)
        goto LABEL_50;
      --v23;
      if (v14 <= (char *)v13)
        goto LABEL_49;
    }
    v14 = (char *)v38;
    if (v36 != v5)
    {
      --v5;
      goto LABEL_45;
    }
    v33 = v23 >= v5--;
    v13 = v35;
    if (!v33)
      goto LABEL_47;
LABEL_46:
    *v23 = *v26;
    goto LABEL_47;
  }
  v13 = a4;
  if (a4 != __dst || &__dst[v9] <= a4)
    memmove(a4, __dst, 8 * v9);
  v14 = (char *)&a4[v9];
  if ((unint64_t)v5 < a3 && v7 >= 8)
  {
    while (1)
    {
      v15 = *v13;
      v16 = *v5;
      v17 = v15;
      if (objc_msgSend(v16, sel_mark) == (id)1 && objc_msgSend(v17, sel_mark) == (id)1)
      {
        v18 = objc_msgSend(v16, sel_textRange);
        v19 = objc_msgSend(v17, sel_textRange);
      }
      else
      {
        v18 = objc_msgSend(v16, sel_byteSampleOffset);
        v19 = objc_msgSend(v17, sel_byteSampleOffset);
      }
      v20 = v19;

      if ((uint64_t)v18 >= (uint64_t)v20)
        break;
      v21 = v5;
      v22 = v6 == v5++;
      if (!v22)
        goto LABEL_20;
LABEL_21:
      ++v6;
      if (v13 >= (void **)v14 || (unint64_t)v5 >= a3)
        goto LABEL_23;
    }
    v21 = v13;
    v22 = v6 == v13++;
    if (v22)
      goto LABEL_21;
LABEL_20:
    *v6 = *v21;
    goto LABEL_21;
  }
LABEL_23:
  v5 = v6;
LABEL_50:
  if (v5 != v13
    || v5 >= (void **)((char *)v13 + ((v14 - (char *)v13 + (v14 - (char *)v13 < 0 ? 7uLL : 0)) & 0xFFFFFFFFFFFFFFF8)))
  {
    memmove(v5, v13, 8 * ((v14 - (char *)v13) / 8));
  }
  return 1;
}

char *sub_1A39D3764(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D2DA8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A39D385C(uint64_t a1)
{
  return sub_1A39D3764(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_1A39D3870(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  void **v5;
  void *v6;
  id v7;

  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1A3AB5480();
    swift_bridgeObjectRelease();
    sub_1A3AB5708();
    swift_bridgeObjectRetain();
    v3 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
    if (!v3)
      return;
  }
  else
  {
    sub_1A3AB5708();
    v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3)
      return;
  }
  if (v3 < 1)
  {
    __break(1u);
  }
  else if ((a2 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v3; ++i)
    {
      MEMORY[0x1A85960B8](i, a2);
      sub_1A3AB50D8();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    v5 = (void **)(a2 + 32);
    do
    {
      v6 = *v5++;
      v7 = v6;
      sub_1A3AB50D8();

      --v3;
    }
    while (v3);
  }
}

uint64_t sub_1A39D3984(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  void (*v10)(_QWORD *);
  id *v11;
  id v12;
  void (*v13[4])(id *);

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1A3AB5480();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = sub_1A3AB5480();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_1A39C3EF8(&qword_1EE6D2D88, &qword_1EE6D2D80, MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            sub_1A39A4820(&qword_1EE6D2D80);
            v10 = sub_1A39C2B30(v13, i, a3);
            v12 = *v11;
            ((void (*)(void (**)(id *), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1A39B11BC(0, &qword_1EE6D4000);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1A39D3B3C(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;

  v4 = a4;
  v6 = a2;
  v7 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    sub_1A3AB5240();
    sub_1A39B11BC(0, &qword_1EE6D4000);
    sub_1A39D5000();
    result = (_QWORD *)sub_1A3AB4F04();
    v4 = v27;
    v8 = v28;
    v9 = v29;
    v10 = v30;
    v11 = v31;
    v24 = v7;
    if (v6)
      goto LABEL_3;
LABEL_36:
    v12 = 0;
LABEL_46:
    *v24 = v4;
    v24[1] = v8;
    v24[2] = v9;
    v24[3] = v10;
    v24[4] = v11;
    return (_QWORD *)v12;
  }
  v10 = 0;
  v20 = -1 << *(_BYTE *)(a4 + 32);
  v8 = a4 + 56;
  v9 = ~v20;
  v21 = -v20;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  else
    v22 = -1;
  v11 = v22 & *(_QWORD *)(a4 + 56);
  v24 = result;
  if (!a2)
    goto LABEL_36;
LABEL_3:
  if (!a3)
  {
    v12 = 0;
    goto LABEL_46;
  }
  if (a3 < 0)
    goto LABEL_48;
  v12 = 0;
  v25 = (unint64_t)(v9 + 64) >> 6;
  v23 = v9;
  while (1)
  {
    if (v4 < 0)
    {
      if (!sub_1A3AB5258())
        goto LABEL_45;
      sub_1A39B11BC(0, &qword_1EE6D4000);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v15 = v26;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (!v26)
        goto LABEL_45;
      goto LABEL_8;
    }
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_7;
    }
    v16 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v16 >= v25)
    {
      v11 = 0;
      goto LABEL_45;
    }
    v17 = *(_QWORD *)(v8 + 8 * v16);
    if (v17)
      goto LABEL_23;
    v18 = v10 + 2;
    if (v10 + 2 >= v25)
    {
      v11 = 0;
      ++v10;
      goto LABEL_45;
    }
    v17 = *(_QWORD *)(v8 + 8 * v18);
    if (!v17)
    {
      if (v10 + 3 >= v25)
        goto LABEL_42;
      v17 = *(_QWORD *)(v8 + 8 * (v10 + 3));
      if (v17)
      {
        v16 = v10 + 3;
        goto LABEL_23;
      }
      v18 = v10 + 4;
      if (v10 + 4 >= v25)
      {
        v11 = 0;
        v10 += 3;
        goto LABEL_45;
      }
      v17 = *(_QWORD *)(v8 + 8 * v18);
      if (!v17)
      {
        v16 = v10 + 5;
        if (v10 + 5 >= v25)
        {
LABEL_42:
          v11 = 0;
          v10 = v18;
          goto LABEL_45;
        }
        v17 = *(_QWORD *)(v8 + 8 * v16);
        if (!v17)
        {
          v19 = v10 + 6;
          while (v25 != v19)
          {
            v17 = *(_QWORD *)(v8 + 8 * v19++);
            if (v17)
            {
              v16 = v19 - 1;
              goto LABEL_23;
            }
          }
          v11 = 0;
          v10 = v25 - 1;
          goto LABEL_45;
        }
        goto LABEL_23;
      }
    }
    v16 = v18;
LABEL_23:
    v11 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v16 << 6);
    v10 = v16;
LABEL_7:
    result = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    v15 = result;
    if (!result)
      goto LABEL_45;
LABEL_8:
    ++v12;
    *v6++ = v15;
    if (v12 == a3)
    {
      v12 = a3;
LABEL_45:
      v9 = v23;
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void sub_1A39D3E44()
{
  JUMPOUT(0x1A85963F4);
}

uint64_t _s12TextToSpeech13TTSAURendererC0C6BufferV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  if ((sub_1A3AB4370() & 1) != 0
    && (v4 = type metadata accessor for TTSAURenderer.SpeechBuffer(),
        *(_DWORD *)(a1 + *(int *)(v4 + 20)) == *(_DWORD *)(a2 + *(int *)(v4 + 20)))
    && (v5 = v4, sub_1A39B11BC(0, (unint64_t *)&qword_1ED1B52A8), (sub_1A3AB50CC() & 1) != 0))
  {
    v6 = sub_1A39D0B54(*(_QWORD *)(a1 + *(int *)(v5 + 28)), *(_QWORD *)(a2 + *(int *)(v5 + 28)), (uint64_t)&qword_1EE6D4000);
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

uint64_t sub_1A39D3F04(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1A39D3F3C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = a1;
  return swift_task_switch();
}

uint64_t sub_1A39D3F54()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  int v7;

  v1 = *(void **)(v0 + 128);
  v2 = (void *)objc_opt_self();
  objc_msgSend(v1, sel_auComponentDesc);
  *(_QWORD *)(v0 + 56) = v0 + 120;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1A39D403C;
  v3 = swift_continuation_init();
  *(_OWORD *)(v0 + 144) = v6;
  v4 = v0 + 144;
  *(_QWORD *)(v4 - 32) = v3;
  *(_QWORD *)(v4 - 64) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v4 - 56) = 0x40000000;
  *(_QWORD *)(v4 - 48) = sub_1A39CFB94;
  *(_QWORD *)(v4 - 40) = &unk_1E4AA2730;
  *(_DWORD *)(v4 + 16) = v7;
  objc_msgSend(v2, sel_instantiateWithComponentDescription_options_completionHandler_, v4, 1, v4 - 64);
  return swift_continuation_await();
}

uint64_t sub_1A39D403C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 136) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1A39D409C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;

  v1 = *(void **)(v0 + 120);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 120), sel_outputBusses);
    v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, 0);

    v4 = objc_msgSend(v3, sel_format);
  }
  else
  {
    v4 = 0;
  }
  return (*(uint64_t (**)(id))(v0 + 8))(v4);
}

uint64_t sub_1A39D4140()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 136);
  swift_willThrow();

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1A39D4188(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1A8597738](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A39D41C8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1A39D4188(&qword_1EE6D2D08, a2, (uint64_t (*)(uint64_t))type metadata accessor for TTSAURenderer, (uint64_t)&protocol conformance descriptor for TTSAURenderer);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A39D4204()
{
  return sub_1A39D4188(&qword_1EE6D2D38, 255, (uint64_t (*)(uint64_t))type metadata accessor for TTSAURenderer.SpeechBuffer, (uint64_t)&protocol conformance descriptor for TTSAURenderer.SpeechBuffer);
}

uint64_t method lookup function for TTSAURenderer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TTSAURenderer.audioFormat.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of TTSAURenderer.audioFormat.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of TTSAURenderer.audioFormat.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of TTSAURenderer.synthesize(request:voiceSettings:chain:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 352)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 352));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_1A39D42E0;
  return v10(a1, a2, a3);
}

uint64_t sub_1A39D42E0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of TTSAURenderer.cancel()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of TTSAURenderer.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t dispatch thunk of TTSAURenderer.flushMarkers()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

_QWORD *initializeBufferWithCopyOfBuffer for TTSAURenderer.SynthesisError(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void destroy for TTSAURenderer.SynthesisError(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **assignWithCopy for TTSAURenderer.SynthesisError(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
      v7 = v4;
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    v5 = v4;
    v6 = *a1;
    *a1 = v4;

  }
  return a1;
}

_QWORD *initializeWithTake for VoiceResolver.Mode(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **assignWithTake for TTSAURenderer.SynthesisError(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for TTSAURenderer.SynthesisError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFA && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483643);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 4;
  if (v4 >= 6)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TTSAURenderer.SynthesisError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 4;
  }
  return result;
}

uint64_t sub_1A39D4544(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1A39D455C(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for TTSAURenderer.SynthesisError()
{
  return &type metadata for TTSAURenderer.SynthesisError;
}

uint64_t *initializeBufferWithCopyOfBuffer for TTSAURenderer.SpeechBuffer(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1A3AB4388();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
    v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v10 = v9;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TTSAURenderer.SpeechBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A3AB4388();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TTSAURenderer.SpeechBuffer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = sub_1A3AB4388();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = v8;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TTSAURenderer.SpeechBuffer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = sub_1A3AB4388();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TTSAURenderer.SpeechBuffer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1A3AB4388();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for TTSAURenderer.SpeechBuffer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = sub_1A3AB4388();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TTSAURenderer.SpeechBuffer()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A39D488C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1A3AB4388();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TTSAURenderer.SpeechBuffer()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A39D4914(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1A3AB4388();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_1A39D498C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A3AB4388();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1A39D4A1C()
{
  unint64_t result;

  result = qword_1EE6D2D70;
  if (!qword_1EE6D2D70)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSAURenderer.SynthesisError, &type metadata for TTSAURenderer.SynthesisError);
    atomic_store(result, (unint64_t *)&qword_1EE6D2D70);
  }
  return result;
}

uint64_t sub_1A39D4A60()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A39D4A84(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  void (*v4)(_QWORD *);
  _QWORD v5[5];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = *(_QWORD *)(result + 80);
    v5[3] = sub_1A39A4820(&qword_1EE6D2D80);
    v5[4] = sub_1A39C3EF8(&qword_1EE6D2D88, &qword_1EE6D2D80, MEMORY[0x1E0DEAF50]);
    v5[0] = a1;
    v4 = *(void (**)(_QWORD *))(*(_QWORD *)v3 + 144);
    swift_bridgeObjectRetain();
    v4(v5);
    swift_release();
    return sub_1A39A47C4((uint64_t)v5);
  }
  return result;
}

uint64_t sub_1A39D4B38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1A39D4B48()
{
  return swift_release();
}

uint64_t sub_1A39D4B50()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1A39D4B7C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  int v6;
  int v7;
  uint64_t v8;
  id v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  __int128 v14;
  int v15;

  v1 = *(void **)(v0 + 16);
  v2 = *(unsigned int *)(v0 + 24);
  v4 = *(void **)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v15 = 64;
  v5 = objc_msgSend(v1, sel_renderBlock, 0, 0, 0, 0, 0, 0, 0, 0);
  v6 = (*((uint64_t (**)(id, int *, __int128 *, uint64_t, _QWORD, id, _QWORD))v5 + 2))(v5, &v15, &v14, v2, 0, objc_msgSend(v4, sel_mutableAudioBufferList), 0);
  _Block_release(v5);
  if (v6 != sub_1A3AB473C() || (v7 = v15, (v15 & 0x100) != 0))
  {
    sub_1A39D4A1C();
    v11 = swift_allocError();
    *v12 = 2;
    sub_1A39A4820(&qword_1EE6D09F0);
    swift_allocError();
    *v13 = v11;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    objc_msgSend(v4, sel_setFrameLength_, v2);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 8) = v4;
    v9 = v4;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1A39D4CC8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1A39D4CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;

  v7 = objc_msgSend(*(id *)(v5 + 16), sel_audioBufferList);
  v8 = v7[2];
  *(_OWORD *)a5 = *(_OWORD *)v7;
  *(_QWORD *)(a5 + 16) = v8;
  return sub_1A3AB473C();
}

uint64_t sub_1A39D4D28(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TTSAURenderer.SpeechBuffer();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A39D4D64()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1A39D4D90()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1A39B1604;
  return ((uint64_t (*)(void *, void *))((char *)&dword_1EE6D2DB0 + dword_1EE6D2DB0))(v2, v3);
}

uint64_t sub_1A39D4E00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39D5174;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1EE6D3FA0 + dword_1EE6D3FA0))(v2, v3, v4);
}

uint64_t sub_1A39D4E7C()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A39D4EA8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1A39D5174;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EE6D3FB0 + dword_1EE6D3FB0))(a1, v4, v5, v6);
}

uint64_t sub_1A39D4F2C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A39D4F6C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A39D4F90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A39D5174;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE6D3FC0 + dword_1EE6D3FC0))(a1, v4);
}

unint64_t sub_1A39D5000()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6D2DE0;
  if (!qword_1EE6D2DE0)
  {
    v1 = sub_1A39B11BC(255, &qword_1EE6D4000);
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EE6D2DE0);
  }
  return result;
}

void type metadata accessor for AudioUnitRenderActionFlags()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1EE6D2DE8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EE6D2DE8);
  }
}

uint64_t sub_1A39D50AC()
{
  return sub_1A39D4188(&qword_1EE6D2DF0, 255, (uint64_t (*)(uint64_t))type metadata accessor for AudioUnitRenderActionFlags, (uint64_t)&unk_1A3AC0E4C);
}

uint64_t sub_1A39D50DC()
{
  return sub_1A39D4188(&qword_1EE6D2DF8, 255, (uint64_t (*)(uint64_t))type metadata accessor for AudioUnitRenderActionFlags, (uint64_t)&unk_1A3AC0E1C);
}

uint64_t sub_1A39D510C()
{
  return sub_1A39D4188(&qword_1EE6D2E00, 255, (uint64_t (*)(uint64_t))type metadata accessor for AudioUnitRenderActionFlags, (uint64_t)&unk_1A3AC0E74);
}

uint64_t sub_1A39D513C()
{
  return sub_1A39D4188(&qword_1EE6D2E08, 255, (uint64_t (*)(uint64_t))type metadata accessor for AudioUnitRenderActionFlags, (uint64_t)&unk_1A3AC0EAC);
}

uint64_t sub_1A39D518C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  void *v2;
  uint64_t inited;
  unint64_t v5;
  unint64_t v6;
  char v7;
  void (*v8)(void *, _QWORD, _QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16;
  __int128 v17;
  unsigned __int8 v18[401];

  v2 = v1;
  sub_1A39A4820(&qword_1EE6D2E10);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3AC0FB0;
  *(_BYTE *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = &type metadata for TTSMarkup.SpeechDocument;
  *(_QWORD *)(inited + 48) = &protocol witness table for TTSMarkup.SpeechDocument;
  *(_BYTE *)(inited + 56) = 15;
  *(_QWORD *)(inited + 64) = &type metadata for TTSMarkup.SpeechText;
  *(_QWORD *)(inited + 72) = &protocol witness table for TTSMarkup.SpeechText;
  *(_BYTE *)(inited + 80) = 11;
  *(_QWORD *)(inited + 88) = &type metadata for TTSMarkup.Pause;
  *(_QWORD *)(inited + 96) = &protocol witness table for TTSMarkup.Pause;
  *(_BYTE *)(inited + 104) = 3;
  *(_QWORD *)(inited + 112) = &type metadata for TTSMarkup.Audio;
  *(_QWORD *)(inited + 120) = &protocol witness table for TTSMarkup.Audio;
  *(_BYTE *)(inited + 128) = 10;
  *(_QWORD *)(inited + 136) = &type metadata for TTSMarkup.Emphasis;
  *(_QWORD *)(inited + 144) = &protocol witness table for TTSMarkup.Emphasis;
  *(_BYTE *)(inited + 152) = 9;
  *(_QWORD *)(inited + 160) = &type metadata for TTSMarkup.Language;
  *(_QWORD *)(inited + 168) = &protocol witness table for TTSMarkup.Language;
  *(_BYTE *)(inited + 176) = 12;
  *(_QWORD *)(inited + 184) = &type metadata for TTSMarkup.Mark;
  *(_QWORD *)(inited + 192) = &protocol witness table for TTSMarkup.Mark;
  *(_BYTE *)(inited + 200) = 5;
  *(_QWORD *)(inited + 208) = &type metadata for TTSMarkup.Paragraph;
  *(_QWORD *)(inited + 216) = &protocol witness table for TTSMarkup.Paragraph;
  *(_BYTE *)(inited + 224) = 4;
  *(_QWORD *)(inited + 232) = &type metadata for TTSMarkup.Phoneme;
  *(_QWORD *)(inited + 240) = &protocol witness table for TTSMarkup.Phoneme;
  *(_BYTE *)(inited + 248) = 2;
  *(_QWORD *)(inited + 256) = &type metadata for TTSMarkup.Prosody;
  *(_QWORD *)(inited + 264) = &protocol witness table for TTSMarkup.Prosody;
  *(_BYTE *)(inited + 272) = 1;
  *(_QWORD *)(inited + 280) = &type metadata for TTSMarkup.SayAs;
  *(_QWORD *)(inited + 288) = &protocol witness table for TTSMarkup.SayAs;
  *(_BYTE *)(inited + 296) = 6;
  *(_QWORD *)(inited + 304) = &type metadata for TTSMarkup.Sentence;
  *(_QWORD *)(inited + 312) = &protocol witness table for TTSMarkup.Sentence;
  *(_BYTE *)(inited + 320) = 7;
  *(_QWORD *)(inited + 328) = &type metadata for TTSMarkup.Sub;
  *(_QWORD *)(inited + 336) = &protocol witness table for TTSMarkup.Sub;
  *(_BYTE *)(inited + 344) = 8;
  *(_QWORD *)(inited + 352) = &type metadata for TTSMarkup.Voice;
  *(_QWORD *)(inited + 360) = &protocol witness table for TTSMarkup.Voice;
  *(_BYTE *)(inited + 368) = 13;
  *(_QWORD *)(inited + 376) = &type metadata for TTSMarkup.GenericSpeechElement;
  *(_QWORD *)(inited + 384) = &protocol witness table for TTSMarkup.GenericSpeechElement;
  v5 = sub_1A39D54C0(inited);
  (*(void (**)(unsigned __int8 *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0xB8))(v18);
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_1A39D55C8(v18[0]), (v7 & 1) != 0))
  {
    v17 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v6);
    swift_bridgeObjectRelease();
    v8 = *(void (**)(void *, _QWORD, _QWORD))(*((_QWORD *)&v17 + 1) + 88);
    v9 = v17;
    v10 = sub_1A3AB50FC();
    v11 = *(_QWORD *)(v10 - 8);
    MEMORY[0x1E0C80A78](v10);
    v13 = (char *)&v18[-v12 - 1];
    v8(v2, v17, *((_QWORD *)&v17 + 1));
    v14 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v9) != 1)
    {
      *(_OWORD *)(a1 + 24) = v17;
      v16 = sub_1A39B1230((uint64_t *)a1);
      return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v14 + 32))(v16, v13, v9);
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    result = swift_bridgeObjectRelease();
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

unint64_t sub_1A39D54C0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  unsigned __int8 v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A39A4820(&qword_1EE6D2E20);
  v2 = (_QWORD *)sub_1A3AB54B0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 40);
  while (1)
  {
    v5 = *((_BYTE *)v4 - 8);
    v11 = *v4;
    result = sub_1A39D55C8(v5);
    if ((v7 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v2[6] + result) = v5;
    *(_OWORD *)(v2[7] + 16 * result) = v11;
    v8 = v2[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      goto LABEL_11;
    v2[2] = v10;
    v4 = (_OWORD *)((char *)v4 + 24);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A39D55C8(uint64_t a1)
{
  uint64_t v2;

  sub_1A39D5630();
  v2 = sub_1A3AB48C8();
  return sub_1A39D5674(a1, v2);
}

unint64_t sub_1A39D5630()
{
  unint64_t result;

  result = qword_1EE6D2E18;
  if (!qword_1EE6D2E18)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for SSMLTag, &type metadata for SSMLTag);
    atomic_store(result, (unint64_t *)&qword_1EE6D2E18);
  }
  return result;
}

unint64_t sub_1A39D5674(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    sub_1A39A19F0();
    do
    {
      if ((sub_1A3AB494C() & 1) != 0)
        break;
      v4 = (v4 + 1) & v5;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1A39D5738()
{
  return 32;
}

Swift::Void __swiftcall Array.printByIndex(delimiter:)(Swift::String delimiter)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  id v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = v2;
  v4 = v1;
  v23 = delimiter;
  v5 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](delimiter._countAndFlagsBits);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = sub_1A3AB50FC();
  v25 = *(_QWORD *)(v9 - 8);
  v26 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v20 - v13;
  v30 = v4;
  v15 = sub_1A3AB4C58();
  MEMORY[0x1A8597738](MEMORY[0x1E0DEAF38], v15);
  sub_1A3AB4B50();
  v29 = v27;
  sub_1A3AB5474();
  sub_1A3AB5450();
  v24 = sub_1A3AB5468();
  v21 = 0x80000001A3AF0230;
  v22 = 0x80000001A3AF01C0;
  while (1)
  {
    sub_1A3AB545C();
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v14, v12, v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v14, 1, TupleTypeMetadata2) == 1)break;
    v16 = *(_QWORD *)v14;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, &v14[*(int *)(TupleTypeMetadata2 + 48)], v3);
    v17 = sub_1A3AB4FC4();
    v27 = 0;
    v28 = 0xE000000000000000;
    sub_1A3AB4A84();
    v29 = v16;
    sub_1A3AB5624();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    sub_1A3AB4A84();
    sub_1A3AB5648();
    v18 = sub_1A3A12674();
    v19 = sub_1A3A04828();
    sub_1A3A126B4(v17, (uint64_t)v18, v19 & 1, 0xD00000000000006BLL, v22, 0xD000000000000018, v21);
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
  }
  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PlainStringWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlainStringWriter);
}

uint64_t sub_1A39D5A20@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A39D5A50(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 96);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1A39D5A94()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1A39D5ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1A39D5B2C())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t StringStream.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0xE000000000000000;
  return result;
}

uint64_t StringStream.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  return result;
}

uint64_t sub_1A39D5BA0()
{
  uint64_t v0;
  uint64_t (*v1)(_BYTE *, _QWORD);
  _BYTE v3[32];

  v1 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v0 + 104))(v3);
  sub_1A3AB4A84();
  return v1(v3, 0);
}

uint64_t StringStream.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t StringStream.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1A39D5C48()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t type metadata accessor for StringStream()
{
  return objc_opt_self();
}

uint64_t method lookup function for StringStream()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StringStream.string.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of StringStream.string.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of StringStream.string.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of StringStream.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of StringStream.write(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t sub_1A39D5CD8()
{
  sub_1A39A4820(&qword_1EE6D2E28);
  return sub_1A3AB4D6C();
}

unint64_t sub_1A39D5D14()
{
  unint64_t result;

  result = qword_1ED1B5420;
  if (!qword_1ED1B5420)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED1B5420);
  }
  return result;
}

uint64_t sub_1A39D5D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  sub_1A39D5DA4(a1, a2, a3);
  return v6;
}

uint64_t sub_1A39D5DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t result;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  id v30;
  id v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v37 = a3;
  v38 = a1;
  v39 = a2;
  v48 = sub_1A39A4820(&qword_1EE6D2E38);
  v46 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v45 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_1A39A4820(&qword_1EE6D2E28);
  v47 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v44 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A39A4820(&qword_1EE6D2E40);
  v6 = MEMORY[0x1E0C80A78](v5);
  v43 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v36 = (char *)&v36 - v9;
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v36 - v10;
  v12 = sub_1A3AB500C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1A3AB5000();
  v17 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v16);
  v18 = sub_1A3AB4808();
  MEMORY[0x1E0C80A78](v18);
  v41 = OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_tokenizerQueue;
  v40 = sub_1A39D5D14();
  sub_1A3AB47FC();
  v51 = MEMORY[0x1E0DEE9D8];
  sub_1A39B9F44((unint64_t *)&unk_1ED1B5410, v17, MEMORY[0x1E0DEF828]);
  sub_1A39A4820(&qword_1ED1B5390);
  v19 = (uint64_t)v11;
  sub_1A39C3EF8(&qword_1ED1B5398, &qword_1ED1B5390, MEMORY[0x1E0DEAF38]);
  v20 = v42;
  sub_1A3AB5228();
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DEF8D0], v12);
  *(_QWORD *)(v20 + v41) = sub_1A3AB5030();
  v21 = v20 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_continuation;
  v22 = sub_1A39A4820(&qword_1EE6D2E30);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v24(v21, 1, 1, v22);
  *(_BYTE *)(v20 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_shouldContinue) = 1;
  v24(v19, 1, 1, v22);
  v50 = v19;
  sub_1A39A4820(&qword_1EE6D2E48);
  (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v45, *MEMORY[0x1E0DF07B8], v48);
  v25 = v44;
  v26 = (uint64_t)v43;
  sub_1A3AB4D9C();
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v20 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_stream, v25, v49);
  sub_1A39D62F4(v19, v26);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v26, 1, v22);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 32);
    v29 = (uint64_t)v36;
    v28(v36, v26, v22);
    v24(v29, 0, 1, v22);
    swift_beginAccess();
    sub_1A39D633C(v29, v21);
    swift_endAccess();
    v30 = objc_allocWithZone(MEMORY[0x1E0CCE178]);
    v31 = objc_msgSend(v30, sel_initWithUnit_, v37);
    *(_QWORD *)(v20 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_tokenizer) = v31;
    v32 = (_QWORD *)(v20 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_string);
    v33 = v39;
    *v32 = v38;
    v32[1] = v33;
    swift_bridgeObjectRetain();
    v34 = v31;
    v35 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
    objc_msgSend(v34, sel_setString_, v35);

    sub_1A39D67D8();
    sub_1A39B11F4(v19, &qword_1EE6D2E40);
    return v20;
  }
  return result;
}

uint64_t sub_1A39D6280(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1A39B11F4(v3, &qword_1EE6D2E40);
  v4 = sub_1A39A4820(&qword_1EE6D2E30);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
}

uint64_t sub_1A39D62F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D2E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A39D633C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D2E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t StreamingTokenizer.deinit()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[6];

  *(_BYTE *)(v0 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_shouldContinue) = 0;
  v1 = OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_tokenizerQueue;
  v2 = *(NSObject **)(v0 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_tokenizerQueue);
  v7[4] = nullsub_19;
  v7[5] = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = sub_1A39D64C0;
  v7[3] = &unk_1E4A9F828;
  v3 = _Block_copy(v7);
  swift_release();
  dispatch_sync(v2, v3);
  _Block_release(v3);
  result = swift_isEscapingClosureAtFileLocation();
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v5 = v0 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_stream;
    v6 = sub_1A39A4820(&qword_1EE6D2E28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);

    sub_1A39B11F4(v0 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_continuation, &qword_1EE6D2E40);
    swift_bridgeObjectRelease();
    return v0;
  }
  return result;
}

uint64_t sub_1A39D64C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t StreamingTokenizer.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[6];

  *(_BYTE *)(v0 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_shouldContinue) = 0;
  v1 = OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_tokenizerQueue;
  v2 = *(NSObject **)(v0 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_tokenizerQueue);
  v7[4] = nullsub_19;
  v7[5] = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = sub_1A39D64C0;
  v7[3] = &unk_1E4A9D980;
  v3 = _Block_copy(v7);
  swift_release();
  dispatch_sync(v2, v3);
  _Block_release(v3);
  result = swift_isEscapingClosureAtFileLocation();
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v5 = v0 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_stream;
    v6 = sub_1A39A4820(&qword_1EE6D2E28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);

    sub_1A39B11F4(v0 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_continuation, &qword_1EE6D2E40);
    swift_bridgeObjectRelease();
    return swift_deallocClassInstance();
  }
  return result;
}

uint64_t sub_1A39D662C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE v13[24];

  v1 = sub_1A39A4820(&qword_1EE6D2E30);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_1A39A4820(&qword_1EE6D2E40);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v10 = &v13[-v9];
  *(_BYTE *)(v0 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_shouldContinue) = 0;
  v11 = v0 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_continuation;
  swift_beginAccess();
  sub_1A39D62F4(v11, (uint64_t)v10);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v2 + 48))(v10, 1, v1))
  {
    sub_1A39B11F4((uint64_t)v10, &qword_1EE6D2E40);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 16))(v4, v10, v1);
    sub_1A39B11F4((uint64_t)v10, &qword_1EE6D2E40);
    sub_1A3AB4D48();
    (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v8, 1, 1, v1);
  swift_beginAccess();
  sub_1A39D633C((uint64_t)v8, v11);
  return swift_endAccess();
}

uint64_t sub_1A39D67D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1A3AB47E4();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v14 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A3AB4808();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = *(_QWORD *)(v1 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_tokenizerQueue);
  v10 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_1A39D702C;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A39CF138;
  aBlock[3] = &unk_1E4AA2948;
  v11 = _Block_copy(aBlock);
  swift_retain();
  sub_1A3AB47F0();
  v15 = MEMORY[0x1E0DEE9D8];
  sub_1A39B9F44(&qword_1EE6D23C0, v3, MEMORY[0x1E0DEF510]);
  sub_1A39A4820(&qword_1EE6D23D8);
  sub_1A39C3EF8((unint64_t *)&qword_1EE6D23E0, &qword_1EE6D23D8, MEMORY[0x1E0DEAF38]);
  sub_1A3AB5228();
  MEMORY[0x1A8595E0C](0, v9, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  return swift_release();
}

uint64_t sub_1A39D69EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1A39D69FC()
{
  return swift_release();
}

uint64_t sub_1A39D6A04()
{
  return sub_1A39C3EF8(&qword_1EE6D2E50, &qword_1EE6D2E58, MEMORY[0x1E0DF0830]);
}

uint64_t sub_1A39D6A30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _BYTE v11[24];

  v0 = sub_1A39A4820(&qword_1EE6D2E30);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = &v11[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_1A39A4820(&qword_1EE6D2E40);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v8 = result;
    v9 = *(id *)(result + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_tokenizer);
    sub_1A3AB4FAC();

    v10 = v8 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_continuation;
    swift_beginAccess();
    sub_1A39D62F4(v10, (uint64_t)v6);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0))
    {
      swift_release();
      return sub_1A39B11F4((uint64_t)v6, &qword_1EE6D2E40);
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16))(v3, v6, v0);
      sub_1A39B11F4((uint64_t)v6, &qword_1EE6D2E40);
      sub_1A3AB4D48();
      swift_release();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
    }
  }
  return result;
}

uint64_t sub_1A39D6C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[7];

  v6 = sub_1A39A4820(&qword_1EE6D2E30);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A39A4820(&qword_1EE6D2E40);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1A39A4820(&qword_1EE6D2E70);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a3 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_continuation;
  swift_beginAccess();
  sub_1A39D62F4(v16, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6))
  {
    sub_1A39B11F4((uint64_t)v12, &qword_1EE6D2E40);
    v17 = sub_1A39A4820((uint64_t *)&unk_1EE6D2E78);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 1, 1, v17);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v12, v6);
    sub_1A39B11F4((uint64_t)v12, &qword_1EE6D2E40);
    v18 = sub_1A3AB4B38();
    v24[1] = a1;
    v24[2] = a2;
    v24[3] = v18;
    v24[4] = v19;
    v24[5] = v20;
    v24[6] = v21;
    sub_1A3AB4D3C();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v22 = sub_1A39A4820((uint64_t *)&unk_1EE6D2E78);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v15, 0, 1, v22);
  }
  sub_1A39B11F4((uint64_t)v15, &qword_1EE6D2E70);
  return *(unsigned __int8 *)(a3 + OBJC_IVAR____TtC12TextToSpeech18StreamingTokenizer_shouldContinue);
}

uint64_t sub_1A39D6E44()
{
  uint64_t v0;

  (*(void (**)(void))(**(_QWORD **)v0 + 128))();
  return swift_release();
}

uint64_t sub_1A39D6E70()
{
  return type metadata accessor for StreamingTokenizer();
}

uint64_t type metadata accessor for StreamingTokenizer()
{
  uint64_t result;

  result = qword_1EE6D7D50;
  if (!qword_1EE6D7D50)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1A39D6EB4()
{
  unint64_t v0;
  unint64_t v1;

  sub_1A39D6FB0(319, &qword_1EE6D2E60, &qword_1EE6D2E48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DF0838]);
  if (v0 <= 0x3F)
  {
    sub_1A39D6FB0(319, &qword_1EE6D2E68, &qword_1EE6D2E30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for StreamingTokenizer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StreamingTokenizer.makeAsyncIterator()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of StreamingTokenizer.cancel()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

void sub_1A39D6FB0(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = sub_1A39AB624(a3);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_1A39D7008()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A39D702C()
{
  return sub_1A39D6A30();
}

uint64_t sub_1A39D7034(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A39D6C20(a1, a2, v2);
}

uint64_t BufferedAudioQueue.executor.getter()
{
  return swift_retain();
}

uint64_t sub_1A39D7054()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned int *)(v0 + 32);
}

uint64_t sub_1A39D7084(int a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_DWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*sub_1A39D70C0())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1A39D70FC()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_1A39D712C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*sub_1A39D7168())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39D71A4()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned int *)(v0 + 48);
}

uint64_t sub_1A39D71D4(int a1)
{
  _DWORD *v1;
  uint64_t v3;
  uint64_t result;
  unsigned int v5;

  v3 = swift_beginAccess();
  v1[12] = a1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 144))(v3);
  if (result)
  {
    v5 = v1[12];
    result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 120))();
    if (v5 < result)
    {
      swift_continuation_throwingResume();
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 152))(0);
    }
  }
  return result;
}

uint64_t (*sub_1A39D725C(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A39D729C;
}

uint64_t sub_1A39D729C(uint64_t a1, char a2)
{
  uint64_t result;
  _DWORD *v5;
  unsigned int v6;
  uint64_t v7;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    result = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(a1 + 24) + 144))(result);
    if (result)
    {
      v5 = *(_DWORD **)(a1 + 24);
      v6 = v5[12];
      result = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 120))();
      if (v6 < result)
      {
        v7 = *(_QWORD *)(a1 + 24);
        swift_continuation_throwingResume();
        return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 152))(0);
      }
    }
  }
  return result;
}

uint64_t sub_1A39D731C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  type metadata accessor for BufferedAudioQueue();
  v4[16] = sub_1A39D4188(&qword_1EE6D2E88, v5, (uint64_t (*)(uint64_t))type metadata accessor for BufferedAudioQueue, (uint64_t)&protocol conformance descriptor for BufferedAudioQueue);
  v4[17] = sub_1A3AB4C70();
  v4[18] = v6;
  return swift_task_switch();
}

void (*sub_1A39D7394())(uint64_t, _QWORD)
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  void (*result)(uint64_t, _QWORD);
  _DWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 168))();
  if (v2 >= (*(unsigned int (**)(void))(*(_QWORD *)v1 + 120))())
  {
    v16 = swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v16;
    *(_OWORD *)(v16 + 16) = *(_OWORD *)(v0 + 104);
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v17;
    *v17 = v0;
    v17[1] = sub_1A39D7578;
    return (void (*)(uint64_t, _QWORD))sub_1A3AB5660();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 120);
    v4 = objc_msgSend(*(id *)(v0 + 96), sel_frameLength);
    result = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 184))(v0 + 64);
    v7 = *v6 + v4;
    if (__CFADD__(*v6, v4))
    {
      __break(1u);
    }
    else
    {
      v9 = *(_QWORD *)(v0 + 112);
      v8 = *(_QWORD *)(v0 + 120);
      v11 = *(void **)(v0 + 96);
      v10 = *(_QWORD *)(v0 + 104);
      *v6 = v7;
      result(v0 + 64, 0);
      v12 = *(void **)(v8 + 24);
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = v10;
      v13[3] = v9;
      v13[4] = v8;
      v13[5] = v11;
      *(_QWORD *)(v0 + 48) = sub_1A39D7AE0;
      *(_QWORD *)(v0 + 56) = v13;
      *(_QWORD *)(v0 + 16) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 24) = 1107296256;
      *(_QWORD *)(v0 + 32) = sub_1A39D7BA0;
      *(_QWORD *)(v0 + 40) = &unk_1E4A9F850;
      v14 = _Block_copy((const void *)(v0 + 16));
      swift_retain();
      swift_retain();
      v15 = v11;
      swift_release();
      objc_msgSend(v12, sel_playBuffer_completionHandler_, v15, v14);
      _Block_release(v14);
      return (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  return result;
}

uint64_t sub_1A39D7578()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

void (*sub_1A39D75CC())(uint64_t, _QWORD)
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  void (*result)(uint64_t, _QWORD);
  _DWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  id v13;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = objc_msgSend(*(id *)(v0 + 96), sel_frameLength);
  result = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184))(v0 + 64);
  v5 = *v4 + v2;
  if (__CFADD__(*v4, v2))
  {
    __break(1u);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 120);
    v9 = *(void **)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 104);
    *v4 = v5;
    result(v0 + 64, 0);
    v10 = *(void **)(v6 + 24);
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = v8;
    v11[3] = v7;
    v11[4] = v6;
    v11[5] = v9;
    *(_QWORD *)(v0 + 48) = sub_1A39D7AE0;
    *(_QWORD *)(v0 + 56) = v11;
    *(_QWORD *)(v0 + 16) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = sub_1A39D7BA0;
    *(_QWORD *)(v0 + 40) = &unk_1E4A9F850;
    v12 = _Block_copy((const void *)(v0 + 16));
    swift_retain();
    swift_retain();
    v13 = v9;
    swift_release();
    objc_msgSend(v10, sel_playBuffer_completionHandler_, v13, v12);
    _Block_release(v12);
    return (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t type metadata accessor for BufferedAudioQueue()
{
  return objc_opt_self();
}

uint64_t sub_1A39D7724(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = a2;
  sub_1A39D4188(&qword_1EE6D2E88, a2, (uint64_t (*)(uint64_t))type metadata accessor for BufferedAudioQueue, (uint64_t)&protocol conformance descriptor for BufferedAudioQueue);
  if (a2)
  {
    swift_getObjectType();
    sub_1A3AB4C70();
  }
  return swift_task_switch();
}

uint64_t sub_1A39D77A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[10];
  v0[2] = v0;
  v0[3] = sub_1A39D77F8;
  v2 = swift_continuation_init();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 152))(v2);
  return swift_continuation_await();
}

uint64_t sub_1A39D77F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 8))();
}

uint64_t sub_1A39D783C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1A39B1604;
  return sub_1A39D7724((uint64_t)v2, v0);
}

uint64_t sub_1A39D7884()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

uint64_t sub_1A39D78A8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[5];

  v9 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v24 - v13;
  a2(a1);
  v15 = sub_1A3A63914();
  swift_beginAccess();
  v16 = *v15;
  v17 = sub_1A3AB4D00();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v14, 1, 1, v17);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a4;
  *(_QWORD *)(v19 + 24) = a5;
  sub_1A39D7EF4((uint64_t)v14, (uint64_t)v12);
  LODWORD(v15) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v12, 1, v17);
  swift_retain();
  swift_retain();
  v20 = a5;
  if ((_DWORD)v15 == 1)
  {
    sub_1A39D4F2C((uint64_t)v12);
  }
  else
  {
    sub_1A3AB4CF4();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v12, v17);
  }
  v21 = sub_1A39D4188((unint64_t *)&qword_1EE6D2540, 255, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = &unk_1EE6D2EB8;
  *(_QWORD *)(v22 + 24) = v19;
  v24[1] = 6;
  v24[2] = 0;
  v24[3] = v16;
  v24[4] = v21;
  swift_task_create();
  swift_release();
  return sub_1A39D4F2C((uint64_t)v14);
}

uint64_t sub_1A39D7AAC()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1A39D7AE0(uint64_t a1)
{
  uint64_t v1;

  return sub_1A39D78A8(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_1A39D7AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[2] = a2;
  v3[3] = a3;
  v3[4] = *(_QWORD *)(*(_QWORD *)a2 + 200);
  type metadata accessor for BufferedAudioQueue();
  sub_1A39D4188(&qword_1EE6D2E88, v4, (uint64_t (*)(uint64_t))type metadata accessor for BufferedAudioQueue, (uint64_t)&protocol conformance descriptor for BufferedAudioQueue);
  sub_1A3AB4C70();
  return swift_task_switch();
}

uint64_t sub_1A39D7B6C()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 32))(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39D7BA0(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t sub_1A39D7BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1A39D7BEC()
{
  return swift_release();
}

uint64_t (*sub_1A39D7BF4(void *a1))(_BYTE *, _QWORD)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t (*result)(_BYTE *, _QWORD);
  unsigned int *v4;
  _BYTE v5[32];

  v2 = objc_msgSend(a1, sel_frameLength);
  result = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 184))(v5);
  if (*v4 < v2)
  {
    __break(1u);
  }
  else
  {
    *v4 -= v2;
    return (uint64_t (*)(_BYTE *, _QWORD))result(v5, 0);
  }
  return result;
}

uint64_t BufferedAudioQueue.__allocating_init(queue:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = swift_allocObject();
  type metadata accessor for TTSExecutor.Serialized();
  v3 = sub_1A3A630D8();
  v4 = TTSExecutor.Serialized.__allocating_init(executor:)(v3);
  *(_DWORD *)(v2 + 32) = 441000;
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)(v2 + 24) = a1;
  return v2;
}

uint64_t BufferedAudioQueue.init(queue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for TTSExecutor.Serialized();
  v3 = sub_1A3A630D8();
  v4 = TTSExecutor.Serialized.__allocating_init(executor:)(v3);
  *(_DWORD *)(v1 + 32) = 441000;
  *(_QWORD *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)(v1 + 24) = a1;
  return v1;
}

uint64_t BufferedAudioQueue.deinit()
{
  uint64_t v0;

  swift_release();

  return v0;
}

uint64_t BufferedAudioQueue.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1A39D7D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for BufferedAudioQueue();
  v2 = sub_1A39D4188(&qword_1EE6D2EA8, v1, (uint64_t (*)(uint64_t))type metadata accessor for BufferedAudioQueue, (uint64_t)&protocol conformance descriptor for BufferedAudioQueue);
  return TTSActor.unownedExecutor.getter(v0, v2);
}

uint64_t sub_1A39D7DAC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1A39D4188(&qword_1EE6D2E88, a2, (uint64_t (*)(uint64_t))type metadata accessor for BufferedAudioQueue, (uint64_t)&protocol conformance descriptor for BufferedAudioQueue);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t method lookup function for BufferedAudioQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BufferedAudioQueue.play(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 192)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 192));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_1A39B1604;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of BufferedAudioQueue.__allocating_init(queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t sub_1A39D7E78()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1A39D7EA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1A39D5174;
  return sub_1A39D7AEC((uint64_t)v4, v2, v3);
}

uint64_t sub_1A39D7EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A39D7F3C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A39D7F60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A39D5174;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE6D3F60 + dword_1EE6D3F60))(a1, v4);
}

uint64_t sub_1A39D7FD0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1A39D7FE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v18 - v11;
  MEMORY[0x1E0C80A78](v10);
  (*(void (**)(char *))(v14 + 16))((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_1A39D8144(a1, (uint64_t)v12, a2);
  if (v2)
  {
    v16 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v16(v9, v12, v5);
    if (sub_1A3AB563C())
    {
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
    else
    {
      swift_allocError();
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v16)(v17, v9, v5);
    }
  }
  return result;
}

uint64_t sub_1A39D8144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a3, v3);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 32))(a2, v3, *(_QWORD *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

uint64_t DefaultVoiceSource.executor.getter()
{
  return swift_retain();
}

id sub_1A39D81E0()
{
  id result;

  type metadata accessor for DefaultVoiceSource();
  swift_allocObject();
  result = DefaultVoiceSource.init()();
  qword_1ED1B5B18 = (uint64_t)result;
  return result;
}

id DefaultVoiceSource.__allocating_init()()
{
  swift_allocObject();
  return DefaultVoiceSource.init()();
}

uint64_t *sub_1A39D824C()
{
  if (qword_1ED1B5B20 != -1)
    swift_once();
  return &qword_1ED1B5B18;
}

uint64_t static DefaultVoiceSource.shared.getter()
{
  if (qword_1ED1B5B20 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_1A39D82CC()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;

  v0 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*sub_1A3A4A700() + 120);
  v1 = swift_retain();
  v2 = v0(v1);
  swift_release();
  return v2;
}

id DefaultVoiceSource.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  objc_class *v25;
  id v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  objc_super v65;

  v1 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v52 = (uint64_t)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v55 = (char *)&v49 - v4;
  v59 = sub_1A39A4820(&qword_1ED1B53B8);
  v5 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1A39A4820((uint64_t *)&unk_1ED1B53C0);
  v60 = *(_QWORD *)(v51 - 8);
  v54 = *(_QWORD *)(v60 + 64);
  v8 = MEMORY[0x1E0C80A78](v51);
  v53 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v49 - v10;
  v12 = sub_1A39A4820(&qword_1ED1B53E8);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v49 - v17;
  type metadata accessor for TTSExecutor.Serialized();
  swift_retain();
  v19 = sub_1A3A630D8();
  *((_QWORD *)v0 + 2) = TTSExecutor.Serialized.__allocating_init(executor:)(v19);
  v20 = OBJC_IVAR____TtC12TextToSpeech18DefaultVoiceSource_debouncer;
  type metadata accessor for Debouncer();
  *(_QWORD *)&v0[v20] = sub_1A3A3EE4C(0.25);
  sub_1A39A4820(&qword_1ED1B52A0);
  v21 = v59;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF07B8], v59);
  sub_1A3AB4D0C();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v21);
  v50 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
  v22 = v51;
  v50(&v0[OBJC_IVAR____TtC12TextToSpeech18DefaultVoiceSource_streamContinuation], v11, v51);
  sub_1A39A4820(&qword_1ED1B5368);
  v56 = v18;
  v57 = v13;
  v23 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v58 = v12;
  v23(v16, v18, v12);
  *((_QWORD *)v0 + 3) = StreamCachedValue.__allocating_init(stream:recomputeBlock:)((uint64_t)v16, 0, 0, v24);
  swift_release();
  v25 = (objc_class *)type metadata accessor for DefaultVoiceSource();
  v65.receiver = v0;
  v65.super_class = v25;
  v26 = objc_msgSendSuper2(&v65, sel_init);
  v27 = sub_1A3A63914();
  swift_beginAccess();
  v28 = *v27;
  v29 = sub_1A3AB4D00();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = v55;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v55, 1, 1, v29);
  v32 = v53;
  v59 = (uint64_t)v11;
  v33 = v11;
  v34 = v22;
  v50(v53, v33, v22);
  v35 = v60;
  v36 = (*(unsigned __int8 *)(v60 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = v26;
  v38 = v37 + v36;
  v39 = v34;
  v40 = v32;
  v41 = v28;
  (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v38, v40, v34);
  v42 = (uint64_t)v31;
  v43 = v52;
  sub_1A39D89E8(v42, v52);
  v44 = v43;
  LODWORD(v34) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v43, 1, v29);
  v45 = v26;
  swift_retain();
  if ((_DWORD)v34 == 1)
  {
    sub_1A39D4F2C(v44);
  }
  else
  {
    sub_1A3AB4CF4();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v44, v29);
  }
  v46 = sub_1A39B9F44((unint64_t *)&qword_1EE6D2540, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = &unk_1EE6D2ED8;
  *(_QWORD *)(v47 + 24) = v37;
  v61 = 6;
  v62 = 0;
  v63 = v41;
  v64 = v46;
  swift_task_create();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v59, v39);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
  return v45;
}

