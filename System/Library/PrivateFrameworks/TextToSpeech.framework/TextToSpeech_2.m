uint64_t sub_1A3A56DE8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A56E34()
{
  uint64_t v0;

  sub_1A39B7B74(*(_QWORD *)(v0 + 40), _s15UtteranceRunnerC14SynthesisStateVMa);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A56E80(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[6] = a1;
  v2[7] = v1;
  sub_1A39A4820(&qword_1EE6D3240);
  v2[8] = swift_task_alloc();
  sub_1A39A4820(&qword_1EE6D4290);
  v2[9] = swift_task_alloc();
  v3 = _s15UtteranceRunnerC14SynthesisStateVMa(0);
  v2[10] = v3;
  v2[11] = *(_QWORD *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
  sub_1A39B9F44(&qword_1EE6D4238, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
  v2[16] = sub_1A3AB4C70();
  v2[17] = v4;
  return swift_task_switch();
}

uint64_t sub_1A3A56F8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;

  sub_1A39B7B30(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 120), _s15UtteranceRunnerC14SynthesisStateVMa);
  *(_QWORD *)(v0 + 144) = OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_suspendedState;
  v1 = *(uint64_t **)(v0 + 120);
  v2 = *v1;
  sub_1A39B7B30((uint64_t)v1, *(_QWORD *)(v0 + 112), _s15UtteranceRunnerC14SynthesisStateVMa);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 120);
    v4 = *(_QWORD *)(v0 + 104);
    sub_1A39B7B74(*(_QWORD *)(v0 + 112), _s15UtteranceRunnerC14SynthesisStateVMa);
    sub_1A39B7B30(v3, v4, _s15UtteranceRunnerC14SynthesisStateVMa);
LABEL_4:
    sub_1A39B7B74(*(_QWORD *)(v0 + 104), _s15UtteranceRunnerC14SynthesisStateVMa);
    goto LABEL_5;
  }
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + *(int *)(*(_QWORD *)(v0 + 80) + 28)) + 16);
  sub_1A39B7B74(v5, _s15UtteranceRunnerC14SynthesisStateVMa);
  sub_1A39B7B30(v6, v7, _s15UtteranceRunnerC14SynthesisStateVMa);
  if (v8)
    goto LABEL_4;
  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 16);
  sub_1A39B7B74(v11, _s15UtteranceRunnerC14SynthesisStateVMa);
  if (!v12)
  {
    if (*(_BYTE *)(*(_QWORD *)(v0 + 56) + 281) == 1)
      sub_1A3A5C11C(1);
    goto LABEL_10;
  }
LABEL_5:
  if (*(_BYTE *)(*(_QWORD *)(v0 + 56) + 281) == 1)
  {
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v9;
    *v9 = v0;
    v9[1] = sub_1A3A57148;
    return sub_1A3A57514(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
  }
LABEL_10:
  sub_1A39B7B74(*(_QWORD *)(v0 + 120), _s15UtteranceRunnerC14SynthesisStateVMa);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A57148()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A571A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 56);
  sub_1A39B7B74(v1, _s15UtteranceRunnerC14SynthesisStateVMa);
  sub_1A3A60F4C(v2, v1, _s15UtteranceRunnerC14SynthesisStateVMa);
  if (*(_BYTE *)(v3 + 281) == 2)
  {
    v4 = *(_QWORD *)(v0 + 80);
    v5 = *(_QWORD *)(v0 + 88);
    v6 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 56) + *(_QWORD *)(v0 + 144);
    sub_1A39B7B30(*(_QWORD *)(v0 + 120), v6, _s15UtteranceRunnerC14SynthesisStateVMa);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v6, 0, 1, v4);
    swift_beginAccess();
    sub_1A3A61184(v6, v7);
    swift_endAccess();
  }
  v8 = *(uint64_t **)(v0 + 120);
  v9 = *v8;
  sub_1A39B7B30((uint64_t)v8, *(_QWORD *)(v0 + 112), _s15UtteranceRunnerC14SynthesisStateVMa);
  v10 = *(_QWORD *)(v0 + 112);
  v11 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 104);
  if (v9)
  {
    sub_1A39B7B74(v10, _s15UtteranceRunnerC14SynthesisStateVMa);
    sub_1A39B7B30(v11, v12, _s15UtteranceRunnerC14SynthesisStateVMa);
LABEL_6:
    sub_1A39B7B74(*(_QWORD *)(v0 + 104), _s15UtteranceRunnerC14SynthesisStateVMa);
    goto LABEL_7;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + *(int *)(*(_QWORD *)(v0 + 80) + 28)) + 16);
  sub_1A39B7B74(v10, _s15UtteranceRunnerC14SynthesisStateVMa);
  sub_1A39B7B30(v11, v12, _s15UtteranceRunnerC14SynthesisStateVMa);
  if (v13)
    goto LABEL_6;
  v16 = *(_QWORD *)(v0 + 104);
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 8) + 16);
  sub_1A39B7B74(v16, _s15UtteranceRunnerC14SynthesisStateVMa);
  if (!v17)
  {
    if (*(_BYTE *)(*(_QWORD *)(v0 + 56) + 281) == 1)
      sub_1A3A5C11C(1);
    goto LABEL_12;
  }
LABEL_7:
  if (*(_BYTE *)(*(_QWORD *)(v0 + 56) + 281) == 1)
  {
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v14;
    *v14 = v0;
    v14[1] = sub_1A3A57148;
    return sub_1A3A57514(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
  }
LABEL_12:
  sub_1A39B7B74(*(_QWORD *)(v0 + 120), _s15UtteranceRunnerC14SynthesisStateVMa);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A573E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  sub_1A39B7B74(*(_QWORD *)(v0 + 120), _s15UtteranceRunnerC14SynthesisStateVMa);
  sub_1A39B9F00(v1 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_eventContinuation, v2, &qword_1EE6D3240);
  v3 = sub_1A39A4820(&qword_1EE6D3250);
  v4 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    v5 = *(_QWORD *)(v0 + 64);

    sub_1A39B11F4(v5, &qword_1EE6D3240);
  }
  else
  {
    v6 = *(void **)(v0 + 160);
    *(_QWORD *)(v0 + 40) = v6;
    v7 = *(_QWORD *)(v0 + 64);
    v8 = v6;
    sub_1A3AB4E5C();

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A57514(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[55] = a2;
  v3[56] = v2;
  v3[54] = a1;
  sub_1A39A4820(&qword_1EE6D2B68);
  v3[57] = swift_task_alloc();
  v4 = sub_1A3AB4724();
  v3[58] = v4;
  v3[59] = *(_QWORD *)(v4 - 8);
  v3[60] = swift_task_alloc();
  v3[61] = swift_task_alloc();
  v3[62] = swift_task_alloc();
  v5 = type metadata accessor for SpeechSlicer.Slice(0);
  v3[63] = v5;
  v3[64] = *(_QWORD *)(v5 - 8);
  v3[65] = swift_task_alloc();
  v3[66] = swift_task_alloc();
  v3[67] = swift_task_alloc();
  v3[68] = _s15UtteranceRunnerC14SynthesisStateVMa(0);
  v3[69] = swift_task_alloc();
  type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
  sub_1A39B9F44(&qword_1EE6D4238, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
  v3[70] = sub_1A3AB4C70();
  v3[71] = v6;
  return swift_task_switch();
}

uint64_t sub_1A3A57660()
{
  uint64_t v0;
  id v1;
  _QWORD *v2;
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(unint64_t, unint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t *, uint64_t);
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  id v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  _BOOL4 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t result;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  _QWORD *v118;
  uint64_t v119;
  id v120;
  _QWORD *v121;
  void *v122;
  void *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v142)(uint64_t, uint64_t);
  uint64_t (*v143)(_QWORD *, uint64_t, uint64_t);
  uint64_t v144[2];

  *(_QWORD *)(v0 + 400) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 368) = 0;
  *(_BYTE *)(v0 + 376) = 0;
  swift_beginAccess();
  if (*(unsigned __int8 *)(v0 + 376) <= 1u)
  {
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v0 + 448) + 281) != 1)
        goto LABEL_33;
      v3 = *(_QWORD ***)(v0 + 552);
      sub_1A39B7B30(*(_QWORD *)(v0 + 440), (uint64_t)v3, _s15UtteranceRunnerC14SynthesisStateVMa);
      v4 = *v3;
      v5 = *(_QWORD **)(v0 + 552);
      if (*v3)
      {
        *v5 = 0;
        *(_QWORD *)(v0 + 928) = v4;
        v98 = *(_QWORD *)(v0 + 552);
        v99 = *(_QWORD *)(v98 + 8);
        *(_QWORD *)(v0 + 936) = v99;
        *(_QWORD *)(v98 + 8) = MEMORY[0x1E0DEE9D8];
        v100 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 944) = v100;
        *v100 = v0;
        v100[1] = sub_1A3A59574;
        return sub_1A3A5A700(v99, (uint64_t)v4, *(_QWORD *)(v0 + 552));
      }
      v6 = *(_QWORD *)(v0 + 544);
      v7 = (char *)v5 + *(int *)(v6 + 28);
      if (!*(_QWORD *)(*(_QWORD *)v7 + 16))
        break;
      v8 = *(_QWORD *)(v0 + 536);
      v9 = *(_QWORD *)(v0 + 504);
      v10 = *(_QWORD *)(v0 + 512);
      v11 = *(_QWORD *)v7
          + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      v12 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16);
      *(_QWORD *)(v0 + 576) = v12;
      v12(v8, v11, v9);
      sub_1A3A5FE04(0, 1);
      v13 = (uint64_t)v5 + *(int *)(v6 + 24);
      sub_1A39B11F4(v13, &qword_1EE6D4300);
      v141 = (void (*)(uint64_t, uint64_t, uint64_t))v12;
      v12(v13, v8, v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
      v14 = sub_1A39B6190();
      v16 = v15;
      v17 = *(_QWORD *)(v8 + 8);
      v138 = *(_QWORD *)(v0 + 536);
      if (v17)
      {
        v18 = **(_QWORD **)(v0 + 536);
        v17 = swift_bridgeObjectRetain();
      }
      else
      {
        v18 = 0;
      }
      v19 = *(_QWORD *)(v0 + 528);
      v20 = *(_QWORD *)(v0 + 496);
      v21 = *(_QWORD *)(v0 + 504);
      v23 = *(_QWORD *)(v0 + 464);
      v22 = *(_QWORD *)(v0 + 472);
      v24 = *(_QWORD *)(v0 + 448);
      *(_QWORD *)(v0 + 224) = v14;
      *(_QWORD *)(v0 + 232) = v16;
      *(_QWORD *)(v0 + 240) = v18;
      *(_QWORD *)(v0 + 248) = v17;
      *(_OWORD *)(v0 + 256) = 0u;
      *(_OWORD *)(v0 + 272) = 0u;
      *(_BYTE *)(v0 + 288) = 5;
      v25._countAndFlagsBits = *(_QWORD *)(v24 + 32);
      *(_QWORD *)(v0 + 584) = v25._countAndFlagsBits;
      v25._object = *(void **)(v24 + 40);
      *(_QWORD *)(v0 + 592) = v25._object;
      TTSSpeechEvent.emit(forJob:)(v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v26 = sub_1A39AACDC();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v20, v26, v23);
      v141(v19, v138, v21);
      v27 = sub_1A3AB470C();
      v28 = sub_1A3AB4FC4();
      v29 = os_log_type_enabled(v27, v28);
      v30 = *(_QWORD *)(v0 + 528);
      v31 = *(_QWORD *)(v0 + 504);
      v32 = *(_QWORD *)(v0 + 512);
      v33 = *(_QWORD *)(v0 + 496);
      v35 = *(_QWORD *)(v0 + 464);
      v34 = *(_QWORD *)(v0 + 472);
      if (v29)
      {
        v139 = *(_QWORD *)(v0 + 496);
        v36 = swift_slowAlloc();
        v136 = v35;
        v37 = swift_slowAlloc();
        v144[0] = v37;
        *(_DWORD *)v36 = 136315138;
        v38 = sub_1A39B6190();
        *(_QWORD *)(v36 + 4) = sub_1A39A2878(v38, v39, v144);
        swift_bridgeObjectRelease();
        v40 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
        v40(v30, v31);
        _os_log_impl(&dword_1A3940000, v27, v28, "Speaking utterance slice: %s", (uint8_t *)v36, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A859781C](v37, -1, -1);
        MEMORY[0x1A859781C](v36, -1, -1);

        v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v139, v136);
      }
      else
      {
        v40 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
        v40(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 504));

        v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      }
      *(_QWORD *)(v0 + 600) = v40;
      v42 = *(_QWORD *)(v0 + 536);
      if (*(_BYTE *)(v0 + 376) == 1)
      {
        v101 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*(_QWORD *)(v0 + 448) + 24))
                                                  + 0x150))(v41);
        *(_QWORD *)(v0 + 608) = v101;
        result = *(_QWORD *)(v42 + 8);
        *(_QWORD *)(v0 + 616) = result;
        if (result)
        {
          v102 = *(uint64_t **)(v0 + 536);
          v103 = *((unsigned __int8 *)v102 + 100);
          v104 = v103 << 32;
          v105 = *((_DWORD *)v102 + 24);
          *(_DWORD *)(v0 + 624) = v105;
          *(_BYTE *)(v0 + 628) = v103;
          v106 = v102[11];
          *(_QWORD *)(v0 + 632) = v106;
          v107 = (void *)v102[10];
          *(_QWORD *)(v0 + 640) = v107;
          v108 = v102[9];
          *(_QWORD *)(v0 + 648) = v108;
          v109 = v102[8];
          *(_QWORD *)(v0 + 656) = v109;
          v110 = v102[7];
          *(_QWORD *)(v0 + 664) = v110;
          v111 = v102[6];
          *(_QWORD *)(v0 + 672) = v111;
          v112 = v102[5];
          *(_QWORD *)(v0 + 680) = v112;
          v113 = v102[4];
          *(_QWORD *)(v0 + 688) = v113;
          v114 = v102[3];
          *(_QWORD *)(v0 + 696) = v114;
          v115 = v102[2];
          *(_QWORD *)(v0 + 704) = v115;
          v116 = *v102;
          *(_QWORD *)(v0 + 712) = v116;
          *(_QWORD *)(v0 + 16) = v116;
          *(_QWORD *)(v0 + 24) = result;
          *(_QWORD *)(v0 + 32) = v115;
          *(_QWORD *)(v0 + 40) = v114;
          *(_QWORD *)(v0 + 48) = v113;
          *(_WORD *)(v0 + 56) = v112;
          *(_QWORD *)(v0 + 64) = v111;
          *(_BYTE *)(v0 + 72) = v110;
          *(_QWORD *)(v0 + 80) = v109;
          *(_QWORD *)(v0 + 88) = v108;
          *(_QWORD *)(v0 + 96) = v107;
          *(_DWORD *)(v0 + 104) = v106;
          *(_BYTE *)(v0 + 108) = BYTE4(v106) & 1;
          *(_DWORD *)(v0 + 112) = v105;
          *(_BYTE *)(v0 + 116) = BYTE4(v104) & 1;
          v142 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v101 + 344)
                                                          + *(_QWORD *)(*(_QWORD *)v101 + 344));
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v117 = v107;
          v118 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 720) = v118;
          *v118 = v0;
          v118[1] = sub_1A3A583EC;
          return v142(v0 + 120, v0 + 16);
        }
        else
        {
          __break(1u);
        }
        return result;
      }
      v141(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 504));
      v43 = *(void (**)(uint64_t *, uint64_t))(v0 + 600);
      v44 = *(uint64_t **)(v0 + 520);
      v45 = *(_QWORD *)(v0 + 504);
      v46 = v44[1];
      v47 = v44[2];
      v48 = v44[4];
      v49 = v44[8];
      v50 = v44[9];
      v2 = (_QWORD *)v44[10];
      sub_1A39A07C8(*v44, v46, v47, v44[3], v48, v44[5], v44[6], v44[7], v49, v50, v2);
      v43(v44, v45);
      if (v46)
      {
        *(_QWORD *)(v0 + 872) = v2;
        *(_QWORD *)(v0 + 864) = v50;
        *(_QWORD *)(v0 + 856) = v49;
        *(_QWORD *)(v0 + 848) = v48;
        *(_QWORD *)(v0 + 840) = v47;
        *(_QWORD *)(v0 + 832) = v46;
        *(_BYTE *)(v0 + 732) = 0;
        *(_DWORD *)(v0 + 728) = 0;
        *(_OWORD *)(v0 + 736) = 0u;
        *(_OWORD *)(v0 + 752) = 0u;
        *(_OWORD *)(v0 + 768) = 0u;
        *(_OWORD *)(v0 + 784) = 0u;
        *(_OWORD *)(v0 + 800) = 0u;
        *(_OWORD *)(v0 + 816) = 0u;
        v119 = *(_QWORD *)(v0 + 448);
        sub_1A39B6190();
        v120 = objc_allocWithZone(MEMORY[0x1E0C89B68]);
        v121 = v2;
        v122 = (void *)sub_1A3AB4958();
        swift_bridgeObjectRelease();
        v5 = objc_msgSend(v120, sel_initWithSSMLRepresentation_voice_, v122, v121);
        *(_QWORD *)(v0 + 880) = v5;

        v123 = (void *)sub_1A3AB4958();
        objc_msgSend(v5, sel_setJobIdentifier_, v123);

        v4 = *(_QWORD **)(v119 + 24);
        v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        *(_QWORD *)(v0 + 408) = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x240))();
        v124 = (void *)(*(uint64_t (**)(void))((*v2 & *v4) + 0x2B8))();
        if (v124)
        {
          v1 = v124;
          MEMORY[0x1A8595980]();
          if (*(_QWORD *)((*(_QWORD *)(v0 + 408) & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)(v0 + 408) & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
            goto LABEL_42;
          goto LABEL_49;
        }
        goto LABEL_43;
      }
      v51 = *(void (**)(uint64_t, uint64_t))(v0 + 600);
      v52 = *(_QWORD *)(v0 + 536);
      v53 = *(_QWORD *)(v0 + 504);
      sub_1A3A61140();
      v1 = (id)swift_allocError();
      *v54 = 0;
      swift_willThrow();
      v51(v52, v53);
      sub_1A39B7B74(*(_QWORD *)(v0 + 552), _s15UtteranceRunnerC14SynthesisStateVMa);
      v55 = *(_QWORD **)(v0 + 400);
      v56 = v1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v55 = sub_1A3A5E0D4(0, v55[2] + 1, 1, v55);
      v58 = v55[2];
      v57 = v55[3];
      if (v58 >= v57 >> 1)
        v55 = sub_1A3A5E0D4((_QWORD *)(v57 > 1), v58 + 1, 1, v55);
      v55[2] = v58 + 1;
      v55[v58 + 4] = v1;
      *(_QWORD *)(v0 + 400) = v55;
      v59 = *(_QWORD *)(v0 + 368);
      v60 = *(unsigned __int8 *)(v0 + 376);
      if (*(_BYTE *)(v0 + 376))
      {
        if (v60 == 1)
        {
          v61 = v59 <= 2;
          if (v59 <= 2)
            ++v59;
          else
            v59 = 0;
          if (v61)
            LOBYTE(v60) = 1;
          else
            LOBYTE(v60) = 2;
        }
      }
      else
      {
        LOBYTE(v60) = v59 > 0;
        if (v59 <= 0)
          ++v59;
        else
          v59 = 0;
      }
      v63 = *(_QWORD *)(v0 + 472);
      v62 = *(_QWORD *)(v0 + 480);
      v64 = *(_QWORD *)(v0 + 464);
      *(_QWORD *)(v0 + 368) = v59;
      *(_BYTE *)(v0 + 376) = v60;
      v65 = sub_1A39AACDC();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v62, v65, v64);
      v66 = sub_1A3AB470C();
      v67 = sub_1A3AB4FD0();
      v68 = os_log_type_enabled(v66, v67);
      v70 = *(_QWORD *)(v0 + 472);
      v69 = *(_QWORD *)(v0 + 480);
      v71 = *(_QWORD *)(v0 + 464);
      if (v68)
      {
        v72 = swift_slowAlloc();
        v73 = swift_slowAlloc();
        v144[0] = v73;
        *(_DWORD *)v72 = 136315138;
        v74 = *(_BYTE *)(v0 + 376);
        *(_QWORD *)(v0 + 384) = *(_QWORD *)(v0 + 368);
        *(_BYTE *)(v0 + 392) = v74;
        v75 = sub_1A3AB49E8();
        v2 = (_QWORD *)v76;
        *(_QWORD *)(v72 + 4) = sub_1A39A2878(v75, v76, v144);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A3940000, v66, v67, "Utterance encountered error, next fallback state: %s", (uint8_t *)v72, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A859781C](v73, -1, -1);
        MEMORY[0x1A859781C](v72, -1, -1);

      }
      else
      {

      }
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
      if (*(unsigned __int8 *)(v0 + 376) >= 2u)
        goto LABEL_33;
    }
    __break(1u);
LABEL_49:
    sub_1A3AB4BE0();
LABEL_42:
    sub_1A3AB4C10();
    sub_1A3AB4BC8();

LABEL_43:
    v125 = *(_QWORD *)(v0 + 536);
    v126 = *(_QWORD *)(v0 + 504);
    v127 = *(_QWORD *)(v0 + 456);
    v128 = (*(uint64_t (**)(void))((*v2 & *v4) + 0x210))();
    *(_QWORD *)(v0 + 888) = v128;
    sub_1A39B9F00(v125 + *(int *)(v126 + 20), v127, &qword_1EE6D2B68);
    v129 = sub_1A3AB45F8();
    v130 = *(_QWORD *)(v129 - 8);
    v131 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v127, 1, v129);
    v132 = *(_QWORD *)(v0 + 456);
    if (v131 == 1)
    {
      sub_1A39B11F4(*(_QWORD *)(v0 + 456), &qword_1EE6D2B68);
    }
    else
    {
      v133 = sub_1A3AB45D4();
      (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v132, v129);
      if (v133)
      {
LABEL_47:
        *(_QWORD *)(v0 + 896) = v133;
        v134 = *(_QWORD *)(v0 + 408);
        *(_QWORD *)(v0 + 904) = v134;
        v143 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v128 + 352)
                                                                  + *(_QWORD *)(*(_QWORD *)v128 + 352));
        v135 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 912) = v135;
        *v135 = v0;
        v135[1] = sub_1A3A59374;
        return v143(v5, v133, v134);
      }
    }
    v133 = *(_QWORD *)(*(_QWORD *)(v0 + 448) + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }
LABEL_33:
  v77 = *(_QWORD *)(v0 + 488);
  v78 = *(_QWORD *)(v0 + 464);
  v79 = *(_QWORD *)(v0 + 472);
  v80 = sub_1A39AACDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v77, v80, v78);
  swift_retain_n();
  v81 = sub_1A3AB470C();
  v82 = sub_1A3AB4FD0();
  v83 = os_log_type_enabled(v81, v82);
  v140 = *(_QWORD *)(v0 + 488);
  v85 = *(_QWORD *)(v0 + 464);
  v84 = *(_QWORD *)(v0 + 472);
  if (v83)
  {
    v86 = swift_slowAlloc();
    v87 = swift_slowAlloc();
    v144[0] = v87;
    *(_DWORD *)v86 = 136315394;
    v137 = v84;
    sub_1A39EA818();
    v88 = sub_1A3AB5624();
    *(_QWORD *)(v0 + 416) = sub_1A39A2878(v88, v89, v144);
    sub_1A3AB5138();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v86 + 12) = 2080;
    swift_beginAccess();
    v90 = *(_QWORD *)(v0 + 400);
    swift_bridgeObjectRetain();
    v91 = sub_1A39A4820(&qword_1EE6D09F0);
    v92 = MEMORY[0x1A85959A4](v90, v91);
    v94 = v93;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 424) = sub_1A39A2878(v92, v94, v144);
    sub_1A3AB5138();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A3940000, v81, v82, "Utterance: %s failed with errors: %s", (uint8_t *)v86, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A859781C](v87, -1, -1);
    MEMORY[0x1A859781C](v86, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v140, v85);
  }
  else
  {

    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v140, v85);
  }
  swift_beginAccess();
  v95 = *(_QWORD *)(v0 + 400);
  sub_1A3A61140();
  swift_allocError();
  *v96 = v95;
  swift_bridgeObjectRetain();
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A583EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 712);
  v11 = *(_QWORD *)(*(_QWORD *)v0 + 696);
  v12 = *(_QWORD *)(*(_QWORD *)v0 + 704);
  v9 = *(_QWORD *)(*(_QWORD *)v0 + 680);
  v10 = *(_QWORD *)(*(_QWORD *)v0 + 688);
  v7 = *(_QWORD *)(*(_QWORD *)v0 + 664);
  v8 = *(_QWORD *)(*(_QWORD *)v0 + 672);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 656);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 648);
  v4 = *(void **)(*(_QWORD *)v0 + 640);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 616);
  swift_task_dealloc();
  swift_release();
  sub_1A39A2EB8(v1, v5, v12, v11, v10, v9, v8, v7, v2, v3, v4);
  return swift_task_switch();
}

uint64_t sub_1A3A584D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void (*v36)(uint64_t *, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  id *v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void (*v71)(uint64_t, unint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Swift::String v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  _BOOL4 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t result;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  _BOOL4 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  _QWORD *v146;
  uint64_t v147;
  void *v148;
  void (*v149)(uint64_t, uint64_t);
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v166)(id, uint64_t, uint64_t);
  uint64_t (*v167)(uint64_t, uint64_t);
  uint64_t v168[3];

  v156 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 144);
  v158 = *(_QWORD *)(v0 + 136);
  v161 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  v164 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 192);
  v7 = *(void **)(v0 + 200);
  v8 = *(unsigned int *)(v0 + 216) | ((unint64_t)*(unsigned __int8 *)(v0 + 220) << 32);
  v150 = *(_QWORD *)(v0 + 208);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 576))(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 504));
  v154 = v3;
  v155 = v5;
  v152 = v2;
  v153 = v4;
  v151 = v8;
  if (v1)
  {
    v149 = *(void (**)(uint64_t, uint64_t))(v0 + 600);
    v9 = *(_QWORD *)(v0 + 520);
    v10 = *(_QWORD *)(v0 + 504);
    swift_bridgeObjectRetain();
    v11 = v158;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = v164;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = v7;
    v149(v9, v10);
    v14 = v1;
    v15 = v161;
    v16 = v6;
    v17 = v156;
LABEL_3:
    *(_QWORD *)(v0 + 872) = v13;
    *(_QWORD *)(v0 + 864) = v16;
    *(_QWORD *)(v0 + 856) = v12;
    *(_QWORD *)(v0 + 848) = v15;
    *(_QWORD *)(v0 + 840) = v11;
    *(_QWORD *)(v0 + 832) = v14;
    *(_QWORD *)(v0 + 824) = v17;
    *(_QWORD *)(v0 + 816) = v1;
    *(_QWORD *)(v0 + 808) = v158;
    *(_QWORD *)(v0 + 800) = v152;
    *(_QWORD *)(v0 + 792) = v161;
    *(_QWORD *)(v0 + 784) = v153;
    *(_QWORD *)(v0 + 776) = v154;
    *(_QWORD *)(v0 + 768) = v155;
    *(_QWORD *)(v0 + 760) = v164;
    *(_QWORD *)(v0 + 752) = v6;
    *(_QWORD *)(v0 + 744) = v7;
    *(_QWORD *)(v0 + 736) = v150;
    *(_DWORD *)(v0 + 728) = v151;
    *(_BYTE *)(v0 + 732) = BYTE4(v151);
    v18 = *(_QWORD *)(v0 + 448);
    sub_1A39B6190();
    v19 = objc_allocWithZone(MEMORY[0x1E0C89B68]);
    v20 = v13;
    v21 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
    v22 = objc_msgSend(v19, sel_initWithSSMLRepresentation_voice_, v21, v20);
    *(_QWORD *)(v0 + 880) = v22;

    v23 = (void *)sub_1A3AB4958();
    objc_msgSend(v22, sel_setJobIdentifier_, v23);

    v24 = *(_QWORD *)(v18 + 24);
    v25 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    *(_QWORD *)(v0 + 408) = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v24) + 0x240))();
    v26 = (void *)(*(uint64_t (**)(void))((*v25 & *(_QWORD *)v24) + 0x2B8))();
    if (v26)
    {
      v27 = v26;
      MEMORY[0x1A8595980]();
      if (*(_QWORD *)((*(_QWORD *)(v0 + 408) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 408) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
LABEL_52:
        sub_1A3AB4BE0();
      sub_1A3AB4C10();
      sub_1A3AB4BC8();

    }
    v28 = *(_QWORD *)(v0 + 536);
    v29 = *(_QWORD *)(v0 + 504);
    v30 = *(_QWORD *)(v0 + 456);
    v31 = (*(uint64_t (**)(void))((*v25 & *(_QWORD *)v24) + 0x210))();
    *(_QWORD *)(v0 + 888) = v31;
    sub_1A39B9F00(v28 + *(int *)(v29 + 20), v30, &qword_1EE6D2B68);
    v32 = sub_1A3AB45F8();
    v33 = *(_QWORD *)(v32 - 8);
    v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v30, 1, v32);
    v35 = *(_QWORD *)(v0 + 456);
    if (v34 == 1)
    {
      sub_1A39B11F4(*(_QWORD *)(v0 + 456), &qword_1EE6D2B68);
    }
    else
    {
      v102 = sub_1A3AB45D4();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v32);
      if (v102)
      {
LABEL_42:
        *(_QWORD *)(v0 + 896) = v102;
        v103 = *(_QWORD *)(v0 + 408);
        *(_QWORD *)(v0 + 904) = v103;
        v166 = (uint64_t (*)(id, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v31 + 352)
                                                            + *(_QWORD *)(*(_QWORD *)v31 + 352));
        v104 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 912) = v104;
        *v104 = v0;
        v104[1] = sub_1A3A59374;
        return v166(v22, v102, v103);
      }
    }
    v102 = *(_QWORD *)(*(_QWORD *)(v0 + 448) + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  v147 = v6;
  v148 = v7;
  while (1)
  {
    v36 = *(void (**)(uint64_t *, uint64_t))(v0 + 600);
    v37 = *(uint64_t **)(v0 + 520);
    v38 = *(_QWORD *)(v0 + 504);
    v14 = v37[1];
    v11 = v37[2];
    v15 = v37[4];
    v12 = v37[8];
    v16 = v37[9];
    v13 = (id)v37[10];
    sub_1A39A07C8(*v37, v14, v11, v37[3], v15, v37[5], v37[6], v37[7], v12, v16, v13);
    v36(v37, v38);
    if (v14)
    {
      v1 = 0;
      v17 = v156;
      v6 = v147;
      v7 = v148;
      goto LABEL_3;
    }
    v39 = *(void (**)(uint64_t, uint64_t))(v0 + 600);
    v40 = *(_QWORD *)(v0 + 536);
    v41 = *(_QWORD *)(v0 + 504);
    sub_1A3A61140();
    v25 = (_QWORD *)swift_allocError();
    *v42 = 0;
    swift_willThrow();
    v39(v40, v41);
    sub_1A39B7B74(*(_QWORD *)(v0 + 552), _s15UtteranceRunnerC14SynthesisStateVMa);
    v43 = *(_QWORD **)(v0 + 400);
    v44 = v25;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v43 = sub_1A3A5E0D4(0, v43[2] + 1, 1, v43);
    v46 = v43[2];
    v45 = v43[3];
    if (v46 >= v45 >> 1)
      v43 = sub_1A3A5E0D4((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    v43[2] = v46 + 1;
    v43[v46 + 4] = v25;
    *(_QWORD *)(v0 + 400) = v43;
    v47 = *(_QWORD *)(v0 + 368);
    v48 = *(unsigned __int8 *)(v0 + 376);
    if (*(_BYTE *)(v0 + 376))
    {
      if (v48 == 1)
      {
        v49 = v47 <= 2;
        if (v47 <= 2)
          ++v47;
        else
          v47 = 0;
        if (v49)
          LOBYTE(v48) = 1;
        else
          LOBYTE(v48) = 2;
      }
    }
    else
    {
      LOBYTE(v48) = v47 > 0;
      if (v47 <= 0)
        ++v47;
      else
        v47 = 0;
    }
    v51 = *(_QWORD *)(v0 + 472);
    v50 = *(_QWORD *)(v0 + 480);
    v52 = *(_QWORD *)(v0 + 464);
    *(_QWORD *)(v0 + 368) = v47;
    *(_BYTE *)(v0 + 376) = v48;
    v53 = sub_1A39AACDC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v50, v53, v52);
    v54 = sub_1A3AB470C();
    v55 = sub_1A3AB4FD0();
    v56 = os_log_type_enabled(v54, v55);
    v24 = *(_QWORD *)(v0 + 472);
    v57 = *(_QWORD *)(v0 + 480);
    v58 = *(_QWORD *)(v0 + 464);
    if (v56)
    {
      v59 = swift_slowAlloc();
      v60 = swift_slowAlloc();
      v168[0] = v60;
      *(_DWORD *)v59 = 136315138;
      v61 = *(_BYTE *)(v0 + 376);
      *(_QWORD *)(v0 + 384) = *(_QWORD *)(v0 + 368);
      *(_BYTE *)(v0 + 392) = v61;
      v62 = sub_1A3AB49E8();
      *(_QWORD *)(v59 + 4) = sub_1A39A2878(v62, v63, v168);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A3940000, v54, v55, "Utterance encountered error, next fallback state: %s", (uint8_t *)v59, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A859781C](v60, -1, -1);
      MEMORY[0x1A859781C](v59, -1, -1);

    }
    else
    {

    }
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v57, v58);
    if (*(unsigned __int8 *)(v0 + 376) >= 2u || *(_BYTE *)(*(_QWORD *)(v0 + 448) + 281) != 1)
      break;
    v64 = *(id **)(v0 + 552);
    sub_1A39B7B30(*(_QWORD *)(v0 + 440), (uint64_t)v64, _s15UtteranceRunnerC14SynthesisStateVMa);
    v22 = *v64;
    v27 = *(_QWORD **)(v0 + 552);
    if (*v64)
    {
      *v27 = 0;
      *(_QWORD *)(v0 + 928) = v22;
      v126 = *(_QWORD *)(v0 + 552);
      v127 = *(_QWORD *)(v126 + 8);
      *(_QWORD *)(v0 + 936) = v127;
      *(_QWORD *)(v126 + 8) = MEMORY[0x1E0DEE9D8];
      v128 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 944) = v128;
      *v128 = v0;
      v128[1] = sub_1A3A59574;
      return sub_1A3A5A700(v127, (uint64_t)v22, *(_QWORD *)(v0 + 552));
    }
    v65 = *(_QWORD *)(v0 + 544);
    v66 = (char *)v27 + *(int *)(v65 + 28);
    if (!*(_QWORD *)(*(_QWORD *)v66 + 16))
    {
      __break(1u);
      goto LABEL_52;
    }
    v67 = *(_QWORD *)(v0 + 536);
    v68 = *(_QWORD *)(v0 + 504);
    v69 = *(_QWORD *)(v0 + 512);
    v70 = *(_QWORD *)v66 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
    v71 = *(void (**)(uint64_t, unint64_t, uint64_t))(v69 + 16);
    *(_QWORD *)(v0 + 576) = v71;
    v71(v67, v70, v68);
    sub_1A3A5FE04(0, 1);
    v72 = (uint64_t)v27 + *(int *)(v65 + 24);
    sub_1A39B11F4(v72, &qword_1EE6D4300);
    v165 = (void (*)(uint64_t, uint64_t, uint64_t))v71;
    v71(v72, v67, v68);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v72, 0, 1, v68);
    v73 = sub_1A39B6190();
    v75 = v74;
    v76 = *(_QWORD *)(v67 + 8);
    v162 = *(_QWORD *)(v0 + 536);
    if (v76)
    {
      v77 = **(_QWORD **)(v0 + 536);
      v76 = swift_bridgeObjectRetain();
    }
    else
    {
      v77 = 0;
    }
    v78 = *(_QWORD *)(v0 + 528);
    v80 = *(_QWORD *)(v0 + 496);
    v79 = *(_QWORD *)(v0 + 504);
    v82 = *(_QWORD *)(v0 + 464);
    v81 = *(_QWORD *)(v0 + 472);
    v83 = *(_QWORD *)(v0 + 448);
    *(_QWORD *)(v0 + 224) = v73;
    *(_QWORD *)(v0 + 232) = v75;
    *(_QWORD *)(v0 + 240) = v77;
    *(_QWORD *)(v0 + 248) = v76;
    *(_OWORD *)(v0 + 256) = 0u;
    *(_OWORD *)(v0 + 272) = 0u;
    *(_BYTE *)(v0 + 288) = 5;
    v84._countAndFlagsBits = *(_QWORD *)(v83 + 32);
    *(_QWORD *)(v0 + 584) = v84._countAndFlagsBits;
    v84._object = *(void **)(v83 + 40);
    *(_QWORD *)(v0 + 592) = v84._object;
    TTSSpeechEvent.emit(forJob:)(v84);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v85 = sub_1A39AACDC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16))(v80, v85, v82);
    v165(v78, v162, v79);
    v86 = sub_1A3AB470C();
    v87 = sub_1A3AB4FC4();
    v88 = os_log_type_enabled(v86, v87);
    v89 = *(_QWORD *)(v0 + 528);
    v91 = *(_QWORD *)(v0 + 504);
    v90 = *(_QWORD *)(v0 + 512);
    v92 = *(_QWORD *)(v0 + 496);
    v94 = *(_QWORD *)(v0 + 464);
    v93 = *(_QWORD *)(v0 + 472);
    if (v88)
    {
      v163 = *(_QWORD *)(v0 + 464);
      v95 = swift_slowAlloc();
      v159 = v92;
      v96 = swift_slowAlloc();
      v168[0] = v96;
      *(_DWORD *)v95 = 136315138;
      v97 = sub_1A39B6190();
      *(_QWORD *)(v95 + 4) = sub_1A39A2878(v97, v98, v168);
      swift_bridgeObjectRelease();
      v99 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
      v99(v89, v91);
      _os_log_impl(&dword_1A3940000, v86, v87, "Speaking utterance slice: %s", (uint8_t *)v95, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A859781C](v96, -1, -1);
      MEMORY[0x1A859781C](v95, -1, -1);

      v100 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 8))(v159, v163);
    }
    else
    {
      v99 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
      v99(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 504));

      v100 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 8))(v92, v94);
    }
    *(_QWORD *)(v0 + 600) = v99;
    v101 = *(_QWORD *)(v0 + 536);
    if (*(_BYTE *)(v0 + 376) == 1)
    {
      v129 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*(_QWORD *)(v0 + 448) + 24))
                                                + 0x150))(v100);
      *(_QWORD *)(v0 + 608) = v129;
      result = *(_QWORD *)(v101 + 8);
      *(_QWORD *)(v0 + 616) = result;
      if (result)
      {
        v130 = *(uint64_t **)(v0 + 536);
        v131 = *((unsigned __int8 *)v130 + 100);
        v132 = v131 << 32;
        v133 = *((_DWORD *)v130 + 24);
        *(_DWORD *)(v0 + 624) = v133;
        *(_BYTE *)(v0 + 628) = v131;
        v134 = v130[11];
        *(_QWORD *)(v0 + 632) = v134;
        v135 = (void *)v130[10];
        *(_QWORD *)(v0 + 640) = v135;
        v136 = v130[9];
        *(_QWORD *)(v0 + 648) = v136;
        v137 = v130[8];
        *(_QWORD *)(v0 + 656) = v137;
        v138 = v130[7];
        *(_QWORD *)(v0 + 664) = v138;
        v139 = v130[6];
        *(_QWORD *)(v0 + 672) = v139;
        v140 = v130[5];
        *(_QWORD *)(v0 + 680) = v140;
        v141 = v130[4];
        *(_QWORD *)(v0 + 688) = v141;
        v142 = v130[3];
        *(_QWORD *)(v0 + 696) = v142;
        v143 = v130[2];
        *(_QWORD *)(v0 + 704) = v143;
        v144 = *v130;
        *(_QWORD *)(v0 + 712) = v144;
        *(_QWORD *)(v0 + 16) = v144;
        *(_QWORD *)(v0 + 24) = result;
        *(_QWORD *)(v0 + 32) = v143;
        *(_QWORD *)(v0 + 40) = v142;
        *(_QWORD *)(v0 + 48) = v141;
        *(_WORD *)(v0 + 56) = v140;
        *(_QWORD *)(v0 + 64) = v139;
        *(_BYTE *)(v0 + 72) = v138;
        *(_QWORD *)(v0 + 80) = v137;
        *(_QWORD *)(v0 + 88) = v136;
        *(_QWORD *)(v0 + 96) = v135;
        *(_DWORD *)(v0 + 104) = v134;
        *(_BYTE *)(v0 + 108) = BYTE4(v134) & 1;
        *(_DWORD *)(v0 + 112) = v133;
        *(_BYTE *)(v0 + 116) = BYTE4(v132) & 1;
        v167 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v129 + 344)
                                                        + *(_QWORD *)(*(_QWORD *)v129 + 344));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v145 = v135;
        v146 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 720) = v146;
        *v146 = v0;
        v146[1] = sub_1A3A583EC;
        return v167(v0 + 120, v0 + 16);
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    v165(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 504));
    v150 = 0;
    v151 = 0;
    v147 = 0;
    v148 = 0;
    v161 = 0;
    v164 = 0;
    v154 = 0;
    v155 = 0;
    v152 = 0;
    v153 = 0;
    v156 = 0;
    v158 = 0;
  }
  v106 = *(_QWORD *)(v0 + 488);
  v107 = *(_QWORD *)(v0 + 464);
  v108 = *(_QWORD *)(v0 + 472);
  v109 = sub_1A39AACDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 16))(v106, v109, v107);
  swift_retain_n();
  v110 = sub_1A3AB470C();
  v111 = sub_1A3AB4FD0();
  v112 = os_log_type_enabled(v110, v111);
  v113 = *(_QWORD *)(v0 + 488);
  v114 = *(_QWORD *)(v0 + 464);
  v115 = *(_QWORD *)(v0 + 472);
  if (v112)
  {
    v116 = swift_slowAlloc();
    v157 = swift_slowAlloc();
    v168[0] = v157;
    *(_DWORD *)v116 = 136315394;
    v160 = v114;
    sub_1A39EA818();
    v117 = sub_1A3AB5624();
    *(_QWORD *)(v0 + 416) = sub_1A39A2878(v117, v118, v168);
    sub_1A3AB5138();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v116 + 12) = 2080;
    swift_beginAccess();
    v119 = *(_QWORD *)(v0 + 400);
    swift_bridgeObjectRetain();
    v120 = sub_1A39A4820(&qword_1EE6D09F0);
    v121 = MEMORY[0x1A85959A4](v119, v120);
    v123 = v122;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 424) = sub_1A39A2878(v121, v123, v168);
    sub_1A3AB5138();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A3940000, v110, v111, "Utterance: %s failed with errors: %s", (uint8_t *)v116, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A859781C](v157, -1, -1);
    MEMORY[0x1A859781C](v116, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v113, v160);
  }
  else
  {

    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v113, v114);
  }
  swift_beginAccess();
  v124 = *(_QWORD *)(v0 + 400);
  swift_allocError();
  *v125 = v124;
  swift_bridgeObjectRetain();
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A59374(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 920) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A593FC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v12 = *(void **)(v0 + 880);
  v19 = *(_QWORD *)(v0 + 816);
  v20 = *(_QWORD *)(v0 + 824);
  v17 = *(_QWORD *)(v0 + 800);
  v18 = *(_QWORD *)(v0 + 808);
  v15 = *(_QWORD *)(v0 + 784);
  v16 = *(_QWORD *)(v0 + 792);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 776);
  v1 = *(_QWORD *)(v0 + 752);
  v2 = *(void **)(v0 + 744);
  v10 = *(_QWORD *)(v0 + 536);
  v11 = *(void (**)(uint64_t, uint64_t))(v0 + 600);
  v8 = *(_QWORD *)(v0 + 760);
  v9 = *(_QWORD *)(v0 + 504);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_1A39A2EB8(v20, v19, v18, v17, v16, v15, v14, v13, v8, v1, v2);
  v11(v10, v9);
  v3 = *(_QWORD *)(v0 + 920);
  *(_QWORD *)(v0 + 928) = v3;
  v4 = *(_QWORD *)(v0 + 552);
  v5 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(v0 + 936) = v5;
  *(_QWORD *)(v4 + 8) = MEMORY[0x1E0DEE9D8];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 944) = v6;
  *v6 = v0;
  v6[1] = sub_1A3A59574;
  return sub_1A3A5A700(v5, v3, *(_QWORD *)(v0 + 552));
}

uint64_t sub_1A3A59574(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 952) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v1)
    *(_QWORD *)(v4 + 960) = a1;
  return swift_task_switch();
}

uint64_t sub_1A3A595F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  if (*(_BYTE *)(*(_QWORD *)(v0 + 448) + 281) == 2)
  {
    v1 = *(_QWORD *)(v0 + 952);
    v6 = *(_QWORD **)(v0 + 960);
    swift_bridgeObjectRetain();
    sub_1A3A5E438(&v6);
    if (v1)
      return swift_release();
    v3 = *(_QWORD *)(v0 + 928);
    v4 = *(_QWORD **)(v0 + 552);
    swift_bridgeObjectRelease();
    v5 = v6;
    swift_bridgeObjectRelease();
    v4[1] = v5;
    swift_release();
    *v4 = v3;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  sub_1A3A60F4C(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 432), _s15UtteranceRunnerC14SynthesisStateVMa);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A5974C()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t *, uint64_t);
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t result;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  _QWORD *v116;
  uint64_t v117;
  id v118;
  _QWORD *v119;
  void *v120;
  void *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t, uint64_t);
  uint64_t v140;
  uint64_t (*v141)(uint64_t, uint64_t);
  uint64_t (*v142)(char *, uint64_t, uint64_t);
  uint64_t v143[3];

  swift_release();
  v2 = *(void **)(v0 + 952);
  while (1)
  {
    sub_1A39B7B74(*(_QWORD *)(v0 + 552), _s15UtteranceRunnerC14SynthesisStateVMa);
    v3 = *(_QWORD **)(v0 + 400);
    v4 = v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = sub_1A3A5E0D4(0, v3[2] + 1, 1, v3);
    v6 = v3[2];
    v5 = v3[3];
    if (v6 >= v5 >> 1)
      v3 = sub_1A3A5E0D4((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
    v3[2] = v6 + 1;
    v3[v6 + 4] = v2;
    *(_QWORD *)(v0 + 400) = v3;
    v7 = *(_QWORD *)(v0 + 368);
    v8 = *(unsigned __int8 *)(v0 + 376);
    if (*(_BYTE *)(v0 + 376))
    {
      if (v8 == 1)
      {
        v9 = v7 <= 2;
        if (v7 <= 2)
          ++v7;
        else
          v7 = 0;
        if (v9)
          LOBYTE(v8) = 1;
        else
          LOBYTE(v8) = 2;
      }
    }
    else
    {
      LOBYTE(v8) = v7 > 0;
      if (v7 <= 0)
        ++v7;
      else
        v7 = 0;
    }
    v11 = *(_QWORD *)(v0 + 472);
    v10 = *(_QWORD *)(v0 + 480);
    v12 = *(char **)(v0 + 464);
    *(_QWORD *)(v0 + 368) = v7;
    *(_BYTE *)(v0 + 376) = v8;
    v13 = sub_1A39AACDC();
    (*(void (**)(uint64_t, uint64_t, char *))(v11 + 16))(v10, v13, v12);
    v14 = sub_1A3AB470C();
    v15 = sub_1A3AB4FD0();
    v16 = os_log_type_enabled(v14, v15);
    v18 = *(_QWORD *)(v0 + 472);
    v17 = *(_QWORD *)(v0 + 480);
    v19 = *(_QWORD *)(v0 + 464);
    if (v16)
    {
      v12 = (char *)swift_slowAlloc();
      v1 = (_QWORD *)swift_slowAlloc();
      v143[0] = (uint64_t)v1;
      *(_DWORD *)v12 = 136315138;
      v20 = *(_BYTE *)(v0 + 376);
      *(_QWORD *)(v0 + 384) = *(_QWORD *)(v0 + 368);
      *(_BYTE *)(v0 + 392) = v20;
      v21 = sub_1A3AB49E8();
      *(_QWORD *)(v12 + 4) = sub_1A39A2878(v21, v22, v143);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A3940000, v14, v15, "Utterance encountered error, next fallback state: %s", (uint8_t *)v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A859781C](v1, -1, -1);
      MEMORY[0x1A859781C](v12, -1, -1);

    }
    else
    {

    }
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    if (*(unsigned __int8 *)(v0 + 376) >= 2u || *(_BYTE *)(*(_QWORD *)(v0 + 448) + 281) != 1)
      break;
    v23 = *(_QWORD ***)(v0 + 552);
    sub_1A39B7B30(*(_QWORD *)(v0 + 440), (uint64_t)v23, _s15UtteranceRunnerC14SynthesisStateVMa);
    v24 = *v23;
    v25 = *(_QWORD **)(v0 + 552);
    if (*v23)
    {
      *v25 = 0;
      *(_QWORD *)(v0 + 928) = v24;
      v96 = *(_QWORD *)(v0 + 552);
      v97 = *(_QWORD *)(v96 + 8);
      *(_QWORD *)(v0 + 936) = v97;
      *(_QWORD *)(v96 + 8) = MEMORY[0x1E0DEE9D8];
      v98 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 944) = v98;
      *v98 = v0;
      v98[1] = sub_1A3A59574;
      return sub_1A3A5A700(v97, (uint64_t)v24, *(_QWORD *)(v0 + 552));
    }
    v26 = *(_QWORD *)(v0 + 544);
    v27 = (char *)v25 + *(int *)(v26 + 28);
    if (!*(_QWORD *)(*(_QWORD *)v27 + 16))
    {
      __break(1u);
LABEL_49:
      sub_1A3AB4BE0();
LABEL_42:
      sub_1A3AB4C10();
      sub_1A3AB4BC8();

LABEL_43:
      v123 = *(_QWORD *)(v0 + 536);
      v124 = *(_QWORD *)(v0 + 504);
      v125 = *(_QWORD *)(v0 + 456);
      v126 = (*(uint64_t (**)(void))((*v1 & *v24) + 0x210))();
      *(_QWORD *)(v0 + 888) = v126;
      sub_1A39B9F00(v123 + *(int *)(v124 + 20), v125, &qword_1EE6D2B68);
      v127 = sub_1A3AB45F8();
      v128 = *(_QWORD *)(v127 - 8);
      v129 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v125, 1, v127);
      v130 = *(_QWORD *)(v0 + 456);
      if (v129 == 1)
      {
        sub_1A39B11F4(*(_QWORD *)(v0 + 456), &qword_1EE6D2B68);
        goto LABEL_46;
      }
      v131 = sub_1A3AB45D4();
      (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v130, v127);
      if (!v131)
      {
LABEL_46:
        v131 = *(_QWORD *)(*(_QWORD *)(v0 + 448) + 168);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      *(_QWORD *)(v0 + 896) = v131;
      v132 = *(_QWORD *)(v0 + 408);
      *(_QWORD *)(v0 + 904) = v132;
      v142 = (uint64_t (*)(char *, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v126 + 352)
                                                              + *(_QWORD *)(*(_QWORD *)v126 + 352));
      v133 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 912) = v133;
      *v133 = v0;
      v133[1] = sub_1A3A59374;
      return v142(v12, v131, v132);
    }
    v28 = *(_QWORD *)(v0 + 536);
    v29 = *(_QWORD *)(v0 + 504);
    v30 = *(_QWORD *)(v0 + 512);
    v31 = *(_QWORD *)v27 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
    v32 = *(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 16);
    *(_QWORD *)(v0 + 576) = v32;
    v32(v28, v31, v29);
    sub_1A3A5FE04(0, 1);
    v33 = (uint64_t)v25 + *(int *)(v26 + 24);
    sub_1A39B11F4(v33, &qword_1EE6D4300);
    v139 = (void (*)(uint64_t, uint64_t, uint64_t))v32;
    v32(v33, v28, v29);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v33, 0, 1, v29);
    v34 = sub_1A39B6190();
    v36 = v35;
    v37 = *(_QWORD *)(v28 + 8);
    v136 = *(_QWORD *)(v0 + 536);
    if (v37)
    {
      v38 = **(_QWORD **)(v0 + 536);
      v37 = swift_bridgeObjectRetain();
    }
    else
    {
      v38 = 0;
    }
    v39 = *(_QWORD *)(v0 + 528);
    v41 = *(_QWORD *)(v0 + 496);
    v40 = *(_QWORD *)(v0 + 504);
    v43 = *(_QWORD *)(v0 + 464);
    v42 = *(_QWORD *)(v0 + 472);
    v44 = *(_QWORD *)(v0 + 448);
    *(_QWORD *)(v0 + 224) = v34;
    *(_QWORD *)(v0 + 232) = v36;
    *(_QWORD *)(v0 + 240) = v38;
    *(_QWORD *)(v0 + 248) = v37;
    *(_OWORD *)(v0 + 256) = 0u;
    *(_OWORD *)(v0 + 272) = 0u;
    *(_BYTE *)(v0 + 288) = 5;
    v45._countAndFlagsBits = *(_QWORD *)(v44 + 32);
    *(_QWORD *)(v0 + 584) = v45._countAndFlagsBits;
    v45._object = *(void **)(v44 + 40);
    *(_QWORD *)(v0 + 592) = v45._object;
    TTSSpeechEvent.emit(forJob:)(v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46 = sub_1A39AACDC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v41, v46, v43);
    v139(v39, v136, v40);
    v47 = sub_1A3AB470C();
    v48 = sub_1A3AB4FC4();
    v49 = os_log_type_enabled(v47, v48);
    v50 = *(_QWORD *)(v0 + 528);
    v51 = *(_QWORD *)(v0 + 504);
    v52 = *(_QWORD *)(v0 + 512);
    v53 = *(_QWORD *)(v0 + 496);
    v55 = *(_QWORD *)(v0 + 464);
    v54 = *(_QWORD *)(v0 + 472);
    if (v49)
    {
      v137 = *(_QWORD *)(v0 + 496);
      v56 = swift_slowAlloc();
      v134 = v55;
      v57 = swift_slowAlloc();
      v143[0] = v57;
      *(_DWORD *)v56 = 136315138;
      v58 = sub_1A39B6190();
      *(_QWORD *)(v56 + 4) = sub_1A39A2878(v58, v59, v143);
      swift_bridgeObjectRelease();
      v60 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v60(v50, v51);
      _os_log_impl(&dword_1A3940000, v47, v48, "Speaking utterance slice: %s", (uint8_t *)v56, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A859781C](v57, -1, -1);
      MEMORY[0x1A859781C](v56, -1, -1);

      v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v137, v134);
    }
    else
    {
      v60 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v60(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 504));

      v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
    }
    *(_QWORD *)(v0 + 600) = v60;
    v62 = *(_QWORD *)(v0 + 536);
    if (*(_BYTE *)(v0 + 376) == 1)
    {
      v99 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*(_QWORD *)(v0 + 448) + 24))
                                               + 0x150))(v61);
      *(_QWORD *)(v0 + 608) = v99;
      result = *(_QWORD *)(v62 + 8);
      *(_QWORD *)(v0 + 616) = result;
      if (result)
      {
        v100 = *(uint64_t **)(v0 + 536);
        v101 = *((unsigned __int8 *)v100 + 100);
        v102 = v101 << 32;
        v103 = *((_DWORD *)v100 + 24);
        *(_DWORD *)(v0 + 624) = v103;
        *(_BYTE *)(v0 + 628) = v101;
        v104 = v100[11];
        *(_QWORD *)(v0 + 632) = v104;
        v105 = (void *)v100[10];
        *(_QWORD *)(v0 + 640) = v105;
        v106 = v100[9];
        *(_QWORD *)(v0 + 648) = v106;
        v107 = v100[8];
        *(_QWORD *)(v0 + 656) = v107;
        v108 = v100[7];
        *(_QWORD *)(v0 + 664) = v108;
        v109 = v100[6];
        *(_QWORD *)(v0 + 672) = v109;
        v110 = v100[5];
        *(_QWORD *)(v0 + 680) = v110;
        v111 = v100[4];
        *(_QWORD *)(v0 + 688) = v111;
        v112 = v100[3];
        *(_QWORD *)(v0 + 696) = v112;
        v113 = v100[2];
        *(_QWORD *)(v0 + 704) = v113;
        v114 = *v100;
        *(_QWORD *)(v0 + 712) = v114;
        *(_QWORD *)(v0 + 16) = v114;
        *(_QWORD *)(v0 + 24) = result;
        *(_QWORD *)(v0 + 32) = v113;
        *(_QWORD *)(v0 + 40) = v112;
        *(_QWORD *)(v0 + 48) = v111;
        *(_WORD *)(v0 + 56) = v110;
        *(_QWORD *)(v0 + 64) = v109;
        *(_BYTE *)(v0 + 72) = v108;
        *(_QWORD *)(v0 + 80) = v107;
        *(_QWORD *)(v0 + 88) = v106;
        *(_QWORD *)(v0 + 96) = v105;
        *(_DWORD *)(v0 + 104) = v104;
        *(_BYTE *)(v0 + 108) = BYTE4(v104) & 1;
        *(_DWORD *)(v0 + 112) = v103;
        *(_BYTE *)(v0 + 116) = BYTE4(v102) & 1;
        v141 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v99 + 344)
                                                        + *(_QWORD *)(*(_QWORD *)v99 + 344));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v115 = v105;
        v116 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 720) = v116;
        *v116 = v0;
        v116[1] = sub_1A3A583EC;
        return v141(v0 + 120, v0 + 16);
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    v139(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 504));
    v63 = *(void (**)(uint64_t *, uint64_t))(v0 + 600);
    v64 = *(uint64_t **)(v0 + 520);
    v65 = *(_QWORD *)(v0 + 504);
    v66 = v64[1];
    v67 = v64[2];
    v68 = v64[4];
    v69 = v64[8];
    v70 = v64[9];
    v1 = (_QWORD *)v64[10];
    sub_1A39A07C8(*v64, v66, v67, v64[3], v68, v64[5], v64[6], v64[7], v69, v70, v1);
    v63(v64, v65);
    if (v66)
    {
      *(_QWORD *)(v0 + 872) = v1;
      *(_QWORD *)(v0 + 864) = v70;
      *(_QWORD *)(v0 + 856) = v69;
      *(_QWORD *)(v0 + 848) = v68;
      *(_QWORD *)(v0 + 840) = v67;
      *(_QWORD *)(v0 + 832) = v66;
      *(_BYTE *)(v0 + 732) = 0;
      *(_DWORD *)(v0 + 728) = 0;
      *(_OWORD *)(v0 + 736) = 0u;
      *(_OWORD *)(v0 + 752) = 0u;
      *(_OWORD *)(v0 + 768) = 0u;
      *(_OWORD *)(v0 + 784) = 0u;
      *(_OWORD *)(v0 + 800) = 0u;
      *(_OWORD *)(v0 + 816) = 0u;
      v117 = *(_QWORD *)(v0 + 448);
      sub_1A39B6190();
      v118 = objc_allocWithZone(MEMORY[0x1E0C89B68]);
      v119 = v1;
      v120 = (void *)sub_1A3AB4958();
      swift_bridgeObjectRelease();
      v12 = (char *)objc_msgSend(v118, sel_initWithSSMLRepresentation_voice_, v120, v119);
      *(_QWORD *)(v0 + 880) = v12;

      v121 = (void *)sub_1A3AB4958();
      objc_msgSend(v12, sel_setJobIdentifier_, v121);

      v24 = *(_QWORD **)(v117 + 24);
      v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      *(_QWORD *)(v0 + 408) = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v24) + 0x240))();
      v122 = (void *)(*(uint64_t (**)(void))((*v1 & *v24) + 0x2B8))();
      if (v122)
      {
        v25 = v122;
        MEMORY[0x1A8595980]();
        if (*(_QWORD *)((*(_QWORD *)(v0 + 408) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 408) & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x18) >> 1)
          goto LABEL_49;
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    v71 = *(void (**)(uint64_t, uint64_t))(v0 + 600);
    v72 = *(_QWORD *)(v0 + 536);
    v73 = *(_QWORD *)(v0 + 504);
    sub_1A3A61140();
    v2 = (void *)swift_allocError();
    *v74 = 0;
    swift_willThrow();
    v71(v72, v73);
  }
  v75 = *(_QWORD *)(v0 + 488);
  v76 = *(_QWORD *)(v0 + 464);
  v77 = *(_QWORD *)(v0 + 472);
  v78 = sub_1A39AACDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16))(v75, v78, v76);
  swift_retain_n();
  v79 = sub_1A3AB470C();
  v80 = sub_1A3AB4FD0();
  v81 = os_log_type_enabled(v79, v80);
  v82 = *(_QWORD *)(v0 + 488);
  v83 = *(_QWORD *)(v0 + 464);
  v84 = *(_QWORD *)(v0 + 472);
  if (v81)
  {
    v140 = *(_QWORD *)(v0 + 488);
    v85 = swift_slowAlloc();
    v138 = swift_slowAlloc();
    v143[0] = v138;
    *(_DWORD *)v85 = 136315394;
    sub_1A39EA818();
    v86 = sub_1A3AB5624();
    *(_QWORD *)(v0 + 416) = sub_1A39A2878(v86, v87, v143);
    sub_1A3AB5138();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v85 + 12) = 2080;
    swift_beginAccess();
    v88 = *(_QWORD *)(v0 + 400);
    swift_bridgeObjectRetain();
    v89 = sub_1A39A4820(&qword_1EE6D09F0);
    v90 = MEMORY[0x1A85959A4](v88, v89);
    v135 = v83;
    v92 = v91;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 424) = sub_1A39A2878(v90, v92, v143);
    sub_1A3AB5138();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A3940000, v79, v80, "Utterance: %s failed with errors: %s", (uint8_t *)v85, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A859781C](v138, -1, -1);
    MEMORY[0x1A859781C](v85, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v140, v135);
  }
  else
  {

    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v82, v83);
  }
  swift_beginAccess();
  v93 = *(_QWORD *)(v0 + 400);
  sub_1A3A61140();
  swift_allocError();
  *v94 = v93;
  swift_bridgeObjectRetain();
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A5A4C4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[15] = v0;
  type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
  sub_1A39B9F44(&qword_1EE6D4238, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
  v1[16] = sub_1A3AB4C70();
  v1[17] = v2;
  return swift_task_switch();
}

uint64_t sub_1A3A5A538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 120);
  if ((*(_BYTE *)(v1 + 280) & 1) != 0)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v1 + 24)) + 0x1B0);
  v3 = (void *)v2();
  v4 = objc_msgSend(v3, sel_outputFormat);

  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C89AB8]), sel_initWithPCMFormat_frameCapacity_, v4, 1);
  *(_QWORD *)(v0 + 144) = v5;

  if (!v5)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v6 = (void *)((uint64_t (*)(id))v2)(objc_msgSend(v5, sel_setFrameLength_, 1));
  *(_QWORD *)(v0 + 152) = v6;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1A3A5A680;
  v7 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
  v8 = (_QWORD *)(v0 + 80);
  v8[1] = 0x40000000;
  v8[2] = sub_1A3A5A6F8;
  v8[3] = &unk_1E4A9F918;
  v8[4] = v7;
  objc_msgSend(v6, sel_scheduleBuffer_completionHandler_, v5, v8);
  return swift_continuation_await();
}

uint64_t sub_1A3A5A680()
{
  return swift_task_switch();
}

uint64_t sub_1A3A5A6C4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A5A6F8()
{
  return swift_continuation_resume();
}

uint64_t sub_1A3A5A700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[24] = a3;
  v4[25] = v3;
  v4[22] = a1;
  v4[23] = a2;
  sub_1A39A4820(&qword_1EE6D4310);
  v4[26] = swift_task_alloc();
  v5 = type metadata accessor for TTSAURenderer.SpeechBuffer();
  v4[27] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[28] = v6;
  v4[29] = *(_QWORD *)(v6 + 64);
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v7 = *(_QWORD *)(_s15UtteranceRunnerC14SynthesisStateVMa(0) - 8);
  v4[33] = v7;
  v4[34] = *(_QWORD *)(v7 + 64);
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
  v4[37] = sub_1A39B9F44(&qword_1EE6D4238, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
  v4[38] = sub_1A3AB4C70();
  v4[39] = v8;
  return swift_task_switch();
}

uint64_t sub_1A3A5A820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  void *v15;
  void (*v16)(uint64_t);
  id v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  uint64_t (*v26)(void);
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t (*v39)(void *, uint64_t (*)(), uint64_t);
  uint64_t v40;
  void *v41;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 176);
  sub_1A39A4820(&qword_1EE6D4318);
  *(_QWORD *)(v0 + 320) = sub_1A3A3FDCC();
  sub_1A39B7B30(v2, v1, _s15UtteranceRunnerC14SynthesisStateVMa);
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v0 + 328) = v4;
  if (!v4)
    goto LABEL_8;
  v5 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 176);
  v8 = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 84) = v8;
  *(_QWORD *)(v0 + 336) = *(_QWORD *)(v5 + 72);
  *(_QWORD *)(v0 + 344) = 0;
  v9 = *(_QWORD *)(v0 + 256);
  v10 = v7 + ((v8 + 32) & ~(unint64_t)v8);
  swift_bridgeObjectRetain();
  sub_1A39B7B30(v10, v9, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
  v11 = *(unsigned __int8 *)(v6 + 281);
  if (v11 == 2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v0 + 320) + 136))(*(_QWORD *)(v0 + 256));
    goto LABEL_7;
  }
  if (v11 != 1)
  {
LABEL_7:
    sub_1A39B7B74(*(_QWORD *)(v0 + 256), (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
    swift_bridgeObjectRelease();
LABEL_8:
    TTSAsyncThrowingChannel.makeAsyncIterator()((_QWORD *)(v0 + 152));
    *(_QWORD *)(v0 + 376) = OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_receivedFirstBuffer;
    sub_1A39A4820(&qword_1EE6D4320);
    sub_1A39C3EF8(&qword_1EE6D4328, &qword_1EE6D4320, (uint64_t)&protocol conformance descriptor for TTSAsyncThrowingChannel<A, B>.Iterator);
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 384) = v19;
    *v19 = v0;
    v19[1] = sub_1A3A5B0A8;
    return sub_1A3AB4CAC();
  }
  v12 = *(_QWORD *)(v0 + 256);
  v13 = *(_BYTE **)(v0 + 200);
  v14 = *(int *)(*(_QWORD *)(v0 + 216) + 24);
  v15 = *(void **)(v12 + v14);
  *(_QWORD *)(v0 + 120) = v15;
  *(_OWORD *)(v0 + 128) = xmmword_1A3AC7200;
  *(_QWORD *)(v0 + 144) = 0;
  v16 = *(void (**)(uint64_t))(*(_QWORD *)v13 + 256);
  v17 = v15;
  v16(v0 + 120);

  v18 = *(_QWORD *)(v0 + 256);
  if (v13[280] == 1)
  {
    sub_1A3A5C414(*(_QWORD *)(v18 + *(int *)(*(_QWORD *)(v0 + 216) + 28)), *(_QWORD *)(v0 + 288));
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 200);
    v22 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 320) + 136))(v18);
    if (*(_BYTE *)(v21 + 281) == 1)
    {
      v23 = *(_QWORD *)(v0 + 280);
      v36 = *(_QWORD *)(v0 + 288);
      v37 = *(_QWORD *)(v0 + 264);
      v24 = *(_QWORD *)(v0 + 248);
      v25 = *(_QWORD ***)(v0 + 200);
      v38 = (*(unsigned __int8 *)(v0 + 84) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 84);
      v40 = *(_QWORD *)(v0 + 320);
      v34 = *(_QWORD *)(v0 + 256);
      v35 = *(_QWORD *)(v0 + 232) + v38;
      v26 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v25[3]) + 0x1B0);
      v27 = (void *)((uint64_t (*)(uint64_t))v26)(v22);
      v41 = *(void **)(v12 + v14);
      v28 = objc_msgSend(v41, sel_format);
      objc_msgSend(v27, sel_setOutputFormat_, v28);

      v29 = (void *)v26();
      objc_msgSend(v29, sel_play);

      v30 = ((uint64_t (*)(void))(*v25)[21])();
      *(_QWORD *)(v0 + 352) = v30;
      sub_1A39B7B30(v34, v24, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
      sub_1A39B7B30(v36, v23, _s15UtteranceRunnerC14SynthesisStateVMa);
      v31 = (v35 + *(unsigned __int8 *)(v37 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
      v32 = swift_allocObject();
      *(_QWORD *)(v0 + 360) = v32;
      *(_QWORD *)(v32 + 16) = v25;
      *(_QWORD *)(v32 + 24) = v40;
      sub_1A3A60F4C(v24, v32 + v38, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
      sub_1A3A60F4C(v23, v32 + v31, _s15UtteranceRunnerC14SynthesisStateVMa);
      v39 = (uint64_t (*)(void *, uint64_t (*)(), uint64_t))(**(int **)(*(_QWORD *)v30 + 192)
                                                                              + *(_QWORD *)(*(_QWORD *)v30 + 192));
      swift_retain();
      swift_retain();
      v33 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 368) = v33;
      *v33 = v0;
      v33[1] = sub_1A3A5B040;
      return v39(v41, sub_1A3A60F90, v32);
    }
  }
  return swift_task_switch();
}

uint64_t sub_1A3A5AC48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void *v12;
  void (*v13)(uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD **v20;
  uint64_t (*v21)(void);
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t (*v34)(void *, uint64_t (*)(), uint64_t);
  uint64_t v35;
  void *v36;

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 344) + 1;
  sub_1A39B7B74(*(_QWORD *)(v0 + 256), (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
  if (v2 == v1)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    TTSAsyncThrowingChannel.makeAsyncIterator()((_QWORD *)(v0 + 152));
    *(_QWORD *)(v0 + 376) = OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_receivedFirstBuffer;
    sub_1A39A4820(&qword_1EE6D4320);
    sub_1A39C3EF8(&qword_1EE6D4328, &qword_1EE6D4320, (uint64_t)&protocol conformance descriptor for TTSAsyncThrowingChannel<A, B>.Iterator);
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 384) = v7;
    *v7 = v0;
    v7[1] = sub_1A3A5B0A8;
    return sub_1A3AB4CAC();
  }
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 344) + 1;
  *(_QWORD *)(v0 + 344) = v4;
  v5 = *(_QWORD *)(v0 + 200);
  sub_1A39B7B30(*(_QWORD *)(v0 + 176)+ ((*(unsigned __int8 *)(v0 + 84) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 84))+ v3 * v4, *(_QWORD *)(v0 + 256), (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
  v6 = *(unsigned __int8 *)(v5 + 281);
  if (v6 != 1)
  {
    if (v6 == 2)
      (*(void (**)(_QWORD))(**(_QWORD **)(v0 + 320) + 136))(*(_QWORD *)(v0 + 256));
    sub_1A39B7B74(*(_QWORD *)(v0 + 256), (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v0 + 256);
  v10 = *(_BYTE **)(v0 + 200);
  v11 = *(int *)(*(_QWORD *)(v0 + 216) + 24);
  v12 = *(void **)(v9 + v11);
  *(_QWORD *)(v0 + 120) = v12;
  *(_OWORD *)(v0 + 128) = xmmword_1A3AC7200;
  *(_QWORD *)(v0 + 144) = 0;
  v13 = *(void (**)(uint64_t))(*(_QWORD *)v10 + 256);
  v14 = v12;
  v13(v0 + 120);

  v15 = *(_QWORD *)(v0 + 256);
  if (v10[280] == 1)
  {
    sub_1A3A5C414(*(_QWORD *)(v15 + *(int *)(*(_QWORD *)(v0 + 216) + 28)), *(_QWORD *)(v0 + 288));
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 200);
    v17 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 320) + 136))(v15);
    if (*(_BYTE *)(v16 + 281) == 1)
    {
      v18 = *(_QWORD *)(v0 + 280);
      v31 = *(_QWORD *)(v0 + 288);
      v32 = *(_QWORD *)(v0 + 264);
      v19 = *(_QWORD *)(v0 + 248);
      v20 = *(_QWORD ***)(v0 + 200);
      v33 = (*(unsigned __int8 *)(v0 + 84) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 84);
      v35 = *(_QWORD *)(v0 + 320);
      v29 = *(_QWORD *)(v0 + 256);
      v30 = *(_QWORD *)(v0 + 232) + v33;
      v21 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v20[3]) + 0x1B0);
      v22 = (void *)((uint64_t (*)(uint64_t))v21)(v17);
      v36 = *(void **)(v9 + v11);
      v23 = objc_msgSend(v36, sel_format);
      objc_msgSend(v22, sel_setOutputFormat_, v23);

      v24 = (void *)v21();
      objc_msgSend(v24, sel_play);

      v25 = ((uint64_t (*)(void))(*v20)[21])();
      *(_QWORD *)(v0 + 352) = v25;
      sub_1A39B7B30(v29, v19, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
      sub_1A39B7B30(v31, v18, _s15UtteranceRunnerC14SynthesisStateVMa);
      v26 = (v30 + *(unsigned __int8 *)(v32 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
      v27 = swift_allocObject();
      *(_QWORD *)(v0 + 360) = v27;
      *(_QWORD *)(v27 + 16) = v20;
      *(_QWORD *)(v27 + 24) = v35;
      sub_1A3A60F4C(v19, v27 + v33, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
      sub_1A3A60F4C(v18, v27 + v26, _s15UtteranceRunnerC14SynthesisStateVMa);
      v34 = (uint64_t (*)(void *, uint64_t (*)(), uint64_t))(**(int **)(*(_QWORD *)v25 + 192)
                                                                              + *(_QWORD *)(*(_QWORD *)v25 + 192));
      swift_retain();
      swift_retain();
      v28 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 368) = v28;
      *v28 = v0;
      v28[1] = sub_1A3A5B040;
      return v34(v36, sub_1A3A60F90, v27);
    }
  }
  return swift_task_switch();
}

uint64_t sub_1A3A5B040()
{
  swift_task_dealloc();
  swift_release();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A5B0A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 392) = v0;
  swift_task_dealloc();
  if (v0 && *(_QWORD *)(v2 + 200))
  {
    swift_getObjectType();
    sub_1A3AB4C70();
  }
  return swift_task_switch();
}

uint64_t sub_1A3A5B13C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String *v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void (*v11)(uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD **v27;
  uint64_t (*v28)(void);
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void *, uint64_t (*)(), uint64_t);
  uint64_t v42;
  void *v43;

  v1 = *(_QWORD *)(v0 + 208);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 224) + 48))(v1, 1, *(_QWORD *)(v0 + 216)) != 1)
  {
    v2 = *(_QWORD *)(v0 + 376);
    v3 = *(_QWORD *)(v0 + 200);
    sub_1A3A60F4C(v1, *(_QWORD *)(v0 + 240), (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
    if ((*(_BYTE *)(v3 + v2) & 1) == 0)
    {
      v4 = *(_QWORD *)(v0 + 376);
      v5 = *(Swift::String **)(v0 + 200);
      *(_QWORD *)(v0 + 16) = 4;
      *(_OWORD *)(v0 + 24) = 0u;
      *(_OWORD *)(v0 + 40) = 0u;
      *(_OWORD *)(v0 + 56) = 0u;
      *(_QWORD *)(v0 + 72) = 0;
      *(_BYTE *)(v0 + 80) = 9;
      TTSSpeechEvent.emit(forJob:)(v5[2]);
      *((_BYTE *)&v5->_countAndFlagsBits + v4) = 1;
    }
    v6 = *(_BYTE **)(v0 + 200);
    v7 = v6[281];
    if (v7 == 2)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v0 + 320) + 136))(*(_QWORD *)(v0 + 240));
    }
    else if (v7 == 1)
    {
      v8 = *(_QWORD *)(v0 + 240);
      v9 = *(int *)(*(_QWORD *)(v0 + 216) + 24);
      v10 = *(void **)(v8 + v9);
      *(_QWORD *)(v0 + 88) = v10;
      *(_OWORD *)(v0 + 96) = xmmword_1A3AC7200;
      *(_QWORD *)(v0 + 112) = 0;
      v11 = *(void (**)(uint64_t))(*(_QWORD *)v6 + 256);
      v12 = v10;
      v11(v0 + 88);

      v13 = *(_QWORD *)(v0 + 240);
      if (v6[280] == 1)
      {
        sub_1A3A5C414(*(_QWORD *)(v13 + *(int *)(*(_QWORD *)(v0 + 216) + 28)), *(_QWORD *)(v0 + 288));
      }
      else
      {
        v22 = *(_QWORD *)(v0 + 200);
        v23 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 320) + 136))(v13);
        if (*(_BYTE *)(v22 + 281) == 1)
        {
          v24 = *(_QWORD *)(v0 + 280);
          v42 = *(_QWORD *)(v0 + 320);
          v40 = *(_QWORD *)(v0 + 264);
          v25 = *(_QWORD *)(v0 + 240);
          v26 = *(_QWORD *)(v0 + 248);
          v38 = *(_QWORD *)(v0 + 288);
          v39 = *(_QWORD *)(v0 + 232);
          v37 = *(_QWORD *)(v0 + 224);
          v27 = *(_QWORD ***)(v0 + 200);
          v28 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v27[3]) + 0x1B0);
          v29 = (void *)((uint64_t (*)(uint64_t))v28)(v23);
          v43 = *(void **)(v8 + v9);
          v30 = objc_msgSend(v43, sel_format);
          objc_msgSend(v29, sel_setOutputFormat_, v30);

          v31 = (void *)v28();
          objc_msgSend(v31, sel_play);

          v32 = ((uint64_t (*)(void))(*v27)[21])();
          *(_QWORD *)(v0 + 400) = v32;
          sub_1A39B7B30(v25, v26, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          sub_1A39B7B30(v38, v24, _s15UtteranceRunnerC14SynthesisStateVMa);
          v33 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
          v34 = (v39 + *(unsigned __int8 *)(v40 + 80) + v33) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
          v35 = swift_allocObject();
          *(_QWORD *)(v0 + 408) = v35;
          *(_QWORD *)(v35 + 16) = v27;
          *(_QWORD *)(v35 + 24) = v42;
          sub_1A3A60F4C(v26, v35 + v33, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          sub_1A3A60F4C(v24, v35 + v34, _s15UtteranceRunnerC14SynthesisStateVMa);
          v41 = (uint64_t (*)(void *, uint64_t (*)(), uint64_t))(**(int **)(*(_QWORD *)v32 + 192)
                                                                                  + *(_QWORD *)(*(_QWORD *)v32 + 192));
          swift_retain();
          swift_retain();
          v36 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 416) = v36;
          *v36 = v0;
          v36[1] = sub_1A3A5B804;
          return v41(v43, sub_1A3A60F90, v35);
        }
      }
      return swift_task_switch();
    }
    sub_1A39B7B74(*(_QWORD *)(v0 + 240), (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
  }
  v14 = *(_QWORD *)(v0 + 288);
  swift_release();
  swift_release();
  sub_1A39B7B74(v14, _s15UtteranceRunnerC14SynthesisStateVMa);
  v15 = TTSSpeechUnitTestingMode();
  v16 = *(_QWORD *)(v0 + 200);
  if (v15)
  {
    v17 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v16 + 24)) + 0x210))();
    *(_QWORD *)(v0 + 424) = v17;
    *(_QWORD *)(v0 + 432) = *(_QWORD *)(*(_QWORD *)v17 + 208);
    type metadata accessor for TTSAURenderer();
    sub_1A39B9F44(&qword_1EE6D2D08, (uint64_t (*)(uint64_t))type metadata accessor for TTSAURenderer, (uint64_t)&protocol conformance descriptor for TTSAURenderer);
    sub_1A3AB4C70();
    return swift_task_switch();
  }
  if (*(_BYTE *)(v16 + 281) == 1)
  {
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 448) = v18;
    *v18 = v0;
    v18[1] = sub_1A3A5BA44;
    return sub_1A3A5A4C4();
  }
  else
  {
    v20 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 320) + 168))();
    v21 = sub_1A3A5E4B8(v20);
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(size_t))(v0 + 8))(v21);
  }
}

uint64_t sub_1A3A5B654()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[36];
  v0[21] = v0[49];
  sub_1A39A4820(&qword_1EE6D09F0);
  swift_willThrowTypedImpl();
  sub_1A39B7B74(v1, _s15UtteranceRunnerC14SynthesisStateVMa);
  return swift_task_switch();
}

uint64_t sub_1A3A5B6C4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A5B760()
{
  uint64_t v0;
  _QWORD *v1;

  sub_1A39B7B74(*(_QWORD *)(v0 + 240), (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
  sub_1A39A4820(&qword_1EE6D4320);
  sub_1A39C3EF8(&qword_1EE6D4328, &qword_1EE6D4320, (uint64_t)&protocol conformance descriptor for TTSAsyncThrowingChannel<A, B>.Iterator);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 384) = v1;
  *v1 = v0;
  v1[1] = sub_1A3A5B0A8;
  return sub_1A3AB4CAC();
}

uint64_t sub_1A3A5B804()
{
  swift_task_dealloc();
  swift_release();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A5B86C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 440) = (*(uint64_t (**)(void))(v0 + 432))();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A5B8B0()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void (*v5)(void **);
  id v6;
  _QWORD *v7;
  uint64_t v9;
  size_t v10;
  void *v11;
  __int128 v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 440);
  if (v1)
  {
    v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C89AB8]), sel_initWithPCMFormat_frameCapacity_, v1, 1);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)(v0 + 200);
      objc_msgSend(v2, sel_setFrameLength_, 1);
      v11 = v3;
      v12 = xmmword_1A3AC7200;
      v13 = 0;
      v5 = *(void (**)(void **))(*(_QWORD *)v4 + 256);
      v6 = v3;
      v5(&v11);

    }
    else
    {

    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v0 + 200) + 281) == 1)
  {
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 448) = v7;
    *v7 = v0;
    v7[1] = sub_1A3A5BA44;
    return sub_1A3A5A4C4();
  }
  else
  {
    v9 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 320) + 168))();
    v10 = sub_1A3A5E4B8(v9);
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(size_t))(v0 + 8))(v10);
  }
}

uint64_t sub_1A3A5BA44()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A5BA90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*(_QWORD *)(v0 + 200) + 24)) + 0x210))();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 376))(v2);
  swift_release();
  sub_1A3A5C414(v3, v1);
  v4 = swift_bridgeObjectRelease();
  v5 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 320) + 168))(v4);
  v6 = sub_1A3A5E4B8(v5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(size_t))(v0 + 8))(v6);
}

void sub_1A3A5BBA4(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_playedFirstBuffer;
  if ((*(_BYTE *)(a2 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_playedFirstBuffer) & 1) == 0)
  {
    TTSSpeechEvent.emit(forJob:)(*(Swift::String *)(a2 + 32));
    *(_BYTE *)(a2 + v10) = 1;
  }
  if ((a1 & 1) != 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 152))(a4);
    if (*(_BYTE *)(a2 + 281) == 1)
    {
      v11 = type metadata accessor for TTSAURenderer.SpeechBuffer();
      sub_1A3A5C414(*(_QWORD *)(a4 + *(int *)(v11 + 28)), a5);
    }
  }
}

uint64_t sub_1A3A5BC74()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[6] = v0;
  sub_1A39A4820(&qword_1EE6D4290);
  v1[7] = swift_task_alloc();
  v2 = _s15UtteranceRunnerC14SynthesisStateVMa(0);
  v1[8] = v2;
  v1[9] = *(_QWORD *)(v2 - 8);
  v1[10] = swift_task_alloc();
  v3 = sub_1A3AB4724();
  v1[11] = v3;
  v1[12] = *(_QWORD *)(v3 - 8);
  v1[13] = swift_task_alloc();
  type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
  sub_1A39B9F44(&qword_1EE6D4238, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
  v1[14] = sub_1A3AB4C70();
  v1[15] = v4;
  return swift_task_switch();
}

uint64_t sub_1A3A5BD5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[64];
  char v26;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = sub_1A39AACDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4, v3);
  swift_retain();
  v5 = sub_1A3AB470C();
  v6 = sub_1A3AB4FC4();
  if (os_log_type_enabled(v5, v6))
  {
    v22 = *(_QWORD *)(v0 + 96);
    v23 = *(_QWORD *)(v0 + 88);
    v24 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 48);
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    *(_QWORD *)v25 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = *(_QWORD *)(v7 + 32);
    v11 = *(_QWORD *)(v7 + 40);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 40) = sub_1A39A2878(v10, v11, (uint64_t *)v25);
    sub_1A3AB5138();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A3940000, v5, v6, "Resuming utterance with id %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A859781C](v9, -1, -1);
    MEMORY[0x1A859781C](v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v23);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 96);
    v12 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 88);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v15 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 72);
  v18 = *(Swift::String **)(v0 + 48);
  v17 = *(_QWORD *)(v0 + 56);
  *(_OWORD *)v25 = xmmword_1A3AC7210;
  *(_OWORD *)&v25[16] = xmmword_1A3AC1B90;
  (*(void (**)(_BYTE *))(v18->_countAndFlagsBits + 256))(v25);
  *(_QWORD *)v25 = 2;
  memset(&v25[8], 0, 56);
  v26 = 9;
  TTSSpeechEvent.emit(forJob:)(v18[2]);
  v19 = (uint64_t)v18 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_suspendedState;
  swift_beginAccess();
  sub_1A39B9F00(v19, v17, &qword_1EE6D4290);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v15) == 1)
  {
    sub_1A39B11F4(*(_QWORD *)(v0 + 56), &qword_1EE6D4290);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_1A3A60F4C(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80), _s15UtteranceRunnerC14SynthesisStateVMa);
    v21 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v21;
    *v21 = v0;
    v21[1] = sub_1A3A5C078;
    return sub_1A3A56E80(*(_QWORD *)(v0 + 80));
  }
}

uint64_t sub_1A3A5C078()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A5C0C4()
{
  uint64_t v0;

  sub_1A39B7B74(*(_QWORD *)(v0 + 80), _s15UtteranceRunnerC14SynthesisStateVMa);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A5C11C(uint64_t countAndFlagsBits)
{
  Swift::String *v1;
  Swift::String *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t object;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;

  v2 = v1;
  v4 = sub_1A39A4820(&qword_1EE6D3240);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A3AB4724();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A39AACDC();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  swift_retain();
  v12 = sub_1A3AB470C();
  v13 = sub_1A3AB4FC4();
  if (os_log_type_enabled(v12, v13))
  {
    v25 = countAndFlagsBits;
    v14 = swift_slowAlloc();
    v24 = v7;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc();
    v28 = v16;
    *(_DWORD *)v15 = 136315138;
    v23 = v15 + 4;
    v26 = v6;
    countAndFlagsBits = v2[2]._countAndFlagsBits;
    object = (unint64_t)v2[2]._object;
    swift_bridgeObjectRetain();
    v18 = countAndFlagsBits;
    LOBYTE(countAndFlagsBits) = v25;
    v27 = sub_1A39A2878(v18, object, &v28);
    sub_1A3AB5138();
    swift_release();
    v6 = v26;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A3940000, v12, v13, "Completed utterance with id %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A859781C](v16, -1, -1);
    MEMORY[0x1A859781C](v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v24);
  }
  else
  {

    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  v19 = countAndFlagsBits & 1;
  v28 = v19;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0;
  v33 = 6;
  TTSSpeechEvent.emit(forJob:)(v2[2]);
  v28 = v19;
  v29 = xmmword_1A3AC7220;
  *(_QWORD *)&v30 = 0;
  (*(void (**)(uint64_t *))(v2->_countAndFlagsBits + 256))(&v28);
  sub_1A39B9F00((uint64_t)v2 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_eventContinuation, (uint64_t)v6, &qword_1EE6D3240);
  v20 = sub_1A39A4820(&qword_1EE6D3250);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v6, 1, v20) == 1)
    return sub_1A39B11F4((uint64_t)v6, &qword_1EE6D3240);
  v28 = 0;
  sub_1A3AB4E5C();
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v6, v20);
}

uint64_t sub_1A3A5C414(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  char v35;
  __n128 v36;
  uint64_t v37;
  unint64_t v38;
  char v39;

  v4 = sub_1A39A4820(&qword_1EE6D4300);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SpeechSlicer.Slice(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = _s15UtteranceRunnerC14SynthesisStateVMa(0);
  sub_1A39B9F00(a2 + *(int *)(v11 + 24), (uint64_t)v6, &qword_1EE6D4300);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_1A39B11F4((uint64_t)v6, &qword_1EE6D4300);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  v26 = v8;
  v27 = v7;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_1A3AB5480();
    v13 = result;
    if (result)
      goto LABEL_5;
LABEL_26:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v10, v27);
  }
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v13)
    goto LABEL_26;
LABEL_5:
  if (v13 >= 1)
  {
    v14 = 0;
    v15 = *(int *)(v27 + 28);
    v32 = a1 & 0xC000000000000001;
    v33 = v15;
    v29 = v28 + 176;
    v30 = v13;
    v31 = a1;
    while (1)
    {
      v16 = v32 ? (id)MEMORY[0x1A85960B8](v14, a1) : *(id *)(a1 + 8 * v14 + 32);
      v17 = v16;
      v18 = *(void **)&v10[v33];
      v19 = v18;
      swift_bridgeObjectRetain();
      sub_1A3A34884(v18, (uint64_t *)&v36);

      swift_bridgeObjectRelease();
      v20 = v37;
      if (v37 != 255)
        break;

LABEL_8:
      if (v13 == ++v14)
        goto LABEL_26;
    }
    v21 = v36.n128_i64[1];
    v22 = v36.n128_u64[0];
    v23 = v38;
    if ((_BYTE)v37)
    {
      if (v37 == 1)
      {
        v34 = v36;
        v24 = 1;
      }
      else
      {
        if (v37 != 2)
        {
LABEL_21:
          v36.n128_u64[0] = v22;
          v36.n128_u64[1] = v21;
          v37 = v20 | 0x2000000000000000;
          v38 = v23;
          SpeechSlicer.Slice.handle(event:)((uint64_t *)&v36);
          sub_1A39A0888(v29, (uint64_t)&v36);
          if (v39 == 1)
          {
            sub_1A39EB3EC(v22, v21, v20);

            swift_bridgeObjectRelease();
          }
          else
          {
            sub_1A39A2F28((uint64_t)&v36);
            v36.n128_u64[0] = v22;
            v36.n128_u64[1] = v21;
            v37 = v20 | 0x2000000000000000;
            v38 = v23;
            (*(void (**)(__n128 *))(*(_QWORD *)v28 + 256))(&v36);

            sub_1A39EB3EC(v22, v21, v20);
          }
          v13 = v30;
          a1 = v31;
          goto LABEL_8;
        }
        v34 = v36;
        v24 = 2;
      }
      v35 = v24;
    }
    else
    {
      v34 = v36;
      v35 = 0;
    }
    sub_1A3A3486C(&v34, v38, &v36);
    v21 = v36.n128_i64[1];
    v22 = v36.n128_u64[0];
    v20 = v37;
    v23 = v38;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A3A5C73C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v2[21] = v1;
  v4 = type metadata accessor for SpeechSlicer(0);
  v2[22] = v4;
  v2[23] = *(_QWORD *)(v4 - 8);
  v2[24] = swift_task_alloc();
  v5 = sub_1A3AB4538();
  v2[25] = v5;
  v2[26] = *(_QWORD *)(v5 - 8);
  v6 = swift_task_alloc();
  v2[27] = v6;
  v9 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)a1 + 184) + *(_QWORD *)(*(_QWORD *)a1 + 184));
  v7 = (_QWORD *)swift_task_alloc();
  v2[28] = v7;
  *v7 = v2;
  v7[1] = sub_1A3A5C800;
  return v9(v6);
}

uint64_t sub_1A3A5C800()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_task_dealloc();
  type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
  sub_1A39B9F44(&qword_1EE6D4238, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
  *(_QWORD *)(v1 + 232) = sub_1A3AB4C70();
  *(_QWORD *)(v1 + 240) = v2;
  return swift_task_switch();
}

uint64_t sub_1A3A5C898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  int v17;
  _QWORD *v18;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 168);
  sub_1A39A1AD0(v2 + 240, v0 + 120);
  SpeechSlicer.init(speechRoot:)((_QWORD *)(v0 + 120), v1);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v0 + 248) = v4;
  v5 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v0 + 256) = v5;
  v6 = *(_QWORD *)(v2 + 80);
  *(_QWORD *)(v0 + 264) = v6;
  v7 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(v0 + 272) = v7;
  v8 = *(_QWORD *)(v2 + 96);
  *(_QWORD *)(v0 + 280) = v8;
  v9 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v0 + 288) = v9;
  v10 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v0 + 296) = v10;
  v11 = *(_QWORD *)(v2 + 120);
  *(_QWORD *)(v0 + 304) = v11;
  v12 = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v0 + 312) = v12;
  v13 = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(v0 + 320) = v13;
  v14 = *(void **)(v2 + 144);
  *(_QWORD *)(v0 + 328) = v14;
  v15 = *(_QWORD *)(v2 + 152);
  *(_QWORD *)(v0 + 336) = v15;
  v16 = *(_BYTE *)(v2 + 164);
  v17 = *(_DWORD *)(v2 + 160);
  *(_DWORD *)(v0 + 344) = v17;
  *(_DWORD *)(v0 + 112) = v17;
  *(_BYTE *)(v0 + 348) = v16;
  *(_QWORD *)(v0 + 16) = v4;
  *(_QWORD *)(v0 + 24) = v5;
  *(_QWORD *)(v0 + 32) = v6;
  *(_QWORD *)(v0 + 40) = v7;
  *(_QWORD *)(v0 + 48) = v8;
  *(_QWORD *)(v0 + 56) = v9;
  *(_QWORD *)(v0 + 64) = v10;
  *(_QWORD *)(v0 + 72) = v11;
  *(_QWORD *)(v0 + 80) = v12;
  *(_QWORD *)(v0 + 88) = v13;
  *(_QWORD *)(v0 + 96) = v14;
  *(_QWORD *)(v0 + 104) = v15;
  *(_BYTE *)(v0 + 116) = v16;
  sub_1A39A07C8(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 352) = v18;
  *v18 = v0;
  v18[1] = sub_1A3A5C9D4;
  return SpeechSlicer.slices(synthesizer:utteranceVoice:)(v3, v0 + 16);
}

uint64_t sub_1A3A5C9D4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(void **)(*(_QWORD *)v1 + 328);
  v9 = *(_OWORD *)(*(_QWORD *)v1 + 312);
  v11 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v12 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  v10 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  v7 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 360) = a1;
  swift_task_dealloc();
  sub_1A39A2EB8(v7, v6, v5, v4, v3, v10, v11, v12, v9, *((uint64_t *)&v9 + 1), v2);
  return swift_task_switch();
}

uint64_t sub_1A3A5CAB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[27];
  v2 = v0[21];
  v0[20] = v0[45];
  v3 = swift_task_alloc();
  v0[46] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[47] = v4;
  v5 = sub_1A39A4820(&qword_1EE6D4278);
  v6 = type metadata accessor for SpeechSlicer.Slice(0);
  v7 = sub_1A39C3EF8(&qword_1EE6D4280, &qword_1EE6D4278, MEMORY[0x1E0DEAF38]);
  *v4 = v0;
  v4[1] = sub_1A3A5CB88;
  return sub_1A39A202C((uint64_t)&unk_1EE6D4270, v3, v5, v6, v7);
}

uint64_t sub_1A3A5CB88(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 384) = a1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1A3A5CBF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 384));
}

uint64_t sub_1A3A5CC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  sub_1A39A4820(&qword_1ED1B5320);
  v4[8] = swift_task_alloc();
  v5 = sub_1A3AB4538();
  v4[9] = v5;
  v4[10] = *(_QWORD *)(v5 - 8);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
  sub_1A39B9F44(&qword_1EE6D4238, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
  sub_1A3AB4C70();
  return swift_task_switch();
}

uint64_t sub_1A3A5CD34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = type metadata accessor for SpeechSlicer.Slice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v2, v1, v3);
  if (*(_QWORD *)(v1 + 8))
  {
    CoreSynthesizer.Voice.primaryLocale.getter(*(_QWORD *)(v0 + 64));
    v4 = 0;
  }
  else
  {
    v4 = 1;
  }
  v6 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v8, v4, 1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v9, v7);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v7);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 64);
  if (v10 == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v13 + 32))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    sub_1A39B11F4(v14, &qword_1ED1B5320);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v13 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v11, v14, v12);
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 56);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)sub_1A39A17F0();
  *(_QWORD *)(v0 + 24) = v15;
  sub_1A39A3900();
  if ((sub_1A3AB51C8() & 1) != 0)
  {
    v16 = *(_QWORD *)(v0 + 96);
    *(_QWORD *)(swift_task_alloc() + 16) = v16;
    SpeechSlicer.Slice.transform(block:)((uint64_t (*)(uint64_t, uint64_t))sub_1A3A61340);
    swift_task_dealloc();
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A5CF60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_1A39B1604;
  return sub_1A3A5CC5C(a1, a2, v7, v6);
}

uint64_t sub_1A3A5CFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a4)
  {
    v7 = sub_1A3AB497C();
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  swift_retain();
  v6(a2, a3, v7, v9);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A5D048(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  sub_1A3A5D0AC(a1, a2, a3, a4);
  return v8;
}

uint64_t sub_1A3A5D0AC(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  char v18;
  int v19;
  char v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  ValueMetadata *v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  int v36;
  char v37;
  int v38;
  char v39;
  _QWORD v40[7];
  id v41;
  __int128 v42;
  uint64_t v43;
  ValueMetadata *v44;
  __int128 v45;
  __int128 v46;
  char v47;
  _QWORD v48[2];
  unsigned __int8 v49;
  char v50;

  v5 = v4;
  v10 = sub_1A3AB4724();
  MEMORY[0x1E0C80A78](v10);
  type metadata accessor for TTSExecutor.Serialized();
  v11 = sub_1A3A630D8();
  *(_QWORD *)(v4 + 16) = TTSExecutor.Serialized.__allocating_init(executor:)(v11);
  *(_BYTE *)(v4 + 281) = 0;
  v12 = v4 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_suspendedState;
  v13 = _s15UtteranceRunnerC14SynthesisStateVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(_BYTE *)(v5 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_receivedFirstBuffer) = 0;
  *(_BYTE *)(v5 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_playedFirstBuffer) = 0;
  *(_QWORD *)(v5 + 24) = a1;
  sub_1A39EA7A8(a2, v5 + 32);
  *(_BYTE *)(v5 + 280) = a3;
  sub_1A39B9F00(a4, v5 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_eventContinuation, &qword_1EE6D3240);
  sub_1A39A0888(a2 + 144, (uint64_t)v48);
  if (!v50)
  {
    v30 = v48[0];
    v44 = &type metadata for TTSMarkup.SpeechDocument;
    *(_QWORD *)&v45 = &protocol witness table for TTSMarkup.SpeechDocument;
    v31 = swift_allocObject();
    v32 = v31 + 16;
    *(_QWORD *)&v42 = v31;
    v41 = a1;
    swift_bridgeObjectRetain();
    v40[6] = v30;
    TTSMarkup.SpeechDocument.init(ssml:)(v32);
    swift_bridgeObjectRelease();

    sub_1A39EA7E4(a2);
    sub_1A39B11F4(a4, &qword_1EE6D3240);
    v33 = v5 + 240;
    v34 = &v42;
LABEL_6:
    sub_1A39A1AB8(v34, v33);
    return v5;
  }
  if (v50 != 1)
  {
    sub_1A39EA7E4(a2);
    sub_1A39B11F4(a4, &qword_1EE6D3240);
    v33 = v5 + 240;
    v34 = (__int128 *)v48;
    goto LABEL_6;
  }
  v14 = v48[0];
  v15 = v48[1];
  v16 = MEMORY[0x1E0C80A78](v49);
  v40[-6] = v14;
  v40[-5] = v15;
  v40[-4] = a4;
  LODWORD(v40[-3]) = v17;
  BYTE4(v40[-3]) = v18;
  v36 = v19;
  v37 = v20;
  v38 = v21;
  v39 = v16;
  v44 = &type metadata for TTSMarkup.SpeechDocument;
  *(_QWORD *)&v45 = &protocol witness table for TTSMarkup.SpeechDocument;
  v22 = swift_allocObject();
  v23 = (_QWORD *)(v22 + 16);
  *(_QWORD *)&v42 = v22;
  v24 = a1;
  TTSMarkup.SpeechDocument.init(_:)((uint64_t (*)(void))sub_1A3A5E3E8, v23);
  sub_1A39A1AB8(&v42, v5 + 240);
  v25 = *(_QWORD *)(v5 + 264);
  v26 = *(_QWORD *)(v5 + 272);
  sub_1A39A19CC((_QWORD *)(v5 + 240), v25);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 48))(v25, v26);
  *(_QWORD *)&v42 = v14;
  *((_QWORD *)&v42 + 1) = v15;
  v43 = v27;
  v44 = v28;
  v45 = 0u;
  v46 = 0u;
  v47 = 1;
  v29._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 184))();
  TTSSpeechEvent.emit(forJob:)(v29);
  swift_bridgeObjectRelease();

  sub_1A39EA7E4(a2);
  sub_1A3A2C090(v42, *((uint64_t *)&v42 + 1), v43, (uint64_t)v44, v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47);
  sub_1A39B11F4(a4, &qword_1EE6D3240);
  return v5;
}

uint64_t sub_1A3A5D684()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 24);
  return swift_deallocObject();
}

uint64_t sub_1A3A5D6B0(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x1A859781CLL);
  return result;
}

uint64_t sub_1A3A5D6E4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A5D718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32[6];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v30 = a6;
  v29 = a5;
  v31 = a7;
  v11 = sub_1A39A4820(&qword_1EE6D3240);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  TTSMarkup.SpeechText.init(_:)(a1, a2, &v37);
  v33 = v37;
  v34 = v38;
  v35 = v39;
  sub_1A39B9F00(a3, (uint64_t)v14, &qword_1EE6D3240);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = swift_allocObject();
  sub_1A3A611D0((uint64_t)v14, v16 + v15);
  TTSMarkup.SpeechText.word(_:)((uint64_t)sub_1A3A61218, v16, (uint64_t)&v41);
  swift_release();
  v17 = (void *)v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v33 = v41;
  v34 = v42;
  v35 = v43;
  sub_1A39B9F00(a3, (uint64_t)v14, &qword_1EE6D3240);
  v18 = swift_allocObject();
  sub_1A3A611D0((uint64_t)v14, v18 + v15);
  TTSMarkup.SpeechText.sentence(_:)((uint64_t)sub_1A3A61224, v18, (uint64_t)&v37);
  swift_release();
  v19 = (void *)v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v33 = v37;
  v34 = v38;
  v35 = v39;
  sub_1A39B9F00(a3, (uint64_t)v14, &qword_1EE6D3240);
  v20 = swift_allocObject();
  sub_1A3A611D0((uint64_t)v14, v20 + v15);
  TTSMarkup.SpeechText.paragraph(_:)((uint64_t)sub_1A3A612CC, v20, (uint64_t)&v41);
  swift_release();
  v21 = (void *)v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v22 = (void *)v41;
  v33 = v41;
  v34 = v42;
  v35 = v43;
  TTSMarkupSpeech.rate(_:)(a4 | ((HIDWORD(a4) & 1) << 32), (uint64_t)&type metadata for TTSMarkup.SpeechText, (uint64_t)&protocol witness table for TTSMarkup.SpeechText, (uint64_t *)&v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v23 = v39;
  v24 = v40;
  sub_1A39A19CC(&v37, v39);
  TTSMarkupSpeech.pitch(_:)(v29 | ((HIDWORD(v29) & 1) << 32), v23, v24, (uint64_t *)&v33);
  v25 = v35;
  v26 = v36;
  sub_1A39A19CC(&v33, v35);
  TTSMarkupSpeech.volume(_:)(v30 | ((HIDWORD(v30) & 1) << 32), v25, v26, v32);
  static TTSMarkup.SpeechBuilder.buildExpression(_:)(&v41, v32);
  sub_1A39A47C4((uint64_t)v32);
  sub_1A39A47C4((uint64_t)&v33);
  sub_1A39A47C4((uint64_t)&v37);
  static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)&v41, v31);
  return sub_1A39A47C4((uint64_t)&v41);
}

uint64_t sub_1A3A5DA64(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  unsigned __int8 v25;
  uint64_t v26;

  v10 = sub_1A39A4820(&qword_1EE6D3240);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1A39A4820((uint64_t *)&unk_1EE6D4228);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39B9F00(a4, (uint64_t)v12, &qword_1EE6D3240);
  v16 = sub_1A39A4820(&qword_1EE6D3250);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16) == 1)
  {
    sub_1A39B11F4((uint64_t)v12, &qword_1EE6D3240);
    v18 = sub_1A39A4820(&qword_1EE6D3278);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v15, 1, 1, v18);
  }
  else
  {
    v21.n128_u64[0] = a1;
    v21.n128_u64[1] = a2;
    LOBYTE(v22) = a5;
    sub_1A3A3486C(&v21, a3, &v24);
    v21 = v24;
    v22 = v25 | 0x2000000000000000;
    v23 = v26;
    sub_1A3AB4E50();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v16);
    v19 = sub_1A39A4820(&qword_1EE6D3278);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v15, 0, 1, v19);
  }
  return sub_1A39B11F4((uint64_t)v15, (uint64_t *)&unk_1EE6D4228);
}

uint64_t CoreSynthesizer.UtteranceRunner.__allocating_init(copy:)(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = sub_1A3A600B4(a1);
  swift_release();
  return v2;
}

uint64_t CoreSynthesizer.UtteranceRunner.init(copy:)(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_1A3A600B4(a1);
  swift_release();
  return v1;
}

uint64_t sub_1A3A5DC98(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  _BOOL4 v8;
  _BOOL4 v10;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)a2 + 8);
  if (*((_BYTE *)a2 + 8))
    v5 = 0;
  else
    v5 = v2 == v3;
  v6 = v5;
  v8 = v4 == 1 && v2 == v3;
  v10 = v4 == 2 && v3 == 0;
  if (*((_BYTE *)a1 + 8) != 1)
    v8 = v10;
  if (*((_BYTE *)a1 + 8))
    return v8;
  else
    return v6;
}

uint64_t CoreSynthesizer.UtteranceRunner.deinit()
{
  uint64_t v0;

  swift_release();

  sub_1A39EA7E4(v0 + 32);
  sub_1A39A47C4(v0 + 240);
  sub_1A39B11F4(v0 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_suspendedState, &qword_1EE6D4290);
  sub_1A39B11F4(v0 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_eventContinuation, &qword_1EE6D3240);
  return v0;
}

uint64_t CoreSynthesizer.UtteranceRunner.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();

  sub_1A39EA7E4(v0 + 32);
  sub_1A39A47C4(v0 + 240);
  sub_1A39B11F4(v0 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_suspendedState, &qword_1EE6D4290);
  sub_1A39B11F4(v0 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_eventContinuation, &qword_1EE6D3240);
  return swift_deallocClassInstance();
}

uint64_t sub_1A3A5DDB4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
  v1 = sub_1A39B9F44(&qword_1EE6D4350, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
  return TTSActor.unownedExecutor.getter(v0, v1);
}

uint64_t sub_1A3A5DDFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 184))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1A3A5DE2C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t sub_1A3A5DE38()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t sub_1A3A5DE44()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t sub_1A3A5DE50()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t sub_1A3A5DE5C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 264) + *(_QWORD *)(*(_QWORD *)v0 + 264));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1A39B1604;
  return v4();
}

uint64_t sub_1A3A5DEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 272) + *(_QWORD *)(*(_QWORD *)v2 + 272));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1A39D5174;
  return v8(a1, a2);
}

uint64_t sub_1A3A5DF24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 280) + *(_QWORD *)(*(_QWORD *)v2 + 280));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1A39D5174;
  return v8(a1, a2);
}

uint64_t sub_1A3A5DF94(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
  swift_allocObject();
  v2 = sub_1A3A600B4(a1);
  swift_release();
  return v2;
}

uint64_t sub_1A3A5DFE0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))();
}

uint64_t sub_1A3A5E008()
{
  return sub_1A3A5E040(MEMORY[0x1E0CF2E80], 0.0, 100.0, -50.0);
}

uint64_t sub_1A3A5E028()
{
  return sub_1A3A5E040(MEMORY[0x1E0CF2E70], 1.0, 4.0, 0.125);
}

uint64_t sub_1A3A5E040(uint64_t (*a1)(void), float a2, float a3, float a4)
{
  uint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v7 = a1();
  v8 = v7;
  if ((v7 & 0x100000000) != 0)
  {
    v9 = *(float *)&v7;
  }
  else
  {
    v10 = 0.5;
    if (*(float *)&v7 >= 0.5)
    {
      v11 = 1.0;
      v12 = a2;
      v13 = a3;
    }
    else
    {
      v10 = 0.0;
      v11 = 0.5;
      v12 = a4;
      v13 = a2;
    }
    v9 = sub_1A3A4934C(v10, v11, v12, v13, *(float *)&v7);
  }
  return LODWORD(v9) | ((HIDWORD(v8) & 1) << 32);
}

_QWORD *sub_1A3A5E0D4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1A39A4820(&qword_1EE6D4340);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1A3A5FFAC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A3A5E1E0(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A39A4820(&qword_1EE6D4348);
  v10 = *(_QWORD *)(type metadata accessor for SpeechSlicer.Slice(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_1A3AB5438();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for SpeechSlicer.Slice(0) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1A3A5FCEC(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_1A3A5E3E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A3A5D718(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned int *)(v1 + 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 44) << 32), *(unsigned int *)(v1 + 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 52) << 32), *(unsigned int *)(v1 + 56) | ((unint64_t)*(unsigned __int8 *)(v1 + 60) << 32), a1);
}

uint64_t sub_1A3A5E438(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for TTSAURenderer.SpeechBuffer() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_1A3A5FCD8(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1A3A5E5D0(v6);
  *a1 = v3;
  return result;
}

size_t sub_1A3A5E4B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  sub_1A39A4820(&qword_1EE6D4330);
  v3 = *(_QWORD *)(type metadata accessor for TTSAURenderer.SpeechBuffer() - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      v9 = sub_1A3A5FA1C(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_1A39AE7C4();
      if (v9 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A3A5E5D0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  char v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;

  v2 = v1;
  v140 = type metadata accessor for TTSAURenderer.SpeechBuffer();
  v4 = *(_QWORD *)(v140 - 8);
  v5 = MEMORY[0x1E0C80A78](v140);
  v131 = (uint64_t)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v141 = (uint64_t)&v125 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v137 = (uint64_t)&v125 - v10;
  MEMORY[0x1E0C80A78](v9);
  v136 = (uint64_t)&v125 - v11;
  v12 = a1[1];
  result = sub_1A3AB5618();
  if (result >= v12)
  {
    if (v12 < 0)
      goto LABEL_138;
    if (v12)
      return sub_1A3A5EFF0(0, v12, 1, a1);
    return result;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_146;
  v127 = result;
  if (v12 < 2)
  {
    v19 = (char *)MEMORY[0x1E0DEE9D8];
    v133 = MEMORY[0x1E0DEE9D8]
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v126 = MEMORY[0x1E0DEE9D8];
    if (v12 != 1)
    {
      v21 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_104:
      v118 = v19;
      if (v21 >= 2)
      {
        v119 = *a1;
        do
        {
          v120 = v21 - 2;
          if (v21 < 2)
            goto LABEL_133;
          if (!v119)
            goto LABEL_145;
          v121 = *(_QWORD *)&v118[16 * v120 + 32];
          v122 = *(_QWORD *)&v118[16 * v21 + 24];
          sub_1A3A5F238(v119 + *(_QWORD *)(v4 + 72) * v121, v119 + *(_QWORD *)(v4 + 72) * *(_QWORD *)&v118[16 * v21 + 16], v119 + *(_QWORD *)(v4 + 72) * v122, v133);
          if (v2)
            break;
          if (v122 < v121)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v118 = sub_1A39D385C((uint64_t)v118);
          if (v120 >= *((_QWORD *)v118 + 2))
            goto LABEL_135;
          v123 = &v118[16 * v120 + 32];
          *(_QWORD *)v123 = v121;
          *((_QWORD *)v123 + 1) = v122;
          v124 = *((_QWORD *)v118 + 2);
          if (v21 > v124)
            goto LABEL_136;
          memmove(&v118[16 * v21 + 16], &v118[16 * v21 + 32], 16 * (v124 - v21));
          *((_QWORD *)v118 + 2) = v124 - 1;
          v21 = v124 - 1;
        }
        while (v124 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v126 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v15 = v12;
    v16 = v14 >> 1;
    v17 = sub_1A3AB4BF8();
    *(_QWORD *)(v17 + 16) = v16;
    v12 = v15;
    v18 = *(unsigned __int8 *)(v4 + 80);
    v126 = v17;
    v133 = v17 + ((v18 + 32) & ~v18);
  }
  v20 = 0;
  v19 = (char *)MEMORY[0x1E0DEE9D8];
  v139 = a1;
  v134 = v4;
  while (1)
  {
    v22 = v4;
    v23 = v20;
    v24 = v20 + 1;
    v132 = v20;
    v143 = v12;
    if (v20 + 1 >= v12)
    {
      v31 = v20 + 1;
      v40 = v20;
    }
    else
    {
      v25 = *(_QWORD *)(v4 + 72);
      v26 = *a1;
      v27 = v136;
      sub_1A39B7B30(*a1 + v25 * v24, v136, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
      v28 = v137;
      sub_1A39B7B30(v26 + v25 * v23, v137, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
      v29 = *(int *)(v140 + 20);
      LODWORD(v138) = *(_DWORD *)(v27 + v29);
      LODWORD(v135) = *(_DWORD *)(v28 + v29);
      sub_1A39B7B74(v28, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
      sub_1A39B7B74(v27, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
      v30 = v26;
      v31 = v23 + 2;
      v130 = v30;
      v142 = v25;
      if (v23 + 2 >= v143)
      {
        v22 = v134;
      }
      else
      {
        v128 = v19;
        v129 = v2;
        v32 = v25 * v24;
        v33 = v30;
        v34 = v25 * v31;
        while (1)
        {
          v35 = v31;
          v36 = v138 < v135;
          v37 = v136;
          sub_1A39B7B30(v33 + v34, v136, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          v38 = v137;
          sub_1A39B7B30(v33 + v32, v137, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          v39 = *(_DWORD *)(v37 + *(int *)(v140 + 20)) >= *(_DWORD *)(v38 + *(int *)(v140 + 20));
          sub_1A39B7B74(v38, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          sub_1A39B7B74(v37, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          if (v36 == v39)
            break;
          v31 = v35 + 1;
          v33 += v142;
          if (v143 == v35 + 1)
          {
            v31 = v143;
            v22 = v134;
            a1 = v139;
            v19 = v128;
            goto LABEL_24;
          }
        }
        v22 = v134;
        a1 = v139;
        v19 = v128;
        v31 = v35;
LABEL_24:
        v2 = v129;
      }
      v40 = v132;
      if (v138 < v135)
      {
        if (v31 < v132)
          goto LABEL_139;
        if (v132 < v31)
        {
          v128 = v19;
          v129 = v2;
          v41 = 0;
          v42 = v142;
          v43 = v142 * (v31 - 1);
          v44 = v31 * v142;
          v45 = v132;
          v46 = v132 * v142;
          do
          {
            if (v45 != v31 + v41 - 1)
            {
              v47 = v130;
              if (!v130)
                goto LABEL_144;
              v48 = v130 + v46;
              v49 = v130 + v43;
              sub_1A3A60F4C(v130 + v46, v131, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
              if (v46 < v43 || v48 >= v47 + v44)
              {
                swift_arrayInitWithTakeFrontToBack();
                v42 = v142;
              }
              else
              {
                v42 = v142;
                if (v46 != v43)
                  swift_arrayInitWithTakeBackToFront();
              }
              sub_1A3A60F4C(v131, v49, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
            }
            ++v45;
            --v41;
            v43 -= v42;
            v44 -= v42;
            v46 += v42;
          }
          while (v45 < v31 + v41);
          v19 = v128;
          v2 = v129;
          a1 = v139;
          v22 = v134;
          v40 = v132;
        }
      }
    }
    if (v31 < v143)
    {
      if (__OFSUB__(v31, v40))
        goto LABEL_137;
      if (v31 - v40 < v127)
        break;
    }
LABEL_56:
    if (v31 < v40)
      goto LABEL_132;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v138 = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v19 = sub_1A39D3764(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    v67 = *((_QWORD *)v19 + 2);
    v66 = *((_QWORD *)v19 + 3);
    v21 = v67 + 1;
    if (v67 >= v66 >> 1)
      v19 = sub_1A39D3764((char *)(v66 > 1), v67 + 1, 1, v19);
    *((_QWORD *)v19 + 2) = v21;
    v68 = v19 + 32;
    v69 = &v19[16 * v67 + 32];
    v70 = v138;
    *(_QWORD *)v69 = v40;
    *((_QWORD *)v69 + 1) = v70;
    if (v67)
    {
      while (1)
      {
        v71 = v21 - 1;
        if (v21 >= 4)
        {
          v76 = &v68[16 * v21];
          v77 = *((_QWORD *)v76 - 8);
          v78 = *((_QWORD *)v76 - 7);
          v82 = __OFSUB__(v78, v77);
          v79 = v78 - v77;
          if (v82)
            goto LABEL_121;
          v81 = *((_QWORD *)v76 - 6);
          v80 = *((_QWORD *)v76 - 5);
          v82 = __OFSUB__(v80, v81);
          v74 = v80 - v81;
          v75 = v82;
          if (v82)
            goto LABEL_122;
          v83 = v21 - 2;
          v84 = &v68[16 * v21 - 32];
          v86 = *(_QWORD *)v84;
          v85 = *((_QWORD *)v84 + 1);
          v82 = __OFSUB__(v85, v86);
          v87 = v85 - v86;
          if (v82)
            goto LABEL_124;
          v82 = __OFADD__(v74, v87);
          v88 = v74 + v87;
          if (v82)
            goto LABEL_127;
          if (v88 >= v79)
          {
            v106 = &v68[16 * v71];
            v108 = *(_QWORD *)v106;
            v107 = *((_QWORD *)v106 + 1);
            v82 = __OFSUB__(v107, v108);
            v109 = v107 - v108;
            if (v82)
              goto LABEL_131;
            v99 = v74 < v109;
            goto LABEL_93;
          }
        }
        else
        {
          if (v21 != 3)
          {
            v100 = *((_QWORD *)v19 + 4);
            v101 = *((_QWORD *)v19 + 5);
            v82 = __OFSUB__(v101, v100);
            v93 = v101 - v100;
            v94 = v82;
            goto LABEL_87;
          }
          v73 = *((_QWORD *)v19 + 4);
          v72 = *((_QWORD *)v19 + 5);
          v82 = __OFSUB__(v72, v73);
          v74 = v72 - v73;
          v75 = v82;
        }
        if ((v75 & 1) != 0)
          goto LABEL_123;
        v83 = v21 - 2;
        v89 = &v68[16 * v21 - 32];
        v91 = *(_QWORD *)v89;
        v90 = *((_QWORD *)v89 + 1);
        v92 = __OFSUB__(v90, v91);
        v93 = v90 - v91;
        v94 = v92;
        if (v92)
          goto LABEL_126;
        v95 = &v68[16 * v71];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v82 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v82)
          goto LABEL_129;
        if (__OFADD__(v93, v98))
          goto LABEL_130;
        if (v93 + v98 >= v74)
        {
          v99 = v74 < v98;
LABEL_93:
          if (v99)
            v71 = v83;
          goto LABEL_95;
        }
LABEL_87:
        if ((v94 & 1) != 0)
          goto LABEL_125;
        v102 = &v68[16 * v71];
        v104 = *(_QWORD *)v102;
        v103 = *((_QWORD *)v102 + 1);
        v82 = __OFSUB__(v103, v104);
        v105 = v103 - v104;
        if (v82)
          goto LABEL_128;
        if (v105 < v93)
          goto LABEL_14;
LABEL_95:
        v110 = v71 - 1;
        if (v71 - 1 >= v21)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        v111 = *a1;
        if (!*a1)
          goto LABEL_143;
        v112 = v19;
        v113 = &v68[16 * v110];
        v114 = *(_QWORD *)v113;
        v115 = &v68[16 * v71];
        v116 = *((_QWORD *)v115 + 1);
        sub_1A3A5F238(v111 + *(_QWORD *)(v134 + 72) * *(_QWORD *)v113, v111 + *(_QWORD *)(v134 + 72) * *(_QWORD *)v115, v111 + *(_QWORD *)(v134 + 72) * v116, v133);
        if (v2)
          goto LABEL_115;
        if (v116 < v114)
          goto LABEL_118;
        if (v71 > *((_QWORD *)v112 + 2))
          goto LABEL_119;
        *(_QWORD *)v113 = v114;
        *(_QWORD *)&v68[16 * v110 + 8] = v116;
        v117 = *((_QWORD *)v112 + 2);
        if (v71 >= v117)
          goto LABEL_120;
        v19 = v112;
        v21 = v117 - 1;
        memmove(&v68[16 * v71], v115 + 16, 16 * (v117 - 1 - v71));
        *((_QWORD *)v112 + 2) = v117 - 1;
        a1 = v139;
        if (v117 <= 2)
          goto LABEL_14;
      }
    }
    v21 = 1;
LABEL_14:
    v12 = a1[1];
    v20 = v138;
    v4 = v134;
    if (v138 >= v12)
      goto LABEL_104;
  }
  if (__OFADD__(v40, v127))
    goto LABEL_140;
  v50 = v143;
  if (v40 + v127 < v143)
    v50 = v40 + v127;
  if (v50 >= v40)
  {
    if (v31 != v50)
    {
      v128 = v19;
      v129 = v2;
      v51 = *(_QWORD *)(v22 + 72);
      v143 = v51 * (v31 - 1);
      v135 = v51;
      v52 = v31 * v51;
      v130 = v50;
      do
      {
        v54 = 0;
        v55 = v40;
        v138 = v31;
        while (1)
        {
          v56 = v139;
          v57 = *v139;
          v58 = v52;
          v59 = v52 + v54 + *v139;
          v60 = v136;
          sub_1A39B7B30(v59, v136, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          v61 = v137;
          sub_1A39B7B30(v143 + v54 + v57, v137, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          v62 = *(int *)(v140 + 20);
          LODWORD(v142) = *(_DWORD *)(v60 + v62);
          LODWORD(v57) = *(_DWORD *)(v61 + v62);
          sub_1A39B7B74(v61, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          sub_1A39B7B74(v60, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          if (v142 >= v57)
            break;
          v63 = *v56;
          if (!*v56)
            goto LABEL_142;
          v52 = v58;
          v64 = v63 + v143 + v54;
          sub_1A3A60F4C(v63 + v58 + v54, v141, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          swift_arrayInitWithTakeFrontToBack();
          sub_1A3A60F4C(v141, v64, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          v54 -= v135;
          ++v55;
          v53 = v138;
          if (v138 == v55)
            goto LABEL_49;
        }
        v53 = v138;
        v52 = v58;
LABEL_49:
        v31 = v53 + 1;
        v143 += v135;
        v52 += v135;
        v40 = v132;
      }
      while (v31 != v130);
      v31 = v130;
      v19 = v128;
      v2 = v129;
      a1 = v139;
    }
    goto LABEL_56;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = sub_1A3AB5438();
  __break(1u);
  return result;
}

uint64_t sub_1A3A5EFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)();
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;

  v37 = a1;
  v43 = type metadata accessor for TTSAURenderer.SpeechBuffer();
  v7 = MEMORY[0x1E0C80A78](v43);
  v44 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v39 = (uint64_t)&v35 - v10;
  result = MEMORY[0x1E0C80A78](v9);
  v38 = (uint64_t)&v35 - v13;
  v42 = a3;
  v36 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v12 + 72);
    v15 = v14 * (v42 - 1);
    v40 = v14;
    v16 = v14 * v42;
    v17 = type metadata accessor for TTSAURenderer.SpeechBuffer;
    v46 = a4;
LABEL_5:
    v18 = 0;
    v19 = v37;
    v41 = v16;
    while (1)
    {
      v21 = *v46;
      v22 = v16 + v18 + *v46;
      v23 = v38;
      sub_1A39B7B30(v22, v38, (uint64_t (*)(_QWORD))v17);
      v24 = v15 + v18 + v21;
      v25 = v15;
      v26 = v39;
      sub_1A39B7B30(v24, v39, (uint64_t (*)(_QWORD))v17);
      v27 = *(int *)(v43 + 20);
      v45 = *(_DWORD *)(v23 + v27);
      v28 = v17;
      v29 = *(_DWORD *)(v26 + v27);
      v30 = v26;
      v15 = v25;
      sub_1A39B7B74(v30, (uint64_t (*)(_QWORD))v28);
      v31 = v23;
      v16 = v41;
      result = sub_1A39B7B74(v31, (uint64_t (*)(_QWORD))v28);
      v32 = v45 >= v29;
      v17 = v28;
      if (v32)
      {
LABEL_4:
        v15 = v25 + v40;
        v16 += v40;
        if (++v42 == v36)
          return result;
        goto LABEL_5;
      }
      v33 = *v46;
      if (!*v46)
        break;
      v34 = v33 + v25 + v18;
      sub_1A3A60F4C(v33 + v16 + v18, v44, (uint64_t (*)(_QWORD))v28);
      swift_arrayInitWithTakeFrontToBack();
      v20 = v34;
      v17 = v28;
      result = sub_1A3A60F4C(v44, v20, (uint64_t (*)(_QWORD))v28);
      v18 -= v40;
      if (v42 == ++v19)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1A3A5F238(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  unint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;

  v8 = type metadata accessor for TTSAURenderer.SpeechBuffer();
  v9 = MEMORY[0x1E0C80A78](v8);
  v50 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v46 - v11;
  v51 = *(_QWORD *)(v13 + 72);
  if (!v51)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (a2 - a1 == 0x8000000000000000 && v51 == -1)
    goto LABEL_70;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v51 == -1)
    goto LABEL_71;
  v15 = (uint64_t)(a2 - a1) / v51;
  v54 = a1;
  v53 = a4;
  v16 = v14 / v51;
  if (v15 >= v14 / v51)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v51;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v30 = a4 + v18;
      v52 = a4 + v18;
      v54 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v32 = -v51;
        v48 = a4;
        v49 = a1;
        v47 = v8;
        do
        {
          v51 = a3 + v32;
          sub_1A39B7B30(v30 + v32, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          v33 = a2 + v32;
          v34 = (uint64_t)v12;
          v35 = v50;
          sub_1A39B7B30(a2 + v32, v50, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          v36 = *(int *)(v8 + 20);
          v37 = v32;
          v38 = *(_DWORD *)(v34 + v36);
          v39 = *(_DWORD *)(v35 + v36);
          v40 = v35;
          v12 = (char *)v34;
          sub_1A39B7B74(v40, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          sub_1A39B7B74(v34, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
          if (v38 >= v39)
          {
            v43 = v52;
            v52 += v37;
            v44 = a3 < v43 || v51 >= v43;
            v32 = v37;
            if (v44)
            {
              v41 = v51;
              v8 = v47;
              swift_arrayInitWithTakeFrontToBack();
              v33 = a2;
              v42 = v48;
            }
            else
            {
              v41 = v51;
              v8 = v47;
              v42 = v48;
              if (a3 != v43)
                swift_arrayInitWithTakeBackToFront();
              v33 = a2;
            }
          }
          else
          {
            v32 = v37;
            v41 = v51;
            if (a3 < a2 || v51 >= a2)
            {
              v8 = v47;
              swift_arrayInitWithTakeFrontToBack();
              v42 = v48;
            }
            else
            {
              v8 = v47;
              v42 = v48;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront();
            }
            v54 += v32;
          }
          v30 = v52;
          if (v52 <= v42)
            break;
          a2 = v33;
          a3 = v41;
        }
        while (v33 > v49);
      }
      goto LABEL_68;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v51;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v49 = a4 + v17;
    v52 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        v20 = a3;
        sub_1A39B7B30(a2, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
        v21 = v50;
        sub_1A39B7B30(a4, v50, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
        v22 = *(int *)(v8 + 20);
        v23 = *(_DWORD *)&v12[v22];
        v24 = *(_DWORD *)(v21 + v22);
        sub_1A39B7B74(v21, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
        sub_1A39B7B74((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
        v25 = v54;
        if (v23 >= v24)
        {
          v28 = v53 + v51;
          if (v54 < v53 || v54 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v54 != v53)
              swift_arrayInitWithTakeBackToFront();
          }
          v53 = v28;
          v26 = a2;
        }
        else
        {
          v26 = a2 + v51;
          if (v54 < a2 || v54 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v54 == a2)
              v25 = a2;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        v54 = v25 + v51;
        a4 = v53;
        if (v53 >= v49)
          break;
        a2 = v26;
      }
      while (v26 < a3);
    }
LABEL_68:
    sub_1A3A5F730(&v54, &v53, (uint64_t *)&v52);
    return 1;
  }
LABEL_72:
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

uint64_t sub_1A3A5F730(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for TTSAURenderer.SpeechBuffer();
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = sub_1A3AB54BC();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

uint64_t sub_1A3A5F83C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A39A4820(&qword_1EE6D4330);
  v10 = *(_QWORD *)(type metadata accessor for TTSAURenderer.SpeechBuffer() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for TTSAURenderer.SpeechBuffer() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

uint64_t sub_1A3A5FA1C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = type metadata accessor for TTSAURenderer.SpeechBuffer();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v31 - v14;
  v36 = a4;
  v18 = *(_QWORD *)(a4 + 56);
  v17 = a4 + 56;
  v16 = v18;
  v35 = v17;
  v19 = -1 << *(_BYTE *)(v17 - 24);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    v30 = v35;
    *a1 = v36;
    a1[1] = v30;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v32 = -1 << *(_BYTE *)(v17 - 24);
  v33 = a1;
  v22 = 0;
  v23 = 0;
  v34 = (unint64_t)(63 - v19) >> 6;
  v31 = v34 - 1;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    sub_1A39B7B30(*(_QWORD *)(v36 + 48) + v29 * v25, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
    sub_1A3A60F4C((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
    result = sub_1A3A60F4C((uint64_t)v15, a2, (uint64_t (*)(_QWORD))type metadata accessor for TTSAURenderer.SpeechBuffer);
    if (v23 == a3)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34)
      goto LABEL_32;
    v27 = *(_QWORD *)(v35 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v35 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v34)
    goto LABEL_32;
  v27 = *(_QWORD *)(v35 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v35 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v35 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v34)
    {
      v21 = 0;
      v22 = v31;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v35 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1A3A5FCD8(_QWORD *a1)
{
  return sub_1A3A5F83C(0, a1[2], 0, a1);
}

uint64_t sub_1A3A5FCEC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(type metadata accessor for SpeechSlicer.Slice(0) - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

uint64_t sub_1A3A5FE04(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1A3A5E1E0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = *(_QWORD *)(type metadata accessor for SpeechSlicer.Slice(0) - 8);
  v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v14 * a1;
  v16 = v13 + v14 * a1;
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_25;
  v18 = *(_QWORD *)(v4 + 16);
  v19 = v18 - a2;
  if (__OFSUB__(v18, a2))
    goto LABEL_31;
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront();
    }
    v21 = *(_QWORD *)(v4 + 16);
    v22 = __OFADD__(v21, v8);
    v23 = v21 - v7;
    if (!v22)
    {
      *(_QWORD *)(v4 + 16) = v23;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

uint64_t sub_1A3A5FFAC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_1A39A4820(&qword_1EE6D09F0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

uint64_t sub_1A3A600B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v2 = v1;
  type metadata accessor for TTSExecutor.Serialized();
  v4 = sub_1A3A630D8();
  *(_QWORD *)(v1 + 16) = TTSExecutor.Serialized.__allocating_init(executor:)(v4);
  *(_BYTE *)(v1 + 281) = 0;
  v5 = v1 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_suspendedState;
  v6 = _s15UtteranceRunnerC14SynthesisStateVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_BYTE *)(v2 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_receivedFirstBuffer) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_playedFirstBuffer) = 0;
  v7 = *(void **)(a1 + 24);
  *(_QWORD *)(v2 + 24) = v7;
  sub_1A39EA7A8(a1 + 32, v2 + 32);
  *(_BYTE *)(v2 + 280) = *(_BYTE *)(a1 + 280);
  sub_1A39B9F00(a1 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_eventContinuation, v2 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_eventContinuation, &qword_1EE6D3240);
  sub_1A39A1AD0(a1 + 240, v2 + 240);
  v8 = v7;
  return v2;
}

uint64_t sub_1A3A6018C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A39B9F44(&qword_1EE6D42B0, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
  result = sub_1A39B9F44(&qword_1EE6D4238, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1A3A601E8(uint64_t a1)
{
  uint64_t result;

  result = sub_1A39B9F44(&qword_1EE6D4238, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SpeechError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SpeechError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for SpeechError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SpeechError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SpeechError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpeechError()
{
  return &type metadata for SpeechError;
}

uint64_t sub_1A3A6036C()
{
  return type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
}

void sub_1A3A60374()
{
  unint64_t v0;
  unint64_t v1;

  sub_1A3A60EB4(319, &qword_1EE6D42F0, (void (*)(uint64_t))_s15UtteranceRunnerC14SynthesisStateVMa);
  if (v0 <= 0x3F)
  {
    sub_1A3A605D8();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for CoreSynthesizer.UtteranceRunner()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CoreSynthesizer.UtteranceRunner.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of CoreSynthesizer.UtteranceRunner.priority.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of CoreSynthesizer.UtteranceRunner.id.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of CoreSynthesizer.UtteranceRunner.behavior.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of CoreSynthesizer.UtteranceRunner.isoPrioritizedBehavior.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of CoreSynthesizer.UtteranceRunner.run()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 264) + *(_QWORD *)(*(_QWORD *)v0 + 264));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1A39D5174;
  return v4();
}

uint64_t dispatch thunk of CoreSynthesizer.UtteranceRunner.stop(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 272) + *(_QWORD *)(*(_QWORD *)v2 + 272));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1A39D5174;
  return v8(a1, a2);
}

uint64_t dispatch thunk of CoreSynthesizer.UtteranceRunner.suspend(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 280) + *(_QWORD *)(*(_QWORD *)v2 + 280));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1A39D5174;
  return v8(a1, a2);
}

uint64_t dispatch thunk of CoreSynthesizer.UtteranceRunner.__allocating_init(copy:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 424))();
}

void sub_1A3A605D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE6D42F8)
  {
    sub_1A39AB624(&qword_1EE6D3250);
    v0 = sub_1A3AB50FC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE6D42F8);
  }
}

uint64_t _s15UtteranceRunnerC5StateOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A3A6067C + 4 * byte_1A3AC6F4B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A3A606B0 + 4 * byte_1A3AC6F46[v4]))();
}

uint64_t sub_1A3A606B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A606B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A606C0);
  return result;
}

uint64_t sub_1A3A606CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A606D4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A3A606D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A606E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s15UtteranceRunnerC5StateOMa()
{
  return &_s15UtteranceRunnerC5StateON;
}

uint64_t *sub_1A3A606FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    v8 = *(int *)(a3 + 24);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SpeechSlicer.Slice(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = sub_1A39A4820(&qword_1EE6D4300);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(uint64_t *)((char *)v7 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1A3A60820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for SpeechSlicer.Slice(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1A3A608A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SpeechSlicer.Slice(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = sub_1A39A4820(&qword_1EE6D4300);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1A3A6099C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SpeechSlicer.Slice(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_1A39A4820(&qword_1EE6D4300);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_1A3A60AF8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SpeechSlicer.Slice(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_1A39A4820(&qword_1EE6D4300);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

_QWORD *sub_1A3A60BD0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SpeechSlicer.Slice(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_1A39A4820(&qword_1EE6D4300);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A3A60D14()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A3A60D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1A39A4820(&qword_1EE6D4300);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1A3A60DA0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A3A60DAC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1A39A4820(&qword_1EE6D4300);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_1A3A60E24()
{
  unint64_t v0;

  sub_1A3A60EB4(319, &qword_1EE6D4308, (void (*)(uint64_t))type metadata accessor for SpeechSlicer.Slice);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1A3A60EB4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1A3AB50FC();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_1A3A60F04()
{
  unint64_t result;

  result = qword_1EE6E1C70[0];
  if (!qword_1EE6E1C70[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7160, &_s15UtteranceRunnerC5StateON);
    atomic_store(result, qword_1EE6E1C70);
  }
  return result;
}

uint64_t sub_1A3A60F4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1A3A60F98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for TTSAURenderer.SpeechBuffer();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = _s15UtteranceRunnerC14SynthesisStateVMa(0);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  swift_release();
  swift_release();
  v8 = v0 + v3;
  v9 = sub_1A3AB4388();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v10 = v0 + v7 + *(int *)(v5 + 24);
  v11 = type metadata accessor for SpeechSlicer.Slice(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v10, v11);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1A3A610D4(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for TTSAURenderer.SpeechBuffer() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(_s15UtteranceRunnerC14SynthesisStateVMa(0) - 8) + 80);
  sub_1A3A5BBA4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, v1 + ((v4 + v5 + v6) & ~v6));
}

unint64_t sub_1A3A61140()
{
  unint64_t result;

  result = qword_1EE6D4338;
  if (!qword_1EE6D4338)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for SpeechError, &type metadata for SpeechError);
    atomic_store(result, (unint64_t *)&qword_1EE6D4338);
  }
  return result;
}

uint64_t sub_1A3A61184(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D4290);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3A611D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D3240);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3A61218(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_1A3A612D4(a1, a2, a3, a4, a5, 0);
}

uint64_t sub_1A3A61224(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_1A3A612D4(a1, a2, a3, a4, a5, 1);
}

uint64_t sub_1A3A61230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A39A4820(&qword_1EE6D3240) - 8) + 80);
  v2 = (v1 + 16) & ~v1;
  v3 = sub_1A39A4820(&qword_1EE6D3250);
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  return swift_deallocObject();
}

uint64_t sub_1A3A612CC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_1A3A612D4(a1, a2, a3, a4, a5, 2);
}

uint64_t sub_1A3A612D4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v11;

  v11 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A39A4820(&qword_1EE6D3240) - 8) + 80);
  return sub_1A3A5DA64(a1, a2, a5, v6 + ((v11 + 16) & ~v11), a6);
}

void *sub_1A3A61340(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v13[6];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  v5 = (void *)objc_opt_self();
  v6 = (void *)sub_1A3AB4958();
  sub_1A3AB43D0();
  v7 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v4;
  v8[3] = a1;
  v8[4] = a2;
  v13[4] = sub_1A3A614FC;
  v13[5] = v8;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1107296256;
  v13[2] = sub_1A3A5CFCC;
  v13[3] = &unk_1E4A9D9A8;
  v9 = _Block_copy(v13);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(v5, sel_enumerateEmojiCharactersInString_languageCode_withBlock_, v6, v7, v9);
  _Block_release(v9);

  swift_beginAccess();
  v10 = *(void **)(v4 + 16);
  v11 = v10;
  swift_release();
  return v10;
}

uint64_t sub_1A3A614AC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1A3A614D0()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1A3A614FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;

  if (a4)
  {
    v7 = (id *)(*(_QWORD *)(v4 + 16) + 16);
    swift_beginAccess();
    if (!*v7)
    {
      v8 = objc_allocWithZone((Class)TTSSpeechString);
      swift_bridgeObjectRetain();
      v9 = (void *)sub_1A3AB4958();
      swift_bridgeObjectRelease();
      v10 = objc_msgSend(v8, sel_initWithSSMLString_, v9);

      swift_beginAccess();
      v11 = *v7;
      *v7 = v10;

    }
    swift_beginAccess();
    if (*v7)
    {
      v12 = *v7;
      v13 = (void *)sub_1A3AB4958();
      objc_msgSend(v12, sel_transformRange_to_, a1, a2, v13);

    }
  }
}

uint64_t sub_1A3A61634(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1A3A61644()
{
  return swift_release();
}

uint64_t _s15UtteranceRunnerC10RetryStateOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s15UtteranceRunnerC10RetryStateOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A3A616D8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1A3A616F0(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *_s15UtteranceRunnerC10RetryStateOMa()
{
  return &_s15UtteranceRunnerC10RetryStateON;
}

uint64_t sub_1A3A6171C()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for AttributeUtilities();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = sub_1A3A61820(MEMORY[0x1E0DEE9D8]);
  sub_1A39A4820(&qword_1EE6D24A8);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(v0 + 24) = result;
  qword_1EE6E6E10 = v0;
  return result;
}

uint64_t sub_1A3A61780()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = sub_1A3A61820(MEMORY[0x1E0DEE9D8]);
  sub_1A39A4820(&qword_1EE6D24A8);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 24) = v1;
  return v0;
}

uint64_t *sub_1A3A617E0()
{
  if (qword_1EE6E1D80 != -1)
    swift_once();
  return &qword_1EE6E6E10;
}

unint64_t sub_1A3A61820(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A39A4820(&qword_1EE6D4358);
  v2 = (_QWORD *)sub_1A3AB54B0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_1A39A2734(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1A3A61938()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t sub_1A3A61944()
{
  id v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  char v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;

  sub_1A3AB52AC();
  swift_bridgeObjectRelease();
  v20 = 0xD00000000000001BLL;
  v21 = 0x80000001A3AF2730;
  sub_1A39A4820(&qword_1EE6D2380);
  sub_1A39AB5D8();
  sub_1A3AB4910();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  v0 = sub_1A3A620D0(0xD00000000000001BLL, 0x80000001A3AF2730);
  swift_bridgeObjectRelease();
  if (!v0)
    return 0;
  v1 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRetain();
  v2 = sub_1A3AB4AE4();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v0, sel_firstMatchInString_options_range_, v1, 0, 0, v2);

  if (!v3)
    return 0;
  v4 = (void *)sub_1A3AB4958();
  objc_msgSend(v3, sel_rangeWithName_, v4);

  sub_1A3AB4FA0();
  if ((v5 & 1) != 0
    || (v6 = (void *)sub_1A3AB4958(),
        objc_msgSend(v3, sel_rangeWithName_, v6),
        v6,
        sub_1A3AB4FA0(),
        (v7 & 1) != 0))
  {

    return 0;
  }
  v8 = sub_1A3AB4B38();
  v9 = MEMORY[0x1A85957F4](v8);
  v11 = v10;
  swift_bridgeObjectRelease();
  v12 = sub_1A3AB4B38();
  MEMORY[0x1A85957F4](v12);
  v13 = swift_bridgeObjectRelease();
  v14 = MEMORY[0x1E0C80A78](v13);
  if ((v11 & 0x1000000000000000) != 0 || !(v11 & 0x2000000000000000 | v9 & 0x1000000000000000))
  {
    sub_1A3AB52A0();
  }
  else
  {
    MEMORY[0x1E0C80A78](v14);
    if ((v11 & 0x2000000000000000) != 0)
    {
      v20 = v9;
      v21 = v11 & 0xFFFFFFFFFFFFFFLL;
      v17 = (v9 > 0x20u || ((0x100003E01uLL >> v9) & 1) == 0)
         && (v16 = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0
         && *v16 == 0;
      v19 = v17;

      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    if ((v9 & 0x1000000000000000) != 0)
    {
      ((void (*)(unint64_t *__return_ptr, uint64_t))sub_1A3A628A4)(&v20, (v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v18 = sub_1A3AB5318();
      ((void (*)(unint64_t *__return_ptr, uint64_t))sub_1A3A628A4)(&v20, v18);
    }
    v19 = v20;
  }

  swift_bridgeObjectRelease();
LABEL_21:
  if ((v19 & 1) != 0)
    return 0;
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1A3A61D04()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t sub_1A3A61D10()
{
  id v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  char v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;

  sub_1A3AB52AC();
  swift_bridgeObjectRelease();
  v20 = 0xD000000000000021;
  v21 = 0x80000001A3AF2700;
  sub_1A39A4820(&qword_1EE6D2380);
  sub_1A39AB5D8();
  sub_1A3AB4910();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  v0 = sub_1A3A620D0(0xD000000000000021, 0x80000001A3AF2700);
  swift_bridgeObjectRelease();
  if (!v0)
    return 0;
  v1 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRetain();
  v2 = sub_1A3AB4AE4();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v0, sel_firstMatchInString_options_range_, v1, 0, 0, v2);

  if (!v3)
    return 0;
  v4 = (void *)sub_1A3AB4958();
  objc_msgSend(v3, sel_rangeWithName_, v4);

  sub_1A3AB4FA0();
  if ((v5 & 1) != 0
    || (v6 = (void *)sub_1A3AB4958(),
        objc_msgSend(v3, sel_rangeWithName_, v6),
        v6,
        sub_1A3AB4FA0(),
        (v7 & 1) != 0))
  {

    return 0;
  }
  v8 = sub_1A3AB4B38();
  v9 = MEMORY[0x1A85957F4](v8);
  v11 = v10;
  swift_bridgeObjectRelease();
  v12 = sub_1A3AB4B38();
  MEMORY[0x1A85957F4](v12);
  v13 = swift_bridgeObjectRelease();
  v14 = MEMORY[0x1E0C80A78](v13);
  if ((v11 & 0x1000000000000000) != 0 || !(v11 & 0x2000000000000000 | v9 & 0x1000000000000000))
  {
    sub_1A3AB52A0();
  }
  else
  {
    MEMORY[0x1E0C80A78](v14);
    if ((v11 & 0x2000000000000000) != 0)
    {
      v20 = v9;
      v21 = v11 & 0xFFFFFFFFFFFFFFLL;
      v17 = (v9 > 0x20u || ((0x100003E01uLL >> v9) & 1) == 0)
         && (v16 = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0
         && *v16 == 0;
      v19 = v17;

      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    if ((v9 & 0x1000000000000000) != 0)
    {
      ((void (*)(unint64_t *__return_ptr, uint64_t))sub_1A3A628A4)(&v20, (v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v18 = sub_1A3AB5318();
      ((void (*)(unint64_t *__return_ptr, uint64_t))sub_1A3A628A4)(&v20, v18);
    }
    v19 = v20;
  }

  swift_bridgeObjectRelease();
LABEL_21:
  if ((v19 & 1) != 0)
    return 0;
  swift_bridgeObjectRelease();
  return 0;
}

id sub_1A3A620D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  id v10;
  id v11;
  id v12;
  os_unfair_lock_s *v13;
  id v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;

  v3 = v2;
  v6 = *(os_unfair_lock_s **)(v2 + 24);
  swift_retain();
  os_unfair_lock_lock(v6 + 4);
  swift_beginAccess();
  v7 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = sub_1A39A2734(a1, a2);
    if ((v9 & 1) != 0)
    {
      v10 = *(id *)(*(_QWORD *)(v7 + 56) + 8 * v8);
      v11 = v10;
    }
    else
    {
      v10 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  os_unfair_lock_unlock(v6 + 4);
  swift_release();
  if (!v10)
  {
    v12 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
    swift_bridgeObjectRetain();
    v10 = sub_1A3A03838(a1, a2, 1);
    if (v10)
    {
      v13 = *(os_unfair_lock_s **)(v3 + 24);
      swift_retain();
      os_unfair_lock_lock(v13 + 4);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v14 = v10;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = 0x8000000000000000;
      sub_1A3A625B4((uint64_t)v14, a1, a2, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v3 + 16) = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      os_unfair_lock_unlock(v13 + 4);
      swift_release();
    }
  }
  return v10;
}

uint64_t sub_1A3A6229C()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1A3A622C8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820(&qword_1EE6D4358);
  v38 = a2;
  v6 = sub_1A3AB5498();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v2;
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1))
      goto LABEL_40;
    if (v14 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v14);
    if (!v24)
    {
      v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        v3 = v36;
        if ((v38 & 1) == 0)
          goto LABEL_38;
        goto LABEL_34;
      }
      v24 = *(_QWORD *)(v37 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          v14 = v25 + 1;
          if (__OFADD__(v25, 1))
            break;
          if (v14 >= v11)
            goto LABEL_31;
          v24 = *(_QWORD *)(v37 + 8 * v14);
          ++v25;
          if (v24)
            goto LABEL_20;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_21:
    v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v30 = v29;
    }
    sub_1A3AB56FC();
    sub_1A3AB4A30();
    result = sub_1A3AB5738();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v33 = v17 == v32;
        if (v17 == v32)
          v17 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v29;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

void sub_1A3A625B4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1A39A2734(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1A3A6270C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      v20 = *(void **)(v19 + 8 * v12);
      *(_QWORD *)(v19 + 8 * v12) = a1;

      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      swift_bridgeObjectRetain();
      return;
    }
    goto LABEL_14;
  }
  sub_1A3A622C8(v15, a4 & 1);
  v21 = sub_1A39A2734(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  sub_1A3AB5678();
  __break(1u);
}

id sub_1A3A6270C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D4358);
  v2 = *v0;
  v3 = sub_1A3AB548C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    if (!v23)
      break;
LABEL_23:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

_BYTE *sub_1A3A628A4@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1A39C7174(a1, a2);
}

uint64_t type metadata accessor for AttributeUtilities()
{
  return objc_opt_self();
}

uint64_t destroy for AttributeUtilities.NumericAttributeParseResult()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s12TextToSpeech18AttributeUtilitiesC27NumericAttributeParseResultVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributeUtilities.NumericAttributeParseResult(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AttributeUtilities.NumericAttributeParseResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributeUtilities.NumericAttributeParseResult(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributeUtilities.NumericAttributeParseResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeUtilities.NumericAttributeParseResult()
{
  return &type metadata for AttributeUtilities.NumericAttributeParseResult;
}

uint64_t TTSExecutor.__allocating_init(threadCount:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  TTSExecutor.init(threadCount:)(a1);
  return v2;
}

dispatch_semaphore_t TTSExecutor.init(threadCount:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  dispatch_semaphore_t result;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  unint64_t aBlock;
  unint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  void (*v17)();
  uint64_t v18;

  v2 = v1;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 16) = MEMORY[0x1E0DEE9D8];
  sub_1A39A4820(&qword_1EE6D24A8);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v2 + 24) = v5;
  result = dispatch_semaphore_create(0);
  *(_QWORD *)(v2 + 48) = v4;
  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = 0;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a1)
    {
      v7 = 0;
      do
      {
        v8 = objc_allocWithZone(MEMORY[0x1E0CB3978]);
        v17 = sub_1A3A63AB0;
        v18 = v2;
        aBlock = MEMORY[0x1E0C809B0];
        v14 = 1107296256;
        v15 = sub_1A39CF138;
        v16 = &unk_1E4A9F930;
        v9 = _Block_copy(&aBlock);
        swift_retain();
        v10 = objc_msgSend(v8, sel_initWithBlock_, v9);
        _Block_release(v9);
        swift_release();
        objc_msgSend(v10, sel_setQualityOfService_, 33);
        aBlock = 0;
        v14 = 0xE000000000000000;
        sub_1A3AB52AC();
        swift_bridgeObjectRelease();
        aBlock = 0xD000000000000014;
        v14 = 0x80000001A3AF2750;
        sub_1A3AB5624();
        sub_1A3AB4A84();
        swift_bridgeObjectRelease();
        v11 = (void *)sub_1A3AB4958();
        swift_bridgeObjectRelease();
        objc_msgSend(v10, sel_setName_, v11);

        objc_msgSend(v10, sel_start);
        swift_beginAccess();
        v12 = v10;
        MEMORY[0x1A8595980]();
        if (*(_QWORD *)((*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFFF8)
                                                                                           + 0x18) >> 1)
          sub_1A3AB4BE0();
        ++v7;
        sub_1A3AB4C10();
        sub_1A3AB4BC8();
        swift_endAccess();

      }
      while (a1 != v7);
    }
    return (dispatch_semaphore_t)v2;
  }
  return result;
}

uint64_t TTSExecutor.deinit()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  swift_beginAccess();
  v1 = *(os_unfair_lock_s **)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  sub_1A3A62E04(v0);
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TTSExecutor.__deallocating_deinit()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  swift_beginAccess();
  v1 = *(os_unfair_lock_s **)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  sub_1A3A62E04(v0);
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void sub_1A3A62E04(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  id *v4;
  id v5;

  swift_beginAccess();
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_BYTE *)(a1 + 40) = 1;
  swift_beginAccess();
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
    if (v3 < 0)
    {
      __break(1u);
      return;
    }
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v3)
  {
    v4 = (id *)(a1 + 32);
    swift_beginAccess();
    do
    {
      v5 = *v4;
      sub_1A3AB509C();

      --v3;
    }
    while (v3);
  }
}

uint64_t TTSExecutor.enqueue(_:)()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  char **v3;
  char *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  id v8;

  v1 = sub_1A3AB4CC4();
  swift_beginAccess();
  v2 = *(os_unfair_lock_s **)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  v3 = (char **)(v0 + 16);
  swift_beginAccess();
  v4 = *(char **)(v0 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v0 + 16) = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_1A3A63C08(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    *v3 = v4;
  }
  v7 = *((_QWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 3);
  if (v7 >= v6 >> 1)
  {
    v4 = sub_1A3A63C08((char *)(v6 > 1), v7 + 1, 1, v4);
    *v3 = v4;
  }
  *((_QWORD *)v4 + 2) = v7 + 1;
  *(_QWORD *)&v4[8 * v7 + 32] = v1;
  swift_beginAccess();
  v8 = *(id *)(v0 + 32);
  sub_1A3AB509C();

  os_unfair_lock_unlock(v2 + 4);
  return swift_release();
}

unint64_t sub_1A3A63038@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = swift_beginAccess();
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = *(_QWORD *)(v5 + 32);
    result = sub_1A3A63D20(0, 1);
    *a2 = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TTSExecutor.asUnownedTaskExecutor()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A39D4188((unint64_t *)&qword_1EE6D2540, a2, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
  return v2;
}

uint64_t sub_1A3A630D8()
{
  if (qword_1EE6D5410 != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t static TTSExecutor.shared.getter()
{
  if (qword_1EE6D5410 != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t TTSExecutor.Serialized.__allocating_init(executor:)(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = sub_1A3A63E24(a1);
  swift_release();
  return v2;
}

uint64_t TTSExecutor.Serialized.init(executor:)(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_1A3A63E24(a1);
  swift_release();
  return v1;
}

uint64_t sub_1A3A63228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = a3;
  v4 = sub_1A39A4820(&qword_1EE6D2590);
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A3A6328C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_1A39A4820(&qword_1EE6D2598);
  sub_1A3AB4D6C();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_1A3A63314;
  return sub_1A3AB4D78();
}

uint64_t sub_1A3A63314()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A63368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  if (*(_QWORD *)(v2 + 16))
  {
    sub_1A39D4188((unint64_t *)&qword_1EE6D2540, a2, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
    swift_job_run_on_task_executor();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v2 + 64) = v3;
    *v3 = v2;
    v3[1] = sub_1A3A63314;
    return sub_1A3AB4D78();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 48) + 8))(*(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 40));
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
}

uint64_t TTSExecutor.Serialized.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D09F0);
  sub_1A3AB4DB4();
  v2 = v0 + OBJC_IVAR____TtCC12TextToSpeech11TTSExecutor10Serialized_continuation;
  v3 = sub_1A39A4820(&qword_1EE6D2580);
  sub_1A3AB4D48();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_defaultActor_destroy();
  return v1;
}

uint64_t TTSExecutor.Serialized.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1A39A4820(&qword_1EE6D09F0);
  sub_1A3AB4DB4();
  v1 = v0 + OBJC_IVAR____TtCC12TextToSpeech11TTSExecutor10Serialized_continuation;
  v2 = sub_1A39A4820(&qword_1EE6D2580);
  sub_1A3AB4D48();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t sub_1A3A6358C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD v5[2];

  v0 = sub_1A39A4820(&qword_1EE6D2570);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[1] = sub_1A3AB4CC4();
  sub_1A39A4820(&qword_1EE6D2580);
  sub_1A3AB4D3C();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t TTSExecutor.Serialized.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1A3A6364C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A3A63664(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DF05F0]);
}

uint64_t sub_1A3A63658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A3A63664(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DF0600]);
}

uint64_t sub_1A3A63664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TTSExecutor.Serialized();
  v6 = sub_1A39D4188(&qword_1EE6D2520, 255, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor.Serialized, (uint64_t)&protocol conformance descriptor for TTSExecutor.Serialized);
  return a4(a1, v5, v6);
}

uint64_t sub_1A3A636D0()
{
  type metadata accessor for TTSExecutor.Serialized();
  return sub_1A3AB4DFC();
}

uint64_t sub_1A3A636F8()
{
  type metadata accessor for TTSExecutor.Serialized();
  return sub_1A3AB4E08();
}

void sub_1A3A63734()
{
  type metadata accessor for TTSExecutor.Serialized();
  JUMPOUT(0x1A8595BD8);
}

uint64_t sub_1A3A6375C()
{
  type metadata accessor for TTSExecutor.Serialized();
  return sub_1A3AB4C94();
}

uint64_t sub_1A3A63798()
{
  type metadata accessor for TTSExecutor.Serialized();
  return sub_1A3AB4CA0();
}

uint64_t sub_1A3A637D4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t sub_1A3A637E0(uint64_t a1, uint64_t a2)
{
  sub_1A39D4188((unint64_t *)&unk_1EE6D2530, a2, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&protocol conformance descriptor for TTSExecutor);
  return sub_1A3AB4C94();
}

uint64_t sub_1A3A63830(uint64_t a1, uint64_t a2)
{
  sub_1A39D4188((unint64_t *)&unk_1EE6D2530, a2, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&protocol conformance descriptor for TTSExecutor);
  return sub_1A3AB4CA0();
}

uint64_t sub_1A3A63884()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1A3A6388C()
{
  return sub_1A3AB4C94();
}

uint64_t sub_1A3A63894()
{
  return sub_1A3AB4CA0();
}

dispatch_semaphore_t sub_1A3A6389C()
{
  id v0;
  id v1;
  uint64_t v2;
  dispatch_semaphore_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v1 = objc_msgSend(v0, sel_processorCount);

  type metadata accessor for TTSExecutor();
  v2 = swift_allocObject();
  result = TTSExecutor.init(threadCount:)((uint64_t)v1);
  qword_1EE6D5408 = v2;
  return result;
}

uint64_t *sub_1A3A63914()
{
  if (qword_1EE6D5410 != -1)
    swift_once();
  return &qword_1EE6D5408;
}

uint64_t static TTSExecutor.shared.setter(uint64_t a1)
{
  if (qword_1EE6D5410 != -1)
    swift_once();
  swift_beginAccess();
  qword_1EE6D5408 = a1;
  return swift_release();
}

uint64_t (*static TTSExecutor.shared.modify())()
{
  if (qword_1EE6D5410 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t TTSActor.unownedExecutor.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  (*(void (**)(void))(a2 + 16))();
  type metadata accessor for TTSExecutor.Serialized();
  sub_1A39D4188(&qword_1EE6D2528, 255, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor.Serialized, (uint64_t)&protocol conformance descriptor for TTSExecutor.Serialized);
  v2 = sub_1A3AB4DFC();
  swift_release();
  return v2;
}

void sub_1A3A63AB0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  TTSSetThreadPriorityHigh(1);
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  if ((*(_BYTE *)(v0 + 40) & 1) == 0)
  {
    do
    {
      v2 = *(id *)(v1 + 32);
      sub_1A3AB5090();

      v3 = *(os_unfair_lock_s **)(v1 + 24);
      swift_retain();
      os_unfair_lock_lock(v3 + 4);
      sub_1A3A63C00(&v7);
      os_unfair_lock_unlock(v3 + 4);
      v4 = swift_release();
      v5 = (void *)MEMORY[0x1A8596D24](v4);
      sub_1A39D4188((unint64_t *)&qword_1EE6D2540, v6, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
      swift_job_run_on_task_executor();
      objc_autoreleasePoolPop(v5);
    }
    while (*(_BYTE *)(v1 + 40) != 1);
  }
}

uint64_t sub_1A3A63BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1A3A63BF8()
{
  return swift_release();
}

unint64_t sub_1A3A63C00@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1A3A63038(v1, a1);
}

char *sub_1A3A63C08(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D25A0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t type metadata accessor for TTSExecutor()
{
  return objc_opt_self();
}

unint64_t sub_1A3A63D20(unint64_t result, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_1A3A63C08((char *)result, v10, 1, (char *)v4);
    v4 = result;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 8 * v6;
  v14 = (const void *)(v4 + 32 + 8 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 8 * v13)
    result = (unint64_t)memmove((void *)result, v14, 8 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1A3A63E24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = v1;
  v44 = a1;
  v3 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v43 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v41 = (char *)&v39 - v6;
  v7 = sub_1A39A4820(&qword_1EE6D2578);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A39A4820(&qword_1EE6D2580);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_1A39A4820(&qword_1EE6D2598);
  v15 = *(_QWORD *)(v39 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = MEMORY[0x1E0C80A78](v39);
  v40 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v39 - v18;
  swift_defaultActor_initialize();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DF07B8], v7);
  sub_1A3AB4D0C();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v47 = v11;
  v48 = v2;
  v46 = v12;
  v20 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 16);
  v42 = v14;
  v21 = v11;
  v22 = v39;
  v20(v2 + OBJC_IVAR____TtCC12TextToSpeech11TTSExecutor10Serialized_continuation, v14, v21);
  v23 = sub_1A3AB4D00();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = (uint64_t)v41;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v41, 1, 1, v23);
  v26 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v27 = v40;
  v45 = v19;
  v26(v40, v19, v22);
  v28 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v29 = (v16 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = swift_allocObject();
  v31 = v30 + v28;
  v32 = v27;
  v33 = (uint64_t)v43;
  v34 = v44;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v31, v32, v22);
  *(_QWORD *)(v30 + v29) = v34;
  sub_1A39D89E8(v25, v33);
  LODWORD(v29) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v33, 1, v23);
  swift_retain_n();
  if ((_DWORD)v29 == 1)
  {
    sub_1A39D4F2C(v33);
  }
  else
  {
    sub_1A3AB4CF4();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v33, v23);
  }
  v36 = sub_1A39D4188((unint64_t *)&qword_1EE6D2540, v35, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
  v49 = 6;
  v50 = 0;
  v51 = v34;
  v52 = v36;
  v37 = swift_task_create();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v42, v47);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v45, v22);
  result = v48;
  *(_QWORD *)(v48 + OBJC_IVAR____TtCC12TextToSpeech11TTSExecutor10Serialized_task) = v37;
  return result;
}

uint64_t type metadata accessor for TTSExecutor.Serialized()
{
  uint64_t result;

  result = qword_1EE6D51F0;
  if (!qword_1EE6D51F0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A3A641D0()
{
  return sub_1A39D4188(&qword_1EE6D2520, 255, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor.Serialized, (uint64_t)&protocol conformance descriptor for TTSExecutor.Serialized);
}

uint64_t sub_1A3A64200(uint64_t a1, uint64_t a2)
{
  return sub_1A39D4188((unint64_t *)&unk_1EE6D2530, a2, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&protocol conformance descriptor for TTSExecutor);
}

uint64_t method lookup function for TTSExecutor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TTSExecutor.__allocating_init(threadCount:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1A3A64240()
{
  return type metadata accessor for TTSExecutor.Serialized();
}

void sub_1A3A64248()
{
  unint64_t v0;

  sub_1A3A6430C(319, &qword_1EE6D2588, MEMORY[0x1E0DF06C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DF07E8]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for TTSExecutor.Serialized()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TTSExecutor.Serialized.__allocating_init(executor:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of TTSExecutor.Serialized.enqueue(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of TTSActor.executor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void sub_1A3A6430C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_1A3A64350()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1A39A4820(&qword_1EE6D2598);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A3A643C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(sub_1A39A4820(&qword_1EE6D2598) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1A39B1604;
  return sub_1A3A63228((uint64_t)v6, v4, v5);
}

double TTSMarkup.Group.init(_:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;

  sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();

  result = 0.0;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  return result;
}

uint64_t static TTSMarkup.Group.tag.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = byte_1EE6D4370;
  return result;
}

uint64_t static TTSMarkup.Group.tag.setter(char *a1)
{
  char v1;
  uint64_t result;

  v1 = *a1;
  result = swift_beginAccess();
  byte_1EE6D4370 = v1;
  return result;
}

uint64_t (*static TTSMarkup.Group.tag.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t TTSMarkup.Group.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Group.attributes.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.Group.attributes.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.Group._content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.Group._content.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 8;
  sub_1A39A47C4(v3);
  return sub_1A39A1AB8(a1, v3);
}

uint64_t (*TTSMarkup.Group._content.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.Group.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.Group.init(contentBlock:)@<X0>(uint64_t (*a1)(void)@<X0>, unint64_t *a2@<X8>)
{
  *a2 = sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
  return a1();
}

uint64_t TTSMarkup.Group.ssml.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  sub_1A39A19CC(v0 + 1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

uint64_t TTSMarkup.Group.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;

  v7 = v3[4];
  v8 = v3[5];
  sub_1A39A19CC(v3 + 1, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 80))(a1, a2, a3, v7, v8);
}

uint64_t sub_1A3A646DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = byte_1EE6D4370;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Group()
{
  return &type metadata for TTSMarkup.Group;
}

id sub_1A3A6473C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  char v38;
  int v39;
  char v40;
  uint64_t v41;

  v1 = sub_1A3AB4538();
  v25 = *(_QWORD *)(v1 - 8);
  v26 = v1;
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *v0;
  v5 = v0[4];
  v19 = v0[3];
  v6 = *((char *)v0 + 40);
  v7 = *((char *)v0 + 41);
  v8 = v0[6];
  v9 = *((unsigned __int8 *)v0 + 56);
  v10 = v0[10];
  v11 = *((_DWORD *)v0 + 22);
  v23 = *((unsigned __int8 *)v0 + 92);
  v24 = v11;
  v22 = *((_DWORD *)v0 + 24);
  LODWORD(v2) = *((unsigned __int8 *)v0 + 100);
  v20 = v9;
  v21 = v2;
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C89B80]), sel_init);
  objc_msgSend(v12, sel_setIsInstalled_, 1);
  objc_msgSend(v12, sel_setAssetSize_, 0);
  objc_msgSend(v12, sel_setGender_, qword_1A3AC74A0[v7]);
  objc_msgSend(v12, sel_setSynthesisProviderVoice_, v10);
  objc_msgSend(v12, sel_setQuality_, qword_1A3AC74B8[v6]);
  v17 = *(_OWORD *)(v0 + 1);
  v18 = *((_OWORD *)v0 + 4);
  v13 = (void *)sub_1A3AB4958();
  objc_msgSend(v12, sel_setIdentifier_, v13);

  v27 = *(_QWORD *)sub_1A3A391E0();
  v41 = v8;
  sub_1A39AE770();
  objc_msgSend(v12, sel_setIsDefault_, sub_1A3AB51C8() & 1);
  v27 = v4;
  v28 = v17;
  v29 = v19;
  v30 = v5;
  v31 = v6;
  v32 = v7;
  v33 = v8;
  v34 = v20;
  v35 = v18;
  v36 = v10;
  v37 = v24;
  v38 = v23;
  v39 = v22;
  v40 = v21;
  CoreSynthesizer.Voice.primaryLocale.getter((uint64_t)v3);
  sub_1A3AB43D0();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v3, v26);
  v14 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setLanguage_, v14);

  v27 = *(_QWORD *)sub_1A3A39180();
  v41 = v8;
  objc_msgSend(v12, sel_setIsNoveltyVoice_, sub_1A3AB51C8() & 1);
  v15 = (void *)sub_1A3AB4958();
  objc_msgSend(v12, sel_setNonLocalizedNameWithoutQuality_, v15);

  return v12;
}

uint64_t sub_1A3A64A20@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 2)
    v2 = 1;
  else
    v2 = 2;
  if (result == 1)
    v2 = 0;
  *a2 = v2;
  return result;
}

unint64_t sub_1A3A64A3C@<X0>(unint64_t result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = 0x40302010000uLL >> (8 * result);
  if (result >= 6)
    LOBYTE(v2) = 0;
  *a2 = v2;
  return result;
}

uint64_t sub_1A3A64A5C()
{
  char *v0;

  return qword_1A3AC74E0[*v0];
}

uint64_t sub_1A3A64A70()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_name);
  if (v1)
  {
    v2 = v1;
    sub_1A3AB497C();

    if (objc_msgSend(v0, sel_type) == (id)4)
    {
      v3 = objc_msgSend(v0, sel_footprint);
      if (v3 == (id)4 || v3 == (id)2)
      {
        sub_1A39A4820(&qword_1ED1B5468);
        v4 = swift_allocObject();
        *(_OWORD *)(v4 + 16) = xmmword_1A3ABF990;
        sub_1A3AB52AC();
        swift_bridgeObjectRelease();
        sub_1A3AB4A84();
        swift_bridgeObjectRelease();
        sub_1A3AB4A84();
        *(_QWORD *)(v4 + 32) = 0xD000000000000014;
        *(_QWORD *)(v4 + 40) = 0x80000001A3AF2810;
        return v4;
      }
    }
    swift_bridgeObjectRelease();
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t Float.dspGraphValue.getter()
{
  sub_1A3AB4EB0();
  return 0;
}

uint64_t sub_1A3A64C80()
{
  sub_1A3AB4EB0();
  return 0;
}

uint64_t UInt32.dspGraphValue.getter(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1A39A4820(&qword_1EE6D23F8);
  v2 = swift_allocObject();
  v3 = MEMORY[0x1E0DEE0F8];
  *(_OWORD *)(v2 + 16) = xmmword_1A3ABF990;
  v4 = MEMORY[0x1E0DEE168];
  *(_QWORD *)(v2 + 56) = v3;
  *(_QWORD *)(v2 + 64) = v4;
  *(_DWORD *)(v2 + 32) = a1;
  sub_1A3AB49AC();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  return 30768;
}

uint64_t sub_1A3A64D58(uint64_t a1)
{
  int *v1;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  sub_1A39A4820(&qword_1EE6D23F8);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1A3ABF990;
  v5 = MEMORY[0x1E0DEE168];
  *(_QWORD *)(v4 + 56) = a1;
  *(_QWORD *)(v4 + 64) = v5;
  *(_DWORD *)(v4 + 32) = v3;
  sub_1A3AB49AC();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  return 30768;
}

uint64_t sub_1A3A64DF0()
{
  sub_1A3A65308();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A64E18()
{
  sub_1A3A65308();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A64E40()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7475706E69;
  if (*v0 != 1)
    v1 = 0x74757074756FLL;
  if (*v0)
    return v1;
  else
    return 7892834;
}

uint64_t sub_1A3A64E8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A6C938(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A64EB0()
{
  sub_1A3A6523C();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A64ED8()
{
  sub_1A3A6523C();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A64F00()
{
  sub_1A3A652C4();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A64F28()
{
  sub_1A3A652C4();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A64F50()
{
  sub_1A3A65280();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A64F78()
{
  sub_1A3A65280();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A64FA0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;

  v24 = a2;
  v25 = a3;
  v4 = sub_1A39A4820(&qword_1EE6D4378);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A39A4820(&qword_1EE6D4380);
  v20 = *(_QWORD *)(v7 - 8);
  v21 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A39A4820(&qword_1EE6D4388);
  v19 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1A39A4820(&qword_1EE6D4390);
  v26 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A6523C();
  v16 = v25;
  sub_1A3AB5780();
  if (!v16)
  {
    v28 = 1;
    sub_1A3A652C4();
    sub_1A3AB5588();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v15, v13);
  }
  if (v16 == 1)
  {
    v29 = 2;
    sub_1A3A65280();
    sub_1A3AB5588();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v15, v13);
  }
  v27 = 0;
  sub_1A3A65308();
  sub_1A3AB5588();
  sub_1A3AB55AC();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v15, v13);
}

unint64_t sub_1A3A6523C()
{
  unint64_t result;

  result = qword_1EE6E1E10;
  if (!qword_1EE6E1E10)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC8B7C, &_s4SpecV8EndPointO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E1E10);
  }
  return result;
}

unint64_t sub_1A3A65280()
{
  unint64_t result;

  result = qword_1EE6E1E18;
  if (!qword_1EE6E1E18)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC8B2C, &_s4SpecV8EndPointO16OutputCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E1E18);
  }
  return result;
}

unint64_t sub_1A3A652C4()
{
  unint64_t result;

  result = qword_1EE6E1E20;
  if (!qword_1EE6E1E20)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC8ADC, &_s4SpecV8EndPointO15InputCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E1E20);
  }
  return result;
}

unint64_t sub_1A3A65308()
{
  unint64_t result;

  result = qword_1EE6E1E28;
  if (!qword_1EE6E1E28)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC8A8C, &_s4SpecV8EndPointO13BoxCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E1E28);
  }
  return result;
}

uint64_t sub_1A3A6534C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1A3A6CA6C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1A3A65374(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1A3A64FA0(a1, *v1, v1[1]);
}

uint64_t sub_1A3A6538C()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1A3AB56FC();
  sub_1A3AB5708();
  if (v1 > 1)
    sub_1A3AB4A30();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A65408()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8) <= 1uLL)
    return sub_1A3AB5708();
  sub_1A3AB5708();
  return sub_1A3AB4A30();
}

uint64_t sub_1A3A6547C()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1A3AB56FC();
  sub_1A3AB5708();
  if (v1 > 1)
    sub_1A3AB4A30();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A654F4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return v4 == 0;
  if (v3 == 1)
    return v4 == 1;
  if (v4 < 2)
    return 0;
  if (*a1 == *a2 && v3 == v4)
    return 1;
  else
    return sub_1A3AB5654();
}

uint64_t sub_1A3A65558()
{
  return 1819308129;
}

uint64_t sub_1A3A65568()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65707974627573;
  if (*v0 != 1)
    v1 = 0x74636166756E616DLL;
  if (*v0)
    return v1;
  else
    return 1701869940;
}

uint64_t sub_1A3A655C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A6D548(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A655E8()
{
  sub_1A3A6D0BC();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A65610()
{
  sub_1A3A6D0BC();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A65638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A3AB5654();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A3A656B4()
{
  sub_1A3A6D078();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A656DC()
{
  sub_1A3A6D078();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A65704()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E49746C697562;
  else
    return 0x696E556F69647561;
}

uint64_t sub_1A3A65744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A6D6A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A65768()
{
  sub_1A3A6D014();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A65790()
{
  sub_1A3A6D014();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A657B8(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[6];
  char v28;
  char v29;

  v2 = v1;
  v4 = sub_1A39A4820(&qword_1EE6D4398);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1A39A4820(&qword_1EE6D43A0);
  v7 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v24 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A39A4820(&qword_1EE6D43A8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A6D014();
  sub_1A3AB5780();
  sub_1A3A6D058(v2, (uint64_t)v27);
  if ((v28 & 1) != 0)
  {
    v29 = 1;
    sub_1A3A6D078();
    sub_1A3AB5588();
    v13 = v23;
    sub_1A3AB55AC();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v13);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    v15 = v10;
    v22 = v27[2];
    v23 = v7;
    v16 = v27[4];
    v21[1] = v27[3];
    v17 = v27[5];
    v29 = 0;
    sub_1A3A6D0BC();
    v18 = v24;
    sub_1A3AB5588();
    v29 = 0;
    v20 = v25;
    v19 = v26;
    sub_1A3AB55AC();
    if (!v19)
    {
      v21[0] = v17;
      v26 = v16;
      v29 = 1;
      sub_1A3AB55AC();
      v29 = 2;
      sub_1A3AB55AC();
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v12, v9);
  }
}

uint64_t sub_1A3A65A68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5[3];

  result = sub_1A3A6D7A0(a1, (uint64_t *)v5);
  if (!v2)
    return sub_1A3A6D058(v5, a2);
  return result;
}

uint64_t sub_1A3A65AAC(_QWORD *a1)
{
  __int128 *v1;
  _BYTE v4[56];

  sub_1A3A6D058(v1, (uint64_t)v4);
  return sub_1A3A657B8(a1);
}

uint64_t sub_1A3A65AF8(__int128 *a1, __int128 *a2)
{
  __int128 v4[3];
  __int128 v5[3];

  sub_1A3A6D058(a1, (uint64_t)v4);
  sub_1A3A6D058(a2, (uint64_t)v5);
  return sub_1A3A6CEBC(v4, v5) & 1;
}

uint64_t _s12TextToSpeech14TTSAudioEffectO4SpecV8controlsSayAE7ControlOGvg_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A3A65B48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  if ((*(_BYTE *)(v0 + 48) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1A39A5070(v1, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), 0);
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    return 40;
  }
  return v1;
}

uint64_t sub_1A3A65C50(uint64_t result, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t i;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  char v38;
  BOOL v39;
  char v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v2 = 0;
  v61 = result;
  v62 = result + 64;
  v3 = 1 << *(_BYTE *)(result + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(result + 64);
  v63 = (unint64_t)(v3 + 63) >> 6;
  if (!v5)
    goto LABEL_7;
LABEL_6:
  v64 = (v5 - 1) & v5;
  v65 = v2;
  for (i = __clz(__rbit64(v5)) | (v2 << 6); ; i = __clz(__rbit64(v8)) + (v9 << 6))
  {
    v11 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * i);
    v77 = v11[1];
    v79 = *v11;
    v12 = *(_QWORD *)(result + 56) + 88 * i;
    v13 = *(_QWORD *)v12;
    v14 = *(_QWORD *)(v12 + 8);
    v16 = *(_QWORD *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 24);
    v18 = *(_QWORD *)(v12 + 32);
    v17 = *(_QWORD *)(v12 + 40);
    v19 = *(_BYTE *)(v12 + 48);
    v20 = *(_QWORD *)(v12 + 56);
    v21 = *(_QWORD *)(v12 + 64);
    v22 = *(_QWORD *)(v12 + 80);
    v82 = *(_QWORD *)(v12 + 72);
    swift_bridgeObjectRetain();
    v71 = v14;
    v72 = v13;
    v67 = v18;
    v68 = v17;
    v74 = v19;
    sub_1A39A5070(v13, v14, v16, v15, v18, v17, v19);
    v76 = v20;
    swift_bridgeObjectRetain();
    v73 = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v81 = v22;
    swift_bridgeObjectRetain();
    v23 = sub_1A39A2734(v79, v77);
    LOBYTE(v21) = v24;
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
      v59 = v71;
      v58 = v13;
      v60 = v16;
      v54 = v15;
      goto LABEL_89;
    }
    v25 = *(_QWORD *)(a2 + 56) + 88 * v23;
    v26 = *(_QWORD *)v25;
    v27 = *(_QWORD *)(v25 + 8);
    v29 = *(_QWORD *)(v25 + 16);
    v28 = *(_QWORD *)(v25 + 24);
    v78 = *(_QWORD *)(v25 + 32);
    v80 = *(_QWORD *)(v25 + 40);
    v30 = *(_QWORD *)(v25 + 64);
    v70 = *(_QWORD *)(v25 + 56);
    v31 = *(_QWORD *)(v25 + 72);
    v32 = *(_QWORD *)(v25 + 80);
    v69 = *(_BYTE *)(v25 + 48);
    v75 = *(_QWORD *)v25;
    if ((v69 & 1) != 0)
    {
      v34 = v71;
      v33 = v72;
      if ((v74 & 1) == 0)
      {
        v58 = v72;
        v59 = v71;
        v60 = v16;
        goto LABEL_100;
      }
      if (v26 != v72 || v27 != v71)
      {
        v36 = sub_1A3AB5654();
        v26 = v75;
        if ((v36 & 1) == 0)
        {
          v58 = v72;
          v59 = v71;
          v60 = v16;
LABEL_102:
          v54 = v15;
          v55 = v67;
          v56 = v68;
          v57 = 1;
          goto LABEL_90;
        }
      }
    }
    else
    {
      v34 = v71;
      v33 = v72;
      if ((v74 & 1) != 0)
      {
        v58 = v72;
        v59 = v71;
        v60 = v16;
        goto LABEL_102;
      }
      if (v26 != v72 || v27 != v71)
      {
        v38 = sub_1A3AB5654();
        v26 = v75;
        if ((v38 & 1) == 0)
          goto LABEL_98;
      }
      v39 = v29 == v16 && v28 == v15;
      if (!v39 && (v40 = sub_1A3AB5654(), v26 = v75, (v40 & 1) == 0)
        || (v78 == v67 ? (v41 = v80 == v68) : (v41 = 0), !v41 && (v42 = sub_1A3AB5654(), v26 = v75, (v42 & 1) == 0)))
      {
LABEL_98:
        v58 = v72;
        v59 = v71;
        v60 = v16;
LABEL_100:
        v54 = v15;
        v55 = v67;
        v56 = v68;
        v57 = 0;
        goto LABEL_90;
      }
    }
    sub_1A39A5070(v26, v27, v29, v28, v78, v80, v69);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((sub_1A3A66654(v70, v76, &qword_1EE6D38B0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_1A39A50A8, (uint64_t (*)(_BYTE *, _BYTE *))sub_1A3A673D8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A3A18890) & 1) == 0)
    {
      sub_1A3A18908(v75, v27, v29, v28, v78, v80, v69);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A3A18908(v33, v34, v16, v15, v67, v68, v74);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_91;
    }
    if ((sub_1A3A66654(v30, v73, &qword_1EE6D38B8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_1A39A50B0, (uint64_t (*)(_BYTE *, _BYTE *))sub_1A3A66FB0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A3A189E4) & 1) == 0)
    {
      sub_1A3A18908(v75, v27, v29, v28, v78, v80, v69);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v58 = v33;
      goto LABEL_97;
    }
    v43 = *(_QWORD *)(v31 + 16);
    if (v43 != *(_QWORD *)(v82 + 16))
    {
      sub_1A3A18908(v75, v27, v29, v28, v78, v80, v69);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v58 = v72;
LABEL_97:
      v59 = v34;
LABEL_88:
      v60 = v16;
      v54 = v15;
LABEL_89:
      v55 = v67;
      v56 = v68;
      v57 = v74;
LABEL_90:
      sub_1A3A18908(v58, v59, v60, v54, v55, v56, v57);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_91:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    if (v43)
      v44 = v31 == v82;
    else
      v44 = 1;
    if (!v44)
    {
      v50 = 0;
      do
      {
        v51 = *(_QWORD *)(v31 + v50 + 40);
        v52 = *(_QWORD *)(v82 + v50 + 40);
        if (v51)
        {
          if (v51 == 1)
          {
            if (v52 != 1)
              goto LABEL_87;
          }
          else
          {
            if (v52 < 2)
              goto LABEL_87;
            v53 = *(_QWORD *)(v31 + v50 + 32) == *(_QWORD *)(v82 + v50 + 32) && v51 == v52;
            if (!v53 && (sub_1A3AB5654() & 1) == 0)
              goto LABEL_87;
          }
        }
        else if (v52)
        {
          goto LABEL_87;
        }
        v50 += 16;
        --v43;
      }
      while (v43);
    }
    v45 = *(_QWORD *)(v32 + 16);
    if (v45 != *(_QWORD *)(v81 + 16))
    {
LABEL_87:
      sub_1A3A18908(v75, v27, v29, v28, v78, v80, v69);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v59 = v71;
      v58 = v72;
      goto LABEL_88;
    }
    if (v45 && v32 != v81)
    {
      v46 = 0;
      do
      {
        v47 = *(_QWORD *)(v32 + v46 + 40);
        v48 = *(_QWORD *)(v81 + v46 + 40);
        if (v47)
        {
          if (v47 == 1)
          {
            if (v48 != 1)
              goto LABEL_87;
          }
          else
          {
            if (v48 < 2)
              goto LABEL_87;
            v49 = *(_QWORD *)(v32 + v46 + 32) == *(_QWORD *)(v81 + v46 + 32) && v47 == v48;
            if (!v49 && (sub_1A3AB5654() & 1) == 0)
              goto LABEL_87;
          }
        }
        else if (v48)
        {
          goto LABEL_87;
        }
        v46 += 16;
        --v45;
      }
      while (v45);
    }
    sub_1A3A18908(v75, v27, v29, v28, v78, v80, v69);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1A3A18908(v72, v71, v16, v15, v67, v68, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = v61;
    v5 = v64;
    v2 = v65;
    if (v64)
      goto LABEL_6;
LABEL_7:
    v7 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_104;
    }
    if (v7 >= v63)
      return 1;
    v8 = *(_QWORD *)(v62 + 8 * v7);
    v9 = v2 + 1;
    if (!v8)
    {
      v9 = v7 + 1;
      if (v7 + 1 >= v63)
        return 1;
      v8 = *(_QWORD *)(v62 + 8 * v9);
      if (!v8)
      {
        v9 = v7 + 2;
        if (v7 + 2 >= v63)
          return 1;
        v8 = *(_QWORD *)(v62 + 8 * v9);
        if (!v8)
          break;
      }
    }
LABEL_20:
    v64 = (v8 - 1) & v8;
    v65 = v9;
  }
  v10 = v7 + 3;
  if (v10 >= v63)
    return 1;
  v8 = *(_QWORD *)(v62 + 8 * v10);
  if (v8)
  {
    v9 = v10;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v9 >= v63)
      return 1;
    v8 = *(_QWORD *)(v62 + 8 * v9);
    ++v10;
    if (v8)
      goto LABEL_20;
  }
LABEL_104:
  __break(1u);
  return result;
}

uint64_t sub_1A3A664C0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  char v21;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_DWORD *)(*(_QWORD *)(v3 + 56) + 4 * v11);
    swift_bridgeObjectRetain();
    v19 = sub_1A39A2734(v16, v17);
    v21 = v20;
    result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v19) != v18)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1A3A66654(uint64_t result, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t), uint64_t (*a5)(_BYTE *, _BYTE *), void (*a6)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))
{
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v37;
  int64_t v38;
  _QWORD v39[4];
  int v40;
  __int16 v41;
  _BYTE v42[40];
  _BYTE v43[48];

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v7 = 0;
  v31 = result + 64;
  v8 = 1 << *(_BYTE *)(result + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(result + 64);
  v32 = (unint64_t)(v8 + 63) >> 6;
  v33 = result;
  while (1)
  {
    if (v10)
    {
      v37 = (v10 - 1) & v10;
      v38 = v7;
      v12 = __clz(__rbit64(v10)) | (v7 << 6);
      goto LABEL_22;
    }
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v13 >= v32)
      return 1;
    v14 = *(_QWORD *)(v31 + 8 * v13);
    v15 = v7 + 1;
    if (!v14)
    {
      v15 = v13 + 1;
      if (v13 + 1 >= v32)
        return 1;
      v14 = *(_QWORD *)(v31 + 8 * v15);
      if (!v14)
      {
        v15 = v13 + 2;
        if (v13 + 2 >= v32)
          return 1;
        v14 = *(_QWORD *)(v31 + 8 * v15);
        if (!v14)
          break;
      }
    }
LABEL_21:
    v37 = (v14 - 1) & v14;
    v38 = v15;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_22:
    v17 = *(_DWORD *)(*(_QWORD *)(result + 48) + 4 * v12);
    v18 = *(_QWORD *)(result + 56) + 40 * v12;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v22 = *(_QWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 24);
    v23 = *(unsigned __int8 *)(v18 + 36);
    v24 = *(unsigned int *)(v18 + 32);
    v25 = v24 | (v23 << 32);
    v26 = *(unsigned __int8 *)(v18 + 37);
    v27 = 0x10000000000;
    if (!(_DWORD)v26)
      v27 = 0;
    v39[0] = v19;
    v39[1] = v20;
    v39[2] = v22;
    v39[3] = v21;
    v40 = v24;
    v41 = (v27 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v23 << 32)) >> 32;
    sub_1A39FEDA0((uint64_t)v39, (uint64_t)v43, a3);
    v28 = sub_1A39A4DEC(v17);
    if ((v29 & 1) == 0)
    {
      a4(v19, v20, v22, v21, v25, v26);
      sub_1A3A1895C((uint64_t)v43, a6);
      return 0;
    }
    sub_1A39FEDA0(*(_QWORD *)(a2 + 56) + 40 * v28, (uint64_t)v42, a3);
    a4(v19, v20, v22, v21, v25, v26);
    sub_1A3A1895C((uint64_t)v42, a4);
    v30 = a5(v42, v43);
    sub_1A3A1895C((uint64_t)v42, a6);
    sub_1A3A1895C((uint64_t)v43, a6);
    result = v33;
    v10 = v37;
    v7 = v38;
    if ((v30 & 1) == 0)
      return 0;
  }
  v16 = v13 + 3;
  if (v16 >= v32)
    return 1;
  v14 = *(_QWORD *)(v31 + 8 * v16);
  if (v14)
  {
    v15 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v32)
      return 1;
    v14 = *(_QWORD *)(v31 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_21;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1A3A66914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  BOOL v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v7 = 1;
    }
    else
    {
      v3 = (uint64_t *)(a1 + 32);
      v4 = a2 + 32;
      v5 = v2 - 1;
      do
      {
        v6 = *v3++;
        v4 += 8;
        v11 = v6;
        _s12TextToSpeech14TTSAudioEffectO4SpecV7ControlO2eeoiySbAG_AGtFZ_0((uint64_t)&v11);
        v9 = v5-- != 0;
      }
      while ((v7 & 1) != 0 && v9);
    }
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

uint64_t sub_1A3A669A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a1 + 40);
    v4 = (unint64_t *)(a2 + 40);
    do
    {
      v5 = *v3;
      v6 = *v4;
      if (*v3)
      {
        if (v5 == 1)
        {
          if (v6 != 1)
            return 0;
        }
        else
        {
          if (v6 < 2)
            return 0;
          v7 = *(v3 - 1) == *(v4 - 1) && v5 == v6;
          if (!v7 && (sub_1A3AB5654() & 1) == 0)
            return 0;
        }
      }
      else if (v6)
      {
        return 0;
      }
      v3 += 2;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_1A3A66A50()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A66A78 + 4 * byte_1A3AC7510[*v0]))(1701869940, 0xE400000000000000);
}

uint64_t sub_1A3A66A78()
{
  return 0x6574656D61726170;
}

uint64_t sub_1A3A66A98()
{
  return 0x69747265706F7270;
}

uint64_t sub_1A3A66AB4()
{
  return 0x737475706E69;
}

uint64_t sub_1A3A66AC8()
{
  return 0x7374757074756FLL;
}

uint64_t sub_1A3A66AE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A6DDEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A66B04()
{
  sub_1A3A6DC18();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A66B2C()
{
  sub_1A3A6DC18();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A66B54(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  _QWORD v12[7];
  __int128 v13[3];

  v3 = v1;
  v5 = sub_1A39A4820(&qword_1EE6D43B0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A6DC18();
  sub_1A3AB5780();
  sub_1A3A6D058((__int128 *)v3, (uint64_t)v13);
  sub_1A3A6D058(v13, (uint64_t)v12);
  v11 = 0;
  sub_1A3A6DC5C();
  sub_1A3AB55DC();
  if (!v2)
  {
    v12[0] = *(_QWORD *)(v3 + 56);
    v11 = 1;
    sub_1A39A4820(&qword_1EE6D43C0);
    sub_1A3A6DCA0();
    sub_1A3AB55DC();
    v12[0] = *(_QWORD *)(v3 + 64);
    v11 = 2;
    sub_1A39A4820(&qword_1EE6D43D8);
    sub_1A3A6DD24();
    sub_1A3AB55DC();
    v12[0] = *(_QWORD *)(v3 + 72);
    v11 = 3;
    sub_1A39A4820(&qword_1EE6D43F0);
    sub_1A3A0E78C(&qword_1EE6D43F8, &qword_1EE6D43F0, (uint64_t (*)(void))sub_1A3A6DDA8, MEMORY[0x1E0DEAF10]);
    sub_1A3AB55DC();
    v12[0] = *(_QWORD *)(v3 + 80);
    v11 = 4;
    sub_1A3AB55DC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double sub_1A3A66DA8@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v11;
  double result;
  __int128 v13;
  __int128 v14;
  _OWORD v15[3];
  char v16;

  sub_1A3A6D058(a1, (uint64_t)v15);
  v11 = v16;
  result = *(double *)v15;
  v13 = v15[1];
  v14 = v15[2];
  *(_OWORD *)a6 = v15[0];
  *(_OWORD *)(a6 + 16) = v13;
  *(_OWORD *)(a6 + 32) = v14;
  *(_BYTE *)(a6 + 48) = v11;
  *(_QWORD *)(a6 + 56) = a2;
  *(_QWORD *)(a6 + 64) = a3;
  *(_QWORD *)(a6 + 72) = a4;
  *(_QWORD *)(a6 + 80) = a5;
  return result;
}

double sub_1A3A66E14@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  uint64_t v8;

  sub_1A3A6E000(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_QWORD *)(a2 + 80) = v8;
    result = *(double *)v7;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1A3A66E6C(_QWORD *a1)
{
  return sub_1A3A66B54(a1);
}

uint64_t sub_1A3A66EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v14[3];
  __int128 v15[3];

  sub_1A3A6D058((__int128 *)a1, (uint64_t)v14);
  v5 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  sub_1A3A6D058((__int128 *)a2, (uint64_t)v15);
  v9 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 80);
  if ((sub_1A3A6CEBC(v14, v15) & 1) != 0
    && (sub_1A3A66654(v5, v9, &qword_1EE6D38B0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_1A39A50A8, (uint64_t (*)(_BYTE *, _BYTE *))sub_1A3A673D8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A3A18890) & 1) != 0&& (sub_1A3A66654(v4, v8, &qword_1EE6D38B8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_1A39A50B0, (uint64_t (*)(_BYTE *, _BYTE *))sub_1A3A66FB0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A3A189E4) & 1) != 0&& (sub_1A3A669A0(v7, v11) & 1) != 0)
  {
    v12 = sub_1A3A669A0(v6, v10);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

BOOL sub_1A3A66FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;
  int v15;
  int v16;
  _BOOL8 result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  int v23;
  int v24;
  int v25;
  char v26;
  int v27;
  int v28;
  int v29;
  int v30;
  char v31;
  _QWORD v32[2];
  int v33;
  char v34;
  int v35;
  char v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned __int8 v42;
  int v43;
  unsigned __int8 v44;
  int v45;
  unsigned __int8 v46;
  _QWORD v47[2];
  uint64_t v48;
  _QWORD v49[2];
  uint64_t v50;
  _BYTE v51[37];
  char v52;
  _BYTE v53[48];

  sub_1A39FEDA0(a2, (uint64_t)v49, &qword_1EE6D38B8);
  v5 = v49[0];
  v4 = v49[1];
  v30 = v50;
  sub_1A39FEDA0(a1, (uint64_t)v47, &qword_1EE6D38B8);
  v7 = v47[0];
  v6 = v47[1];
  v28 = v48;
  sub_1A39FEDA0(a2, (uint64_t)&v39, &qword_1EE6D38B8);
  sub_1A39FEDA0(a1, (uint64_t)v53, &qword_1EE6D38B8);
  if ((v53[37] & 1) != 0)
  {
    sub_1A39FEDA0(a1, (uint64_t)v32, &qword_1EE6D38B8);
    v9 = v32[0];
    v8 = v32[1];
    sub_1A39FEDA0(a2, (uint64_t)v51, &qword_1EE6D38B8);
    if ((v52 & 1) != 0)
    {
      v10 = v9;
      v11 = v40;
      v12 = v33;
      v13 = v34;
      v14 = v37;
      v15 = v41;
      v16 = v42;
      if (v8)
      {
        if (v40)
        {
          v26 = v38;
          v27 = v46;
          v23 = v45;
          v25 = v35;
          v29 = v44;
          v24 = v43;
          v31 = v36;
          if (v10 == v39 && v8 == v40)
          {
            sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
            sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
            sub_1A3A1895C(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A3A189E4);
          }
          else
          {
            v22 = sub_1A3AB5654();
            sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
            sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
            sub_1A3A1895C(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A3A189E4);
            if ((v22 & 1) == 0)
              return 0;
          }
          goto LABEL_23;
        }
        sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
        sub_1A3A1895C(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
      }
      else
      {
        v31 = v36;
        v24 = v43;
        v29 = v44;
        v25 = v35;
        v26 = v38;
        v23 = v45;
        v27 = v46;
        sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
        sub_1A3A1895C(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
        if (!v11)
        {
LABEL_23:
          if ((v13 & 1) != 0)
          {
            if (!v16)
              return 0;
          }
          else
          {
            if (v12 == v15)
              v19 = v16;
            else
              v19 = 1;
            if ((v19 & 1) != 0)
              return 0;
          }
          if ((v31 & 1) != 0)
          {
            if (!v29)
              return 0;
          }
          else
          {
            v20 = v29;
            if (v25 != v24)
              v20 = 1;
            if ((v20 & 1) != 0)
              return 0;
          }
          v21 = v27;
          if ((v26 & 1) == 0)
          {
            if (v14 != v23)
              v21 = 1;
            return (v21 & 1) == 0;
          }
          return v27 != 0;
        }
      }
      swift_bridgeObjectRelease();
      return 0;
    }
    sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
    sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
    sub_1A3A1895C(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
    swift_bridgeObjectRelease();
LABEL_11:
    sub_1A3A18890();
    sub_1A3A18890();
    return 0;
  }
  sub_1A39FEDA0(a2, (uint64_t)v51, &qword_1EE6D38B8);
  if ((v52 & 1) != 0)
  {
    sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
    sub_1A3A1895C(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
    goto LABEL_11;
  }
  if (v7 == v5 && v6 == v4)
    return v28 == v30;
  v18 = sub_1A3AB5654();
  result = 0;
  if ((v18 & 1) != 0)
    return v28 == v30;
  return result;
}

BOOL sub_1A3A673D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  char v13;
  float v14;
  char v15;
  float v16;
  char v17;
  float v18;
  int v19;
  float v20;
  float v21;
  int v22;
  _BOOL8 result;
  char v24;
  char v25;
  char v26;
  char v27;
  int v28;
  char v29;
  int v30;
  int v31;
  _QWORD v32[2];
  float v33;
  char v34;
  float v35;
  char v36;
  float v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  unsigned __int8 v42;
  float v43;
  unsigned __int8 v44;
  float v45;
  unsigned __int8 v46;
  _QWORD v47[2];
  uint64_t v48;
  _QWORD v49[2];
  uint64_t v50;
  _BYTE v51[37];
  char v52;
  _BYTE v53[48];

  sub_1A39FEDA0(a2, (uint64_t)v49, &qword_1EE6D38B0);
  v5 = v49[0];
  v4 = v49[1];
  v30 = v50;
  sub_1A39FEDA0(a1, (uint64_t)v47, &qword_1EE6D38B0);
  v7 = v47[0];
  v6 = v47[1];
  v28 = v48;
  sub_1A39FEDA0(a2, (uint64_t)&v39, &qword_1EE6D38B0);
  sub_1A39FEDA0(a1, (uint64_t)v53, &qword_1EE6D38B0);
  if ((v53[37] & 1) != 0)
  {
    sub_1A39FEDA0(a1, (uint64_t)v32, &qword_1EE6D38B0);
    v9 = v32[0];
    v8 = v32[1];
    sub_1A39FEDA0(a2, (uint64_t)v51, &qword_1EE6D38B0);
    if ((v52 & 1) != 0)
    {
      v10 = v9;
      v11 = v40;
      v12 = v33;
      v13 = v34;
      v14 = v35;
      v15 = v36;
      v16 = v37;
      v17 = v38;
      v18 = v41;
      v19 = v42;
      v20 = v43;
      v21 = v45;
      v22 = v46;
      if (v8)
      {
        if (v40)
        {
          v31 = v44;
          if (v10 == v39 && v8 == v40)
          {
            sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
            sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
            sub_1A3A1895C(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A3A18890);
          }
          else
          {
            v29 = sub_1A3AB5654();
            sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
            sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
            sub_1A3A1895C(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A3A18890);
            if ((v29 & 1) == 0)
              return 0;
          }
          goto LABEL_23;
        }
        sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
        sub_1A3A1895C(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
      }
      else
      {
        v31 = v44;
        sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
        sub_1A3A1895C(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
        if (!v11)
        {
LABEL_23:
          if ((v13 & 1) != 0)
          {
            if (!v19)
              return 0;
          }
          else
          {
            if (v12 == v18)
              v25 = v19;
            else
              v25 = 1;
            if ((v25 & 1) != 0)
              return 0;
          }
          if ((v15 & 1) != 0)
          {
            if (!v31)
              return 0;
          }
          else
          {
            v26 = v31;
            if (v14 != v20)
              v26 = 1;
            if ((v26 & 1) != 0)
              return 0;
          }
          if ((v17 & 1) == 0)
          {
            if (v16 == v21)
              v27 = v22;
            else
              v27 = 1;
            return (v27 & 1) == 0;
          }
          return v22 != 0;
        }
      }
      swift_bridgeObjectRelease();
      return 0;
    }
    sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
    sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
    sub_1A3A1895C(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
    swift_bridgeObjectRelease();
LABEL_11:
    sub_1A3A18890();
    sub_1A3A18890();
    return 0;
  }
  sub_1A39FEDA0(a2, (uint64_t)v51, &qword_1EE6D38B0);
  if ((v52 & 1) != 0)
  {
    sub_1A3A1895C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
    sub_1A3A1895C(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
    goto LABEL_11;
  }
  if (v7 == v5 && v6 == v4)
    return v28 == v30;
  v24 = sub_1A3AB5654();
  result = 0;
  if ((v24 & 1) != 0)
    return v28 == v30;
  return result;
}

BOOL static TTSAudioEffect.Spec.GenericWire.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  int *TupleTypeMetadata;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  _BOOL8 v69;
  void (**v70)(_QWORD, uint64_t);
  void (*v71)(char *, uint64_t);
  int v72;
  char v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  char *v76;
  void (*v77)(void);
  char *v78;
  unsigned int (*v79)(_QWORD, _QWORD, _QWORD);
  char *v80;
  void (*v81)(char *, uint64_t);
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char v87;
  void (*v88)(char *, uint64_t);
  char *v89;
  char *v90;
  unsigned int (*v91)(_QWORD, _QWORD, _QWORD);
  uint64_t v92;
  uint64_t v94;
  char *v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  unsigned int (*v102)(char *, uint64_t, uint64_t);
  char *v103;
  uint64_t v104;
  char *v105;
  char v106;
  void (*v107)(char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t TupleTypeMetadata2;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  void (**v130)(_QWORD, uint64_t);
  unsigned int (*v131)(_QWORD, _QWORD, _QWORD);
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v122 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v118 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A3AB50FC();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v120 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v115 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v125 = (char *)&v108 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v121 = (char *)&v108 - v15;
  v134 = *(char **)(v9 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v114 = (char *)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v116 = (char *)&v108 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v119 = (char *)&v108 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v132 = (char *)&v108 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v126 = (char *)&v108 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v127 = (char *)&v108 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v129 = (char *)&v108 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v133 = (char *)&v108 - v31;
  MEMORY[0x1E0C80A78](v30);
  v128 = (char *)&v108 - v32;
  v124 = a3;
  v117 = a4;
  v34 = type metadata accessor for TTSAudioEffect.Spec.GenericWire(0, a3, a4, v33);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = MEMORY[0x1E0C80A78](v34);
  v38 = (uint64_t *)((char *)&v108 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v36);
  v40 = (char *)&v108 - v39;
  v41 = swift_getTupleTypeMetadata2();
  v131 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v41 - 8);
  v42 = MEMORY[0x1E0C80A78](v41);
  v44 = (char *)&v108 - v43;
  v45 = (char *)&v108 + *(int *)(v42 + 48) - v43;
  v130 = (void (**)(_QWORD, uint64_t))v35;
  v46 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
  v46((char *)&v108 - v43, a1, v34);
  v46(v45, a2, v34);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v113 = v44;
    v47 = ((uint64_t (*)(uint64_t *, char *, uint64_t))v46)(v38, v44, v34);
    v111 = *v38;
    v112 = v38[1];
    MEMORY[0x1E0C80A78](v47);
    strcpy((char *)&v108 - 32, "id  min max ");
    v135 = sub_1A39AB624(&qword_1EE6D09C0);
    v136 = v9;
    v137 = v9;
    v138 = v9;
    TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
    v49 = TupleTypeMetadata[12];
    v50 = (char *)v38 + v49;
    v51 = TupleTypeMetadata[16];
    v52 = (char *)v38 + v51;
    v53 = TupleTypeMetadata[20];
    v54 = (char *)v38 + v53;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v131 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v34;
      v109 = *(_QWORD *)v45;
      v110 = *((_QWORD *)v45 + 1);
      v55 = &v45[v51];
      v56 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v134 + 4);
      v57 = v128;
      v56(v128, v50, v9);
      v56(v133, v52, v9);
      v58 = v129;
      v56(v129, v54, v9);
      v59 = v127;
      v56(v127, &v45[v49], v9);
      v60 = v126;
      v56(v126, v55, v9);
      v56(v132, &v45[v53], v9);
      v61 = v9;
      if (v112)
      {
        v62 = v124;
        v63 = v125;
        if (v110)
        {
          v64 = v113;
          v34 = (uint64_t)v131;
          if (v111 == v109 && v112 == v110)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_23;
          }
          v75 = v125;
          LODWORD(v111) = sub_1A3AB5654();
          v63 = v75;
          v60 = v126;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v111 & 1) != 0)
          {
LABEL_23:
            v76 = &v121[*(int *)(TupleTypeMetadata2 + 48)];
            v77 = (void (*)(void))*((_QWORD *)v134 + 2);
            v78 = v121;
            v77();
            ((void (*)(char *, char *, uint64_t))v77)(v76, v59, v61);
            v79 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v122 + 48);
            if (v79(v78, 1, v62) == 1)
            {
              if (v79(v76, 1, v62) == 1)
              {
                v131 = v79;
                v80 = v78;
                v81 = (void (*)(char *, uint64_t))*((_QWORD *)v134 + 1);
                v81(v80, v61);
LABEL_30:
                v90 = &v63[*(int *)(TupleTypeMetadata2 + 48)];
                ((void (*)(char *, char *, uint64_t))v77)(v63, v133, v61);
                ((void (*)(char *, char *, uint64_t))v77)(v90, v60, v61);
                v91 = v131;
                if (v131(v63, 1, v62) == 1)
                {
                  if (v91(v90, 1, v62) == 1)
                  {
                    v131 = v91;
                    v81(v63, v61);
                    v92 = v62;
LABEL_42:
                    v98 = v115;
                    v99 = &v115[*(int *)(TupleTypeMetadata2 + 48)];
                    v100 = v129;
                    ((void (*)(char *, char *, uint64_t))v77)(v115, v129, v61);
                    v134 = v99;
                    v101 = v132;
                    ((void (*)(char *, char *, uint64_t))v77)(v99, v132, v61);
                    v102 = (unsigned int (*)(char *, uint64_t, uint64_t))v131;
                    if (v131(v98, 1, v92) == 1)
                    {
                      v81(v101, v61);
                      v81(v126, v61);
                      v81(v127, v61);
                      v81(v100, v61);
                      v81(v133, v61);
                      v81(v128, v61);
                      if (v102(v134, 1, v92) == 1)
                      {
                        v81(v115, v61);
LABEL_49:
                        v69 = 1;
                        goto LABEL_39;
                      }
                      goto LABEL_47;
                    }
                    v103 = v114;
                    ((void (*)(char *, char *, uint64_t))v77)(v114, v98, v61);
                    if (v102(v134, 1, v92) == 1)
                    {
                      v81(v132, v61);
                      v81(v126, v61);
                      v81(v127, v61);
                      v81(v129, v61);
                      v81(v133, v61);
                      v81(v128, v61);
                      (*(void (**)(char *, uint64_t))(v122 + 8))(v103, v92);
LABEL_47:
                      (*(void (**)(char *, uint64_t))(v120 + 8))(v115, TupleTypeMetadata2);
                      goto LABEL_38;
                    }
                    v104 = v122;
                    v105 = v118;
                    (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v118, v134, v92);
                    v106 = sub_1A3AB494C();
                    v107 = *(void (**)(char *, uint64_t))(v104 + 8);
                    v107(v105, v92);
                    v81(v132, v61);
                    v81(v126, v61);
                    v81(v127, v61);
                    v81(v129, v61);
                    v81(v133, v61);
                    v81(v128, v61);
                    v107(v114, v92);
                    v81(v98, v61);
                    if ((v106 & 1) != 0)
                      goto LABEL_49;
LABEL_38:
                    v69 = 0;
LABEL_39:
                    v70 = v130;
                    goto LABEL_40;
                  }
                }
                else
                {
                  ((void (*)(char *, char *, uint64_t))v77)(v116, v63, v61);
                  if (v91(v90, 1, v62) != 1)
                  {
                    v131 = v91;
                    v94 = v122;
                    v95 = v118;
                    (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v118, v90, v62);
                    v96 = v116;
                    LODWORD(v134) = sub_1A3AB494C();
                    v97 = *(void (**)(char *, uint64_t))(v94 + 8);
                    v97(v95, v62);
                    v97(v96, v62);
                    v60 = v126;
                    v81(v125, v61);
                    v92 = v62;
                    if ((v134 & 1) != 0)
                      goto LABEL_42;
                    goto LABEL_36;
                  }
                  (*(void (**)(char *, uint64_t))(v122 + 8))(v116, v62);
                }
                (*(void (**)(char *, uint64_t))(v120 + 8))(v63, TupleTypeMetadata2);
LABEL_36:
                v81(v132, v61);
                goto LABEL_37;
              }
            }
            else
            {
              v82 = v119;
              ((void (*)(char *, char *, uint64_t))v77)(v119, v78, v61);
              if (v79(v76, 1, v62) != 1)
              {
                v131 = v79;
                v83 = v78;
                v84 = v122;
                v85 = v82;
                v86 = v118;
                (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v118, v76, v62);
                v87 = sub_1A3AB494C();
                v88 = *(void (**)(char *, uint64_t))(v84 + 8);
                v89 = v86;
                v63 = v125;
                v88(v89, v62);
                v88(v85, v62);
                v60 = v126;
                v81 = (void (*)(char *, uint64_t))*((_QWORD *)v134 + 1);
                v81(v83, v61);
                if ((v87 & 1) == 0)
                  goto LABEL_36;
                goto LABEL_30;
              }
              (*(void (**)(char *, uint64_t))(v122 + 8))(v82, v62);
            }
            (*(void (**)(char *, uint64_t))(v120 + 8))(v78, TupleTypeMetadata2);
            v81 = (void (*)(char *, uint64_t))*((_QWORD *)v134 + 1);
            v81(v132, v61);
LABEL_37:
            v81(v60, v61);
            v81(v127, v61);
            v81(v129, v61);
            v81(v133, v61);
            v81(v128, v61);
            goto LABEL_38;
          }
LABEL_21:
          v74 = (void (*)(char *, uint64_t))*((_QWORD *)v134 + 1);
          v74(v132, v61);
          v74(v60, v61);
          v74(v59, v61);
          v74(v58, v61);
          v74(v133, v61);
          v74(v57, v61);
          goto LABEL_38;
        }
        v64 = v113;
        v34 = (uint64_t)v131;
      }
      else
      {
        v64 = v113;
        v34 = (uint64_t)v131;
        v62 = v124;
        v63 = v125;
        if (!v110)
          goto LABEL_23;
      }
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
    v71 = (void (*)(char *, uint64_t))*((_QWORD *)v134 + 1);
    v71(v54, v9);
    v71(v52, v9);
    v71(v50, v9);
    v69 = 0;
    v70 = (void (**)(_QWORD, uint64_t))v131;
    v34 = v41;
    v64 = v113;
  }
  else
  {
    v65 = v44;
    v46(v40, (uint64_t)v44, v34);
    v67 = *(_QWORD *)v40;
    v66 = *((_QWORD *)v40 + 1);
    v68 = *((_DWORD *)v40 + 4);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_bridgeObjectRelease();
      v69 = 0;
      v70 = (void (**)(_QWORD, uint64_t))v131;
      v34 = v41;
      v64 = v65;
    }
    else
    {
      v72 = *((_DWORD *)v45 + 4);
      if (v67 == *(_QWORD *)v45 && v66 == *((_QWORD *)v45 + 1))
      {
        swift_bridgeObjectRelease_n();
        v70 = v130;
      }
      else
      {
        v73 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v70 = v130;
        if ((v73 & 1) == 0)
        {
          v69 = 0;
          v64 = v65;
          goto LABEL_40;
        }
      }
      v69 = v68 == v72;
      v64 = v65;
    }
  }
LABEL_40:
  ((void (**)(char *, uint64_t))v70)[1](v64, v34);
  return v69;
}

uint64_t sub_1A3A68440(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D61726170 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A3A68518(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6D61726170;
  else
    return 1701667182;
}

BOOL sub_1A3A68544(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_1A3A68554()
{
  return sub_1A3AB5708();
}

uint64_t sub_1A3A68578(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7892834 && a2 == 0xE300000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A3A68650()
{
  sub_1A3AB56FC();
  sub_1A3AB5708();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A68694(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65756C6176;
  else
    return 7892834;
}

BOOL sub_1A3A686C0(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_1A3A686D0()
{
  return sub_1A3AB5708();
}

uint64_t sub_1A3A686F4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7235949 && a2 == 0xE300000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7889261 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1A3A6885C()
{
  sub_1A3AB56FC();
  sub_1A3AB5708();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A688A0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A688C8 + 4 * byte_1A3AC7515[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_1A3A688C8()
{
  return 12639;
}

uint64_t sub_1A3A688D0()
{
  return 7235949;
}

uint64_t sub_1A3A688E0()
{
  return 7889261;
}

uint64_t sub_1A3A688F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A3A689BC(a1, a2, a3, (void (*)(_BYTE *, _QWORD))sub_1A3A68554);
}

uint64_t sub_1A3A688FC()
{
  char *v0;

  return sub_1A3A68518(*v0);
}

uint64_t sub_1A3A68904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A68440(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A68928(uint64_t a1)
{
  MEMORY[0x1A8597738](&unk_1A3AC88AC, a1);
  return sub_1A3AB578C();
}

uint64_t sub_1A3A6895C(uint64_t a1)
{
  MEMORY[0x1A8597738](&unk_1A3AC88AC, a1);
  return sub_1A3AB5798();
}

BOOL sub_1A3A68990(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1A3A68544(*a1, *a2);
}

uint64_t sub_1A3A6899C()
{
  return sub_1A3A68650();
}

uint64_t sub_1A3A689B4()
{
  return sub_1A3A68554();
}

uint64_t sub_1A3A689BC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, _QWORD))
{
  unsigned __int8 *v4;
  _BYTE v7[72];

  sub_1A3AB56FC();
  a4(v7, *v4);
  return sub_1A3AB5738();
}

uint64_t sub_1A3A689FC()
{
  char *v0;

  return sub_1A3A68694(*v0);
}

uint64_t sub_1A3A68A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A68578(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A68A28(uint64_t a1)
{
  MEMORY[0x1A8597738](&unk_1A3AC885C, a1);
  return sub_1A3AB578C();
}

uint64_t sub_1A3A68A5C(uint64_t a1)
{
  MEMORY[0x1A8597738](&unk_1A3AC885C, a1);
  return sub_1A3AB5798();
}

BOOL sub_1A3A68A90(char *a1, char *a2)
{
  return sub_1A3A686C0(*a1, *a2);
}

uint64_t sub_1A3A68A9C()
{
  return sub_1A3A6885C();
}

uint64_t sub_1A3A68AA4()
{
  return sub_1A3A686D0();
}

uint64_t sub_1A3A68AAC()
{
  sub_1A3AB56FC();
  sub_1A3A686D0();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A68AE8()
{
  unsigned __int8 *v0;

  return sub_1A3A688A0(*v0);
}

uint64_t sub_1A3A68AF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A686F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A68B14(uint64_t a1)
{
  MEMORY[0x1A8597738](&unk_1A3AC88FC, a1);
  return sub_1A3AB578C();
}

uint64_t sub_1A3A68B48(uint64_t a1)
{
  MEMORY[0x1A8597738](&unk_1A3AC88FC, a1);
  return sub_1A3AB5798();
}

uint64_t TTSAudioEffect.Spec.GenericWire.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t EnumCaseMultiPayload;
  uint64_t v27;
  uint64_t v28;
  int *TupleTypeMetadata;
  char *v30;
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v8 = _s4SpecV11GenericWireO15ValueCodingKeysOMa(255, v7, v6, a4);
  v64 = MEMORY[0x1A8597738](&unk_1A3AC88FC, v8);
  v65 = v8;
  v78 = sub_1A3AB5600();
  v55 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78);
  v73 = (char *)v54 - v9;
  v63 = sub_1A3AB50FC();
  v67 = *(_QWORD *)(v63 - 8);
  v10 = MEMORY[0x1E0C80A78](v63);
  v68 = (char *)v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v62 = (char *)v54 - v13;
  MEMORY[0x1E0C80A78](v12);
  v61 = (char *)v54 - v14;
  v16 = _s4SpecV11GenericWireO13BoxCodingKeysOMa(255, v7, v6, v15);
  v57 = MEMORY[0x1A8597738](&unk_1A3AC88AC, v16);
  v58 = v16;
  v60 = sub_1A3AB5600();
  v56 = *(_QWORD *)(v60 - 8);
  v17 = MEMORY[0x1E0C80A78](v60);
  v59 = (char *)v54 - v18;
  v19 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54[1] = v7;
  v54[0] = v6;
  v23 = _s4SpecV11GenericWireO10CodingKeysOMa(255, v7, v6, v22);
  MEMORY[0x1A8597738](&unk_1A3AC885C, v23);
  v72 = sub_1A3AB5600();
  v66 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v25 = (char *)v54 - v24;
  sub_1A39A19CC(a1, a1[3]);
  v69 = v25;
  sub_1A3AB5780();
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v71, a2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    MEMORY[0x1E0C80A78](EnumCaseMultiPayload);
    strcpy((char *)&v54[-4], "id  min max ");
    v27 = sub_1A39AB624(&qword_1EE6D09C0);
    v28 = v63;
    v74 = v27;
    v75 = v63;
    v76 = v63;
    v77 = v63;
    TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
    v30 = &v21[TupleTypeMetadata[12]];
    v31 = &v21[TupleTypeMetadata[16]];
    v32 = &v21[TupleTypeMetadata[20]];
    v33 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
    v34 = v61;
    v33(v61, v30, v28);
    v35 = v62;
    v33(v62, v31, v28);
    v33(v68, v32, v28);
    LOBYTE(v74) = 1;
    v36 = v72;
    v37 = v69;
    sub_1A3AB5588();
    LOBYTE(v74) = 0;
    v38 = v70;
    sub_1A3AB5594();
    v39 = v36;
    v40 = v37;
    v41 = v28;
    v42 = v34;
    if (v38)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v73, v78);
      v43 = *(void (**)(char *, uint64_t))(v67 + 8);
      v43(v68, v41);
      v43(v35, v41);
      v43(v34, v41);
      return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v40, v39);
    }
    else
    {
      v51 = v37;
      swift_bridgeObjectRelease();
      LOBYTE(v74) = 1;
      sub_1A3AB55A0();
      LOBYTE(v74) = 2;
      sub_1A3AB55A0();
      LOBYTE(v74) = 3;
      v52 = v68;
      sub_1A3AB55A0();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v73, v78);
      v53 = *(void (**)(char *, uint64_t))(v67 + 8);
      v53(v52, v41);
      v53(v35, v41);
      v53(v42, v41);
      return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v51, v72);
    }
  }
  else
  {
    v45 = v56;
    LOBYTE(v74) = 0;
    v46 = v59;
    v47 = v72;
    v48 = v69;
    sub_1A3AB5588();
    LOBYTE(v74) = 0;
    v49 = v60;
    v50 = v70;
    sub_1A3AB55AC();
    swift_bridgeObjectRelease();
    if (!v50)
    {
      LOBYTE(v74) = 1;
      sub_1A3AB55F4();
    }
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v49);
    return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v48, v47);
  }
}

uint64_t TTSAudioEffect.Spec.GenericWire.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  void (*v60)(char *, uint64_t);
  uint64_t *v61;
  void (*v62)(char *, uint64_t *, uint64_t);
  char *v63;
  uint64_t *v64;
  __int128 v65;
  uint64_t *v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char v92;

  v70 = a5;
  v8 = _s4SpecV11GenericWireO15ValueCodingKeysOMa(255, a2, a3, a4);
  v78 = MEMORY[0x1A8597738](&unk_1A3AC88FC, v8);
  v79 = v8;
  v75 = sub_1A3AB557C();
  v73 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75);
  v81 = (char *)&v65 - v9;
  v11 = _s4SpecV11GenericWireO13BoxCodingKeysOMa(255, a2, a3, v10);
  v76 = MEMORY[0x1A8597738](&unk_1A3AC88AC, v11);
  v77 = v11;
  v74 = sub_1A3AB557C();
  v72 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74);
  v80 = (char *)&v65 - v12;
  v14 = _s4SpecV11GenericWireO10CodingKeysOMa(255, a2, a3, v13);
  MEMORY[0x1A8597738](&unk_1A3AC885C, v14);
  v15 = sub_1A3AB557C();
  v84 = *(_QWORD *)(v15 - 8);
  v85 = v15;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v65 - v16;
  v83 = a2;
  v71 = a3;
  v82 = type metadata accessor for TTSAudioEffect.Spec.GenericWire(0, a2, a3, v18);
  v19 = *(_QWORD *)(v82 - 8);
  v20 = MEMORY[0x1E0C80A78](v82);
  v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v65 - v24;
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v65 - v26;
  v28 = a1[3];
  v86 = a1;
  sub_1A39A19CC(a1, v28);
  v29 = v87;
  sub_1A3AB5774();
  if (!v29)
  {
    v66 = (uint64_t *)v25;
    v87 = 0;
    v69 = (uint64_t *)v22;
    v67 = v19;
    v68 = v27;
    v30 = v82;
    v31 = v85;
    *(_QWORD *)&v88 = sub_1A3AB5570();
    v32 = sub_1A3AB4C58();
    MEMORY[0x1A8597738](MEMORY[0x1E0DEAF38], v32);
    *(_QWORD *)&v90 = sub_1A3AB51BC();
    *((_QWORD *)&v90 + 1) = v33;
    *(_QWORD *)&v91 = v34;
    *((_QWORD *)&v91 + 1) = v35;
    v36 = sub_1A3AB51B0();
    MEMORY[0x1A8597738](MEMORY[0x1E0DEBF88], v36);
    sub_1A3AB4F64();
    v37 = v88;
    if (v88 != 2)
    {
      v65 = v90;
      v88 = v90;
      v89 = v91;
      if ((sub_1A3AB4F7C() & 1) != 0)
      {
        if ((v37 & 1) != 0)
        {
          LOBYTE(v88) = 1;
          v45 = v87;
          sub_1A3AB54EC();
          if (v45)
            goto LABEL_6;
          v92 = 0;
          v55 = sub_1A3AB5504();
          v57 = v56;
          v58 = MEMORY[0x1E0C80A78](v55);
          strcpy((char *)&v65 - 32, "id  min max ");
          v87 = v58;
          *(_QWORD *)&v88 = sub_1A39AB624(&qword_1EE6D09C0);
          *((_QWORD *)&v88 + 1) = sub_1A3AB50FC();
          *(_QWORD *)&v89 = *((_QWORD *)&v88 + 1);
          *((_QWORD *)&v89 + 1) = *((_QWORD *)&v88 + 1);
          swift_getTupleTypeMetadata();
          v59 = v69;
          *v69 = v87;
          v59[1] = v57;
          LOBYTE(v88) = 1;
          sub_1A3AB5510();
          LOBYTE(v88) = 2;
          sub_1A3AB5510();
          LOBYTE(v88) = 3;
          sub_1A3AB5510();
          (*(void (**)(char *, uint64_t))(v73 + 8))(v81, v75);
          swift_unknownObjectRelease();
          (*(void (**)(char *, uint64_t))(v84 + 8))(v17, v85);
          v64 = v69;
          swift_storeEnumTagMultiPayload();
          v62 = *(void (**)(char *, uint64_t *, uint64_t))(v67 + 32);
          v63 = v68;
          v62(v68, v64, v30);
        }
        else
        {
          LOBYTE(v88) = 0;
          v38 = v80;
          v39 = v17;
          v40 = v87;
          sub_1A3AB54EC();
          if (v40)
          {
LABEL_6:
            swift_unknownObjectRelease();
            (*(void (**)(char *, uint64_t))(v84 + 8))(v17, v31);
            return sub_1A39A47C4((uint64_t)v86);
          }
          v46 = v31;
          LOBYTE(v88) = 0;
          v47 = v74;
          v48 = v38;
          v49 = sub_1A3AB551C();
          v50 = v84;
          v51 = v49;
          v53 = v52;
          LOBYTE(v88) = 1;
          v54 = sub_1A3AB5564();
          v60 = *(void (**)(char *, uint64_t))(v72 + 8);
          LODWORD(v87) = v54;
          v60(v48, v47);
          swift_unknownObjectRelease();
          (*(void (**)(char *, uint64_t))(v50 + 8))(v39, v46);
          v61 = v66;
          *v66 = v51;
          v61[1] = v53;
          *((_DWORD *)v61 + 4) = v87;
          swift_storeEnumTagMultiPayload();
          v62 = *(void (**)(char *, uint64_t *, uint64_t))(v67 + 32);
          v63 = v68;
          v62(v68, v61, v30);
        }
        v62(v70, (uint64_t *)v63, v30);
        return sub_1A39A47C4((uint64_t)v86);
      }
    }
    v41 = sub_1A3AB52F4();
    swift_allocError();
    v43 = v42;
    sub_1A39A4820(&qword_1EE6D3580);
    *v43 = v30;
    sub_1A3AB54F8();
    sub_1A3AB52E8();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v41 - 8) + 104))(v43, *MEMORY[0x1E0DEC450], v41);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v17, v31);
  }
  return sub_1A39A47C4((uint64_t)v86);
}

uint64_t sub_1A3A69AE8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  return TTSAudioEffect.Spec.GenericWire.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_1A3A69B04(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TTSAudioEffect.Spec.GenericWire.encode(to:)(a1, a2, a3, a4);
}

BOOL sub_1A3A69B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static TTSAudioEffect.Spec.GenericWire.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void TTSAudioEffect.Spec.Control.hash(into:)()
{
  __asm { BR              X11 }
}

uint64_t sub_1A3A69B6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  sub_1A3AB5708();
  sub_1A3AB5714();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    swift_bridgeObjectRelease();
  }
  v4 = *(_QWORD *)(v3 + 16);
  result = sub_1A3AB5708();
  if (v4)
  {
    v6 = v3 + 32;
    do
    {
      v6 += 8;
      result = ((uint64_t (*)(uint64_t))TTSAudioEffect.Spec.Control.hash(into:))(v1);
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1A3A69D80()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A69DAC + 4 * byte_1A3AC751D[*v0]))(0x70756F7267, 0xE500000000000000);
}

uint64_t sub_1A3A69DAC()
{
  return 1802398060;
}

uint64_t sub_1A3A69DBC()
{
  return 0x656C67676F74;
}

uint64_t sub_1A3A69DD0()
{
  return 0x726564696C73;
}

uint64_t sub_1A3A69DE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A71DA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A69E08()
{
  sub_1A3A6E5F8();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A69E30()
{
  sub_1A3A6E5F8();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A69E58()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6572646C696863;
  else
    return 0x656C746974;
}

uint64_t sub_1A3A69E90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A71F34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A69EB4()
{
  sub_1A3A6E74C();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A69EDC()
{
  sub_1A3A6E74C();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A69F04()
{
  _BYTE *v0;

  if (*v0)
    return 28532;
  else
    return 0x6C6562616CLL;
}

uint64_t sub_1A3A69F30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A7201C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A69F54()
{
  sub_1A3A6E6C4();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A69F7C()
{
  sub_1A3A6E6C4();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A69FA4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A69FDC + 4 * byte_1A3AC7521[*v0]))(0x6574656D61726170, 0xEB00000000644972);
}

uint64_t sub_1A3A69FDC()
{
  return 0x6C6562616CLL;
}

uint64_t sub_1A3A69FF0()
{
  return 7235949;
}

uint64_t sub_1A3A6A000()
{
  return 7889261;
}

uint64_t sub_1A3A6A010()
{
  return 1885697139;
}

uint64_t sub_1A3A6A020()
{
  return 1953066613;
}

uint64_t sub_1A3A6A030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A720EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A6A054()
{
  sub_1A3A6E63C();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A6A07C()
{
  sub_1A3A6E63C();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A6A0A4()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C6562616CLL;
  else
    return 0x6574656D61726170;
}

uint64_t sub_1A3A6A0E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A7233C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A6A108()
{
  sub_1A3A6E680();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A6A130()
{
  sub_1A3A6E680();
  return sub_1A3AB5798();
}

void TTSAudioEffect.Spec.Control.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v12 = sub_1A39A4820(&qword_1EE6D4408);
  v8[0] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v11 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A39A4820(&qword_1EE6D4410);
  v8[3] = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v8[4] = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A39A4820(&qword_1EE6D4418);
  v8[2] = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v6 = sub_1A39A4820(&qword_1EE6D4420);
  v8[1] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v14 = sub_1A39A4820(&qword_1EE6D4428);
  v13 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v7 = *v2;
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A6E5F8();
  sub_1A3AB5780();
  __asm { BR              X10 }
}

uint64_t sub_1A3A6A330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + 32);
  *(_BYTE *)(v4 - 104) = 0;
  sub_1A3A6E74C();
  v6 = *(_QWORD *)(v4 - 120);
  sub_1A3AB5588();
  *(_BYTE *)(v4 - 104) = 0;
  v7 = *(_QWORD *)(v4 - 128);
  sub_1A3AB5594();
  if (!v7)
  {
    *(_QWORD *)(v4 - 104) = v5;
    *(_BYTE *)(v4 - 105) = 1;
    sub_1A39A4820(&qword_1EE6D4430);
    sub_1A3A0E78C(&qword_1EE6D4438, &qword_1EE6D4430, (uint64_t (*)(void))sub_1A3A6E708, MEMORY[0x1E0DEAF10]);
    sub_1A3AB55DC();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 200) + 8))(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 136) + 8))(v3, v6);
}

uint64_t TTSAudioEffect.Spec.Control.hashValue.getter()
{
  sub_1A3AB56FC();
  TTSAudioEffect.Spec.Control.hash(into:)();
  return sub_1A3AB5738();
}

uint64_t TTSAudioEffect.Spec.Control.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v20[7];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;

  v20[4] = a2;
  v21 = sub_1A39A4820(&qword_1EE6D4448);
  v23 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v27 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1A39A4820(&qword_1EE6D4450);
  v20[5] = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1A39A4820(&qword_1EE6D4458);
  v20[6] = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v24 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A39A4820(&qword_1EE6D4460);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = sub_1A39A4820(&qword_1EE6D4468);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v28 = a1;
  sub_1A39A19CC(a1, v12);
  sub_1A3A6E5F8();
  v13 = v29;
  sub_1A3AB5774();
  if (!v13)
  {
    v20[2] = v7;
    v20[3] = v6;
    v29 = v9;
    v14 = sub_1A3AB5570();
    if (*(_QWORD *)(v14 + 16) == 1)
    {
      v15 = *(unsigned __int8 *)(v14 + 32);
      v20[1] = v14;
      __asm { BR              X10 }
    }
    v16 = sub_1A3AB52F4();
    swift_allocError();
    v18 = v17;
    sub_1A39A4820(&qword_1EE6D3580);
    *v18 = &type metadata for TTSAudioEffect.Spec.Control;
    sub_1A3AB54F8();
    sub_1A3AB52E8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC450], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v8);
  }
  return sub_1A39A47C4((uint64_t)v28);
}

uint64_t sub_1A3A6B21C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TTSAudioEffect.Spec.Control.init(from:)(a1, a2);
}

void sub_1A3A6B230(_QWORD *a1)
{
  TTSAudioEffect.Spec.Control.encode(to:)(a1);
}

uint64_t sub_1A3A6B248()
{
  sub_1A3AB56FC();
  TTSAudioEffect.Spec.Control.hash(into:)();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A6B294()
{
  sub_1A3AB56FC();
  TTSAudioEffect.Spec.Control.hash(into:)();
  return sub_1A3AB5738();
}

uint64_t TTSAudioEffect.Spec.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TTSAudioEffect.Spec.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*TTSAudioEffect.Spec.name.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSAudioEffect.Spec.localizedEffectDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TTSAudioEffect.Spec.localizedEffectDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*TTSAudioEffect.Spec.localizedEffectDescription.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSAudioEffect.Spec.icon.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TTSAudioEffect.Spec.icon.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*TTSAudioEffect.Spec.icon.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSAudioEffect.Spec.bypassWhenUncustomized.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t TTSAudioEffect.Spec.bypassWhenUncustomized.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t (*TTSAudioEffect.Spec.bypassWhenUncustomized.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSAudioEffect.Spec.controls.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*TTSAudioEffect.Spec.controls.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t sub_1A3A6B480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int64_t v66;
  unint64_t v67;
  int64_t v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t result;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  char v95;
  char v96;
  uint64_t v97;
  int64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  unint64_t v111;
  _QWORD *v112;

  v13 = a3;
  v89 = a3 + 64;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  if (v15 < 64)
    v16 = ~(-1 << v15);
  else
    v16 = -1;
  v17 = v16 & *(_QWORD *)(a3 + 64);
  v90 = (unint64_t)(v15 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  v87 = a2;
  swift_bridgeObjectRetain();
  v88 = a8;
  swift_bridgeObjectRetain();
  v86 = a6;
  swift_bridgeObjectRetain();
  v85 = a4;
  swift_bridgeObjectRetain();
  v18 = 0;
  v19 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v93 = v13;
  v94 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  while (2)
  {
    if (!v17)
    {
      v21 = v18 + 1;
      if (__OFADD__(v18, 1))
        goto LABEL_107;
      if (v21 >= v90)
        goto LABEL_100;
      v22 = *(_QWORD *)(v89 + 8 * v21);
      v23 = v18 + 1;
      if (!v22)
      {
        v23 = v18 + 2;
        if (v18 + 2 >= v90)
          goto LABEL_100;
        v22 = *(_QWORD *)(v89 + 8 * v23);
        if (!v22)
        {
          v23 = v18 + 3;
          if (v18 + 3 >= v90)
            goto LABEL_100;
          v22 = *(_QWORD *)(v89 + 8 * v23);
          if (!v22)
          {
            v23 = v18 + 4;
            if (v18 + 4 >= v90)
              goto LABEL_100;
            v22 = *(_QWORD *)(v89 + 8 * v23);
            if (!v22)
            {
              v24 = v18 + 5;
              if (v18 + 5 < v90)
              {
                v22 = *(_QWORD *)(v89 + 8 * v24);
                if (v22)
                {
                  v23 = v18 + 5;
                  goto LABEL_23;
                }
                while (1)
                {
                  v23 = v24 + 1;
                  if (__OFADD__(v24, 1))
                    goto LABEL_110;
                  if (v23 >= v90)
                    break;
                  v22 = *(_QWORD *)(v89 + 8 * v23);
                  ++v24;
                  if (v22)
                    goto LABEL_23;
                }
              }
LABEL_100:
              swift_release();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(_QWORD *)a9 = a1;
              *(_QWORD *)(a9 + 8) = v87;
              *(_QWORD *)(a9 + 16) = a7;
              *(_QWORD *)(a9 + 24) = v88;
              *(_QWORD *)(a9 + 32) = a5;
              *(_QWORD *)(a9 + 40) = v86;
              *(_BYTE *)(a9 + 48) = a10 & 1;
              *(_QWORD *)(a9 + 56) = v13;
              *(_QWORD *)(a9 + 64) = v85;
              *(_QWORD *)(a9 + 72) = v94;
              *(_QWORD *)(a9 + 80) = v19;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }
          }
        }
      }
LABEL_23:
      v97 = (v22 - 1) & v22;
      v98 = v23;
      v20 = __clz(__rbit64(v22)) + (v23 << 6);
      goto LABEL_24;
    }
    v97 = (v17 - 1) & v17;
    v98 = v18;
    v20 = __clz(__rbit64(v17)) | (v18 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v13 + 56) + 88 * v20;
    v27 = *(_QWORD *)(v25 + 56);
    v26 = *(_QWORD *)(v25 + 64);
    v109 = v27 + 64;
    v28 = 1 << *(_BYTE *)(v27 + 32);
    if (v28 < 64)
      v29 = ~(-1 << v28);
    else
      v29 = -1;
    v30 = v29 & *(_QWORD *)(v27 + 64);
    v104 = *(_QWORD *)(v25 + 8);
    v105 = *(_QWORD *)v25;
    v102 = *(_QWORD *)(v25 + 24);
    v103 = *(_QWORD *)(v25 + 16);
    v101 = *(_QWORD *)(v25 + 32);
    v100 = *(_QWORD *)(v25 + 40);
    v99 = *(_BYTE *)(v25 + 48);
    sub_1A39A5070(*(_QWORD *)v25, v104, v103, v102, v101, v100, v99);
    v31 = (unint64_t)(v28 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    v108 = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32 = 0;
    while (v30)
    {
      v33 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      v34 = v33 | (v32 << 6);
LABEL_46:
      v38 = *(_QWORD *)(v27 + 56) + 40 * v34;
      if (*(_BYTE *)(v38 + 37) == 1)
      {
        v39 = *(_QWORD *)v38;
        v40 = *(_QWORD *)(v38 + 8);
        v41 = *(_QWORD *)(v38 + 16);
        if (!v40)
          goto LABEL_53;
        if ((v41 & 0x100000000) == 0)
        {
          sub_1A39A50A8();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v112 = v94;
          v43 = sub_1A39A2734(v39, v40);
          v44 = v94[2];
          v45 = (v42 & 1) == 0;
          v46 = v44 + v45;
          if (__OFADD__(v44, v45))
            goto LABEL_105;
          if (v94[3] >= v46)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v92 = v43;
              v96 = v42;
              sub_1A3A164D0();
              v42 = v96;
              v43 = v92;
            }
          }
          else
          {
            v95 = v42;
            sub_1A3A15A9C(v46, isUniquelyReferenced_nonNull_native);
            v47 = sub_1A39A2734(v39, v40);
            v49 = v48 & 1;
            v42 = v95;
            if ((v95 & 1) != v49)
              goto LABEL_111;
            v43 = v47;
          }
          v94 = v112;
          if ((v42 & 1) != 0)
          {
            *(_DWORD *)(v112[7] + 4 * v43) = v41;
          }
          else
          {
            v112[(v43 >> 6) + 8] |= 1 << v43;
            v50 = (uint64_t *)(v112[6] + 16 * v43);
            *v50 = v39;
            v50[1] = v40;
            *(_DWORD *)(v112[7] + 4 * v43) = v41;
            v51 = v112[2];
            v52 = __OFADD__(v51, 1);
            v53 = v51 + 1;
            if (v52)
              goto LABEL_108;
            v112[2] = v53;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          sub_1A3A18890();
LABEL_53:
          sub_1A3A18890();
        }
      }
    }
    v35 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    if (v35 >= v31)
      goto LABEL_61;
    v36 = *(_QWORD *)(v109 + 8 * v35);
    ++v32;
    if (v36)
      goto LABEL_45;
    v32 = v35 + 1;
    if (v35 + 1 >= v31)
      goto LABEL_61;
    v36 = *(_QWORD *)(v109 + 8 * v32);
    if (v36)
      goto LABEL_45;
    v32 = v35 + 2;
    if (v35 + 2 >= v31)
      goto LABEL_61;
    v36 = *(_QWORD *)(v109 + 8 * v32);
    if (v36)
      goto LABEL_45;
    v32 = v35 + 3;
    if (v35 + 3 >= v31)
      goto LABEL_61;
    v36 = *(_QWORD *)(v109 + 8 * v32);
    if (v36)
    {
LABEL_45:
      v30 = (v36 - 1) & v36;
      v34 = __clz(__rbit64(v36)) + (v32 << 6);
      goto LABEL_46;
    }
    v37 = v35 + 4;
    if (v37 < v31)
    {
      v36 = *(_QWORD *)(v109 + 8 * v37);
      if (!v36)
      {
        while (1)
        {
          v32 = v37 + 1;
          if (__OFADD__(v37, 1))
            break;
          if (v32 >= v31)
            goto LABEL_61;
          v36 = *(_QWORD *)(v109 + 8 * v32);
          ++v37;
          if (v36)
            goto LABEL_45;
        }
LABEL_103:
        __break(1u);
        goto LABEL_104;
      }
      v32 = v37;
      goto LABEL_45;
    }
LABEL_61:
    swift_release();
    swift_bridgeObjectRetain();
    sub_1A3A18908(v105, v104, v103, v102, v101, v100, v99);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v54 = v26;
    v55 = 0;
    v56 = v26 + 64;
    v57 = 1 << *(_BYTE *)(v26 + 32);
    if (v57 < 64)
      v58 = ~(-1 << v57);
    else
      v58 = -1;
    v59 = v58 & *(_QWORD *)(v26 + 64);
    v60 = (unint64_t)(v57 + 63) >> 6;
LABEL_67:
    if (v59)
    {
      v64 = __clz(__rbit64(v59));
      v59 &= v59 - 1;
      v65 = v64 | (v55 << 6);
      goto LABEL_86;
    }
    v66 = v55 + 1;
    if (__OFADD__(v55, 1))
      goto LABEL_102;
    if (v66 >= v60)
    {
LABEL_5:
      swift_release();
      v13 = v93;
      v17 = v97;
      v18 = v98;
      continue;
    }
    break;
  }
  v67 = *(_QWORD *)(v56 + 8 * v66);
  ++v55;
  if (v67)
    goto LABEL_85;
  v55 = v66 + 1;
  if (v66 + 1 >= v60)
    goto LABEL_5;
  v67 = *(_QWORD *)(v56 + 8 * v55);
  if (v67)
    goto LABEL_85;
  v55 = v66 + 2;
  if (v66 + 2 >= v60)
    goto LABEL_5;
  v67 = *(_QWORD *)(v56 + 8 * v55);
  if (v67)
    goto LABEL_85;
  v55 = v66 + 3;
  if (v66 + 3 >= v60)
    goto LABEL_5;
  v67 = *(_QWORD *)(v56 + 8 * v55);
  if (v67)
  {
LABEL_85:
    v59 = (v67 - 1) & v67;
    v65 = __clz(__rbit64(v67)) + (v55 << 6);
LABEL_86:
    v69 = *(_QWORD *)(v54 + 56) + 40 * v65;
    if (*(_BYTE *)(v69 + 37) != 1)
      goto LABEL_67;
    v61 = *(_QWORD *)v69;
    v62 = *(_QWORD *)(v69 + 8);
    v63 = *(_QWORD *)(v69 + 16);
    if (!v62)
    {
LABEL_81:
      sub_1A3A18890();
      v54 = v108;
      goto LABEL_67;
    }
    if ((v63 & 0x100000000) != 0)
      goto LABEL_67;
    sub_1A39A50A8();
    swift_bridgeObjectRetain();
    v110 = swift_isUniquelyReferenced_nonNull_native();
    v71 = sub_1A39A2734(v61, v62);
    v72 = v19[2];
    v73 = (v70 & 1) == 0;
    v74 = v72 + v73;
    if (__OFADD__(v72, v73))
      goto LABEL_106;
    if (v19[3] < v74)
    {
      v106 = v70;
      sub_1A3A154E8(v74, v110);
      v75 = sub_1A39A2734(v61, v62);
      if ((v106 & 1) != (v76 & 1))
        goto LABEL_111;
      v71 = v75;
      if ((v106 & 1) == 0)
        goto LABEL_97;
LABEL_95:
      *(_DWORD *)(v19[7] + 4 * v71) = v63;
LABEL_99:
      swift_bridgeObjectRelease();
      sub_1A3A18890();
      goto LABEL_81;
    }
    if ((v110 & 1) != 0)
    {
      if ((v70 & 1) != 0)
        goto LABEL_95;
    }
    else
    {
      v111 = v71;
      v107 = v70;
      sub_1A3A16198();
      v71 = v111;
      if ((v107 & 1) != 0)
        goto LABEL_95;
    }
LABEL_97:
    v19[(v71 >> 6) + 8] |= 1 << v71;
    v77 = (uint64_t *)(v19[6] + 16 * v71);
    *v77 = v61;
    v77[1] = v62;
    *(_DWORD *)(v19[7] + 4 * v71) = v63;
    v78 = v19[2];
    v52 = __OFADD__(v78, 1);
    v79 = v78 + 1;
    if (v52)
      goto LABEL_109;
    v19[2] = v79;
    swift_bridgeObjectRetain();
    goto LABEL_99;
  }
  v68 = v66 + 4;
  if (v68 >= v60)
    goto LABEL_5;
  v67 = *(_QWORD *)(v56 + 8 * v68);
  if (v67)
  {
    v55 = v68;
    goto LABEL_85;
  }
  while (1)
  {
    v55 = v68 + 1;
    if (__OFADD__(v68, 1))
      break;
    if (v55 >= v60)
      goto LABEL_5;
    v67 = *(_QWORD *)(v56 + 8 * v55);
    ++v68;
    if (v67)
      goto LABEL_85;
  }
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  result = sub_1A3AB5678();
  __break(1u);
  return result;
}

uint64_t TTSAudioEffect.Spec.defaultParameters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSAudioEffect.Spec.defaultParameters.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 72) = a1;
  return result;
}

uint64_t (*TTSAudioEffect.Spec.defaultParameters.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSAudioEffect.Spec.defaultProperties.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSAudioEffect.Spec.defaultProperties.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t (*TTSAudioEffect.Spec.defaultProperties.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t sub_1A3A6BE24(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A6BE50 + 4 * byte_1A3AC752F[a1]))(1701667182, 0xE400000000000000);
}

unint64_t sub_1A3A6BE50()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1A3A6BE94()
{
  return 0x7365786F62;
}

uint64_t sub_1A3A6BEA8()
{
  return 0x736C6F72746E6F63;
}

unint64_t sub_1A3A6BEC0()
{
  return 0xD000000000000011;
}

uint64_t sub_1A3A6BEE8()
{
  unsigned __int8 *v0;

  return sub_1A3A6BE24(*v0);
}

uint64_t sub_1A3A6BEF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A7243C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A6BF14()
{
  sub_1A3A6E83C();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A6BF3C()
{
  sub_1A3A6E83C();
  return sub_1A3AB5798();
}

uint64_t TTSAudioEffect.Spec.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v4 = sub_1A39A4820(&qword_1EE6D4480);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 16);
  v25 = *(_QWORD *)(v1 + 24);
  v26 = v8;
  v9 = *(_QWORD *)(v1 + 32);
  v23 = *(_QWORD *)(v1 + 40);
  v24 = v9;
  v22 = *(unsigned __int8 *)(v1 + 48);
  v10 = *(_QWORD *)(v1 + 56);
  v20 = *(_QWORD *)(v1 + 64);
  v21 = v10;
  v11 = *(_QWORD *)(v1 + 72);
  v18 = *(_QWORD *)(v1 + 80);
  v19 = v11;
  v12 = a1[3];
  v13 = a1;
  v15 = v14;
  sub_1A39A19CC(v13, v12);
  sub_1A3A6E83C();
  sub_1A3AB5780();
  LOBYTE(v28) = 0;
  sub_1A3AB55AC();
  if (!v2)
  {
    v16 = v21;
    LOBYTE(v28) = 1;
    sub_1A3AB5594();
    LOBYTE(v28) = 2;
    sub_1A3AB5594();
    LOBYTE(v28) = 3;
    sub_1A3AB55B8();
    v28 = v16;
    v27 = 4;
    sub_1A39A4820(&qword_1EE6D4488);
    sub_1A3A6E880(&qword_1EE6D4490, (uint64_t (*)(void))sub_1A3A6E8F4, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
    sub_1A3AB55DC();
    v28 = v20;
    v27 = 5;
    sub_1A39A4820(&qword_1EE6D4430);
    sub_1A3A0E78C(&qword_1EE6D4438, &qword_1EE6D4430, (uint64_t (*)(void))sub_1A3A6E708, MEMORY[0x1E0DEAF10]);
    sub_1A3AB55DC();
    v28 = v19;
    v27 = 6;
    sub_1A39A4820(&qword_1EE6D44A0);
    sub_1A3A6E938(&qword_1EE6D44A8, &qword_1EE6D44A0, MEMORY[0x1E0DEB198]);
    sub_1A3AB55DC();
    v28 = v18;
    v27 = 7;
    sub_1A39A4820(&qword_1EE6D38A8);
    sub_1A3A6E938(&qword_1EE6D44B0, &qword_1EE6D38A8, MEMORY[0x1E0DEE100]);
    sub_1A3AB55DC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v15);
}

uint64_t TTSAudioEffect.Spec.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v5 = sub_1A39A4820(&qword_1EE6D44B8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A6E83C();
  sub_1A3AB5774();
  if (v2)
  {
    sub_1A39A47C4((uint64_t)a1);
  }
  else
  {
    LOBYTE(v36) = 0;
    v9 = sub_1A3AB551C();
    v12 = v11;
    v32 = v9;
    LOBYTE(v36) = 1;
    swift_bridgeObjectRetain();
    v13 = sub_1A3AB5504();
    v15 = v14;
    v30 = v13;
    v31 = v12;
    LOBYTE(v36) = 2;
    swift_bridgeObjectRetain();
    v16 = sub_1A3AB5504();
    v18 = v17;
    v29 = v16;
    LOBYTE(v36) = 3;
    swift_bridgeObjectRetain();
    v28 = sub_1A3AB5528();
    sub_1A39A4820(&qword_1EE6D4488);
    v35 = 4;
    sub_1A3A6E880(&qword_1EE6D44C0, (uint64_t (*)(void))sub_1A3A6E994, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
    sub_1A3AB554C();
    v19 = v36;
    v34 = sub_1A39A4820(&qword_1EE6D4430);
    v35 = 5;
    sub_1A3A0E78C(&qword_1EE6D4470, &qword_1EE6D4430, (uint64_t (*)(void))sub_1A3A6E7F4, MEMORY[0x1E0DEAF40]);
    v27 = v19;
    swift_bridgeObjectRetain();
    sub_1A3AB554C();
    v20 = v36;
    v33 = sub_1A39A4820(&qword_1EE6D44A0);
    v35 = 6;
    sub_1A3A6E9D8(&qword_1EE6D44D0, &qword_1EE6D44A0, MEMORY[0x1E0DEB1C0]);
    v34 = v20;
    swift_bridgeObjectRetain();
    sub_1A3AB554C();
    v21 = v36;
    v26 = sub_1A39A4820(&qword_1EE6D38A8);
    v35 = 7;
    sub_1A3A6E9D8(&qword_1EE6D44D8, &qword_1EE6D38A8, MEMORY[0x1E0DEE128]);
    v33 = v21;
    swift_bridgeObjectRetain();
    sub_1A3AB554C();
    v28 &= 1u;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v22 = v36;
    v23 = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = v27;
    swift_bridgeObjectRetain();
    v25 = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)a2 = v32;
    *(_QWORD *)(a2 + 8) = v23;
    *(_QWORD *)(a2 + 16) = v30;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v29;
    *(_QWORD *)(a2 + 40) = v18;
    *(_BYTE *)(a2 + 48) = v28;
    *(_QWORD *)(a2 + 56) = v24;
    *(_QWORD *)(a2 + 64) = v25;
    *(_QWORD *)(a2 + 72) = v33;
    *(_QWORD *)(a2 + 80) = v22;
    sub_1A39A47C4((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A6C90C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TTSAudioEffect.Spec.init(from:)(a1, a2);
}

uint64_t sub_1A3A6C920(_QWORD *a1)
{
  return TTSAudioEffect.Spec.encode(to:)(a1);
}

uint64_t sub_1A3A6C938(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7892834 && a2 == 0xE300000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7475706E69 && a2 == 0xE500000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74757074756FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1A3A6CA6C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;

  v2 = sub_1A39A4820(&qword_1EE6D4548);
  v27 = *(_QWORD *)(v2 - 8);
  v28 = v2;
  MEMORY[0x1E0C80A78](v2);
  v31 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1A39A4820(&qword_1EE6D4550);
  v26 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v30 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A39A4820(&qword_1EE6D4558);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A39A4820(&qword_1EE6D4560);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v32 = a1;
  sub_1A39A19CC(a1, v13);
  sub_1A3A6523C();
  v14 = v33;
  sub_1A3AB5774();
  if (!v14)
  {
    v25 = v6;
    v16 = v30;
    v15 = v31;
    v33 = v10;
    v17 = sub_1A3AB5570();
    if (*(_QWORD *)(v17 + 16) == 1)
    {
      if (*(_BYTE *)(v17 + 32))
      {
        if (*(_BYTE *)(v17 + 32) == 1)
        {
          v35 = 1;
          sub_1A3A652C4();
          sub_1A3AB54EC();
          (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v29);
        }
        else
        {
          v36 = 2;
          sub_1A3A65280();
          sub_1A3AB54EC();
          (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v28);
        }
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v9);
        v5 = 0;
      }
      else
      {
        v34 = 0;
        sub_1A3A65308();
        sub_1A3AB54EC();
        v20 = v5;
        v21 = sub_1A3AB551C();
        v22 = v33;
        v5 = v21;
        (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v20);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v9);
      }
    }
    else
    {
      v5 = sub_1A3AB52F4();
      swift_allocError();
      v19 = v18;
      sub_1A39A4820(&qword_1EE6D3580);
      *v19 = &_s4SpecV8EndPointON;
      sub_1A3AB54F8();
      sub_1A3AB52E8();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v19, *MEMORY[0x1E0DEC450], v5);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v9);
    }
  }
  sub_1A39A47C4((uint64_t)v32);
  return v5;
}

uint64_t sub_1A3A6CEBC(__int128 *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  sub_1A3A6D058(a1, (uint64_t)&v26);
  v3 = v26;
  if ((v32 & 1) != 0)
  {
    v4 = v27;
    sub_1A3A6D058(a2, (uint64_t)&v19);
    if (v25 == 1)
    {
      if (v3 != v19 || v4 != v20)
        goto LABEL_19;
LABEL_18:
      v11 = 1;
      return v11 & 1;
    }
    goto LABEL_9;
  }
  v7 = v27;
  v6 = v28;
  v9 = v29;
  v8 = v30;
  v10 = v31;
  sub_1A3A6D058(a2, (uint64_t)&v19);
  if ((v25 & 1) != 0)
  {
LABEL_9:
    v11 = 0;
    return v11 & 1;
  }
  v12 = v21;
  v13 = v22;
  v14 = v23;
  v15 = v24;
  if (v3 == v19 && v7 == v20 || (v16 = sub_1A3AB5654(), v11 = 0, (v16 & 1) != 0))
  {
    if (v6 == v12 && v9 == v13 || (v17 = sub_1A3AB5654(), v11 = 0, (v17 & 1) != 0))
    {
      if (v8 != v14 || v10 != v15)
      {
LABEL_19:
        v11 = sub_1A3AB5654();
        return v11 & 1;
      }
      goto LABEL_18;
    }
  }
  return v11 & 1;
}

unint64_t sub_1A3A6D014()
{
  unint64_t result;

  result = qword_1EE6E1E30;
  if (!qword_1EE6E1E30)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC8A3C, &_s4SpecV3BoxV7BoxTypeO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E1E30);
  }
  return result;
}

uint64_t sub_1A3A6D058(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *(_BYTE *)(a2 + 48) = *((_BYTE *)a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

unint64_t sub_1A3A6D078()
{
  unint64_t result;

  result = qword_1EE6E1E38;
  if (!qword_1EE6E1E38)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC89EC, &_s4SpecV3BoxV7BoxTypeO17BuiltInCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E1E38);
  }
  return result;
}

unint64_t sub_1A3A6D0BC()
{
  unint64_t result;

  result = qword_1EE6E1E40;
  if (!qword_1EE6E1E40)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC899C, &_s4SpecV3BoxV7BoxTypeO19AudioUnitCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E1E40);
  }
  return result;
}

void _s12TextToSpeech14TTSAudioEffectO4SpecV7ControlO2eeoiySbAG_AGtFZ_0(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A3A6D148()
{
  unint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t result;
  char v9;

  if (v0 >> 62)
    return 0;
  v2 = v1[3];
  v3 = v1[4];
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  if (!v2)
  {
    if (!v4)
    {
LABEL_11:
      swift_retain();
      swift_retain();
      v9 = ((uint64_t (*)(uint64_t, uint64_t))sub_1A3A66914)(v3, v5);
      swift_release();
      swift_release();
      return v9 & 1;
    }
    return 0;
  }
  if (!v4)
    return 0;
  if (v1[2] == *(_QWORD *)(v0 + 16) && v2 == v4)
    goto LABEL_11;
  v7 = sub_1A3AB5654();
  result = 0;
  if ((v7 & 1) != 0)
    goto LABEL_11;
  return result;
}

uint64_t _s12TextToSpeech14TTSAudioEffectO4SpecV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v11 = *(unsigned __int8 *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  if ((*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)) && (sub_1A3AB5654() & 1) == 0)
    return 0;
  if (v3)
  {
    if (!v7 || (v2 != v8 || v3 != v7) && (sub_1A3AB5654() & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if (!v5)
  {
    if (v9)
      return 0;
LABEL_20:
    if (((v6 ^ v11) & 1) != 0)
      return 0;
    goto LABEL_21;
  }
  if (!v9)
    return 0;
  if (v4 != v10 || v5 != v9)
  {
    if ((sub_1A3AB5654() & 1) == 0)
      return 0;
    goto LABEL_20;
  }
  if (v6 != v11)
    return 0;
LABEL_21:
  if ((sub_1A3A65C50(v20, v19) & 1) != 0 && (sub_1A3A66914(v18, v17) & 1) != 0 && (sub_1A39A2584(v16, v15) & 1) != 0)
    return sub_1A3A664C0(v14, v13);
  return 0;
}

uint64_t sub_1A3A6D548(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65707974627573 && a2 == 0xE700000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74636166756E616DLL && a2 == 0xEC00000072657275)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1A3A6D6A4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696E556F69647561 && a2 == 0xE900000000000074;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E49746C697562 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A3A6D7A0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;

  v43 = a2;
  v3 = sub_1A39A4820(&qword_1EE6D4530);
  v44 = *(_QWORD *)(v3 - 8);
  v45 = v3;
  MEMORY[0x1E0C80A78](v3);
  v46 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A39A4820(&qword_1EE6D4538);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A39A4820(&qword_1EE6D4540);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v47 = a1;
  sub_1A39A19CC(a1, v13);
  sub_1A3A6D014();
  v14 = v48;
  sub_1A3AB5774();
  if (v14)
    return sub_1A39A47C4((uint64_t)v47);
  v15 = v46;
  v42 = v6;
  v48 = v10;
  v16 = sub_1A3AB5570();
  v17 = v16;
  if (*(_QWORD *)(v16 + 16) != 1)
  {
    v23 = sub_1A3AB52F4();
    swift_allocError();
    v25 = v24;
    sub_1A39A4820(&qword_1EE6D3580);
    *v25 = &_s4SpecV3BoxV7BoxTypeON;
    sub_1A3AB54F8();
    sub_1A3AB52E8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x1E0DEC450], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v9);
    return sub_1A39A47C4((uint64_t)v47);
  }
  v18 = *(unsigned __int8 *)(v16 + 32);
  if ((v18 & 1) != 0)
  {
    v53 = 1;
    sub_1A3A6D078();
    v19 = v15;
    sub_1A3AB54EC();
    v20 = v18;
    v21 = v45;
    v22 = sub_1A3AB551C();
    v29 = v28;
    v41 = v22;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v19, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v9);
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
  }
  else
  {
    v52 = 0;
    sub_1A3A6D0BC();
    sub_1A3AB54EC();
    LODWORD(v46) = v18;
    v51 = 0;
    v26 = sub_1A3AB551C();
    v29 = v35;
    v41 = v26;
    v45 = v17;
    v50 = 1;
    v36 = v8;
    v30 = sub_1A3AB551C();
    v31 = v37;
    v49 = 2;
    v38 = sub_1A3AB551C();
    v33 = v39;
    v40 = *(void (**)(char *, uint64_t))(v42 + 8);
    v44 = v38;
    v40(v36, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v9);
    v20 = (char)v46;
    v32 = v44;
  }
  result = sub_1A39A47C4((uint64_t)v47);
  v34 = v43;
  *v43 = v41;
  v34[1] = v29;
  v34[2] = v30;
  v34[3] = v31;
  v34[4] = v32;
  v34[5] = v33;
  *((_BYTE *)v34 + 48) = v20;
  return result;
}

unint64_t sub_1A3A6DC18()
{
  unint64_t result;

  result = qword_1EE6E1E48;
  if (!qword_1EE6E1E48)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC894C, &_s4SpecV3BoxV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E1E48);
  }
  return result;
}

unint64_t sub_1A3A6DC5C()
{
  unint64_t result;

  result = qword_1EE6D43B8;
  if (!qword_1EE6D43B8)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC76C0, &_s4SpecV3BoxV7BoxTypeON);
    atomic_store(result, (unint64_t *)&qword_1EE6D43B8);
  }
  return result;
}

unint64_t sub_1A3A6DCA0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EE6D43C8;
  if (!qword_1EE6D43C8)
  {
    v1 = sub_1A39AB624(&qword_1EE6D43C0);
    v2 = sub_1A39C3EF8(&qword_1EE6D43D0, &qword_1EE6D38B0, (uint64_t)&protocol conformance descriptor for TTSAudioEffect.Spec.GenericWire<A>);
    v3[0] = MEMORY[0x1E0DEE100];
    v3[1] = v2;
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEA0B8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EE6D43C8);
  }
  return result;
}

unint64_t sub_1A3A6DD24()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EE6D43E0;
  if (!qword_1EE6D43E0)
  {
    v1 = sub_1A39AB624(&qword_1EE6D43D8);
    v2 = sub_1A39C3EF8(&qword_1EE6D43E8, &qword_1EE6D38B8, (uint64_t)&protocol conformance descriptor for TTSAudioEffect.Spec.GenericWire<A>);
    v3[0] = MEMORY[0x1E0DEE100];
    v3[1] = v2;
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEA0B8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EE6D43E0);
  }
  return result;
}

unint64_t sub_1A3A6DDA8()
{
  unint64_t result;

  result = qword_1EE6D4400;
  if (!qword_1EE6D4400)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7608, &_s4SpecV8EndPointON);
    atomic_store(result, (unint64_t *)&qword_1EE6D4400);
  }
  return result;
}

uint64_t sub_1A3A6DDEC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574656D61726170 && a2 == 0xEA00000000007372 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69747265706F7270 && a2 == 0xEA00000000007365 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737475706E69 && a2 == 0xE600000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7374757074756FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1A3A6E000@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  int v57;
  char v58;

  v5 = sub_1A39A4820(&qword_1EE6D44F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A6DC18();
  sub_1A3AB5774();
  if (v2)
    return sub_1A39A47C4((uint64_t)a1);
  v58 = 0;
  sub_1A3A72738();
  sub_1A3AB554C();
  v44 = v6;
  v41 = a2;
  v9 = v50;
  v49 = v51;
  v11 = v52;
  v10 = v53;
  v13 = v54;
  v12 = v55;
  v57 = v56;
  v14 = sub_1A39A4820(&qword_1EE6D43C0);
  v46 = v9;
  v47 = v14;
  v58 = 1;
  v45 = v11;
  v48 = v12;
  sub_1A39A5070(v9, v49, v11, v10, v13, v12, v57);
  sub_1A3A7277C();
  sub_1A3AB554C();
  v38 = v13;
  v39 = v10;
  v15 = v49;
  v16 = v50;
  v17 = v46;
  sub_1A39A4820(&qword_1EE6D43D8);
  v58 = 2;
  sub_1A3A72800();
  swift_bridgeObjectRetain();
  v37[1] = 0;
  sub_1A3AB554C();
  v40 = v16;
  v18 = v50;
  sub_1A39A4820(&qword_1EE6D43F0);
  v58 = 3;
  v19 = sub_1A3A0E78C(&qword_1EE6D4520, &qword_1EE6D43F0, (uint64_t (*)(void))sub_1A3A72884, MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  v47 = v19;
  sub_1A3AB554C();
  v43 = v18;
  v58 = 4;
  v42 = v50;
  swift_bridgeObjectRetain();
  sub_1A3AB554C();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v5);
  v47 = v50;
  v20 = v17;
  v21 = v17;
  v22 = v15;
  v23 = v45;
  v24 = v38;
  v25 = v39;
  v26 = v57;
  sub_1A39A5070(v21, v22, v45, v39, v38, v48, v57);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = v48;
  v28 = v49;
  sub_1A3A18908(v20, v49, v23, v25, v24, v48, v26);
  sub_1A39A47C4((uint64_t)a1);
  sub_1A3A18908(v20, v28, v23, v25, v24, v27, v26);
  v29 = v47;
  swift_bridgeObjectRelease();
  v30 = v42;
  swift_bridgeObjectRelease();
  v31 = v43;
  swift_bridgeObjectRelease();
  v32 = v40;
  result = swift_bridgeObjectRelease();
  v34 = v41;
  *v41 = v20;
  v34[1] = v28;
  v35 = v39;
  v34[2] = v23;
  v34[3] = v35;
  v36 = v48;
  v34[4] = v38;
  v34[5] = v36;
  *((_BYTE *)v34 + 48) = v26;
  v34[7] = v32;
  v34[8] = v31;
  v34[9] = v30;
  v34[10] = v29;
  return result;
}

uint64_t type metadata accessor for TTSAudioEffect.Spec.GenericWire(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TTSAudioEffect.Spec.GenericWire);
}

uint64_t _s4SpecV11GenericWireO15ValueCodingKeysOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&_s4SpecV11GenericWireO15ValueCodingKeysOMn);
}

uint64_t _s4SpecV11GenericWireO13BoxCodingKeysOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&_s4SpecV11GenericWireO13BoxCodingKeysOMn);
}

uint64_t _s4SpecV11GenericWireO10CodingKeysOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&_s4SpecV11GenericWireO10CodingKeysOMn);
}

unint64_t sub_1A3A6E5F8()
{
  unint64_t result;

  result = qword_1EE6E1E50;
  if (!qword_1EE6E1E50)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC880C, &_s4SpecV7ControlO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E1E50);
  }
  return result;
}

unint64_t sub_1A3A6E63C()
{
  unint64_t result;

  result = qword_1EE6E1E58;
  if (!qword_1EE6E1E58)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC87BC, &_s4SpecV7ControlO16SliderCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E1E58);
  }
  return result;
}

unint64_t sub_1A3A6E680()
{
  unint64_t result;

  result = qword_1EE6E1E60;
  if (!qword_1EE6E1E60)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC876C, &_s4SpecV7ControlO16ToggleCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E1E60);
  }
  return result;
}

unint64_t sub_1A3A6E6C4()
{
  unint64_t result;

  result = qword_1EE6E1E68;
  if (!qword_1EE6E1E68)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC871C, &_s4SpecV7ControlO14LinkCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E1E68);
  }
  return result;
}

unint64_t sub_1A3A6E708()
{
  unint64_t result;

  result = qword_1EE6D4440;
  if (!qword_1EE6D4440)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSAudioEffect.Spec.Control, &type metadata for TTSAudioEffect.Spec.Control);
    atomic_store(result, (unint64_t *)&qword_1EE6D4440);
  }
  return result;
}

unint64_t sub_1A3A6E74C()
{
  unint64_t result;

  result = qword_1EE6E1E70;
  if (!qword_1EE6E1E70)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC86CC, &_s4SpecV7ControlO15GroupCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E1E70);
  }
  return result;
}

uint64_t sub_1A3A6E790()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A6E7C4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1A3A6E7F4()
{
  unint64_t result;

  result = qword_1EE6D4478;
  if (!qword_1EE6D4478)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSAudioEffect.Spec.Control, &type metadata for TTSAudioEffect.Spec.Control);
    atomic_store(result, (unint64_t *)&qword_1EE6D4478);
  }
  return result;
}

unint64_t sub_1A3A6E83C()
{
  unint64_t result;

  result = qword_1EE6E1E78[0];
  if (!qword_1EE6E1E78[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC867C, &_s4SpecV10CodingKeysON);
    atomic_store(result, qword_1EE6E1E78);
  }
  return result;
}

uint64_t sub_1A3A6E880(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = sub_1A39AB624(&qword_1EE6D4488);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x1A8597738](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A3A6E8F4()
{
  unint64_t result;

  result = qword_1EE6D4498;
  if (!qword_1EE6D4498)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7738, &_s4SpecV3BoxVN);
    atomic_store(result, (unint64_t *)&qword_1EE6D4498);
  }
  return result;
}

uint64_t sub_1A3A6E938(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = sub_1A39AB624(a2);
    v7[0] = MEMORY[0x1E0DEA970];
    v7[1] = a3;
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEA0B8], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A3A6E994()
{
  unint64_t result;

  result = qword_1EE6D44C8;
  if (!qword_1EE6D44C8)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7710, &_s4SpecV3BoxVN);
    atomic_store(result, (unint64_t *)&qword_1EE6D44C8);
  }
  return result;
}

uint64_t sub_1A3A6E9D8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = sub_1A39AB624(a2);
    v7[0] = MEMORY[0x1E0DEA9A0];
    v7[1] = a3;
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEA0D8], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A3A6EA38()
{
  unint64_t result;

  result = qword_1EE6D44E0;
  if (!qword_1EE6D44E0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7670, &_s4SpecV8EndPointON);
    atomic_store(result, (unint64_t *)&qword_1EE6D44E0);
  }
  return result;
}

unint64_t sub_1A3A6EA80()
{
  unint64_t result;

  result = qword_1EE6D44E8;
  if (!qword_1EE6D44E8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSAudioEffect.Spec.Control, &type metadata for TTSAudioEffect.Spec.Control);
    atomic_store(result, (unint64_t *)&qword_1EE6D44E8);
  }
  return result;
}

uint64_t dispatch thunk of DSPGraphPrintable.dspGraphValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t _s4SpecVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s4SpecVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s4SpecVwca(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 _s4SpecV3BoxVwtk(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s4SpecVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s4SpecVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s4SpecVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSAudioEffect.Spec()
{
  return &type metadata for TTSAudioEffect.Spec;
}

unint64_t _s4SpecV8EndPointOwxx(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s4SpecV8EndPointOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *_s4SpecV8EndPointOwca(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s4SpecV8EndPointOwta(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s4SpecV8EndPointOwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t _s4SpecV8EndPointOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_1A3A6F01C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1A3A6F034(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *_s4SpecV8EndPointOMa()
{
  return &_s4SpecV8EndPointON;
}

uint64_t _s4SpecV3BoxVwxx(uint64_t a1)
{
  sub_1A3A18908(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s4SpecV3BoxVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_BYTE *)(a2 + 48);
  sub_1A39A5070(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = v10;
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  v13 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s4SpecV3BoxVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_BYTE *)(a2 + 48);
  sub_1A39A5070(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = v10;
  sub_1A3A18908(v11, v12, v13, v14, v15, v16, v17);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s4SpecV3BoxVwta(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;

  v4 = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_BYTE *)(a1 + 48);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v4;
  sub_1A3A18908(v5, v6, v7, v8, v9, v10, v11);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s4SpecV3BoxVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s4SpecV3BoxVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s4SpecV3BoxVMa()
{
  return &_s4SpecV3BoxVN;
}

uint64_t _s4SpecV3BoxV7BoxTypeOwxx(uint64_t a1)
{
  return sub_1A3A18908(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t _s4SpecV3BoxV7BoxTypeOwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_1A39A5070(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t _s4SpecV3BoxV7BoxTypeOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_1A39A5070(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  sub_1A3A18908(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t _s4SpecV3BoxV7BoxTypeOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_BYTE *)(a1 + 48);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v3;
  sub_1A3A18908(v4, v6, v5, v7, v8, v9, v10);
  return a1;
}

uint64_t _s4SpecV3BoxV7BoxTypeOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s4SpecV3BoxV7BoxTypeOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A3A6F598(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t sub_1A3A6F5A0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 48) = a2 & 1;
  return result;
}

ValueMetadata *_s4SpecV3BoxV7BoxTypeOMa()
{
  return &_s4SpecV3BoxV7BoxTypeON;
}

uint64_t sub_1A3A6F5BC()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  void *v3;
  char *v4;

  v3 = &unk_1A3AC7988;
  result = sub_1A3AB50FC();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    v4 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1A3A6F65C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  int v11;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  void *v22;
  const void *v23;
  void *v24;
  const void *v25;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + v6;
  if (((v9
       + ((v9 + ((v6 + 16) & ~(unint64_t)v6)) & ~(unint64_t)v6)) & ~(unint64_t)v6)
     + v8 <= 0x14)
    v10 = 20;
  else
    v10 = ((v8
          + v6
          + ((v8 + v6 + ((v6 + 16) & ~(unint64_t)v6)) & ~(unint64_t)v6)) & ~(unint64_t)v6)
        + v8;
  v11 = v6 & 0x100000;
  if (v7 > 7 || v11 != 0 || (unint64_t)(v10 + 1) > 0x18)
  {
    v14 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v14 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    v15 = *((unsigned __int8 *)a2 + v10);
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X13 }
    }
    v17 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v17;
    if (v15 == 1)
    {
      v18 = ~v7;
      v19 = (void *)((a1 + v7 + 16) & ~v7);
      v20 = (const void *)(((unint64_t)a2 + v7 + 16) & ~v7);
      v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
      swift_bridgeObjectRetain();
      if (v21(v20, 1, v4))
      {
        memcpy(v19, v20, v8);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v19, v20, v4);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
      }
      v22 = (void *)(((unint64_t)v19 + v9) & v18);
      v23 = (const void *)(((unint64_t)v20 + v9) & v18);
      if (v21(v23, 1, v4))
      {
        memcpy(v22, v23, v8);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v22, v23, v4);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v22, 0, 1, v4);
      }
      v24 = (void *)(((unint64_t)v22 + v9) & v18);
      v25 = (const void *)(((unint64_t)v23 + v9) & v18);
      if (v21(v25, 1, v4))
      {
        memcpy(v24, v25, v8);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v24, v25, v4);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v24, 0, 1, v4);
      }
      *(_BYTE *)(a1 + v10) = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
      *(_BYTE *)(a1 + v10) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t sub_1A3A6F8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  if (*(_DWORD *)(v4 + 84))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v4 + 64) + 1;
  v7 = v6 + v5;
  v8 = ((v6 + v5 + ((v6 + v5 + ((v5 + 16) & ~v5)) & ~v5)) & ~v5) + v6;
  if (v8 <= 0x14)
    v8 = 20;
  v9 = *(unsigned __int8 *)(a1 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  result = swift_bridgeObjectRelease();
  if (v9 == 1)
  {
    v12 = ~v5;
    v13 = (a1 + v5 + 16) & ~v5;
    v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    if (!v14(v13, 1, v3))
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v13, v3);
    v15 = (v7 + v13) & v12;
    if (!v14(v15, 1, v3))
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v15, v3);
    v16 = (v7 + v15) & v12;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v16, 1, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v16, v3);
  }
  return result;
}

uint64_t sub_1A3A6FA8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  void *v17;
  const void *v18;
  void *v19;
  const void *v20;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  if (*(_DWORD *)(v5 + 84))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v5 + 64) + 1;
  v8 = v7 + v6;
  if (((v7 + v6 + ((v7 + v6 + ((v6 + 16) & ~v6)) & ~v6)) & ~v6) + v7 <= 0x14)
    v9 = 20;
  else
    v9 = ((v7 + v6 + ((v7 + v6 + ((v6 + 16) & ~v6)) & ~v6)) & ~v6) + v7;
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v12;
  if (v10 == 1)
  {
    v13 = ~v6;
    v14 = (void *)((a1 + v6 + 16) & ~v6);
    v15 = (const void *)((a2 + v6 + 16) & ~v6);
    v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    if (v16(v15, 1, v4))
    {
      memcpy(v14, v15, v7);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v14, v15, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
    }
    v17 = (void *)(((unint64_t)v14 + v8) & v13);
    v18 = (const void *)(((unint64_t)v15 + v8) & v13);
    if (v16(v18, 1, v4))
    {
      memcpy(v17, v18, v7);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v17, v18, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, v4);
    }
    v19 = (void *)(((unint64_t)v17 + v8) & v13);
    v20 = (const void *)(((unint64_t)v18 + v8) & v13);
    if (v16(v20, 1, v4))
    {
      memcpy(v19, v20, v7);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v19, v20, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
    }
    *(_BYTE *)(a1 + v9) = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + v9) = 0;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1A3A6FCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  unsigned int (*v23)(const void *, uint64_t, uint64_t);
  void *v24;
  const void *v25;
  void *v26;
  const void *v27;
  size_t __n;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    if (*(_DWORD *)(v6 + 84))
      v8 = *(_QWORD *)(v6 + 64);
    else
      v8 = *(_QWORD *)(v6 + 64) + 1;
    v9 = v8 + v7;
    __n = v8;
    if (((v8 + v7 + ((v8 + v7 + ((v7 + 16) & ~v7)) & ~v7)) & (unint64_t)~v7) + v8 <= 0x14)
      v10 = 20;
    else
      v10 = ((v8 + v7 + ((v8 + v7 + ((v7 + 16) & ~v7)) & ~v7)) & ~v7) + v8;
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X11 }
    }
    v13 = ~v7;
    swift_bridgeObjectRelease();
    if (v11 == 1)
    {
      v14 = (a1 + v7 + 16) & v13;
      v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
      if (!v15(v14, 1, v5))
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
      v16 = (v9 + v14) & v13;
      if (!v15(v16, 1, v5))
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v5);
      v17 = (v9 + v16) & v13;
      if (!v15(v17, 1, v5))
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v17, v5);
    }
    v18 = *(unsigned __int8 *)(a2 + v10);
    if (v18 >= 2)
    {
      if (v10 <= 3)
        v19 = v10;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    if (v18 == 1)
    {
      v20 = a2 + v7;
      v21 = (void *)((a1 + v7 + 16) & v13);
      v22 = (const void *)((v20 + 16) & v13);
      v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
      swift_bridgeObjectRetain();
      if (v23(v22, 1, v5))
      {
        memcpy(v21, v22, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v21, v22, v5);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v21, 0, 1, v5);
      }
      v24 = (void *)(((unint64_t)v21 + v9) & v13);
      v25 = (const void *)(((unint64_t)v22 + v9) & v13);
      if (v23(v25, 1, v5))
      {
        memcpy(v24, v25, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v24, v25, v5);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v5);
      }
      v26 = (void *)(((unint64_t)v24 + v9) & v13);
      v27 = (const void *)(((unint64_t)v25 + v9) & v13);
      if (v23(v27, 1, v5))
      {
        memcpy(v26, v27, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v26, v27, v5);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v26, 0, 1, v5);
      }
      *(_BYTE *)(a1 + v10) = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(a1 + v10) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t sub_1A3A70080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  unsigned int (*v15)(const void *, uint64_t, uint64_t);
  char v16;
  void *v17;
  const void *v18;
  void *v19;
  const void *v20;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  if (*(_DWORD *)(v5 + 84))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v5 + 64) + 1;
  v8 = v7 + v6;
  if (((v7 + v6 + ((v7 + v6 + ((v6 + 16) & ~v6)) & ~v6)) & ~v6) + v7 <= 0x14)
    v9 = 20;
  else
    v9 = ((v7 + v6 + ((v7 + v6 + ((v6 + 16) & ~v6)) & ~v6)) & ~v6) + v7;
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  if (v10 == 1)
  {
    v12 = ~v6;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v13 = (void *)((a1 + v6 + 16) & ~v6);
    v14 = (const void *)((a2 + v6 + 16) & ~v6);
    v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    if (v15(v14, 1, v4))
    {
      memcpy(v13, v14, v7);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v13, v14, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
    }
    v17 = (void *)(((unint64_t)v13 + v8) & v12);
    v18 = (const void *)(((unint64_t)v14 + v8) & v12);
    if (v15(v18, 1, v4))
    {
      memcpy(v17, v18, v7);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v17, v18, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, v4);
    }
    v19 = (void *)(((unint64_t)v17 + v8) & v12);
    v20 = (const void *)(((unint64_t)v18 + v8) & v12);
    if (v15(v20, 1, v4))
    {
      memcpy(v19, v20, v7);
      v16 = 1;
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v19, v20, v4);
      v16 = 1;
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
    }
  }
  else
  {
    v16 = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  }
  *(_BYTE *)(a1 + v9) = v16;
  return a1;
}

uint64_t sub_1A3A702E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  unsigned int (*v23)(const void *, uint64_t, uint64_t);
  char v24;
  void *v25;
  const void *v26;
  void *v27;
  const void *v28;
  size_t __n;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    if (*(_DWORD *)(v6 + 84))
      v8 = *(_QWORD *)(v6 + 64);
    else
      v8 = *(_QWORD *)(v6 + 64) + 1;
    v9 = v8 + v7;
    __n = v8;
    if (((v8 + v7 + ((v8 + v7 + ((v7 + 16) & ~v7)) & ~v7)) & (unint64_t)~v7) + v8 <= 0x14)
      v10 = 20;
    else
      v10 = ((v8 + v7 + ((v8 + v7 + ((v7 + 16) & ~v7)) & ~v7)) & ~v7) + v8;
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X11 }
    }
    v13 = ~v7;
    swift_bridgeObjectRelease();
    if (v11 == 1)
    {
      v14 = (a1 + v7 + 16) & v13;
      v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
      if (!v15(v14, 1, v5))
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
      v16 = (v9 + v14) & v13;
      if (!v15(v16, 1, v5))
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v5);
      v17 = (v9 + v16) & v13;
      if (!v15(v17, 1, v5))
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v17, v5);
    }
    v18 = *(unsigned __int8 *)(a2 + v10);
    if (v18 >= 2)
    {
      if (v10 <= 3)
        v19 = v10;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    if (v18 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v20 = a2 + v7;
      v21 = (void *)((a1 + v7 + 16) & v13);
      v22 = (const void *)((v20 + 16) & v13);
      v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
      if (v23(v22, 1, v5))
      {
        memcpy(v21, v22, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v21, v22, v5);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v21, 0, 1, v5);
      }
      v25 = (void *)(((unint64_t)v21 + v9) & v13);
      v26 = (const void *)(((unint64_t)v22 + v9) & v13);
      if (v23(v26, 1, v5))
      {
        memcpy(v25, v26, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v25, v26, v5);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v25, 0, 1, v5);
      }
      v27 = (void *)(((unint64_t)v25 + v9) & v13);
      v28 = (const void *)(((unint64_t)v26 + v9) & v13);
      if (v23(v28, 1, v5))
      {
        memcpy(v27, v28, __n);
        v24 = 1;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v27, v28, v5);
        v24 = 1;
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v27, 0, 1, v5);
      }
    }
    else
    {
      v24 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    }
    *(_BYTE *)(a1 + v10) = v24;
  }
  return a1;
}

uint64_t sub_1A3A70674(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = *(_DWORD *)(v3 + 84);
  v6 = *(_QWORD *)(v3 + 64);
  if (!v5)
    ++v6;
  v7 = ((v6 + v4 + ((v6 + v4 + ((v4 + 16) & ~v4)) & ~v4)) & ~v4) + v6;
  v8 = 20;
  if (v7 > 0x14)
    v8 = v7;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_23;
  v9 = v8 + 1;
  v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    v13 = ((a2 + ~(-1 << v10) - 254) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v13 < 2)
    {
LABEL_23:
      v15 = *(unsigned __int8 *)(a1 + v8);
      if (v15 >= 2)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_23;
LABEL_16:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return (v14 + 255);
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1A3A70768 + 4 * byte_1A3AC7563[(v9 - 1)]))();
}

void sub_1A3A707B4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_QWORD *)(v5 + 64);
  if (!v7)
    ++v8;
  v9 = ((v8 + v6 + ((v8 + v6 + ((v6 + 16) & ~v6)) & ~v6)) & ~v6) + v8;
  if (v9 <= 0x14)
    v9 = 20;
  v10 = v9 + 1;
  if (a3 < 0xFF)
  {
    v11 = 0u;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 + ~(-1 << (8 * v10)) - 254) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v12 = a2 - 255;
  if (v10 < 4)
  {
    if ((_DWORD)v9 != -1)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *a1 = v14;
        *((_BYTE *)a1 + 2) = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *a1 = v14;
      }
      else
      {
        *(_BYTE *)a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v9 + 1);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t sub_1A3A7098C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_DWORD *)(v2 + 84);
  v5 = *(_QWORD *)(v2 + 64);
  if (!v4)
    ++v5;
  v6 = ((v5 + v3 + ((v5 + v3 + ((v3 + 16) & ~v3)) & ~v3)) & ~v3) + v5;
  v7 = 20;
  if (v6 > 0x14)
    v7 = v6;
  if (*(unsigned __int8 *)(a1 + v7) < 2u)
    return *(unsigned __int8 *)(a1 + v7);
  if (v7 <= 3)
    v8 = v7;
  else
    v8 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1A3A70A04 + 4 * byte_1A3AC7571[v8]))();
}

_BYTE *sub_1A3A70A4C(_BYTE *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  size_t v7;
  char v8;
  int v9;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = *(_DWORD *)(v3 + 84);
  v6 = *(_QWORD *)(v3 + 64);
  if (!v5)
    ++v6;
  v7 = ((v6 + v4 + ((v6 + v4 + ((v4 + 16) & ~v4)) & ~v4)) & ~v4) + v6;
  if (v7 <= 0x14)
    v7 = 20;
  if (a2 > 1)
  {
    if (v7 <= 3)
      v8 = ((a2 - 2) >> (8 * v7)) + 2;
    else
      v8 = 2;
    result[v7] = v8;
    if (v7 >= 4)
      v9 = 4;
    else
      v9 = v7;
    bzero(result, v7);
    __asm { BR              X10 }
  }
  result[v7] = a2;
  return result;
}

ValueMetadata *type metadata accessor for TTSAudioEffect.Spec.Control()
{
  return &type metadata for TTSAudioEffect.Spec.Control;
}

uint64_t _s4SpecV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s4SpecV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1A3A70C3C + 4 * byte_1A3AC757F[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1A3A70C70 + 4 * byte_1A3AC757A[v4]))();
}

uint64_t sub_1A3A70C70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A70C78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A70C80);
  return result;
}

uint64_t sub_1A3A70C8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A70C94);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1A3A70C98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A70CA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s4SpecV10CodingKeysOMa()
{
  return &_s4SpecV10CodingKeysON;
}

ValueMetadata *_s4SpecV7ControlO10CodingKeysOMa()
{
  return &_s4SpecV7ControlO10CodingKeysON;
}

ValueMetadata *_s4SpecV7ControlO15GroupCodingKeysOMa()
{
  return &_s4SpecV7ControlO15GroupCodingKeysON;
}

ValueMetadata *_s4SpecV7ControlO14LinkCodingKeysOMa()
{
  return &_s4SpecV7ControlO14LinkCodingKeysON;
}

ValueMetadata *_s4SpecV7ControlO16ToggleCodingKeysOMa()
{
  return &_s4SpecV7ControlO16ToggleCodingKeysON;
}

uint64_t _s4SpecV7ControlO16SliderCodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1A3A70D50 + 4 * byte_1A3AC7589[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1A3A70D84 + 4 * byte_1A3AC7584[v4]))();
}

uint64_t sub_1A3A70D84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A70D8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A70D94);
  return result;
}

uint64_t sub_1A3A70DA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A70DA8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1A3A70DAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A70DB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s4SpecV7ControlO16SliderCodingKeysOMa()
{
  return &_s4SpecV7ControlO16SliderCodingKeysON;
}

uint64_t _s4SpecV7ControlO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A3A70E1C + 4 * byte_1A3AC7593[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A3A70E50 + 4 * byte_1A3AC758E[v4]))();
}

uint64_t sub_1A3A70E50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A70E58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A70E60);
  return result;
}

uint64_t sub_1A3A70E6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A70E74);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A3A70E78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A70E80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t _s4SpecV3BoxV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A3A70ED8 + 4 * byte_1A3AC759D[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A3A70F0C + 4 * byte_1A3AC7598[v4]))();
}

uint64_t sub_1A3A70F0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A70F14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A70F1CLL);
  return result;
}

uint64_t sub_1A3A70F28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A70F30);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A3A70F34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A70F3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s4SpecV3BoxV10CodingKeysOMa()
{
  return &_s4SpecV3BoxV10CodingKeysON;
}

uint64_t _s4SpecV7ControlO15GroupCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A3A70FA4 + 4 * byte_1A3AC75A7[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A3A70FD8 + 4 * byte_1A3AC75A2[v4]))();
}

uint64_t sub_1A3A70FD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A70FE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A70FE8);
  return result;
}

uint64_t sub_1A3A70FF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A70FFCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A3A71000(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A71008(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s4SpecV3BoxV7BoxTypeO10CodingKeysOMa()
{
  return &_s4SpecV3BoxV7BoxTypeO10CodingKeysON;
}

ValueMetadata *_s4SpecV3BoxV7BoxTypeO19AudioUnitCodingKeysOMa()
{
  return &_s4SpecV3BoxV7BoxTypeO19AudioUnitCodingKeysON;
}

ValueMetadata *_s4SpecV3BoxV7BoxTypeO17BuiltInCodingKeysOMa()
{
  return &_s4SpecV3BoxV7BoxTypeO17BuiltInCodingKeysON;
}

uint64_t _s4SpecV3BoxV7BoxTypeO19AudioUnitCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A3A71098 + 4 * byte_1A3AC75B1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A3A710CC + 4 * byte_1A3AC75AC[v4]))();
}

uint64_t sub_1A3A710CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A710D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A710DCLL);
  return result;
}

uint64_t sub_1A3A710E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A710F0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A3A710F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A710FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s4SpecV8EndPointO10CodingKeysOMa()
{
  return &_s4SpecV8EndPointO10CodingKeysON;
}

uint64_t _s4SpecV3BoxV7BoxTypeO17BuiltInCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A3A71158 + 4 * byte_1A3AC75B6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A3A71178 + 4 * byte_1A3AC75BB[v4]))();
}

_BYTE *sub_1A3A71158(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A3A71178(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A3A71180(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A3A71188(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A3A71190(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A3A71198(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s4SpecV8EndPointO13BoxCodingKeysOMa()
{
  return &_s4SpecV8EndPointO13BoxCodingKeysON;
}

ValueMetadata *_s4SpecV8EndPointO15InputCodingKeysOMa()
{
  return &_s4SpecV8EndPointO15InputCodingKeysON;
}

ValueMetadata *_s4SpecV8EndPointO16OutputCodingKeysOMa()
{
  return &_s4SpecV8EndPointO16OutputCodingKeysON;
}

unint64_t sub_1A3A711D8()
{
  unint64_t result;

  result = qword_1EE6E2D80[0];
  if (!qword_1EE6E2D80[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7C44, &_s4SpecV8EndPointO13BoxCodingKeysON);
    atomic_store(result, qword_1EE6E2D80);
  }
  return result;
}

unint64_t sub_1A3A71220()
{
  unint64_t result;

  result = qword_1EE6E2F90[0];
  if (!qword_1EE6E2F90[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7CFC, &_s4SpecV8EndPointO10CodingKeysON);
    atomic_store(result, qword_1EE6E2F90);
  }
  return result;
}

unint64_t sub_1A3A71268()
{
  unint64_t result;

  result = qword_1EE6E31A0[0];
  if (!qword_1EE6E31A0[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7DB4, &_s4SpecV3BoxV7BoxTypeO17BuiltInCodingKeysON);
    atomic_store(result, qword_1EE6E31A0);
  }
  return result;
}

unint64_t sub_1A3A712B0()
{
  unint64_t result;

  result = qword_1EE6E33B0[0];
  if (!qword_1EE6E33B0[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7E6C, &_s4SpecV3BoxV7BoxTypeO19AudioUnitCodingKeysON);
    atomic_store(result, qword_1EE6E33B0);
  }
  return result;
}

unint64_t sub_1A3A712F8()
{
  unint64_t result;

  result = qword_1EE6E35C0[0];
  if (!qword_1EE6E35C0[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7F24, &_s4SpecV3BoxV7BoxTypeO10CodingKeysON);
    atomic_store(result, qword_1EE6E35C0);
  }
  return result;
}

unint64_t sub_1A3A71340()
{
  unint64_t result;

  result = qword_1EE6E37D0[0];
  if (!qword_1EE6E37D0[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7FDC, &_s4SpecV3BoxV10CodingKeysON);
    atomic_store(result, qword_1EE6E37D0);
  }
  return result;
}

void sub_1A3A71384()
{
  JUMPOUT(0x1A8597738);
}

void sub_1A3A71394()
{
  JUMPOUT(0x1A8597738);
}

void sub_1A3A713A4()
{
  JUMPOUT(0x1A8597738);
}

unint64_t sub_1A3A713B8()
{
  unint64_t result;

  result = qword_1EE6E3FE0[0];
  if (!qword_1EE6E3FE0[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC82BC, &_s4SpecV7ControlO16SliderCodingKeysON);
    atomic_store(result, qword_1EE6E3FE0);
  }
  return result;
}

unint64_t sub_1A3A71400()
{
  unint64_t result;

  result = qword_1EE6E41F0;
  if (!qword_1EE6E41F0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC8374, &_s4SpecV7ControlO16ToggleCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E41F0);
  }
  return result;
}

unint64_t sub_1A3A71448()
{
  unint64_t result;

  result = qword_1EE6E4400[0];
  if (!qword_1EE6E4400[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC842C, &_s4SpecV7ControlO14LinkCodingKeysON);
    atomic_store(result, qword_1EE6E4400);
  }
  return result;
}

unint64_t sub_1A3A71490()
{
  unint64_t result;

  result = qword_1EE6E4610[0];
  if (!qword_1EE6E4610[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC84E4, &_s4SpecV7ControlO15GroupCodingKeysON);
    atomic_store(result, qword_1EE6E4610);
  }
  return result;
}

unint64_t sub_1A3A714D8()
{
  unint64_t result;

  result = qword_1EE6E4820[0];
  if (!qword_1EE6E4820[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC859C, &_s4SpecV7ControlO10CodingKeysON);
    atomic_store(result, qword_1EE6E4820);
  }
  return result;
}

unint64_t sub_1A3A71520()
{
  unint64_t result;

  result = qword_1EE6E4A30[0];
  if (!qword_1EE6E4A30[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC8654, &_s4SpecV10CodingKeysON);
    atomic_store(result, qword_1EE6E4A30);
  }
  return result;
}

unint64_t sub_1A3A71568()
{
  unint64_t result;

  result = qword_1EE6E4B40;
  if (!qword_1EE6E4B40)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC85C4, &_s4SpecV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E4B40);
  }
  return result;
}

unint64_t sub_1A3A715B0()
{
  unint64_t result;

  result = qword_1EE6E4B48[0];
  if (!qword_1EE6E4B48[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC85EC, &_s4SpecV10CodingKeysON);
    atomic_store(result, qword_1EE6E4B48);
  }
  return result;
}

unint64_t sub_1A3A715F8()
{
  unint64_t result;

  result = qword_1EE6E4BD0;
  if (!qword_1EE6E4BD0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC8454, &_s4SpecV7ControlO15GroupCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E4BD0);
  }
  return result;
}

unint64_t sub_1A3A71640()
{
  unint64_t result;

  result = qword_1EE6E4BD8[0];
  if (!qword_1EE6E4BD8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC847C, &_s4SpecV7ControlO15GroupCodingKeysON);
    atomic_store(result, qword_1EE6E4BD8);
  }
  return result;
}

unint64_t sub_1A3A71688()
{
  unint64_t result;

  result = qword_1EE6E4C60;
  if (!qword_1EE6E4C60)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC839C, &_s4SpecV7ControlO14LinkCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E4C60);
  }
  return result;
}

unint64_t sub_1A3A716D0()
{
  unint64_t result;

  result = qword_1EE6E4C68[0];
  if (!qword_1EE6E4C68[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC83C4, &_s4SpecV7ControlO14LinkCodingKeysON);
    atomic_store(result, qword_1EE6E4C68);
  }
  return result;
}

unint64_t sub_1A3A71718()
{
  unint64_t result;

  result = qword_1EE6E4CF0;
  if (!qword_1EE6E4CF0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC82E4, &_s4SpecV7ControlO16ToggleCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E4CF0);
  }
  return result;
}

unint64_t sub_1A3A71760()
{
  unint64_t result;

  result = qword_1EE6E4CF8[0];
  if (!qword_1EE6E4CF8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC830C, &_s4SpecV7ControlO16ToggleCodingKeysON);
    atomic_store(result, qword_1EE6E4CF8);
  }
  return result;
}

unint64_t sub_1A3A717A8()
{
  unint64_t result;

  result = qword_1EE6E4D80;
  if (!qword_1EE6E4D80)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC822C, &_s4SpecV7ControlO16SliderCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E4D80);
  }
  return result;
}

unint64_t sub_1A3A717F0()
{
  unint64_t result;

  result = qword_1EE6E4D88[0];
  if (!qword_1EE6E4D88[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC8254, &_s4SpecV7ControlO16SliderCodingKeysON);
    atomic_store(result, qword_1EE6E4D88);
  }
  return result;
}

unint64_t sub_1A3A71838()
{
  unint64_t result;

  result = qword_1EE6E4E10;
  if (!qword_1EE6E4E10)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC850C, &_s4SpecV7ControlO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E4E10);
  }
  return result;
}

unint64_t sub_1A3A71880()
{
  unint64_t result;

  result = qword_1EE6E4E18[0];
  if (!qword_1EE6E4E18[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC8534, &_s4SpecV7ControlO10CodingKeysON);
    atomic_store(result, qword_1EE6E4E18);
  }
  return result;
}

void sub_1A3A718C4()
{
  JUMPOUT(0x1A8597738);
}

void sub_1A3A718D4()
{
  JUMPOUT(0x1A8597738);
}

void sub_1A3A718E4()
{
  JUMPOUT(0x1A8597738);
}

void sub_1A3A718F4()
{
  JUMPOUT(0x1A8597738);
}

void sub_1A3A71904()
{
  JUMPOUT(0x1A8597738);
}

void sub_1A3A71914()
{
  JUMPOUT(0x1A8597738);
}

unint64_t sub_1A3A71928()
{
  unint64_t result;

  result = qword_1EE6E5020;
  if (!qword_1EE6E5020)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7F4C, &_s4SpecV3BoxV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E5020);
  }
  return result;
}

unint64_t sub_1A3A71970()
{
  unint64_t result;

  result = qword_1EE6E5028[0];
  if (!qword_1EE6E5028[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7F74, &_s4SpecV3BoxV10CodingKeysON);
    atomic_store(result, qword_1EE6E5028);
  }
  return result;
}

unint64_t sub_1A3A719B8()
{
  unint64_t result;

  result = qword_1EE6E50B0;
  if (!qword_1EE6E50B0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7DDC, &_s4SpecV3BoxV7BoxTypeO19AudioUnitCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E50B0);
  }
  return result;
}

unint64_t sub_1A3A71A00()
{
  unint64_t result;

  result = qword_1EE6E50B8[0];
  if (!qword_1EE6E50B8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7E04, &_s4SpecV3BoxV7BoxTypeO19AudioUnitCodingKeysON);
    atomic_store(result, qword_1EE6E50B8);
  }
  return result;
}

unint64_t sub_1A3A71A48()
{
  unint64_t result;

  result = qword_1EE6E5140;
  if (!qword_1EE6E5140)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7D24, &_s4SpecV3BoxV7BoxTypeO17BuiltInCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E5140);
  }
  return result;
}

unint64_t sub_1A3A71A90()
{
  unint64_t result;

  result = qword_1EE6E5148[0];
  if (!qword_1EE6E5148[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7D4C, &_s4SpecV3BoxV7BoxTypeO17BuiltInCodingKeysON);
    atomic_store(result, qword_1EE6E5148);
  }
  return result;
}

unint64_t sub_1A3A71AD8()
{
  unint64_t result;

  result = qword_1EE6E51D0;
  if (!qword_1EE6E51D0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7E94, &_s4SpecV3BoxV7BoxTypeO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E51D0);
  }
  return result;
}

unint64_t sub_1A3A71B20()
{
  unint64_t result;

  result = qword_1EE6E51D8[0];
  if (!qword_1EE6E51D8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7EBC, &_s4SpecV3BoxV7BoxTypeO10CodingKeysON);
    atomic_store(result, qword_1EE6E51D8);
  }
  return result;
}

unint64_t sub_1A3A71B68()
{
  unint64_t result;

  result = qword_1EE6E5260;
  if (!qword_1EE6E5260)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7BB4, &_s4SpecV8EndPointO13BoxCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E5260);
  }
  return result;
}

unint64_t sub_1A3A71BB0()
{
  unint64_t result;

  result = qword_1EE6E5268[0];
  if (!qword_1EE6E5268[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7BDC, &_s4SpecV8EndPointO13BoxCodingKeysON);
    atomic_store(result, qword_1EE6E5268);
  }
  return result;
}

unint64_t sub_1A3A71BF8()
{
  unint64_t result;

  result = qword_1EE6E52F0;
  if (!qword_1EE6E52F0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7B64, &_s4SpecV8EndPointO15InputCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E52F0);
  }
  return result;
}

unint64_t sub_1A3A71C40()
{
  unint64_t result;

  result = qword_1EE6E52F8[0];
  if (!qword_1EE6E52F8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7B8C, &_s4SpecV8EndPointO15InputCodingKeysON);
    atomic_store(result, qword_1EE6E52F8);
  }
  return result;
}

unint64_t sub_1A3A71C88()
{
  unint64_t result;

  result = qword_1EE6E5380;
  if (!qword_1EE6E5380)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7B14, &_s4SpecV8EndPointO16OutputCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E5380);
  }
  return result;
}

unint64_t sub_1A3A71CD0()
{
  unint64_t result;

  result = qword_1EE6E5388[0];
  if (!qword_1EE6E5388[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7B3C, &_s4SpecV8EndPointO16OutputCodingKeysON);
    atomic_store(result, qword_1EE6E5388);
  }
  return result;
}

unint64_t sub_1A3A71D18()
{
  unint64_t result;

  result = qword_1EE6E5410;
  if (!qword_1EE6E5410)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7C6C, &_s4SpecV8EndPointO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE6E5410);
  }
  return result;
}

unint64_t sub_1A3A71D60()
{
  unint64_t result;

  result = qword_1EE6E5418[0];
  if (!qword_1EE6E5418[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7C94, &_s4SpecV8EndPointO10CodingKeysON);
    atomic_store(result, qword_1EE6E5418);
  }
  return result;
}

uint64_t sub_1A3A71DA4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x70756F7267 && a2 == 0xE500000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1802398060 && a2 == 0xE400000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C67676F74 && a2 == 0xE600000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x726564696C73 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1A3A71F34(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6572646C696863 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A3A7201C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 28532 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A3A720EC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6574656D61726170 && a2 == 0xEB00000000644972;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7235949 && a2 == 0xE300000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7889261 && a2 == 0xE300000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1885697139 && a2 == 0xE400000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1953066613 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1A3A7233C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6574656D61726170 && a2 == 0xEB00000000644972;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A3A7243C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001A3AF2830 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1852793705 && a2 == 0xE400000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001A3AF2850 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7365786F62 && a2 == 0xE500000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x736C6F72746E6F63 && a2 == 0xE800000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A3AF2870 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A3AF2890)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

unint64_t sub_1A3A72738()
{
  unint64_t result;

  result = qword_1EE6D44F8;
  if (!qword_1EE6D44F8)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC7698, &_s4SpecV3BoxV7BoxTypeON);
    atomic_store(result, (unint64_t *)&qword_1EE6D44F8);
  }
  return result;
}

unint64_t sub_1A3A7277C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EE6D4500;
  if (!qword_1EE6D4500)
  {
    v1 = sub_1A39AB624(&qword_1EE6D43C0);
    v2 = sub_1A39C3EF8(&qword_1EE6D4508, &qword_1EE6D38B0, (uint64_t)&protocol conformance descriptor for TTSAudioEffect.Spec.GenericWire<A>);
    v3[0] = MEMORY[0x1E0DEE128];
    v3[1] = v2;
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEA0D8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EE6D4500);
  }
  return result;
}

unint64_t sub_1A3A72800()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EE6D4510;
  if (!qword_1EE6D4510)
  {
    v1 = sub_1A39AB624(&qword_1EE6D43D8);
    v2 = sub_1A39C3EF8(&qword_1EE6D4518, &qword_1EE6D38B8, (uint64_t)&protocol conformance descriptor for TTSAudioEffect.Spec.GenericWire<A>);
    v3[0] = MEMORY[0x1E0DEE128];
    v3[1] = v2;
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEA0D8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EE6D4510);
  }
  return result;
}

unint64_t sub_1A3A72884()
{
  unint64_t result;

  result = qword_1EE6D4528;
  if (!qword_1EE6D4528)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC75E0, &_s4SpecV8EndPointON);
    atomic_store(result, (unint64_t *)&qword_1EE6D4528);
  }
  return result;
}

uint64_t TTSAXResource.hasNeuralAXCounterPart.getter()
{
  return sub_1A3A728F0();
}

uint64_t TTSAXResource.hasNeuralCounterPart.getter()
{
  return sub_1A3A728F0();
}

uint64_t sub_1A3A728F0()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (objc_msgSend(v0, sel_type) != (id)3)
    return 0;
  if (objc_msgSend(v0, sel_subtype) != (id)4)
    return 0;
  v1 = objc_msgSend(v0, sel_speechVoice);
  v2 = objc_msgSend(v1, sel_identifier);

  v3 = sub_1A3AB497C();
  v5 = v4;

  v16 = sub_1A3AB497C();
  v17 = v6;
  v14 = sub_1A3AB497C();
  v15 = v7;
  v13 = sub_1A39A9EC0();
  v12 = MEMORY[0x1E0DEA968];
  sub_1A3AB5174();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance, v12, v13, v13, v13, v14, v15, v16, v17, v3, v5);
  v9 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v8, sel_resourceWithVoiceId_, v9);

  if (!v10)
    return 0;

  return 1;
}

uint64_t TTSAXResource.hasSiriPremiumCounterpart.getter()
{
  void *v0;
  void *v1;
  uint64_t result;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  if (objc_msgSend(v0, sel_type) == (id)10)
  {
    result = (uint64_t)objc_msgSend(v0, sel_name, 95, 0xE100000000000000);
    if (!result)
    {
      __break(1u);
      return result;
    }
    v3 = (void *)result;
    sub_1A3AB497C();

    sub_1A3AB49F4();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    v4 = objc_msgSend(v1, sel_primaryLanguage);
    sub_1A3AB497C();

    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    v9 = sub_1A3AB497C();
    v10 = v5;
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    v6 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance, v9, v10);
    v7 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v6, sel_resourceWithVoiceId_, v7);

    if (v8)
    {

      return 1;
    }
  }
  return 0;
}

id TTSAXResource.isDownloading.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, sel_axAsset);
  if (!v1)
  {
    v1 = objc_msgSend(v0, sel_voiceAsset);
    if (!v1)
      return 0;
  }
  v2 = objc_msgSend(v1, sel_isDownloading);

  return v2;
}

id TTSAXResource.canonicId.getter()
{
  void *v0;
  id v1;
  id result;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = objc_msgSend(v0, sel_footprint);
  result = objc_msgSend(v0, sel_voiceId);
  v3 = result;
  if (v1 == (id)2)
  {
    if (result)
    {
      sub_1A3AB497C();

      sub_1A3AB497C();
      sub_1A3AB497C();
      sub_1A39A9EC0();
      v4 = sub_1A3AB5174();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (id)v4;
    }
    __break(1u);
    goto LABEL_8;
  }
  if (!result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v5 = sub_1A3AB497C();

  return (id)v5;
}

id TTSAXResource.superCompactId.getter()
{
  void *v0;
  id result;
  void *v2;
  uint64_t v3;

  if (objc_msgSend(v0, sel_footprint) != (id)3 || objc_msgSend(v0, sel_type) != (id)4)
    return 0;
  result = objc_msgSend(v0, sel_voiceId);
  if (result)
  {
    v2 = result;
    sub_1A3AB497C();

    sub_1A3AB497C();
    sub_1A3AB497C();
    sub_1A39A9EC0();
    v3 = sub_1A3AB5174();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (id)v3;
  }
  __break(1u);
  return result;
}

BOOL TTSAXResource.isSiriVoice.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_type) == (id)3;
}

id TTSAXResource.normalizedSiriDisplayName.getter()
{
  void *v0;
  id result;
  void *v2;
  uint64_t v3;

  result = objc_msgSend(v0, sel_name);
  if (result)
  {
    v2 = result;
    sub_1A3AB497C();

    sub_1A3AB49F4();
    swift_bridgeObjectRelease();
    sub_1A39A9EC0();
    v3 = sub_1A3AB5174();
    swift_bridgeObjectRelease();
    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id TTSAXResource.siriLocalizedDisplayName.getter()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  id result;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD v39[3];

  v1 = v0;
  v39[2] = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(v0, sel_type) != (id)3 && objc_msgSend(v0, sel_type) != (id)10)
    return 0;
  v2 = objc_msgSend(v0, sel_speechVoice);
  v3 = objc_msgSend(v2, sel_identifier);

  if (!v3)
  {
    sub_1A3AB497C();
    v3 = (id)sub_1A3AB4958();
    swift_bridgeObjectRelease();
  }
  v39[0] = 0;
  TTSGetComponentsInNamedSiriVoiceIdentifier(v3, v39, 0, 0);

  v4 = (void *)v39[0];
  v5 = (void *)objc_opt_self();
  v6 = v4;
  result = objc_msgSend(v5, sel_sharedInstance);
  if (!result)
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v8 = result;
  v9 = objc_msgSend(v1, sel_primaryLanguage);
  sub_1A3AB497C();

  if ((sub_1A3AB4AFC() & 1) != 0)
    swift_bridgeObjectRelease();
  v10 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  result = objc_msgSend(v1, sel_name);
  if (!result)
    goto LABEL_27;
  v11 = result;
  sub_1A3AB497C();

  v12 = sub_1A3AB49F4();
  v14 = v13;
  swift_bridgeObjectRelease();
  v39[0] = v12;
  v39[1] = v14;
  v15 = sub_1A39A9EC0();
  v16 = MEMORY[0x1E0DEA968];
  v37 = v15;
  v38 = v15;
  v35 = MEMORY[0x1E0DEA968];
  v36 = v15;
  sub_1A3AB5174();
  swift_bridgeObjectRelease();
  v17 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(v8, sel_outputVoiceDescriptorForOutputLanguageCode_voiceName_, v10, v17, v35, v36, v37, v38);

  if (v18)
  {
    v19 = objc_msgSend(v18, sel_localizedDisplay);
    if (v19)
    {
      v20 = v19;
      v21 = sub_1A3AB497C();
      v23 = v22;

      if (objc_msgSend(v1, sel_footprint) == (id)3)
      {
        v24 = (void *)objc_opt_self();
        v25 = (void *)sub_1A3AB4958();
        v26 = objc_msgSend(v24, sel_localizedStringForKey_, v25);

        sub_1A3AB497C();
        sub_1A39A4820(&qword_1EE6D23F8);
        v27 = swift_allocObject();
        *(_OWORD *)(v27 + 16) = xmmword_1A3ABF990;
        *(_QWORD *)(v27 + 56) = v16;
        *(_QWORD *)(v27 + 64) = sub_1A39C18E8();
        *(_QWORD *)(v27 + 32) = v21;
        *(_QWORD *)(v27 + 40) = v23;
        v21 = sub_1A3AB49AC();

        swift_bridgeObjectRelease();
      }
      else
      {

      }
      return (id)v21;
    }

    return 0;
  }
  if (!v6)
    return 0;
  v28 = v6;
  result = objc_msgSend(v5, sel_sharedInstance);
  if (result)
  {
    v29 = result;
    v30 = objc_msgSend(v1, sel_primaryLanguage);
    sub_1A3AB497C();

    if ((sub_1A3AB4AFC() & 1) != 0)
      swift_bridgeObjectRelease();
    v31 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
    v32 = objc_msgSend(v29, sel_outputVoiceDescriptorForOutputLanguageCode_voiceName_, v31, v28);

    if (v32)
    {
      v33 = objc_msgSend(v32, sel_localizedDisplay);
      if (v33)
      {
        v34 = v33;
        v21 = sub_1A3AB497C();

        return (id)v21;
      }

    }
    return 0;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t TTSAXResource.siriLanguageCode.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_primaryLanguage);
  v2 = sub_1A3AB497C();

  if ((sub_1A3AB4AFC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x41532D7261;
  }
  return v2;
}

void SpeechStringIntervalTree.init()(_QWORD *a1@<X8>)
{
  sub_1A39A18C8(a1);
}

uint64_t SpeechStringIntervalTree.insert(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A39A4820(&qword_1EE6D4568);
  return IntervalTree.insert(_:)(a1, v2);
}

uint64_t SpeechStringIntervalTree.intersections(with:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  swift_retain();
  v2 = sub_1A39A4820(&qword_1EE6D4568);
  v5 = IntervalTree.intersections(with:)(a1, v2, v3, v4);
  swift_release();
  v6 = sub_1A3A736D8(v5);
  swift_bridgeObjectRelease();
  if (v6)
    return v6;
  else
    return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1A3A736D8(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t j;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = a1;
  v9 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_18;
  sub_1A3AB5348();
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        MEMORY[0x1A85960B8](i, v1);
        v4 = i + 1;
        if (__OFADD__(i, 1))
          break;
        type metadata accessor for SpeechStringIntervalNode();
        if (!swift_dynamicCastClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        sub_1A3AB5324();
        sub_1A3AB5354();
        sub_1A3AB5360();
        sub_1A3AB5330();
        if (v4 == v2)
          return v9;
      }
      __break(1u);
    }
    else
    {
      for (j = 0; ; ++j)
      {
        v6 = j + 1;
        if (__OFADD__(j, 1))
          break;
        type metadata accessor for SpeechStringIntervalNode();
        v7 = swift_dynamicCastClass();
        if (!v7)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        v1 = v7;
        swift_retain();
        sub_1A3AB5324();
        sub_1A3AB5354();
        sub_1A3AB5360();
        sub_1A3AB5330();
        if (v6 == v2)
          return v9;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    sub_1A3AB5480();
    swift_bridgeObjectRelease();
    sub_1A3AB5348();
    swift_bridgeObjectRetain();
    v2 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
  }
  return v9;
}

Swift::Void __swiftcall SpeechStringIntervalTree.printTree()()
{
  sub_1A39A4820(&qword_1EE6D4568);
  IntervalTree.printTree()();
}

ValueMetadata *type metadata accessor for SpeechStringIntervalTree()
{
  return &type metadata for SpeechStringIntervalTree;
}

uint64_t TTSMarkup.Audio.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _UNKNOWN **v30;
  _QWORD v31[2];
  _OWORD v32[2];
  uint64_t v33;

  v33 = 0;
  memset(v32, 0, sizeof(v32));
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8))();
  if (!*(_QWORD *)(v5 + 16) || (v6 = sub_1A39A2734(6517363, 0xE300000000000000), (v7 & 1) == 0))
  {

    swift_bridgeObjectRelease();
    result = sub_1A39BFB74((uint64_t)v32);
    *(_QWORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  v8 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v6);
  v9 = *v8;
  v10 = v8[1];
  swift_bridgeObjectRetain();
  v11 = swift_bridgeObjectRelease();
  v31[0] = v9;
  v31[1] = v10;
  v12 = *(uint64_t (**)(uint64_t))((*v4 & *a1) + 0x100);
  v13 = v12(v11);
  if (v13 >> 62)
    v14 = sub_1A3AB5480();
  else
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  v15 = swift_bridgeObjectRelease();
  if (!v14)
  {

LABEL_28:
    sub_1A3A74300(v31, a2);
    return sub_1A3A74310((uint64_t)v31);
  }
  v16 = v12(v15);
  v17 = v16;
  if (!(v16 >> 62))
  {
    v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v18)
      goto LABEL_8;
LABEL_26:
    swift_bridgeObjectRelease();
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_27:
    swift_bridgeObjectRelease();
    v29 = sub_1A39A4820(&qword_1EE6D2BE0);
    v30 = &protocol witness table for <A> [A];

    *(_QWORD *)&v28 = v21;
    sub_1A3A37854((uint64_t)&v28, (uint64_t)v32);
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  result = sub_1A3AB5480();
  v18 = result;
  if (!result)
    goto LABEL_26;
LABEL_8:
  if (v18 >= 1)
  {
    v20 = 0;
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v17 & 0xC000000000000001) != 0)
        v22 = (id)MEMORY[0x1A85960B8](v20, v17);
      else
        v22 = *(id *)(v17 + 8 * v20 + 32);
      v23 = v22;
      sub_1A39D518C((uint64_t)&v26);

      if (v27)
      {
        sub_1A39A1AB8(&v26, (uint64_t)&v28);
        sub_1A39A1AB8(&v28, (uint64_t)&v26);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v21 = sub_1A39BFBD8(0, v21[2] + 1, 1, v21);
        v25 = v21[2];
        v24 = v21[3];
        if (v25 >= v24 >> 1)
          v21 = sub_1A39BFBD8((_QWORD *)(v24 > 1), v25 + 1, 1, v21);
        v21[2] = v25 + 1;
        sub_1A39A1AB8(&v26, (uint64_t)&v21[5 * v25 + 4]);
      }
      else
      {
        sub_1A39BFB74((uint64_t)&v26);
      }
      ++v20;
    }
    while (v18 != v20);
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t static TTSMarkup.Audio.tag.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = byte_1EE6D4570;
  return result;
}

uint64_t static TTSMarkup.Audio.tag.setter(char *a1)
{
  char v1;
  uint64_t result;

  v1 = *a1;
  result = swift_beginAccess();
  byte_1EE6D4570 = v1;
  return result;
}

uint64_t (*static TTSMarkup.Audio.tag.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

unint64_t TTSMarkup.Audio.attributes.getter()
{
  _QWORD *v0;
  uint64_t inited;
  uint64_t v2;

  sub_1A39A4820(&qword_1EE6D2368);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(inited + 32) = 6517363;
  *(_QWORD *)(inited + 40) = 0xE300000000000000;
  v2 = v0[1];
  *(_QWORD *)(inited + 48) = *v0;
  *(_QWORD *)(inited + 56) = v2;
  swift_bridgeObjectRetain();
  return sub_1A39A5780(inited);
}

uint64_t TTSMarkup.Audio.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A3A37AB4(v1 + 16, a1);
}

uint64_t TTSMarkup.Audio.content.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1A3A37854(a1, v1 + 16);
}

uint64_t (*TTSMarkup.Audio.content.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.Audio.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(a3 + 40))(v3);
}

uint64_t sub_1A3A73D7C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = byte_1EE6D4570;
  return result;
}

unint64_t sub_1A3A73DC4()
{
  _QWORD *v0;
  uint64_t inited;
  uint64_t v2;

  sub_1A39A4820(&qword_1EE6D2368);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(inited + 32) = 6517363;
  *(_QWORD *)(inited + 40) = 0xE300000000000000;
  v2 = v0[1];
  *(_QWORD *)(inited + 48) = *v0;
  *(_QWORD *)(inited + 56) = v2;
  swift_bridgeObjectRetain();
  return sub_1A39A5780(inited);
}

uint64_t sub_1A3A73E2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A3A37AB4(v1 + 16, a1);
}

void (*sub_1A3A73E38(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = TTSMarkupSpeech.eventTaps.modify(v2);
  return sub_1A3A73E94;
}

uint64_t TTSMarkup.Desc.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _UNKNOWN **v30;
  _OWORD v31[2];
  __int128 v32;
  uint64_t v33;

  v33 = 0;
  v32 = 0u;
  memset(v31, 0, sizeof(v31));
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8))();
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_1A39A2734(0x676E616C3A6C6D78, 0xE800000000000000), (v7 & 1) != 0))
  {
    v8 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v6);
    v10 = *v8;
    v9 = v8[1];
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRelease();
    *((_QWORD *)&v32 + 1) = v10;
    v33 = v9;
  }
  else
  {
    v11 = swift_bridgeObjectRelease();
  }
  v12 = *(uint64_t (**)(uint64_t))((*v4 & *a1) + 0x100);
  v13 = v12(v11);
  if (v13 >> 62)
    v14 = sub_1A3AB5480();
  else
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  v15 = swift_bridgeObjectRelease();
  if (!v14)
  {

LABEL_29:
    sub_1A3A74334((uint64_t)v31, a2);
    return sub_1A3A74344((uint64_t)v31);
  }
  v16 = v12(v15);
  v17 = v16;
  if (!(v16 >> 62))
  {
    v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v18)
      goto LABEL_10;
LABEL_27:
    swift_bridgeObjectRelease();
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_28:
    swift_bridgeObjectRelease();
    v29 = sub_1A39A4820(&qword_1EE6D2BE0);
    v30 = &protocol witness table for <A> [A];

    *(_QWORD *)&v28 = v21;
    sub_1A3A37854((uint64_t)&v28, (uint64_t)v31);
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  result = sub_1A3AB5480();
  v18 = result;
  if (!result)
    goto LABEL_27;
LABEL_10:
  if (v18 >= 1)
  {
    v20 = 0;
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v17 & 0xC000000000000001) != 0)
        v22 = (id)MEMORY[0x1A85960B8](v20, v17);
      else
        v22 = *(id *)(v17 + 8 * v20 + 32);
      v23 = v22;
      sub_1A39D518C((uint64_t)&v26);

      if (v27)
      {
        sub_1A39A1AB8(&v26, (uint64_t)&v28);
        sub_1A39A1AB8(&v28, (uint64_t)&v26);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v21 = sub_1A39BFBD8(0, v21[2] + 1, 1, v21);
        v25 = v21[2];
        v24 = v21[3];
        if (v25 >= v24 >> 1)
          v21 = sub_1A39BFBD8((_QWORD *)(v24 > 1), v25 + 1, 1, v21);
        v21[2] = v25 + 1;
        sub_1A39A1AB8(&v26, (uint64_t)&v21[5 * v25 + 4]);
      }
      else
      {
        sub_1A39BFB74((uint64_t)&v26);
      }
      ++v20;
    }
    while (v18 != v20);
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

void static TTSMarkup.Desc.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

unint64_t TTSMarkup.Desc.attributes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;

  v1 = *(_QWORD *)(v0 + 48);
  if (!v1)
    return sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
  v2 = *(_QWORD *)(v0 + 40);
  sub_1A39A4820(&qword_1EE6D2368);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(inited + 32) = 0x676E616C3A6C6D78;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v1;
  swift_bridgeObjectRetain();
  return sub_1A39A5780(inited);
}

uint64_t TTSMarkup.Desc.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A3A37AB4(v1, a1);
}

uint64_t TTSMarkup.Desc.content.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1A3A37854(a1, v1);
}

uint64_t (*TTSMarkup.Desc.content.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

void sub_1A3A74244(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

unint64_t sub_1A3A74250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;

  v1 = *(_QWORD *)(v0 + 48);
  if (!v1)
    return sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
  v2 = *(_QWORD *)(v0 + 40);
  sub_1A39A4820(&qword_1EE6D2368);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(inited + 32) = 0x676E616C3A6C6D78;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v1;
  swift_bridgeObjectRetain();
  return sub_1A39A5780(inited);
}

uint64_t sub_1A3A742F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A3A37AB4(v1, a1);
}

uint64_t sub_1A3A74300(_QWORD *a1, uint64_t a2)
{
  return _s5AudioVwcp(a2, a1);
}

uint64_t sub_1A3A74310(uint64_t a1)
{
  _s5AudioVwxx(a1);
  return a1;
}

uint64_t sub_1A3A74334(uint64_t a1, uint64_t a2)
{
  return _s4DescVwcp(a2, a1);
}

uint64_t sub_1A3A74344(uint64_t a1)
{
  _s4DescVwxx(a1);
  return a1;
}

uint64_t _s5AudioVwxx(uint64_t a1)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 40))
    return sub_1A39A47C4(a1 + 16);
  return result;
}

uint64_t _s5AudioVwcp(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2 + 2;
  v6 = a2[5];
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v7;
    (**(void (***)(uint64_t, _QWORD *, uint64_t))(v6 - 8))(a1 + 16, v5, v6);
  }
  else
  {
    v8 = *((_OWORD *)v5 + 1);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 48) = v5[4];
  }
  return a1;
}

uint64_t _s5AudioVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 40) = v4;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 16, a2 + 16);
      return a1;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v6;
    return a1;
  }
  if (!v4)
  {
    sub_1A39A47C4(a1 + 16);
    goto LABEL_7;
  }
  sub_1A39B8070((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  return a1;
}

uint64_t _s5AudioVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 40))
    sub_1A39A47C4(a1 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for TTSMarkup.Audio()
{
  return &type metadata for TTSMarkup.Audio;
}

uint64_t _s4DescVwxx(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    sub_1A39A47C4(a1);
  return swift_bridgeObjectRelease();
}

uint64_t _s4DescVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s4DescVwca(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    sub_1A39A47C4(a1);
    goto LABEL_7;
  }
  sub_1A39B8070((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s4DescVwta(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24))
    sub_1A39A47C4(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s4DescVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s4DescVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Desc()
{
  return &type metadata for TTSMarkup.Desc;
}

uint64_t TTSSpeechQueue.executor.getter()
{
  return swift_retain();
}

BOOL static TTSSpeechQueue.Event.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t TTSSpeechQueue.Event.hash(into:)()
{
  return sub_1A3AB5708();
}

_QWORD *sub_1A3A747EC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 152))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1A3A7482C(char *a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;

  v2 = *a2;
  v4 = *a1;
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 160))(&v4);
}

uint64_t sub_1A3A74868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16[3];

  v1 = v0;
  v2 = sub_1A3AB4724();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A39AAC7C();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  swift_retain_n();
  v7 = sub_1A3AB470C();
  v8 = sub_1A3AB4FC4();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v16[0] = v10;
    *(_DWORD *)v9 = 136315138;
    v14 = v9 + 4;
    swift_beginAccess();
    LOBYTE(v15) = *(_BYTE *)(v1 + 32);
    v11 = sub_1A3AB49E8();
    v15 = sub_1A39A2878(v11, v12, v16);
    sub_1A3AB5138();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A3940000, v7, v8, "State => %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A859781C](v10, -1, -1);
    MEMORY[0x1A859781C](v9, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_beginAccess();
  LOBYTE(v15) = *(_BYTE *)(v1 + 32);
  return sub_1A3AB4760();
}

uint64_t sub_1A3A74A78@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 32);
  return result;
}

uint64_t sub_1A3A74AB8(char *a1)
{
  uint64_t v1;
  char v2;

  v2 = *a1;
  swift_beginAccess();
  *(_BYTE *)(v1 + 32) = v2;
  return sub_1A3A74868();
}

uint64_t (*sub_1A3A74AF8(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A3A74B38;
}

uint64_t sub_1A3A74B38(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return sub_1A3A74868();
  return result;
}

uint64_t sub_1A3A74B68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  _BOOL4 v15;
  uint8_t *v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  os_log_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint8_t *v55;
  os_log_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62[3];

  v1 = v0;
  v2 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  MEMORY[0x1E0C80A78](v2);
  v58 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A3AB4724();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A39AAC7C();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  swift_retain_n();
  v13 = sub_1A3AB470C();
  v14 = sub_1A3AB4FC4();
  v15 = os_log_type_enabled(v13, (os_log_type_t)v14);
  v59 = v1;
  if (v15)
  {
    v54 = v14;
    v56 = v13;
    v57 = v8;
    v16 = (uint8_t *)swift_slowAlloc();
    v53 = swift_slowAlloc();
    v62[0] = v53;
    v55 = v16;
    *(_DWORD *)v16 = 136315138;
    swift_beginAccess();
    v17 = *(_QWORD *)(v1 + 40);
    v18 = *(_QWORD *)(v17 + 16);
    v19 = MEMORY[0x1E0DEE9D8];
    if (v18)
    {
      v61 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1A39E9F4C(0, v18, 0);
      v20 = v17 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      v52 = v5;
      v21 = *(_QWORD *)(v5 + 72);
      v19 = v61;
      do
      {
        sub_1A3A7C288(v20, (uint64_t)v7);
        v60 = *(_OWORD *)v7;
        swift_unknownObjectRetain();
        sub_1A3A7C2CC((uint64_t)v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1A39E9F4C(0, *(_QWORD *)(v19 + 16) + 1, 1);
          v19 = v61;
        }
        v23 = *(_QWORD *)(v19 + 16);
        v22 = *(_QWORD *)(v19 + 24);
        if (v23 >= v22 >> 1)
        {
          sub_1A39E9F4C(v22 > 1, v23 + 1, 1);
          v19 = v61;
        }
        *(_QWORD *)(v19 + 16) = v23 + 1;
        *(_OWORD *)(v19 + 16 * v23 + 32) = v60;
        v20 += v21;
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease();
      v5 = v52;
    }
    v24 = v55;
    v25 = sub_1A39A4820(&qword_1EE6D32A8);
    v26 = MEMORY[0x1A85959A4](v19, v25);
    v28 = v27;
    swift_bridgeObjectRelease();
    v61 = sub_1A39A2878(v26, v28, v62);
    sub_1A3AB5138();
    swift_bridgeObjectRelease();
    v1 = v59;
    swift_release_n();
    v29 = v56;
    _os_log_impl(&dword_1A3940000, v56, (os_log_type_t)v54, "WorkItems => %s", v24, 0xCu);
    v30 = v53;
    swift_arrayDestroy();
    MEMORY[0x1A859781C](v30, -1, -1);
    MEMORY[0x1A859781C](v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v57);
  }
  else
  {
    swift_release_n();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  swift_beginAccess();
  v31 = *(_QWORD *)(v1 + 40);
  v32 = *(_QWORD *)(v31 + 16);
  v33 = MEMORY[0x1E0DEE9D8];
  if (v32)
  {
    v61 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1A39E9F4C(0, v32, 0);
    v34 = *(unsigned __int8 *)(v5 + 80);
    *(_QWORD *)&v60 = v31;
    v35 = v31 + ((v34 + 32) & ~v34);
    v36 = *(_QWORD *)(v5 + 72);
    v33 = v61;
    do
    {
      sub_1A3A7C288(v35, (uint64_t)v7);
      v37 = *((_QWORD *)v7 + 1);
      ObjectType = swift_getObjectType();
      v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 80);
      v40 = swift_unknownObjectRetain();
      v41 = v39(v40, ObjectType, v37);
      sub_1A3A7C2CC((uint64_t)v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A39E9F4C(0, *(_QWORD *)(v33 + 16) + 1, 1);
        v33 = v61;
      }
      v43 = *(_QWORD *)(v33 + 16);
      v42 = *(_QWORD *)(v33 + 24);
      if (v43 >= v42 >> 1)
      {
        sub_1A39E9F4C(v42 > 1, v43 + 1, 1);
        v33 = v61;
      }
      *(_QWORD *)(v33 + 16) = v43 + 1;
      v44 = v33 + 16 * v43;
      *(_QWORD *)(v44 + 32) = v41;
      *(_QWORD *)(v44 + 40) = v37;
      v35 += v36;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
    v1 = v59;
  }
  v45 = v1 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
  v46 = sub_1A3AB4D00();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = (uint64_t)v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v58, v45, v46);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v48, 0, 1, v46);
  v49 = sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  v50 = (_QWORD *)swift_allocObject();
  v50[2] = v1;
  v50[3] = v49;
  v50[4] = v1;
  v50[5] = v33;
  swift_retain_n();
  sub_1A39DDD84(v48, (uint64_t)&unk_1EE6D46E0, (uint64_t)v50);
  return swift_release();
}

uint64_t sub_1A3A750C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  type metadata accessor for TTSSpeechQueue(0);
  sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  sub_1A3AB4C70();
  return swift_task_switch();
}

uint64_t sub_1A3A75138()
{
  uint64_t v0;

  sub_1A3AB4CDC();
  *(_QWORD *)(v0 + 32) = sub_1A3AB4CD0();
  sub_1A3AB4C70();
  return swift_task_switch();
}

uint64_t sub_1A3A751A0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release();
  v2 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 280);
  v3 = swift_bridgeObjectRetain();
  v2(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for TTSSpeechQueue.QueueableWrapper(uint64_t a1)
{
  return sub_1A39B9724(a1, qword_1EE6D4940);
}

uint64_t TTSSpeechQueue.taskPriority.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
  v4 = sub_1A3AB4D00();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1A3A75248@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 272))();
  *a2 = result;
  return result;
}

uint64_t sub_1A3A75278(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 280);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A3A752A8()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A3AB47A8();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1A3A75318()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1A3AB47B4();
}

void (*sub_1A3A75384(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1A3AB479C();
  return sub_1A3A753FC;
}

void sub_1A3A753FC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t sub_1A3A75448(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 296))();
}

uint64_t sub_1A3A75470(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = sub_1A39A4820((uint64_t *)&unk_1EE6D4578);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 304))(v6);
}

uint64_t sub_1A3A754FC()
{
  swift_beginAccess();
  sub_1A39A4820(&qword_1EE6D09B0);
  sub_1A3AB4784();
  return swift_endAccess();
}

uint64_t sub_1A3A7555C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_1A39A4820((uint64_t *)&unk_1EE6D4578);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  sub_1A39A4820(&qword_1EE6D09B0);
  sub_1A3AB4790();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*sub_1A3A75630(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_1A39A4820((uint64_t *)&unk_1EE6D4578);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue__uiActions;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_1A39A4820(&qword_1EE6D09B0);
  sub_1A3AB4784();
  swift_endAccess();
  return sub_1A3A756F8;
}

void sub_1A3A756F8(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 104), v3[14], v3[10]);
  v5 = (void *)v3[13];
  v6 = (void *)v3[14];
  v8 = v3[11];
  v7 = (void *)v3[12];
  v9 = v3[10];
  if ((a2 & 1) != 0)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess();
    sub_1A3AB4790();
    swift_endAccess();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
  }
  else
  {
    swift_beginAccess();
    sub_1A3AB4790();
    swift_endAccess();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v10(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t sub_1A3A75810(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 + 25) = a2;
  *(_QWORD *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 48) = v2;
  sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  *(_QWORD *)(v3 + 56) = swift_task_alloc();
  type metadata accessor for TTSSpeechQueue(0);
  sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  *(_QWORD *)(v3 + 64) = sub_1A3AB4C70();
  *(_QWORD *)(v3 + 72) = v4;
  return swift_task_switch();
}

uint64_t sub_1A3A758A4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  *(_QWORD *)(v0 + 32) = MEMORY[0x1E0DEE9D8];
  v1 = *(_BYTE *)(v0 + 25);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = sub_1A3A75D48(v3, (unint64_t *)(v0 + 32));
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v2;
  *(_QWORD *)(v5 + 32) = v4;
  *(_BYTE *)(v5 + 40) = v1;
  v6 = OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_schedulingTask;
  *(_QWORD *)(v0 + 80) = v5;
  *(_QWORD *)(v0 + 88) = v6;
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v7 + v6);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v8)
  {
    *(_QWORD *)(v0 + 96) = v8;
    *(_QWORD *)(v0 + 104) = v8;
    swift_retain();
    swift_retain();
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v9;
    sub_1A39A4820(&qword_1EE6D09F0);
    *v9 = v0;
    v9[1] = sub_1A3A75A9C;
    return sub_1A3AB4DC0();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 56);
    v12 = v7 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
    v13 = sub_1A3AB4D00();
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = 0;
    v15[3] = 0;
    v15[4] = &unk_1EE6D4598;
    v15[5] = v5;
    swift_retain();
    *(_QWORD *)(v7 + v6) = sub_1A39CDB64(v11, (uint64_t)&unk_1EE6D45A8, (uint64_t)v15);
    swift_release();
    swift_release();
    v16 = *(_QWORD *)(v0 + 32);
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v16);
  }
}

uint64_t sub_1A3A75A9C()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A75AF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  sub_1A39CD704(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v2 + v1);
  if (*(_QWORD *)(v0 + 96))
  {
    if (v3)
    {
      swift_retain();
      swift_retain();
      sub_1A39A4820(&qword_1EE6D09F0);
      v4 = sub_1A3AB4DA8();
      swift_release();
      swift_release();
      v1 = *(_QWORD *)(v0 + 88);
      v2 = *(_QWORD *)(v0 + 48);
      if ((v4 & 1) != 0)
        goto LABEL_10;
      v3 = *(_QWORD *)(v2 + v1);
    }
  }
  else if (!v3)
  {
    goto LABEL_10;
  }
  swift_retain();
  swift_release();
  if (v3)
  {
LABEL_9:
    *(_QWORD *)(v0 + 96) = v3;
    *(_QWORD *)(v0 + 104) = v3;
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v5;
    sub_1A39A4820(&qword_1EE6D09F0);
    *v5 = v0;
    v5[1] = sub_1A3A75A9C;
    return sub_1A3AB4DC0();
  }
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v2 + v1);
  if (v3)
  {
    swift_retain();
    goto LABEL_9;
  }
LABEL_10:
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = v2 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
  v10 = sub_1A3AB4D00();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = &unk_1EE6D4598;
  v12[5] = v7;
  swift_retain();
  *(_QWORD *)(v2 + v1) = sub_1A39CDB64(v8, (uint64_t)&unk_1EE6D45A8, (uint64_t)v12);
  swift_release();
  swift_release();
  swift_release();
  v13 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
}

uint64_t type metadata accessor for TTSSpeechQueue(uint64_t a1)
{
  return sub_1A39B9724(a1, qword_1EE6D4960);
}

unint64_t sub_1A3A75D48(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;

  v50 = a2;
  v4 = sub_1A39A4820(&qword_1EE6D4770);
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  MEMORY[0x1E0C80A78](v4);
  v47 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_1A39A4820(&qword_1EE6D30F0);
  v52 = *(_QWORD *)(v56 - 8);
  v6 = MEMORY[0x1E0C80A78](v56);
  v54 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v53 = (char *)&v39 - v8;
  v9 = sub_1A39A4820(&qword_1EE6D4618);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v39 - v13;
  v15 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v46 = (uint64_t)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v40 = (uint64_t)&v39 - v19;
  v45 = *(_QWORD *)(a1 + 16);
  if (!v45)
    return MEMORY[0x1E0DEE9D8];
  v39 = v2;
  v42 = *MEMORY[0x1E0DF0A50];
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  swift_bridgeObjectRetain();
  v20 = 0;
  v21 = MEMORY[0x1E0DEE9D8];
  v43 = v16;
  v44 = a1;
  do
  {
    v51 = v21;
    v55 = *(_OWORD *)(a1 + 16 * v20 + 32);
    v22 = v15;
    v23 = v41(v12, 1, 1, v15);
    MEMORY[0x1E0C80A78](v23);
    v24 = (uint64_t)v12;
    *(&v39 - 4) = (uint64_t)v12;
    *(_OWORD *)(&v39 - 3) = v55;
    (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, v42, v49);
    swift_unknownObjectRetain();
    v25 = v53;
    sub_1A3AB4E98();
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v54, v25, v56);
    v26 = v50;
    v27 = *v50;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v26 = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v27 = sub_1A3A7C660(0, *(_QWORD *)(v27 + 16) + 1, 1, v27);
      *v50 = v27;
    }
    v30 = *(_QWORD *)(v27 + 16);
    v29 = *(_QWORD *)(v27 + 24);
    v15 = v22;
    if (v30 >= v29 >> 1)
    {
      v27 = sub_1A3A7C660(v29 > 1, v30 + 1, 1, v27);
      *v50 = v27;
    }
    *(_QWORD *)(v27 + 16) = v30 + 1;
    v31 = v52;
    v32 = v27
        + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))
        + *(_QWORD *)(v52 + 72) * v30;
    v33 = v56;
    (*(void (**)(unint64_t, char *, uint64_t))(v52 + 32))(v32, v54, v56);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v53, v33);
    v12 = (char *)v24;
    sub_1A3A7C8B8(v24, (uint64_t)v14);
    sub_1A39B11F4(v24, &qword_1EE6D4618);
    swift_unknownObjectRelease();
    v34 = v43;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v14, 1, v22) == 1)
    {
      sub_1A39B11F4((uint64_t)v14, &qword_1EE6D4618);
      a1 = v44;
      v21 = v51;
    }
    else
    {
      v35 = v40;
      sub_1A3A7C3A8((uint64_t)v14, v40);
      sub_1A3A7C3A8(v35, v46);
      v21 = v51;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v21 = sub_1A3A7C458(0, *(_QWORD *)(v21 + 16) + 1, 1, v21);
      v37 = *(_QWORD *)(v21 + 16);
      v36 = *(_QWORD *)(v21 + 24);
      if (v37 >= v36 >> 1)
        v21 = sub_1A3A7C458(v36 > 1, v37 + 1, 1, v21);
      *(_QWORD *)(v21 + 16) = v37 + 1;
      sub_1A3A7C3A8(v46, v21+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(_QWORD *)(v34 + 72) * v37);
      a1 = v44;
    }
    ++v20;
  }
  while (v45 != v20);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_1A3A761EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v4 + 201) = a4;
  *(_QWORD *)(v4 + 72) = a2;
  *(_QWORD *)(v4 + 80) = a3;
  *(_QWORD *)(v4 + 64) = a1;
  v5 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  *(_QWORD *)(v4 + 88) = v5;
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 104) = swift_task_alloc();
  sub_1A39A4820(&qword_1EE6D4748);
  *(_QWORD *)(v4 + 112) = swift_task_alloc();
  v6 = sub_1A39A4820(&qword_1EE6D46A8);
  *(_QWORD *)(v4 + 120) = v6;
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 136) = swift_task_alloc();
  type metadata accessor for TTSSpeechQueue(0);
  sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  *(_QWORD *)(v4 + 144) = sub_1A3AB4C70();
  *(_QWORD *)(v4 + 152) = v7;
  return swift_task_switch();
}

uint64_t sub_1A3A762DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t ObjectType;
  void (*v8)(char *__return_ptr, uint64_t, _QWORD);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 *v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(char *__return_ptr, uint64_t, _QWORD);
  char v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t result;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  _QWORD *v83;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = (__int128 *)(v2 + 32);
    swift_bridgeObjectRetain();
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v6 = v3;
    do
    {
      v77 = *v4;
      ObjectType = swift_getObjectType();
      v8 = *(void (**)(char *__return_ptr, uint64_t, _QWORD))(*((_QWORD *)&v77 + 1) + 40);
      swift_unknownObjectRetain();
      v8(&v82, ObjectType, *((_QWORD *)&v77 + 1));
      if ((v82 & 1) != 0)
      {
        swift_unknownObjectRelease();
      }
      else
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v83 = v5;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1A39E9F4C(0, v5[2] + 1, 1);
          v5 = v83;
        }
        v11 = v5[2];
        v10 = v5[3];
        if (v11 >= v10 >> 1)
        {
          sub_1A39E9F4C(v10 > 1, v11 + 1, 1);
          v5 = v83;
        }
        v5[2] = v11 + 1;
        *(_OWORD *)&v5[2 * v11 + 4] = v77;
      }
      ++v4;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v5[2];
  v76 = v1;
  if (v12)
  {
    v14 = v5[4];
    v13 = v5[5];
    v15 = v12 - 1;
    if (v12 == 1)
    {
      swift_unknownObjectRetain();
    }
    else
    {
      v78 = v3;
      swift_retain();
      swift_unknownObjectRetain();
      v16 = v14;
      v17 = v13;
      v18 = v5 + 7;
      do
      {
        v19 = *(v18 - 1);
        v20 = *v18;
        v21 = swift_getObjectType();
        v22 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 24);
        swift_unknownObjectRetain();
        v23 = v22(v21, v20);
        v24 = swift_getObjectType();
        if (v23 < (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v24, v17))
        {
          v16 = v19;
          v17 = v20;
        }
        swift_unknownObjectRelease();
        v18 += 2;
        --v15;
      }
      while (v15);
      swift_release();
      v13 = v17;
      v14 = v16;
      v1 = v76;
      v3 = v78;
    }
    swift_release();
  }
  else
  {
    swift_release();
    v14 = 0;
    v13 = 0;
  }
  *(_QWORD *)(v1 + 160) = v14;
  v25 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v26 = (__int128 *)(*(_QWORD *)(v1 + 64) + 32);
    swift_bridgeObjectRetain();
    v27 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v79 = *v26;
      v28 = swift_getObjectType();
      v29 = *(void (**)(char *__return_ptr, uint64_t, _QWORD))(*((_QWORD *)&v79 + 1) + 48);
      swift_unknownObjectRetain();
      v29(&v82, v28, *((_QWORD *)&v79 + 1));
      if ((v82 & 1) != 0)
      {
        swift_unknownObjectRelease();
      }
      else
      {
        v30 = swift_isUniquelyReferenced_nonNull_native();
        v83 = v27;
        if ((v30 & 1) == 0)
        {
          sub_1A39E9F4C(0, v27[2] + 1, 1);
          v27 = v83;
        }
        v32 = v27[2];
        v31 = v27[3];
        if (v32 >= v31 >> 1)
        {
          sub_1A39E9F4C(v31 > 1, v32 + 1, 1);
          v27 = v83;
        }
        v27[2] = v32 + 1;
        *(_OWORD *)&v27[2 * v32 + 4] = v79;
      }
      ++v26;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    v25 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v33 = v27[2];
    if (v33)
      goto LABEL_34;
LABEL_40:
    swift_release();
    v35 = MEMORY[0x1E0DEE9D8];
    v34 = v13;
    goto LABEL_41;
  }
  v27 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v33 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (!v33)
    goto LABEL_40;
LABEL_34:
  v80 = v14;
  v34 = v13;
  v83 = v25;
  sub_1A3A7C9D4(0, v33, 0);
  v35 = (uint64_t)v83;
  v36 = v27 + 5;
  do
  {
    v37 = *v36;
    v38 = swift_getObjectType();
    v39 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 24);
    swift_unknownObjectRetain();
    v40 = v39(v38, v37);
    swift_unknownObjectRelease();
    v83 = (_QWORD *)v35;
    v42 = *(_QWORD *)(v35 + 16);
    v41 = *(_QWORD *)(v35 + 24);
    if (v42 >= v41 >> 1)
    {
      sub_1A3A7C9D4(v41 > 1, v42 + 1, 1);
      v35 = (uint64_t)v83;
    }
    *(_QWORD *)(v35 + 16) = v42 + 1;
    *(_QWORD *)(v35 + 8 * v42 + 32) = v40;
    v36 += 2;
    --v33;
  }
  while (v33);
  swift_release();
  v1 = v76;
  v14 = v80;
LABEL_41:
  *(_QWORD *)(v1 + 168) = sub_1A3A7DCB0(v35);
  swift_bridgeObjectRelease();
  if (v14)
  {
    swift_unknownObjectRetain();
    v43 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 176) = v43;
    *v43 = v1;
    v43[1] = sub_1A3A76A88;
    return sub_1A3A7DD20(*(_QWORD *)(v1 + 72), v14, v34);
  }
  else if (*(_QWORD *)(*(_QWORD *)(v1 + 168) + 16))
  {
    swift_bridgeObjectRetain();
    v45 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 184) = v45;
    *v45 = v1;
    v45[1] = sub_1A3A76E40;
    return sub_1A3A7EC80(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 168));
  }
  else
  {
    swift_bridgeObjectRelease();
    v46 = *(_QWORD *)(v1 + 80);
    v71 = *(_QWORD *)(v46 + 16);
    if (v71)
    {
      v69 = *(_QWORD *)(v1 + 128);
      v47 = *(_QWORD *)(v1 + 96);
      v74 = *(_QWORD *)(v1 + 104);
      v68 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
      v70 = v46 + v68;
      v48 = *(_QWORD *)(v1 + 72) + 40;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      v49 = 0;
      v75 = *(_QWORD *)(v47 + 72);
      while (1)
      {
        v50 = v70 + v49 * v75;
        v81 = *(_QWORD *)(*(_QWORD *)v48 + 16);
        v73 = v49;
        if (v81)
          break;
        v53 = 0;
LABEL_56:
        v63 = *(_QWORD *)(v1 + 136);
        v64 = *(_QWORD *)(v1 + 120);
        *(_BYTE *)(v1 + 200) = 0;
        sub_1A39A4820(&qword_1EE6D4690);
        sub_1A3AB4E50();
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v63, v64);
        result = swift_beginAccess();
        if (*(_QWORD *)(*(_QWORD *)v48 + 16) < v53)
          goto LABEL_63;
        v65 = *(_QWORD *)(v1 + 112);
        v49 = v73 + 1;
        sub_1A3A7C288(v50, v65);
        sub_1A3A7D5B8(v53, v53, v65);
        swift_endAccess();
        sub_1A3A74B68();
        if (v73 + 1 == v71)
        {
          swift_bridgeObjectRelease();
          goto LABEL_59;
        }
      }
      v51 = *(_QWORD *)(v50 + 8);
      v72 = v70 + v49 * v75;
      result = swift_getObjectType();
      v52 = result;
      v53 = 0;
      v54 = *(uint64_t (**)(uint64_t, uint64_t))(v51 + 24);
      v55 = v68;
      while (1)
      {
        v56 = *(_QWORD *)v48;
        if (v53 >= *(_QWORD *)(*(_QWORD *)v48 + 16))
          break;
        v57 = v48;
        v58 = *(_QWORD *)(v76 + 104);
        sub_1A3A7C288(v56 + v55, v58);
        v59 = v54(v52, v51);
        v60 = *(_QWORD *)(v74 + 8);
        v61 = swift_getObjectType();
        v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 24))(v61, v60);
        result = sub_1A3A7C2CC(v58);
        if (v62 < v59)
        {
          v1 = v76;
          v48 = v57;
          goto LABEL_55;
        }
        ++v53;
        v55 += v75;
        v48 = v57;
        if (v81 == v53)
        {
          v1 = v76;
          v53 = v81;
LABEL_55:
          v50 = v72;
          goto LABEL_56;
        }
      }
      __break(1u);
LABEL_63:
      __break(1u);
    }
    else
    {
LABEL_59:
      if ((*(_BYTE *)(v1 + 201) & 1) != 0)
      {
        v66 = *(_QWORD *)(v1 + 72);
        LOBYTE(v83) = 3;
        (*(void (**)(_QWORD **))(*(_QWORD *)v66 + 160))(&v83);
        v67 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v1 + 192) = v67;
        *v67 = v1;
        v67[1] = sub_1A3A77198;
        return sub_1A3A79F24();
      }
      else
      {
        swift_unknownObjectRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(void))(v1 + 8))();
      }
    }
  }
  return result;
}

uint64_t sub_1A3A76A88()
{
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1A3A76AE0()
{
  uint64_t *v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;

  v1 = v0;
  if (*(_QWORD *)(v0[21] + 16))
  {
    swift_bridgeObjectRetain();
    v2 = (_QWORD *)swift_task_alloc();
    v0[23] = (uint64_t)v2;
    *v2 = v0;
    v2[1] = sub_1A3A76E40;
    return sub_1A3A7EC80(v0[9], v0[21]);
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = v0[10];
    v28 = *(_QWORD *)(v4 + 16);
    if (v28)
    {
      v26 = v0[16];
      v5 = v0[12];
      v31 = v1[13];
      v25 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      v27 = v4 + v25;
      v6 = v1[9] + 40;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      v7 = 0;
      v33 = *(_QWORD *)(v5 + 72);
      while (1)
      {
        v8 = v27 + v7 * v33;
        v34 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        if (v34)
          break;
        v10 = 0;
LABEL_14:
        v20 = v1[17];
        v21 = v1[15];
        *((_BYTE *)v1 + 200) = 0;
        sub_1A39A4820(&qword_1EE6D4690);
        sub_1A3AB4E50();
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v20, v21);
        result = swift_beginAccess();
        if (*(_QWORD *)(*(_QWORD *)v6 + 16) < v10)
          goto LABEL_21;
        v22 = v1[14];
        ++v7;
        sub_1A3A7C288(v8, v22);
        sub_1A3A7D5B8(v10, v10, v22);
        swift_endAccess();
        sub_1A3A74B68();
        if (v7 == v28)
        {
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }
      }
      v29 = v27 + v7 * v33;
      v30 = v7;
      v9 = *(_QWORD *)(v8 + 8);
      result = swift_getObjectType();
      v32 = result;
      v10 = 0;
      v11 = v9;
      v12 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 24);
      v13 = v25;
      while (v10 < *(_QWORD *)(*(_QWORD *)v6 + 16))
      {
        v14 = v1;
        v15 = v1[13];
        sub_1A3A7C288(*(_QWORD *)v6 + v13, v15);
        v16 = v12(v32, v11);
        v17 = *(_QWORD *)(v31 + 8);
        ObjectType = swift_getObjectType();
        v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(ObjectType, v17);
        result = sub_1A3A7C2CC(v15);
        if (v19 < v16)
        {
          v1 = v14;
          goto LABEL_13;
        }
        ++v10;
        v13 += v33;
        v1 = v14;
        if (v34 == v10)
        {
          v10 = v34;
LABEL_13:
          v8 = v29;
          v7 = v30;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
    }
    else
    {
LABEL_17:
      if ((*((_BYTE *)v1 + 201) & 1) != 0)
      {
        v23 = v1[9];
        v35 = 3;
        (*(void (**)(char *))(*(_QWORD *)v23 + 160))(&v35);
        v24 = (_QWORD *)swift_task_alloc();
        v1[24] = (uint64_t)v24;
        *v24 = v1;
        v24[1] = sub_1A3A77198;
        return sub_1A3A79F24();
      }
      else
      {
        swift_unknownObjectRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return ((uint64_t (*)(void))v1[1])();
      }
    }
  }
  return result;
}

uint64_t sub_1A3A76E40()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease_n();
  return swift_task_switch();
}

uint64_t sub_1A3A76E9C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;

  v1 = v0;
  v2 = v0[10];
  v27 = *(_QWORD *)(v2 + 16);
  if (v27)
  {
    v25 = v0[16];
    v3 = v0[12];
    v30 = v1[13];
    v24 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v26 = v2 + v24;
    v4 = v1[9] + 40;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v5 = 0;
    v32 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      v6 = v26 + v5 * v32;
      v33 = *(_QWORD *)(*(_QWORD *)v4 + 16);
      if (v33)
        break;
      v9 = 0;
LABEL_12:
      v19 = v1[17];
      v20 = v1[15];
      *((_BYTE *)v1 + 200) = 0;
      sub_1A39A4820(&qword_1EE6D4690);
      sub_1A3AB4E50();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v19, v20);
      result = swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)v4 + 16) < v9)
        goto LABEL_19;
      v21 = v1[14];
      ++v5;
      sub_1A3A7C288(v6, v21);
      sub_1A3A7D5B8(v9, v9, v21);
      swift_endAccess();
      sub_1A3A74B68();
      if (v5 == v27)
      {
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    v28 = v26 + v5 * v32;
    v29 = v5;
    v7 = *(_QWORD *)(v6 + 8);
    result = swift_getObjectType();
    v31 = result;
    v9 = 0;
    v10 = v7;
    v11 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 24);
    v12 = v24;
    while (v9 < *(_QWORD *)(*(_QWORD *)v4 + 16))
    {
      v13 = v1;
      v14 = v1[13];
      sub_1A3A7C288(*(_QWORD *)v4 + v12, v14);
      v15 = v11(v31, v10);
      v16 = *(_QWORD *)(v30 + 8);
      ObjectType = swift_getObjectType();
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 24))(ObjectType, v16);
      result = sub_1A3A7C2CC(v14);
      if (v18 < v15)
      {
        v1 = v13;
        goto LABEL_11;
      }
      ++v9;
      v12 += v32;
      v1 = v13;
      if (v33 == v9)
      {
        v9 = v33;
LABEL_11:
        v6 = v28;
        v5 = v29;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
LABEL_15:
    if ((*((_BYTE *)v1 + 201) & 1) != 0)
    {
      v22 = v1[9];
      v34 = 3;
      (*(void (**)(char *))(*(_QWORD *)v22 + 160))(&v34);
      v23 = (_QWORD *)swift_task_alloc();
      v1[24] = v23;
      *v23 = v1;
      v23[1] = sub_1A3A77198;
      return sub_1A3A79F24();
    }
    else
    {
      swift_unknownObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return ((uint64_t (*)(void))v1[1])();
    }
  }
  return result;
}

uint64_t sub_1A3A77198()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A771E4()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A7723C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A77270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_BYTE *)(v0 + 40);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1A39D5174;
  return sub_1A3A761EC(v2, v3, v4, v5);
}

BOOL static TTSSpeechQueue.QueuingBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1A3A772F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v3[7] = swift_task_alloc();
  type metadata accessor for TTSSpeechQueue(0);
  sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  v3[8] = sub_1A3AB4C70();
  v3[9] = v4;
  return swift_task_switch();
}

uint64_t sub_1A3A77384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  v5 = OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_schedulingTask;
  *(_QWORD *)(v0 + 80) = v4;
  *(_QWORD *)(v0 + 88) = v5;
  v6 = *(_QWORD *)(v1 + v5);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(_QWORD *)(v0 + 96) = v6;
    *(_QWORD *)(v0 + 104) = v6;
    swift_retain();
    swift_retain();
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v7;
    sub_1A39A4820(&qword_1EE6D09F0);
    *v7 = v0;
    v7[1] = sub_1A3A77548;
    return sub_1A3AB4DC0();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 56);
    v10 = v1 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
    v11 = sub_1A3AB4D00();
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    v13 = (_QWORD *)swift_allocObject();
    v13[2] = 0;
    v13[3] = 0;
    v13[4] = &unk_1EE6D45C0;
    v13[5] = v4;
    swift_retain();
    *(_QWORD *)(v1 + v5) = sub_1A39CDB64(v9, (uint64_t)&unk_1EE6D45C8, (uint64_t)v13);
    swift_release();
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A3A77548()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A7759C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  sub_1A39CD704(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v2 + v1);
  if (*(_QWORD *)(v0 + 96))
  {
    if (v3)
    {
      swift_retain();
      swift_retain();
      sub_1A39A4820(&qword_1EE6D09F0);
      v4 = sub_1A3AB4DA8();
      swift_release();
      swift_release();
      v1 = *(_QWORD *)(v0 + 88);
      v2 = *(_QWORD *)(v0 + 48);
      if ((v4 & 1) != 0)
        goto LABEL_10;
      v3 = *(_QWORD *)(v2 + v1);
    }
  }
  else if (!v3)
  {
    goto LABEL_10;
  }
  swift_retain();
  swift_release();
  if (v3)
  {
LABEL_9:
    *(_QWORD *)(v0 + 96) = v3;
    *(_QWORD *)(v0 + 104) = v3;
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v5;
    sub_1A39A4820(&qword_1EE6D09F0);
    *v5 = v0;
    v5[1] = sub_1A3A77548;
    return sub_1A3AB4DC0();
  }
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v2 + v1);
  if (v3)
  {
    swift_retain();
    goto LABEL_9;
  }
LABEL_10:
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = v2 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
  v10 = sub_1A3AB4D00();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = &unk_1EE6D45C0;
  v12[5] = v7;
  swift_retain();
  *(_QWORD *)(v2 + v1) = sub_1A39CDB64(v8, (uint64_t)&unk_1EE6D45C8, (uint64_t)v12);
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A777D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for TTSSpeechQueue(0);
  sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  sub_1A3AB4C70();
  return swift_task_switch();
}

uint64_t sub_1A3A7784C()
{
  uint64_t *v0;
  _QWORD *v1;

  swift_bridgeObjectRetain();
  v1 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_1A3A778A8;
  return sub_1A3A7F2E4(v0[2], v0[3], v0[4]);
}

uint64_t sub_1A3A778A8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A3A778F8()
{
  uint64_t v0;
  _QWORD *v1;

  v1[2] = v0;
  sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v1[3] = swift_task_alloc();
  type metadata accessor for TTSSpeechQueue(0);
  v1[4] = sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  sub_1A3AB4C70();
  return swift_task_switch();
}

uint64_t sub_1A3A7798C()
{
  uint64_t v0;
  _QWORD *(*v1)(uint64_t *__return_ptr);
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v1 = *(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)(v0 + 16) + 152);
  v2 = v1(&v12);
  if (v12 != 3)
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD *))v1)((uint64_t *)((char *)&v12 + 1), v2);
    if (BYTE1(v12) != 2)
    {
      v3 = *(_QWORD *)(v0 + 16);
      BYTE2(v12) = 3;
      (*(void (**)(char *))(*(_QWORD *)v3 + 160))((char *)&v12 + 2);
    }
  }
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 16);
  v7 = v6 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
  v8 = sub_1A3AB4D00();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v4, v7, v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v6;
  v10[3] = v5;
  v10[4] = v6;
  swift_retain_n();
  sub_1A39DDD84(v4, (uint64_t)&unk_1EE6D45E0, (uint64_t)v10);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A77ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a4;
  sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v4[5] = swift_task_alloc();
  type metadata accessor for TTSSpeechQueue(0);
  sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  v4[6] = sub_1A3AB4C70();
  v4[7] = v5;
  return swift_task_switch();
}

uint64_t sub_1A3A77B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_schedulingTask;
  *(_QWORD *)(v0 + 64) = OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_schedulingTask;
  v3 = *(_QWORD *)(v1 + v2);
  swift_retain();
  if (v3)
  {
    *(_QWORD *)(v0 + 72) = v3;
    *(_QWORD *)(v0 + 80) = v3;
    swift_retain();
    swift_retain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v4;
    sub_1A39A4820(&qword_1EE6D09F0);
    *v4 = v0;
    v4[1] = sub_1A3A77CDC;
    return sub_1A3AB4DC0();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 40);
    v7 = v1 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
    v8 = sub_1A3AB4D00();
    v9 = *(_QWORD *)(v8 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = 0;
    v10[3] = 0;
    v10[4] = &unk_1EE6D4730;
    v10[5] = v1;
    swift_retain();
    *(_QWORD *)(v1 + v2) = sub_1A39CDB64(v6, (uint64_t)&unk_1EE6D4738, (uint64_t)v10);
    swift_release();
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A3A77CDC()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A77D30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  sub_1A39CD704(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v2 + v1);
  if (*(_QWORD *)(v0 + 72))
  {
    if (v3)
    {
      swift_retain();
      swift_retain();
      sub_1A39A4820(&qword_1EE6D09F0);
      v4 = sub_1A3AB4DA8();
      swift_release();
      swift_release();
      v1 = *(_QWORD *)(v0 + 64);
      v2 = *(_QWORD *)(v0 + 32);
      if ((v4 & 1) != 0)
        goto LABEL_10;
      v3 = *(_QWORD *)(v2 + v1);
    }
  }
  else if (!v3)
  {
    goto LABEL_10;
  }
  swift_retain();
  swift_release();
  if (v3)
  {
LABEL_9:
    *(_QWORD *)(v0 + 72) = v3;
    *(_QWORD *)(v0 + 80) = v3;
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v5;
    sub_1A39A4820(&qword_1EE6D09F0);
    *v5 = v0;
    v5[1] = sub_1A3A77CDC;
    return sub_1A3AB4DC0();
  }
  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v2 + v1);
  if (v3)
  {
    swift_retain();
    goto LABEL_9;
  }
LABEL_10:
  v7 = *(_QWORD *)(v0 + 40);
  v8 = v2 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
  v9 = sub_1A3AB4D00();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = &unk_1EE6D4730;
  v11[5] = v2;
  swift_retain();
  *(_QWORD *)(v2 + v1) = sub_1A39CDB64(v7, (uint64_t)&unk_1EE6D4738, (uint64_t)v11);
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A77F68()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1A39D5174;
  return sub_1A3A79F24();
}

uint64_t sub_1A3A77FB0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  type metadata accessor for TTSSpeechQueue(0);
  v1[3] = sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  v1[4] = sub_1A3AB4C70();
  v1[5] = v2;
  return swift_task_switch();
}

uint64_t sub_1A3A78020()
{
  uint64_t v0;
  _QWORD *(*v1)(uint64_t *__return_ptr);
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)(v0 + 16) + 152);
  v2 = v1(&v7);
  if (v7 != 3)
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD *))v1)((uint64_t *)((char *)&v7 + 1), v2);
    if (BYTE1(v7) != 2)
      return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(_QWORD *)(v0 + 16);
  BYTE2(v7) = 1;
  (*(void (**)(char *))(*(_QWORD *)v3 + 160))((char *)&v7 + 2);
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v4;
  v4[2] = v3;
  v4[3] = &unk_1EE6D45F8;
  v4[4] = v3;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v5;
  *v5 = v0;
  v5[1] = sub_1A3A7813C;
  return sub_1A3AB5630();
}

uint64_t sub_1A3A7813C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A78190()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A781C0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[7] = a1;
  v2 = sub_1A39A4820(&qword_1EE6D46A8);
  v1[8] = v2;
  v1[9] = *(_QWORD *)(v2 - 8);
  v1[10] = swift_task_alloc();
  v3 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  v1[11] = v3;
  v1[12] = *(_QWORD *)(v3 - 8);
  v1[13] = swift_task_alloc();
  sub_1A39A4820(&qword_1EE6D4618);
  v1[14] = swift_task_alloc();
  type metadata accessor for TTSSpeechQueue(0);
  sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  v1[15] = sub_1A3AB4C70();
  v1[16] = v4;
  return swift_task_switch();
}

uint64_t sub_1A3A782A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_runTask);
  *(_QWORD *)(v0 + 136) = v2;
  if (v2)
  {
    swift_retain_n();
    sub_1A39A4820(&qword_1EE6D09F0);
    sub_1A3AB4DB4();
    swift_release();
    v1 = *(_QWORD *)(v0 + 56);
  }
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = v1 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_runningItem;
  swift_beginAccess();
  sub_1A3A7C8B8(v6, v3);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  v8 = *(_QWORD *)(v0 + 112);
  if (v7)
  {
    sub_1A39B11F4(*(_QWORD *)(v0 + 112), &qword_1EE6D4618);
    if (*(_QWORD *)(v0 + 136))
    {
      swift_retain();
      v9 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 160) = v9;
      sub_1A39A4820(&qword_1EE6D09F0);
      *v9 = v0;
      v9[1] = sub_1A3A786D4;
      return sub_1A3AB4DC0();
    }
    else
    {
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 104);
    sub_1A3A7C288(*(_QWORD *)(v0 + 112), v11);
    sub_1A39B11F4(v8, &qword_1EE6D4618);
    v12 = *(_QWORD *)(v11 + 8);
    ObjectType = swift_getObjectType();
    v15 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v12 + 72) + *(_QWORD *)(v12 + 72));
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v14;
    *v14 = v0;
    v14[1] = sub_1A3A784CC;
    return v15(0, 0, ObjectType, v12);
  }
}

uint64_t sub_1A3A784CC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A78530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  *(_BYTE *)(v0 + 49) = 3;
  sub_1A39A4820(&qword_1EE6D4690);
  sub_1A3AB4E50();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1A3A7C2CC(v1);
  return swift_task_switch();
}

uint64_t sub_1A3A785C4()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 136))
  {
    swift_retain();
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v1;
    sub_1A39A4820(&qword_1EE6D09F0);
    *v1 = v0;
    v1[1] = sub_1A3A786D4;
    return sub_1A3AB4DC0();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A3A78690()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);

  sub_1A3A7C2CC(v1);
  return swift_task_switch();
}

uint64_t sub_1A3A786D4()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A7872C()
{
  uint64_t v0;

  swift_release();
  sub_1A39CD704(*(id *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A78784()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  type metadata accessor for TTSSpeechQueue(0);
  v1[3] = sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  v1[4] = sub_1A3AB4C70();
  v1[5] = v2;
  return swift_task_switch();
}

uint64_t sub_1A3A787F4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  char v5;

  v1 = v0[2];
  v5 = 0;
  (*(void (**)(char *))(*(_QWORD *)v1 + 160))(&v5);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v0[6] = v2;
  v2[2] = v1;
  v2[3] = &unk_1EE6D4610;
  v2[4] = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[7] = v3;
  *v3 = v0;
  v3[1] = sub_1A3A7813C;
  return sub_1A3AB5630();
}

uint64_t sub_1A3A788BC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[6] = a1;
  v2 = sub_1A39A4820(&qword_1EE6D46A8);
  v1[7] = v2;
  v1[8] = *(_QWORD *)(v2 - 8);
  v1[9] = swift_task_alloc();
  v3 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  v1[10] = v3;
  v1[11] = *(_QWORD *)(v3 - 8);
  v1[12] = swift_task_alloc();
  type metadata accessor for TTSSpeechQueue(0);
  sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  v1[13] = sub_1A3AB4C70();
  v1[14] = v4;
  return swift_task_switch();
}

uint64_t sub_1A3A78980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  _QWORD *v10;
  uint64_t (*v12)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 48);
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_runTask))
  {
    swift_retain();
    sub_1A39A4820(&qword_1EE6D09F0);
    sub_1A3AB4DB4();
    swift_release();
    v1 = *(_QWORD *)(v0 + 48);
  }
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v0 + 120) = v2;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v0 + 128) = v3;
  v4 = *(_QWORD *)(v0 + 96);
  if (v3)
  {
    v5 = *(_QWORD *)(v0 + 88);
    v6 = *(_DWORD *)(v5 + 80);
    *(_DWORD *)(v0 + 168) = v6;
    *(_QWORD *)(v0 + 136) = *(_QWORD *)(v5 + 72);
    *(_QWORD *)(v0 + 144) = 0;
    v7 = v2 + ((v6 + 32) & ~(unint64_t)v6);
    swift_bridgeObjectRetain();
    sub_1A3A7C288(v7, v4);
    v8 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    v12 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v8 + 64) + *(_QWORD *)(v8 + 64));
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v10;
    *v10 = v0;
    v10[1] = sub_1A3A78AF8;
    return v12(0, 0, ObjectType, v8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v0 + 48) + 40) = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
    sub_1A3A74B68();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A3A78AF8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A78B5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  *(_BYTE *)(v0 + 172) = 4;
  sub_1A39A4820(&qword_1EE6D4690);
  sub_1A3AB4E50();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  *(_QWORD *)(v0 + 40) = 0;
  sub_1A3AB4E5C();
  return swift_task_switch();
}

uint64_t sub_1A3A78BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  _QWORD *v9;
  uint64_t (*v10)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 144) + 1;
  sub_1A3A7C2CC(*(_QWORD *)(v0 + 96));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(*(_QWORD *)(v0 + 48) + 40) = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
    sub_1A3A74B68();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 136);
    v5 = *(_QWORD *)(v0 + 144) + 1;
    *(_QWORD *)(v0 + 144) = v5;
    v6 = *(_QWORD *)(v0 + 96);
    sub_1A3A7C288(*(_QWORD *)(v0 + 120)+ ((*(unsigned __int8 *)(v0 + 168) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 168))+ v4 * v5, v6);
    v7 = *(_QWORD *)(v6 + 8);
    ObjectType = swift_getObjectType();
    v10 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v7 + 64) + *(_QWORD *)(v7 + 64));
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v9;
    *v9 = v0;
    v9[1] = sub_1A3A78AF8;
    return v10(0, 0, ObjectType, v7);
  }
}

uint64_t sub_1A3A78D28()
{
  uint64_t v0;

  return swift_task_switch();
}

uint64_t TTSSpeechQueue.__allocating_init(priority:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  TTSSpeechQueue.init(priority:)(a1);
  return v2;
}

uint64_t TTSSpeechQueue.init(priority:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;

  v2 = v1;
  v4 = sub_1A39A4820(&qword_1EE6D09B0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TTSExecutor.Serialized();
  v8 = sub_1A3A630D8();
  *(_QWORD *)(v1 + 16) = TTSExecutor.Serialized.__allocating_init(executor:)(v8);
  v17 = 0;
  sub_1A39A4820(&qword_1EE6D09A8);
  swift_allocObject();
  *(_QWORD *)(v1 + 24) = sub_1A3AB476C();
  *(_BYTE *)(v1 + 32) = 0;
  v9 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 40) = MEMORY[0x1E0DEE9D8];
  v10 = v1 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_runningItem;
  v11 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_runTask) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_schedulingTask) = 0;
  v12 = v2 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue__uiActions;
  v16 = v9;
  sub_1A39A4820(&qword_1EE6D09C8);
  sub_1A3AB4778();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v12, v7, v4);
  v13 = v2 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
  v14 = sub_1A3AB4D00();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a1, v14);
  return v2;
}

uint64_t sub_1A3A78F28(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_1A39D1864;
  return v7();
}

uint64_t sub_1A3A78F80()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v2 = *(int **)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A39D5174;
  v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_1A39D1864;
  return v6();
}

uint64_t sub_1A3A78FFC()
{
  return sub_1A3A7FF50((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1A3A79010()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39D5174;
  return sub_1A3A777D8(v2, v3, v4);
}

uint64_t sub_1A3A79074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v20;

  v8 = sub_1A39A4820(&qword_1EE6D46F8);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1A3AB4D00();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v16 = sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  v17 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = a2;
  *((_QWORD *)v18 + 3) = v16;
  *((_QWORD *)v18 + 4) = a2;
  *((_QWORD *)v18 + 5) = a3;
  *((_QWORD *)v18 + 6) = a4;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v18[v17], v11, v8);
  swift_retain_n();
  swift_retain();
  sub_1A39DDD84((uint64_t)v14, (uint64_t)&unk_1EE6D4708, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_1A3A791F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v7[8] = swift_task_alloc();
  v8 = sub_1A39A4820(&qword_1EE6D46F8);
  v7[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[10] = v9;
  v7[11] = *(_QWORD *)(v9 + 64);
  v7[12] = swift_task_alloc();
  type metadata accessor for TTSSpeechQueue(0);
  sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  v7[13] = sub_1A3AB4C70();
  v7[14] = v10;
  return swift_task_switch();
}

uint64_t sub_1A3A792BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v1, *(_QWORD *)(v0 + 56), v2);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = swift_allocObject();
  *(_QWORD *)(v0 + 120) = v7;
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = v4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  v8 = OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_schedulingTask;
  *(_QWORD *)(v0 + 128) = OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_schedulingTask;
  v9 = *(_QWORD *)(v0 + 32);
  v10 = *(_QWORD *)(v9 + v8);
  swift_retain();
  if (v10)
  {
    *(_QWORD *)(v0 + 136) = v10;
    *(_QWORD *)(v0 + 144) = v10;
    swift_retain();
    swift_retain();
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v11;
    sub_1A39A4820(&qword_1EE6D09F0);
    *v11 = v0;
    v11[1] = sub_1A3A794C0;
    return sub_1A3AB4DC0();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 64);
    v15 = v9 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
    v16 = sub_1A3AB4D00();
    v17 = *(_QWORD *)(v16 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = 0;
    v18[3] = 0;
    v18[4] = &unk_1EE6D4718;
    v18[5] = v13;
    swift_retain();
    *(_QWORD *)(v9 + v8) = sub_1A39CDB64(v14, (uint64_t)&unk_1EE6D4720, (uint64_t)v18);
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A3A794C0()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A79514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  sub_1A39CD704(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v2 + v1);
  if (*(_QWORD *)(v0 + 136))
  {
    if (v3)
    {
      swift_retain();
      swift_retain();
      sub_1A39A4820(&qword_1EE6D09F0);
      v4 = sub_1A3AB4DA8();
      swift_release();
      swift_release();
      v1 = *(_QWORD *)(v0 + 128);
      v2 = *(_QWORD *)(v0 + 32);
      if ((v4 & 1) != 0)
        goto LABEL_10;
      v3 = *(_QWORD *)(v2 + v1);
    }
  }
  else if (!v3)
  {
    goto LABEL_10;
  }
  swift_retain();
  swift_release();
  if (v3)
  {
LABEL_9:
    *(_QWORD *)(v0 + 136) = v3;
    *(_QWORD *)(v0 + 144) = v3;
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v5;
    sub_1A39A4820(&qword_1EE6D09F0);
    *v5 = v0;
    v5[1] = sub_1A3A794C0;
    return sub_1A3AB4DC0();
  }
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v2 + v1);
  if (v3)
  {
    swift_retain();
    goto LABEL_9;
  }
LABEL_10:
  v7 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = v2 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
  v10 = sub_1A3AB4D00();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = &unk_1EE6D4718;
  v12[5] = v7;
  swift_retain();
  *(_QWORD *)(v2 + v1) = sub_1A39CDB64(v8, (uint64_t)&unk_1EE6D4720, (uint64_t)v12);
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A79768(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  *(_QWORD *)(v3 + 16) = a3;
  v6 = (uint64_t (*)(void))((char *)a1 + *a1);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = v3;
  v4[1] = sub_1A3A797C4;
  return v6();
}

uint64_t sub_1A3A797C4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A79818()
{
  uint64_t v0;

  sub_1A39A4820(&qword_1EE6D46F8);
  sub_1A3AB4C7C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A79858(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t result;
  int64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE v18[16];
  uint64_t v19;
  char v20[24];

  v2 = v1;
  v4 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_1A39A4820(&qword_1EE6D46A8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  v20[0] = 2;
  sub_1A39A4820(&qword_1EE6D4690);
  sub_1A3AB4E50();
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  v19 = a1;
  swift_beginAccess();
  result = sub_1A3A7D784((uint64_t (*)(unint64_t))sub_1A3A7C900);
  v12 = *(_QWORD *)(v1[5] + 16);
  if (v12 < result)
  {
    __break(1u);
  }
  else
  {
    sub_1A3A7FD94(result, v12);
    swift_endAccess();
    sub_1A3A74B68();
    if (*(_QWORD *)(v1[5] + 16))
    {
      v13 = (char *)v1 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
      v14 = sub_1A3AB4D00();
      v15 = *(_QWORD *)(v14 - 8);
      (*(void (**)(_BYTE *, char *, uint64_t))(v15 + 16))(v6, v13, v14);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v6, 0, 1, v14);
      v16 = sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
      v17 = (_QWORD *)swift_allocObject();
      v17[2] = v2;
      v17[3] = v16;
      v17[4] = v2;
      swift_retain_n();
      sub_1A39DDD84((uint64_t)v6, (uint64_t)&unk_1EE6D46B8, (uint64_t)v17);
      return swift_release();
    }
    else
    {
      v20[0] = 2;
      return (*(uint64_t (**)(char *))(*v1 + 160))(v20);
    }
  }
  return result;
}

uint64_t sub_1A3A79A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a4;
  sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v4[5] = swift_task_alloc();
  type metadata accessor for TTSSpeechQueue(0);
  sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  v4[6] = sub_1A3AB4C70();
  v4[7] = v5;
  return swift_task_switch();
}

uint64_t sub_1A3A79B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_schedulingTask;
  *(_QWORD *)(v0 + 64) = OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_schedulingTask;
  v3 = *(_QWORD *)(v1 + v2);
  swift_retain();
  if (v3)
  {
    *(_QWORD *)(v0 + 72) = v3;
    *(_QWORD *)(v0 + 80) = v3;
    swift_retain();
    swift_retain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v4;
    sub_1A39A4820(&qword_1EE6D09F0);
    *v4 = v0;
    v4[1] = sub_1A3A79C98;
    return sub_1A3AB4DC0();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 40);
    v7 = v1 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
    v8 = sub_1A3AB4D00();
    v9 = *(_QWORD *)(v8 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = 0;
    v10[3] = 0;
    v10[4] = &unk_1EE6D46C8;
    v10[5] = v1;
    swift_retain();
    *(_QWORD *)(v1 + v2) = sub_1A39CDB64(v6, (uint64_t)&unk_1EE6D46D0, (uint64_t)v10);
    swift_release();
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A3A79C98()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A79CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  sub_1A39CD704(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v2 + v1);
  if (*(_QWORD *)(v0 + 72))
  {
    if (v3)
    {
      swift_retain();
      swift_retain();
      sub_1A39A4820(&qword_1EE6D09F0);
      v4 = sub_1A3AB4DA8();
      swift_release();
      swift_release();
      v1 = *(_QWORD *)(v0 + 64);
      v2 = *(_QWORD *)(v0 + 32);
      if ((v4 & 1) != 0)
        goto LABEL_10;
      v3 = *(_QWORD *)(v2 + v1);
    }
  }
  else if (!v3)
  {
    goto LABEL_10;
  }
  swift_retain();
  swift_release();
  if (v3)
  {
LABEL_9:
    *(_QWORD *)(v0 + 72) = v3;
    *(_QWORD *)(v0 + 80) = v3;
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v5;
    sub_1A39A4820(&qword_1EE6D09F0);
    *v5 = v0;
    v5[1] = sub_1A3A79C98;
    return sub_1A3AB4DC0();
  }
  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v2 + v1);
  if (v3)
  {
    swift_retain();
    goto LABEL_9;
  }
LABEL_10:
  v7 = *(_QWORD *)(v0 + 40);
  v8 = v2 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
  v9 = sub_1A3AB4D00();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = &unk_1EE6D46C8;
  v11[5] = v2;
  swift_retain();
  *(_QWORD *)(v2 + v1) = sub_1A39CDB64(v7, (uint64_t)&unk_1EE6D46D0, (uint64_t)v11);
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A79F24()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[8] = v0;
  v2 = sub_1A39A4820(&qword_1EE6D46A8);
  v1[9] = v2;
  v1[10] = *(_QWORD *)(v2 - 8);
  v1[11] = swift_task_alloc();
  sub_1A39A4820(&qword_1EE6D4618);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  v3 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  v1[14] = v3;
  v1[15] = *(_QWORD *)(v3 - 8);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  type metadata accessor for TTSSpeechQueue(0);
  sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  v1[19] = sub_1A3AB4C70();
  v1[20] = v4;
  return swift_task_switch();
}

uint64_t sub_1A3A7A034()
{
  uint64_t v0;
  _QWORD *(*v1)(uint64_t *__return_ptr);
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v39;

  v1 = *(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)(v0 + 64) + 152);
  v2 = v1(&v39);
  if (v39 != 3)
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD *))v1)((uint64_t *)((char *)&v39 + 1), v2);
    if (BYTE1(v39) != 2)
      goto LABEL_22;
  }
  v3 = *(_QWORD *)(v0 + 64);
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 40);
  if (!*(_QWORD *)(v4 + 16))
  {
    v13 = *(_QWORD *)(v0 + 64);
    BYTE2(v39) = 2;
    (*(void (**)(char *))(*(_QWORD *)v13 + 160))((char *)&v39 + 2);
LABEL_22:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 64);
  sub_1A3A7C288(v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), *(_QWORD *)(v0 + 144));
  v9 = v8 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_runningItem;
  swift_beginAccess();
  sub_1A3A7C8B8(v9, v7);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v10(v7, 1, v5))
  {
    sub_1A39B11F4(*(_QWORD *)(v0 + 104), &qword_1EE6D4618);
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 104);
    sub_1A3A7C288(v15, v14);
    sub_1A39B11F4(v15, &qword_1EE6D4618);
    v16 = *(_QWORD *)(v14 + 8);
    ObjectType = swift_getObjectType();
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(ObjectType, v16);
    v12 = v18;
    sub_1A3A7C2CC(v14);
  }
  v19 = *(_QWORD *)(v0 + 144);
  v20 = *(_QWORD *)(v19 + 8);
  v21 = swift_getObjectType();
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 32))(v21, v20);
  if (v12)
  {
    if (v11 == v22 && v12 == v23)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_21:
      sub_1A3A7C2CC(*(_QWORD *)(v0 + 144));
      goto LABEL_22;
    }
    v25 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
      goto LABEL_21;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_runTask))
  {
    swift_retain();
    sub_1A39A4820(&qword_1EE6D09F0);
    sub_1A3AB4DB4();
    swift_release();
  }
  v26 = *(_QWORD *)(v0 + 112);
  v27 = *(_QWORD *)(v0 + 96);
  sub_1A3A7C8B8(v9, v27);
  if (v10(v27, 1, v26))
  {
    sub_1A39B11F4(*(_QWORD *)(v0 + 96), &qword_1EE6D4618);
    v28 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 192) = v28;
    *v28 = v0;
    v28[1] = sub_1A3A7A5D0;
    return sub_1A3A7A698(*(_QWORD *)(v0 + 144));
  }
  else
  {
    v30 = *(uint64_t **)(v0 + 144);
    v31 = *(_QWORD *)(v0 + 128);
    v32 = *(_QWORD *)(v0 + 96);
    sub_1A3A7C288(v32, v31);
    sub_1A39B11F4(v32, &qword_1EE6D4618);
    v33 = *v30;
    *(_QWORD *)(v0 + 168) = *v30;
    v34 = *(_QWORD *)(v19 + 8);
    v35 = *(_QWORD *)(v31 + 8);
    swift_unknownObjectRetain();
    v36 = swift_getObjectType();
    v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v35 + 72) + *(_QWORD *)(v35 + 72));
    v37 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v37;
    *v37 = v0;
    v37[1] = sub_1A3A7A400;
    return v38(v33, v34, v36, v35);
  }
}

uint64_t sub_1A3A7A400()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A7A464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  *(_BYTE *)(v0 + 200) = 3;
  sub_1A39A4820(&qword_1EE6D4690);
  sub_1A3AB4E50();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1A3A7C2CC(v1);
  swift_unknownObjectRelease();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v5;
  *v5 = v0;
  v5[1] = sub_1A3A7A5D0;
  return sub_1A3A7A698(*(_QWORD *)(v0 + 144));
}

uint64_t sub_1A3A7A530()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 128);
  swift_unknownObjectRelease();

  sub_1A3A7C2CC(v2);
  return swift_task_switch();
}

uint64_t sub_1A3A7A580()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v1;
  *v1 = v0;
  v1[1] = sub_1A3A7A5D0;
  return sub_1A3A7A698(*(_QWORD *)(v0 + 144));
}

uint64_t sub_1A3A7A5D0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A7A61C()
{
  uint64_t v0;

  sub_1A3A7C2CC(*(_QWORD *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A7A698(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[7] = a1;
  v2[8] = v1;
  sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v2[9] = swift_task_alloc();
  v3 = *(_QWORD *)(type metadata accessor for TTSSpeechQueue.QueueableWrapper(0) - 8);
  v2[10] = v3;
  v2[11] = *(_QWORD *)(v3 + 64);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v4 = sub_1A3AB4724();
  v2[14] = v4;
  v2[15] = *(_QWORD *)(v4 - 8);
  v2[16] = swift_task_alloc();
  type metadata accessor for TTSSpeechQueue(0);
  v2[17] = sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  v2[18] = sub_1A3AB4C70();
  v2[19] = v5;
  return swift_task_switch();
}

uint64_t sub_1A3A7A78C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_runTask;
  *(_QWORD *)(v0 + 160) = OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_runTask;
  v3 = *(_QWORD *)(v1 + v2);
  *(_QWORD *)(v0 + 168) = v3;
  if (v3)
  {
    swift_retain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v4;
    sub_1A39A4820(&qword_1EE6D09F0);
    *v4 = v0;
    v4[1] = sub_1A3A7AB18;
    return sub_1A3AB4DC0();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 56);
    v8 = *(_QWORD *)(v0 + 120);
    v7 = *(_QWORD *)(v0 + 128);
    v10 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 112);
    v11 = sub_1A39AAC7C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v11, v9);
    sub_1A3A7C288(v6, v10);
    v12 = sub_1A3AB470C();
    v13 = sub_1A3AB4FC4();
    v14 = os_log_type_enabled(v12, v13);
    v16 = *(_QWORD *)(v0 + 120);
    v15 = *(_QWORD *)(v0 + 128);
    v18 = *(_OWORD **)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 112);
    if (v14)
    {
      v36 = *(_QWORD *)(v0 + 128);
      v35 = *(_QWORD *)(v0 + 112);
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      *(_DWORD *)v19 = 136315138;
      v37 = v20;
      *(_OWORD *)(v0 + 16) = *v18;
      swift_unknownObjectRetain();
      sub_1A39A4820(&qword_1EE6D32A8);
      v21 = sub_1A3AB49E8();
      *(_QWORD *)(v0 + 48) = sub_1A39A2878(v21, v22, &v37);
      sub_1A3AB5138();
      swift_bridgeObjectRelease();
      sub_1A3A7C2CC((uint64_t)v18);
      _os_log_impl(&dword_1A3940000, v12, v13, "Run Item => %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A859781C](v20, -1, -1);
      MEMORY[0x1A859781C](v19, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v36, v35);
    }
    else
    {
      sub_1A3A7C2CC(*(_QWORD *)(v0 + 104));

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    }
    v33 = *(_QWORD *)(v0 + 136);
    v34 = *(_QWORD *)(v0 + 160);
    v23 = *(_QWORD *)(v0 + 96);
    v24 = *(_QWORD *)(v0 + 80);
    v26 = *(_QWORD *)(v0 + 64);
    v25 = *(_QWORD *)(v0 + 72);
    v27 = *(_QWORD *)(v0 + 56);
    v28 = v26 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
    v29 = sub_1A3AB4D00();
    v30 = *(_QWORD *)(v29 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v25, v28, v29);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v25, 0, 1, v29);
    sub_1A3A7C288(v27, v23);
    v31 = (*(unsigned __int8 *)(v24 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    v32 = (_QWORD *)swift_allocObject();
    v32[2] = v26;
    v32[3] = v33;
    v32[4] = v26;
    sub_1A3A7C3A8(v23, (uint64_t)v32 + v31);
    swift_retain_n();
    *(_QWORD *)(v26 + v34) = sub_1A39CDB64(v25, (uint64_t)&unk_1EE6D46A0, (uint64_t)v32);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A3A7AB18()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A7AB6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _OWORD *v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_1A39CD704(*(id *)(v0 + 32), *(_BYTE *)(v0 + 40));
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = sub_1A39AAC7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  sub_1A3A7C288(v1, v5);
  v7 = sub_1A3AB470C();
  v8 = sub_1A3AB4FC4();
  if (os_log_type_enabled(v7, v8))
  {
    v29 = *(_QWORD *)(v0 + 120);
    v9 = *(_OWORD **)(v0 + 104);
    v31 = *(_QWORD *)(v0 + 112);
    v32 = *(_QWORD *)(v0 + 128);
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v33 = v11;
    *(_DWORD *)v10 = 136315138;
    *(_OWORD *)(v0 + 16) = *v9;
    swift_unknownObjectRetain();
    sub_1A39A4820(&qword_1EE6D32A8);
    v12 = sub_1A3AB49E8();
    *(_QWORD *)(v0 + 48) = sub_1A39A2878(v12, v13, &v33);
    sub_1A3AB5138();
    swift_bridgeObjectRelease();
    sub_1A3A7C2CC((uint64_t)v9);
    _os_log_impl(&dword_1A3940000, v7, v8, "Run Item => %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A859781C](v11, -1, -1);
    MEMORY[0x1A859781C](v10, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v32, v31);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 128);
    v16 = *(_QWORD *)(v0 + 112);
    sub_1A3A7C2CC(*(_QWORD *)(v0 + 104));

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  v28 = *(_QWORD *)(v0 + 136);
  v30 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 80);
  v20 = *(_QWORD *)(v0 + 64);
  v19 = *(_QWORD *)(v0 + 72);
  v21 = *(_QWORD *)(v0 + 56);
  v22 = v20 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
  v23 = sub_1A3AB4D00();
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v19, v22, v23);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v19, 0, 1, v23);
  sub_1A3A7C288(v21, v17);
  v25 = (*(unsigned __int8 *)(v18 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v20;
  v26[3] = v28;
  v26[4] = v20;
  sub_1A3A7C3A8(v17, (uint64_t)v26 + v25);
  swift_retain_n();
  *(_QWORD *)(v20 + v30) = sub_1A39CDB64(v19, (uint64_t)&unk_1EE6D46A0, (uint64_t)v26);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A7AE64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[8] = a4;
  v5[9] = a5;
  v6 = sub_1A39A4820(&qword_1EE6D46A8);
  v5[10] = v6;
  v5[11] = *(_QWORD *)(v6 - 8);
  v5[12] = swift_task_alloc();
  sub_1A39A4820(&qword_1EE6D4618);
  v5[13] = swift_task_alloc();
  type metadata accessor for TTSSpeechQueue(0);
  sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  v5[14] = sub_1A3AB4C70();
  v5[15] = v7;
  return swift_task_switch();
}

uint64_t sub_1A3A7AF24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char v8;

  v1 = v0[13];
  v2 = v0[8];
  sub_1A3A7C288(v0[9], v1);
  v3 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  v0[16] = v3;
  v4 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
  v0[17] = v4;
  v4(v1, 0, 1, v3);
  v5 = OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_runningItem;
  v0[18] = OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_runningItem;
  v6 = v2 + v5;
  swift_beginAccess();
  sub_1A3A7C870(v1, v6);
  swift_endAccess();
  v8 = 3;
  (*(void (**)(char *))(*(_QWORD *)v2 + 160))(&v8);
  return swift_task_switch();
}

uint64_t sub_1A3A7AFF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  *(_BYTE *)(v0 + 168) = 1;
  sub_1A39A4820(&qword_1EE6D4690);
  sub_1A3AB4E50();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v4 + 8);
  ObjectType = swift_getObjectType();
  v9 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v5 + 56) + *(_QWORD *)(v5 + 56));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v7;
  *v7 = v0;
  v7[1] = sub_1A3A7B0C4;
  return v9(ObjectType, v5);
}

uint64_t sub_1A3A7B0C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 160) = v0;
  swift_task_dealloc();
  if (!v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A3A7B13C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 64) + *(_QWORD *)(v0 + 144);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v0 + 136))(v2, 1, 1, *(_QWORD *)(v0 + 128));
  swift_beginAccess();
  sub_1A3A7C870(v2, v3);
  swift_endAccess();
  sub_1A3AB4DD8();
  if (!v1)
    sub_1A3A79858(*(_QWORD *)(v0 + 72));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TTSSpeechQueue.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1A39B11F4(v0 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_runningItem, &qword_1EE6D4618);
  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue_taskPriority;
  v2 = sub_1A3AB4D00();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC12TextToSpeech14TTSSpeechQueue__uiActions;
  v4 = sub_1A39A4820(&qword_1EE6D09B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t TTSSpeechQueue.__deallocating_deinit()
{
  TTSSpeechQueue.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1A3A7B2F0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for TTSSpeechQueue(0);
  v1 = sub_1A3A80108(&qword_1EE6D46F0, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  return TTSActor.unownedExecutor.getter(v0, v1);
}

uint64_t sub_1A3A7B330@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for TTSSpeechQueue(0);
  result = sub_1A3AB4748();
  *a1 = result;
  return result;
}

uint64_t sub_1A3A7B36C()
{
  return sub_1A3A7FF50((void (*)(_QWORD))MEMORY[0x1E0DEEEC0], (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1A3A7B380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A39D5174;
  return sub_1A3A77ABC((uint64_t)v3, v4, v5, v2);
}

uint64_t sub_1A3A7B3CC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1A39D5174;
  return sub_1A3A781C0(v0);
}

uint64_t sub_1A3A7B414(uint64_t a1)
{
  uint64_t *v1;

  return sub_1A3A79074(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1A3A7B420()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1A39D5174;
  return sub_1A3A788BC(v0);
}

uint64_t TTSSpeechQueue.QueuingBehavior.hash(into:)()
{
  return sub_1A3AB5708();
}

unint64_t sub_1A3A7B4A0()
{
  unint64_t result;

  result = qword_1EE6D4620;
  if (!qword_1EE6D4620)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSSpeechQueue.Event, &type metadata for TTSSpeechQueue.Event);
    atomic_store(result, (unint64_t *)&qword_1EE6D4620);
  }
  return result;
}

uint64_t sub_1A3A7B4E4()
{
  return MEMORY[0x1E0C96020];
}

uint64_t sub_1A3A7B4F0(uint64_t a1)
{
  uint64_t result;

  result = sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A3A7B528()
{
  unint64_t result;

  result = qword_1EE6D4628;
  if (!qword_1EE6D4628)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSSpeechQueue.State, &type metadata for TTSSpeechQueue.State);
    atomic_store(result, (unint64_t *)&qword_1EE6D4628);
  }
  return result;
}

unint64_t sub_1A3A7B570()
{
  unint64_t result;

  result = qword_1EE6D4630;
  if (!qword_1EE6D4630)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSSpeechQueue.QueuingBehavior, &type metadata for TTSSpeechQueue.QueuingBehavior);
    atomic_store(result, (unint64_t *)&qword_1EE6D4630);
  }
  return result;
}

unint64_t sub_1A3A7B5B8()
{
  unint64_t result;

  result = qword_1EE6D4638;
  if (!qword_1EE6D4638)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSSpeechQueue.IsoPrioritizedBehavior, &type metadata for TTSSpeechQueue.IsoPrioritizedBehavior);
    atomic_store(result, (unint64_t *)&qword_1EE6D4638);
  }
  return result;
}

uint64_t sub_1A3A7B5FC()
{
  return type metadata accessor for TTSSpeechQueue(0);
}

void sub_1A3A7B604()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1A3A7B940();
  if (v0 <= 0x3F)
  {
    sub_1A3AB4D00();
    if (v1 <= 0x3F)
    {
      sub_1A3A7B994();
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for TTSSpeechQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TTSSpeechQueue.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of TTSSpeechQueue.state.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of TTSSpeechQueue.state.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of TTSSpeechQueue.uiActions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of TTSSpeechQueue.uiActions.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of TTSSpeechQueue.uiActions.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of TTSSpeechQueue.$uiActions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of TTSSpeechQueue.$uiActions.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of TTSSpeechQueue.$uiActions.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of TTSSpeechQueue.enqueue(work:run:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 328) + *(_QWORD *)(*(_QWORD *)v2 + 328));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1A39D42E0;
  return v8(a1, a2);
}

uint64_t dispatch thunk of TTSSpeechQueue.cancel(withId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 336) + *(_QWORD *)(*(_QWORD *)v2 + 336));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1A39D5174;
  return v8(a1, a2);
}

uint64_t dispatch thunk of TTSSpeechQueue.run()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 344) + *(_QWORD *)(*(_QWORD *)v0 + 344));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1A39D5174;
  return v4();
}

uint64_t dispatch thunk of TTSSpeechQueue.pause()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 352) + *(_QWORD *)(*(_QWORD *)v0 + 352));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1A39D5174;
  return v4();
}

uint64_t dispatch thunk of TTSSpeechQueue.stop()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 360) + *(_QWORD *)(*(_QWORD *)v0 + 360));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1A39D5174;
  return v4();
}

uint64_t dispatch thunk of TTSSpeechQueue.__allocating_init(priority:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 368))();
}

void sub_1A3A7B940()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE6D0990)
  {
    type metadata accessor for TTSSpeechQueue.QueueableWrapper(255);
    v0 = sub_1A3AB50FC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE6D0990);
  }
}

void sub_1A3A7B994()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE6D09B8)
  {
    sub_1A39AB624(&qword_1EE6D09C8);
    v0 = sub_1A3AB47C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE6D09B8);
  }
}

uint64_t storeEnumTagSinglePayload for TTSSpeechQueue.Event(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A3A7BA38 + 4 * byte_1A3AC8C45[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A3A7BA6C + 4 * asc_1A3AC8C40[v4]))();
}

uint64_t sub_1A3A7BA6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A7BA74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A7BA7CLL);
  return result;
}

uint64_t sub_1A3A7BA88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A7BA90);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A3A7BA94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A7BA9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSSpeechQueue.Event()
{
  return &type metadata for TTSSpeechQueue.Event;
}

uint64_t storeEnumTagSinglePayload for TTSSpeechQueue.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A3A7BB04 + 4 * byte_1A3AC8C4F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A3A7BB38 + 4 * byte_1A3AC8C4A[v4]))();
}

uint64_t sub_1A3A7BB38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A7BB40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A7BB48);
  return result;
}

uint64_t sub_1A3A7BB54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A7BB5CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A3A7BB60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A7BB68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSSpeechQueue.State()
{
  return &type metadata for TTSSpeechQueue.State;
}

ValueMetadata *type metadata accessor for TTSSpeechQueue.QueuingBehavior()
{
  return &type metadata for TTSSpeechQueue.QueuingBehavior;
}

uint64_t _s12TextToSpeech14TTSSpeechQueueC15QueuingBehaviorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A3A7BBE4 + 4 * byte_1A3AC8C59[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A3A7BC18 + 4 * byte_1A3AC8C54[v4]))();
}

uint64_t sub_1A3A7BC18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A7BC20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A7BC28);
  return result;
}

uint64_t sub_1A3A7BC34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A7BC3CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A3A7BC40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A7BC48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSSpeechQueue.IsoPrioritizedBehavior()
{
  return &type metadata for TTSSpeechQueue.IsoPrioritizedBehavior;
}

uint64_t dispatch thunk of TTSQueueable.priority.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TTSQueueable.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of TTSQueueable.behavior.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of TTSQueueable.isoPrioritizedBehavior.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of TTSQueueable.run()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 56) + *(_QWORD *)(a2 + 56));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A39B1604;
  return v7(a1, a2);
}

uint64_t dispatch thunk of TTSQueueable.stop(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 64) + *(_QWORD *)(a4 + 64));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_1A39D5174;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of TTSQueueable.suspend(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 72) + *(_QWORD *)(a4 + 72));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_1A39D5174;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of TTSQueueable.init(copy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

_QWORD *sub_1A3A7BE00(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    a1 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = v5;
    a1[1] = v6;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    swift_unknownObjectRetain();
    v10 = sub_1A39A4820(&qword_1EE6D4690);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_1A3A7BE90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_unknownObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1A39A4820(&qword_1EE6D4690);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_OWORD *sub_1A3A7BEDC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  swift_unknownObjectRetain();
  v7 = sub_1A39A4820(&qword_1EE6D4690);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1A3A7BF44(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A39A4820(&qword_1EE6D4690);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

_OWORD *sub_1A3A7BFC8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1A39A4820(&qword_1EE6D4690);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1A3A7C028(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A39A4820(&qword_1EE6D4690);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1A3A7C09C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A3A7C0A8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1A39A4820(&qword_1EE6D4690);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1A3A7C128()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1A3A7C134(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1A39A4820(&qword_1EE6D4690);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_1A3A7C1AC()
{
  unint64_t v0;

  sub_1A3A7C220();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1A3A7C220()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE6D09D8)
  {
    sub_1A39AB624(&qword_1EE6D09F0);
    v0 = sub_1A3AB4E68();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE6D09D8);
  }
}

uint64_t sub_1A3A7C288(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3A7C2CC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A3A7C308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 40) & ~v2;
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  v4 = v0 + v3 + *(int *)(v1 + 20);
  v5 = sub_1A39A4820(&qword_1EE6D4690);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t sub_1A3A7C3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3A7C3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TTSSpeechQueue.QueueableWrapper(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39D5174;
  return sub_1A3A7AE64((uint64_t)v5, v6, v7, v3, v4);
}

uint64_t sub_1A3A7C458(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A39A4820(&qword_1EE6D46E8);
  v10 = *(_QWORD *)(type metadata accessor for TTSSpeechQueue.QueueableWrapper(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_1A3AB5438();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for TTSSpeechQueue.QueueableWrapper(0) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1A3A7DB98(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_1A3A7C660(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A39A4820(&qword_1EE6D4778);
  v10 = *(_QWORD *)(sub_1A39A4820(&qword_1EE6D30F0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_1A3AB5438();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_1A39A4820(&qword_1EE6D30F0) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1A3A7DA7C(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_1A3A7C870(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D4618);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3A7C8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D4618);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3A7C900(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(a1 + 8);
  ObjectType = swift_getObjectType();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(ObjectType, v3);
  v7 = v6;
  v8 = *(_QWORD *)(v2 + 8);
  v9 = swift_getObjectType();
  if (v5 == (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v9, v8) && v7 == v10)
    v12 = 1;
  else
    v12 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_1A3A7C9B8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1A3A7C9F0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1A3A7C9D4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1A3A7CBD0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1A3A7C9F0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A39A4820(&qword_1EE6D46E8);
  v10 = *(_QWORD *)(type metadata accessor for TTSSpeechQueue.QueueableWrapper(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for TTSSpeechQueue.QueueableWrapper(0) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

uint64_t sub_1A3A7CBD0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D4768);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

uint64_t sub_1A3A7CD2C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = sub_1A3AB56F0();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_1A3A7D0A4(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1A3A7CE24()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  sub_1A39A4820(&qword_1EE6D4760);
  result = sub_1A3AB527C();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = sub_1A3AB56F0();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1A3A7D0A4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1A3A7CE24();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1A3A7D1C4();
      goto LABEL_14;
    }
    sub_1A3A7D358();
  }
  v8 = *v3;
  result = sub_1A3AB56F0();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = sub_1A3AB566C();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

void *sub_1A3A7D1C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D4760);
  v2 = *v0;
  v3 = sub_1A3AB5270();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A3A7D358()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  sub_1A39A4820(&qword_1EE6D4760);
  result = sub_1A3AB527C();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = sub_1A3AB56F0();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1A3A7D5B8(uint64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1A3A7C458(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = *(_QWORD *)(type metadata accessor for TTSSpeechQueue.QueueableWrapper(0) - 8);
  v15 = v5 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v15 + v16 * a1;
  swift_arrayDestroy();
  if (!v9)
    goto LABEL_25;
  v18 = *(_QWORD *)(v5 + 16);
  v19 = v18 - a2;
  if (__OFSUB__(v18, a2))
    goto LABEL_33;
  if (v19 < 0)
  {
LABEL_35:
    result = sub_1A3AB54BC();
    __break(1u);
    return result;
  }
  v20 = v17 + v16;
  v21 = v15 + v16 * a2;
  if (v17 + v16 < v21 || v20 >= v21 + v19 * v16)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v20 != v21)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  v23 = *(_QWORD *)(v5 + 16);
  v24 = __OFADD__(v23, v9);
  v25 = v23 + v9;
  if (v24)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v5 + 16) = v25;
LABEL_25:
  if (v16 >= 1)
    sub_1A3A7C288(a3, v17);
  return sub_1A39B11F4(a3, &qword_1EE6D4748);
}

uint64_t sub_1A3A7D784(uint64_t (*a1)(unint64_t))
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v1;
  v5 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v34 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v33 = (uint64_t)&v30 - v9;
  MEMORY[0x1E0C80A78](v8);
  v35 = (uint64_t)&v30 - v11;
  v12 = *v1;
  v13 = *(_QWORD *)(*v1 + 16);
  if (!v13)
    return 0;
  v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = *(_QWORD *)(v10 + 72);
  swift_bridgeObjectRetain();
  v16 = 0;
  v31 = v14;
  while (1)
  {
    v17 = a1(v12 + v14);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v16;
    }
    if ((v17 & 1) != 0)
      break;
    ++v16;
    v14 += v15;
    if (v13 == v16)
    {
      swift_bridgeObjectRelease();
      return *(_QWORD *)(v12 + 16);
    }
  }
  result = swift_bridgeObjectRelease();
  if (!__OFADD__(v16, 1))
  {
    v19 = *(_QWORD *)(v12 + 16);
    if (v16 + 1 == v19)
      return v16;
    v20 = v15 + v14;
    v21 = v16 + 1;
    v30 = v1;
    v32 = v15;
    while (v21 < v19)
    {
      v22 = v3;
      v36 = v20;
      v23 = v35;
      sub_1A3A7C288(v12 + v20, v35);
      v24 = a1(v23);
      result = sub_1A3A7C2CC(v23);
      if ((v24 & 1) != 0)
      {
        v3 = v22;
        v25 = v32;
      }
      else
      {
        v3 = v22;
        v25 = v32;
        if (v21 != v16)
        {
          if ((v16 & 0x8000000000000000) != 0)
            goto LABEL_32;
          v26 = *v3;
          v27 = *(_QWORD *)(*v3 + 16);
          if (v16 >= v27)
            goto LABEL_33;
          result = sub_1A3A7C288(v26 + v31 + v16 * v32, v33);
          if (v21 >= v27)
            goto LABEL_34;
          sub_1A3A7C288(v26 + v36, v34);
          result = swift_isUniquelyReferenced_nonNull_native();
          v3 = v30;
          *v30 = v26;
          if ((result & 1) == 0)
          {
            result = sub_1A3A7DA68(v26);
            v26 = result;
            *v3 = result;
          }
          if (v16 >= *(_QWORD *)(v26 + 16))
            goto LABEL_35;
          result = sub_1A3A800C4(v34, v26 + v31 + v16 * v25);
          if (v21 >= *(_QWORD *)(*v3 + 16))
            goto LABEL_36;
          result = sub_1A3A800C4(v33, *v3 + v36);
        }
        if (__OFADD__(v16++, 1))
          goto LABEL_31;
      }
      v29 = v21 + 1;
      if (__OFADD__(v21, 1))
        goto LABEL_30;
      v12 = *v3;
      v19 = *(_QWORD *)(*v3 + 16);
      ++v21;
      v20 = v36 + v25;
      if (v29 == v19)
        return v16;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A3A7DA68(unint64_t a1)
{
  return sub_1A3A7C458(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1A3A7DA7C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(sub_1A39A4820(&qword_1EE6D30F0) - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

uint64_t sub_1A3A7DB98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(type metadata accessor for TTSSpeechQueue.QueueableWrapper(0) - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

uint64_t sub_1A3A7DCB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1A3AB4ED4();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_1A3A7CD2C(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1A3A7DD20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v4 = sub_1A39A4820(&qword_1EE6D46A8);
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v5 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  v3[12] = v5;
  v3[13] = *(_QWORD *)(v5 - 8);
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  type metadata accessor for TTSSpeechQueue(0);
  sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  swift_unknownObjectRetain_n();
  v3[19] = sub_1A3AB4C70();
  v3[20] = v6;
  return swift_task_switch();
}

uint64_t sub_1A3A7DE38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t (*v59)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;

  v1 = v0[6];
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 40);
  v3 = MEMORY[0x1E0DEE9D8];
  v60 = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(v2 + 16);
  swift_unknownObjectRetain();
  result = swift_bridgeObjectRetain();
  v58 = v0;
  v54 = v4;
  if (v4)
  {
    v6 = 0;
    v48 = v0[13];
    v50 = v0[18];
    v47 = v0[8];
    v7 = MEMORY[0x1E0DEE9D8];
    v52 = v2;
    while (v6 < *(_QWORD *)(v2 + 16))
    {
      v8 = v0[8];
      v9 = *(_QWORD *)(v48 + 72);
      v56 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
      sub_1A3A7C288(v2 + v56 + v9 * v6, v0[18]);
      v10 = *(_QWORD *)(v50 + 8);
      ObjectType = swift_getObjectType();
      v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 24);
      swift_unknownObjectRetain();
      v0 = v58;
      v13 = v12(ObjectType, v10);
      v14 = swift_getObjectType();
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 24))(v14, v8);
      swift_unknownObjectRelease();
      v16 = v58[18];
      if (v13 >= v15)
      {
        result = sub_1A3A7C2CC(v16);
        v2 = v52;
      }
      else
      {
        sub_1A3A7C3A8(v16, v58[17]);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1A3A7C9B8(0, *(_QWORD *)(v7 + 16) + 1, 1);
          v7 = v60;
        }
        v18 = *(_QWORD *)(v7 + 16);
        v17 = *(_QWORD *)(v7 + 24);
        v2 = v52;
        if (v18 >= v17 >> 1)
        {
          sub_1A3A7C9B8(v17 > 1, v18 + 1, 1);
          v7 = v60;
        }
        v19 = v58[17];
        *(_QWORD *)(v7 + 16) = v18 + 1;
        result = sub_1A3A7C3A8(v19, v7 + v56 + v18 * v9);
      }
      if (v54 == ++v6)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_30;
  }
  v7 = v3;
LABEL_13:
  v0[21] = v7;
  swift_unknownObjectRelease_n();
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v7 + 16);
  v0[22] = v20;
  if (v20)
  {
    v21 = v0[13];
    v22 = v0[14];
    v23 = *(_DWORD *)(v21 + 80);
    *((_DWORD *)v0 + 54) = v23;
    v0[23] = *(_QWORD *)(v21 + 72);
    v0[24] = 0;
    sub_1A3A7C288(v0[21] + ((v23 + 32) & ~(unint64_t)v23), v22);
    v24 = *(_QWORD *)(v22 + 8);
    v25 = swift_getObjectType();
    v59 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v24 + 64) + *(_QWORD *)(v24 + 64));
    v26 = (_QWORD *)swift_task_alloc();
    v0[25] = v26;
    *v26 = v0;
    v26[1] = sub_1A3A7E334;
    return v59(0, 0, v25, v24);
  }
  swift_release();
  v27 = v0[6];
  v28 = *(_QWORD *)(v27 + 40);
  v29 = MEMORY[0x1E0DEE9D8];
  v61 = MEMORY[0x1E0DEE9D8];
  v30 = *(_QWORD *)(v28 + 16);
  swift_unknownObjectRetain();
  result = swift_bridgeObjectRetain();
  v55 = v30;
  if (v30)
  {
    v31 = 0;
    v51 = v0[13];
    v53 = v0[16];
    v49 = v0[8];
    v57 = MEMORY[0x1E0DEE9D8];
    while (v31 < *(_QWORD *)(v28 + 16))
    {
      v32 = v58[8];
      v33 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
      v34 = *(_QWORD *)(v51 + 72);
      v35 = v28;
      sub_1A3A7C288(v28 + v33 + v34 * v31, v0[16]);
      v36 = *(_QWORD *)(v53 + 8);
      v37 = swift_getObjectType();
      v38 = *(uint64_t (**)(uint64_t, uint64_t))(v36 + 24);
      swift_unknownObjectRetain();
      v39 = v38(v37, v36);
      v40 = swift_getObjectType();
      v0 = v58;
      v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 24))(v40, v32);
      swift_unknownObjectRelease();
      v42 = v58[16];
      if (v39 < v41)
      {
        result = sub_1A3A7C2CC(v42);
        v28 = v35;
      }
      else
      {
        sub_1A3A7C3A8(v42, v58[15]);
        v43 = v57;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1A3A7C9B8(0, *(_QWORD *)(v57 + 16) + 1, 1);
          v43 = v61;
        }
        v45 = *(_QWORD *)(v43 + 16);
        v44 = *(_QWORD *)(v43 + 24);
        v28 = v35;
        if (v45 >= v44 >> 1)
        {
          sub_1A3A7C9B8(v44 > 1, v45 + 1, 1);
          v43 = v61;
        }
        v0 = v58;
        v46 = v58[15];
        *(_QWORD *)(v43 + 16) = v45 + 1;
        v57 = v43;
        result = sub_1A3A7C3A8(v46, v43 + v33 + v45 * v34);
      }
      if (v55 == ++v31)
      {
        v27 = v0[6];
        goto LABEL_28;
      }
    }
LABEL_30:
    __break(1u);
    return result;
  }
  v57 = v29;
LABEL_28:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v27 + 40) = v57;
  swift_bridgeObjectRelease();
  sub_1A3A74B68();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1A3A7E334()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A7E398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  *(_BYTE *)(v0 + 220) = 4;
  sub_1A39A4820(&qword_1EE6D4690);
  sub_1A3AB4E50();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  *(_QWORD *)(v0 + 40) = 0;
  sub_1A3AB4E5C();
  return swift_task_switch();
}

uint64_t sub_1A3A7E438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t (*v33)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 192) + 1;
  sub_1A3A7C2CC(*(_QWORD *)(v0 + 112));
  if (v2 == v1)
  {
    swift_release();
    v3 = *(_QWORD *)(v0 + 48);
    v4 = *(_QWORD *)(v3 + 40);
    v5 = MEMORY[0x1E0DEE9D8];
    v34 = MEMORY[0x1E0DEE9D8];
    v6 = *(_QWORD *)(v4 + 16);
    swift_unknownObjectRetain();
    result = swift_bridgeObjectRetain();
    v30 = v6;
    v31 = v4;
    if (v6)
    {
      v8 = 0;
      v28 = *(_QWORD *)(v0 + 104);
      v29 = *(_QWORD *)(v0 + 128);
      v27 = *(_QWORD *)(v0 + 64);
      while (v8 < *(_QWORD *)(v4 + 16))
      {
        v9 = *(_QWORD *)(v0 + 64);
        v10 = *(_QWORD *)(v28 + 72);
        v32 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
        sub_1A3A7C288(v4 + v32 + v10 * v8, *(_QWORD *)(v0 + 128));
        v11 = *(_QWORD *)(v29 + 8);
        ObjectType = swift_getObjectType();
        v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 24);
        swift_unknownObjectRetain();
        v14 = v13(ObjectType, v11);
        v15 = swift_getObjectType();
        v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 24))(v15, v9);
        swift_unknownObjectRelease();
        v17 = *(_QWORD *)(v0 + 128);
        if (v14 < v16)
        {
          result = sub_1A3A7C2CC(v17);
          v4 = v31;
        }
        else
        {
          sub_1A3A7C3A8(v17, *(_QWORD *)(v0 + 120));
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1A3A7C9B8(0, *(_QWORD *)(v5 + 16) + 1, 1);
            v5 = v34;
          }
          v19 = *(_QWORD *)(v5 + 16);
          v18 = *(_QWORD *)(v5 + 24);
          v4 = v31;
          if (v19 >= v18 >> 1)
          {
            sub_1A3A7C9B8(v18 > 1, v19 + 1, 1);
            v5 = v34;
          }
          v20 = *(_QWORD *)(v0 + 120);
          *(_QWORD *)(v5 + 16) = v19 + 1;
          result = sub_1A3A7C3A8(v20, v5 + v32 + v19 * v10);
        }
        if (v30 == ++v8)
        {
          v3 = *(_QWORD *)(v0 + 48);
          goto LABEL_15;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_15:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v3 + 40) = v5;
      swift_bridgeObjectRelease();
      sub_1A3A74B68();
      swift_unknownObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 184);
    v22 = *(_QWORD *)(v0 + 192) + 1;
    *(_QWORD *)(v0 + 192) = v22;
    v23 = *(_QWORD *)(v0 + 112);
    sub_1A3A7C288(*(_QWORD *)(v0 + 168)+ ((*(unsigned __int8 *)(v0 + 216) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 216))+ v21 * v22, v23);
    v24 = *(_QWORD *)(v23 + 8);
    v25 = swift_getObjectType();
    v33 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v24 + 64) + *(_QWORD *)(v24 + 64));
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v26;
    *v26 = v0;
    v26[1] = sub_1A3A7E334;
    return v33(0, 0, v25, v24);
  }
  return result;
}

uint64_t sub_1A3A7E744()
{
  uint64_t v0;

  return swift_task_switch();
}

uint64_t sub_1A3A7E77C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  v36 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v32 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v31 - v9;
  v11 = MEMORY[0x1E0DEE9D8];
  v37 = MEMORY[0x1E0DEE9D8];
  v12 = *(_QWORD *)(a1 + 16);
  result = swift_bridgeObjectRetain();
  v35 = v12;
  if (!v12)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v11;
  }
  v31 = v3;
  v14 = 0;
  v33 = a2 + 56;
  v15 = MEMORY[0x1E0DEE9D8];
  v34 = a1;
  while (v14 < *(_QWORD *)(a1 + 16))
  {
    v16 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    v17 = *(_QWORD *)(v36 + 72);
    sub_1A3A7C288(a1 + v16 + v17 * v14, (uint64_t)v10);
    v18 = *((_QWORD *)v10 + 1);
    ObjectType = swift_getObjectType();
    v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 24);
    swift_bridgeObjectRetain();
    v21 = v20(ObjectType, v18);
    v22 = v33;
    if (*(_QWORD *)(a2 + 16))
    {
      v23 = v21;
      v24 = sub_1A3AB56F0();
      v25 = -1 << *(_BYTE *)(a2 + 32);
      v26 = v24 & ~v25;
      if (((*(_QWORD *)(v22 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) != 0)
      {
        v27 = *(_QWORD *)(a2 + 48);
        if (*(_QWORD *)(v27 + 8 * v26) == v23)
        {
LABEL_12:
          swift_bridgeObjectRelease();
          sub_1A3A7C3A8((uint64_t)v10, v32);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            sub_1A3A7C9B8(0, *(_QWORD *)(v15 + 16) + 1, 1);
          v15 = v37;
          v30 = *(_QWORD *)(v37 + 16);
          v29 = *(_QWORD *)(v37 + 24);
          if (v30 >= v29 >> 1)
          {
            sub_1A3A7C9B8(v29 > 1, v30 + 1, 1);
            v15 = v37;
          }
          *(_QWORD *)(v15 + 16) = v30 + 1;
          result = sub_1A3A7C3A8(v32, v15 + v16 + v30 * v17);
          goto LABEL_4;
        }
        v28 = ~v25;
        while (1)
        {
          v26 = (v26 + 1) & v28;
          if (((*(_QWORD *)(v22 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
            break;
          if (*(_QWORD *)(v27 + 8 * v26) == v23)
            goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    result = sub_1A3A7C2CC((uint64_t)v10);
LABEL_4:
    ++v14;
    a1 = v34;
    if (v14 == v35)
    {
      v11 = v37;
      goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A3A7E9FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  v35 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v36 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v31 - v9;
  v11 = MEMORY[0x1E0DEE9D8];
  v37 = MEMORY[0x1E0DEE9D8];
  v12 = *(_QWORD *)(a1 + 16);
  result = swift_bridgeObjectRetain();
  v34 = v12;
  if (!v12)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v11;
  }
  v31 = v3;
  v14 = 0;
  v32 = a2 + 56;
  v15 = MEMORY[0x1E0DEE9D8];
  v33 = a1;
  while (v14 < *(_QWORD *)(a1 + 16))
  {
    v16 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    v17 = *(_QWORD *)(v35 + 72);
    sub_1A3A7C288(a1 + v16 + v17 * v14, (uint64_t)v10);
    v18 = *((_QWORD *)v10 + 1);
    ObjectType = swift_getObjectType();
    v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 24);
    swift_bridgeObjectRetain();
    v21 = v20(ObjectType, v18);
    v22 = v32;
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_13;
    v23 = v21;
    v24 = sub_1A3AB56F0();
    v25 = -1 << *(_BYTE *)(a2 + 32);
    v26 = v24 & ~v25;
    if (((*(_QWORD *)(v22 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
      goto LABEL_13;
    v27 = *(_QWORD *)(a2 + 48);
    if (*(_QWORD *)(v27 + 8 * v26) != v23)
    {
      v28 = ~v25;
      while (1)
      {
        v26 = (v26 + 1) & v28;
        if (((*(_QWORD *)(v22 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
          break;
        if (*(_QWORD *)(v27 + 8 * v26) == v23)
          goto LABEL_3;
      }
LABEL_13:
      swift_bridgeObjectRelease();
      sub_1A3A7C3A8((uint64_t)v10, v36);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_1A3A7C9B8(0, *(_QWORD *)(v15 + 16) + 1, 1);
      v15 = v37;
      v30 = *(_QWORD *)(v37 + 16);
      v29 = *(_QWORD *)(v37 + 24);
      if (v30 >= v29 >> 1)
      {
        sub_1A3A7C9B8(v29 > 1, v30 + 1, 1);
        v15 = v37;
      }
      *(_QWORD *)(v15 + 16) = v30 + 1;
      result = sub_1A3A7C3A8(v36, v15 + v16 + v30 * v17);
      goto LABEL_4;
    }
LABEL_3:
    swift_bridgeObjectRelease();
    result = sub_1A3A7C2CC((uint64_t)v10);
LABEL_4:
    ++v14;
    a1 = v33;
    if (v14 == v34)
    {
      v11 = v37;
      goto LABEL_19;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A3A7EC80(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[6] = a1;
  v2[7] = a2;
  v3 = sub_1A39A4820(&qword_1EE6D46A8);
  v2[8] = v3;
  v2[9] = *(_QWORD *)(v3 - 8);
  v2[10] = swift_task_alloc();
  v4 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  v2[11] = v4;
  v2[12] = *(_QWORD *)(v4 - 8);
  v2[13] = swift_task_alloc();
  type metadata accessor for TTSSpeechQueue(0);
  sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  swift_bridgeObjectRetain_n();
  v2[14] = sub_1A3AB4C70();
  v2[15] = v5;
  return swift_task_switch();
}

uint64_t sub_1A3A7ED60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t ObjectType;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 56);
  swift_beginAccess();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1A3A7E77C(v2, v1);
  *(_QWORD *)(v0 + 128) = v3;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v0 + 136) = v4;
  if (v4)
  {
    v5 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 104);
    v7 = *(_DWORD *)(v5 + 80);
    *(_DWORD *)(v0 + 176) = v7;
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v5 + 72);
    *(_QWORD *)(v0 + 152) = 0;
    sub_1A3A7C288(*(_QWORD *)(v0 + 128) + ((v7 + 32) & ~(unint64_t)v7), v6);
    v8 = *(_QWORD *)(v6 + 8);
    ObjectType = swift_getObjectType();
    v16 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v8 + 64) + *(_QWORD *)(v8 + 64));
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v10;
    *v10 = v0;
    v10[1] = sub_1A3A7EEEC;
    return v16(0, 0, ObjectType, v8);
  }
  else
  {
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v0 + 48);
    v13 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRetain();
    v14 = swift_bridgeObjectRetain();
    v15 = sub_1A3A7E9FC(v14, v13);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v12 + 40) = v15;
    swift_bridgeObjectRelease();
    sub_1A3A74B68();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A3A7EEEC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A7EF50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  *(_BYTE *)(v0 + 180) = 4;
  sub_1A39A4820(&qword_1EE6D4690);
  sub_1A3AB4E50();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  *(_QWORD *)(v0 + 40) = 0;
  sub_1A3AB4E5C();
  return swift_task_switch();
}

uint64_t sub_1A3A7EFF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  _QWORD *v13;
  uint64_t (*v14)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 152) + 1;
  sub_1A3A7C2CC(*(_QWORD *)(v0 + 104));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(v0 + 48);
    v4 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRetain();
    v5 = swift_bridgeObjectRetain();
    v6 = sub_1A3A7E9FC(v5, v4);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 40) = v6;
    swift_bridgeObjectRelease();
    sub_1A3A74B68();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 152) + 1;
    *(_QWORD *)(v0 + 152) = v9;
    v10 = *(_QWORD *)(v0 + 104);
    sub_1A3A7C288(*(_QWORD *)(v0 + 128)+ ((*(unsigned __int8 *)(v0 + 176) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 176))+ v8 * v9, v10);
    v11 = *(_QWORD *)(v10 + 8);
    ObjectType = swift_getObjectType();
    v14 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v11 + 64) + *(_QWORD *)(v11 + 64));
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v13;
    *v13 = v0;
    v13[1] = sub_1A3A7EEEC;
    return v14(0, 0, ObjectType, v11);
  }
}

uint64_t sub_1A3A7F154()
{
  uint64_t v0;

  return swift_task_switch();
}

uint64_t sub_1A3A7F18C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  _QWORD *v13;
  uint64_t (*v14)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 152) + 1;
  sub_1A3A7C2CC(*(_QWORD *)(v0 + 104));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(v0 + 48);
    v4 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRetain();
    v5 = swift_bridgeObjectRetain();
    v6 = sub_1A3A7E9FC(v5, v4);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 40) = v6;
    swift_bridgeObjectRelease();
    sub_1A3A74B68();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 152) + 1;
    *(_QWORD *)(v0 + 152) = v9;
    v10 = *(_QWORD *)(v0 + 104);
    sub_1A3A7C288(*(_QWORD *)(v0 + 128)+ ((*(unsigned __int8 *)(v0 + 176) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 176))+ v8 * v9, v10);
    v11 = *(_QWORD *)(v10 + 8);
    ObjectType = swift_getObjectType();
    v14 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v11 + 64) + *(_QWORD *)(v11 + 64));
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v13;
    *v13 = v0;
    v13[1] = sub_1A3A7EEEC;
    return v14(0, 0, ObjectType, v11);
  }
}

uint64_t sub_1A3A7F2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v4 = sub_1A39A4820(&qword_1EE6D46A8);
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v5 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  v3[12] = v5;
  v3[13] = *(_QWORD *)(v5 - 8);
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  type metadata accessor for TTSSpeechQueue(0);
  sub_1A3A80108(&qword_1EE6D4588, (uint64_t)&protocol conformance descriptor for TTSSpeechQueue);
  swift_bridgeObjectRetain_n();
  v3[19] = sub_1A3AB4C70();
  v3[20] = v6;
  return swift_task_switch();
}

uint64_t sub_1A3A7F3FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t ObjectType;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  char v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t (*v55)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = v0[6];
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 40);
  v3 = MEMORY[0x1E0DEE9D8];
  v57 = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v49 = v4;
  v51 = v0;
  if (!v4)
  {
LABEL_18:
    v0[21] = v3;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v3 + 16);
    v0[22] = v19;
    if (v19)
    {
      v20 = v0[13];
      v21 = v0[14];
      v22 = *(_DWORD *)(v20 + 80);
      *((_DWORD *)v0 + 54) = v22;
      v0[23] = *(_QWORD *)(v20 + 72);
      v0[24] = 0;
      sub_1A3A7C288(v0[21] + ((v22 + 32) & ~(unint64_t)v22), v21);
      v23 = *(_QWORD *)(v21 + 8);
      ObjectType = swift_getObjectType();
      v55 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v23 + 64) + *(_QWORD *)(v23 + 64));
      v25 = (_QWORD *)swift_task_alloc();
      v0[25] = v25;
      *v25 = v0;
      v25[1] = sub_1A3A7F914;
      return v55(0, 0, ObjectType, v23);
    }
    swift_release();
    v26 = v0[6];
    v27 = *(_QWORD *)(v26 + 40);
    v28 = MEMORY[0x1E0DEE9D8];
    v58 = MEMORY[0x1E0DEE9D8];
    v29 = *(_QWORD *)(v27 + 16);
    swift_bridgeObjectRetain_n();
    result = swift_bridgeObjectRetain();
    v53 = v29;
    if (!v29)
    {
      v46 = v28;
LABEL_39:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v26 + 40) = v46;
      swift_bridgeObjectRelease();
      sub_1A3A74B68();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return ((uint64_t (*)(void))v0[1])();
    }
    v30 = 0;
    v48 = v0[13];
    v50 = v0[16];
    v46 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if (v30 >= *(_QWORD *)(v27 + 16))
        goto LABEL_41;
      v32 = v0[7];
      v31 = v0[8];
      v33 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
      v34 = v27;
      v56 = *(_QWORD *)(v48 + 72);
      sub_1A3A7C288(v27 + v33 + v56 * v30, v0[16]);
      v35 = *(_QWORD *)(v50 + 8);
      v36 = swift_getObjectType();
      v37 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 32);
      swift_bridgeObjectRetain();
      v0 = v51;
      if (v37(v36, v35) == v32 && v38 == v31)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v40 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v40 & 1) == 0)
        {
          sub_1A3A7C3A8(v51[16], v51[15]);
          v27 = v34;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v41 = v46;
          }
          else
          {
            sub_1A3A7C9B8(0, *(_QWORD *)(v46 + 16) + 1, 1);
            v41 = v58;
          }
          v43 = *(_QWORD *)(v41 + 16);
          v42 = *(_QWORD *)(v41 + 24);
          if (v43 >= v42 >> 1)
          {
            sub_1A3A7C9B8(v42 > 1, v43 + 1, 1);
            v41 = v58;
          }
          v44 = v51[15];
          *(_QWORD *)(v41 + 16) = v43 + 1;
          v46 = v41;
          result = sub_1A3A7C3A8(v44, v41 + v33 + v43 * v56);
          goto LABEL_24;
        }
      }
      result = sub_1A3A7C2CC(v51[16]);
      v27 = v34;
LABEL_24:
      if (v53 == ++v30)
      {
        v26 = v51[6];
        goto LABEL_39;
      }
    }
  }
  v6 = 0;
  v45 = v0[13];
  v47 = v0[18];
  while (v6 < *(_QWORD *)(v2 + 16))
  {
    v7 = v0[7];
    v8 = v0[8];
    v9 = v2;
    v52 = *(_QWORD *)(v45 + 72);
    v54 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
    sub_1A3A7C288(v2 + v54 + v52 * v6, v0[18]);
    v10 = *(_QWORD *)(v47 + 8);
    v11 = swift_getObjectType();
    v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 32);
    swift_bridgeObjectRetain();
    v0 = v51;
    if (v12(v11, v10) == v7 && v13 == v8)
    {
      swift_bridgeObjectRelease_n();
      v2 = v9;
LABEL_13:
      sub_1A3A7C3A8(v51[18], v51[17]);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A3A7C9B8(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v57;
      }
      v17 = *(_QWORD *)(v3 + 16);
      v16 = *(_QWORD *)(v3 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_1A3A7C9B8(v16 > 1, v17 + 1, 1);
        v3 = v57;
      }
      v18 = v51[17];
      *(_QWORD *)(v3 + 16) = v17 + 1;
      result = sub_1A3A7C3A8(v18, v3 + v54 + v17 * v52);
      goto LABEL_4;
    }
    v15 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = v9;
    if ((v15 & 1) != 0)
      goto LABEL_13;
    result = sub_1A3A7C2CC(v51[18]);
LABEL_4:
    if (v49 == ++v6)
      goto LABEL_18;
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1A3A7F914()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A7F978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  *(_BYTE *)(v0 + 220) = 4;
  sub_1A39A4820(&qword_1EE6D4690);
  sub_1A3AB4E50();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  *(_QWORD *)(v0 + 40) = 0;
  sub_1A3AB4E5C();
  return swift_task_switch();
}

uint64_t sub_1A3A7FA18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 192) + 1;
  sub_1A3A7C2CC(*(_QWORD *)(v0 + 112));
  if (v2 != v1)
  {
    v23 = *(_QWORD *)(v0 + 184);
    v24 = *(_QWORD *)(v0 + 192) + 1;
    *(_QWORD *)(v0 + 192) = v24;
    v25 = *(_QWORD *)(v0 + 112);
    sub_1A3A7C288(*(_QWORD *)(v0 + 168)+ ((*(unsigned __int8 *)(v0 + 216) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 216))+ v23 * v24, v25);
    v26 = *(_QWORD *)(v25 + 8);
    ObjectType = swift_getObjectType();
    v34 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v26 + 64) + *(_QWORD *)(v26 + 64));
    v28 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v28;
    *v28 = v0;
    v28[1] = sub_1A3A7F914;
    return v34(0, 0, ObjectType, v26);
  }
  swift_release();
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v3 + 40);
  v5 = MEMORY[0x1E0DEE9D8];
  v35 = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain_n();
  result = swift_bridgeObjectRetain();
  v32 = v6;
  v33 = v4;
  if (v6)
  {
    v8 = 0;
    v30 = *(_QWORD *)(v0 + 104);
    v31 = *(_QWORD *)(v0 + 128);
    v29 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if (v8 >= *(_QWORD *)(v4 + 16))
      {
        __break(1u);
        return result;
      }
      v9 = *(_QWORD *)(v0 + 56);
      v10 = *(_QWORD *)(v0 + 64);
      v11 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
      v12 = *(_QWORD *)(v30 + 72);
      sub_1A3A7C288(v4 + v11 + v12 * v8, *(_QWORD *)(v0 + 128));
      v13 = *(_QWORD *)(v31 + 8);
      v14 = swift_getObjectType();
      v15 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 32);
      swift_bridgeObjectRetain();
      if (v15(v14, v13) == v9 && v16 == v10)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v18 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          sub_1A3A7C3A8(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 120));
          v4 = v33;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v19 = v29;
          }
          else
          {
            sub_1A3A7C9B8(0, *(_QWORD *)(v29 + 16) + 1, 1);
            v19 = v35;
          }
          v21 = *(_QWORD *)(v19 + 16);
          v20 = *(_QWORD *)(v19 + 24);
          if (v21 >= v20 >> 1)
          {
            sub_1A3A7C9B8(v20 > 1, v21 + 1, 1);
            v19 = v35;
          }
          v22 = *(_QWORD *)(v0 + 120);
          *(_QWORD *)(v19 + 16) = v21 + 1;
          v29 = v19;
          result = sub_1A3A7C3A8(v22, v19 + v11 + v21 * v12);
          goto LABEL_6;
        }
      }
      result = sub_1A3A7C2CC(*(_QWORD *)(v0 + 128));
      v4 = v33;
LABEL_6:
      if (v32 == ++v8)
      {
        v3 = *(_QWORD *)(v0 + 48);
        goto LABEL_22;
      }
    }
  }
  v29 = v5;
LABEL_22:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 40) = v29;
  swift_bridgeObjectRelease();
  sub_1A3A74B68();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A7FD5C()
{
  uint64_t v0;

  return swift_task_switch();
}

uint64_t sub_1A3A7FD94(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1A3A7C458(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = *(_QWORD *)(type metadata accessor for TTSSpeechQueue.QueueableWrapper(0) - 8);
  v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v14 * a1;
  v16 = v13 + v14 * a1;
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_25;
  v18 = *(_QWORD *)(v4 + 16);
  v19 = v18 - a2;
  if (__OFSUB__(v18, a2))
    goto LABEL_31;
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront();
    }
    v21 = *(_QWORD *)(v4 + 16);
    v22 = __OFADD__(v21, v8);
    v23 = v21 - v7;
    if (!v22)
    {
      *(_QWORD *)(v4 + 16) = v23;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

uint64_t sub_1A3A7FF3C()
{
  return sub_1A3A7FF50((void (*)(_QWORD))MEMORY[0x1E0DEEEC0], (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1A3A7FF50(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 32));
  return swift_deallocObject();
}

uint64_t sub_1A3A7FF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A39B1604;
  return sub_1A3A79A78((uint64_t)v3, v4, v5, v2);
}

uint64_t sub_1A3A7FFD8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1A39D5174;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_1A39D5174;
  return sub_1A3A79F24();
}

uint64_t sub_1A3A80040()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A80074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1A39D5174;
  return sub_1A3A750C8((uint64_t)v4, v5, v6, v2, v3);
}

uint64_t sub_1A3A800C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3A80108(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for TTSSpeechQueue(255);
    result = MEMORY[0x1A8597738](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A3A80148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A39A4820(&qword_1EE6D46F8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A3A801D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A39A4820(&qword_1EE6D46F8) - 8) + 80);
  v3 = v0[4];
  v4 = v0[5];
  v5 = v0[6];
  v6 = (uint64_t)v0 + ((v2 + 56) & ~v2);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_1A39D5174;
  return sub_1A3A791F4((uint64_t)v7, v8, v9, v3, v4, v5, v6);
}

uint64_t sub_1A3A80254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A39A4820(&qword_1EE6D46F8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A3A802CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A39A4820(&qword_1EE6D46F8) - 8) + 80);
  v3 = *(int **)(v0 + 16);
  v4 = v0 + ((v2 + 32) & ~v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39D5174;
  v5[2] = v4;
  v8 = (uint64_t (*)(void))((char *)v3 + *v3);
  v6 = (_QWORD *)swift_task_alloc();
  v5[3] = v6;
  *v6 = v5;
  v6[1] = sub_1A3A797C4;
  return v8();
}

uint64_t sub_1A3A80378()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1A39D5174;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_1A39D5174;
  return sub_1A3A79F24();
}

uint64_t sub_1A3A803E0(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int128 v8;

  v3 = *(_OWORD **)(v1 + 16);
  v8 = *(_OWORD *)(v1 + 24);
  sub_1A39B11F4((uint64_t)v3, &qword_1EE6D4618);
  v4 = type metadata accessor for TTSSpeechQueue.QueueableWrapper(0);
  v5 = (char *)v3 + *(int *)(v4 + 20);
  v6 = sub_1A39A4820(&qword_1EE6D4690);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v5, a1, v6);
  *v3 = v8;
  (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
  return swift_unknownObjectRetain();
}

uint64_t TTSMarkup.SayAs.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(a3 + 72))(v3);
}

void TTSMarkup.SayAs.init(_:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  char v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _UNKNOWN **v23;
  __int128 v24;
  _OWORD v25[2];
  uint64_t v26;

  *(_QWORD *)&v24 = MEMORY[0x1E0DEE9D8];
  WORD4(v24) = 2574;
  v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x100))();
  v5 = v4;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_1A3AB5480();
    if (v6)
      goto LABEL_3;
LABEL_17:
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_18;
  }
  v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_17;
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
    return;
  }
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    if ((v5 & 0xC000000000000001) != 0)
      v9 = (id)MEMORY[0x1A85960B8](v7, v5);
    else
      v9 = *(id *)(v5 + 8 * v7 + 32);
    v10 = v9;
    sub_1A39D518C((uint64_t)&v19);

    if (v20)
    {
      sub_1A39A1AB8(&v19, (uint64_t)&v21);
      sub_1A39A1AB8(&v21, (uint64_t)&v19);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_1A39BFBD8(0, v8[2] + 1, 1, v8);
      v12 = v8[2];
      v11 = v8[3];
      if (v12 >= v11 >> 1)
        v8 = sub_1A39BFBD8((_QWORD *)(v11 > 1), v12 + 1, 1, v8);
      v8[2] = v12 + 1;
      sub_1A39A1AB8(&v19, (uint64_t)&v8[5 * v12 + 4]);
    }
    else
    {
      sub_1A39BFB74((uint64_t)&v19);
    }
    ++v7;
  }
  while (v6 != v7);
LABEL_18:
  swift_bridgeObjectRelease_n();
  v22 = sub_1A39A4820(&qword_1EE6D2BE0);
  v23 = &protocol witness table for <A> [A];
  *(_QWORD *)&v21 = v8;
  v13 = sub_1A39A1AB8(&v21, (uint64_t)v25);
  v14 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8);
  if (*(_QWORD *)(v14(v13) + 16) && (sub_1A39A2734(0x6572707265746E69, 0xEC00000073612D74), (v15 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v16 = TTSMarkup.SayAs.Interpretation.init(rawValue:)((char *)&v21);
    if (v21 != 14)
      BYTE8(v24) = v21;
  }
  else
  {
    v16 = swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v14(v16) + 16) && (sub_1A39A2734(0x74616D726F66, 0xE600000000000000), (v17 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    TTSMarkup.SayAs.Format.init(rawValue:)((char *)&v21);

    if (v21 != 10)
      BYTE9(v24) = v21;
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v18 = v25[0];
  *(_OWORD *)a2 = v24;
  *(_OWORD *)(a2 + 16) = v18;
  *(_OWORD *)(a2 + 32) = v25[1];
  *(_QWORD *)(a2 + 48) = v26;
}

uint64_t TTSMarkup.SayAs.Interpretation.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1A3AB54E0();
  result = swift_bridgeObjectRelease();
  v4 = 14;
  if (v2 < 0xE)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t TTSMarkup.SayAs.Format.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1A3AB54E0();
  result = swift_bridgeObjectRelease();
  v4 = 10;
  if (v2 < 0xA)
    v4 = v2;
  *a1 = v4;
  return result;
}

void static TTSMarkup.SayAs.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t TTSMarkup.SayAs.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.SayAs.eventTaps.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.SayAs.eventTaps.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.SayAs.Interpretation.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A80938 + 4 * byte_1A3AC9000[*v0]))(0x6574636172616863, 0xEA00000000007372);
}

uint64_t sub_1A3A80938()
{
  return 0x756F2D6C6C657073;
}

uint64_t sub_1A3A80958()
{
  return 0x6C616E6964726163;
}

uint64_t sub_1A3A80970()
{
  return 0x7265626D756ELL;
}

uint64_t sub_1A3A80984()
{
  return 0x6C616E6964726FLL;
}

uint64_t sub_1A3A8099C()
{
  return 0x737469676964;
}

uint64_t sub_1A3A809B0()
{
  return 0x6E6F697463617266;
}

uint64_t sub_1A3A809C8()
{
  return 1953066613;
}

uint64_t sub_1A3A809D8()
{
  return 1702125924;
}

uint64_t sub_1A3A809E8()
{
  return 1701669236;
}

uint64_t sub_1A3A809F8()
{
  return 0x6E6F6870656C6574;
}

uint64_t TTSMarkup.SayAs.Interpretation.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A80A94 + 4 * byte_1A3AC900E[*v0]))(0x6574636172616863, 0xEA00000000007372);
}

uint64_t sub_1A3A80A94()
{
  return 0x756F2D6C6C657073;
}

uint64_t sub_1A3A80AB4()
{
  return 0x6C616E6964726163;
}

uint64_t sub_1A3A80ACC()
{
  return 0x7265626D756ELL;
}

uint64_t sub_1A3A80AE0()
{
  return 0x6C616E6964726FLL;
}

uint64_t sub_1A3A80AF8()
{
  return 0x737469676964;
}

uint64_t sub_1A3A80B0C()
{
  return 0x6E6F697463617266;
}

uint64_t sub_1A3A80B24()
{
  return 1953066613;
}

uint64_t sub_1A3A80B34()
{
  return 1702125924;
}

uint64_t sub_1A3A80B44()
{
  return 1701669236;
}

uint64_t sub_1A3A80B54()
{
  return 0x6E6F6870656C6574;
}

uint64_t sub_1A3A80BBC()
{
  return sub_1A3A80D80();
}

void sub_1A3A80BC8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A3A80C08(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A3A80C8C + 4 * byte_1A3AC9026[a2]))(a3 + 2295);
}

uint64_t sub_1A3A80C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (a1 == a3 + 2295 && v3 == v4)
    v5 = 1;
  else
    v5 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1A3A80D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = TTSMarkup.SayAs.Interpretation.rawValue.getter();
  v2 = v1;
  if (v0 == TTSMarkup.SayAs.Interpretation.rawValue.getter() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1A3A80E14()
{
  sub_1A3AB56FC();
  TTSMarkup.SayAs.Interpretation.rawValue.getter();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A80E78()
{
  TTSMarkup.SayAs.Interpretation.rawValue.getter();
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

void sub_1A3A80EC8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1A3A80F00()
{
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A80F7C()
{
  sub_1A3AB56FC();
  TTSMarkup.SayAs.Interpretation.rawValue.getter();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A80FDC@<X0>(char *a1@<X8>)
{
  return TTSMarkup.SayAs.Interpretation.init(rawValue:)(a1);
}

uint64_t sub_1A3A80FE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = TTSMarkup.SayAs.Interpretation.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t TTSMarkup.SayAs.Format.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A81038 + 4 * byte_1A3AC903A[*v0]))(7955565, 0xE300000000000000);
}

uint64_t sub_1A3A81038(uint64_t a1)
{
  return a1 + 2295;
}

uint64_t sub_1A3A81040()
{
  return 6581625;
}

uint64_t sub_1A3A8104C()
{
  return 25709;
}

uint64_t sub_1A3A81058()
{
  return 28004;
}

uint64_t sub_1A3A81064()
{
  return 28025;
}

uint64_t sub_1A3A81070()
{
  return 31085;
}

uint64_t sub_1A3A8107C()
{
  return 100;
}

uint64_t sub_1A3A81088()
{
  return 109;
}

uint64_t sub_1A3A81094()
{
  return 121;
}

uint64_t TTSMarkup.SayAs.Format.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A810C8 + 4 * byte_1A3AC9044[*v0]))(7955565, 0xE300000000000000);
}

uint64_t sub_1A3A810C8(uint64_t a1)
{
  return a1 + 2295;
}

uint64_t sub_1A3A810D0()
{
  return 6581625;
}

uint64_t sub_1A3A810DC()
{
  return 25709;
}

uint64_t sub_1A3A810E8()
{
  return 28004;
}

uint64_t sub_1A3A810F4()
{
  return 28025;
}

uint64_t sub_1A3A81100()
{
  return 31085;
}

uint64_t sub_1A3A8110C()
{
  return 100;
}

uint64_t sub_1A3A81118()
{
  return 109;
}

uint64_t sub_1A3A81124()
{
  return 121;
}

void sub_1A3A81130(char *a1)
{
  sub_1A3A80BC8(*a1);
}

uint64_t sub_1A3A8113C()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1A3AB56FC();
  sub_1A3A80EC8((uint64_t)v3, v1);
  return sub_1A3AB5738();
}

void sub_1A3A81180(uint64_t a1)
{
  char *v1;

  sub_1A3A80EC8(a1, *v1);
}

uint64_t sub_1A3A81188()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1A3AB56FC();
  sub_1A3A80EC8((uint64_t)v3, v1);
  return sub_1A3AB5738();
}

uint64_t sub_1A3A811C8@<X0>(char *a1@<X8>)
{
  return TTSMarkup.SayAs.Format.init(rawValue:)(a1);
}

uint64_t sub_1A3A811D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = TTSMarkup.SayAs.Format.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t TTSMarkup.SayAs._content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 16, a1);
}

uint64_t TTSMarkup.SayAs._content.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 16;
  sub_1A39A47C4(v3);
  return sub_1A39A1AB8(a1, v3);
}

uint64_t (*TTSMarkup.SayAs._content.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.SayAs.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 16, a1);
}

uint64_t TTSMarkup.SayAs.init(interpretation:_:speech:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  char v4;
  char v5;

  v4 = *a1;
  v5 = *a2;
  *(_QWORD *)a4 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a4 + 8) = v4;
  *(_BYTE *)(a4 + 9) = v5;
  return a3();
}

uint64_t TTSMarkup.SayAs.init(format:speech:)@<X0>(char *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  char v3;

  v3 = *a1;
  *(_QWORD *)a3 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a3 + 8) = 14;
  *(_BYTE *)(a3 + 9) = v3;
  return a2();
}

uint64_t TTSMarkup.SayAs.init(interpretation:speech:)@<X0>(char *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  char v3;

  v3 = *a1;
  *(_QWORD *)a3 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a3 + 9) = 10;
  *(_BYTE *)(a3 + 8) = v3;
  return a2();
}

void TTSMarkup.SayAs.attributes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;

  if (*(_BYTE *)(v0 + 8) != 14)
  {
    v1 = TTSMarkup.SayAs.Interpretation.rawValue.getter();
    v3 = v2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1A39A93EC(v1, v3, 0x6572707265746E69, 0xEC00000073612D74, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  __asm { BR              X10 }
}

uint64_t sub_1A3A813C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1A39A93EC(v2 + 2295, v1, 0x74616D726F66, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  return v0;
}

unint64_t sub_1A3A81498()
{
  unint64_t result;

  result = qword_1EE6D4780;
  if (!qword_1EE6D4780)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSMarkup.SayAs.Format, &type metadata for TTSMarkup.SayAs.Format);
    atomic_store(result, (unint64_t *)&qword_1EE6D4780);
  }
  return result;
}

uint64_t _s5SayAsVwxx(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 16;
  swift_bridgeObjectRelease();
  return sub_1A39A47C4(v1);
}

uint64_t _s5SayAsVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v3 = a2 + 16;
  v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v4;
  v5 = v4;
  v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_bridgeObjectRetain();
  v6(a1 + 16, v3, v5);
  return a1;
}

uint64_t _s5SayAsVwca(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  sub_1A39B8070((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  return a1;
}

uint64_t _s5SayAsVwta(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  sub_1A39A47C4(a1 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t _s5SayAsVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s5SayAsVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.SayAs()
{
  return &type metadata for TTSMarkup.SayAs;
}

uint64_t _s5SayAsV14InterpretationOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s5SayAsV14InterpretationOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_1A3A817A8 + 4 * byte_1A3AC905E[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1A3A817DC + 4 * byte_1A3AC9059[v4]))();
}

uint64_t sub_1A3A817DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A817E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A817ECLL);
  return result;
}

uint64_t sub_1A3A817F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A81800);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_1A3A81804(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A8180C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.SayAs.Interpretation()
{
  return &type metadata for TTSMarkup.SayAs.Interpretation;
}

uint64_t _s5SayAsV6FormatOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s5SayAsV6FormatOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1A3A81904 + 4 * byte_1A3AC9068[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1A3A81938 + 4 * byte_1A3AC9063[v4]))();
}

uint64_t sub_1A3A81938(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A81940(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A81948);
  return result;
}

uint64_t sub_1A3A81954(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A8195CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1A3A81960(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A81968(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.SayAs.Format()
{
  return &type metadata for TTSMarkup.SayAs.Format;
}

uint64_t TTSMarkup.Pause.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *((_DWORD *)v3 + 2);
  v5 = *((_BYTE *)v3 + 12);
  v6 = *((_BYTE *)v3 + 13);
  v7 = v3[2];
  v8 = v3[3];
  v10 = *v3;
  v11 = v4;
  v12 = v5;
  v13 = v6;
  v14 = v7;
  v15 = v8;
  return (*(uint64_t (**)(uint64_t *))(a3 + 24))(&v10);
}

void TTSMarkup.Pause.init(_:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v4)(void);
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;

  v4 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8);
  v5 = v4();
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_1A39A2734(1701669236, 0xE400000000000000), (v7 & 1) != 0))
  {
    v8 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v6);
    v9 = *v8;
    v10 = v8[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    v11 = sub_1A3A81B88();
    swift_bridgeObjectRelease();

    v12 = v11 & 0x100000000;
    if ((v11 & 0x100000000) != 0)
      v11 = 0;
    else
      v11 = v11;
    v13 = 0x60000000000;
  }
  else
  {
    v14 = swift_bridgeObjectRelease();
    v15 = ((uint64_t (*)(uint64_t))v4)(v14);
    if (*(_QWORD *)(v15 + 16) && (v16 = sub_1A39A2734(0x6874676E65727473, 0xE800000000000000), (v17 & 1) != 0))
    {
      v18 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 16 * v16);
      v19 = *v18;
      v20 = v18[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      TTSMarkup.Pause.Strength.init(rawValue:)(v19, v20, (char *)&v21);

      v12 = 0x100000000;
      v13 = 0x60000000000;
      v9 = 0;
      v10 = 0xE000000000000000;
      if (v21 != 6)
        v13 = (unint64_t)v21 << 40;
      v11 = 0;
      if (v21 != 6)
        v12 = 0x100000000;
    }
    else
    {
      v11 = 1051092582;

      swift_bridgeObjectRelease();
      v9 = 0;
      v13 = 0;
      v12 = 0;
      v10 = 0xE000000000000000;
    }
  }
  *a2 = MEMORY[0x1E0DEE9D8];
  a2[1] = v11 | v13 | v12;
  a2[2] = v9;
  a2[3] = v10;
}

unint64_t sub_1A3A81B88()
{
  id v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unsigned __int8 v19;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BYTE *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  float v35;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  v1 = sub_1A3A03838(0xD000000000000031, 0x80000001A3AF2A80, 1);
  if (!v1)
    goto LABEL_10;
  v2 = v1;
  v3 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRetain();
  v4 = sub_1A3AB4AE4();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v2, sel_firstMatchInString_options_range_, v3, 0, 0, v4);

  if (!v5)
    goto LABEL_9;
  v6 = (void *)sub_1A3AB4958();
  objc_msgSend(v5, sel_rangeWithName_, v6);

  sub_1A3AB4FA0();
  if ((v7 & 1) != 0
    || (v8 = (void *)sub_1A3AB4958(),
        objc_msgSend(v5, sel_rangeWithName_, v8),
        v8,
        sub_1A3AB4FA0(),
        (v9 & 1) != 0))
  {

LABEL_9:
    goto LABEL_10;
  }
  v10 = sub_1A3AB4B38();
  v11 = MEMORY[0x1A85957F4](v10);
  v13 = v12;
  swift_bridgeObjectRelease();
  v14 = sub_1A3AB4B38();
  v15 = MEMORY[0x1A85957F4](v14);
  v17 = v16;
  swift_bridgeObjectRelease();
  if ((v15 != 115 || v17 != 0xE100000000000000) && (sub_1A3AB5654() & 1) == 0)
  {
    if (v15 == 29549 && v17 == 0xE200000000000000)
    {
      v25 = swift_bridgeObjectRelease();
LABEL_33:
      v35 = 0.0;
      v27 = MEMORY[0x1E0C80A78](v25);
      if ((v13 & 0x1000000000000000) != 0 || !(v13 & 0x2000000000000000 | v11 & 0x1000000000000000))
      {
        sub_1A3AB52A0();
      }
      else
      {
        MEMORY[0x1E0C80A78](v27);
        if ((v13 & 0x2000000000000000) != 0)
        {
          v32 = v11;
          v33 = v13 & 0xFFFFFFFFFFFFFFLL;
          v29 = (v11 > 0x20u || ((0x100003E01uLL >> v11) & 1) == 0)
             && (v28 = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0
             && *v28 == 0;
          v34 = v29;

          swift_bridgeObjectRelease();
LABEL_47:
          if (v34)
          {
            v19 = 0;
            v18 = v35 / 1000.0;
            goto LABEL_11;
          }
          goto LABEL_10;
        }
        if ((v11 & 0x1000000000000000) != 0)
        {
          ((void (*)(uint64_t *__return_ptr, uint64_t))sub_1A3A628A4)(&v32, (v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v31 = sub_1A3AB5318();
          ((void (*)(uint64_t *__return_ptr, uint64_t))sub_1A3A628A4)(&v32, v31);
        }
        v34 = v32;
      }

      swift_bridgeObjectRelease();
      goto LABEL_47;
    }
    v26 = sub_1A3AB5654();
    v25 = swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
      goto LABEL_33;

    swift_bridgeObjectRelease();
LABEL_10:
    v18 = 0.0;
    v19 = 1;
    goto LABEL_11;
  }
  v21 = swift_bridgeObjectRelease();
  v35 = 0.0;
  v22 = MEMORY[0x1E0C80A78](v21);
  if ((v13 & 0x1000000000000000) != 0 || !(v13 & 0x2000000000000000 | v11 & 0x1000000000000000))
  {
    sub_1A3AB52A0();
  }
  else
  {
    MEMORY[0x1E0C80A78](v22);
    if ((v13 & 0x2000000000000000) != 0)
    {
      v32 = v11;
      v33 = v13 & 0xFFFFFFFFFFFFFFLL;
      v24 = (v11 > 0x20u || ((0x100003E01uLL >> v11) & 1) == 0)
         && (v23 = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0
         && *v23 == 0;
      v34 = v24;

      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
    if ((v11 & 0x1000000000000000) != 0)
    {
      ((void (*)(uint64_t *__return_ptr, uint64_t))sub_1A3A628A4)(&v32, (v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v30 = sub_1A3AB5318();
      ((void (*)(uint64_t *__return_ptr, uint64_t))sub_1A3A628A4)(&v32, v30);
    }
    v34 = v32;
  }

  swift_bridgeObjectRelease();
LABEL_29:
  v18 = v35;
  if (!v34)
    v18 = 0.0;
  v19 = !v34;
LABEL_11:
  LOBYTE(v32) = v19;
  return LODWORD(v18) | ((unint64_t)v19 << 32);
}

uint64_t TTSMarkup.Pause.Strength.init(rawValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  BOOL v4;
  uint64_t result;
  char v8;
  char v9;

  v4 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v4 || (sub_1A3AB5654() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v8 = 0;
  }
  else if (a1 == 0x6B6165772D78 && a2 == 0xE600000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v8 = 1;
  }
  else if (a1 == 1801545079 && a2 == 0xE400000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v8 = 2;
  }
  else if (a1 == 0x6D756964656DLL && a2 == 0xE600000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v8 = 3;
  }
  else if (a1 == 0x676E6F727473 && a2 == 0xE600000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v8 = 4;
  }
  else if (a1 == 0x676E6F7274732D78 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v8 = 5;
  }
  else
  {
    v9 = sub_1A3AB5654();
    result = swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
      v8 = 5;
    else
      v8 = 6;
  }
  *a3 = v8;
  return result;
}

void static TTSMarkup.Pause.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t TTSMarkup.Pause.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Pause.eventTaps.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.Pause.eventTaps.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.Pause.Strength.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A823D4 + 4 * byte_1A3AC92A0[*v0]))(1701736302, 0xE400000000000000);
}

uint64_t sub_1A3A823D4()
{
  return 0x6B6165772D78;
}

uint64_t sub_1A3A823E8()
{
  return 1801545079;
}

uint64_t sub_1A3A823F4()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1A3A82408()
{
  return 0x676E6F727473;
}

uint64_t sub_1A3A8241C()
{
  return 0x676E6F7274732D78;
}

uint64_t TTSMarkup.Pause.Strength.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A8245C + 4 * byte_1A3AC92A6[*v0]))(1701736302, 0xE400000000000000);
}

uint64_t sub_1A3A8245C()
{
  return 0x6B6165772D78;
}

uint64_t sub_1A3A82470()
{
  return 1801545079;
}

uint64_t sub_1A3A8247C()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1A3A82490()
{
  return 0x676E6F727473;
}

uint64_t sub_1A3A824A4()
{
  return 0x676E6F7274732D78;
}

void sub_1A3A824BC(char *a1)
{
  sub_1A3A824C8(*a1);
}

void sub_1A3A824C8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A3A82508(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A3A82584 + 4 * byte_1A3AC92B2[a2]))(0x6B6165772D78);
}

uint64_t sub_1A3A82584(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6B6165772D78 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1A3A82650()
{
  char *v0;

  sub_1A3A82658(*v0);
}

void sub_1A3A82658(char a1)
{
  sub_1A3AB56FC();
  __asm { BR              X10 }
}

uint64_t sub_1A3A826A0()
{
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

void sub_1A3A82728()
{
  __asm { BR              X10 }
}

uint64_t sub_1A3A8275C()
{
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

void sub_1A3A827D0(uint64_t a1)
{
  char *v1;

  sub_1A3A827D8(a1, *v1);
}

void sub_1A3A827D8(uint64_t a1, char a2)
{
  sub_1A3AB56FC();
  __asm { BR              X10 }
}

uint64_t sub_1A3A8281C()
{
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A828A4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return TTSMarkup.Pause.Strength.init(rawValue:)(*a1, a1[1], a2);
}

uint64_t sub_1A3A828B0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1A3A828D8 + 4 * byte_1A3AC92CA[*v0]))();
}

void sub_1A3A828D8(_QWORD *a1@<X8>)
{
  *a1 = 0x6B6165772D78;
  a1[1] = 0xE600000000000000;
}

void sub_1A3A828F0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 1801545079;
  a1[1] = v1;
}

void sub_1A3A82900(_QWORD *a1@<X8>)
{
  *a1 = 0x6D756964656DLL;
  a1[1] = 0xE600000000000000;
}

void sub_1A3A82918(_QWORD *a1@<X8>)
{
  *a1 = 0x676E6F727473;
  a1[1] = 0xE600000000000000;
}

void sub_1A3A82930(_QWORD *a1@<X8>)
{
  *a1 = 0x676E6F7274732D78;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1A3A8294C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A82974 + 4 * byte_1A3AC92D0[*v0]))(1701736302, 0xE400000000000000);
}

uint64_t sub_1A3A82974()
{
  return 0x6B6165772D78;
}

uint64_t sub_1A3A82988()
{
  return 1801545079;
}

uint64_t sub_1A3A82994()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1A3A829A8()
{
  return 0x676E6F727473;
}

uint64_t sub_1A3A829BC()
{
  return 0x676E6F7274732D78;
}

uint64_t TTSMarkup.Pause.attributes.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v3 = v2 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    sub_1A39A4820(&qword_1EE6D2368);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
    *(_QWORD *)(inited + 32) = 1701669236;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    *(_QWORD *)(inited + 48) = v2;
    *(_QWORD *)(inited + 56) = v1;
    swift_bridgeObjectRetain();
    v5 = inited;
    return sub_1A39A5780(v5);
  }
  if ((*(_BYTE *)(v0 + 12) & 1) == 0)
  {
    sub_1A3AB4EB0();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A39A4820(&qword_1EE6D2368);
    v5 = swift_initStackObject();
    *(_OWORD *)(v5 + 16) = xmmword_1A3ABF990;
    *(_QWORD *)(v5 + 32) = 1701669236;
    *(_QWORD *)(v5 + 40) = 0xE400000000000000;
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 56) = 0xE000000000000000;
    return sub_1A39A5780(v5);
  }
  v6 = *(unsigned __int8 *)(v0 + 13);
  if ((_DWORD)v6 != 6)
  {
    sub_1A39A4820(&qword_1EE6D2368);
    v7 = swift_initStackObject();
    *(_OWORD *)(v7 + 16) = xmmword_1A3ABF990;
    *(_QWORD *)(v7 + 32) = 0x6874676E65727473;
    *(_QWORD *)(v7 + 40) = 0xE800000000000000;
    __asm { BR              X11 }
  }
  result = sub_1A3AB5444();
  __break(1u);
  return result;
}

void TTSMarkup.Pause.init(seconds:)(uint64_t a1@<X8>, float a2@<S0>)
{
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(float *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 12) = 1536;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
}

char *TTSMarkup.Pause.init(strength:)@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *result;
  *(_QWORD *)a2 = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 1;
  *(_BYTE *)(a2 + 13) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  return result;
}

double sub_1A3A82C8C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 12) & 1) != 0)
    return dbl_1A3AC93F0[*(char *)(v0 + 13)];
  else
    return *(float *)(v0 + 8);
}

void sub_1A3A82CB4(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

unint64_t sub_1A3A82CD4()
{
  unint64_t result;

  result = qword_1EE6D4788;
  if (!qword_1EE6D4788)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSMarkup.Pause.Strength, &type metadata for TTSMarkup.Pause.Strength);
    atomic_store(result, &qword_1EE6D4788);
  }
  return result;
}

uint64_t _s5PauseVwxx()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s5PauseVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s5PauseVwca(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5PauseVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TTSMarkup.Pause()
{
  return &type metadata for TTSMarkup.Pause;
}

uint64_t _s5PauseV8StrengthOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1A3A82EB8 + 4 * byte_1A3AC92E1[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1A3A82EEC + 4 * byte_1A3AC92DC[v4]))();
}

uint64_t sub_1A3A82EEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A82EF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A82EFCLL);
  return result;
}

uint64_t sub_1A3A82F08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A82F10);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1A3A82F14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A82F1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Pause.Strength()
{
  return &type metadata for TTSMarkup.Pause.Strength;
}

uint64_t Dictionary<>.authoritative.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t (*v48)();
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t inited;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int64_t v70;
  ValueMetadata *v71;
  unint64_t v72;
  unint64_t v73;
  int64_t v74;
  unint64_t v75;
  int64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  ValueMetadata *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)();
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  id v138;
  char v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  uint64_t v145;
  char v146;
  char v147;
  unint64_t v148;
  uint64_t v149;
  _BOOL8 v150;
  uint64_t v151;
  char v152;
  unint64_t v153;
  char v154;
  _QWORD *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v166;
  int64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  int64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  char v183;
  void *v184;
  int v185;
  char v186;
  uint64_t v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t (*v197)();
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  char v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  int v217;
  char v218;
  int v219;
  char v220;
  uint64_t v221;
  _QWORD v222[4];
  unint64_t v223;
  _QWORD *v224;
  unint64_t v225;
  uint64_t v226;

  v223 = MEMORY[0x1E0DEE9E0];
  v1 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  v6 = swift_bridgeObjectRetain();
  v7 = 0;
  v169 = v6;
  v177 = v5;
  v179 = v1;
  while (v4)
  {
    v11 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    v12 = v11 | (v7 << 6);
LABEL_23:
    v16 = *(_QWORD *)(v6 + 56) + 104 * v12;
    v17 = *(unsigned __int8 *)(v16 + 56);
    if ((v17 - 7) >= 4 && (_DWORD)v17 != 4)
    {
      v199 = *(unsigned __int8 *)(v16 + 40);
      v182 = *(_QWORD *)(v16 + 48);
      v19 = *(void **)(v16 + 80);
      sub_1A3AB49F4();
      if ((_DWORD)v17 == 5)
      {
        v206 = 0x65636E657265635FLL;
        v20 = 0xE90000000000005FLL;
      }
      else
      {
        v206 = 0x5F697269735FLL;
        v20 = 0xE600000000000000;
      }
      v207 = v20;
      sub_1A3AB4A84();
      v21 = v206;
      v22 = v207;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23 = v19;
      swift_bridgeObjectRelease();
      v24 = (_QWORD *)v223;
      v184 = v23;
      if (*(_QWORD *)(v223 + 16))
      {
        swift_bridgeObjectRetain();
        v25 = sub_1A39A2734(v206, v207);
        if ((v26 & 1) != 0)
        {
          v27 = (uint64_t *)(v24[7] + 48 * v25);
          v189 = v27[1];
          v191 = *v27;
          v28 = v27[2];
          v194 = v27[3];
          v30 = v27[4];
          v29 = v27[5];
          swift_bridgeObjectRetain();
          v187 = v28;
          swift_bridgeObjectRetain();
          v192 = v30;
          swift_bridgeObjectRetain();
          v196 = v29;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_35;
        }
        swift_bridgeObjectRelease();
      }
      v31 = MEMORY[0x1E0DEE9D8];
      v224 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      sub_1A39AE770();
      swift_bridgeObjectRetain();
      sub_1A39A4820(&qword_1ED1B5378);
      sub_1A3A84BEC();
      sub_1A3AB5228();
      v194 = v206;
      v196 = MEMORY[0x1E0DEE9E0];
      v191 = v206;
      v192 = MEMORY[0x1E0DEE9E0];
      v187 = v31;
      v189 = v207;
LABEL_35:
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v206 = (uint64_t)v24;
      v223 = 0x8000000000000000;
      v34 = sub_1A39A2734(v21, v207);
      v35 = v24[2];
      v36 = (v33 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
        goto LABEL_176;
      v38 = v33;
      if (v24[3] >= v37)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v33 & 1) != 0)
            goto LABEL_43;
        }
        else
        {
          sub_1A3A86628();
          v24 = (_QWORD *)v206;
          if ((v38 & 1) != 0)
            goto LABEL_43;
        }
      }
      else
      {
        sub_1A3A85AA4(v37, isUniquelyReferenced_nonNull_native);
        v24 = (_QWORD *)v206;
        v39 = sub_1A39A2734(v21, v207);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_183;
        v34 = v39;
        if ((v38 & 1) != 0)
        {
LABEL_43:
          v46 = (uint64_t *)(v24[7] + 48 * v34);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *v46 = v191;
          v46[1] = v189;
          v46[2] = v187;
          v46[3] = v194;
          v46[4] = v192;
          v46[5] = v196;
          goto LABEL_44;
        }
      }
      v24[(v34 >> 6) + 8] |= 1 << v34;
      v41 = (uint64_t *)(v24[6] + 16 * v34);
      *v41 = v21;
      v41[1] = v22;
      v42 = (uint64_t *)(v24[7] + 48 * v34);
      *v42 = v191;
      v42[1] = v189;
      v42[2] = v187;
      v42[3] = v194;
      v42[4] = v192;
      v42[5] = v196;
      v43 = v24[2];
      v44 = __OFADD__(v43, 1);
      v45 = v43 + 1;
      if (v44)
        goto LABEL_180;
      v24[2] = v45;
      swift_bridgeObjectRetain();
LABEL_44:
      v223 = (unint64_t)v24;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v48 = sub_1A3A8480C(v222, v21, v22);
      if (v47[1])
      {
        v49 = v47;
        v50 = sub_1A3AB49F4();
        v52 = v51;
        v53 = (char *)v49[2];
        v197 = v48;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v53 = sub_1A39AB4D8(0, *((_QWORD *)v53 + 2) + 1, 1, v53);
        v55 = *((_QWORD *)v53 + 2);
        v54 = *((_QWORD *)v53 + 3);
        if (v55 >= v54 >> 1)
          v53 = sub_1A39AB4D8((char *)(v54 > 1), v55 + 1, 1, v53);
        *((_QWORD *)v53 + 2) = v55 + 1;
        v56 = &v53[16 * v55];
        *((_QWORD *)v56 + 4) = v50;
        *((_QWORD *)v56 + 5) = v52;
        v49[2] = v53;
        v206 = v182;
        sub_1A3A01674();
        sub_1A3AB4B74();
        sub_1A3AB4B74();
        v224 = (_QWORD *)(v225 | v226);
        sub_1A3A016B8();
        sub_1A3AB57A4();
        sub_1A39A4820(&qword_1ED1B5468);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
        *(_QWORD *)(inited + 32) = sub_1A3AB49F4();
        *(_QWORD *)(inited + 40) = v58;
        if (*(_QWORD *)(v49[4] + 16))
        {
          sub_1A3A84B84(v199);
          v59 = MEMORY[0x1E0DEE9E8];
          if ((v60 & 1) != 0)
            v59 = swift_bridgeObjectRetain();
        }
        else
        {
          v59 = MEMORY[0x1E0DEE9E8];
        }
        v224 = (_QWORD *)inited;
        sub_1A3A87B98(v59);
        v61 = sub_1A39BEFBC((uint64_t)v224);
        swift_bridgeObjectRelease();
        v62 = swift_isUniquelyReferenced_nonNull_native();
        v224 = (_QWORD *)v49[4];
        v49[4] = 0x8000000000000000;
        sub_1A3A86D84(v61, v199, v62);
        v49[4] = v224;
        swift_bridgeObjectRelease();
        v63 = swift_initStackObject();
        *(_OWORD *)(v63 + 16) = xmmword_1A3ABF990;
        *(_QWORD *)(v63 + 32) = sub_1A3AB49F4();
        *(_QWORD *)(v63 + 40) = v64;
        if (*(_QWORD *)(v49[5] + 16))
        {
          sub_1A3A84B1C(v17);
          v8 = MEMORY[0x1E0DEE9E8];
          v5 = v177;
          v1 = v179;
          if ((v65 & 1) != 0)
            v8 = swift_bridgeObjectRetain();
        }
        else
        {
          v8 = MEMORY[0x1E0DEE9E8];
          v5 = v177;
          v1 = v179;
        }
        v226 = v63;
        sub_1A3A87B98(v8);
        v9 = sub_1A39BEFBC(v226);
        swift_bridgeObjectRelease();
        v10 = swift_isUniquelyReferenced_nonNull_native();
        v226 = v49[5];
        v49[5] = 0x8000000000000000;
        sub_1A3A86C50(v9, v17, v10);
        v49[5] = v226;
        swift_bridgeObjectRelease();
        ((void (*)(_QWORD *, _QWORD))v197)(v222, 0);
        swift_bridgeObjectRelease();

      }
      else
      {
        ((void (*)(_QWORD *, _QWORD))v48)(v222, 0);

        swift_bridgeObjectRelease();
        v5 = v177;
        v1 = v179;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = v169;
    }
  }
  v13 = v7 + 1;
  if (__OFADD__(v7, 1))
    goto LABEL_175;
  if (v13 >= v5)
    goto LABEL_59;
  v14 = *(_QWORD *)(v1 + 8 * v13);
  ++v7;
  if (v14)
    goto LABEL_22;
  v7 = v13 + 1;
  if (v13 + 1 >= v5)
    goto LABEL_59;
  v14 = *(_QWORD *)(v1 + 8 * v7);
  if (v14)
    goto LABEL_22;
  v7 = v13 + 2;
  if (v13 + 2 >= v5)
    goto LABEL_59;
  v14 = *(_QWORD *)(v1 + 8 * v7);
  if (v14)
  {
LABEL_22:
    v4 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_23;
  }
  v15 = v13 + 3;
  if (v15 >= v5)
    goto LABEL_59;
  v14 = *(_QWORD *)(v1 + 8 * v15);
  if (v14)
  {
    v7 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v15 + 1;
    if (__OFADD__(v15, 1))
      goto LABEL_181;
    if (v7 >= v5)
      break;
    v14 = *(_QWORD *)(v1 + 8 * v7);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_59:
  v66 = v6;
  swift_release();
  v224 = (_QWORD *)v66;
  v166 = v223 + 64;
  v168 = v223;
  v67 = 1 << *(_BYTE *)(v223 + 32);
  if (v67 < 64)
    v68 = ~(-1 << v67);
  else
    v68 = -1;
  v69 = v68 & *(_QWORD *)(v223 + 64);
  v167 = (unint64_t)(v67 + 63) >> 6;
  swift_bridgeObjectRetain();
  v70 = 0;
  v71 = &type metadata for CoreSynthesizer.Voice.Trait;
  while (2)
  {
    if (v69)
    {
      v72 = __clz(__rbit64(v69));
      v69 &= v69 - 1;
      v73 = v72 | (v70 << 6);
      goto LABEL_81;
    }
    v74 = v70 + 1;
    if (__OFADD__(v70, 1))
      goto LABEL_177;
    if (v74 >= v167)
      goto LABEL_171;
    v75 = *(_QWORD *)(v166 + 8 * v74);
    ++v70;
    if (v75)
      goto LABEL_80;
    v70 = v74 + 1;
    if (v74 + 1 >= v167)
      goto LABEL_171;
    v75 = *(_QWORD *)(v166 + 8 * v70);
    if (v75)
      goto LABEL_80;
    v70 = v74 + 2;
    if (v74 + 2 >= v167)
      goto LABEL_171;
    v75 = *(_QWORD *)(v166 + 8 * v70);
    if (v75)
    {
LABEL_80:
      v69 = (v75 - 1) & v75;
      v73 = __clz(__rbit64(v75)) + (v70 << 6);
LABEL_81:
      v77 = (_QWORD *)(*(_QWORD *)(v168 + 56) + 48 * v73);
      v78 = v77[2];
      v79 = v77[4];
      v172 = v77[3];
      v80 = v77[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      v81 = sub_1A3A84698(v80);
      v203 = *(_QWORD *)(v78 + 16);
      if (!v203)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_64:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        continue;
      }
      v174 = v79;
      v170 = v69;
      v171 = v70;
      v190 = v78 + 32;
      v204 = v81 + 56;
      v205 = v81;
      swift_bridgeObjectRetain();
      v82 = 0;
      v173 = v78;
      while (1)
      {
        if (v82 >= *(_QWORD *)(v78 + 16))
        {
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          sub_1A3AB5678();
          __break(1u);
          JUMPOUT(0x1A3A8467CLL);
        }
        v83 = (uint64_t)v224;
        if (v224[2])
        {
          v84 = (uint64_t *)(v190 + 16 * v82);
          v85 = *v84;
          v86 = v84[1];
          swift_bridgeObjectRetain_n();
          v87 = sub_1A39A2734(v85, v86);
          if ((v88 & 1) != 0)
          {
            v89 = *(_QWORD *)(v83 + 56) + 104 * v87;
            v90 = *(_QWORD *)(v89 + 16);
            v175 = *(_QWORD *)v89;
            v176 = *(_QWORD *)(v89 + 24);
            v91 = *(_QWORD *)(v89 + 32);
            v202 = *(_BYTE *)(v89 + 40);
            v178 = *(_BYTE *)(v89 + 41);
            v180 = *(_QWORD *)(v89 + 48);
            v92 = *(unsigned __int8 *)(v89 + 56);
            v93 = v71;
            v94 = *(_QWORD *)(v89 + 64);
            v95 = *(_QWORD *)(v89 + 72);
            v96 = *(void **)(v89 + 80);
            v181 = *(_DWORD *)(v89 + 88);
            v183 = *(_BYTE *)(v89 + 92);
            v185 = *(_DWORD *)(v89 + 96);
            v186 = *(_BYTE *)(v89 + 100);
            v198 = *(_QWORD *)(v89 + 8);
            swift_bridgeObjectRetain();
            v195 = v90;
            swift_bridgeObjectRetain();
            v193 = v91;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v200 = v95;
            v71 = v93;
            swift_bridgeObjectRetain();
            v188 = v96;
            swift_bridgeObjectRelease();
            v206 = MEMORY[0x1E0DEE9D8];
            sub_1A39AE770();
            sub_1A39A4820(&qword_1ED1B5378);
            sub_1A3A84BEC();
            sub_1A3AB5228();
            v201 = v92;
            v97 = v92;
            v98 = v85;
            switch(v97)
            {
              case 0:
                LOBYTE(v206) = 1;
                if (*(_QWORD *)(v205 + 16))
                {
                  sub_1A3A86C0C();
                  v99 = sub_1A3AB48C8();
                  v100 = -1 << *(_BYTE *)(v205 + 32);
                  v101 = v99 & ~v100;
                  if (((*(_QWORD *)(v204 + ((v101 >> 3) & 0xFFFFFFFFFFFFF8)) >> v101) & 1) != 0)
                  {
                    v102 = ~v100;
                    sub_1A3A39A0C();
                    while (1)
                    {
                      LOBYTE(v226) = *(_BYTE *)(*(_QWORD *)(v205 + 48) + v101);
                      if ((sub_1A3AB494C() & 1) != 0)
                        break;
                      v101 = (v101 + 1) & v102;
                      if (((*(_QWORD *)(v204 + ((v101 >> 3) & 0xFFFFFFFFFFFFF8)) >> v101) & 1) == 0)
                        goto LABEL_94;
                    }
                    v117 = *(_QWORD *)sub_1A3A39258();
                    v206 = v117;
                    v225 = v222[0];
                    v71 = &type metadata for CoreSynthesizer.Voice.Trait;
                    sub_1A3AB51D4();
                    sub_1A39DB56C();
                    if ((sub_1A3AB494C() & 1) == 0)
                    {
                      v225 = v117;
                      sub_1A3AB5204();
                    }
                  }
                  else
                  {
LABEL_94:
                    v71 = &type metadata for CoreSynthesizer.Voice.Trait;
                  }
                  v103 = *(_QWORD *)(v205 + 16);
                  LOBYTE(v206) = 2;
                  if (v103)
                  {
                    v104 = sub_1A3AB48C8();
                    v105 = -1 << *(_BYTE *)(v205 + 32);
                    v106 = v104 & ~v105;
                    if (((*(_QWORD *)(v204 + ((v106 >> 3) & 0xFFFFFFFFFFFFF8)) >> v106) & 1) != 0)
                    {
                      v107 = ~v105;
                      sub_1A3A39A0C();
                      while (1)
                      {
                        LOBYTE(v226) = *(_BYTE *)(*(_QWORD *)(v205 + 48) + v106);
                        if ((sub_1A3AB494C() & 1) != 0)
                          break;
                        v106 = (v106 + 1) & v107;
                        if (((*(_QWORD *)(v204 + ((v106 >> 3) & 0xFFFFFFFFFFFFF8)) >> v106) & 1) == 0)
                          goto LABEL_122;
                      }
                      v116 = *(_QWORD *)sub_1A3A39270();
                      v206 = v116;
                      v225 = v222[0];
                      v71 = &type metadata for CoreSynthesizer.Voice.Trait;
                      goto LABEL_117;
                    }
                  }
                }
                break;
              case 2:
                LOBYTE(v206) = 3;
                if (*(_QWORD *)(v205 + 16))
                {
                  sub_1A3A86C0C();
                  v111 = sub_1A3AB48C8();
                  v112 = -1 << *(_BYTE *)(v205 + 32);
                  v113 = v111 & ~v112;
                  if (((*(_QWORD *)(v204 + ((v113 >> 3) & 0xFFFFFFFFFFFFF8)) >> v113) & 1) != 0)
                  {
                    v114 = ~v112;
                    sub_1A3A39A0C();
                    while (1)
                    {
                      LOBYTE(v226) = *(_BYTE *)(*(_QWORD *)(v205 + 48) + v113);
                      if ((sub_1A3AB494C() & 1) != 0)
                        break;
                      v113 = (v113 + 1) & v114;
                      if (((*(_QWORD *)(v204 + ((v113 >> 3) & 0xFFFFFFFFFFFFF8)) >> v113) & 1) == 0)
                        goto LABEL_122;
                    }
                    swift_bridgeObjectRetain();
                    sub_1A3A84DB8(v98, v86, (uint64_t)&v206);
                    swift_bridgeObjectRelease();
                    sub_1A39A2EB8(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216);
                  }
LABEL_122:
                  v71 = &type metadata for CoreSynthesizer.Voice.Trait;
                }
                break;
              case 5:
                LOBYTE(v225) = v202;
                LOBYTE(v223) = 2;
                sub_1A39FAC78();
                sub_1A3AB4B74();
                sub_1A3AB4B74();
                if (v206 == v226)
                {
                  if (*(_QWORD *)(v174 + 16))
                  {
                    sub_1A3A84B84(1);
                    if ((v108 & 1) != 0)
                    {
                      v109 = *(_QWORD *)sub_1A3A39294();
                      v206 = v109;
                      v225 = v222[0];
                      sub_1A3AB51D4();
                      sub_1A39DB56C();
                      if ((sub_1A3AB494C() & 1) == 0)
                      {
                        v225 = v109;
                        sub_1A3AB5204();
                      }
                    }
                  }
                }
                v206 = *(_QWORD *)sub_1A3A391C8();
                v226 = v172;
                if ((sub_1A3AB51C8() & 1) != 0)
                {
                  v110 = (uint64_t *)sub_1A3A39240();
                  goto LABEL_116;
                }
                break;
              case 6:
                swift_bridgeObjectRetain();
                v115 = *(_QWORD *)(sub_1A3A84C38((uint64_t)&unk_1E4AA5758, v205) + 16);
                swift_release();
                if (v115)
                {
                  v110 = (uint64_t *)sub_1A3A38514();
LABEL_116:
                  v116 = *v110;
                  v206 = *v110;
                  v225 = v222[0];
LABEL_117:
                  sub_1A3AB51D4();
                  sub_1A39DB56C();
                  if ((sub_1A3AB494C() & 1) == 0)
                  {
                    v225 = v116;
                    sub_1A3AB5204();
                  }
                }
                break;
              default:
                break;
            }
            v118 = sub_1A3A8487C(&v206, v98, v86);
            if (*(_QWORD *)(v119 + 8))
            {
              v226 = v222[0];
              sub_1A3A01674();
              sub_1A3AB4B74();
              sub_1A3AB4B74();
              v225 = v221 | v223;
              sub_1A3A016B8();
              sub_1A3AB57A4();
            }
            ((void (*)(uint64_t *, _QWORD))v118)(&v206, 0);
            v120 = v198;
            swift_bridgeObjectRelease();
            LOBYTE(v225) = v202;
            LOBYTE(v223) = 1;
            sub_1A39FAC78();
            sub_1A3AB4B74();
            sub_1A3AB4B74();
            if (v206 == v226)
            {
              if (!*(_QWORD *)(v174 + 16))
                goto LABEL_149;
              v121 = sub_1A3A84B84(2);
              if ((v122 & 1) == 0)
                goto LABEL_149;
              v123 = *(_QWORD *)(*(_QWORD *)(v174 + 56) + 8 * v121);
              v124 = *(_BYTE *)(v123 + 32);
              v125 = 1 << v124;
              v126 = *(_QWORD *)(v123 + 56);
              if (!v126)
              {
                v140 = v124 & 0x3F;
                if (v140 >= 7)
                {
                  v126 = *(_QWORD *)(v123 + 64);
                  if (v126)
                  {
                    v127 = 1;
                    goto LABEL_130;
                  }
                  if (v140 >= 8)
                  {
                    v126 = *(_QWORD *)(v123 + 72);
                    if (v126)
                    {
                      v127 = 2;
                    }
                    else
                    {
                      v126 = *(_QWORD *)(v123 + 80);
                      if (v126)
                      {
                        v127 = 3;
                      }
                      else
                      {
                        v162 = 0;
                        v163 = (unint64_t)(v125 + 63) >> 6;
                        if (v163 <= 4)
                          v163 = 4;
                        v164 = v163 - 4;
                        do
                        {
                          if (v164 == v162)
                            goto LABEL_149;
                          v126 = *(_QWORD *)(v123 + 88 + 8 * v162++);
                        }
                        while (!v126);
                        v127 = v162 + 3;
                      }
                    }
                    goto LABEL_130;
                  }
                }
                goto LABEL_149;
              }
              v127 = 0;
LABEL_130:
              v128 = __clz(__rbit64(v126));
              v129 = v128 + (v127 << 6);
              if (v129 == v125)
                goto LABEL_149;
              if (v129 < 0 || v129 >= v125)
                goto LABEL_178;
              if (((*(_QWORD *)(v123 + 56 + (((unint64_t)v129 >> 3) & 0xFFFFFFFFFFFFF8)) >> v128) & 1) == 0)
                goto LABEL_179;
              if (!*(_QWORD *)(v169 + 16))
                goto LABEL_149;
              v130 = (uint64_t *)(*(_QWORD *)(v123 + 48) + 16 * v129);
              v132 = *v130;
              v131 = v130[1];
              swift_bridgeObjectRetain();
              v133 = sub_1A39A2734(v132, v131);
              if ((v134 & 1) != 0)
              {
                v135 = *(_QWORD *)(v169 + 56) + 104 * v133;
                v136 = *(_QWORD *)(v135 + 48);
                v137 = *(void **)(v135 + 80);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v71 = &type metadata for CoreSynthesizer.Voice.Trait;
                v138 = v137;
                swift_bridgeObjectRelease();
                v206 = *(_QWORD *)sub_1A3A39210();
                v226 = v136;
                if ((sub_1A3AB51C8() & 1) != 0)
                {
                  v139 = TTSSpeechUnitTestingMode();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v120 = v198;
                  if ((v139 & 1) == 0)
                    goto LABEL_138;
LABEL_149:
                  v206 = v175;
                  v207 = v120;
                  v208 = v195;
                  v209 = v176;
                  v210 = v193;
                  LOBYTE(v211) = v202;
                  BYTE1(v211) = v178;
                  v212 = v180;
                  LOBYTE(v213) = v201;
                  v214 = v94;
                  v215 = v200;
                  v216 = v188;
                  v217 = v181;
                  v218 = v183;
                  v219 = v185;
                  v220 = v186;
                  CoreSynthesizer.Voice.cannonicId.getter();
                  v141 = sub_1A3AB49F4();
                  v143 = v142;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v144 = v188;
                  v145 = (uint64_t)v224;
                  v146 = swift_isUniquelyReferenced_nonNull_native();
                  v206 = v145;
                  v224 = (_QWORD *)0x8000000000000000;
                  v148 = sub_1A39A2734(v141, v143);
                  v149 = *(_QWORD *)(v145 + 16);
                  v150 = (v147 & 1) == 0;
                  v151 = v149 + v150;
                  if (__OFADD__(v149, v150))
                    goto LABEL_173;
                  v152 = v147;
                  if (*(_QWORD *)(v145 + 24) >= v151)
                  {
                    if ((v146 & 1) != 0)
                    {
                      v155 = (_QWORD *)v206;
                      if ((v147 & 1) == 0)
                        goto LABEL_153;
                    }
                    else
                    {
                      sub_1A39DA438();
                      v155 = (_QWORD *)v206;
                      if ((v152 & 1) == 0)
                        goto LABEL_153;
                    }
                  }
                  else
                  {
                    sub_1A39DA008(v151, v146);
                    v153 = sub_1A39A2734(v141, v143);
                    if ((v152 & 1) != (v154 & 1))
                      goto LABEL_183;
                    v148 = v153;
                    v155 = (_QWORD *)v206;
                    if ((v152 & 1) == 0)
                    {
LABEL_153:
                      v155[(v148 >> 6) + 8] |= 1 << v148;
                      v156 = (uint64_t *)(v155[6] + 16 * v148);
                      *v156 = v141;
                      v156[1] = v143;
                      v157 = v155[7] + 104 * v148;
                      *(_QWORD *)v157 = v175;
                      *(_QWORD *)(v157 + 8) = v198;
                      *(_QWORD *)(v157 + 16) = v195;
                      *(_QWORD *)(v157 + 24) = v176;
                      *(_QWORD *)(v157 + 32) = v193;
                      *(_BYTE *)(v157 + 40) = v202;
                      *(_BYTE *)(v157 + 41) = v178;
                      *(_QWORD *)(v157 + 48) = v180;
                      *(_BYTE *)(v157 + 56) = v201;
                      *(_QWORD *)(v157 + 64) = v94;
                      *(_QWORD *)(v157 + 72) = v200;
                      *(_QWORD *)(v157 + 80) = v144;
                      *(_DWORD *)(v157 + 88) = v181;
                      *(_BYTE *)(v157 + 92) = v183;
                      *(_DWORD *)(v157 + 96) = v185;
                      *(_BYTE *)(v157 + 100) = v186;
                      v158 = v155[2];
                      v44 = __OFADD__(v158, 1);
                      v159 = v158 + 1;
                      if (v44)
                        goto LABEL_174;
                      v155[2] = v159;
                      swift_bridgeObjectRetain();
LABEL_158:
                      v224 = v155;

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v71 = &type metadata for CoreSynthesizer.Voice.Trait;
LABEL_159:
                      v78 = v173;
                      goto LABEL_84;
                    }
                  }
                  v160 = v144;
                  v161 = v155[7] + 104 * v148;

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  *(_QWORD *)v161 = v175;
                  *(_QWORD *)(v161 + 8) = v198;
                  *(_QWORD *)(v161 + 16) = v195;
                  *(_QWORD *)(v161 + 24) = v176;
                  *(_QWORD *)(v161 + 32) = v193;
                  *(_BYTE *)(v161 + 40) = v202;
                  *(_BYTE *)(v161 + 41) = v178;
                  *(_QWORD *)(v161 + 48) = v180;
                  *(_BYTE *)(v161 + 56) = v201;
                  *(_QWORD *)(v161 + 64) = v94;
                  *(_QWORD *)(v161 + 72) = v200;
                  *(_QWORD *)(v161 + 80) = v160;
                  *(_DWORD *)(v161 + 88) = v181;
                  *(_BYTE *)(v161 + 92) = v183;
                  *(_DWORD *)(v161 + 96) = v185;
                  *(_BYTE *)(v161 + 100) = v186;
                  v144 = v160;
                  goto LABEL_158;
                }

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v120 = v198;
              }
              swift_bridgeObjectRelease();
              goto LABEL_149;
            }
LABEL_138:

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_159;
          }
          swift_bridgeObjectRelease_n();
        }
LABEL_84:
        if (++v82 == v203)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v69 = v170;
          v70 = v171;
          goto LABEL_64;
        }
      }
    }
    break;
  }
  v76 = v74 + 3;
  if (v76 >= v167)
    goto LABEL_171;
  v75 = *(_QWORD *)(v166 + 8 * v76);
  if (v75)
  {
    v70 = v76;
    goto LABEL_80;
  }
  while (1)
  {
    v70 = v76 + 1;
    if (__OFADD__(v76, 1))
      goto LABEL_182;
    if (v70 >= v167)
      break;
    v75 = *(_QWORD *)(v166 + 8 * v70);
    ++v76;
    if (v75)
      goto LABEL_80;
  }
LABEL_171:
  swift_release();
  return (uint64_t)v224;
}

uint64_t sub_1A3A84698(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  unsigned __int8 v14;
  uint64_t v15;

  sub_1A3A86C0C();
  result = sub_1A3AB4ED4();
  v3 = 0;
  v15 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = sub_1A3A849C0(&v14, *(_BYTE *)(*(_QWORD *)(a1 + 48) + v10));
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t (*sub_1A3A8480C(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_1A3A84F10(v6, a2, a3);
  return sub_1A3A84878;
}

uint64_t (*sub_1A3A8487C(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_1A3A84FA4(v6, a2, a3);
  return sub_1A3A84878;
}

void sub_1A3A848E8(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t CoreSynthesizer.Voice.talentGroupKey.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned __int8 *)(v0 + 56);
  if ((v1 - 7) < 4 || v1 == 4)
    return 0;
  if (v1 == 5)
  {
    sub_1A3AB49F4();
    v4 = 0x65636E657265635FLL;
  }
  else
  {
    sub_1A3AB49F4();
    v4 = 0x5F697269735FLL;
  }
  v5 = v4;
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1A3A849C0(unsigned __int8 *a1, unsigned __int8 a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  unsigned __int8 v10;
  uint64_t result;
  uint64_t v12;

  v4 = *v2;
  sub_1A3A86C0C();
  swift_bridgeObjectRetain();
  v5 = sub_1A3AB48C8();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v8 = ~v6;
    sub_1A3A39A0C();
    while ((sub_1A3AB494C() & 1) == 0)
    {
      v7 = (v7 + 1) & v8;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    result = 0;
    v10 = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v7);
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = a2;
    v12 = *v2;
    *v2 = 0x8000000000000000;
    sub_1A3A875FC(a2, v7, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
    swift_bridgeObjectRelease();
    result = 1;
  }
  *a1 = v10;
  return result;
}

unint64_t sub_1A3A84B1C(uint64_t a1)
{
  uint64_t v2;

  sub_1A3A86C0C();
  v2 = sub_1A3AB48C8();
  return sub_1A3A86160(a1, v2);
}

unint64_t sub_1A3A84B84(uint64_t a1)
{
  uint64_t v2;

  sub_1A3A875B8();
  v2 = sub_1A3AB48C8();
  return sub_1A3A86224(a1, v2);
}

unint64_t sub_1A3A84BEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED1B5380;
  if (!qword_1ED1B5380)
  {
    v1 = sub_1A39AB624(&qword_1ED1B5378);
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED1B5380);
  }
  return result;
}

uint64_t sub_1A3A84C38(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    v7 = sub_1A3A8718C((_QWORD *)((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v3, a2);
    swift_release();
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    v7 = sub_1A3A8718C((unint64_t *)v8, v5, v3, a2);
    swift_release();
    MEMORY[0x1A859781C](v8, -1, -1);
  }
  return v7;
}

double sub_1A3A84DB8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  int v21;
  char v22;
  double result;
  uint64_t v24;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1A39A2734(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v24 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1A39DA438();
      v11 = v24;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56) + 104 * v8;
    v13 = *(_QWORD *)(v12 + 24);
    v14 = *(_QWORD *)(v12 + 32);
    v15 = *(_WORD *)(v12 + 40);
    v16 = *(_QWORD *)(v12 + 48);
    v17 = *(_BYTE *)(v12 + 56);
    v18 = *(_QWORD *)(v12 + 80);
    v19 = *(_DWORD *)(v12 + 88);
    v20 = *(_BYTE *)(v12 + 92);
    v21 = *(_DWORD *)(v12 + 96);
    v22 = *(_BYTE *)(v12 + 100);
    *(_QWORD *)a3 = *(_QWORD *)v12;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(v12 + 8);
    *(_QWORD *)(a3 + 24) = v13;
    *(_QWORD *)(a3 + 32) = v14;
    *(_WORD *)(a3 + 40) = v15;
    *(_QWORD *)(a3 + 48) = v16;
    *(_BYTE *)(a3 + 56) = v17;
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(v12 + 64);
    *(_QWORD *)(a3 + 80) = v18;
    *(_DWORD *)(a3 + 88) = v19;
    *(_BYTE *)(a3 + 92) = v20;
    *(_DWORD *)(a3 + 96) = v21;
    *(_BYTE *)(a3 + 100) = v22;
    sub_1A3A86A1C(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a3 + 93) = 0;
    result = 0.0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t (*sub_1A3A84F10(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;

  v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_1A3A85450(v6);
  v6[10] = sub_1A3A85084(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1A3A84FA0;
}

uint64_t (*sub_1A3A84FA4(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;

  v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_1A3A85470(v6);
  v6[10] = sub_1A3A85220(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1A3A84FA0;
}

void sub_1A3A85034(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease();
  v2(v1, 0);
  free(v1);
}

void (*sub_1A3A85084(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  char *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  char v25;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = (char *)malloc(0x58uLL);
  *a1 = v10;
  *((_QWORD *)v10 + 7) = a3;
  *((_QWORD *)v10 + 8) = v5;
  *((_QWORD *)v10 + 6) = a2;
  v11 = *v5;
  v13 = sub_1A39A2734(a2, a3);
  v10[80] = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      *((_QWORD *)v10 + 9) = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*v5 + 56) + 48 * v13;
        v20 = *(_QWORD *)v19;
        v21 = *(_OWORD *)(v19 + 8);
        v22 = *(_QWORD *)(v19 + 24);
        v23 = *(_OWORD *)(v19 + 32);
LABEL_12:
        *(_QWORD *)v10 = v20;
        *(_OWORD *)(v10 + 8) = v21;
        *((_QWORD *)v10 + 3) = v22;
        *((_OWORD *)v10 + 2) = v23;
        return sub_1A3A851DC;
      }
LABEL_11:
      v20 = 0;
      v22 = 0;
      v21 = 0uLL;
      v23 = 0uLL;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1A3A86628();
      goto LABEL_7;
    }
    sub_1A3A85AA4(v16, a4 & 1);
    v24 = sub_1A39A2734(a2, a3);
    if ((v17 & 1) == (v25 & 1))
    {
      v13 = v24;
      *((_QWORD *)v10 + 9) = v24;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))sub_1A3AB5678();
  __break(1u);
  return result;
}

void sub_1A3A851DC(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1A3A85E14(*a1, *((_BYTE *)*a1 + 80), (uint64_t *)(*a1)[8], (*a1)[9], (*a1)[6], (*a1)[7]);
  sub_1A3A87F60(*v1, v1[1]);
  free(v1);
}

uint64_t sub_1A3A85220(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  char *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  char v33;
  uint64_t result;

  v5 = v4;
  v10 = (char *)malloc(0x88uLL);
  *a1 = v10;
  *((_QWORD *)v10 + 14) = a3;
  *((_QWORD *)v10 + 15) = v5;
  *((_QWORD *)v10 + 13) = a2;
  v11 = *v5;
  v13 = sub_1A39A2734(a2, a3);
  v10[101] = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      *((_QWORD *)v10 + 16) = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*v5 + 56) + 104 * v13;
        v21 = *(_QWORD *)(v19 + 24);
        v20 = *(_QWORD *)(v19 + 32);
        v22 = *(_QWORD *)(v19 + 48);
        v23 = *(unsigned __int8 *)(v19 + 56);
        v24 = *(_OWORD *)(v19 + 64);
        v25 = *(_QWORD *)(v19 + 80);
        v26 = *(unsigned __int16 *)(v19 + 40);
        if (*(_BYTE *)(v19 + 92))
          v27 = 0x100000000;
        else
          v27 = 0;
        v28 = v27 | *(unsigned int *)(v19 + 88);
        if (*(_BYTE *)(v19 + 100))
          v29 = 0x100000000;
        else
          v29 = 0;
        v30 = v29 | *(unsigned int *)(v19 + 96);
        v31 = *(_OWORD *)(v19 + 8);
        *(_QWORD *)v10 = *(_QWORD *)v19;
        *(_OWORD *)(v10 + 8) = v31;
        *((_QWORD *)v10 + 3) = v21;
        goto LABEL_18;
      }
LABEL_17:
      v20 = 0;
      v26 = 0;
      v22 = 0;
      v23 = 0;
      v25 = 0;
      v28 = 0;
      v30 = 0;
      v24 = 0uLL;
      *(_OWORD *)v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
LABEL_18:
      *((_QWORD *)v10 + 4) = v20;
      *((_QWORD *)v10 + 5) = v26;
      *((_QWORD *)v10 + 6) = v22;
      *((_QWORD *)v10 + 7) = v23;
      *((_OWORD *)v10 + 4) = v24;
      *((_QWORD *)v10 + 10) = v25;
      *((_QWORD *)v10 + 11) = v28;
      result = (uint64_t)sub_1A3A853E0;
      *((_DWORD *)v10 + 24) = v30;
      v10[100] = BYTE4(v30);
      return result;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1A39DA438();
      goto LABEL_7;
    }
    sub_1A39DA008(v16, a4 & 1);
    v32 = sub_1A39A2734(a2, a3);
    if ((v17 & 1) == (v33 & 1))
    {
      v13 = v32;
      *((_QWORD *)v10 + 16) = v32;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_17;
    }
  }
  result = sub_1A3AB5678();
  __break(1u);
  return result;
}

void sub_1A3A853E0(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1A3A85F24(*a1, *((_BYTE *)*a1 + 101), (uint64_t *)(*a1)[15], (*a1)[16], (*a1)[13], (*a1)[14]);
  sub_1A39A2EB8(*v1, v1[1], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], (void *)v1[10]);
  free(v1);
}

uint64_t (*sub_1A3A85450(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1A3A88234;
}

uint64_t (*sub_1A3A85470(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1A3A85490;
}

uint64_t sub_1A3A85490(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_1A3A8549C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820(&qword_1EE6D24E8);
  v33 = a2;
  v6 = sub_1A3AB5498();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v31 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_31;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v20 >= v31)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v32 + 8 * v20);
    ++v13;
    if (!v22)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v31)
        goto LABEL_33;
      v22 = *(_QWORD *)(v32 + 8 * v13);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v31)
        {
LABEL_33:
          swift_release();
          if ((v33 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v22 = *(_QWORD *)(v32 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v13 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_42;
            if (v13 >= v31)
              goto LABEL_33;
            v22 = *(_QWORD *)(v32 + 8 * v13);
            ++v23;
            if (v22)
              goto LABEL_30;
          }
        }
        v13 = v23;
      }
    }
LABEL_30:
    v10 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_31:
    v28 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v19);
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    if ((v33 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1A3A86C0C();
    result = sub_1A3AB48C8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v26 = v16 == v25;
        if (v16 == v25)
          v16 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v27 == -1);
      v17 = __clz(__rbit64(~v27)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v17) = v28;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v29;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v21 = (_QWORD *)(v5 + 64);
  if ((v33 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v30 = 1 << *(_BYTE *)(v5 + 32);
  if (v30 >= 64)
    bzero(v21, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v30;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1A3A857A0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820(&qword_1EE6D24F0);
  v33 = a2;
  v6 = sub_1A3AB5498();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v31 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_31;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v20 >= v31)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v32 + 8 * v20);
    ++v13;
    if (!v22)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v31)
        goto LABEL_33;
      v22 = *(_QWORD *)(v32 + 8 * v13);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v31)
        {
LABEL_33:
          swift_release();
          if ((v33 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v22 = *(_QWORD *)(v32 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v13 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_42;
            if (v13 >= v31)
              goto LABEL_33;
            v22 = *(_QWORD *)(v32 + 8 * v13);
            ++v23;
            if (v22)
              goto LABEL_30;
          }
        }
        v13 = v23;
      }
    }
LABEL_30:
    v10 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_31:
    v28 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v19);
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    if ((v33 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1A3A875B8();
    result = sub_1A3AB48C8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v26 = v16 == v25;
        if (v16 == v25)
          v16 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v27 == -1);
      v17 = __clz(__rbit64(~v27)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v17) = v28;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v29;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v21 = (_QWORD *)(v5 + 64);
  if ((v33 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v30 = 1 << *(_BYTE *)(v5 + 32);
  if (v30 >= 64)
    bzero(v21, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v30;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1A3A85AA4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  __int128 v42;

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820(&qword_1EE6D24F8);
  v40 = a2;
  v6 = sub_1A3AB5498();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v37 = v2;
  v38 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v38)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v39 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v38)
        goto LABEL_33;
      v24 = *(_QWORD *)(v39 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_33:
          swift_release();
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v39 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v38)
              goto LABEL_33;
            v24 = *(_QWORD *)(v39 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 48 * v21;
    v34 = *(_QWORD *)v33;
    v35 = *(_QWORD *)(v33 + 24);
    v41 = *(_OWORD *)(v33 + 32);
    v42 = *(_OWORD *)(v33 + 8);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1A3AB56FC();
    sub_1A3AB4A30();
    result = sub_1A3AB5738();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v31;
    v19 = *(_QWORD *)(v7 + 56) + 48 * v17;
    *(_QWORD *)v19 = v34;
    *(_OWORD *)(v19 + 8) = v42;
    *(_QWORD *)(v19 + 24) = v35;
    *(_OWORD *)(v19 + 32) = v41;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v37;
  v23 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t *sub_1A3A85E14(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v9 = *result;
  v8 = result[1];
  v10 = result[2];
  v11 = result[3];
  v12 = result[4];
  v13 = result[5];
  if (!v8)
  {
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy();
      sub_1A3A86834(a4, *a3);
    }
    return (uint64_t *)sub_1A3A87FB0(v9, v8);
  }
  v14 = (_QWORD *)*a3;
  if ((a2 & 1) != 0)
  {
    v15 = (uint64_t *)(v14[7] + 48 * a4);
    *v15 = v9;
    v15[1] = v8;
    v15[2] = v10;
    v15[3] = v11;
    v15[4] = v12;
    v15[5] = v13;
    return (uint64_t *)sub_1A3A87FB0(v9, v8);
  }
  v14[(a4 >> 6) + 8] |= 1 << a4;
  v16 = (_QWORD *)(v14[6] + 16 * a4);
  *v16 = a5;
  v16[1] = a6;
  v17 = (uint64_t *)(v14[7] + 48 * a4);
  *v17 = v9;
  v17[1] = v8;
  v17[2] = v10;
  v17[3] = v11;
  v17[4] = v12;
  v17[5] = v13;
  v18 = v14[2];
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (!v19)
  {
    v14[2] = v20;
    swift_bridgeObjectRetain();
    return (uint64_t *)sub_1A3A87FB0(v9, v8);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1A3A85F24(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;

  v8 = *result;
  v9 = result[1];
  v10 = result[2];
  v11 = result[3];
  v13 = result[4];
  v12 = result[5];
  v15 = result[6];
  v14 = result[7];
  v17 = result[8];
  v16 = result[9];
  v18 = *((unsigned int *)result + 24) | ((unint64_t)*((unsigned __int8 *)result + 100) << 32);
  v19 = (void *)result[10];
  v20 = result[11];
  if (!v9)
  {
    if ((a2 & 1) != 0)
    {
      v40 = result[2];
      v42 = *result;
      v38 = result[9];
      v39 = result[3];
      v37 = (void *)result[10];
      swift_arrayDestroy();
      sub_1A3A86A1C(a4, *a3);
      v19 = v37;
      v16 = v38;
      v11 = v39;
      v10 = v40;
      v8 = v42;
    }
    return (uint64_t *)sub_1A39A07C8(v8, v9, v10, v11, v13, v12, v15, v14, v17, v16, v19);
  }
  v45 = BYTE4(v20) & 1;
  v44 = BYTE4(v18) & 1;
  v21 = (_QWORD *)*a3;
  if ((a2 & 1) != 0)
  {
    v22 = v21[7] + 104 * a4;
    *(_QWORD *)v22 = v8;
    *(_QWORD *)(v22 + 8) = v9;
    *(_QWORD *)(v22 + 16) = v10;
    *(_QWORD *)(v22 + 24) = v11;
    *(_QWORD *)(v22 + 32) = v13;
    *(_WORD *)(v22 + 40) = v12;
    *(_QWORD *)(v22 + 48) = v15;
    *(_BYTE *)(v22 + 56) = v14;
    *(_QWORD *)(v22 + 64) = v17;
    *(_QWORD *)(v22 + 72) = v16;
    *(_QWORD *)(v22 + 80) = v19;
    *(_DWORD *)(v22 + 88) = v20;
    *(_BYTE *)(v22 + 92) = v45;
    *(_DWORD *)(v22 + 96) = v18;
    *(_BYTE *)(v22 + 100) = v44;
    return (uint64_t *)sub_1A39A07C8(v8, v9, v10, v11, v13, v12, v15, v14, v17, v16, v19);
  }
  v21[(a4 >> 6) + 8] |= 1 << a4;
  v23 = (_QWORD *)(v21[6] + 16 * a4);
  *v23 = a5;
  v23[1] = a6;
  v24 = v21[7] + 104 * a4;
  *(_QWORD *)v24 = v8;
  *(_QWORD *)(v24 + 8) = v9;
  *(_QWORD *)(v24 + 16) = v10;
  *(_QWORD *)(v24 + 24) = v11;
  *(_QWORD *)(v24 + 32) = v13;
  *(_WORD *)(v24 + 40) = v12;
  *(_QWORD *)(v24 + 48) = v15;
  *(_BYTE *)(v24 + 56) = v14;
  *(_QWORD *)(v24 + 64) = v17;
  *(_QWORD *)(v24 + 72) = v16;
  *(_QWORD *)(v24 + 80) = v19;
  *(_DWORD *)(v24 + 88) = v20;
  *(_BYTE *)(v24 + 92) = v45;
  *(_DWORD *)(v24 + 96) = v18;
  *(_BYTE *)(v24 + 100) = v44;
  v25 = v21[2];
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    v21[2] = v27;
    v28 = v8;
    v29 = v10;
    v41 = v17;
    v43 = v12;
    v30 = v15;
    v31 = v14;
    v32 = v13;
    v33 = v11;
    v34 = v16;
    v35 = v9;
    v36 = v19;
    swift_bridgeObjectRetain();
    v19 = v36;
    v9 = v35;
    v16 = v34;
    v11 = v33;
    v13 = v32;
    v14 = v31;
    v15 = v30;
    v17 = v41;
    v12 = v43;
    v10 = v29;
    v8 = v28;
    return (uint64_t *)sub_1A39A07C8(v8, v9, v10, v11, v13, v12, v15, v14, v17, v16, v19);
  }
  __break(1u);
  return result;
}

unint64_t sub_1A3A86160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    sub_1A3A39A0C();
    do
    {
      if ((sub_1A3AB494C() & 1) != 0)
        break;
      v4 = (v4 + 1) & v5;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1A3A86224(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    sub_1A39DB5B0();
    do
    {
      if ((sub_1A3AB494C() & 1) != 0)
        break;
      v4 = (v4 + 1) & v5;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

void *sub_1A3A862E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D24E8);
  v2 = *v0;
  v3 = sub_1A3AB548C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1A3A86488()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D24F0);
  v2 = *v0;
  v3 = sub_1A3AB548C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1A3A86628()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  __int128 v30;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D24F8);
  v2 = *v0;
  v3 = sub_1A3AB548C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 24);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v25 = *(_OWORD *)(v21 + 8);
    v30 = *(_OWORD *)(v21 + 32);
    *v24 = v19;
    v24[1] = v18;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v26 = v22;
    *(_OWORD *)(v26 + 8) = v25;
    *(_QWORD *)(v26 + 24) = v23;
    *(_OWORD *)(v26 + 32) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1A3A86834(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1A3AB5234();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1A3AB56FC();
        swift_bridgeObjectRetain();
        sub_1A3AB4A30();
        v11 = sub_1A3AB5738();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = (__int128 *)(v16 + 48 * v3);
          v18 = (__int128 *)(v16 + 48 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= v18 + 3))
          {
            v9 = *v18;
            v10 = v18[2];
            v17[1] = v18[1];
            v17[2] = v10;
            *v17 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1A3A86A1C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1A3AB5234();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1A3AB56FC();
        swift_bridgeObjectRetain();
        sub_1A3AB4A30();
        v9 = sub_1A3AB5738();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 104 * v3;
          v15 = (const void *)(v14 + 104 * v6);
          if (104 * v3 < (uint64_t)(104 * v6)
            || result >= (unint64_t)v15 + 104
            || (v16 = v3 == v6, v3 = v6, !v16))
          {
            result = (unint64_t)memmove((void *)result, v15, 0x68uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1A3A86C0C()
{
  unint64_t result;

  result = qword_1EE6D24C0;
  if (!qword_1EE6D24C0)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Voice.VoiceType, &type metadata for CoreSynthesizer.Voice.VoiceType);
    atomic_store(result, (unint64_t *)&qword_1EE6D24C0);
  }
  return result;
}

uint64_t sub_1A3A86C50(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1A3A84B1C(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_1A3A862E8();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_1A3A8549C(result, a3 & 1);
  result = sub_1A3A84B1C(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1A3AB5678();
  __break(1u);
  return result;
}

uint64_t sub_1A3A86D84(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1A3A84B84(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_1A3A86488();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_1A3A857A0(result, a3 & 1);
  result = sub_1A3A84B84(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1A3AB5678();
  __break(1u);
  return result;
}

uint64_t sub_1A3A86EB8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v1 = v0;
  v2 = *v0;
  sub_1A39A4820(&qword_1EE6D24E0);
  v3 = sub_1A3AB527C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v27 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8)
          goto LABEL_33;
        v16 = v27[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v8)
            goto LABEL_33;
          v16 = v27[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v8)
              goto LABEL_33;
            v16 = v27[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero(v27, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v27 = -1 << v26;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v27[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v16 = v27[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v14);
      sub_1A3A86C0C();
      result = sub_1A3AB48C8();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1A3A8718C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v18;
  uint64_t v20;

  v5 = a2;
  v20 = *(_QWORD *)(a3 + 16);
  if (v20)
  {
    v6 = a4 + 56;
    sub_1A3A86C0C();
    swift_bridgeObjectRetain();
    v18 = 0;
    v7 = 0;
    while (1)
    {
      v10 = sub_1A3AB48C8();
      v11 = -1 << *(_BYTE *)(a4 + 32);
      v12 = v10 & ~v11;
      if (((*(_QWORD *)(v6 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
      {
        v13 = ~v11;
        sub_1A3A39A0C();
        while ((sub_1A3AB494C() & 1) == 0)
        {
          v12 = (v12 + 1) & v13;
          if (((*(_QWORD *)(v6 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
            goto LABEL_4;
        }
        v8 = (v12 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v9 = *(unint64_t *)((char *)a1 + v8);
        *(unint64_t *)((char *)a1 + v8) = v9 | (1 << v12);
        if ((v9 & (1 << v12)) == 0 && __OFADD__(v18++, 1))
          break;
      }
LABEL_4:
      if (++v7 == v20)
        goto LABEL_13;
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRelease();
    v5 = a2;
    v15 = v18;
  }
  else
  {
    v15 = 0;
  }
  swift_retain();
  return sub_1A3A8733C(a1, v5, v15, a4);
}

uint64_t sub_1A3A8733C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;
  uint64_t v29;

  if (!a3)
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_1A39A4820(&qword_1EE6D24E0);
  result = sub_1A3AB5288();
  v6 = result;
  v28 = a1;
  v29 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v29)
      {
LABEL_37:
        swift_release();
        return v6;
      }
      v16 = v28[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v29)
          goto LABEL_37;
        v16 = v28[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v29)
            goto LABEL_37;
          v16 = v28[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v29)
              goto LABEL_37;
            v16 = v28[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v29)
                  goto LABEL_37;
                v16 = v28[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v14);
    sub_1A3A86C0C();
    result = sub_1A3AB48C8();
    v19 = -1 << *(_BYTE *)(v6 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v22) = v18;
    ++*(_QWORD *)(v6 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

unint64_t sub_1A3A875B8()
{
  unint64_t result;

  result = qword_1EE6D24D0;
  if (!qword_1EE6D24D0)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Voice.Quality, &type metadata for CoreSynthesizer.Voice.Quality);
    atomic_store(result, (unint64_t *)&qword_1EE6D24D0);
  }
  return result;
}

uint64_t sub_1A3A875FC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_1A3A86EB8();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1A3A8776C();
      goto LABEL_12;
    }
    sub_1A3A878FC();
  }
  v8 = *v3;
  sub_1A3A86C0C();
  result = sub_1A3AB48C8();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = ~v9;
    sub_1A3A39A0C();
    do
    {
      result = sub_1A3AB494C();
      if ((result & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v10;
    }
    while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v11 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v11 + 48) + a2) = v5;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (!v13)
  {
    *(_QWORD *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1A3AB566C();
  __break(1u);
  return result;
}

void *sub_1A3A8776C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D24E0);
  v2 = *v0;
  v3 = sub_1A3AB5270();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A3A878FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;

  v1 = v0;
  v2 = *v0;
  sub_1A39A4820(&qword_1EE6D24E0);
  v3 = sub_1A3AB527C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v26 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v26)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v26)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v26)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v14);
    sub_1A3A86C0C();
    result = sub_1A3AB48C8();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v9 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v26)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v26)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1A3A87B98(uint64_t result)
{
  char **v1;
  int64_t v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t *v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  int64_t v40;
  unint64_t v41;

  v3 = *(_QWORD *)(result + 16);
  v4 = *v1;
  v5 = *((_QWORD *)*v1 + 2);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = *((_QWORD *)v4 + 3) >> 1, v9 < v6))
  {
    if (v5 <= v6)
      v10 = v5 + v3;
    else
      v10 = v5;
    v4 = sub_1A39AB4D8(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    v9 = *((_QWORD *)v4 + 3) >> 1;
  }
  v11 = *((_QWORD *)v4 + 2);
  v12 = v9 - v11;
  result = sub_1A3A20E54((uint64_t)v38, &v4[16 * v11 + 32], v9 - v11, v7);
  if (result < v3)
    goto LABEL_15;
  if (result)
  {
    v14 = *((_QWORD *)v4 + 2);
    v15 = __OFADD__(v14, result);
    v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_48;
    }
    *((_QWORD *)v4 + 2) = v16;
  }
  if (result != v12)
  {
LABEL_13:
    result = sub_1A39AE7C4();
    *v1 = v4;
    return result;
  }
LABEL_16:
  v2 = *((_QWORD *)v4 + 2);
  v3 = v38[0];
  v37 = v38[1];
  v13 = v39;
  v6 = v40;
  if (v41)
  {
    v17 = (v41 - 1) & v41;
    v18 = __clz(__rbit64(v41)) | (v40 << 6);
    v36 = (unint64_t)(v39 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_48:
  v32 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_66;
  v36 = (unint64_t)(v13 + 64) >> 6;
  if (v32 >= v36)
    goto LABEL_13;
  v33 = *(_QWORD *)(v37 + 8 * v32);
  v34 = v6 + 1;
  if (!v33)
  {
    v34 = v6 + 2;
    if (v6 + 2 >= v36)
      goto LABEL_13;
    v33 = *(_QWORD *)(v37 + 8 * v34);
    if (!v33)
    {
      v34 = v6 + 3;
      if (v6 + 3 >= v36)
        goto LABEL_13;
      v33 = *(_QWORD *)(v37 + 8 * v34);
      if (!v33)
      {
        v34 = v6 + 4;
        if (v6 + 4 >= v36)
          goto LABEL_13;
        v33 = *(_QWORD *)(v37 + 8 * v34);
        if (!v33)
        {
          v34 = v6 + 5;
          if (v6 + 5 >= v36)
            goto LABEL_13;
          v33 = *(_QWORD *)(v37 + 8 * v34);
          if (!v33)
          {
            v35 = v6 + 6;
            do
            {
              if (v36 == v35)
                goto LABEL_13;
              v33 = *(_QWORD *)(v37 + 8 * v35++);
            }
            while (!v33);
            v34 = v35 - 1;
          }
        }
      }
    }
  }
  v17 = (v33 - 1) & v33;
  v18 = __clz(__rbit64(v33)) + (v34 << 6);
  v6 = v34;
LABEL_18:
  v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v18);
  v21 = *v19;
  v20 = v19[1];
  result = swift_bridgeObjectRetain();
  while (1)
  {
    v22 = *((_QWORD *)v4 + 3);
    v23 = v22 >> 1;
    if ((uint64_t)(v22 >> 1) < v2 + 1)
      break;
    if (v2 < v23)
      goto LABEL_23;
LABEL_20:
    *((_QWORD *)v4 + 2) = v2;
  }
  result = (uint64_t)sub_1A39AB4D8((char *)(v22 > 1), v2 + 1, 1, v4);
  v4 = (char *)result;
  v23 = *(_QWORD *)(result + 24) >> 1;
  if (v2 >= v23)
    goto LABEL_20;
  while (1)
  {
LABEL_23:
    v24 = &v4[16 * v2 + 32];
    *(_QWORD *)v24 = v21;
    *((_QWORD *)v24 + 1) = v20;
    ++v2;
    if (v17)
    {
      v25 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v26 = v25 | (v6 << 6);
      goto LABEL_41;
    }
    v27 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v27 >= v36)
      goto LABEL_45;
    v28 = *(_QWORD *)(v37 + 8 * v27);
    v29 = v6 + 1;
    if (!v28)
    {
      v29 = v6 + 2;
      if (v6 + 2 >= v36)
        goto LABEL_45;
      v28 = *(_QWORD *)(v37 + 8 * v29);
      if (!v28)
      {
        v29 = v6 + 3;
        if (v6 + 3 >= v36)
          goto LABEL_45;
        v28 = *(_QWORD *)(v37 + 8 * v29);
        if (!v28)
        {
          v29 = v6 + 4;
          if (v6 + 4 >= v36)
            goto LABEL_45;
          v28 = *(_QWORD *)(v37 + 8 * v29);
          if (!v28)
          {
            v29 = v6 + 5;
            if (v6 + 5 >= v36)
              goto LABEL_45;
            v28 = *(_QWORD *)(v37 + 8 * v29);
            if (!v28)
            {
              v30 = v6 + 6;
              while (v36 != v30)
              {
                v28 = *(_QWORD *)(v37 + 8 * v30++);
                if (v28)
                {
                  v29 = v30 - 1;
                  goto LABEL_40;
                }
              }
LABEL_45:
              *((_QWORD *)v4 + 2) = v2;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_40:
    v17 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v29 << 6);
    v6 = v29;
LABEL_41:
    v31 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v26);
    v21 = *v31;
    v20 = v31[1];
    if (v2 >= v23)
    {
      result = swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    result = swift_bridgeObjectRetain();
  }
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

uint64_t sub_1A3A87F60(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A3A87FB0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1A3A88000()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1A3A88038(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1A3A88094(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A3A88130(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A3A88194(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1A3A881DC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t _s11TalentGroupVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&_s11TalentGroupVMn);
}

id SSMLParserWrapper.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SSMLParserWrapper.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SSMLParserWrapper();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for SSMLParserWrapper()
{
  return objc_opt_self();
}

id SSMLParserWrapper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SSMLParserWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void __swiftcall SSMLParserWrapper.generateSSML(fromString:)(SSMLParseResult *__return_ptr retstr, Swift::String fromString)
{
  id v2;
  void *v3;
  _QWORD v4[6];

  v2 = objc_msgSend(objc_allocWithZone((Class)SSMLParseResult), sel_init);
  TTSMarkup.SpeechDocument.init(_:)((uint64_t (*)(void))sub_1A3A8845C, v4);
  TTSMarkup.SpeechDocument.asSSML()();
  sub_1A39A1B14((uint64_t)v4);
  v3 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setSsmlResult_, v3);

}

uint64_t sub_1A3A883C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v7[5];
  _QWORD v8[5];

  v7[3] = &type metadata for TTSMarkup.SpeechText;
  v7[4] = &protocol witness table for TTSMarkup.SpeechText;
  v7[0] = swift_allocObject();
  String.asSpeech.getter(a1, a2, v7[0] + 16);
  static TTSMarkup.SpeechBuilder.buildExpression(_:)(v8, v7);
  sub_1A39A47C4((uint64_t)v7);
  static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v8, a3);
  return sub_1A39A47C4((uint64_t)v8);
}

uint64_t sub_1A3A8845C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A3A883C4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void __swiftcall SSMLParserWrapper.generateSSML(fromAVSpeechUtterance:)(SSMLParseResult *__return_ptr retstr, AVSpeechUtterance fromAVSpeechUtterance)
{
  id v2;
  void *v3;
  _QWORD v4[6];

  v2 = objc_msgSend(objc_allocWithZone((Class)SSMLParseResult), sel_init);
  AVSpeechUtterance.asSpeech.getter(v4);
  TTSMarkup.SpeechDocument.asSSML()();
  sub_1A39A1B14((uint64_t)v4);
  v3 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setSsmlResult_, v3);

}

id sub_1A3A886DC(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;

  v6 = sub_1A3AB497C();
  v8 = v7;
  v9 = a1;
  v10 = (void *)a4(v6, v8);

  swift_bridgeObjectRelease();
  return v10;
}

id _s12TextToSpeech17SSMLParserWrapperC016parseSSMLToPlainA0ySo15SSMLParseResultCSSF_0()
{
  id v0;
  void *v1;
  _BYTE v3[48];

  v0 = objc_msgSend(objc_allocWithZone((Class)SSMLParseResult), sel_init);
  swift_bridgeObjectRetain();
  TTSMarkup.SpeechDocument.init(ssml:)((uint64_t)v3);
  TTSMarkupSpeech.asPlainText()();
  v1 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  objc_msgSend(v0, sel_setPlainTextResult_, v1);

  sub_1A39A1B14((uint64_t)v3);
  return v0;
}

id _s12TextToSpeech17SSMLParserWrapperC12generateSSML19fromPlainTalkStringSo15SSMLParseResultCSS_tF_0(uint64_t a1, uint64_t a2)
{
  id v4;
  double v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[6];

  v4 = objc_msgSend(objc_allocWithZone((Class)SSMLParseResult), sel_init);
  type metadata accessor for PTParser();
  swift_bridgeObjectRetain();
  v5 = PTParser.__allocating_init(_:)(a1, a2);
  (*(void (**)(double))(*(_QWORD *)v6 + 464))(v5);
  TTSMarkup.SpeechDocument.init(_:)((uint64_t (*)(void))sub_1A3A88B1C, v9);
  TTSMarkup.SpeechDocument.asSSML()();
  sub_1A39A1B14((uint64_t)v9);
  v7 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_setSsmlResult_, v7);
  swift_release();

  return v4;
}

id _s12TextToSpeech17SSMLParserWrapperC20parseSSMLToPlainTalkySo15SSMLParseResultCSSF_0()
{
  id v0;
  float v1;
  float v2;
  float v3;
  float v4;
  void *v5;
  _BYTE v7[48];

  v0 = objc_msgSend(objc_allocWithZone((Class)SSMLParseResult), sel_init);
  swift_bridgeObjectRetain();
  TTSMarkup.SpeechDocument.init(ssml:)((uint64_t)v7);
  v1 = sub_1A3A30148();
  v2 = sub_1A3A30154();
  v3 = sub_1A3A30160();
  v4 = sub_1A3A3016C();
  TTSMarkup.SpeechDocument.asPlainTalk(normalSpeakingRate:minSpeakingRate:maxSpeakingRate:defaultVoiceMidiPitch:)(v1, v2, v3, v4);
  v5 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  objc_msgSend(v0, sel_setPlainTalkResult_, v5);

  sub_1A39A1B14((uint64_t)v7);
  return v0;
}

uint64_t sub_1A3A88B1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[5];
  _QWORD v6[5];

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 312))();
  v5[3] = sub_1A39A4820(&qword_1EE6D2BE0);
  v5[4] = &protocol witness table for <A> [A];
  v5[0] = v3;
  static TTSMarkup.SpeechBuilder.buildExpression(_:)(v6, v5);
  sub_1A39A47C4((uint64_t)v5);
  static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v6, a1);
  return sub_1A39A47C4((uint64_t)v6);
}

uint64_t sub_1A3A88B94()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

_QWORD *sub_1A3A88BCC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (_QWORD *)swift_allocObject();
  v0[2] = sub_1A3A895DC(*(_QWORD *)(*v0 + 80), MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18], v1);
  v0[3] = v2;
  return v0;
}

uint64_t sub_1A3A88C1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t sub_1A3A88C50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A3A88C6C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = v0[3];
  v1 = (uint64_t *)v0[4];
  v4 = *v1;
  v3 = v1[1];
  v5 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v5;
  v6 = *(_QWORD *)(v2 + 16);
  *v5 = v0;
  v5[1] = sub_1A3A88CE8;
  return sub_1A3A8A354(v0[2], v4, v3, v6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
}

uint64_t sub_1A3A88CE8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A3A88D54()
{
  return swift_unexpectedError();
}

uint64_t sub_1A3A88D70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1A39D1864;
  v6[3] = a2;
  v6[4] = v2;
  v6[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A3A88DE0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1A3A88E64;
  return sub_1A3AB4CB8();
}

uint64_t sub_1A3A88E64()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A3A88EB4()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1A3A88EE8()
{
  return MEMORY[0x1E0DEDD18];
}

void sub_1A3A88EF4()
{
  JUMPOUT(0x1A8597738);
}

uint64_t sub_1A3A88F04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = sub_1A3A88C1C();
  v4 = v3;
  result = swift_release();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t sub_1A3A88F44()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AsyncChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncChannel);
}

uint64_t sub_1A3A88F94()
{
  swift_release();
  return swift_release();
}

_QWORD *sub_1A3A88FBC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_1A3A88FF0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1A3A8904C(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for AsyncChannel.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncChannel.Iterator);
}

_QWORD *TTSAsyncThrowingChannel.__allocating_init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (_QWORD *)swift_allocObject();
  v0[2] = sub_1A3A895DC(*(_QWORD *)(*v0 + 80), *(_QWORD *)(*v0 + 88), *(_QWORD *)(*v0 + 96), v1);
  v0[3] = v2;
  return v0;
}

_QWORD *TTSAsyncThrowingChannel.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = sub_1A3A895DC(*(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 88), *(_QWORD *)(*v4 + 96), a4);
  v4[3] = v5;
  return v4;
}

uint64_t TTSAsyncThrowingChannel.send(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

uint64_t sub_1A3A89120()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[3];
  v2 = (_QWORD *)v0[4];
  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v5;
  v6 = v2[10];
  v7 = v2[11];
  v8 = v2[12];
  *v5 = v0;
  v5[1] = sub_1A3A4670C;
  return sub_1A3A89674(v0[2], v4, v3, v6, v7, v8);
}

void TTSAsyncThrowingChannel.fail<>(_:)(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;

  v3 = *v1;
  v5 = v1[2];
  v4 = v1[3];
  v7 = a1;
  v6 = a1;
  sub_1A3A89D1C((uint64_t)&v7, v5, v4, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), MEMORY[0x1E0DEDB38]);

}

Swift::Void __swiftcall TTSAsyncThrowingChannel.finish()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 88);
  v3 = sub_1A3AB50FC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - v5;
  v8 = v0[2];
  v7 = v0[3];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))((char *)&v9 - v5, 1, 1, v2);
  sub_1A3A89D1C((uint64_t)v6, v8, v7, *(_QWORD *)(v1 + 80), v2, *(_QWORD *)(v1 + 96));
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t TTSAsyncThrowingChannel.makeAsyncIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  swift_retain();
  return swift_retain();
}

uint64_t TTSAsyncThrowingChannel.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A3A892F4()
{
  uint64_t *v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)v0[3];
  v1 = (uint64_t *)v0[4];
  v4 = *v1;
  v3 = v1[1];
  v5 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v5;
  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  *v5 = v0;
  v5[1] = sub_1A3A4670C;
  return sub_1A3A8A354(v0[2], v4, v3, v6, v7, v8);
}

uint64_t sub_1A3A89364(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1A39B1604;
  v6[3] = a2;
  v6[4] = v2;
  v6[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A3A893D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = sub_1A3A8946C;
  return sub_1A3AB4CB8();
}

uint64_t sub_1A3A8946C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (v0)
    **(_QWORD **)(v2 + 24) = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t TTSAsyncThrowingChannel.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t TTSAsyncThrowingChannel.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1A3A89528()
{
  return MEMORY[0x1E0DEDB38];
}

void sub_1A3A89534()
{
  JUMPOUT(0x1A8597738);
}

uint64_t sub_1A3A89544@<X0>(_QWORD *a1@<X8>)
{
  TTSAsyncThrowingChannel.makeAsyncIterator()(a1);
  return swift_release();
}

uint64_t sub_1A3A89568()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for TTSAsyncThrowingChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TTSAsyncThrowingChannel);
}

uint64_t method lookup function for TTSAsyncThrowingChannel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TTSAsyncThrowingChannel.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_1A3A895C8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for TTSAsyncThrowingChannel.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TTSAsyncThrowingChannel.Iterator);
}

uint64_t sub_1A3A895DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[6];

  v11[0] = 0;
  sub_1A3A325A8((uint64_t)v11, MEMORY[0x1E0DEE190], a3, a4);
  sub_1A3A8CBB8(a1, a2, a3, v11);
  v7 = type metadata accessor for ChannelStateMachine(0, a1, a2, a3);
  return sub_1A3A325A8((uint64_t)v11, v7, v8, v9);
}

uint64_t *sub_1A3A89660@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  *a2 = *result;
  *result = v2 + 1;
  return result;
}

uint64_t sub_1A3A89674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  v7 = sub_1A3AB50FC();
  v6[10] = v7;
  v6[11] = *(_QWORD *)(v7 - 8);
  v6[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A3A896E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = (_QWORD *)swift_task_alloc();
  v5[2] = v3;
  v5[3] = v2;
  v5[4] = v1;
  type metadata accessor for ChannelStateMachine(0, v3, v2, v1);
  type metadata accessor for ChannelStateMachine.SendAction(0, v3, v2, v1);
  sub_1A3A32680((void (*)(uint64_t))sub_1A3A89994, (uint64_t)v5, v4);
  swift_task_dealloc();
  v6 = *(_QWORD *)(v0 + 24);
  if (v6)
  {
    if (v6 == 1)
    {
      v8 = *(_QWORD *)(v0 + 64);
      v7 = *(_QWORD *)(v0 + 72);
      v9 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 32);
      v11 = *(_QWORD *)(v0 + 40);
      sub_1A3A32680((void (*)(uint64_t))sub_1A3A89660, 0, v9);
      v13 = *(_QWORD *)(v0 + 16);
      v14 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 104) = v14;
      v14[2] = v10;
      v14[3] = v8;
      v14[4] = v7;
      v14[5] = v11;
      v14[6] = v9;
      v14[7] = v12;
      v14[8] = v13;
      v15 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 112) = v15;
      v15[2] = v10;
      v15[3] = v8;
      v15[4] = v7;
      v15[5] = v11;
      v15[6] = v9;
      v15[7] = v13;
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 120) = v16;
      *v16 = v0;
      v16[1] = sub_1A3A898FC;
      return sub_1A3AB5660();
    }
    v19 = *(_QWORD *)(v0 + 88);
    v18 = *(_QWORD *)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 56);
    v22 = *(_QWORD *)(v21 - 8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 16))(v18, *(_QWORD *)(v0 + 32), v21);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v19 + 32))(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 40), v18, v20);
    swift_continuation_throwingResume();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A898FC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A89964()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A89994@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t result;

  v3 = (uint64_t *)type metadata accessor for ChannelStateMachine(0, v1[2], v1[3], v1[4]);
  result = sub_1A3A8B3D0(v3);
  *a1 = result;
  return result;
}

uint64_t sub_1A3A899E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[11] = a3;
  v8[12] = a4;
  v8[10] = a2;
  return swift_task_switch();
}

uint64_t sub_1A3A89A04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v0[15];
  v1 = v0[16];
  v4 = v0[13];
  v3 = v0[14];
  v5 = v0[12];
  v6 = v0[10];
  v0[2] = v0;
  v0[3] = sub_1A39D77F8;
  v7 = swift_continuation_init();
  sub_1A3A89B0C(v7, v6, v5, v4, v3, v2, v1);
  return swift_continuation_await();
}

uint64_t sub_1A3A89A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v0 + 40);
  v7 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = sub_1A39D5174;
  *(_QWORD *)(v5 + 128) = v2;
  *(_OWORD *)(v5 + 112) = v7;
  *(_QWORD *)(v5 + 96) = v3;
  *(_QWORD *)(v5 + 104) = v4;
  *(_OWORD *)(v5 + 80) = v6;
  return swift_task_switch();
}

void sub_1A3A89B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v14 = sub_1A3AB50FC();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = &v20[-v16];
  v21 = a5;
  v22 = a6;
  v23 = a7;
  v24 = a1;
  v25 = a3;
  v26 = a4;
  type metadata accessor for ChannelStateMachine(0, a5, a6, a7);
  type metadata accessor for ChannelStateMachine.SendSuspendedAction(255, a5, a6, a7);
  sub_1A3AB50FC();
  sub_1A3A32680((void (*)(uint64_t))sub_1A3A8B128, (uint64_t)v20, a2);
  v18 = v27;
  if (v27 != 2)
  {
    if (v27 != 1)
    {
      swift_continuation_throwingResume();
      if (!v18)
        return;
      v19 = *(_QWORD *)(a5 - 8);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v19 + 16))(v17, a3, a5);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, a5);
      (*(void (**)(_QWORD, _BYTE *, uint64_t))(v15 + 32))(*(_QWORD *)(*(_QWORD *)(v18 + 64) + 40), v17, v14);
    }
    swift_continuation_throwingResume();
  }
}

uint64_t sub_1A3A89C78()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[7];
  v7 = v0[2];
  v8 = v1;
  v9 = v2;
  v10 = v4;
  type metadata accessor for ChannelStateMachine(0, v7, v1, v2);
  type metadata accessor for ChannelStateMachine.SendCancelledAction(0, v7, v1, v2);
  sub_1A3A32680((void (*)(uint64_t))sub_1A3A8B0AC, (uint64_t)&v6, v3);
  result = v11;
  if (v11 >= 2)
    return swift_continuation_throwingResume();
  return result;
}

void sub_1A3A89D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v11 = sub_1A3AB50FC();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v29 - v14;
  v32 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = a4;
  v35 = a5;
  v36 = a6;
  v37 = a1;
  v31 = a1;
  type metadata accessor for ChannelStateMachine(0, a4, a5, a6);
  type metadata accessor for ChannelStateMachine.FinishAction(0, a4, a5, a6);
  sub_1A3A32680((void (*)(uint64_t))sub_1A3A8A098, (uint64_t)v33, a2);
  v18 = v39;
  if (v39)
  {
    v30 = v17;
    v19 = v40;
    v20 = *(_QWORD *)(v39 + 16);
    if (v20)
    {
      v29 = 0;
      v21 = v40;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)(v18 + 8 * i + 32))
          swift_continuation_throwingResume();
      }
      swift_bridgeObjectRelease();
      v19 = v21;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v31, v11);
    v23 = v32;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v15, 1, a5) == 1)
    {
      v24 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      v38 = v19;
      MEMORY[0x1E0C80A78](v24);
      *(&v29 - 4) = a4;
      *(&v29 - 3) = a5;
      *(&v29 - 2) = a6;
      sub_1A3AB50FC();
      sub_1A39AB624(&qword_1EE6D09F0);
      sub_1A3AB4DE4();
      sub_1A3AB50FC();
      v25 = sub_1A3AB4C58();
      MEMORY[0x1A8597738](MEMORY[0x1E0DEAF38], v25);
      sub_1A3AB4B68();
      sub_1A3A8A2FC(v18);
    }
    else
    {
      v26 = v30;
      v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v30, v15, a5);
      v38 = v19;
      MEMORY[0x1E0C80A78](v27);
      *(&v29 - 4) = a4;
      *(&v29 - 3) = a5;
      *(&v29 - 2) = a6;
      *(&v29 - 1) = (uint64_t)v26;
      sub_1A3AB50FC();
      sub_1A39AB624(&qword_1EE6D09F0);
      sub_1A3AB4DE4();
      sub_1A3AB50FC();
      v28 = sub_1A3AB4C58();
      MEMORY[0x1A8597738](MEMORY[0x1E0DEAF38], v28);
      sub_1A3AB4B68();
      sub_1A3A8A2FC(v18);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v26, a5);
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1A3A8A098@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v7 = type metadata accessor for ChannelStateMachine(0, v3, v4, v5);
  result = sub_1A3A8BC2C(v6, v7);
  *a1 = result;
  a1[1] = v9;
  return result;
}

_QWORD *sub_1A3A8A0EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a4 - 8);
  result = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*result)
  {
    (*(void (**)(char *))(v5 + 16))(v8);
    v9 = sub_1A3AB563C();
    if (v9)
    {
      v10 = v9;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a4);
    }
    else
    {
      v10 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v11, v8, a4);
    }
    v15 = v10;
    sub_1A3AB50FC();
    v12 = sub_1A39A4820(&qword_1EE6D09F0);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v13, &v15, v12);
    return (_QWORD *)swift_continuation_throwingResumeWithError();
  }
  return result;
}

uint64_t sub_1A3A8A228(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_1A3AB50FC();
  v5 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v10 - v7;
  v9 = *a1;
  if (v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v8, 1, 1, a2);
    (*(void (**)(_QWORD, char *, uint64_t))(v5 + 32))(*(_QWORD *)(*(_QWORD *)(v9 + 64) + 40), v8, v4);
    return swift_continuation_throwingResume();
  }
  return result;
}

uint64_t sub_1A3A8A2D4(uint64_t *a1)
{
  uint64_t v1;

  return sub_1A3A8A228(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1A3A8A2FC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *sub_1A3A8A328(uint64_t a1)
{
  uint64_t *v1;

  return sub_1A3A8A0EC(a1, v1[5], v1[2], v1[3]);
}

uint64_t sub_1A3A8A354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  uint64_t Action;

  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v6[9] = sub_1A3AB50FC();
  sub_1A39AB624(&qword_1EE6D09F0);
  v10 = sub_1A3AB5768();
  v6[10] = v10;
  v6[11] = *(_QWORD *)(v10 - 8);
  v6[12] = swift_task_alloc();
  Action = type metadata accessor for ChannelStateMachine.NextAction(0, a4, a5, a6);
  v6[13] = Action;
  v6[14] = *(_QWORD *)(Action - 8);
  v6[15] = swift_task_alloc();
  v6[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A3A8A444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 32);
  v9 = (_QWORD *)swift_task_alloc();
  v9[2] = v7;
  v9[3] = v6;
  v9[4] = v5;
  type metadata accessor for ChannelStateMachine(0, v7, v6, v5);
  sub_1A3A32680((void (*)(uint64_t))sub_1A3A8A814, (uint64_t)v9, v8);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_1A39AB624(&qword_1EE6D47E8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v2, 1, TupleTypeMetadata2) == 1)
  {
    v12 = *(_QWORD *)(v0 + 56);
    v11 = *(_QWORD *)(v0 + 64);
    v13 = *(_QWORD *)(v0 + 40);
    v14 = *(_QWORD *)(v0 + 48);
    v15 = *(_QWORD *)(v0 + 32);
    sub_1A3A32680((void (*)(uint64_t))sub_1A3A89660, 0, v13);
    v16 = *(_QWORD *)(v0 + 16);
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v17;
    v17[2] = v14;
    v17[3] = v12;
    v17[4] = v11;
    v17[5] = v15;
    v17[6] = v13;
    v17[7] = v16;
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v18;
    v18[2] = v14;
    v18[3] = v12;
    v18[4] = v11;
    v18[5] = v15;
    v18[6] = v13;
    v18[7] = v16;
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v19;
    *v19 = v0;
    v19[1] = sub_1A3A8A6E8;
    return sub_1A3AB5660();
  }
  else
  {
    v21 = *(char **)(v0 + 120);
    v22 = *(_QWORD *)v21;
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 96), &v21[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v0 + 80));
    if (v22)
      swift_continuation_throwingResume();
    v23 = *(_QWORD *)(v0 + 80);
    v24 = MEMORY[0x1A8597738](&unk_1A3AC11C8, v23);
    sub_1A39D7FD0(v23, v24);
    v25 = *(_QWORD *)(v0 + 128);
    v26 = *(_QWORD *)(v0 + 104);
    v27 = *(_QWORD *)(v0 + 112);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A3A8A6E8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A8A75C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 104));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A8A7B4()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 104));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A8A814@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  _QWORD *v3;

  v3 = (_QWORD *)type metadata accessor for ChannelStateMachine(0, v1[2], v1[3], v1[4]);
  return sub_1A3A8C124(v3, a1);
}

uint64_t sub_1A3A8A860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A3A8A884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v3;
  v4 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v3 + 32) = v1;
  *(_OWORD *)(v3 + 40) = v4;
  *(_QWORD *)(v3 + 56) = v2;
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EE6D4800 + dword_1EE6D4800);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v5;
  sub_1A3AB50FC();
  *v5 = v0;
  v5[1] = sub_1A3A8A948;
  return v7(*(_QWORD *)(v0 + 16), 0, 0, (uint64_t)sub_1A3A8B038, v3);
}

uint64_t sub_1A3A8A948()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A3A8A9BC()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A8A9F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v1 + 40);
  v8 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_1A39B1604;
  *(_QWORD *)(v6 + 64) = v4;
  *(_OWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 40) = v5;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch();
}

uint64_t sub_1A3A8AA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t SuspendedAction;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int EnumCaseMultiPayload;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50[16];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v12 = sub_1A3AB50FC();
  v47 = *(_QWORD *)(v12 - 8);
  v48 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v45 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v44 = (char *)&v44 - v16;
  MEMORY[0x1E0C80A78](v15);
  v46 = (char *)&v44 - v17;
  SuspendedAction = type metadata accessor for ChannelStateMachine.NextSuspendedAction(255, a4, a5, a6);
  v19 = sub_1A3AB50FC();
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (uint64_t *)((char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v44 - v23;
  v51 = a4;
  v52 = a5;
  v53 = a6;
  v54 = a1;
  v49 = a1;
  v55 = a3;
  v25 = a4;
  v27 = v26;
  type metadata accessor for ChannelStateMachine(0, v25, a5, a6);
  sub_1A3A32680((void (*)(uint64_t))sub_1A3A8B048, (uint64_t)v50, a2);
  (*(void (**)(uint64_t *, char *, uint64_t))(v27 + 16))(v22, v24, v19);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(SuspendedAction - 8) + 48))(v22, 1, SuspendedAction) != 1)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v56 = *v22;
        v29 = sub_1A39A4820(&qword_1EE6D09F0);
        swift_allocError();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v30, &v56, v29);
        swift_continuation_throwingResumeWithError();
      }
      else
      {
        v36 = *v22;
        sub_1A39AB624(&qword_1EE6D47E8);
        v37 = v48;
        v38 = (char *)v22 + *(int *)(swift_getTupleTypeMetadata2() + 48);
        v39 = v47;
        v40 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
        v41 = v45;
        v40(v45, v38, v37);
        if (v36)
          swift_continuation_throwingResume();
        v42 = v46;
        (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v46, v41, v37);
        v40(*(char **)(*(_QWORD *)(v49 + 64) + 40), v42, v37);
        swift_continuation_throwingResume();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v37);
      }
    }
    else
    {
      v32 = v46;
      v31 = v47;
      v33 = *(void (**)(char *, uint64_t *, uint64_t))(v47 + 32);
      v34 = v48;
      v33(v46, v22, v48);
      v35 = v44;
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v44, v32, v34);
      v33(*(char **)(*(_QWORD *)(v49 + 64) + 40), (uint64_t *)v35, v34);
      swift_continuation_throwingResume();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v34);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v24, v19);
}

uint64_t sub_1A3A8ADC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    sub_1A3AB4C70();
  }
  return swift_task_switch();
}

uint64_t sub_1A3A8AE2C()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = (void (*)(uint64_t))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = sub_1A3A8AE88;
  v2 = swift_continuation_init();
  v1(v2);
  return swift_continuation_await();
}

uint64_t sub_1A3A8AE88()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
    swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1A3A8AEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v10 = sub_1A3AB50FC();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = &v15[-v12];
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a2;
  type metadata accessor for ChannelStateMachine(0, a3, a4, a5);
  type metadata accessor for ChannelStateMachine.NextCancelledAction(0, a3, a4, a5);
  sub_1A3A32680((void (*)(uint64_t))sub_1A3A8B01C, (uint64_t)v15, a1);
  v14 = v20;
  if (v20 >= 2)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v13, 1, 1, a3);
    (*(void (**)(_QWORD, _BYTE *, uint64_t))(v11 + 32))(*(_QWORD *)(*(_QWORD *)(v14 + 64) + 40), v13, v10);
    swift_continuation_throwingResume();
  }
}

void sub_1A3A8B000()
{
  uint64_t *v0;

  sub_1A3A8AEDC(v0[5], v0[7], v0[2], v0[3], v0[4]);
}

uint64_t type metadata accessor for ChannelStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStorage);
}

uint64_t sub_1A3A8B01C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A3A8B0C8((uint64_t (*)(uint64_t, uint64_t))sub_1A3A8CA24, a1);
}

uint64_t sub_1A3A8B038(uint64_t a1)
{
  uint64_t *v1;

  return sub_1A3A8AA78(a1, v1[5], v1[7], v1[2], v1[3], v1[4]);
}

uint64_t sub_1A3A8B048@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = (_QWORD *)type metadata accessor for ChannelStateMachine(0, v3, v4, v5);
  return sub_1A3A8C574(v6, v7, v8, a1);
}

uint64_t sub_1A3A8B0AC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A3A8B0C8((uint64_t (*)(uint64_t, uint64_t))sub_1A3A8B91C, a1);
}

uint64_t sub_1A3A8B0C8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X1>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = v2[2];
  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v9 = type metadata accessor for ChannelStateMachine(0, v5, v6, v7);
  result = a1(v8, v9);
  *a2 = result;
  return result;
}

uint64_t sub_1A3A8B128@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v8 = v1[6];
  v7 = v1[7];
  v9 = (_QWORD *)type metadata accessor for ChannelStateMachine(0, v3, v4, v5);
  result = sub_1A3A8B544(v6, v8, v7, v9);
  *a1 = result;
  return result;
}

uint64_t sub_1A3A8B190()
{
  return sub_1A3AB572C();
}

uint64_t sub_1A3A8B1B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v10 = sub_1A3AB50FC();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))((char *)&v16 - v12, 1, 1, a2);
  *(_QWORD *)a5 = a1;
  *((_QWORD *)a5 + 1) = 0;
  v14 = type metadata accessor for ChannelStateMachine.SuspendedProducer(0, a2, a3, a4);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(&a5[*(int *)(v14 + 48)], v13, v10);
}

uint64_t sub_1A3A8B280()
{
  sub_1A3AB56FC();
  sub_1A3AB572C();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A8B2C8()
{
  sub_1A3AB56FC();
  sub_1A3A8B190();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A8B304()
{
  return sub_1A3AB572C();
}

BOOL sub_1A3A8B328(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_1A3A8B334()
{
  sub_1A3AB56FC();
  sub_1A3AB572C();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A8B378()
{
  return sub_1A3A8B334();
}

uint64_t sub_1A3A8B380()
{
  return sub_1A3A8B304();
}

uint64_t sub_1A3A8B388()
{
  sub_1A3AB56FC();
  sub_1A3A8B304();
  return sub_1A3AB5738();
}

BOOL sub_1A3A8B3C4(uint64_t *a1, uint64_t *a2)
{
  return sub_1A3A8B328(*a1, *a2);
}

uint64_t sub_1A3A8B3D0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = *(_QWORD *)(v1 + 32);
  if (v2 < 0)
    return 0;
  v3 = *(void **)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = type metadata accessor for ChannelStateMachine.SuspendedConsumer(255, a1[2], a1[3], a1[4]);
  v9 = sub_1A3AB5384();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x1A8597738](MEMORY[0x1E0DEC740], v9);
  if ((sub_1A3AB4F7C() & 1) != 0)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    MEMORY[0x1A8597738](&unk_1A3AC9A18, v8);
    sub_1A3AB46E8();
    sub_1A3AB46B8();
    sub_1A3A8D05C(v3, v4, v5, v6, v2);
    result = v11;
    *(_QWORD *)v1 = v3;
    *(_QWORD *)(v1 + 8) = v4;
    *(_QWORD *)(v1 + 16) = v5;
    *(_QWORD *)(v1 + 24) = v6;
    *(_QWORD *)(v1 + 32) = v2;
    *(_QWORD *)(v1 + 40) = v7;
  }
  return result;
}

uint64_t sub_1A3A8B544(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;

  v5 = v4;
  v66 = a2;
  v67 = a1;
  v8 = a4[2];
  v7 = a4[3];
  v69 = a4[4];
  v70 = v7;
  v9 = type metadata accessor for ChannelStateMachine.SuspendedProducer(255, v8, v7, v69);
  v10 = sub_1A3AB50FC();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v59 - v12;
  v14 = sub_1A3AB50FC();
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v59 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v22 = (char *)&v59 - v21;
  v23 = *(_QWORD *)(v5 + 32);
  if (v23 < 0)
    return 1;
  v59 = v11;
  v60 = v10;
  v68 = *(_QWORD *)(v5 + 40);
  v63 = *(_QWORD *)(v5 + 24);
  v64 = v13;
  v61 = a3;
  v62 = v18;
  v25 = *(_QWORD *)(v5 + 8);
  v24 = *(_QWORD *)(v5 + 16);
  v76 = *(id *)v5;
  v26 = v76;
  v77 = v25;
  v74 = v23;
  v75 = v24;
  v73 = v63;
  v27 = v9;
  v28 = *(_QWORD *)(v8 - 8);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v30 = v66;
  v65 = v19;
  v66 = v20;
  v29(v17, v30, v8);
  v31 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56);
  v32 = v27;
  v31(v17, 0, 1, v8);
  v33 = v67;
  *(_QWORD *)v22 = v61;
  *((_QWORD *)v22 + 1) = v33;
  v34 = type metadata accessor for ChannelStateMachine.SuspendedProducer(0, v8, v70, v69);
  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(&v22[*(int *)(v34 + 48)], v17, v62);
  v35 = v26;
  v36 = v64;
  v37 = v65;
  sub_1A3A8D0E0(v35, v25, v24, v63, v23);
  swift_retain();
  swift_retain();
  v38 = MEMORY[0x1A8597738](&unk_1A3AC9A58, v27);
  sub_1A3AB4F1C();
  sub_1A3AB4EEC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v36, 1, v27) == 1)
  {
    v67 = v38;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v36, v60);
    v71 = v23;
    v39 = type metadata accessor for ChannelStateMachine.SuspendedConsumer(255, v8, v70, v69);
    v40 = sub_1A3AB5384();
    MEMORY[0x1A8597738](MEMORY[0x1E0DEC740], v40);
    v41 = sub_1A3AB4F7C();
    swift_release();
    swift_release();
    if ((v41 & 1) != 0)
    {
      sub_1A3AB46E8();
      sub_1A3AB46DC();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v32);
      v42 = v76;
      v43 = v77;
      v45 = v74;
      v44 = v75;
      v46 = v73;
      sub_1A3A8D05C(*(id *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
      *(_QWORD *)v5 = v42;
      *(_QWORD *)(v5 + 8) = v43;
      *(_QWORD *)(v5 + 16) = v44;
      *(_QWORD *)(v5 + 24) = v46;
      v47 = 2;
      *(_QWORD *)(v5 + 32) = v45;
    }
    else
    {
      MEMORY[0x1A8597738](&unk_1A3AC9A18, v39);
      sub_1A3AB46E8();
      sub_1A3AB46B8();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v32);
      v47 = v72;
      v53 = v73;
      v54 = v76;
      v55 = v77;
      v57 = v74;
      v56 = v75;
      sub_1A3A8D05C(*(id *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
      *(_QWORD *)v5 = v54;
      *(_QWORD *)(v5 + 8) = v55;
      *(_QWORD *)(v5 + 16) = v56;
      *(_QWORD *)(v5 + 24) = v53;
      *(_QWORD *)(v5 + 32) = v57;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v27);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v36, v60);
    v48 = v76;
    v49 = v77;
    v51 = v74;
    v50 = v75;
    v52 = v73;
    sub_1A3A8D05C(*(id *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
    *(_QWORD *)v5 = v48;
    *(_QWORD *)(v5 + 8) = v49;
    *(_QWORD *)(v5 + 16) = v50;
    *(_QWORD *)(v5 + 24) = v52;
    v47 = 1;
    *(_QWORD *)(v5 + 32) = v51;
  }
  *(_QWORD *)(v5 + 40) = v68;
  return v47;
}

uint64_t sub_1A3A8B91C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  char *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;

  v3 = v2;
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = type metadata accessor for ChannelStateMachine.SuspendedProducer(255, v5, v6, v7);
  v9 = sub_1A3AB50FC();
  v10 = MEMORY[0x1E0C80A78](v9);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v49 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v15 = MEMORY[0x1E0C80A78](v14);
  v16 = MEMORY[0x1E0C80A78](v15);
  v23 = (char *)&v49 - v19;
  if ((*(_QWORD *)(v3 + 32) & 0x8000000000000000) != 0)
    return 1;
  v24 = *(_QWORD *)(v3 + 32);
  v50 = v18;
  v51 = v17;
  v52 = v22;
  v53 = v21;
  v54 = v16;
  v55 = v20;
  v25 = a1;
  v26 = *(_QWORD *)(v3 + 40);
  v56 = *(_QWORD *)(v3 + 24);
  v57 = v26;
  v27 = v5;
  v29 = *(_QWORD *)(v3 + 8);
  v28 = *(_QWORD *)(v3 + 16);
  v59 = *(id *)v3;
  v60 = v29;
  v58 = v28;
  sub_1A3A8B1B8(v25, v27, v6, v7, (char *)&v49 - v19);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x1A8597738](&unk_1A3AC9A58, v8);
  sub_1A3AB46E8();
  sub_1A3AB46D0();
  v30 = v55;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v13, 1, v8) == 1)
  {
    v31 = *(void (**)(char *, uint64_t))(v50 + 8);
    v32 = v13;
    v33 = v54;
    v31(v32, v54);
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v51, v23, v8);
    sub_1A3AB4F1C();
    v34 = v53;
    sub_1A3AB4EF8();
    v31(v34, v33);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v8);
    v35 = v59;
    v36 = v60;
    v37 = v58;
    sub_1A3A8D05C(*(id *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
    *(_QWORD *)v3 = v35;
    *(_QWORD *)(v3 + 8) = v36;
    v38 = v56;
    *(_QWORD *)(v3 + 16) = v37;
    *(_QWORD *)(v3 + 24) = v38;
    v39 = 1;
    v40 = v57;
    *(_QWORD *)(v3 + 32) = v24;
    *(_QWORD *)(v3 + 40) = v40;
  }
  else
  {
    v41 = *(void (**)(char *, uint64_t))(v30 + 8);
    v41(v23, v8);
    v42 = v52;
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v52, v13, v8);
    v43 = v59;
    v44 = v60;
    v45 = v58;
    sub_1A3A8D05C(*(id *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
    *(_QWORD *)v3 = v43;
    *(_QWORD *)(v3 + 8) = v44;
    v46 = v56;
    *(_QWORD *)(v3 + 16) = v45;
    *(_QWORD *)(v3 + 24) = v46;
    v47 = v57;
    *(_QWORD *)(v3 + 32) = v24;
    *(_QWORD *)(v3 + 40) = v47;
    v39 = *(_QWORD *)(v42 + 8);
    v41((char *)v42, v8);
  }
  return v39;
}

uint64_t sub_1A3A8BC2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;

  v3 = v2;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = sub_1A3AB50FC();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v47 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  MEMORY[0x1E0C80A78](v12);
  v16 = *(_QWORD *)(v3 + 32);
  if ((v16 & 0x8000000000000000) != 0)
    return 0;
  v49 = (char *)&v47 - v13;
  v50 = a2;
  v48 = v15;
  v17 = *(id *)v3;
  v18 = *(_QWORD *)(v3 + 24);
  v53 = v14;
  v19 = *(_QWORD *)(v3 + 8);
  v51 = v18;
  swift_retain();
  swift_retain();
  v55 = (unint64_t)v17;
  swift_retain();
  v54 = v19;
  v20 = v53;
  swift_retain();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v11, 1, v6);
  v52 = v16;
  if (v21 == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    sub_1A3A8D05C(*(id *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = xmmword_1A3AC1B90;
    v23 = *(_QWORD *)(v50 + 16);
    v24 = *(_QWORD *)(v50 + 32);
  }
  else
  {
    v47 = (_QWORD *)(v3 + 8);
    v26 = v49;
    v27 = v11;
    v28 = *(void (**)(_QWORD, _QWORD, _QWORD))(v20 + 32);
    v28(v49, v27, v6);
    v56 = v16;
    v23 = *(_QWORD *)(v50 + 16);
    v24 = *(_QWORD *)(v50 + 32);
    type metadata accessor for ChannelStateMachine.SuspendedConsumer(255, v23, v6, v24);
    v29 = sub_1A3AB5384();
    MEMORY[0x1A8597738](MEMORY[0x1E0DEC740], v29);
    if ((sub_1A3AB4F7C() & 1) != 0)
    {
      v30 = v48;
      (*(void (**)(uint64_t, char *, uint64_t))(v53 + 16))(v48, v26, v6);
      v31 = sub_1A3AB563C();
      if (v31)
      {
        v32 = v31;
        v33 = *(void (**)(_QWORD, _QWORD))(v53 + 8);
        v33(v30, v6);
      }
      else
      {
        v32 = swift_allocError();
        v28(v34, v30, v6);
        v33 = *(void (**)(_QWORD, _QWORD))(v53 + 8);
      }
      v35 = v47;
      v33(v49, v6);
      sub_1A3A8D05C(*(id *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
      *(_QWORD *)v3 = v32;
      v35[1] = 0;
      v35[2] = 0;
      *v35 = 0;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v53 + 8))(v26, v6);
      sub_1A3A8D05C(*(id *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
    }
    *(_OWORD *)(v3 + 32) = xmmword_1A3AC1B90;
  }
  v56 = v55;
  v57 = v54;
  MEMORY[0x1E0C80A78](v22);
  *(&v47 - 4) = (_QWORD *)v23;
  *(&v47 - 3) = (_QWORD *)v6;
  *(&v47 - 2) = (_QWORD *)v24;
  v36 = type metadata accessor for ChannelStateMachine.SuspendedProducer(255, v23, v6, v24);
  MEMORY[0x1A8597738](&unk_1A3AC9A58, v36);
  v37 = sub_1A3AB46E8();
  v38 = sub_1A39A4820(&qword_1EE6D47E8);
  v39 = MEMORY[0x1A8597738](MEMORY[0x1E0D12E28], v37);
  v25 = sub_1A3A370CC((void (*)(char *, char *))sub_1A3A199A0, (uint64_t)(&v47 - 6), v37, v38, MEMORY[0x1E0DEDCE8], v39, MEMORY[0x1E0DEDD18], v40);
  v56 = v51;
  v57 = v52;
  MEMORY[0x1E0C80A78](v25);
  *(&v47 - 4) = (_QWORD *)v23;
  *(&v47 - 3) = (_QWORD *)v6;
  *(&v47 - 2) = (_QWORD *)v24;
  v41 = type metadata accessor for ChannelStateMachine.SuspendedConsumer(255, v23, v6, v24);
  MEMORY[0x1A8597738](&unk_1A3AC9A18, v41);
  v42 = sub_1A3AB46E8();
  sub_1A3AB50FC();
  sub_1A39AB624(&qword_1EE6D09F0);
  sub_1A3AB4DE4();
  v43 = sub_1A3AB50FC();
  v44 = MEMORY[0x1A8597738](MEMORY[0x1E0D12E28], v42);
  sub_1A3A370CC((void (*)(char *, char *))sub_1A3A199A0, (uint64_t)(&v47 - 6), v42, v43, MEMORY[0x1E0DEDCE8], v44, MEMORY[0x1E0DEDD18], v45);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v25;
}

uint64_t sub_1A3A8C124@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v3 = v2;
  v5 = a1[2];
  v6 = type metadata accessor for ChannelStateMachine.SuspendedProducer(0, v5, a1[3], a1[4]);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v28 - v7;
  v9 = (void *)*v2;
  v10 = v2[4];
  if (v10 < 0)
  {
    if (v9)
    {
      *(_OWORD *)v2 = 0u;
      *((_OWORD *)v2 + 1) = 0u;
      *((_OWORD *)v2 + 2) = xmmword_1A3AC1B90;
      sub_1A39AB624(&qword_1EE6D47E8);
      sub_1A3AB50FC();
      sub_1A39AB624(&qword_1EE6D09F0);
      sub_1A3AB5768();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v19 = (_QWORD *)((char *)a2 + *(int *)(TupleTypeMetadata2 + 48));
      *a2 = 0;
      *v19 = v9;
    }
    else
    {
      sub_1A39AB624(&qword_1EE6D47E8);
      sub_1A3AB50FC();
      sub_1A39AB624(&qword_1EE6D09F0);
      sub_1A3AB5768();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v27 = (char *)a2 + *(int *)(TupleTypeMetadata2 + 48);
      *a2 = 0;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v27, 1, 1, v5);
    }
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a2, 0, 1, TupleTypeMetadata2);
  }
  else
  {
    v30 = v5;
    v31 = a2;
    v11 = v2[1];
    v12 = v2[2];
    v13 = v2[3];
    v14 = v2[5];
    v32 = v11;
    v15 = sub_1A3AB5384();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v29 = v14;
    swift_bridgeObjectRetain();
    MEMORY[0x1A8597738](MEMORY[0x1E0DEC740], v15);
    if ((sub_1A3AB4F7C() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      sub_1A39AB624(&qword_1EE6D47E8);
      sub_1A3AB50FC();
      sub_1A39AB624(&qword_1EE6D09F0);
      sub_1A3AB5768();
      v16 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v31, 1, 1, v16);
    }
    else
    {
      v32 = (uint64_t)v9;
      v33 = v11;
      MEMORY[0x1A8597738](&unk_1A3AC9A58, v6);
      sub_1A3AB46E8();
      sub_1A3AB46B8();
      v20 = v11;
      v21 = v29;
      sub_1A3A8D05C(v9, v20, v12, v13, v10);
      v22 = v33;
      *v3 = v32;
      v3[1] = v22;
      v3[2] = v12;
      v3[3] = v13;
      v3[4] = v10;
      v3[5] = v21;
      sub_1A39AB624(&qword_1EE6D47E8);
      v23 = sub_1A3AB50FC();
      sub_1A39AB624(&qword_1EE6D09F0);
      sub_1A3AB5768();
      v24 = swift_getTupleTypeMetadata2();
      v25 = v31;
      v26 = (char *)v31 + *(int *)(v24 + 48);
      *v31 = *((_QWORD *)v8 + 1);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v26, &v8[*(int *)(v6 + 48)], v23);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v25, 0, 1, v24);
    }
  }
}

uint64_t sub_1A3A8C574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t SuspendedAction;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD *, _QWORD, uint64_t, uint64_t);
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t TupleTypeMetadata2;
  _QWORD *v51;
  char *v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;

  v5 = v4;
  v10 = a3[2];
  v9 = a3[3];
  v11 = a3[4];
  v12 = type metadata accessor for ChannelStateMachine.SuspendedProducer(0, v10, v9, v11);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v53 - v14;
  v16 = *(void **)v5;
  v17 = *(_QWORD *)(v5 + 32);
  if (v17 < 0)
  {
    if (v16)
    {
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = xmmword_1A3AC1B90;
      *a4 = v16;
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a4, 1, 1, v10);
    }
    SuspendedAction = type metadata accessor for ChannelStateMachine.NextSuspendedAction(0, v10, v9, v11);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(SuspendedAction - 8) + 56))(a4, 0, 1, SuspendedAction);
  }
  else
  {
    v57 = v15;
    v58 = v13;
    v62 = a4;
    v18 = *(_QWORD *)(v5 + 8);
    v19 = *(_QWORD *)(v5 + 16);
    v20 = a2;
    v21 = *(_QWORD *)(v5 + 24);
    v22 = a1;
    v23 = *(_QWORD *)(v5 + 40);
    v70 = v16;
    v71 = v18;
    v68 = v21;
    v69 = v17;
    v67 = v23;
    v55 = v20;
    v56 = v22;
    v63 = v20;
    v64 = v22;
    swift_retain();
    v59 = v19;
    sub_1A3A8D0E0(v16, v18, v19, v21, v17);
    v24 = type metadata accessor for ChannelStateMachine.SuspendedConsumer(255, v10, v9, v11);
    v60 = v9;
    v25 = v24;
    swift_retain();
    v26 = MEMORY[0x1A8597738](&unk_1A3AC9A18, v25);
    sub_1A3AB4F1C();
    v61 = v11;
    sub_1A3AB4EEC();
    if (v66 == 1)
    {
      v53[1] = v26;
      v53[2] = v23;
      v54 = v10;
      v65 = v18;
      v27 = v58;
      v28 = sub_1A3AB5384();
      MEMORY[0x1A8597738](MEMORY[0x1E0DEC740], v28);
      v29 = sub_1A3AB4F7C();
      swift_release();
      swift_release();
      if ((v29 & 1) != 0)
      {
        v65 = v55;
        v66 = v56;
        sub_1A3AB46E8();
        sub_1A3AB46DC();
        v30 = v59;
        sub_1A3A8D05C(v16, v18, v59, v21, v17);
        v31 = v68;
        v32 = v69;
        v33 = v67;
        *(_QWORD *)v5 = v16;
        *(_QWORD *)(v5 + 8) = v18;
        *(_QWORD *)(v5 + 16) = v30;
        *(_QWORD *)(v5 + 24) = v31;
        *(_QWORD *)(v5 + 32) = v32;
        *(_QWORD *)(v5 + 40) = v33;
        v34 = type metadata accessor for ChannelStateMachine.NextSuspendedAction(0, v54, v60, v61);
        return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v62, 1, 1, v34);
      }
      MEMORY[0x1A8597738](&unk_1A3AC9A58, v27);
      sub_1A3AB46E8();
      v43 = v57;
      sub_1A3AB46B8();
      v44 = v27;
      v45 = v59;
      sub_1A3A8D05C(v16, v18, v59, v21, v17);
      v46 = v71;
      v47 = v67;
      *(_QWORD *)v5 = v70;
      *(_QWORD *)(v5 + 8) = v46;
      *(_QWORD *)(v5 + 16) = v45;
      *(_QWORD *)(v5 + 24) = v21;
      *(_QWORD *)(v5 + 32) = v17;
      *(_QWORD *)(v5 + 40) = v47;
      sub_1A39AB624(&qword_1EE6D47E8);
      v48 = v54;
      v49 = sub_1A3AB50FC();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v51 = v62;
      v52 = (char *)v62 + *(int *)(TupleTypeMetadata2 + 48);
      *v62 = *((_QWORD *)v43 + 1);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v52, &v43[*(int *)(v44 + 48)], v49);
      v40 = type metadata accessor for ChannelStateMachine.NextSuspendedAction(0, v48, v60, v61);
      swift_storeEnumTagMultiPayload();
      v41 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56);
      v42 = v51;
    }
    else
    {
      swift_release();
      swift_release();
      v37 = v59;
      sub_1A3A8D05C(v16, v18, v59, v21, v17);
      v38 = v67;
      *(_QWORD *)v5 = v16;
      *(_QWORD *)(v5 + 8) = v18;
      *(_QWORD *)(v5 + 16) = v37;
      *(_QWORD *)(v5 + 24) = v21;
      *(_QWORD *)(v5 + 32) = v17;
      *(_QWORD *)(v5 + 40) = v38;
      v39 = v62;
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v62, 1, 1, v10);
      v40 = type metadata accessor for ChannelStateMachine.NextSuspendedAction(0, v10, v60, v61);
      swift_storeEnumTagMultiPayload();
      v41 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56);
      v42 = v39;
    }
    return v41(v42, 0, 1, v40);
  }
}

uint64_t sub_1A3A8CA24(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v3 = v2[4];
  if ((v3 & 0x8000000000000000) == 0)
  {
    v4 = v2;
    v6 = (void *)*v2;
    v5 = v2[1];
    v7 = v2[2];
    v8 = v4[3];
    v9 = v4[5];
    v10 = type metadata accessor for ChannelStateMachine.SuspendedConsumer(255, a2[2], a2[3], a2[4]);
    swift_retain();
    v13 = v7;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    MEMORY[0x1A8597738](&unk_1A3AC9A18, v10);
    sub_1A3AB46E8();
    sub_1A3AB46D0();
    v11 = v14;
    if (v14 != 1)
    {
      sub_1A3A8D05C(v6, v5, v13, v8, v3);
      *v4 = v6;
      v4[1] = v5;
      v4[2] = v13;
      v4[3] = v8;
      v4[4] = v3;
      v4[5] = v9;
      return v11;
    }
    sub_1A3AB4F1C();
    sub_1A3AB4EF8();
    sub_1A3A8D05C(v6, v5, v13, v8, v3);
    *v4 = v6;
    v4[1] = v5;
    v4[2] = v13;
    v4[3] = v8;
    v4[4] = v3;
    v4[5] = v9;
  }
  return 1;
}

uint64_t sub_1A3A8CBB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v8 = type metadata accessor for ChannelStateMachine.SuspendedProducer(0, a1, a2, a3);
  sub_1A3AB4BEC();
  v9 = MEMORY[0x1A8597738](&unk_1A3AC9A58, v8);
  v10 = sub_1A3AB46C4();
  v12 = v11;
  v13 = sub_1A3AB4BEC();
  if (MEMORY[0x1A8595A28](v13, v8))
    v14 = sub_1A3A8CD48(v13, v8, v9);
  else
    v14 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRelease();
  v15 = type metadata accessor for ChannelStateMachine.SuspendedConsumer(0, a1, a2, a3);
  sub_1A3AB4BEC();
  v16 = MEMORY[0x1A8597738](&unk_1A3AC9A18, v15);
  v17 = sub_1A3AB46C4();
  v19 = v18;
  v20 = sub_1A3AB4BEC();
  if (MEMORY[0x1A8595A28](v20, v15))
    v21 = sub_1A3A8CD48(v20, v15, v16);
  else
    v21 = MEMORY[0x1E0DEE9E8];
  result = swift_bridgeObjectRelease();
  *a4 = v10;
  a4[1] = v12;
  a4[2] = v14;
  a4[3] = v17;
  a4[4] = v19;
  a4[5] = v21;
  return result;
}

uint64_t type metadata accessor for ChannelStateMachine.SuspendedProducer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.SuspendedProducer);
}

uint64_t sub_1A3A8CD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, unint64_t, uint64_t);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = a1;
  v45 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v44 = (char *)&v37 - v10;
  v37 = v11;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v37 - v13;
  if (MEMORY[0x1A8595A04](v12))
  {
    sub_1A3AB5294();
    v15 = sub_1A3AB5288();
  }
  else
  {
    v15 = MEMORY[0x1E0DEE9E8];
  }
  v40 = MEMORY[0x1A8595A28](v5, a2);
  if (!v40)
    return v15;
  v16 = 0;
  v43 = v15 + 56;
  v38 = v14;
  v39 = v5;
  while (1)
  {
    v17 = sub_1A3AB4C04();
    sub_1A3AB4BD4();
    if ((v17 & 1) != 0)
    {
      v18 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      v18(v14, v5+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v16, a2);
      v19 = __OFADD__(v16, 1);
      v20 = v16 + 1;
      if (v19)
        goto LABEL_20;
    }
    else
    {
      result = sub_1A3AB52C4();
      if (v37 != 8)
        goto LABEL_23;
      v46 = result;
      v18 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      v18(v14, (unint64_t)&v46, a2);
      swift_unknownObjectRelease();
      v19 = __OFADD__(v16, 1);
      v20 = v16 + 1;
      if (v19)
      {
LABEL_20:
        __break(1u);
        return v15;
      }
    }
    v21 = v45;
    v41 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v42 = v20;
    v41(v44, v14, a2);
    v22 = sub_1A3AB48C8();
    v23 = -1 << *(_BYTE *)(v15 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    v26 = *(_QWORD *)(v43 + 8 * (v24 >> 6));
    v27 = 1 << v24;
    v28 = *(_QWORD *)(v21 + 72);
    if (((1 << v24) & v26) != 0)
    {
      v29 = ~v23;
      do
      {
        v18(v8, *(_QWORD *)(v15 + 48) + v28 * v24, a2);
        v30 = a3;
        v31 = sub_1A3AB494C();
        v32 = *(void (**)(char *, uint64_t))(v45 + 8);
        v32(v8, a2);
        if ((v31 & 1) != 0)
        {
          v32(v44, a2);
          a3 = v30;
          v14 = v38;
          v5 = v39;
          goto LABEL_7;
        }
        v24 = (v24 + 1) & v29;
        v25 = v24 >> 6;
        v26 = *(_QWORD *)(v43 + 8 * (v24 >> 6));
        v27 = 1 << v24;
        a3 = v30;
      }
      while ((v26 & (1 << v24)) != 0);
      v14 = v38;
      v5 = v39;
    }
    v33 = v44;
    *(_QWORD *)(v43 + 8 * v25) = v27 | v26;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v41)(*(_QWORD *)(v15 + 48) + v28 * v24, v33, a2);
    v35 = *(_QWORD *)(v15 + 16);
    v19 = __OFADD__(v35, 1);
    v36 = v35 + 1;
    if (v19)
      break;
    *(_QWORD *)(v15 + 16) = v36;
LABEL_7:
    v16 = v42;
    if (v42 == v40)
      return v15;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ChannelStateMachine.SuspendedConsumer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.SuspendedConsumer);
}

void sub_1A3A8D05C(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 < 0)
  {

  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
}

id sub_1A3A8D0E0(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 < 0)
    return a1;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return (id)swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for ChannelStateMachine.NextSuspendedAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.NextSuspendedAction);
}

uint64_t type metadata accessor for ChannelStateMachine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine);
}

uint64_t sub_1A3A8D19C(uint64_t *a1)
{
  uint64_t v1;
  int v2;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_1A3A8D1C0(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    a2 -= 0x7FFFFFFF;
    goto LABEL_5;
  }
  if (a2)
LABEL_5:
    *result = a2;
  return result;
}

uint64_t type metadata accessor for ChannelStateMachine.SendAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.SendAction);
}

uint64_t type metadata accessor for ChannelStateMachine.SendSuspendedAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.SendSuspendedAction);
}

uint64_t type metadata accessor for ChannelStateMachine.SendCancelledAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.SendCancelledAction);
}

unint64_t sub_1A3A8D210(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A3A8D250(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t *sub_1A3A8D2A0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_1A3A8D358(_QWORD *a1, uint64_t a2)
{
  if (*a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A3A8D3CC(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t sub_1A3A8D41C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

_QWORD *sub_1A3A8D470(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

uint64_t type metadata accessor for ChannelStateMachine.FinishAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.FinishAction);
}

uint64_t sub_1A3A8D49C()
{
  uint64_t result;
  unint64_t v1;

  sub_1A3AB50FC();
  sub_1A39AB624(&qword_1EE6D09F0);
  result = sub_1A3AB5768();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1A3A8D538(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id *v16;
  unsigned int v17;
  uint64_t v18;
  id v19;
  id v20;

  v3 = __dst;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6 & 0xF8 | 7;
  v8 = ~v7;
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v5 + 64) + 1;
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = v9;
  v11 = v10 + (((v6 & 0xF8) + 15) & ~v7) + 1;
  if ((v6 & 0x1000F8) != 0 || v11 > 0x18)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v7 + 16) & v8));
    swift_retain();
  }
  else
  {
    LODWORD(v14) = -1;
    if ((unint64_t)*a2 < 0xFFFFFFFF)
      v14 = *a2;
    if ((v14 + 1) > 1)
    {
      memcpy(__dst, a2, v11);
    }
    else
    {
      *__dst = *a2;
      v15 = (_QWORD *)(((unint64_t)__dst + 15) & v8);
      v16 = (id *)(((unint64_t)a2 + 15) & v8);
      v17 = *((unsigned __int8 *)v16 + v10);
      if (v17 >= 2)
      {
        if (v10 <= 3)
          v18 = v10;
        else
          v18 = 4;
        __asm { BR              X12 }
      }
      if (v17 == 1)
      {
        v19 = *v16;
        v20 = *v16;
        *v15 = v19;
        *((_BYTE *)v15 + v10) = 1;
      }
      else
      {
        if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4))
        {
          memcpy(v15, v16, v9);
        }
        else
        {
          (*(void (**)(_QWORD *, id *, uint64_t))(v5 + 16))(v15, v16, v4);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
        }
        *((_BYTE *)v15 + v10) = 0;
      }
    }
  }
  return v3;
}

void sub_1A3A8D70C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  if ((v2 + 1) <= 1)
  {
    v3 = *(_QWORD *)(a2 + 16);
    v4 = *(_QWORD *)(v3 - 8);
    v5 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
    v6 = (id *)(((unint64_t)a1 + v5 + 8) & ~v5);
    if (*(_DWORD *)(v4 + 84))
      v7 = *(_QWORD *)(v4 + 64);
    else
      v7 = *(_QWORD *)(v4 + 64) + 1;
    if (v7 <= 8)
      v7 = 8;
    v8 = *((unsigned __int8 *)v6 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X13 }
    }
    if (v8 == 1)
    {

    }
    else if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3))
    {
      (*(void (**)(id *, uint64_t))(v4 + 8))(v6, v3);
    }
  }
}

uint64_t *sub_1A3A8D840(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id *v12;
  size_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v9 = ~v8;
  LODWORD(v10) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v10 = *a2;
  if ((v10 + 1) > 1)
  {
    v17 = (v8 + 8) & v9;
    if (!v7)
      ++v6;
    if (v6 <= 8)
      v6 = 8;
    memcpy(__dst, a2, v6 + v17 + 1);
  }
  else
  {
    *__dst = *a2;
    v11 = (_QWORD *)(((unint64_t)__dst + v8 + 8) & v9);
    v12 = (id *)(((unint64_t)a2 + v8 + 8) & v9);
    if (v7)
      v13 = v6;
    else
      v13 = v6 + 1;
    if (v13 <= 8)
      v14 = 8;
    else
      v14 = v13;
    v15 = *((unsigned __int8 *)v12 + v14);
    if (v15 >= 2)
    {
      if (v14 <= 3)
        v16 = v14;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
    {
      v18 = *v12;
      v19 = *v12;
      *v11 = v18;
      *((_BYTE *)v11 + v14) = 1;
    }
    else
    {
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4))
      {
        memcpy(v11, v12, v13);
      }
      else
      {
        (*(void (**)(_QWORD *, id *, uint64_t))(v5 + 16))(v11, v12, v4);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v11, 0, 1, v4);
      }
      *((_BYTE *)v11 + v14) = 0;
    }
  }
  return __dst;
}

char *sub_1A3A8DA00(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  id *v19;
  unint64_t v20;
  id *v21;
  size_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  id *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  unsigned int v35;
  uint64_t v36;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_DWORD *)(v6 + 80) & 0xF8;
  v10 = v9 | 7;
  v11 = ~(v9 | 7);
  v12 = (v9 + 15) & v11;
  v13 = *(_QWORD *)__dst;
  LODWORD(v14) = -1;
  if (*(_QWORD *)__dst >= 0xFFFFFFFFuLL)
    LODWORD(v13) = -1;
  v15 = v13 + 1;
  v16 = *(_QWORD *)__src;
  if (*(_QWORD *)__src < 0xFFFFFFFFuLL)
    v14 = *(_QWORD *)__src;
  v17 = v14 + 1;
  if (v15 > 1)
  {
    if (v17 <= 1)
    {
      *(_QWORD *)__dst = v16;
      v19 = (id *)((unint64_t)&__dst[v10 + 8] & v11);
      v21 = (id *)((unint64_t)&__src[v10 + 8] & v11);
      if (v8)
        v22 = v7;
      else
        v22 = v7 + 1;
      if (v22 <= 8)
        v23 = 8;
      else
        v23 = v22;
      v26 = *((unsigned __int8 *)v21 + v23);
      if (v26 >= 2)
      {
        if (v23 <= 3)
          v27 = v23;
        else
          v27 = 4;
        __asm { BR              X12 }
      }
      if (v26 != 1)
        goto LABEL_64;
LABEL_47:
      v33 = *v21;
      v34 = *v21;
      *v19 = v33;
      *((_BYTE *)v19 + v23) = 1;
      return __dst;
    }
    if (!v8)
      ++v7;
    if (v7 <= 8)
      v7 = 8;
    v32 = v7 + v12;
LABEL_53:
    memcpy(__dst, __src, v32 + 1);
    return __dst;
  }
  if (v17 > 1)
  {
    v28 = (id *)((unint64_t)&__dst[v10 + 8] & v11);
    if (!v8)
      ++v7;
    if (v7 <= 8)
      v29 = 8;
    else
      v29 = v7;
    v30 = *((unsigned __int8 *)v28 + v29);
    if (v30 >= 2)
    {
      if (v29 <= 3)
        v31 = v29;
      else
        v31 = 4;
      __asm { BR              X12 }
    }
    if (v30 == 1)
    {

    }
    else if (!(*(unsigned int (**)(id *, uint64_t, _QWORD))(v6 + 48))(v28, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(id *, uint64_t))(v6 + 8))(v28, v5);
    }
    v32 = v29 + v12;
    goto LABEL_53;
  }
  *(_QWORD *)__dst = v16;
  v18 = (unint64_t)&__dst[v10 + 8];
  v19 = (id *)(v18 & v11);
  v20 = (unint64_t)&__src[v10 + 8];
  v21 = (id *)(v20 & v11);
  if ((v18 & v11) == (v20 & v11))
    return __dst;
  if (v8)
    v22 = v7;
  else
    v22 = v7 + 1;
  if (v22 <= 8)
    v23 = 8;
  else
    v23 = v22;
  v24 = *((unsigned __int8 *)v19 + v23);
  if (v24 >= 2)
  {
    if (v23 <= 3)
      v25 = v23;
    else
      v25 = 4;
    __asm { BR              X12 }
  }
  if (v24 == 1)
  {

  }
  else if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v18 & v11, 1, v5))
  {
    (*(void (**)(id *, uint64_t))(v6 + 8))(v19, v5);
  }
  v35 = *((unsigned __int8 *)v21 + v23);
  if (v35 >= 2)
  {
    if (v23 <= 3)
      v36 = v23;
    else
      v36 = 4;
    __asm { BR              X12 }
  }
  if (v35 == 1)
    goto LABEL_47;
LABEL_64:
  if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v6 + 48))(v21, 1, v5))
  {
    memcpy(v19, v21, v22);
  }
  else
  {
    (*(void (**)(id *, id *, uint64_t))(v6 + 16))(v19, v21, v5);
    (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
  }
  *((_BYTE *)v19 + v23) = 0;
  return __dst;
}

uint64_t *sub_1A3A8DE1C(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v9 = ~v8;
  LODWORD(v10) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v10 = *a2;
  if ((v10 + 1) > 1)
  {
    v17 = (v8 + 8) & v9;
    if (!v7)
      ++v6;
    if (v6 <= 8)
      v6 = 8;
    memcpy(__dst, a2, v6 + v17 + 1);
  }
  else
  {
    *__dst = *a2;
    v11 = (_QWORD *)(((unint64_t)__dst + v8 + 8) & v9);
    v12 = (_QWORD *)(((unint64_t)a2 + v8 + 8) & v9);
    if (v7)
      v13 = v6;
    else
      v13 = v6 + 1;
    if (v13 <= 8)
      v14 = 8;
    else
      v14 = v13;
    v15 = *((unsigned __int8 *)v12 + v14);
    if (v15 >= 2)
    {
      if (v14 <= 3)
        v16 = v14;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
    {
      *v11 = *v12;
      *((_BYTE *)v11 + v14) = 1;
    }
    else
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4))
      {
        memcpy(v11, v12, v13);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(v11, v12, v4);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v11, 0, 1, v4);
      }
      *((_BYTE *)v11 + v14) = 0;
    }
  }
  return __dst;
}

char *sub_1A3A8DFD4(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  id *v19;
  unint64_t v20;
  id *v21;
  size_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  id *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_DWORD *)(v6 + 80) & 0xF8;
  v10 = v9 | 7;
  v11 = ~(v9 | 7);
  v12 = (v9 + 15) & v11;
  v13 = *(_QWORD *)__dst;
  LODWORD(v14) = -1;
  if (*(_QWORD *)__dst >= 0xFFFFFFFFuLL)
    LODWORD(v13) = -1;
  v15 = v13 + 1;
  v16 = *(_QWORD *)__src;
  if (*(_QWORD *)__src < 0xFFFFFFFFuLL)
    v14 = *(_QWORD *)__src;
  v17 = v14 + 1;
  if (v15 > 1)
  {
    if (v17 <= 1)
    {
      *(_QWORD *)__dst = v16;
      v19 = (id *)((unint64_t)&__dst[v10 + 8] & v11);
      v21 = (id *)((unint64_t)&__src[v10 + 8] & v11);
      if (v8)
        v22 = v7;
      else
        v22 = v7 + 1;
      if (v22 <= 8)
        v23 = 8;
      else
        v23 = v22;
      v26 = *((unsigned __int8 *)v21 + v23);
      if (v26 >= 2)
      {
        if (v23 <= 3)
          v27 = v23;
        else
          v27 = 4;
        __asm { BR              X12 }
      }
      if (v26 != 1)
        goto LABEL_64;
LABEL_47:
      *v19 = *v21;
      *((_BYTE *)v19 + v23) = 1;
      return __dst;
    }
    if (!v8)
      ++v7;
    if (v7 <= 8)
      v7 = 8;
    v32 = v7 + v12;
LABEL_53:
    memcpy(__dst, __src, v32 + 1);
    return __dst;
  }
  if (v17 > 1)
  {
    v28 = (id *)((unint64_t)&__dst[v10 + 8] & v11);
    if (!v8)
      ++v7;
    if (v7 <= 8)
      v29 = 8;
    else
      v29 = v7;
    v30 = *((unsigned __int8 *)v28 + v29);
    if (v30 >= 2)
    {
      if (v29 <= 3)
        v31 = v29;
      else
        v31 = 4;
      __asm { BR              X12 }
    }
    if (v30 == 1)
    {

    }
    else if (!(*(unsigned int (**)(id *, uint64_t, _QWORD))(v6 + 48))(v28, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(id *, uint64_t))(v6 + 8))(v28, v5);
    }
    v32 = v29 + v12;
    goto LABEL_53;
  }
  *(_QWORD *)__dst = v16;
  v18 = (unint64_t)&__dst[v10 + 8];
  v19 = (id *)(v18 & v11);
  v20 = (unint64_t)&__src[v10 + 8];
  v21 = (id *)(v20 & v11);
  if ((v18 & v11) == (v20 & v11))
    return __dst;
  if (v8)
    v22 = v7;
  else
    v22 = v7 + 1;
  if (v22 <= 8)
    v23 = 8;
  else
    v23 = v22;
  v24 = *((unsigned __int8 *)v19 + v23);
  if (v24 >= 2)
  {
    if (v23 <= 3)
      v25 = v23;
    else
      v25 = 4;
    __asm { BR              X12 }
  }
  if (v24 == 1)
  {

  }
  else if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v18 & v11, 1, v5))
  {
    (*(void (**)(id *, uint64_t))(v6 + 8))(v19, v5);
  }
  v33 = *((unsigned __int8 *)v21 + v23);
  if (v33 >= 2)
  {
    if (v23 <= 3)
      v34 = v23;
    else
      v34 = 4;
    __asm { BR              X12 }
  }
  if (v33 == 1)
    goto LABEL_47;
LABEL_64:
  if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v6 + 48))(v21, 1, v5))
  {
    memcpy(v19, v21, v22);
  }
  else
  {
    (*(void (**)(id *, id *, uint64_t))(v6 + 32))(v19, v21, v5);
    (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
  }
  *((_BYTE *)v19 + v23) = 0;
  return __dst;
}

uint64_t sub_1A3A8E3E8(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  unsigned int v9;
  int v10;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_DWORD *)(v3 + 84))
    v4 = *(_QWORD *)(v3 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64) + 1;
  if (v4 <= 8)
    v4 = 8;
  if (!a2)
    return 0;
  if (a2 < 0x7FFFFFFE)
    goto LABEL_24;
  v5 = v4
     + ((unsigned __int16)((*(_WORD *)(v3 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v3 + 80) & 0xF8) & 0x1F8)
     + 1;
  v6 = 8 * v5;
  if (v5 > 3)
    goto LABEL_9;
  v9 = (a2 - 2147483645 + ~(-1 << v6)) >> v6;
  if (v9 > 0xFFFE)
  {
    v7 = *(_DWORD *)((char *)a1 + v5);
    if (v7)
      goto LABEL_17;
LABEL_24:
    v11 = *a1;
    if (*a1 >= 0xFFFFFFFFuLL)
      LODWORD(v11) = -1;
    if ((v11 + 1) < 2)
      LODWORD(v11) = 0;
    if (v11 >= 2)
      return (v11 - 1);
    else
      return 0;
  }
  if (v9 > 0xFE)
  {
    v7 = *(unsigned __int16 *)((char *)a1 + v5);
    if (*(_WORD *)((char *)a1 + v5))
      goto LABEL_17;
    goto LABEL_24;
  }
  if (!v9)
    goto LABEL_24;
LABEL_9:
  v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((_BYTE *)a1 + v5))
    goto LABEL_24;
LABEL_17:
  v10 = (v7 - 1) << v6;
  if (v5 > 3)
    v10 = 0;
  if (!(_DWORD)v5)
    return (v10 + 2147483646);
  if (v5 > 3)
    LODWORD(v5) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1A3A8E4D4 + 4 * byte_1A3AC976C[(v5 - 1)]))();
}

void sub_1A3A8E53C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 84) == 0;
  v8 = (unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8;
  if (v7)
    ++v6;
  if (v6 <= 8)
    v6 = 8;
  v9 = v6 + v8 + 1;
  if (a3 <= 0x7FFFFFFD)
  {
    v10 = 0u;
  }
  else if (v9 <= 3)
  {
    v12 = (a3 - 2147483645 + ~(-1 << (8 * v9))) >> (8 * v9);
    if (v12 > 0xFFFE)
    {
      v10 = 4u;
    }
    else if (v12 >= 0xFF)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 != 0;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0x7FFFFFFD)
    __asm { BR              X10 }
  v11 = a2 - 2147483646;
  if (v9 < 4)
  {
    if ((_DWORD)v9)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *a1 = v13;
        *((_BYTE *)a1 + 2) = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *a1 = v13;
      }
      else
      {
        *(_BYTE *)a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v9);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

_QWORD *sub_1A3A8E714(_QWORD *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  __int16 v5;
  size_t v6;
  int v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_DWORD *)(v3 + 84))
    v4 = *(_QWORD *)(v3 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64) + 1;
  if (v4 <= 8)
    LODWORD(v4) = 8;
  if (a2 > 0x7FFFFFFE)
  {
    v5 = *(_DWORD *)(v3 + 80) & 0xF8;
    v6 = v4 + ((unsigned __int16)(v5 + 15) & (unsigned __int16)~v5 & 0x1F8) + 1;
    if ((_DWORD)v6)
    {
      if (v6 <= 3)
        v7 = v6;
      else
        v7 = 4;
      bzero(result, v6);
      __asm { BR              X10 }
    }
  }
  else if (a2)
  {
    *result = a2;
  }
  return result;
}

uint64_t type metadata accessor for ChannelStateMachine.NextAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.NextAction);
}

uint64_t sub_1A3A8E81C()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  uint64_t v3;
  const char *v4;
  char *v5;

  result = sub_1A3AB50FC();
  if (v1 <= 0x3F)
  {
    v3 = *(_QWORD *)(result - 8) + 64;
    v4 = "\b";
    swift_getTupleTypeLayout2();
    v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

id *sub_1A3A8E8A4(id *a1, id *a2, uint64_t a3)
{
  id *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  const void *v19;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + v7;
  if (v7 > v9)
    v9 = v7;
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = v9;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || (unint64_t)(v10 + 1) > 0x18)
  {
    v13 = (char *)*a2;
    *v4 = *a2;
    v4 = (id *)&v13[(v8 & 0xF8 ^ 0x1F8) & (v8 + 16)];
    swift_retain();
  }
  else
  {
    v14 = *((unsigned __int8 *)a2 + v10);
    if (v14 >= 3)
    {
      if (v10 <= 3)
        v15 = v10;
      else
        v15 = 4;
      __asm { BR              X13 }
    }
    if (v14 == 2)
    {
      *a1 = *a2;
      v18 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
      v19 = (const void *)(((unint64_t)a2 + v8 + 8) & ~v8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v19, 1, v5))
      {
        memcpy(v18, v19, v7);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v18, v19, v5);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v5);
      }
      *((_BYTE *)v4 + v10) = 2;
    }
    else if (v14 == 1)
    {
      v16 = *a2;
      v17 = *a2;
      *v4 = v16;
      *((_BYTE *)v4 + v10) = 1;
    }
    else
    {
      if ((*(unsigned int (**)(id *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
      {
        memcpy(v4, a2, v7);
      }
      else
      {
        (*(void (**)(id *, id *, uint64_t))(v6 + 16))(v4, a2, v5);
        (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      }
      *((_BYTE *)v4 + v10) = 0;
    }
  }
  return v4;
}

void sub_1A3A8EAD8(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v2 = (uint64_t)a1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (!*(_DWORD *)(v4 + 84))
    ++v5;
  v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= ((v6 + 8) & ~v6) + v5)
    v5 += (v6 + 8) & ~v6;
  if (v5 <= 8)
    v5 = 8;
  v7 = *((unsigned __int8 *)a1 + v5);
  if (v7 >= 3)
  {
    if (v5 <= 3)
      v8 = v5;
    else
      v8 = 4;
    __asm { BR              X14 }
  }
  if (v7 == 2)
  {
    v2 = ((unint64_t)a1 + v6 + 8) & ~v6;
  }
  else if (v7 == 1)
  {

    return;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
}

id *sub_1A3A8EC10(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  id v13;
  id v14;
  char v15;
  void *v16;
  const void *v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + v7;
  if (v7 > v9)
    v9 = v7;
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = v9;
  v11 = *((unsigned __int8 *)a2 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X13 }
  }
  if (v11 == 2)
  {
    *a1 = *a2;
    v16 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
    v17 = (const void *)(((unint64_t)a2 + v8 + 8) & ~v8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v17, 1, v5))
    {
      memcpy(v16, v17, v7);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v16, v17, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
    }
    v15 = 2;
  }
  else if (v11 == 1)
  {
    v13 = *a2;
    v14 = *a2;
    *a1 = v13;
    v15 = 1;
  }
  else
  {
    if ((*(unsigned int (**)(id *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(id *, id *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    v15 = 0;
  }
  *((_BYTE *)a1 + v10) = v15;
  return a1;
}

id *sub_1A3A8EE04(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  id v16;
  id v17;
  char v18;
  const void *v19;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = ((v8 + 8) & ~v8) + v7;
    if (v7 > v9)
      v9 = v7;
    if (v9 <= 8)
      v10 = 8;
    else
      v10 = v9;
    v11 = *((unsigned __int8 *)a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    v13 = ~v8;
    if (v11 == 2)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, _QWORD))(v6 + 48))(((unint64_t)a1 + v8 + 8) & v13, 1, *(_QWORD *)(a3 + 16)))(*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)a1 + v8 + 8) & v13, v5);
    }
    else if (v11 == 1)
    {

    }
    else if (!(*(unsigned int (**)(id *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(id *, uint64_t))(v6 + 8))(a1, v5);
    }
    v14 = *((unsigned __int8 *)a2 + v10);
    if (v14 >= 3)
    {
      if (v10 <= 3)
        v15 = v10;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (v14 == 2)
    {
      *a1 = *a2;
      v19 = (const void *)(((unint64_t)a2 + v8 + 8) & v13);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v19, 1, v5))
      {
        memcpy((void *)(((unint64_t)a1 + v8 + 8) & v13), v19, v7);
      }
      else
      {
        (*(void (**)(unint64_t, const void *, uint64_t))(v6 + 16))(((unint64_t)a1 + v8 + 8) & v13, v19, v5);
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(((unint64_t)a1 + v8 + 8) & v13, 0, 1, v5);
      }
      v18 = 2;
    }
    else if (v14 == 1)
    {
      v16 = *a2;
      v17 = *a2;
      *a1 = v16;
      v18 = 1;
    }
    else
    {
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
      }
      else
      {
        (*(void (**)(id *, id *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      v18 = 0;
    }
    *((_BYTE *)a1 + v10) = v18;
  }
  return a1;
}

_QWORD *sub_1A3A8F124(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  void *v14;
  const void *v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + v7;
  if (v7 > v9)
    v9 = v7;
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = v9;
  v11 = *((unsigned __int8 *)a2 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X13 }
  }
  if (v11 == 2)
  {
    *a1 = *a2;
    v14 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
    v15 = (const void *)(((unint64_t)a2 + v8 + 8) & ~v8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v5))
    {
      memcpy(v14, v15, v7);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v14, v15, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
    }
    v13 = 2;
  }
  else if (v11 == 1)
  {
    *a1 = *a2;
    v13 = 1;
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    v13 = 0;
  }
  *((_BYTE *)a1 + v10) = v13;
  return a1;
}

id *sub_1A3A8F310(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  const void *v17;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = ((v8 + 8) & ~v8) + v7;
    if (v7 > v9)
      v9 = v7;
    if (v9 <= 8)
      v10 = 8;
    else
      v10 = v9;
    v11 = *((unsigned __int8 *)a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    v13 = ~v8;
    if (v11 == 2)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, _QWORD))(v6 + 48))(((unint64_t)a1 + v8 + 8) & v13, 1, *(_QWORD *)(a3 + 16)))(*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)a1 + v8 + 8) & v13, v5);
    }
    else if (v11 == 1)
    {

    }
    else if (!(*(unsigned int (**)(id *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(id *, uint64_t))(v6 + 8))(a1, v5);
    }
    v14 = *((unsigned __int8 *)a2 + v10);
    if (v14 >= 3)
    {
      if (v10 <= 3)
        v15 = v10;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (v14 == 2)
    {
      *a1 = *a2;
      v17 = (const void *)(((unint64_t)a2 + v8 + 8) & v13);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v17, 1, v5))
      {
        memcpy((void *)(((unint64_t)a1 + v8 + 8) & v13), v17, v7);
      }
      else
      {
        (*(void (**)(unint64_t, const void *, uint64_t))(v6 + 32))(((unint64_t)a1 + v8 + 8) & v13, v17, v5);
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(((unint64_t)a1 + v8 + 8) & v13, 0, 1, v5);
      }
      v16 = 2;
    }
    else if (v14 == 1)
    {
      *a1 = *a2;
      v16 = 1;
    }
    else
    {
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
      }
      else
      {
        (*(void (**)(id *, id *, uint64_t))(v6 + 32))(a1, a2, v5);
        (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      v16 = 0;
    }
    *((_BYTE *)a1 + v10) = v16;
  }
  return a1;
}

uint64_t sub_1A3A8F628(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_DWORD *)(v3 + 84) == 0;
  v6 = (*(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (v5)
    v7 = v4 + 1;
  else
    v7 = v4;
  v8 = v6 + v7;
  if (v7 > v8)
    v8 = v7;
  v9 = 8;
  if (v8 > 8)
    v9 = v8;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_26;
  v10 = v9 + 1;
  v11 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    v14 = ((a2 + ~(-1 << v11) - 253) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v14 < 2)
    {
LABEL_26:
      v16 = *(unsigned __int8 *)(a1 + v9);
      if (v16 >= 3)
        return (v16 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_26;
LABEL_19:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if (!(_DWORD)v10)
    return (v15 + 254);
  if (v10 > 3)
    LODWORD(v10) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1A3A8F710 + 4 * byte_1A3AC97A6[(v10 - 1)]))();
}

void sub_1A3A8F75C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 84) == 0;
  v8 = (*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  if (v7)
    v9 = v6 + 1;
  else
    v9 = v6;
  v10 = v8 + v9;
  if (v9 > v10)
    v10 = v9;
  if (v10 <= 8)
    v10 = 8;
  v11 = v10 + 1;
  if (a3 < 0xFE)
  {
    v12 = 0u;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 + ~(-1 << (8 * v11)) - 253) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v13 = a2 - 254;
  if (v11 < 4)
  {
    if ((_DWORD)v10 != -1)
    {
      v15 = v13 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *a1 = v15;
        *((_BYTE *)a1 + 2) = BYTE2(v15);
      }
      else if ((_DWORD)v11 == 2)
      {
        *a1 = v15;
      }
      else
      {
        *(_BYTE *)a1 = v15;
      }
    }
  }
  else
  {
    bzero(a1, v10 + 1);
    *(_DWORD *)a1 = v13;
  }
  __asm { BR              X10 }
}

uint64_t sub_1A3A8F928(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  if (*(_DWORD *)(v2 + 84))
    v3 = *(_QWORD *)(v2 + 64);
  else
    v3 = *(_QWORD *)(v2 + 64) + 1;
  v4 = ((*(unsigned __int8 *)(v2 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v3 > v4)
    v4 = v3;
  v5 = 8;
  if (v4 > 8)
    v5 = v4;
  if (*(unsigned __int8 *)(a1 + v5) < 3u)
    return *(unsigned __int8 *)(a1 + v5);
  if (v5 <= 3)
    v6 = v5;
  else
    v6 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1A3A8F994 + 4 * byte_1A3AC97B4[v6]))();
}

_BYTE *sub_1A3A8F9DC(_BYTE *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  size_t v5;
  char v6;
  int v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_DWORD *)(v3 + 84))
    v4 = *(_QWORD *)(v3 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64) + 1;
  v5 = ((*(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v4 > v5)
    v5 = v4;
  if (v5 <= 8)
    v5 = 8;
  if (a2 > 2)
  {
    if (v5 <= 3)
      v6 = ((a2 - 3) >> (8 * v5)) + 3;
    else
      v6 = 3;
    result[v5] = v6;
    if (v5 >= 4)
      v7 = 4;
    else
      v7 = v5;
    bzero(result, v5);
    __asm { BR              X10 }
  }
  result[v5] = a2;
  return result;
}

uint64_t sub_1A3A8FAD4(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  if ((v4 + 1) >= 2)
    return v4;
  else
    return 0;
}

uint64_t type metadata accessor for ChannelStateMachine.NextCancelledAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.NextCancelledAction);
}

void sub_1A3A8FB3C(uint64_t a1)
{
  sub_1A3A8D05C(*(id *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

_QWORD *sub_1A3A8FB50(_QWORD *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  sub_1A3A8D0E0(*(id *)a2, v4, v5, v6, v7);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  return a1;
}

uint64_t sub_1A3A8FBBC(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  sub_1A3A8D0E0(*(id *)a2, v4, v5, v6, v7);
  v9 = *(void **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  sub_1A3A8D05C(v9, v10, v11, v12, v13);
  return a1;
}

uint64_t sub_1A3A8FC38(uint64_t a1, _OWORD *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v3 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = a2[2];
  sub_1A3A8D05C(v3, v5, v4, v6, v7);
  return a1;
}

uint64_t sub_1A3A8FC80(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x3FFF);
  v3 = (((*(_QWORD *)(a1 + 32) >> 50) >> 13) | (2
                                                            * ((*(_QWORD *)(a1 + 32) >> 50) & 0x1C00 | ((*(_QWORD *)(a1 + 32) & 7) << 7) | (*(_QWORD *)(a1 + 8) >> 57) & 0x78 | *(_QWORD *)(a1 + 8) & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFE)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_1A3A8FCFC(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x3FFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x3FFF;
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x1FFF | ((-a2 & 0x3FFF) << 13);
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
      *(_QWORD *)(result + 40) = 0;
    }
  }
  return result;
}

uint64_t sub_1A3A8FD80(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) >> 63;
}

uint64_t sub_1A3A8FD8C(uint64_t result)
{
  *(_QWORD *)(result + 32) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_1A3A8FD9C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *(_QWORD *)(result + 8) &= 0xFFFFFFFFFFFFFF8uLL;
  *(_QWORD *)(result + 32) = v2;
  return result;
}

uint64_t type metadata accessor for ChannelStateMachine.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.State);
}

uint64_t sub_1A3A8FDC8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1A3A8FE24(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_1A3A8FE74()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A3AB50FC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A3A8FEF8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  const void *v16;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 16) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v13 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = (void *)(((unint64_t)v13 + v7 + 8) & ~v7);
    v16 = (const void *)(((unint64_t)v14 + v7 + 8) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4))
    {
      memcpy(v15, v16, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v15, v16, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t sub_1A3A90014(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  return result;
}

_QWORD *sub_1A3A90088(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84))
      v11 = *(_QWORD *)(v7 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64) + 1;
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

_QWORD *sub_1A3A90158(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  v10 = (void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      return a1;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
  return a1;
}

_QWORD *sub_1A3A90274(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84))
      v11 = *(_QWORD *)(v7 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64) + 1;
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

_QWORD *sub_1A3A90344(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  v10 = (void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      return a1;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
  return a1;
}

uint64_t sub_1A3A90460(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + ((v9 + 16) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      v17 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v6 > 0x7FFFFFFE)
      {
        v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v9 + 8) & ~v9);
        if (v19 >= 2)
          return v19 - 1;
        else
          return 0;
      }
      else
      {
        v18 = *v17;
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        if ((v18 + 1) >= 2)
          return v18;
        else
          return 0;
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void sub_1A3A905F4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_1A3A90864()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1A3A9086C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1A3A9088C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1A3A9089C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1A3A908A4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void sub_1A3A908B0()
{
  JUMPOUT(0x1A8597738);
}

void sub_1A3A908C0()
{
  JUMPOUT(0x1A8597738);
}

_QWORD *sub_1A3A908D0(_QWORD *a1, id *a2)
{
  id v3;
  id v4;

  v3 = *a2;
  v4 = *a2;
  *a1 = v3;
  return a1;
}

void sub_1A3A90900(id *a1)
{

}

void **sub_1A3A90908(void **a1, id *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = *a2;
  v4 = *a2;
  v5 = *a1;
  *a1 = v3;

  return a1;
}

void **sub_1A3A90940(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t type metadata accessor for ChannelStateMachine.Termination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.Termination);
}

void sub_1A3A90990(void *a1@<X0>, _BYTE *a2@<X8>)
{

  *a2 = 1;
}

uint64_t static TTSMarkup.SpeechBuilder.buildBlock(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1A39A1AD0(a1, a2);
}

uint64_t static TTSMarkup.SpeechBuilder.buildIf(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  uint64_t v5;

  sub_1A3A37AB4(a1, (uint64_t)&v4);
  if (v5)
    return sub_1A39A1AB8(&v4, a2);
  *(_QWORD *)(a2 + 24) = &type metadata for EmptySpeech;
  *(_QWORD *)(a2 + 32) = &off_1E4A95EF8;
  return sub_1A39BFB74((uint64_t)&v4);
}

uint64_t _s12TextToSpeech9TTSMarkupO0C7BuilderV10buildArrayyAA0dC0_pSayAaG_pGFZ_0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  a2[3] = sub_1A39A4820(&qword_1EE6D2BE0);
  a2[4] = &protocol witness table for <A> [A];
  *a2 = a1;
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for EmptySpeech()
{
  return &type metadata for EmptySpeech;
}

ValueMetadata *type metadata accessor for TTSMarkup.SpeechBuilder()
{
  return &type metadata for TTSMarkup.SpeechBuilder;
}

uint64_t TTSMarkupVisitor.visit(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[5];

  v7[3] = &type metadata for TTSMarkup.SpeechDocument;
  v7[4] = &protocol witness table for TTSMarkup.SpeechDocument;
  v7[0] = swift_allocObject();
  sub_1A3A90B24(a1, v7[0] + 16);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 104))(v7, a2, a3);
  return sub_1A39A47C4((uint64_t)v7);
}

{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  id v11;
  _QWORD v13[5];

  v6 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v13[3] = &type metadata for TTSMarkup.SpeechText;
  v13[4] = &protocol witness table for TTSMarkup.SpeechText;
  v9 = (_QWORD *)swift_allocObject();
  v13[0] = v9;
  v9[2] = v6;
  v9[3] = v5;
  v9[4] = v8;
  v9[5] = v7;
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 104);
  v11 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v13, a2, a3);
  return sub_1A39A47C4((uint64_t)v13);
}

{
  return sub_1A3A90FAC(a1, a2, a3, (uint64_t)&type metadata for TTSMarkup.Audio, (uint64_t)&protocol witness table for TTSMarkup.Audio, (uint64_t)&unk_1E4AA5978, (void (*)(uint64_t, uint64_t))sub_1A3A74300);
}

{
  _QWORD v7[5];

  v7[3] = &type metadata for TTSMarkup.Prosody;
  v7[4] = &protocol witness table for TTSMarkup.Prosody;
  v7[0] = swift_allocObject();
  sub_1A3A49D24(a1, v7[0] + 16);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 104))(v7, a2, a3);
  return sub_1A39A47C4((uint64_t)v7);
}

{
  return sub_1A3A90FAC(a1, a2, a3, (uint64_t)&type metadata for TTSMarkup.SayAs, (uint64_t)&protocol witness table for TTSMarkup.SayAs, (uint64_t)&unk_1E4AA59F0, (void (*)(uint64_t, uint64_t))sub_1A39C1878);
}

{
  _QWORD v7[5];

  v7[3] = &type metadata for TTSMarkup.Voice;
  v7[4] = &protocol witness table for TTSMarkup.Voice;
  v7[0] = swift_allocObject();
  sub_1A39B7AF4(a1, v7[0] + 16);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 104))(v7, a2, a3);
  return sub_1A39A47C4((uint64_t)v7);
}

{
  _QWORD v7[5];

  v7[3] = &type metadata for TTSMarkup.Language;
  v7[4] = &protocol witness table for TTSMarkup.Language;
  v7[0] = swift_allocObject();
  sub_1A39B7A74(a1, v7[0] + 16);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 104))(v7, a2, a3);
  return sub_1A39A47C4((uint64_t)v7);
}

uint64_t sub_1A3A90B1C()
{
  return sub_1A39C4864();
}

uint64_t sub_1A3A90B24(uint64_t a1, uint64_t a2)
{
  _s8SentenceVwcp(a2, a1);
  return a2;
}

Swift::Void __swiftcall TTSMarkupVisitor.visit(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((_QWORD *)a1._rawValue + 2);
  if (v4)
  {
    v5 = v2;
    v6 = v1;
    v7 = (char *)a1._rawValue + 32;
    swift_bridgeObjectRetain();
    do
    {
      v8 = v7[3];
      v9 = v7[4];
      sub_1A39A19CC(v7, v8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 80))(v3, v6, v5, v8, v9);
      v7 += 5;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
}

uint64_t TTSMarkupVisitor.visit(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t);
  _QWORD v14[5];

  v5 = *a1;
  v6 = *((_DWORD *)a1 + 2);
  v7 = *((_BYTE *)a1 + 12);
  v8 = *((_BYTE *)a1 + 13);
  v10 = a1[2];
  v9 = a1[3];
  v14[3] = &type metadata for TTSMarkup.Pause;
  v14[4] = &protocol witness table for TTSMarkup.Pause;
  v11 = swift_allocObject();
  v14[0] = v11;
  *(_QWORD *)(v11 + 16) = v5;
  *(_DWORD *)(v11 + 24) = v6;
  *(_BYTE *)(v11 + 28) = v7;
  *(_BYTE *)(v11 + 29) = v8;
  *(_QWORD *)(v11 + 32) = v10;
  *(_QWORD *)(v11 + 40) = v9;
  v12 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v14, a2, a3);
  return sub_1A39A47C4((uint64_t)v14);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, uint64_t);
  _QWORD v10[5];

  v5 = *a1;
  v6 = a1[1];
  v10[4] = &protocol witness table for TTSMarkup.Mark;
  v7 = a1[2];
  v10[0] = v5;
  v10[1] = v6;
  v10[2] = v7;
  v10[3] = &type metadata for TTSMarkup.Mark;
  v8 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(v10, a2, a3);
  return sub_1A39A47C4((uint64_t)v10);
}

{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t);
  _QWORD v14[5];

  v5 = *a1;
  v6 = *((_BYTE *)a1 + 8);
  v8 = a1[2];
  v7 = a1[3];
  v10 = a1[4];
  v9 = a1[5];
  v14[3] = &type metadata for TTSMarkup.Phoneme;
  v14[4] = &protocol witness table for TTSMarkup.Phoneme;
  v11 = swift_allocObject();
  v14[0] = v11;
  *(_QWORD *)(v11 + 16) = v5;
  *(_BYTE *)(v11 + 24) = v6;
  *(_QWORD *)(v11 + 32) = v8;
  *(_QWORD *)(v11 + 40) = v7;
  *(_QWORD *)(v11 + 48) = v10;
  *(_QWORD *)(v11 + 56) = v9;
  v12 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v14, a2, a3);
  return sub_1A39A47C4((uint64_t)v14);
}

uint64_t sub_1A3A90FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  _QWORD v12[5];

  v12[3] = a4;
  v12[4] = a5;
  v12[0] = swift_allocObject();
  a7(a1, v12[0] + 16);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 104))(v12, a2, a3);
  return sub_1A39A47C4((uint64_t)v12);
}

uint64_t TTSMarkupVisitor.visit(_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[5];

  v7[3] = &type metadata for TTSMarkup.GenericSpeechElement;
  v7[4] = &protocol witness table for TTSMarkup.GenericSpeechElement;
  v7[0] = swift_allocObject();
  sub_1A3A3789C(a1, v7[0] + 16);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 104))(v7, a2, a3);
  return sub_1A39A47C4((uint64_t)v7);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = a1[3];
  v7 = a1[4];
  sub_1A39A19CC(a1, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 80))(v3, a2, a3, v6, v7);
}

uint64_t TTSMarkupVisitor.visitChildren(_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v6 = a1[3];
  v7 = a1[4];
  sub_1A39A19CC(a1, v6);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v7 + 24))(&v11, v6, v7);
  if (!v12)
    return sub_1A39BFB74((uint64_t)&v11);
  sub_1A39A1AB8(&v11, (uint64_t)v13);
  v8 = v14;
  v9 = v15;
  sub_1A39A19CC(v13, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 80))(v3, a2, a3, v8, v9);
  return sub_1A39A47C4((uint64_t)v13);
}

uint64_t sub_1A3A912E0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A9130C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A91340()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 56))
    sub_1A39A47C4(v0 + 32);
  return swift_deallocObject();
}

uint64_t sub_1A3A91374()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A913A8()
{
  return sub_1A39C4864();
}

uint64_t sub_1A3A913B0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 32);
  return swift_deallocObject();
}

uint64_t sub_1A3A913DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 56);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A91420()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 24);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A91454()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 72))
    sub_1A39A47C4(v0 + 48);
  return swift_deallocObject();
}

uint64_t dispatch thunk of TTSMarkupVisitor.visit(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of TTSMarkupVisitor.visitAnyElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t TTSMarkup.Mark.init(_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8))();
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_1A39A2734(1701667182, 0xE400000000000000), (v6 & 1) != 0))
  {
    v7 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
    v9 = *v7;
    v8 = v7[1];
    swift_bridgeObjectRetain();

    result = swift_bridgeObjectRelease();
    *a2 = MEMORY[0x1E0DEE9D8];
    a2[1] = v9;
    a2[2] = v8;
  }
  else
  {

    result = swift_bridgeObjectRelease();
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

void static TTSMarkup.Mark.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t TTSMarkup.Mark.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Mark.eventTaps.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.Mark.eventTaps.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

unint64_t TTSMarkup.Mark.attributes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = *(_QWORD *)(v0 + 16);
  sub_1A39A4820(&qword_1EE6D2368);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(inited + 32) = 1701667182;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v1;
  swift_bridgeObjectRetain();
  return sub_1A39A5780(inited);
}

uint64_t TTSMarkup.Mark.init(named:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = MEMORY[0x1E0DEE9D8];
  a3[1] = result;
  a3[2] = a2;
  return result;
}

double TTSMarkup.Mark.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v6 = sub_1A3A29694(5);
  v8 = v7;
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v6;
  v9[3] = v8;
  v9[4] = a1;
  v9[5] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  TTSMarkupSpeech.marker(_:)((uint64_t)sub_1A3A9186C, (uint64_t)v9, (uint64_t)&type metadata for TTSMarkup.Mark, (uint64_t)&protocol witness table for TTSMarkup.Mark, (uint64_t)&v12);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(double *)&v12;
  v11 = v13;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v11;
  return result;
}

uint64_t TTSMarkup.Mark.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v4 = *((_QWORD *)v3 + 2);
  v6 = *v3;
  v7 = v4;
  return (*(uint64_t (**)(__int128 *))(a3 + 48))(&v6);
}

void sub_1A3A917B8(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

unint64_t sub_1A3A917C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = *(_QWORD *)(v0 + 16);
  sub_1A39A4820(&qword_1EE6D2368);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(inited + 32) = 1701667182;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v1;
  swift_bridgeObjectRetain();
  return sub_1A39A5780(inited);
}

uint64_t sub_1A3A91840()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A3A9186C(uint64_t result)
{
  _QWORD *v1;
  uint64_t (*v2)(void);

  if (*(_BYTE *)(result + 16) == 3)
  {
    v2 = (uint64_t (*)(void))v1[4];
    if (*(_QWORD *)result == v1[2] && *(_QWORD *)(result + 8) == v1[3])
      return v2();
    result = sub_1A3AB5654();
    if ((result & 1) != 0)
      return v2();
  }
  return result;
}

uint64_t _s4MarkVwxx()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s4MarkVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s4MarkVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *_s4MarkVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s4MarkVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s4MarkVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Mark()
{
  return &type metadata for TTSMarkup.Mark;
}

uint64_t _pcre2_script_run_8(unsigned __int8 *a1, unint64_t a2, int a3)
{
  unsigned int v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  int v12;
  int v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t i;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _BYTE v27[24];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)a1 < a2)
  {
    v4 = a1 + 1;
    v3 = *a1;
    if (a3 && v3 >= 0xC0)
    {
      if ((v3 & 0x20) != 0)
      {
        v5 = *v4 & 0x3F;
        if ((v3 & 0x10) != 0)
        {
          if ((v3 & 8) != 0)
          {
            v6 = a1[2] & 0x3F;
            v7 = a1[3] & 0x3F;
            v8 = a1[4] & 0x3F;
            if ((v3 & 4) != 0)
            {
              v3 = ((v3 & 1) << 30) | (v5 << 24) | (v6 << 18) | (v7 << 12) | (v8 << 6) | a1[5] & 0x3F;
              v4 = a1 + 6;
            }
            else
            {
              v3 = ((v3 & 3) << 24) | (v5 << 18) | (v6 << 12) | (v7 << 6) | v8;
              v4 = a1 + 5;
            }
          }
          else
          {
            v3 = ((v3 & 7) << 18) | (v5 << 12) | ((a1[2] & 0x3F) << 6) | a1[3] & 0x3F;
            v4 = a1 + 4;
          }
        }
        else
        {
          v3 = ((v3 & 0xF) << 12) | (v5 << 6) | a1[2] & 0x3F;
          v4 = a1 + 3;
        }
      }
      else
      {
        v4 = a1 + 2;
        v3 = a1[1] & 0x3F | ((v3 & 0x1F) << 6);
      }
    }
    if ((unint64_t)v4 < a2)
    {
      v28 = 0uLL;
      v29 = 0;
      v9 = _pcre2_ucd_stage2_8[v3 & 0x7F | (_pcre2_ucd_stage1_8[v3 >> 7] << 7)];
      v10 = *((unsigned __int8 *)&_pcre2_ucd_records_8 + 12 * v9);
      if (v10 == 68)
        return 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        if ((*((_WORD *)&_pcre2_ucd_records_8 + 6 * v9 + 4) & 0x3FF) != 0
          || v10 != 69 && v10 != 84)
        {
          v14 = (char *)&_pcre2_ucd_script_sets_8 + 4 * (*((_WORD *)&_pcre2_ucd_records_8 + 6 * v9 + 4) & 0x3FF);
          *(_QWORD *)v27 = *(_QWORD *)v14;
          *(_DWORD *)&v27[8] = *((_DWORD *)v14 + 2);
          *(_QWORD *)&v27[12] = 0;
          *(_DWORD *)&v27[20] = 0;
          if (v10 != 69 && v10 != 84)
            *(_DWORD *)&v27[4 * (v10 >> 5)] |= 1 << v10;
          switch(v13)
          {
            case 0:
              v15 = v10 - 18;
              if (v15 < 6 && ((0x3Du >> v15) & 1) != 0)
                goto LABEL_48;
              v28 = *(_OWORD *)v27;
              v29 = *(_QWORD *)&v27[16];
              goto LABEL_47;
            case 1:
              v16 = 0;
              while ((*(_DWORD *)&v27[v16] & *(_DWORD *)((_BYTE *)&v28 + v16)) == 0)
              {
                v16 += 4;
                if (v16 == 24)
                  return 0;
              }
              v15 = v10 - 18;
              if (v15 < 6 && ((0x3Du >> v15) & 1) != 0)
              {
LABEL_48:
                v13 = dword_1A3AC9B2C[(char)v15];
              }
              else
              {
                for (i = 0; i != 24; i += 4)
                  *(_DWORD *)((char *)&v28 + i) &= *(_DWORD *)&v27[i];
LABEL_47:
                v13 = 1;
              }
              break;
            case 2:
              if (v10 == 23)
                goto LABEL_36;
              result = (*(_DWORD *)v27 >> 19) & 6 | (*(_DWORD *)v27 >> 22) & 1 | (*(_DWORD *)v27 >> 15) & 8u;
              switch((_DWORD)result)
              {
                case 1:
LABEL_40:
                  v13 = 4;
                  break;
                case 6:
LABEL_38:
                  v13 = 3;
                  break;
                case 0:
                  return result;
                default:
LABEL_36:
                  v13 = 2;
                  break;
              }
              break;
            case 3:
              if ((v27[2] & 0xB0) == 0)
                return 0;
              goto LABEL_38;
            case 4:
              if ((v27[2] & 0xC0) == 0)
                return 0;
              goto LABEL_40;
            case 5:
              if ((v27[2] & 0x84) == 0)
                return 0;
              v13 = 5;
              break;
            default:
              break;
          }
        }
        if (*((_BYTE *)&_pcre2_ucd_records_8 + 12 * v9 + 1) == 13)
        {
          if (v3 <= 0x39)
          {
            v18 = 1;
            if (v12)
              goto LABEL_59;
          }
          else
          {
            v18 = 66;
            v19 = 1;
            do
            {
              v20 = v18 + v19;
              if (v18 + v19 < 0 != __OFADD__(v18, v19))
                ++v20;
              v21 = v20 >> 1;
              if (v3 <= _pcre2_ucd_digit_sets_8[v21])
                v18 = v21;
              else
                v19 = v21;
            }
            while (v18 > v19 + 1);
            if (v12)
            {
LABEL_59:
              if (v18 != v12)
                return 0;
              goto LABEL_63;
            }
          }
          v12 = v18;
        }
LABEL_63:
        if ((unint64_t)v4 >= a2)
          return 1;
        v22 = v4 + 1;
        v3 = *v4;
        if (a3 && v3 >= 0xC0)
        {
          if ((v3 & 0x20) != 0)
          {
            v23 = *v22 & 0x3F;
            if ((v3 & 0x10) != 0)
            {
              if ((v3 & 8) != 0)
              {
                v24 = v4[2] & 0x3F;
                v25 = v4[3] & 0x3F;
                v26 = v4[4] & 0x3F;
                if ((v3 & 4) != 0)
                {
                  v3 = ((v3 & 1) << 30) | (v23 << 24) | (v24 << 18) | (v25 << 12) | (v26 << 6) | v4[5] & 0x3F;
                  v22 = v4 + 6;
                }
                else
                {
                  v3 = ((v3 & 3) << 24) | (v23 << 18) | (v24 << 12) | (v25 << 6) | v26;
                  v22 = v4 + 5;
                }
              }
              else
              {
                v3 = ((v3 & 7) << 18) | (v23 << 12) | ((v4[2] & 0x3F) << 6) | v4[3] & 0x3F;
                v22 = v4 + 4;
              }
            }
            else
            {
              v3 = ((v3 & 0xF) << 12) | (v23 << 6) | v4[2] & 0x3F;
              v22 = v4 + 3;
            }
          }
          else
          {
            v22 = v4 + 2;
            v3 = v4[1] & 0x3F | ((v3 & 0x1F) << 6);
          }
        }
        result = 0;
        v9 = _pcre2_ucd_stage2_8[v3 & 0x7F | (_pcre2_ucd_stage1_8[v3 >> 7] << 7)];
        v10 = *((unsigned __int8 *)&_pcre2_ucd_records_8 + 12 * v9);
        v4 = v22;
        if (v10 == 68)
          return result;
      }
    }
  }
  return 1;
}

_QWORD *pcre2_code_copy_8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (!a1)
    return 0;
  v2 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))a1)(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 16));
  v3 = v2;
  if (v2)
  {
    memcpy(v2, (const void *)a1, *(_QWORD *)(a1 + 72));
    v3[4] = 0;
    if ((*(_BYTE *)(a1 + 98) & 4) != 0)
      ++*(_QWORD *)(*(_QWORD *)(a1 + 24) + 1088);
  }
  return v3;
}

_QWORD *pcre2_code_copy_with_tables_8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  if (!a1)
    return 0;
  v2 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))a1)(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 16));
  v3 = v2;
  if (v2)
  {
    memcpy(v2, (const void *)a1, *(_QWORD *)(a1 + 72));
    v3[4] = 0;
    v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))a1)(1096, *(_QWORD *)(a1 + 16));
    if (v4)
    {
      v5 = v4;
      memcpy(v4, *(const void **)(a1 + 24), 0x440uLL);
      v5[136] = 1;
      v3[3] = v5;
      *((_DWORD *)v3 + 24) |= 0x40000u;
      return v3;
    }
    (*(void (**)(_QWORD *, _QWORD))(a1 + 8))(v3, *(_QWORD *)(a1 + 16));
    return 0;
  }
  return v3;
}

uint64_t pcre2_code_free_8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 32);
    if (v2)
      _pcre2_jit_free_8(v2, v1);
    if ((*(_BYTE *)(v1 + 98) & 4) != 0)
    {
      v3 = *(_QWORD *)(v1 + 24);
      v4 = *(_QWORD *)(v3 + 1088);
      if (v4)
      {
        v5 = v4 - 1;
        *(_QWORD *)(v3 + 1088) = v5;
        if (!v5)
          (*(void (**)(void))(v1 + 8))();
      }
    }
    return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v1, *(_QWORD *)(v1 + 16));
  }
  return result;
}

uint64_t _pcre2_check_escape_8(unsigned __int8 **a1, unint64_t a2, int *a3, int *a4, unsigned int a5, char a6, int a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v13;
  unsigned __int8 *v14;
  uint64_t result;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _BOOL4 v22;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  _BOOL4 v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  unsigned __int8 *v65;
  int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;

  v9 = *a1;
  if ((unint64_t)*a1 >= a2)
  {
    result = 0;
    v16 = 101;
    goto LABEL_7;
  }
  v14 = v9 + 1;
  v13 = *v9;
  v68 = v9 + 1;
  if ((a5 & 0x80000) != 0 && v13 >= 0xC0)
  {
    if ((v13 & 0x20) != 0)
    {
      v17 = *v14 & 0x3F;
      if ((v13 & 0x10) != 0)
      {
        if ((v13 & 8) != 0)
        {
          v18 = v9[2] & 0x3F;
          v19 = v9[3] & 0x3F;
          v20 = v9[4] & 0x3F;
          if ((v13 & 4) != 0)
          {
            v13 = ((v13 & 1) << 30) | (v17 << 24) | (v18 << 18) | (v19 << 12) | (v20 << 6) | v9[5] & 0x3F;
            v14 = v9 + 6;
          }
          else
          {
            v13 = ((v13 & 3) << 24) | (v17 << 18) | (v18 << 12) | (v19 << 6) | v20;
            v14 = v9 + 5;
          }
        }
        else
        {
          v13 = ((v13 & 7) << 18) | (v17 << 12) | ((v9[2] & 0x3F) << 6) | v9[3] & 0x3F;
          v14 = v9 + 4;
        }
      }
      else
      {
        v13 = ((v13 & 0xF) << 12) | (v17 << 6) | v9[2] & 0x3F;
        v14 = v9 + 3;
      }
      v68 = v14;
    }
    else
    {
      v14 = v9 + 2;
      v68 = v9 + 2;
      v13 = v9[1] & 0x3F | ((v13 & 0x1F) << 6);
    }
  }
  *a4 = 0;
  if ((v13 - 123) < 0xFFFFFFB5)
    goto LABEL_17;
  v21 = *(__int16 *)&algn_1A3AC9E45[2 * (v13 - 48) + 1];
  if (*(_WORD *)&algn_1A3AC9E45[2 * (v13 - 48) + 1])
  {
    if (v21 >= 1)
    {
      if (v13 == 114)
      {
        result = 0;
        if ((a6 & 0x10) != 0)
          v13 = 10;
        else
          v13 = 13;
      }
      else
      {
        result = 0;
        v13 = *(__int16 *)&algn_1A3AC9E45[2 * (v13 - 48) + 1];
      }
      goto LABEL_18;
    }
    result = -v21;
    if (a8)
    {
      if (v13 > 87)
      {
        if (v13 != 112 && v13 != 88)
          goto LABEL_18;
LABEL_66:
        *(_DWORD *)(a8 + 208) |= 0x100000u;
        goto LABEL_18;
      }
      if (v13 != 78)
      {
        if (v13 != 80)
          goto LABEL_18;
        goto LABEL_66;
      }
    }
    else if (v13 != 78)
    {
      goto LABEL_18;
    }
    if ((unint64_t)v14 >= a2 || *v14 != 123)
    {
LABEL_103:
      result = 12;
      v13 = 78;
      goto LABEL_18;
    }
    v67 = v14 + 1;
    if ((uint64_t)(a2 - (_QWORD)(v14 + 1)) < 2 || v14[1] != 85 || (v30 = v14[2], v14 += 2, v30 != 43))
    {
      if (sub_1A3A92B64((unint64_t *)&v67, a2, 0, 0, a4) || *a4)
        goto LABEL_103;
      v31 = 137;
      goto LABEL_102;
    }
    if ((a5 & 0x80000) == 0)
    {
      v31 = 193;
LABEL_102:
      *a4 = v31;
      goto LABEL_103;
    }
    goto LABEL_134;
  }
  v66 = 0;
  v22 = (a6 & 0x20 | a5 & 2) != 0;
  if (!a8)
  {
    if ((v13 - 99) <= 0x15 && ((1 << (v13 - 99)) & 0x201001) != 0)
    {
      v22 = 0;
      goto LABEL_31;
    }
    result = 0;
    v16 = 103;
LABEL_7:
    *a4 = v16;
    return result;
  }
LABEL_31:
  if (v13 <= 84)
  {
    switch(v13)
    {
      case '0':
        goto LABEL_112;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (a7)
          goto LABEL_111;
        v24 = v14 - 1;
        v68 = v14 - 1;
        *a4 = 0;
        if ((unint64_t)(v14 - 1) >= a2)
          goto LABEL_110;
        v25 = *v24;
        if (v25 - 48 > 9)
          goto LABEL_110;
        v26 = 0;
        break;
      case 'F':
      case 'L':
        goto LABEL_72;
      default:
        goto LABEL_104;
    }
    while ((unint64_t)v24 < a2)
    {
      v27 = *v24;
      if ((v27 - 48) > 9)
        break;
      ++v24;
      v26 = v27 + 10 * v26 - 48;
      if (v26 > 0xCCCCCCB)
        goto LABEL_110;
    }
    v68 = v24;
    if (v26 >= 0xA)
    {
      if (v25 <= 0x37 && (signed int)v26 > *(_DWORD *)(a8 + 212))
      {
LABEL_110:
        v68 = v14;
LABEL_111:
        if (v13 <= 0x37)
        {
LABEL_112:
          v41 = 0;
          v13 -= 48;
          v42 = v14;
          while ((unint64_t)&v14[v41] < a2)
          {
            v43 = v14[v41];
            if ((v43 & 0xF8) != 0x30)
            {
              v42 = &v14[v41];
              break;
            }
            ++v42;
            v13 = v43 + 8 * v13 - 48;
            if ((_DWORD)++v41 == 2)
            {
              v42 = v14 + 2;
              break;
            }
          }
          result = 0;
          v68 = v42;
          if ((a5 & 0x80000) == 0 && v13 >= 0x100)
          {
            result = 0;
            v32 = 151;
            goto LABEL_121;
          }
          goto LABEL_18;
        }
LABEL_17:
        result = 0;
        goto LABEL_18;
      }
      if (v26 >= 0x10000)
      {
        result = 0;
        v32 = 161;
        goto LABEL_121;
      }
    }
    result = -v26;
    goto LABEL_18;
  }
  if (v13 > 107)
  {
    if (v13 <= 116)
    {
      if (v13 == 108)
      {
LABEL_72:
        result = 0;
        v32 = 137;
        goto LABEL_121;
      }
      if (v13 == 111)
      {
        if ((unint64_t)v14 < a2 && (v28 = *v14, ++v14, v68 = v14, v28 == 123))
        {
          if ((unint64_t)v14 < a2 && *v14 != 125)
          {
            v13 = 0;
            if ((a5 & 0x80000) != 0)
              v52 = 1114111;
            else
              v52 = 255;
            v53 = a2 - (_QWORD)v14;
            do
            {
              v54 = *v14;
              if ((v54 & 0xF8) != 0x30)
                goto LABEL_165;
              if (v13 || v54 != 48)
              {
                v13 = v54 + 8 * v13 - 48;
                if (v13 > v52)
                {
                  v65 = v14 + 1;
                  v68 = v65;
                  if ((unint64_t)v65 >= a2)
                    goto LABEL_231;
                  do
                  {
                    if ((*v65 & 0xF8) != 0x30)
                      goto LABEL_231;
                    ++v65;
                  }
                  while ((unint64_t)v65 < a2);
LABEL_230:
                  v65 = (unsigned __int8 *)a2;
LABEL_231:
                  result = 0;
                  v68 = v65;
                  v32 = 134;
                  goto LABEL_121;
                }
              }
              else
              {
                v13 = 0;
              }
              ++v14;
              --v53;
            }
            while (v53);
            v14 = (unsigned __int8 *)a2;
LABEL_165:
            if ((unint64_t)v14 >= a2)
            {
              v55 = v14;
            }
            else
            {
              v55 = v14 + 1;
              v68 = v14 + 1;
              if (*v14 == 125)
              {
                result = 0;
                if ((a5 & 0x80000) == 0 || (a6 & 1) != 0 || (v13 & 0xFFFFF800) != 0xD800)
                  goto LABEL_18;
LABEL_195:
                result = 0;
                v68 = v14;
                v32 = 173;
                goto LABEL_121;
              }
            }
            result = 0;
            v68 = v55 - 1;
            v32 = 164;
            goto LABEL_121;
          }
          result = 0;
          v29 = 178;
        }
        else
        {
          result = 0;
          v68 = v14 - 1;
          v29 = 155;
        }
        *a4 = v29;
        v13 = 111;
        goto LABEL_18;
      }
      goto LABEL_104;
    }
    if (v13 != 117)
    {
      if (v13 == 120)
      {
        if (!v22)
        {
          if ((unint64_t)v14 >= a2)
            goto LABEL_153;
          v45 = *v14;
          if (v45 == 123)
          {
LABEL_134:
            v68 = ++v14;
            if ((unint64_t)v14 < a2 && *v14 != 125)
            {
              v13 = 0;
              v56 = a2 - (_QWORD)v14;
              do
              {
                v57 = *v14;
                v58 = byte_1A3AC9EDC[v57];
                if (v58 == 255)
                  goto LABEL_189;
                if (v13 || (_DWORD)v57 != 48)
                {
                  v13 = v58 | (16 * v13);
                  v60 = (a5 & 0x80000) == 0 && v13 > 0xFF;
                  if (((v13 > 0x10FFFF) & (a5 >> 19)) != 0 || v60)
                  {
                    v65 = v14 + 1;
                    v68 = v65;
                    if ((unint64_t)v65 < a2)
                    {
                      while (byte_1A3AC9EDC[*v65] != 255)
                      {
                        if ((unint64_t)++v65 >= a2)
                          goto LABEL_230;
                      }
                    }
                    goto LABEL_231;
                  }
                }
                else
                {
                  v13 = 0;
                }
                ++v14;
                --v56;
              }
              while (v56);
              v14 = (unsigned __int8 *)a2;
LABEL_189:
              if ((unint64_t)v14 >= a2)
              {
                v61 = v14;
              }
              else
              {
                v61 = v14 + 1;
                v68 = v14 + 1;
                if (*v14 == 125)
                {
                  result = 0;
                  if ((a6 & 1) != 0
                    || (a5 & 0x80000) == 0
                    || v13 >> 11 < 0x1B
                    || v13 >> 13 > 6)
                  {
                    goto LABEL_18;
                  }
                  goto LABEL_195;
                }
              }
              result = 0;
              v68 = v61 - 1;
              v32 = 167;
              goto LABEL_121;
            }
            result = 0;
            v32 = 178;
LABEL_121:
            *a4 = v32;
            goto LABEL_18;
          }
          v13 = byte_1A3AC9EDC[v45];
          if (v13 == 255)
          {
LABEL_153:
            v13 = 0;
          }
          else
          {
            v68 = v14 + 1;
            if ((unint64_t)(v14 + 1) < a2)
            {
              v51 = byte_1A3AC9EDC[v14[1]];
              if (v51 != 255)
              {
                result = 0;
                v68 = v14 + 2;
                v13 = v51 | (16 * v13);
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        if ((uint64_t)(a2 - (_QWORD)v14) < 2
          || (v33 = byte_1A3AC9EDC[*v14], v33 == 255)
          || (v34 = byte_1A3AC9EDC[v14[1]], v34 == 255))
        {
          result = 0;
          v13 = 120;
          goto LABEL_18;
        }
        result = 0;
        v13 = v34 | (16 * v33);
        v35 = v14 + 2;
LABEL_139:
        v68 = v35;
        goto LABEL_18;
      }
      goto LABEL_104;
    }
    if (v22)
    {
      if ((unint64_t)v14 < a2)
      {
        v36 = *v14;
        if ((a6 & 0x20) != 0 && (_DWORD)v36 == 123)
        {
          if ((unint64_t)(v14 + 1) < a2)
          {
            v37 = 0;
            v38 = 0;
            while (1)
            {
              v39 = &v14[v37];
              v40 = byte_1A3AC9EDC[v14[v37 + 1]];
              if (v40 == 255)
                break;
              if (v38 >> 28)
              {
                *a4 = 177;
                v62 = &v14[v37 + 1];
                v68 = v62;
                goto LABEL_198;
              }
              result = 0;
              v38 = v40 | (16 * v38);
              ++v37;
              v13 = 117;
              if (~(unint64_t)v14 + a2 == v37)
                goto LABEL_18;
            }
            v62 = v14;
LABEL_198:
            if (v39 != v62 && v39[1] == 125)
            {
              v50 = &v14[v37 + 2];
LABEL_201:
              v68 = v50;
              if ((a5 & 0x80000) != 0)
              {
                if (v38 < 0x110000)
                {
                  result = 0;
                  if ((a6 & 1) != 0 || (v38 & 0xFFFFF800) != 0xD800)
                    goto LABEL_233;
                  result = 0;
                  v63 = 173;
                  goto LABEL_221;
                }
              }
              else if (v38 < 0x100)
              {
                result = 0;
                goto LABEL_233;
              }
              result = 0;
              v63 = 177;
LABEL_221:
              *a4 = v63;
LABEL_233:
              v13 = v38;
              goto LABEL_18;
            }
          }
        }
        else if ((uint64_t)(a2 - (_QWORD)v14) >= 4)
        {
          v46 = byte_1A3AC9EDC[v36];
          if (v46 != 255)
          {
            v47 = byte_1A3AC9EDC[v14[1]];
            if (v47 != 255)
            {
              v48 = byte_1A3AC9EDC[v14[2]];
              if (v48 != 255)
              {
                v49 = byte_1A3AC9EDC[v14[3]];
                if (v49 != 255)
                {
                  v38 = v49 | (16 * ((16 * v47) | (v46 << 8) | v48));
                  v50 = v14 + 4;
                  goto LABEL_201;
                }
              }
            }
          }
        }
      }
      result = 0;
    }
    else
    {
      result = 0;
      *a4 = 137;
    }
    v13 = 117;
    goto LABEL_18;
  }
  switch(v13)
  {
    case 'U':
      result = 0;
      if (!v22)
        *a4 = 137;
      v13 = 85;
      goto LABEL_18;
    case 'c':
      if ((unint64_t)v14 >= a2)
      {
        result = 0;
        *a4 = 102;
        v13 = 99;
        goto LABEL_18;
      }
      v13 = *v14;
      if ((v13 - 97) < 0x1A)
        v13 -= 32;
      if ((v13 - 127) <= 0xFFFFFFA0)
      {
        result = 0;
        v32 = 168;
        goto LABEL_121;
      }
      result = 0;
      v13 ^= 0x40u;
      v35 = v14 + 1;
      goto LABEL_139;
    case 'g':
      if (a7)
      {
LABEL_71:
        result = 0;
LABEL_216:
        v13 = 103;
        goto LABEL_18;
      }
      if ((unint64_t)v14 >= a2)
        goto LABEL_214;
      v44 = *v14;
      result = 27;
      v13 = 103;
      if (v44 != 39 && v44 != 60)
      {
        if (v44 == 123)
        {
          v67 = v14 + 1;
          if (!sub_1A3A92CE0(&v67, a2, *(_DWORD *)(a8 + 212), 0xFFFFu, 161, &v66, a4))
          {
            if (*a4)
              result = 0;
            else
              result = 28;
            goto LABEL_216;
          }
          if ((unint64_t)v67 < a2 && *v67 == 125)
          {
            v68 = v67 + 1;
LABEL_172:
            if (v66 > 0)
            {
              result = -v66;
              goto LABEL_216;
            }
            result = 0;
            v64 = 115;
LABEL_215:
            *a4 = v64;
            goto LABEL_216;
          }
        }
        else
        {
          if (sub_1A3A92CE0(&v68, a2, *(_DWORD *)(a8 + 212), 0xFFFFu, 161, &v66, a4))
            goto LABEL_172;
          if (*a4)
            goto LABEL_71;
        }
LABEL_214:
        result = 0;
        v64 = 157;
        goto LABEL_215;
      }
LABEL_18:
      *a1 = v68;
      *a3 = v13;
      return result;
  }
LABEL_104:
  result = 0;
  *a4 = 103;
  *a1 = v14 - 1;
  return result;
}

uint64_t sub_1A3A92B64(unint64_t *a1, unint64_t a2, unsigned int *a3, unsigned int *a4, int *a5)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v13;
  int v14;
  int v16;
  int v17;

  v5 = 0;
  *a5 = 0;
  v6 = (unsigned __int8 *)*a1;
  if (*a1 >= a2)
    return v5;
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v9 = v6[v7];
    if ((v9 - 48) >= 0xA)
      break;
LABEL_7:
    if (a2 - (_QWORD)v6 == ++v7)
      return 0;
  }
  if (v9 == 44)
  {
    if (v8)
      return 0;
    v8 = 1;
    goto LABEL_7;
  }
  if (v9 != 125)
    return 0;
  if (*v6 - 48 > 9)
  {
    v5 = 0;
  }
  else
  {
    v10 = 0;
    ++v6;
    while (1)
    {
      v11 = *(v6 - 1);
      if ((unint64_t)(v6 - 1) >= a2 || (v11 - 48) > 9)
        break;
      v10 = v11 + 10 * v10 - 48;
      ++v6;
      if (v10 >= 0x10000)
      {
        v5 = 0;
        *a5 = 105;
        --v6;
        goto LABEL_29;
      }
    }
    if (v11 == 125)
    {
      --v6;
      v13 = v10;
      goto LABEL_24;
    }
    v14 = *v6;
    if (v14 == 125)
    {
      v13 = 0x10000;
LABEL_24:
      ++v6;
      if (a3)
        *a3 = v10;
      if (a4)
        *a4 = v13;
      v5 = 1;
    }
    else
    {
      v5 = 0;
      if ((unint64_t)v6 < a2 && (v14 - 48) <= 9)
      {
        v13 = 0;
        while ((unint64_t)v6 < a2)
        {
          v16 = *v6;
          if ((v16 - 48) > 9)
            break;
          ++v6;
          v13 = v16 + 10 * v13 - 48;
          if (v13 >= 0x10000)
          {
            v5 = 0;
            v17 = 105;
            goto LABEL_40;
          }
        }
        if (v13 >= v10)
          goto LABEL_24;
        v5 = 0;
        v17 = 104;
LABEL_40:
        *a5 = v17;
      }
    }
  }
LABEL_29:
  *a1 = (unint64_t)v6;
  return v5;
}

uint64_t sub_1A3A92CE0(unsigned __int8 **a1, unint64_t a2, int a3, unsigned int a4, int a5, int *a6, int *a7)
{
  BOOL v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  _BOOL4 v11;
  unsigned __int8 *v12;
  BOOL v13;
  _BOOL4 v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;

  v7 = 0;
  v8 = *a1;
  *a7 = 0;
  if (a3 < 0 || (unint64_t)v8 >= a2)
  {
    v14 = 0;
  }
  else
  {
    v9 = *v8;
    v10 = a4 - a3;
    if (v9 != 43)
      v10 = a4;
    v11 = v9 == 43;
    if (v9 == 43)
      v12 = v8 + 1;
    else
      v12 = v8;
    v13 = v9 == 45;
    if (v9 == 45)
    {
      v7 = 1;
    }
    else
    {
      a4 = v10;
      v7 = v9 == 43;
    }
    v14 = !v13 && v11;
    if (v13)
      ++v8;
    else
      v8 = v12;
  }
  if ((unint64_t)v8 < a2 && *v8 - 48 <= 9)
  {
    v15 = 0;
    while ((unint64_t)v8 < a2)
    {
      v16 = *v8;
      if ((v16 - 48) > 9)
        break;
      ++v8;
      v15 = v16 + 10 * v15 - 48;
      if (v15 > a4)
      {
        v17 = 0;
        *a7 = a5;
        goto LABEL_38;
      }
    }
    v18 = !v7;
    if (a3 < 0)
      v18 = 1;
    if ((v18 & 1) != 0)
      goto LABEL_37;
    if (v15)
    {
      if (v14)
      {
        v15 += a3;
LABEL_37:
        v17 = 1;
        goto LABEL_38;
      }
      if (v15 <= a3)
      {
        v15 = a3 - v15 + 1;
        goto LABEL_37;
      }
      v17 = 0;
      v19 = 115;
    }
    else
    {
      v17 = 0;
      v19 = 126;
    }
    *a7 = v19;
LABEL_38:
    *a6 = v15;
    *a1 = v8;
    return v17;
  }
  return 0;
}

uint64_t pcre2_compile_8(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  unsigned int v3;
  int *v4;
  _QWORD *v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  int v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned __int8 *v44;
  __int128 *v45;
  uint64_t v46;
  char v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  int v65;
  unsigned __int8 *v66;
  unint64_t v67;
  BOOL v68;
  unint64_t v69;
  int v70;
  unsigned __int8 *v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned __int8 *v75;
  unsigned int v76;
  int v77;
  _OWORD *v78;
  int v79;
  uint64_t v80;
  unsigned __int8 *bracket_8;
  _OWORD *v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  char *v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  __int16 v107;
  int v108;
  int v109;
  __int16 v110;
  unsigned __int8 *v111;
  __int128 *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned int *v117;
  unsigned __int8 *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _QWORD v124[12];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _DWORD v131[8];
  int v132;
  _DWORD v133[32];
  _BYTE v134[12000];
  uint64_t v135;
  _BYTE v136[4096];
  _QWORD v137[131];

  v1 = (unsigned __int8 *)MEMORY[0x1E0C80A78](a1);
  v7 = 0;
  v137[128] = *MEMORY[0x1E0C80C00];
  v116 = 1;
  v117 = 0;
  v132 = 0;
  v118 = 0;
  v114 = 0;
  v115 = 0;
  if (!v4)
    return v7;
  v8 = v5;
  if (!v5)
    return v7;
  v9 = v4;
  v10 = v1;
  *v4 = 100;
  *v5 = 0;
  if (!v1)
  {
    v7 = 0;
    v15 = 116;
    goto LABEL_14;
  }
  v11 = v3;
  if (v6)
    v12 = v6;
  else
    v12 = &_pcre2_default_compile_context_8;
  if ((v3 & 0x18000000) != 0 || (v13 = *((_DWORD *)v12 + 16), v13 >= 0x80))
  {
    v7 = 0;
    v15 = 117;
    goto LABEL_14;
  }
  v14 = v2;
  if ((v3 & 0x2000000) != 0 && v13 & 0xFFFFFFF3 | v3 & 0x1976FEF3)
  {
    v7 = 0;
    v15 = 192;
LABEL_14:
    *v9 = v15;
    return v7;
  }
  if (v2 == -1)
    v14 = _pcre2_strlen_8(v1);
  if (v14 > *((_QWORD *)v12 + 6))
  {
    v7 = 0;
    v15 = 188;
    goto LABEL_14;
  }
  memset(v131, 0, sizeof(v131));
  v17 = (v11 >> 7) & 0x80000 | v11;
  v129 = 0u;
  v130 = 0u;
  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  memset(v124, 0, sizeof(v124));
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  if (*((_QWORD *)v12 + 5))
    v18 = (char *)*((_QWORD *)v12 + 5);
  else
    v18 = (char *)&_pcre2_default_tables_8;
  *(_QWORD *)&v120 = v18 + 256;
  *((_QWORD *)&v120 + 1) = v18 + 512;
  v101 = v18;
  *(_QWORD *)&v119 = v12;
  *((_QWORD *)&v119 + 1) = v18;
  *(_QWORD *)&v129 = v137;
  *(_QWORD *)&v131[5] = 0;
  *(_QWORD *)&v126 = &v135;
  HIDWORD(v126) = (v11 >> 7) & 0x80000 | v11;
  DWORD2(v126) = 20;
  *(_QWORD *)&v128 = v136;
  v124[11] = 0;
  *(_QWORD *)&v127 = 0;
  DWORD2(v127) = 0;
  v123 = (unint64_t)&v10[v14];
  v125 = 0uLL;
  *(_QWORD *)&v131[1] = 0;
  *(_QWORD *)&v122 = v134;
  *((_QWORD *)&v122 + 1) = v10;
  *(_QWORD *)&v121 = v18 + 832;
  *((_QWORD *)&v121 + 1) = v134;
  v124[0] = 6000;
  *((_QWORD *)&v129 + 1) = 0;
  *(_QWORD *)&v19 = -1;
  *((_QWORD *)&v19 + 1) = -1;
  *(_OWORD *)&v124[1] = v19;
  *(_OWORD *)&v124[3] = v19;
  *(_OWORD *)&v124[5] = v19;
  *(_OWORD *)&v124[7] = v19;
  *(_OWORD *)&v124[9] = v19;
  v112 = v12;
  if ((v11 & 0x2000000) != 0 || (v20 = v14 - 2, v14 < 2))
  {
    v25 = 0;
    LODWORD(v40) = 0;
    v23 = 0;
    v22 = 0;
    v102 = -1;
    v103 = -1;
    v104 = -1;
LABEL_63:
    v41 = &v10[v40];
    v42 = HIDWORD(v126);
    if ((HIDWORD(v126) & 0x80000) != 0)
    {
      if ((v11 & 0x1000) != 0)
      {
        v7 = 0;
        LODWORD(v44) = 174;
        goto LABEL_78;
      }
      v43 = HIDWORD(v126);
      if ((v11 & 0x40000000) == 0)
      {
        v98 = v25;
        v106 = v22;
        v109 = v23;
        LODWORD(v44) = _pcre2_valid_utf_8(v10, v14, v8);
        v113 = (int)v44;
        if ((_DWORD)v44)
        {
          v7 = 0;
          v45 = v112;
          goto LABEL_102;
        }
        v43 = HIDWORD(v126);
        v42 = HIDWORD(v126);
        v25 = v98;
        v22 = v106;
        v23 = v109;
      }
    }
    else
    {
      v43 = HIDWORD(v126);
    }
    if ((~v43 & 0x20800) == 0)
    {
      v7 = 0;
      LODWORD(v44) = 175;
LABEL_78:
      v113 = (int)v44;
      goto LABEL_79;
    }
    if (!v22)
      LOWORD(v22) = *((_WORD *)v112 + 28);
    if (!v23)
      v23 = *((unsigned __int16 *)v112 + 29);
    LODWORD(v130) = 0;
    v96 = v42;
    v46 = v40;
    v100 = v17;
    switch(v23)
    {
      case 1:
        DWORD1(v130) = 1;
        v47 = 13;
        goto LABEL_82;
      case 2:
        DWORD1(v130) = 1;
        v47 = 10;
LABEL_82:
        LOBYTE(v131[0]) = v47;
        break;
      case 3:
        DWORD1(v130) = 2;
        LOWORD(v131[0]) = 2573;
        break;
      case 4:
        v48 = 1;
        goto LABEL_86;
      case 5:
        v48 = 2;
LABEL_86:
        LODWORD(v130) = v48;
        break;
      case 6:
        DWORD1(v130) = 1;
        LOBYTE(v131[0]) = 0;
        break;
      default:
        v7 = 0;
        LODWORD(v44) = 156;
        goto LABEL_78;
    }
    v49 = v25;
    v107 = v22;
    v110 = v23;
    v50 = v14 - v46;
    if ((v112[4] & 0xC) != 0)
      v50 += 4;
    if ((v11 & 4) != 0)
      v51 = 5 * v50 + 5;
    else
      v51 = v50;
    v99 = v43;
    if (v51 <= 0x3FF)
    {
      v52 = v128;
      v53 = v43;
    }
    else
    {
      v52 = (*(uint64_t (**)(unint64_t, _QWORD))v112)(4 * v51 + 4, *((_QWORD *)v112 + 2));
      if (!v52)
      {
        v7 = 0;
        *v9 = 121;
        v45 = v112;
        goto LABEL_103;
      }
      *(_QWORD *)&v128 = v52;
      v53 = HIDWORD(v126);
    }
    *((_QWORD *)&v128 + 1) = v52 + 4 * v51 + 4;
    LODWORD(v44) = sub_1A3A93B88(v41, v53, &v132, &v119);
    v113 = (int)v44;
    if ((_DWORD)v44)
      goto LABEL_98;
    v54 = DWORD1(v127);
    if (DWORD1(v127) <= 0xFF)
    {
      v55 = (void *)v129;
    }
    else
    {
      v55 = (void *)(*(uint64_t (**)(uint64_t, _QWORD))v112)(4 * (DWORD1(v127) + 1), *((_QWORD *)v112 + 2));
      *(_QWORD *)&v129 = v55;
      if (!v55)
      {
        v7 = 0;
        LODWORD(v44) = 121;
        v113 = 121;
        v124[11] = 0;
        goto LABEL_99;
      }
      v54 = DWORD1(v127);
    }
    bzero(v55, 4 * (v54 + 1));
    if (v132)
    {
      v133[0] = 0;
      LODWORD(v44) = sub_1A3A9719C((unsigned int *)v128, 0, 0, (uint64_t)&v119, v133);
      v113 = (int)v44;
      if ((_DWORD)v44)
        goto LABEL_98;
    }
    v124[11] = v14;
    v117 = (unsigned int *)v128;
    v118 = v134;
    v134[0] = -122;
    sub_1A3A9730C(HIDWORD(v126), &v118, &v117, &v113, 0, (_DWORD *)&v114 + 1, (unsigned int *)&v115 + 1, &v114, (unsigned int *)&v115, 0, (uint64_t)&v119, &v116);
    LODWORD(v44) = v113;
    if (v113)
    {
LABEL_98:
      v7 = 0;
LABEL_99:
      v45 = v112;
LABEL_100:
      v41 = &v10[v124[11]];
      goto LABEL_101;
    }
    if (v116 > 0x10000)
    {
      v7 = 0;
      LODWORD(v44) = 120;
      v113 = 120;
      goto LABEL_99;
    }
    v56 = v116 + WORD1(v125) * (unint64_t)(unsigned __int16)v125 + 136;
    v57 = (*(uint64_t (**)(unint64_t, _QWORD))v112)(v56, *((_QWORD *)v112 + 2));
    v7 = v57;
    if (!v57)
    {
      LODWORD(v44) = 121;
      v113 = 121;
      v45 = v112;
      goto LABEL_100;
    }
    *(_QWORD *)(v57 + 128) = 0;
    v58 = *((_QWORD *)v112 + 2);
    *(_OWORD *)v57 = *v112;
    *(_QWORD *)(v57 + 16) = v58;
    *(_QWORD *)(v57 + 24) = v101;
    *(_QWORD *)(v57 + 32) = 0;
    *(_OWORD *)(v57 + 40) = 0u;
    *(_OWORD *)(v57 + 56) = 0u;
    *(_QWORD *)(v57 + 72) = v56;
    *(_DWORD *)(v57 + 80) = 1346589253;
    *(_DWORD *)(v57 + 84) = v100;
    v59 = HIDWORD(v126);
    *(_DWORD *)(v7 + 88) = HIDWORD(v126);
    *(_DWORD *)(v7 + 92) = *((_DWORD *)v112 + 16);
    *(_DWORD *)(v7 + 96) = v49 | v127 | 1;
    *(_DWORD *)(v7 + 100) = v103;
    *(_DWORD *)(v7 + 104) = v102;
    *(_DWORD *)(v7 + 108) = v104;
    *(_QWORD *)(v7 + 112) = 0;
    *(_WORD *)(v7 + 120) = v107;
    *(_WORD *)(v7 + 122) = v110;
    *(_QWORD *)(v7 + 124) = 0;
    v60 = WORD1(v125);
    *(_WORD *)(v7 + 132) = WORD1(v125);
    v61 = (unsigned __int16)v125;
    *(_WORD *)(v7 + 134) = v125;
    DWORD1(v125) = 0;
    DWORD2(v127) = 0;
    *((_QWORD *)&v123 + 1) = v7 + 136;
    v111 = (unsigned __int8 *)(v7 + 136 + v61 * (unint64_t)v60);
    *(_QWORD *)&v122 = v111;
    v131[1] = 0;
    *(_QWORD *)&v131[3] = 0;
    *((_QWORD *)&v125 + 1) = 0;
    if (v61)
    {
      v62 = 0;
      v63 = v126;
      do
      {
        sub_1A3A9A27C((uint64_t)&v119, *(void **)v63, *(unsigned __int16 *)(v63 + 12), *(_DWORD *)(v63 + 8), v62++);
        v63 += 16;
      }
      while (v62 < (unsigned __int16)v125);
      v59 = *(_DWORD *)(v7 + 88);
    }
    v117 = (unsigned int *)v128;
    v118 = v111;
    *v111 = -122;
    if ((sub_1A3A9730C(v59, &v118, &v117, &v113, 0, (_DWORD *)&v114 + 1, (unsigned int *)&v115 + 1, &v114, (unsigned int *)&v115, 0, (uint64_t)&v119, 0) & 0x80000000) != 0)*(_DWORD *)(v7 + 96) |= 0x2000u;
    *(_WORD *)(v7 + 128) = WORD2(v127);
    *(_WORD *)(v7 + 130) = WORD4(v129);
    *(_WORD *)(v7 + 124) = v131[2];
    if (v131[3])
    {
      LODWORD(v114) = 0;
      LODWORD(v115) = -2;
      *(_DWORD *)(v7 + 96) |= 0x800000u;
    }
    v66 = v118;
    *v118 = 0;
    v118 = v66 + 1;
    v67 = v66 + 1 - v111;
    v68 = v67 > v116;
    v69 = v67 - v116;
    if (v68)
    {
      LODWORD(v44) = 123;
LABEL_135:
      v113 = (int)v44;
LABEL_162:
      v45 = v112;
      goto LABEL_100;
    }
    *(_QWORD *)(v7 + 72) += v69;
    LODWORD(v44) = v113;
    if (!v113)
    {
      if (v131[5])
      {
        v70 = (v96 >> 19) & 1;
        v44 = sub_1A3A9A34C(v111, v70);
        if (v44)
        {
          v71 = v44;
          v72 = 0;
          v73 = 8;
          while (1)
          {
            v74 = __rev16(*(unsigned __int16 *)(v71 + 1));
            if (v74)
            {
              v75 = v111;
              if (!v72)
                goto LABEL_151;
              v76 = v72;
              v75 = v111;
              v77 = v73;
              while (1)
              {
                v78 = &v133[4 * v77];
                v79 = *((_DWORD *)v78 + 2);
                if (v74 == v79)
                  break;
                if (v74 > v79)
                  v75 = *(unsigned __int8 **)v78;
                v77 = ((_BYTE)v77 + 1) & 7;
                if (!--v76)
                  goto LABEL_151;
              }
              v80 = *(_QWORD *)v78;
              if (!*(_QWORD *)v78)
              {
LABEL_151:
                bracket_8 = _pcre2_find_bracket_8(v75, v70, v74);
                if (!bracket_8)
                {
                  LODWORD(v44) = 153;
                  v113 = 153;
                  break;
                }
                LODWORD(v80) = (_DWORD)bracket_8;
                if (v73 >= 1)
                  --v73;
                else
                  v73 = 7;
                v82 = &v133[4 * v73];
                *((_DWORD *)v82 + 2) = v74;
                *(_QWORD *)v82 = bracket_8;
                if (v72 < 8)
                  ++v72;
              }
            }
            else
            {
              LODWORD(v80) = (_DWORD)v111;
            }
            *(_WORD *)(v71 + 1) = bswap32(v80 - (_DWORD)v111) >> 16;
            v71 = sub_1A3A9A34C(v71 + 3, v70);
            if (!v71)
            {
              LODWORD(v44) = v113;
              break;
            }
          }
        }
      }
    }
    if ((_DWORD)v44)
      goto LABEL_162;
    v83 = *(_DWORD *)(v7 + 88);
    if ((v83 & 0x4000) == 0)
    {
      if (_pcre2_auto_possessify_8(v111, (uint64_t)&v119))
      {
        LODWORD(v44) = 180;
        goto LABEL_135;
      }
      v83 = *(_DWORD *)(v7 + 88);
    }
    if ((v83 & 0x80000000) == 0 && sub_1A3A9A430(v111, 0, (uint64_t)&v119, 0, 0))
    {
      v83 |= 0x80000000;
      *(_DWORD *)(v7 + 88) = v83;
    }
    if ((v83 & 0x10000) != 0)
    {
LABEL_207:
      v45 = v112;
      goto LABEL_103;
    }
    v84 = v96 & 0x80000;
    v85 = v99 & 0x20000;
    v86 = HIDWORD(v115);
    if (HIDWORD(v115) <= 0xFFFFFFFD)
    {
      v87 = HIDWORD(v114);
    }
    else
    {
      v87 = sub_1A3A9A5E8(v111, (unsigned int *)&v115 + 1, 0);
      HIDWORD(v114) = v87;
      v86 = HIDWORD(v115);
      if (HIDWORD(v115) > 0xFFFFFFFD)
      {
        if ((*(_DWORD *)(v7 + 88) & 0x80000000) == 0
          && sub_1A3A9A7CC(v111, 0, (uint64_t)&v119, 0, 0))
        {
          v88 = 0;
          v89 = *(_DWORD *)(v7 + 96) | 0x200;
LABEL_185:
          *(_DWORD *)(v7 + 96) = v89;
          goto LABEL_186;
        }
        v88 = 0;
        goto LABEL_186;
      }
    }
    *(_DWORD *)(v7 + 112) = v87;
    v90 = *(_DWORD *)(v7 + 96);
    *(_DWORD *)(v7 + 96) = v90 | 0x10;
    if ((v86 & 1) != 0)
    {
      if (v87 >= 0x80 && (v85 | v84 || v87 > 0xFE))
      {
        v88 = 1;
        if (v84
          || !v85
          || !*(_DWORD *)&_pcre2_ucd_records_8[12
                                             * _pcre2_ucd_stage2_8[v87
                                                                 - (v64 & 0xFFFFFF80)
                                                                 + (_pcre2_ucd_stage1_8[(int)v87 / 128] << 7)]
                                             + 4])
        {
          goto LABEL_186;
        }
        v89 = v90 | 0x30;
        goto LABEL_185;
      }
      if (v87 != *(unsigned __int8 *)(v120 + v87))
      {
        v89 = v90 | 0x30;
        v88 = 1;
        goto LABEL_185;
      }
    }
    v88 = 1;
LABEL_186:
    LOBYTE(v65) = v115;
    if (v115 > 0xFFFFFFFD)
      goto LABEL_200;
    v91 = *(_DWORD *)(v7 + 88);
    if (v86 > 0xFFFFFFFD || (v91 & 0x80000) == 0 || (v87 & 0x80) == 0 || (v114 & 0x80) == 0)
      ++v88;
    if ((v115 & 2) == 0 && v91 < 0)
      goto LABEL_200;
    v92 = v114;
    *(_DWORD *)(v7 + 116) = v114;
    v93 = *(_DWORD *)(v7 + 96);
    *(_DWORD *)(v7 + 96) = v93 | 0x80;
    if ((v65 & 1) == 0)
      goto LABEL_200;
    if (v92 >= 0x80 && (v85 | v84 || v92 > 0xFE))
    {
      if (v84
        || !v85
        || !*(_DWORD *)&_pcre2_ucd_records_8[12
                                           * _pcre2_ucd_stage2_8[(int)(v92
                                                                     - (v65 & 0xFFFFFF80)
                                                                     + (_pcre2_ucd_stage1_8[(int)v92 / 128] << 7))]
                                           + 4])
      {
        goto LABEL_200;
      }
    }
    else if ((_DWORD)v92 == *(unsigned __int8 *)(v120 + v92))
    {
LABEL_200:
      if (_pcre2_study_8(v7))
      {
        LODWORD(v44) = 131;
        goto LABEL_135;
      }
      if (((v88 == 0) & (*(unsigned __int8 *)(v7 + 96) >> 6)) != 0)
        v94 = 1;
      else
        v94 = v88;
      if (v94 > *(unsigned __int16 *)(v7 + 126))
        *(_WORD *)(v7 + 126) = v94;
      goto LABEL_207;
    }
    *(_DWORD *)(v7 + 96) = v93 | 0x180;
    goto LABEL_200;
  }
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = v10 + 2;
  v103 = -1;
  v104 = -1;
  v102 = -1;
  while (2)
  {
    if (v10[v21] != 40 || v10[v24 + 1] != 42)
    {
      LODWORD(v40) = v24;
      goto LABEL_63;
    }
    v95 = v24;
    v97 = v25;
    v105 = v22;
    v108 = v23;
    v27 = 0;
    v28 = v20 - v24;
    v29 = &v26[v24];
    while (1)
    {
      v30 = LOWORD((&off_1E4AA5AB8)[v27 + 1]);
      if (v28 >= v30
        && !_pcre2_strncmp_c8_8(v29, (unsigned __int8 *)(&off_1E4AA5AB8)[v27], LOWORD((&off_1E4AA5AB8)[v27 + 1])))
      {
        break;
      }
      v27 += 2;
      if (v27 == 42)
      {
        LODWORD(v40) = v95;
        v25 = v97;
        v17 = (v11 >> 7) & 0x80000 | v11;
        v22 = v105;
        v23 = v108;
        goto LABEL_63;
      }
    }
    v40 = v95 + v30 + 2;
    v31 = *((unsigned __int16 *)&off_1E4AA5AB8 + 4 * v27 + 5);
    v22 = v105;
    v23 = v108;
    v25 = v97;
    switch(*((_WORD *)&off_1E4AA5AB8 + 4 * v27 + 5))
    {
      case 0:
        HIDWORD(v126) |= *((_DWORD *)&off_1E4AA5AB8 + 2 * v27 + 3);
        goto LABEL_58;
      case 1:
        v25 = *((_DWORD *)&off_1E4AA5AB8 + 2 * v27 + 3) | v97;
        goto LABEL_58;
      case 2:
        v23 = *((_DWORD *)&off_1E4AA5AB8 + 2 * v27 + 3);
        v25 = v97 | 0x8000;
        goto LABEL_58;
      case 3:
        v22 = *((_DWORD *)&off_1E4AA5AB8 + 2 * v27 + 3);
        v25 = v97 | 0x4000;
LABEL_58:
        v17 = (v11 >> 7) & 0x80000 | v11;
        goto LABEL_59;
      case 4:
      case 5:
      case 6:
        v32 = v10[v40];
        v26 = v10 + 2;
        if (v32 - 48 > 9)
        {
          v7 = 0;
          v41 = &v10[v40];
          LODWORD(v44) = 160;
          goto LABEL_78;
        }
        v33 = 0;
        LODWORD(v40) = v95 + v30 + 3;
        v17 = (v11 >> 7) & 0x80000 | v11;
        v20 = v14 - 2;
        do
        {
          if (v32 > 0x39 || v33 > 0x19999998)
            goto LABEL_121;
          v33 = v32 + 10 * v33 - 48;
          v32 = v10[v40];
          LODWORD(v40) = v40 + 1;
        }
        while (v32 > 0x2F);
        if (v32 == 41)
        {
          v35 = v103;
          v34 = v104;
          if (v31 == 4)
            v36 = v33;
          else
            v36 = v103;
          if (v31 == 4)
            v37 = v104;
          else
            v37 = v33;
          v38 = v31 == 5;
          if (v31 != 5)
            v35 = v36;
          v39 = v102;
          if (v38)
            v39 = v33;
          v102 = v39;
          v103 = v35;
          if (!v38)
            v34 = v37;
          v104 = v34;
LABEL_60:
          v21 = v40;
          v24 = v40;
          if (v14 - v40 <= 1)
            goto LABEL_63;
          continue;
        }
LABEL_121:
        v7 = 0;
        LODWORD(v44) = 160;
        v113 = 160;
        v41 = &v10[v40];
LABEL_79:
        v45 = v112;
LABEL_101:
        *v8 = v41 - v10;
LABEL_102:
        *v9 = (int)v44;
        pcre2_code_free_8(v7);
        v7 = 0;
LABEL_103:
        if ((_BYTE *)v128 != v136)
          (*((void (**)(_QWORD, _QWORD))v45 + 1))(v128, *((_QWORD *)v45 + 2));
        if (DWORD2(v126) >= 0x15)
          (*((void (**)(_QWORD, _QWORD))v45 + 1))(v126, *((_QWORD *)v45 + 2));
        if ((_QWORD *)v129 != v137)
          (*((void (**)(_QWORD, _QWORD))v45 + 1))(v129, *((_QWORD *)v45 + 2));
        return v7;
      default:
        v25 = v97;
        v17 = (v11 >> 7) & 0x80000 | v11;
        v22 = v105;
        v23 = v108;
LABEL_59:
        v20 = v14 - 2;
        v26 = v10 + 2;
        goto LABEL_60;
    }
  }
}

uint64_t sub_1A3A93B88(unsigned __int8 *a1, unsigned int a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned __int16 *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int *v56;
  int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int16 *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  unsigned __int16 *v74;
  unsigned __int8 *v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int16 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int is_newline_8;
  uint64_t v91;
  unsigned __int8 *v92;
  int64_t v93;
  unsigned __int8 *v94;
  int v95;
  unsigned __int8 *v96;
  unsigned __int8 v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int16 *v103;
  int v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  int v107;
  unsigned __int16 v108;
  unsigned int v109;
  unsigned __int8 *v110;
  unsigned __int16 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned __int16 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  BOOL v130;
  unsigned __int16 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  unsigned __int16 *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  int v142;
  unsigned int v143;
  int v144;
  int v145;
  int *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  int v155;
  unsigned __int8 *v156;
  int v157;
  int v158;
  unsigned __int8 *v160;
  int v161;
  unsigned int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  int v167;
  unsigned __int8 *v168;
  unsigned int v169;
  int v170;
  unsigned __int8 *v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  unsigned __int8 *v181;
  int *v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  int *v197;
  unsigned __int8 *v198;
  int v199;
  _DWORD *v200;
  int v201;
  int v202;
  unsigned __int8 *v203;
  unsigned __int16 *v204;
  char v205;
  int v206;
  int v207;
  uint64_t v208;
  unint64_t v209;
  int *v210;
  unsigned __int8 *v211;
  int v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  unsigned __int8 *v216;
  int *v217;
  unsigned __int8 *v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  unsigned __int8 *v225;
  uint64_t v226;
  unsigned __int8 **v227;
  uint64_t v228;
  int v229;
  int v230;
  unsigned int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  _BOOL4 v236;
  int v237;
  int v238;
  int v239;
  int v240;
  unsigned int v241;
  int v242;
  int v243;
  int *v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  unsigned __int16 *v248;
  int v249;
  unsigned int v250;
  unsigned __int8 *v251;
  unsigned __int8 *v252;
  int v254;
  int v255;
  int v256;
  uint64_t v257;
  unsigned __int16 *v258;
  int v259;
  int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  uint64_t v264;
  __int16 v265;
  unsigned int v266;
  unsigned __int8 *v267;
  uint64_t v268;
  int v269;
  int v270;
  unsigned int v271;
  unsigned __int16 v272;
  int v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  int v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  unsigned __int16 *v282;
  uint64_t v283;
  int *v284;
  int v285;
  int v286;
  int *v287;
  int v288;
  char v289;
  unsigned __int8 *v290;
  unsigned int v291;
  int v292;
  int v293;
  int v294;
  unsigned __int16 *v296;
  uint64_t v297;
  unsigned __int16 *v298;
  unsigned __int8 *v299;
  unsigned __int8 *v300;
  uint64_t v301;
  unsigned __int16 *v302;
  uint64_t v303;
  uint64_t v304;
  void *v305;
  uint64_t v306;
  int v307;
  unsigned __int8 *v308;
  unsigned __int8 *v309;
  int v311;
  uint64_t v312;
  unsigned __int8 *v313;
  int v314;
  unsigned __int8 *v315;
  int v316;
  int v317;
  int v318;
  unsigned __int8 *v319;
  uint64_t v320;
  unsigned __int8 v321;
  uint64_t v322;
  unsigned __int8 *v323;
  uint64_t v324;
  int v325;
  int v326;
  uint64_t v327;
  BOOL v328;
  int v329;
  unsigned __int8 *v330;
  unsigned int v331;
  unsigned __int8 *v332;
  int v333;
  int v334;
  int v335;
  int v336;
  unsigned __int8 *v337;
  unsigned int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  __int16 v343;
  _DWORD *v344;
  int v345;
  int v346;
  unsigned __int8 *v348;
  int v349;
  int v350;
  int v351;
  unsigned __int8 *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  unsigned __int16 *v357;
  unsigned __int16 *v358;
  unsigned __int16 *v359;
  unsigned __int16 *v360;
  unsigned __int16 *v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  unsigned int v371;
  unsigned __int8 *v372;
  unsigned int v373;
  unsigned int v374;
  unsigned int v375;
  int v376;
  __int16 v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  int v381;
  unsigned int v382;
  unsigned int v383;
  unint64_t v384;
  int *v386;
  unsigned __int8 *v387;
  int v388;
  unsigned __int8 *v389;
  int *v390;
  char v391;
  char *v392;
  unsigned __int8 *v393;
  int v394;
  uint64_t v395;
  int v396;
  unint64_t v397;
  unsigned __int8 *v398;
  int v399;
  uint64_t v400;
  unsigned __int8 *v401;
  uint64_t v402;
  uint64_t v403;
  unsigned __int8 *v404;
  uint64_t v405;
  int *v406;
  unsigned int v407;
  int v408;
  unsigned __int8 *v409[2];

  v4 = (uint64_t)a4;
  v5 = a1;
  v409[0] = a1;
  v407 = 0;
  v405 = 0;
  v406 = 0;
  v6 = (int *)a4[28];
  v397 = a4[29];
  v7 = *(_DWORD *)(*a4 + 64);
  v8 = a2 & 0x80000;
  v396 = (a2 >> 2) & 1;
  v404 = 0;
  v9 = (unsigned __int8 *)a4[8];
  v10 = -2146893824;
  if ((v7 & 8) == 0)
  {
    if ((v7 & 4) == 0)
      goto LABEL_5;
    v10 = -2145910779;
  }
  *v6 = v10;
  v6[1] = -2145779712;
  v6 += 2;
LABEL_5:
  v408 = 0;
  if ((a2 & 0x2000000) != 0)
  {
    if (v9 <= a1)
      goto LABEL_803;
    v336 = a2 & 4;
    while (1)
    {
      if ((unint64_t)v6 >= v397)
        goto LABEL_812;
      v337 = v5 + 1;
      v409[0] = v5 + 1;
      v338 = *v5;
      v408 = v338;
      if (!(_DWORD)v8 || v338 < 0xC0)
        goto LABEL_791;
      if ((v338 & 0x20) == 0)
        break;
      v339 = *v337 & 0x3F;
      if ((v338 & 0x10) != 0)
      {
        if ((v338 & 8) != 0)
        {
          v340 = v5[2] & 0x3F;
          v341 = v5[3] & 0x3F;
          v342 = v5[4] & 0x3F;
          if ((v338 & 4) != 0)
          {
            v338 = ((v338 & 1) << 30) | (v339 << 24) | (v340 << 18) | (v341 << 12) | (v342 << 6) | v5[5] & 0x3F;
            v408 = v338;
            v337 = v5 + 6;
          }
          else
          {
            v337 = v5 + 5;
            v338 = ((v338 & 3) << 24) | (v339 << 18) | (v340 << 12) | (v341 << 6) | v342;
            v408 = v338;
          }
        }
        else
        {
          v338 = ((v338 & 7) << 18) | (v339 << 12) | ((v5[2] & 0x3F) << 6) | v5[3] & 0x3F;
          v408 = v338;
          v337 = v5 + 4;
        }
      }
      else
      {
        v338 = ((v338 & 0xF) << 12) | (v339 << 6) | v5[2] & 0x3F;
        v408 = v338;
        v337 = v5 + 3;
      }
      v409[0] = v337;
      if (v336)
      {
LABEL_801:
        v6 = sub_1A3A9A9F0((int)v5, &v406, v396, v6, v4);
        v338 = v408;
        v5 = v409[0];
        goto LABEL_802;
      }
LABEL_792:
      v5 = v337;
LABEL_802:
      *v6++ = v338;
      if (v5 >= v9)
        goto LABEL_803;
    }
    v337 = v5 + 2;
    v409[0] = v5 + 2;
    v408 = v5[1] & 0x3F | ((v338 & 0x1F) << 6);
    v338 = v408;
LABEL_791:
    if (v336)
      goto LABEL_801;
    goto LABEL_792;
  }
  if (v9 <= a1)
  {
LABEL_803:
    LOWORD(v17) = 0;
    goto LABEL_804;
  }
  v391 = v7;
  v11 = 0;
  v392 = 0;
  v393 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v394 = 0;
  v18 = 0;
  v386 = 0;
  v388 = (a2 >> 19) & 1;
  v384 = *(_QWORD *)(v4 + 40) + 12 * (*(_QWORD *)(v4 + 80) / 0xCuLL);
  v19 = (a2 >> 17) & 0x80 | a2;
  v389 = v9 - 1;
  v390 = (int *)(v4 + 260);
  v395 = v4;
  while (1)
  {
    v402 = 0;
    v403 = 0;
    v400 = 0;
    v401 = 0;
    if ((unint64_t)v6 >= v397)
    {
      v350 = 163;
      goto LABEL_822;
    }
    v20 = *(_QWORD *)v4;
    if (*(_DWORD *)(*(_QWORD *)v4 + 60) < (unsigned __int16)v17)
    {
      v350 = 119;
      goto LABEL_822;
    }
    v21 = v5 + 1;
    v409[0] = v5 + 1;
    v22 = *v5;
    v408 = v22;
    if (!(_DWORD)v8 || v22 < 0xC0)
      goto LABEL_14;
    if ((v22 & 0x20) == 0)
    {
      v21 = v5 + 2;
      v409[0] = v5 + 2;
      v408 = v5[1] & 0x3F | ((v22 & 0x1F) << 6);
      v22 = v408;
LABEL_14:
      if (v14)
        goto LABEL_15;
      goto LABEL_38;
    }
    v24 = *v21 & 0x3F;
    if ((v22 & 0x10) != 0)
    {
      if ((v22 & 8) != 0)
      {
        v33 = v5[2] & 0x3F;
        v34 = v5[3] & 0x3F;
        v35 = v5[4] & 0x3F;
        if ((v22 & 4) != 0)
        {
          v22 = ((v22 & 1) << 30) | (v24 << 24) | (v33 << 18) | (v34 << 12) | (v35 << 6) | v5[5] & 0x3F;
          v408 = v22;
          v21 = v5 + 6;
        }
        else
        {
          v21 = v5 + 5;
          v22 = ((v22 & 3) << 24) | (v24 << 18) | (v33 << 12) | (v34 << 6) | v35;
          v408 = v22;
        }
      }
      else
      {
        v22 = ((v22 & 7) << 18) | (v24 << 12) | ((v5[2] & 0x3F) << 6) | v5[3] & 0x3F;
        v408 = v22;
        v21 = v5 + 4;
      }
    }
    else
    {
      v22 = ((v22 & 0xF) << 12) | (v24 << 6) | v5[2] & 0x3F;
      v408 = v22;
      v21 = v5 + 3;
    }
    v409[0] = v21;
    if (v14)
    {
LABEL_15:
      if (v22 == 92 && v21 < v9 && *v21 == 69)
      {
        v14 = 0;
LABEL_19:
        v23 = v21 + 1;
        goto LABEL_20;
      }
      if ((int)v15 < 1)
      {
        if ((_DWORD)v13)
        {
          *v6 = v22;
        }
        else
        {
          if ((int)v16 <= 0)
          {
            v25 = (int)v5;
            v26 = v6;
            v27 = v16;
            v16 = v19;
            v28 = v13;
            v29 = v17;
            v30 = v11;
            v31 = v15;
            v32 = sub_1A3A9A9F0(v25, &v406, v396, v26, v4);
            v15 = v31;
            v11 = v30;
            v19 = v16;
            LODWORD(v16) = v27;
            v17 = v29;
            v13 = v28;
            v6 = v32;
            v22 = v408;
          }
          v16 = (v16 - 1);
          *v6 = v22;
          v12 = 1;
        }
        v18 = 0;
        ++v6;
        v14 = 1;
        goto LABEL_30;
      }
      v348 = v21 - 1;
LABEL_821:
      v409[0] = v348;
      v350 = 128;
      goto LABEL_822;
    }
LABEL_38:
    if ((_DWORD)v13)
    {
      if ((~(_DWORD)v19 & 0x400080) != 0)
        goto LABEL_47;
      if (v22 >= 0x100)
      {
        if ((v22 | 1) != 0x200F && (v22 | 1) != 0x2029)
          goto LABEL_47;
        goto LABEL_57;
      }
      if (v22 == 35)
        goto LABEL_57;
      if (v22 != 133 && (*(_BYTE *)(*(_QWORD *)(v4 + 32) + v22) & 1) == 0)
      {
LABEL_47:
        if (v22 == 41)
        {
          if ((uint64_t)&v21[~(unint64_t)v393] >= 256)
          {
            v409[0] = v21 - 1;
            v350 = 176;
            goto LABEL_822;
          }
          *(_DWORD *)v392 = ((unint64_t)((char *)v6 - v392) >> 2) - 1;
          if (v394)
          {
            v14 = 0;
            v13 = 0;
            *v6++ = v394;
            v394 = 0;
          }
          else
          {
            v394 = 0;
            v14 = 0;
            v13 = 0;
          }
        }
        else
        {
          if (v22 != 92)
            goto LABEL_103;
          if ((v19 & 0x400000) == 0)
          {
            v22 = 92;
LABEL_103:
            v14 = 0;
            *v6++ = v22;
            v13 = 1;
            goto LABEL_30;
          }
          v60 = v12;
          v61 = v15;
          v62 = v16;
          v63 = v19;
          v64 = v4;
          v65 = v17;
          v66 = v11;
          v67 = _pcre2_check_escape_8(v409, (unint64_t)v9, &v408, (int *)&v405 + 1, v19, *(_DWORD *)(v20 + 64), 0, v64);
          if (HIDWORD(v405))
            goto LABEL_823;
          v11 = v66;
          v17 = v65;
          if (v67 == 26)
          {
            v14 = 1;
            v13 = 1;
            v19 = v63;
            v4 = v395;
            v16 = v62;
            v15 = v61;
            v12 = v60;
          }
          else
          {
            v19 = v63;
            v4 = v395;
            v15 = v61;
            v12 = v60;
            if (v67 != 25)
            {
              if (v67)
              {
                v350 = 140;
                goto LABEL_822;
              }
              v22 = v408;
              v16 = v62;
              goto LABEL_103;
            }
            v14 = 0;
            v13 = 1;
LABEL_231:
            v16 = v62;
          }
        }
        goto LABEL_30;
      }
    }
    if (v22 == 92)
    {
      if (v21 < v9)
      {
        v36 = *v21;
        if (v36 == 81 || v36 == 69)
        {
          v14 = v36 == 81;
          goto LABEL_19;
        }
      }
      v22 = 92;
    }
LABEL_57:
    if ((v19 & 0x80) != 0)
    {
      if (v22 <= 0xFF)
      {
        v14 = 0;
        if (v22 == 133 || (*(_BYTE *)(*(_QWORD *)(v4 + 32) + v22) & 1) != 0)
          goto LABEL_30;
      }
      v14 = 0;
      if ((v22 | 1) == 0x200F || (v22 | 1) == 0x2029)
        goto LABEL_30;
      if ((int)v22 <= 41)
      {
        if (v22 == 35)
        {
          if (v21 >= v9)
            goto LABEL_407;
          v366 = v12;
          v381 = v18;
          while (1)
          {
            v81 = *(_DWORD *)(v4 + 256);
            v82 = *(_QWORD *)(v4 + 64);
            if (v81)
            {
              if ((unint64_t)v21 < v82)
              {
                v83 = v8;
                v84 = v13;
                v85 = v15;
                v86 = v11;
                v87 = v16;
                v88 = v19;
                v89 = v17;
                is_newline_8 = _pcre2_is_newline_8(v21, v81, v82, v390, v388);
                v21 = v409[0];
                if (is_newline_8)
                {
                  v91 = *v390;
                  v17 = v89;
                  v19 = v88;
                  v16 = v87;
                  v11 = v86;
                  v15 = v85;
                  v13 = v84;
                  v8 = v83;
                  v12 = v366;
                  v18 = v381;
                  goto LABEL_541;
                }
                v17 = v89;
                v19 = v88;
                v16 = v87;
                v11 = v86;
                v15 = v85;
                v13 = v84;
                v8 = v83;
                v12 = v366;
                v18 = v381;
              }
            }
            else
            {
              v91 = *v390;
              if ((unint64_t)v21 <= v82 - v91 && *v21 == *(unsigned __int8 *)(v4 + 272))
              {
                if ((_DWORD)v91 == 1)
                {
                  v91 = 1;
LABEL_541:
                  v14 = 0;
                  v23 = &v21[v91];
LABEL_20:
                  v409[0] = v23;
                  goto LABEL_30;
                }
                if (v21[1] == *(unsigned __int8 *)(v4 + 273))
                  goto LABEL_541;
              }
            }
            v92 = v21 + 1;
            v409[0] = v21 + 1;
            if ((_DWORD)v8 && v92 < v9)
            {
              v93 = v389 - v21;
              do
              {
                if ((*v92 & 0xC0) != 0x80)
                  goto LABEL_160;
                v409[0] = ++v92;
                --v93;
              }
              while (v93);
              v92 = v9;
            }
LABEL_160:
            v21 = v92;
            if (v92 >= v9)
              goto LABEL_407;
          }
        }
LABEL_60:
        v37 = v11;
        if (v22 == 40 && v9 - v21 >= 2 && *v21 == 63 && v21[1] == 35)
        {
          v23 = v21 + 1;
          while (1)
          {
            v409[0] = v23;
            if (v23 >= v9)
              break;
            v38 = *v23++;
            if (v38 == 41)
            {
              v14 = 0;
              goto LABEL_20;
            }
          }
          v350 = 118;
          goto LABEL_822;
        }
LABEL_78:
        v46 = (v16 - 1);
        if ((int)v16 <= 0)
        {
          v47 = (int)v5;
          v372 = v9;
          v48 = v18;
          v49 = v12;
          v50 = v6;
          v51 = v19;
          v52 = v17;
          v53 = v8;
          v54 = v13;
          v55 = v15;
          v56 = sub_1A3A9A9F0(v47, &v406, v396, v50, v4);
          LODWORD(v12) = v49;
          v18 = v48;
          v9 = v372;
          LODWORD(v15) = v55;
          v13 = v54;
          v8 = v53;
          v19 = v51;
          v17 = v52;
          v6 = v56;
        }
        v16 = v46;
        goto LABEL_81;
      }
      if (v22 - 42 < 2)
        goto LABEL_82;
    }
    else if ((int)v22 <= 62)
    {
      if (v22 - 42 < 2)
        goto LABEL_82;
      goto LABEL_60;
    }
    if (v22 == 63)
      goto LABEL_82;
    v37 = v11;
    if (v22 != 123)
      goto LABEL_78;
    v401 = v21;
    v371 = v8;
    v379 = v18;
    v39 = v13;
    v40 = v19;
    v41 = v12;
    v42 = v16;
    v43 = v17;
    v44 = v15;
    v45 = sub_1A3A92B64((unint64_t *)&v401, (unint64_t)v9, 0, 0, (int *)&v405 + 1);
    LODWORD(v12) = v41;
    LODWORD(v15) = v44;
    v19 = v40;
    v13 = v39;
    v18 = v379;
    v4 = v395;
    v17 = v43;
    v16 = v42;
    v8 = v371;
    if (!v45)
      goto LABEL_78;
LABEL_81:
    v11 = v37;
LABEL_82:
    if ((int)v15 >= 1)
    {
      if (v408 != 40 || v9 - v409[0] < 3)
      {
LABEL_820:
        v348 = v409[0] - 1;
        goto LABEL_821;
      }
      v57 = *v409[0];
      if (v57 == 63)
      {
        v58 = v409[0][1];
        if (v58 > 0x3C)
        {
          if (v58 != 61 && (v58 != 67 || (_DWORD)v15 != 2))
            goto LABEL_820;
        }
        else if (v58 != 33)
        {
          if (v58 != 60)
            goto LABEL_820;
          v59 = v409[0][2];
          if (v59 != 33 && v59 != 61)
            goto LABEL_820;
        }
      }
      else if (v57 != 42 || (*(_BYTE *)(*(_QWORD *)(v4 + 32) + v409[0][1]) & 4) == 0)
      {
        goto LABEL_820;
      }
    }
    v68 = v408;
    if (v18)
      break;
    if (v408 > 62)
    {
      if (v408 <= 93)
      {
        if (v408 != 63)
          goto LABEL_123;
        v69 = -2143682560;
        goto LABEL_241;
      }
LABEL_132:
      if (v408 == 94)
      {
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v12 = 0;
        v70 = -2146893824;
        goto LABEL_228;
      }
      if (v408 != 123)
      {
        if (v408 != 124)
        {
LABEL_232:
          v18 = 0;
          v15 = 0;
          v14 = 0;
LABEL_233:
          *v6++ = v68;
          goto LABEL_234;
        }
        if (v11 && *v11 == (unsigned __int16)v17 && (v11[3] & 1) != 0)
        {
          v80 = *(_DWORD *)(v4 + 212);
          if (v80 > v11[2])
            v11[2] = v80;
          *(_DWORD *)(v4 + 212) = v11[1];
        }
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v12 = 0;
        v70 = -2147418112;
LABEL_228:
        *v6++ = v70;
        goto LABEL_30;
      }
      v136 = v12;
      v137 = v11;
      v382 = v16;
      v138 = v13;
      v139 = v19;
      v140 = v17;
      if (!sub_1A3A92B64((unint64_t *)v409, (unint64_t)v9, (unsigned int *)&v403 + 1, (unsigned int *)&v403, (int *)&v405 + 1))
      {
        v14 = HIDWORD(v405);
        if (HIDWORD(v405))
          goto LABEL_823;
        v17 = v140;
        v11 = v137;
        v18 = 0;
        v15 = 0;
        *v6++ = 123;
        v12 = 1;
        v19 = v139;
        v13 = v138;
        v4 = v395;
        v16 = v382;
        goto LABEL_30;
      }
      v69 = -2143485952;
      v17 = v140;
      v19 = v139;
      v13 = v138;
      v16 = v382;
      v11 = v137;
      LODWORD(v12) = v136;
LABEL_241:
      if ((_DWORD)v12)
      {
        v141 = v6 - 1;
        if (*(v6 - 1) == -2144731136)
        {
          while (v141 >= v386)
          {
            v141[1] = *v141;
            --v141;
          }
          *v386 = -2145779712;
          v6[1] = -2145845248;
          v6 += 2;
        }
        *v6 = v69;
        v15 = 0;
        v14 = 0;
        v12 = 0;
        if (v408 == 123)
        {
          v142 = v403;
          v6[1] = HIDWORD(v403);
          v6[2] = v142;
          v6 += 3;
        }
        else
        {
          ++v6;
        }
        v18 = v69;
        goto LABEL_30;
      }
      v349 = 109;
LABEL_831:
      HIDWORD(v405) = v349;
LABEL_832:
      --v409[0];
      goto LABEL_824;
    }
    v69 = -2144075776;
    switch(v408)
    {
      case '$':
LABEL_112:
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v12 = 0;
        v70 = -2146041856;
        goto LABEL_228;
      case '(':
LABEL_162:
        v94 = v409[0];
        if (v409[0] >= v9)
          goto LABEL_811;
        v95 = *v409[0];
        if (v95 == 42)
        {
          if (v9 - v409[0] < 2)
            goto LABEL_392;
          v193 = v409[0][1];
          v408 = v193;
          if ((_DWORD)v193 == 41)
            goto LABEL_392;
          v356 = v15;
          v204 = v11;
          v383 = v16;
          v363 = v19;
          v368 = v13;
          v375 = v17;
          v205 = *(_BYTE *)(*(_QWORD *)(v4 + 32) + v193);
          v206 = sub_1A3A9ADF0(v409, (unint64_t)v9, v388, 0, &v400, &v404, &v407, (int *)&v405 + 1, v4);
          v358 = v204;
          if ((v205 & 4) == 0)
          {
            if (!v206)
              goto LABEL_823;
            if (v409[0] >= v9 || (v207 = *v409[0], v207 != 41) && v207 != 58)
            {
LABEL_835:
              v350 = 160;
              goto LABEL_822;
            }
            v208 = v407;
            v387 = v404;
            v209 = -2;
            v210 = &dword_1A3ACA1D8;
            v211 = (unsigned __int8 *)&unk_1A3ACA1A8;
            v4 = v395;
            v16 = v383;
            while (1)
            {
              v212 = *(v210 - 1);
              if ((_DWORD)v208 == v212)
              {
                v213 = _pcre2_strncmp_c8_8(v387, v211, v208);
                v19 = v363;
                v17 = v375;
                if (!v213)
                  break;
              }
              v210 += 3;
              v211 += (v212 + 1);
              if (++v209 == 7)
                goto LABEL_835;
            }
            v250 = v209 + 2;
            LODWORD(v405) = v209 + 2;
            v251 = v409[0];
            v252 = v409[0] + 1;
            if (*v409[0] != 58 || v252 >= v9)
            {
              v11 = v358;
            }
            else
            {
              v11 = v358;
              if (*v252 == 41)
              {
                ++v409[0];
                ++v251;
              }
            }
            if (v250 <= 1 && *v251 != 58)
            {
              v350 = 166;
              goto LABEL_822;
            }
            v12 = (_DWORD)v209 == 0;
            v409[0] = v251 + 1;
            if (*v251 == 58)
            {
              v254 = *v210 + ((v250 > 1) << 16);
              if (v209 < 3)
                v254 = -2144796672;
              v255 = v394;
              if (v209 < 3)
                v255 = *v210;
              v394 = v255;
              v392 = (char *)(v6 + 1);
              v393 = v251 + 1;
              v386 = v6;
              *v6 = v254;
              v6 += 2;
              v13 = 1;
            }
            else
            {
              v386 = v6;
              *v6++ = *v210;
              v13 = v368;
            }
LABEL_406:
            v18 = 0;
            v15 = 0;
LABEL_407:
            v14 = 0;
            goto LABEL_30;
          }
          if (!v206)
            goto LABEL_823;
          if (v409[0] >= v9 || *v409[0] != 58)
          {
LABEL_834:
            v350 = 195;
            goto LABEL_822;
          }
          v214 = 0;
          v215 = v407;
          v216 = v404;
          v217 = &dword_1A3ACA124;
          v218 = (unsigned __int8 *)&unk_1A3ACA04C;
          while (1)
          {
            v219 = *(v217 - 1);
            if ((_DWORD)v215 == v219)
            {
              v220 = _pcre2_strncmp_c8_8(v216, v218, v215);
              LODWORD(v17) = v375;
              if (!v220)
                break;
            }
            v218 += (v219 + 1);
            ++v214;
            v217 += 2;
            if (v214 == 17)
              goto LABEL_834;
          }
          LODWORD(v405) = v214;
          v256 = *v217;
          if (v356 >= 1 && (((0xB000uLL >> v214) | (0x1430CuLL >> v214)) & 1) != 0)
          {
            if ((vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqq_s32(vdupq_n_s32(v214), (int32x4_t)xmmword_1A3ACA480), (int8x16_t)xmmword_1A3ACA490)) & 0xF) != 0)v350 = 198;
            else
              v350 = 128;
            goto LABEL_822;
          }
          if (v256 <= -2145058817)
          {
            if (v256 <= -2145189889)
            {
              if (v256 == -2147352576)
              {
                v96 = v409[0];
                v13 = v368;
                LODWORD(v17) = v375;
                v11 = v358;
                v19 = v363;
                v4 = v395;
                v16 = v383;
LABEL_718:
                v18 = 0;
                v15 = 0;
                v14 = 0;
                v12 = 0;
                *v6++ = -2147352576;
                v17 = (v17 + 1);
                v23 = v96 + 1;
                goto LABEL_20;
              }
              LODWORD(v17) = v375;
              if (v256 != -2145255424)
                goto LABEL_871;
LABEL_648:
              *v6 = -2145255424;
              v17 = (v17 + 1);
              ++v409[0];
              if ((_DWORD)v214 == 16 || (_DWORD)v214 == 14)
              {
                v6[1] = -2147352576;
                if (v358)
                {
                  v296 = v358 + 6;
                  if ((unint64_t)(v358 + 6) >= v384)
                    goto LABEL_850;
                }
                else
                {
                  v296 = *(unsigned __int16 **)(v395 + 40);
                }
                v12 = 0;
                v6 += 2;
                v11 = v296;
                *v296 = v17;
                v296[3] = 4;
                v19 = v363;
                *((_DWORD *)v296 + 2) = v363 & 0x10424E8;
              }
              else
              {
                v12 = 0;
                ++v6;
                v11 = v358;
                v19 = v363;
              }
              v13 = v368;
              v4 = v395;
              v16 = v383;
              goto LABEL_406;
            }
            if (v256 == -2145189888)
            {
              v96 = v409[0];
              v13 = v368;
              LODWORD(v17) = v375;
              v11 = v358;
              v19 = v363;
              v4 = v395;
              v16 = v383;
              LODWORD(v15) = v356;
LABEL_720:
              v314 = -2145189888;
            }
            else
            {
              LODWORD(v17) = v375;
              if (v256 != -2145124352)
                goto LABEL_871;
              v96 = v409[0];
              v11 = v358;
              v19 = v363;
              v13 = v368;
              v4 = v395;
              v16 = v383;
              LODWORD(v15) = v356;
LABEL_700:
              v314 = -2145124352;
            }
          }
          else
          {
            if (v256 <= -2144927745)
            {
              if (v256 != -2145058816 && v256 != -2144993280)
              {
LABEL_871:
                v350 = 189;
                goto LABEL_822;
              }
              goto LABEL_695;
            }
            if (v256 != -2144927744)
            {
              if (v256 != -2144862208)
              {
                if (v256 != -1879113728)
                  goto LABEL_871;
                goto LABEL_648;
              }
LABEL_695:
              *v6 = v256;
              v96 = v409[0] - 1;
              v11 = v358;
              v19 = v363;
              v13 = v368;
              v4 = v395;
              v16 = v383;
              LODWORD(v15) = v356;
LABEL_696:
              *a3 = 1;
              v312 = (uint64_t)&v96[-*(_QWORD *)(v4 + 56) - 2];
              v400 = v312;
              v6[1] = HIDWORD(v312);
              v6[2] = v312;
              v6 += 3;
              v313 = v96 + 2;
LABEL_722:
              v409[0] = v313;
              v17 = (v17 + 1);
              if ((int)v15 < 1)
                goto LABEL_392;
              if (v11)
              {
                v11 += 6;
                if ((unint64_t)v11 >= v384)
                {
LABEL_850:
                  v350 = 184;
                  goto LABEL_822;
                }
              }
              else
              {
                v11 = *(unsigned __int16 **)(v4 + 40);
              }
              v18 = 0;
              v15 = 0;
              v14 = 0;
              v12 = 0;
              *v11 = v17;
              v11[3] = 2;
              *((_DWORD *)v11 + 2) = v19 & 0x10424E8;
              goto LABEL_30;
            }
            v96 = v409[0];
            v11 = v358;
            v19 = v363;
            v13 = v368;
            v4 = v395;
            v16 = v383;
            LODWORD(v15) = v356;
LABEL_716:
            v314 = -2144927744;
          }
          *v6++ = v314;
          v313 = v96 + 1;
          goto LABEL_722;
        }
        if (v95 != 63)
        {
          v17 = (v17 + 1);
          if ((v19 & 0x2000) != 0)
          {
            v12 = 0;
            v196 = -2145779712;
          }
          else
          {
            v194 = *(_DWORD *)(v4 + 212);
            if (v194 >= 0xFFFF)
              goto LABEL_842;
            v12 = 0;
            v195 = v194 + 1;
            *(_DWORD *)(v4 + 212) = v195;
            v196 = v195 | 0x80080000;
          }
          *v6++ = v196;
          goto LABEL_406;
        }
        v96 = ++v409[0];
        if (v94 + 1 >= v9)
          goto LABEL_811;
        break;
      case ')':
LABEL_172:
        if (v11 && *v11 == (unsigned __int16)v17)
        {
          v107 = *((_DWORD *)v11 + 2);
          v108 = v11[3];
          if ((v108 & 1) != 0)
          {
            v109 = v11[2];
            if (*(_DWORD *)(v4 + 212) < v109)
              *(_DWORD *)(v4 + 212) = v109;
          }
          v12 = (v108 & 2) == 0;
          if ((v108 & 4) != 0)
            *v6++ = -2145845248;
          v19 = v107 | v19 & 0xFEFBDB17;
          if (v11 == *(unsigned __int16 **)(v4 + 40))
            v11 = 0;
          else
            v11 -= 6;
        }
        else
        {
          v12 = 1;
        }
        if ((_WORD)v17)
        {
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v17 = (v17 - 1);
          *v6++ = -2145845248;
          goto LABEL_30;
        }
        v349 = 122;
        goto LABEL_831;
      case '*':
        goto LABEL_241;
      case '+':
        v69 = -2143879168;
        goto LABEL_241;
      case '.':
LABEL_182:
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v68 = -2145976320;
        goto LABEL_233;
      default:
        goto LABEL_232;
    }
    v97 = *v96;
    v98 = -1;
    switch(*v96)
    {
      case '!':
        goto LABEL_700;
      case '&':
        goto LABEL_534;
      case '\'':
        goto LABEL_565;
      case '(':
        v409[0] = v94 + 2;
        if (v94 + 2 >= v9)
          goto LABEL_811;
        v17 = (v17 + 1);
        v240 = v94[2];
        if (v240 == 63 || v240 == 42)
        {
          v18 = 0;
          v14 = 0;
          v12 = 0;
          *v6++ = -2146500608;
          v409[0] = v94 + 1;
          v15 = 2;
          goto LABEL_30;
        }
        v380 = v16;
        v364 = v19;
        v370 = v13;
        v298 = v11;
        v378 = v17;
        if (sub_1A3A92CE0(v409, (unint64_t)v9, *(_DWORD *)(v4 + 212), 0xFFFFu, 161, (int *)&v405, (int *)&v405 + 1))
        {
          if ((int)v405 <= 0)
          {
            v350 = 115;
            goto LABEL_822;
          }
          *v6 = -2146304000;
          v299 = v409[0];
          v300 = &v409[0][-*(_QWORD *)(v395 + 56) - 2];
          v400 = (uint64_t)v300;
          v6[1] = HIDWORD(v300);
          v6[2] = (int)v300;
          v6[3] = v405;
LABEL_760:
          v6 += 4;
          goto LABEL_761;
        }
        if (HIDWORD(v405))
          goto LABEL_823;
        v315 = v409[0];
        if (v9 - v409[0] >= 10)
        {
          v316 = _pcre2_strncmp_c8_8(v409[0], "VERSION", 7);
          v315 = v409[0];
          if (!v316 && v409[0][7] != 41)
          {
            v409[0] += 7;
            v325 = v315[7];
            if (v325 == 62)
            {
              v325 = v315[8];
              v409[0] = v315 + 8;
              v326 = 1;
              v327 = 8;
            }
            else
            {
              v326 = 0;
              v327 = 7;
            }
            if (v325 != 61)
              goto LABEL_869;
            v330 = &v315[v327 + 1];
            v409[0] = v330;
            if (*v330 - 48 > 9)
              goto LABEL_869;
            HIDWORD(v405) = 0;
            if (v330 >= v9)
              goto LABEL_823;
            v331 = 0;
            v332 = &v315[v327 + 2];
            while (1)
            {
              v299 = v332 - 1;
              if (v332 - 1 >= v9)
                break;
              v333 = *v299;
              if ((v333 - 48) > 9)
              {
                v409[0] = v332 - 1;
                if (*(v332 - 1) == 46)
                {
                  v409[0] = v332;
                  if (v332 >= v9)
                    goto LABEL_869;
                  if (*v332 - 48 > 9)
                    goto LABEL_869;
                  v299 = v332 + 1;
                  v409[0] = v332 + 1;
                  if (v332 + 1 >= v9)
                    goto LABEL_869;
                  v334 = 10 * *v332;
                  if (*v299 - 48 > 9)
                  {
                    v335 = v334 - 480;
                  }
                  else
                  {
                    v299 = v332 + 2;
                    v409[0] = v332 + 2;
                    v335 = v334 + v332[1] - 528;
                  }
                  if (v299 >= v9 || *v299 != 41)
                    goto LABEL_869;
                }
                else
                {
                  v335 = 0;
                }
                *v6 = -2146107392;
                v6[1] = v326;
                v6[2] = v331;
                v6[3] = v335;
                goto LABEL_760;
              }
              v331 = v333 + 10 * v331 - 48;
              ++v332;
              if (v331 >= 0x3E9)
              {
                HIDWORD(v405) = 179;
                v352 = v332 - 1;
                goto LABEL_847;
              }
            }
            v409[0] = v332 - 1;
LABEL_869:
            v350 = 179;
            goto LABEL_822;
          }
        }
        v317 = *v315;
        if (v317 == 82 && v9 - v315 >= 2)
        {
          if (v315[1] == 38)
          {
            v409[0] = v315 + 1;
            if (!sub_1A3A9ADF0(v409, (unint64_t)v9, v388, 0x29u, &v400, &v404, &v407, (int *)&v405 + 1, v395))goto LABEL_823;
            v318 = -2146238464;
            goto LABEL_758;
          }
LABEL_736:
          v409[0] = v315 - 1;
          if (!sub_1A3A9ADF0(v409, (unint64_t)v9, v388, 0x29u, &v400, &v404, &v407, (int *)&v405 + 1, v395))goto LABEL_823;
          v322 = v407;
          v323 = v404;
          if (v407 == 6)
          {
            if (!_pcre2_strncmp_c8_8(v404, "DEFINE", 6))
            {
              *v6 = -2146435072;
              v299 = --v409[0];
              *(_QWORD *)(v6 + 1) = __ROR8__(v400, 32);
              v6 += 3;
LABEL_761:
              if (v299 >= v9 || *v299 != 41)
              {
                v350 = 124;
                goto LABEL_822;
              }
              v15 = 0;
              v14 = 0;
              v12 = 0;
              v409[0] = v299 + 1;
              v13 = v370;
              v17 = v378;
              v11 = v298;
              v19 = v364;
              v18 = 0;
              v4 = v395;
              goto LABEL_448;
            }
          }
          else if ((int)v407 < 2)
          {
            LODWORD(v324) = 1;
LABEL_751:
            LODWORD(v405) = v324;
            v328 = *v323 != 82 || (int)v324 < (int)v322;
            if (v328)
              v329 = -458752;
            else
              v329 = -262144;
            v318 = v329 - 2145910784;
LABEL_758:
            *v6 = v318;
            v299 = --v409[0];
LABEL_759:
            v6[1] = v407;
            *((_QWORD *)v6 + 1) = __ROR8__(v400, 32);
            goto LABEL_760;
          }
          v324 = 1;
          do
          {
            if (v323[v324] - 48 > 9)
              goto LABEL_751;
            ++v324;
          }
          while (v322 != v324);
          LODWORD(v324) = v322;
          goto LABEL_751;
        }
        if (v317 == 60)
        {
          v321 = 62;
        }
        else
        {
          if (v317 != 39)
            goto LABEL_736;
          v321 = 39;
        }
        if (!sub_1A3A9ADF0(v409, (unint64_t)v9, v388, v321, &v400, &v404, &v407, (int *)&v405 + 1, v395))goto LABEL_823;
        *v6 = -2146369536;
        v299 = v409[0];
        goto LABEL_759;
      case '*':
        goto LABEL_716;
      case '+':
        if (v9 - v96 >= 2 && v94[2] - 48 < 0xA)
          goto LABEL_509;
        v350 = 129;
        goto LABEL_822;
      case '-':
        if (v9 - v96 < 2 || v94[2] - 48 >= 0xA)
          goto LABEL_510;
LABEL_509:
        v98 = *(_DWORD *)(v4 + 212);
LABEL_167:
        v99 = v16;
        v100 = v13;
        v101 = v19;
        v102 = v17;
        v103 = v11;
        if (!sub_1A3A92CE0(v409, (unint64_t)v9, v98, 0xFFFFu, 161, (int *)&v405, (int *)&v405 + 1))
          goto LABEL_823;
        v104 = v405;
        if ((v405 & 0x80000000) == 0)
        {
          v17 = v102;
          v105 = v409[0];
          v4 = v395;
          v16 = v99;
          if (v409[0] >= v9)
            goto LABEL_811;
          v11 = v103;
          v19 = v101;
          v13 = v100;
          if (*v409[0] != 41)
            goto LABEL_811;
LABEL_171:
          v18 = 0;
          v15 = 0;
          v14 = 0;
          *v6 = v104 | 0x80200000;
          v106 = &v105[-*(_QWORD *)(v4 + 56)];
          v400 = (uint64_t)v106;
          v409[0] = v105 + 1;
          v6[1] = HIDWORD(v106);
          v6[2] = (int)v106;
LABEL_453:
          v6 += 3;
          goto LABEL_234;
        }
        HIDWORD(v405) = 115;
        v4 = v395;
        goto LABEL_832;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        goto LABEL_167;
      case '<':
        if (v9 - v96 < 2)
          goto LABEL_564;
        v241 = v94[2];
        v97 = 62;
        if (v241 > 0x3D || ((1 << v241) & 0x2000040200000000) == 0)
          goto LABEL_565;
        if (v241 == 33)
          v242 = -2144993280;
        else
          v242 = -2144862208;
        if (v241 == 61)
          v243 = -2145058816;
        else
          v243 = v242;
        *v6 = v243;
        goto LABEL_696;
      case '=':
        goto LABEL_720;
      case '>':
        goto LABEL_718;
      case 'C':
        v96 = v94 + 2;
        v409[0] = v94 + 2;
        if (v94 + 2 >= v9)
          goto LABEL_811;
        if (v406 && (v19 & 4) != 0 && v406 == v6 - 4)
        {
          if (*(v6 - 1) == 255)
            v244 = v406;
          else
            v244 = v6;
        }
        else
        {
          v244 = v6;
        }
        v406 = v244;
        v278 = *v96;
        if (v278 == 41 || (v278 - 48) < 0xA)
        {
          v279 = v8;
          v281 = v13;
          v282 = v11;
          v285 = 0;
          *v244 = -2147090432;
          while (v96 < v9 && *v96 - 48 <= 9)
          {
            v409[0] = v96 + 1;
            v286 = *v96 + 10 * v285;
            v285 = v286 - 48;
            ++v96;
            if (v286 > 303)
            {
              v350 = 138;
              goto LABEL_822;
            }
          }
          v6 = v244 + 4;
          v244[3] = v285;
          goto LABEL_712;
        }
        v279 = v8;
        v280 = 96;
        v281 = v13;
        v282 = v11;
        v283 = 0;
        while (v280 != v278)
        {
          v284 = &_pcre2_callout_start_delims_8[v283++];
          v280 = v284[1];
          if (!v280)
            goto LABEL_845;
        }
        LODWORD(v405) = v283;
        v307 = _pcre2_callout_end_delims_8[v283];
        if (!v307)
        {
LABEL_845:
          v350 = 182;
          goto LABEL_822;
        }
        *v244 = -2147024896;
        v308 = v94 + 3;
        v409[0] = v94 + 3;
        v309 = v94 + 2;
        while (2)
        {
          if (v308 < v9)
          {
            if (v307 != *v308 || (v308 = v309 + 2, v409[0] = v309 + 2, v309 + 2 < v9) && v307 == *v308)
            {
              v309 = v308++;
              v409[0] = v308;
              continue;
            }
            if ((unint64_t)(v308 - v96) >> 32)
            {
              v350 = 172;
              goto LABEL_822;
            }
            v244[3] = (_DWORD)v308 - (_DWORD)v96;
            v319 = &v96[-*(_QWORD *)(v395 + 56)];
            v400 = (uint64_t)v319;
            v6 = v244 + 6;
            v244[4] = HIDWORD(v319);
            v244[5] = (int)v319;
            v96 = v309 + 2;
LABEL_712:
            if (v96 >= v9 || *v96 != 41)
            {
              v350 = 139;
              goto LABEL_822;
            }
            v14 = 0;
            v12 = 0;
            v409[0] = v96 + 1;
            v4 = v395;
            v244[1] = (_DWORD)v96 + 1 - *(_DWORD *)(v395 + 56);
            v244[2] = 0;
            v15 = (v15 - 1);
            v16 = 1;
            v11 = v282;
            v13 = v281;
            v320 = v279;
            v18 = 0;
            v8 = v320;
            goto LABEL_30;
          }
          break;
        }
        v351 = 181;
        goto LABEL_857;
      case 'P':
        v409[0] = v94 + 2;
        if (v94 + 2 >= v9)
          goto LABEL_811;
        v245 = v94[2];
        if (v245 != 60)
        {
          if (v245 == 61)
          {
            v62 = v16;
            v369 = v13;
            v246 = v19;
            v355 = v4;
            v301 = v17;
            v302 = v11;
            if (!sub_1A3A9ADF0(v409, (unint64_t)v9, v388, 0x29u, &v400, &v404, &v407, (int *)&v405 + 1, v355))goto LABEL_823;
            v11 = v302;
            v17 = v301;
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v249 = -2147221504;
          }
          else
          {
            if (v245 != 62)
            {
              v350 = 141;
              goto LABEL_822;
            }
LABEL_534:
            v62 = v16;
            v369 = v13;
            v246 = v19;
            v353 = v4;
            v247 = v17;
            v248 = v11;
            if (!sub_1A3A9ADF0(v409, (unint64_t)v9, v388, 0x29u, &v400, &v404, &v407, (int *)&v405 + 1, v353))goto LABEL_823;
            v11 = v248;
            v17 = v247;
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v249 = -2145320960;
          }
          *v6 = v249;
          v6[1] = v407;
          *((_QWORD *)v6 + 1) = __ROR8__(v400, 32);
          v6 += 4;
          v12 = 1;
          v19 = v246;
          v13 = v369;
          v4 = v395;
          goto LABEL_231;
        }
LABEL_564:
        v97 = 62;
LABEL_565:
        v380 = v16;
        v365 = v13;
        v376 = v17;
        v257 = v19;
        v354 = v4;
        v258 = v11;
        v259 = sub_1A3A9ADF0(v409, (unint64_t)v9, v388, v97, &v400, &v404, &v407, (int *)&v405 + 1, v354);
        v260 = v376;
        if (!v259)
          goto LABEL_823;
        v11 = v258;
        v4 = v395;
        v261 = *(_DWORD *)(v395 + 212);
        if (v261 >= 0xFFFF)
        {
LABEL_842:
          v350 = 197;
          goto LABEL_822;
        }
        v262 = v261 + 1;
        *(_DWORD *)(v395 + 212) = v262;
        *v6++ = v262 | 0x80080000;
        v263 = *(unsigned __int16 *)(v395 + 176);
        if (v263 >> 4 >= 0x271)
        {
          v350 = 149;
          goto LABEL_822;
        }
        v19 = v257;
        v264 = v407;
        if (v407 + 3 > *(unsigned __int16 *)(v395 + 178))
          *(_WORD *)(v395 + 178) = v407 + 3;
        if (!v263)
        {
          v271 = 0;
          v266 = 0;
          v265 = 0;
LABEL_585:
          v17 = (v260 + 1);
          LODWORD(v405) = v266;
          if ((int)v266 < (int)v271)
          {
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v12 = 0;
            goto LABEL_447;
          }
          v377 = v265;
          v275 = v8;
          v276 = *(unsigned int *)(v395 + 200);
          if (v276 <= v271)
          {
            v303 = v8;
            v361 = v11;
            v304 = v17;
            v305 = (void *)(**(uint64_t (***)(uint64_t, _QWORD))v395)(32 * v276, *(_QWORD *)(*(_QWORD *)v395 + 16));
            if (!v305)
            {
              v350 = 121;
              goto LABEL_822;
            }
            v277 = v305;
            memcpy(v305, *(const void **)(v395 + 192), 16 * *(unsigned int *)(v395 + 200));
            if (*(_DWORD *)(v395 + 200) >= 0x15u)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v395 + 8))(*(_QWORD *)(v395 + 192), *(_QWORD *)(*(_QWORD *)v395 + 16));
            *(_QWORD *)(v395 + 192) = v277;
            *(_DWORD *)(v395 + 200) = 2 * v276;
            v271 = *(unsigned __int16 *)(v395 + 176);
            v17 = v304;
            v11 = v361;
            v19 = v257;
            v275 = v303;
          }
          else
          {
            v277 = *(void **)(v395 + 192);
          }
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v12 = 0;
          v306 = (uint64_t)v277 + 16 * v271;
          *(_QWORD *)v306 = v404;
          *(_WORD *)(v306 + 12) = v264;
          *(_DWORD *)(v306 + 8) = *(_DWORD *)(v395 + 212);
          v13 = v365;
          *(_WORD *)(v306 + 14) = v377;
          *(_WORD *)(v395 + 176) = v271 + 1;
          v16 = v380;
          v8 = v275;
          goto LABEL_30;
        }
        v360 = v11;
        v265 = 0;
        v266 = 0;
        v267 = v404;
        v268 = *(_QWORD *)(v395 + 192) + 8;
        while ((_DWORD)v264 == *(unsigned __int16 *)(v268 + 4))
        {
          v269 = _pcre2_strncmp_8(v267, *(unsigned __int8 **)(v268 - 8), v264);
          v19 = v257;
          v260 = v376;
          v270 = *(_DWORD *)(v395 + 212);
          if (v269)
            goto LABEL_578;
          if (*(_DWORD *)v268 == v270)
          {
            v271 = *(unsigned __int16 *)(v395 + 176);
LABEL_580:
            v11 = v360;
            goto LABEL_585;
          }
          if ((v257 & 0x40) == 0)
          {
            v350 = 143;
            goto LABEL_822;
          }
          v265 = 1;
          *(_WORD *)(v268 + 6) = 1;
          *(_DWORD *)(v395 + 296) = 1;
LABEL_579:
          v268 += 16;
          ++v266;
          v271 = *(unsigned __int16 *)(v395 + 176);
          if (v266 >= v271)
            goto LABEL_580;
        }
        v270 = *(_DWORD *)(v395 + 212);
LABEL_578:
        if (*(_DWORD *)v268 == v270)
        {
          v350 = 165;
          goto LABEL_822;
        }
        goto LABEL_579;
      case 'R':
        LODWORD(v405) = 0;
        v105 = v94 + 2;
        v409[0] = v94 + 2;
        if (v94 + 2 >= v9 || *v105 != 41)
        {
          v350 = 158;
          goto LABEL_822;
        }
        v104 = 0;
        goto LABEL_171;
      default:
LABEL_510:
        if (v11)
        {
          v11 += 6;
          if ((unint64_t)v11 >= v384)
            goto LABEL_850;
        }
        else
        {
          v11 = *(unsigned __int16 **)(v4 + 40);
        }
        *v11 = v17 + 1;
        v11[3] = 0;
        *((_DWORD *)v11 + 2) = v19 & 0x10424E8;
        if (*v96 == 124)
        {
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v12 = 0;
          v272 = *(_WORD *)(v4 + 212);
          v11[1] = v272;
          v11[2] = v272;
          v11[3] = 1;
          *(_DWORD *)(v4 + 208) |= 0x200000u;
          *v6++ = -2145779712;
          v409[0] = v94 + 2;
          v17 = (v17 + 1);
          goto LABEL_30;
        }
        *(_DWORD *)(v11 + 1) = 0;
        v402 = 0;
        if (*v96 == 94)
        {
          v273 = 0;
          v274 = v19 & 0xFEFFDB57;
          v96 = v94 + 2;
          v409[0] = v94 + 2;
        }
        else
        {
          v273 = 1;
          v274 = v19;
        }
        if (v96 >= v9)
          goto LABEL_811;
        v287 = (int *)&v402 + 1;
        break;
    }
    do
    {
      v288 = *v96;
      v289 = 1;
      if (v288 == 41 || v288 == 58)
        goto LABEL_639;
      v290 = v96 + 1;
      v409[0] = v96 + 1;
      v291 = *v96;
      if (v291 <= 0x6C)
      {
        if (*v96 <= 0x54u)
        {
          if (v291 != 45)
          {
            if (v291 != 74)
              goto LABEL_855;
            *v287 |= 0x40u;
            *(_DWORD *)(v4 + 208) |= 0x400u;
            goto LABEL_636;
          }
          if (!v273)
          {
            v351 = 194;
            goto LABEL_857;
          }
          v273 = 0;
          v287 = (int *)&v402;
          goto LABEL_636;
        }
        if (v291 == 85)
        {
          v292 = *v287 | 0x40000;
        }
        else
        {
          if (v291 != 105)
            goto LABEL_855;
          v292 = *v287 | 8;
        }
LABEL_635:
        *v287 = v292;
        goto LABEL_636;
      }
      if (*v96 <= 0x72u)
      {
        if (v291 == 109)
        {
          v292 = *v287 | 0x400;
        }
        else
        {
          if (v291 != 110)
            goto LABEL_855;
          v292 = *v287 | 0x2000;
        }
        goto LABEL_635;
      }
      if (v291 == 115)
      {
        v292 = *v287 | 0x20;
        goto LABEL_635;
      }
      if (v291 != 120)
      {
LABEL_855:
        v351 = 111;
LABEL_857:
        HIDWORD(v405) = v351;
        v409[0] = v96;
        goto LABEL_823;
      }
      v293 = *v287;
      *v287 |= 0x80u;
      if (v290 < v9 && *v290 == 120)
      {
        *v287 = v293 | 0x1000080;
        v96 += 2;
        v409[0] = v96;
        continue;
      }
LABEL_636:
      v96 = v290;
    }
    while (v96 < v9);
    v289 = 0;
LABEL_639:
    v294 = v402;
    if ((HIDWORD(v402) & 0x1000080) != 0x80 && (v402 & 0x80) == 0)
    {
      if ((v289 & 1) == 0)
        goto LABEL_811;
    }
    else
    {
      v294 = v402 | 0x1000000;
      LODWORD(v402) = v402 | 0x1000000;
      if ((v289 & 1) == 0)
        goto LABEL_811;
    }
    v297 = (HIDWORD(v402) | v274) & ~v294;
    v409[0] = v96 + 1;
    if (*v96 == 41)
    {
      if ((unint64_t)v11 > *(_QWORD *)(v4 + 40) && *(v11 - 6) == (unsigned __int16)v17)
        v11 -= 6;
      else
        *v11 = v17;
    }
    else
    {
      *v6++ = -2145779712;
      v17 = (v17 + 1);
    }
    if ((_DWORD)v297 == (_DWORD)v19)
    {
LABEL_392:
      v18 = 0;
      v15 = 0;
      v14 = 0;
      v12 = 0;
      goto LABEL_30;
    }
    v18 = 0;
    v15 = 0;
    v14 = 0;
    v12 = 0;
    *v6 = -2145714176;
    v6[1] = v297;
    v6 += 2;
    v19 = v297;
LABEL_30:
    v5 = v409[0];
    if (v409[0] >= v9)
    {
      LOBYTE(v7) = v391;
      if ((_DWORD)v13)
      {
        v346 = 160;
        goto LABEL_813;
      }
LABEL_804:
      v343 = v17;
      v344 = sub_1A3A9A9F0((int)v5, &v406, v396, v6, v4);
      if ((v7 & 8) != 0)
      {
        v345 = -2146041856;
LABEL_808:
        *v344 = -2145845248;
        v344[1] = v345;
        v344 += 2;
      }
      else if ((v7 & 4) != 0)
      {
        v345 = -2145910779;
        goto LABEL_808;
      }
      if ((unint64_t)v344 < v397)
      {
        *v344 = 0x80000000;
        if (!v343)
          return 0;
LABEL_811:
        v346 = 114;
LABEL_813:
        HIDWORD(v405) = v346;
        goto LABEL_824;
      }
LABEL_812:
      v346 = 163;
      goto LABEL_813;
    }
  }
  if (v408 <= 62)
  {
    v69 = -2144075776;
    switch(v408)
    {
      case '$':
        goto LABEL_112;
      case '(':
        goto LABEL_162;
      case ')':
        goto LABEL_172;
      case '*':
        goto LABEL_241;
      case '+':
        goto LABEL_115;
      case '.':
        goto LABEL_182;
      default:
        goto LABEL_232;
    }
  }
  if (v408 > 93)
    goto LABEL_132;
  if (v408 == 63)
  {
LABEL_115:
    v15 = 0;
    v14 = 0;
    v12 = 0;
    if (v408 == 63)
      v71 = 0x20000;
    else
      v71 = 0x10000;
    v72 = v71 + v18;
    v73 = 0x3FFFFFFFFFFFFFFFLL;
    if (v18 == -2143485952)
      v73 = 0x3FFFFFFFFFFFFFFDLL;
    v6[v73] = v72;
    v18 = 0;
    goto LABEL_30;
  }
LABEL_123:
  if (v408 != 91)
  {
    if (v408 != 92)
      goto LABEL_232;
    v74 = v11;
    v380 = v16;
    v365 = v13;
    v373 = v17;
    v75 = v409[0];
    v401 = v409[0];
    v76 = v19;
    v77 = _pcre2_check_escape_8(v409, (unint64_t)v9, &v408, (int *)&v405 + 1, v19, *(_DWORD *)(*(_QWORD *)v4 + 64), 0, v4);
    if (!HIDWORD(v405))
    {
      v78 = v77;
      v17 = v373;
      v19 = v76;
      v11 = v74;
      goto LABEL_440;
    }
    while (1)
    {
      v17 = v373;
      if ((v391 & 2) == 0)
        goto LABEL_823;
      v11 = v74;
      v409[0] = v75;
      if (v75 >= v9)
      {
        v78 = 0;
        v408 = 92;
        v19 = v76;
        v4 = v395;
        goto LABEL_440;
      }
      v78 = 0;
      v409[0] = v75 + 1;
      v79 = *v75;
      v408 = v79;
      v19 = v76;
      v4 = v395;
      if ((_DWORD)v8 && v79 >= 0xC0)
      {
        if ((v79 & 0x20) == 0)
        {
          v78 = 0;
          v409[0] = v75 + 2;
          v408 = v75[1] & 0x3F | ((v79 & 0x1F) << 6);
          goto LABEL_440;
        }
        v202 = v75[1] & 0x3F;
        if ((v79 & 0x10) != 0)
        {
          if ((v79 & 8) != 0)
          {
            v221 = v75[2] & 0x3F;
            v222 = v75[3] & 0x3F;
            v223 = v75[4] & 0x3F;
            v78 = 0;
            if ((v79 & 4) == 0)
            {
              v408 = ((v79 & 3) << 24) | (v202 << 18) | (v221 << 12) | (v222 << 6) | v223;
              v409[0] = v75 + 5;
              goto LABEL_440;
            }
            v408 = ((v79 & 1) << 30) | (v202 << 24) | (v221 << 18) | (v222 << 12) | (v223 << 6) | v75[5] & 0x3F;
            v203 = v75 + 6;
          }
          else
          {
            v78 = 0;
            v408 = ((v79 & 7) << 18) | (v202 << 12) | ((v75[2] & 0x3F) << 6) | v75[3] & 0x3F;
            v203 = v75 + 4;
          }
        }
        else
        {
          v78 = 0;
          v408 = ((v79 & 0xF) << 12) | (v202 << 6) | v75[2] & 0x3F;
          v203 = v75 + 3;
        }
        v409[0] = v203;
      }
LABEL_440:
      if (!v78)
      {
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v224 = v408;
LABEL_446:
        *v6++ = v224;
        v12 = 1;
LABEL_447:
        v13 = v365;
LABEL_448:
        v16 = v380;
        goto LABEL_30;
      }
      if ((v78 & 0x80000000) != 0)
      {
        v225 = &v409[0][~*(_QWORD *)(v4 + 56)];
        *v6 = -v78 | 0x80030000;
        v13 = v365;
        v16 = v380;
        if (v78 >= 0xFFFFFFF7)
        {
          v226 = v4 + 8 * -v78;
          v228 = *(_QWORD *)(v226 + 88);
          v227 = (unsigned __int8 **)(v226 + 88);
          v18 = 0;
          v15 = 0;
          v14 = 0;
          if (v228 == -1)
            *v227 = v225;
          v12 = 1;
          ++v6;
          goto LABEL_30;
        }
        v18 = 0;
        v15 = 0;
        v14 = 0;
        *(_QWORD *)(v6 + 1) = __ROR8__(v225, 32);
        goto LABEL_453;
      }
      switch(v78)
      {
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
          if ((v19 & 0x20000) == 0)
            goto LABEL_444;
          v13 = v365;
          v16 = v380;
          if (v78 - 7 > 4)
            v229 = -2145910769;
          else
            v229 = dword_1A3ACA430[v78 - 7];
          v18 = 0;
          *v6 = v229;
          v12 = 1;
          if (v78 > 0xB)
            goto LABEL_583;
          v237 = 1 << v78;
          if (((1 << v78) & 0xC0) != 0)
          {
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v238 = 196621;
          }
          else if ((v237 & 0x300) != 0)
          {
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v238 = 458752;
          }
          else
          {
            if ((v237 & 0xC00) == 0)
            {
LABEL_583:
              ++v6;
              v15 = 0;
              v14 = 0;
              goto LABEL_30;
            }
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v238 = 589824;
          }
          v6[1] = v238;
          v6 += 2;
          goto LABEL_30;
        case 0xCu:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
LABEL_444:
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v224 = v78 - 2145910784;
          goto LABEL_446;
        case 0xEu:
          if ((v19 & 0x100000) == 0)
          {
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v224 = -2145910770;
            goto LABEL_446;
          }
          v74 = v11;
          v239 = 183;
          goto LABEL_582;
        case 0xFu:
        case 0x10u:
          v74 = v11;
          LODWORD(v398) = 0;
          v399 = 0;
          if (!sub_1A3A9AA74((unint64_t *)v409, &v398, (_WORD *)&v399 + 1, &v399, (_DWORD *)&v405 + 1, v4))continue;
          v18 = 0;
          v15 = 0;
          v14 = 0;
          if (v78 == 15)
            v230 = 16;
          else
            v230 = 15;
          if ((_DWORD)v398)
            v231 = v230;
          else
            v231 = v78;
          v232 = (unsigned __int16)v399 | (HIWORD(v399) << 16);
          *v6 = v231 - 2145910784;
          v6[1] = v232;
          v6 += 2;
          v12 = 1;
          v13 = v365;
          v17 = v373;
          v19 = v76;
          v16 = v380;
          v11 = v74;
          goto LABEL_30;
        case 0x1Bu:
        case 0x1Cu:
          if (v409[0] < v9)
          {
            v233 = *v409[0];
            if (v233 == 39 || v233 == 60 || v233 == 123)
            {
              v359 = v11;
              if (v233 == 39)
                v234 = 39;
              else
                v234 = 125;
              if (v233 == 60)
                v235 = 62;
              else
                v235 = v234;
              v236 = v233 == 39 || v233 == 60;
              if (v78 != 27 || !v236)
                goto LABEL_874;
              v398 = v409[0] + 1;
              if (sub_1A3A92CE0(&v398, (unint64_t)v9, *(_DWORD *)(v4 + 212), 0xFFFFu, 161, (int *)&v405, (int *)&v405 + 1))
              {
                v105 = v398;
                if (v398 < v9 && v235 == *v398)
                {
                  v104 = v405;
                  v13 = v365;
                  v17 = v373;
                  v11 = v359;
                  v19 = v76;
                  v16 = v380;
                  goto LABEL_171;
                }
                HIDWORD(v405) = 157;
                goto LABEL_692;
              }
              if (!HIDWORD(v405))
              {
LABEL_874:
                if (sub_1A3A9ADF0(v409, (unint64_t)v9, v388, v235, &v400, &v404, &v407, (int *)&v405 + 1, v4))
                {
                  v18 = 0;
                  v15 = 0;
                  v14 = 0;
                  if (v235 == 125 || v78 == 28)
                    v311 = -2147221504;
                  else
                    v311 = -2145320960;
                  *v6 = v311;
                  v6[1] = v407;
                  *((_QWORD *)v6 + 1) = __ROR8__(v400, 32);
                  v6 += 4;
                  v12 = 1;
                  v13 = v365;
                  v17 = v373;
                  v11 = v359;
                  v19 = v76;
                  v16 = v380;
                  goto LABEL_30;
                }
              }
LABEL_692:
              v74 = v359;
              continue;
            }
          }
          v74 = v11;
          if (v78 == 27)
            v239 = 157;
          else
            v239 = 169;
LABEL_582:
          HIDWORD(v405) = v239;
          break;
        default:
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v12 = 0;
          *v6++ = v78 - 2145910784;
          goto LABEL_447;
      }
    }
  }
  v110 = v409[0];
  if (v9 - v409[0] >= 6)
  {
    v111 = v11;
    v112 = v16;
    v113 = v13;
    v114 = v19;
    v115 = v17;
    if (_pcre2_strncmp_c8_8(v409[0], "[:<:]]", 6)
      && _pcre2_strncmp_c8_8(v409[0], "[:>:]]", 6))
    {
      v110 = v409[0];
      v17 = v115;
      v19 = v114;
      v13 = v113;
      v16 = v112;
      v11 = v111;
      goto LABEL_187;
    }
    *v6 = -2145910779;
    v197 = v6 + 2;
    v198 = v409[0];
    if (v409[0][2] == 60)
    {
      v6[1] = -2145189888;
    }
    else
    {
      v6[1] = -2145058816;
      *a3 = 1;
      v197 = v6 + 4;
      *((_QWORD *)v6 + 1) = 0;
    }
    v17 = v115;
    v19 = v114;
    v11 = v111;
    v13 = v113;
    v16 = v112;
    if ((v19 & 0x20000) != 0)
    {
      v200 = v197 + 2;
      v197[1] = 589824;
      v201 = -2145910768;
    }
    else
    {
      v200 = v197 + 1;
      v201 = -2145910773;
    }
    v18 = 0;
    v15 = 0;
    v14 = 0;
    *v197 = v201;
    *v200 = -2145845248;
    v6 = v200 + 1;
    v409[0] = v198 + 6;
LABEL_234:
    v12 = 1;
    goto LABEL_30;
  }
LABEL_187:
  if (v110 < v9)
  {
    v116 = *v110;
    if (v116 <= 0x3D && ((1 << v116) & 0x2400400000000000) != 0)
    {
      v117 = v11;
      v118 = v16;
      v119 = v13;
      v120 = v19;
      v121 = v17;
      v122 = sub_1A3A9B104(v110, (uint64_t)v9, &v401);
      v110 = v409[0];
      if (!v122)
      {
        v17 = v121;
        v19 = v120;
        v13 = v119;
        v16 = v118;
        v11 = v117;
        goto LABEL_192;
      }
      --v409[0];
      if (*v110 == 58)
        v350 = 112;
      else
        v350 = 113;
LABEL_822:
      HIDWORD(v405) = v350;
      goto LABEL_823;
    }
  }
LABEL_192:
  if (v110 < v9)
  {
    v123 = 0;
    while (1)
    {
      v409[0] = v110 + 1;
      v124 = *v110;
      if ((_DWORD)v8 && v124 >= 0xC0)
      {
        if ((v124 & 0x20) != 0)
        {
          v126 = v110[1] & 0x3F;
          if ((v124 & 0x10) != 0)
          {
            if ((v124 & 8) != 0)
            {
              v127 = v110[2] & 0x3F;
              v128 = v110[3] & 0x3F;
              v129 = v110[4] & 0x3F;
              if ((v124 & 4) != 0)
              {
                v124 = ((v124 & 1) << 30) | (v126 << 24) | (v127 << 18) | (v128 << 12) | (v129 << 6) | v110[5] & 0x3F;
                v110 += 6;
              }
              else
              {
                v124 = ((v124 & 3) << 24) | (v126 << 18) | (v127 << 12) | (v128 << 6) | v129;
                v110 += 5;
              }
            }
            else
            {
              v124 = ((v124 & 7) << 18) | (v126 << 12) | ((v110[2] & 0x3F) << 6) | v110[3] & 0x3F;
              v110 += 4;
            }
          }
          else
          {
            v124 = ((v124 & 0xF) << 12) | (v126 << 6) | v110[2] & 0x3F;
            v110 += 3;
          }
          v409[0] = v110;
        }
        else
        {
          v409[0] = v110 + 2;
          v125 = v110[1] & 0x3F | ((v124 & 0x1F) << 6);
          v110 += 2;
          v124 = v125;
        }
      }
      else
      {
        ++v110;
      }
      if (v124 == 92)
      {
        v408 = 92;
        if (v110 < v9 && *v110 == 69)
        {
          v409[0] = ++v110;
          v124 = 92;
        }
        else
        {
          if (v9 - v110 < 3)
            goto LABEL_257;
          v131 = v11;
          v132 = v16;
          v133 = v13;
          v134 = v19;
          v135 = v17;
          if (_pcre2_strncmp_c8_8(v110, "Q\\E", 3))
          {
            v124 = v408;
            v17 = v135;
            v19 = v134;
            v13 = v133;
            v16 = v132;
            v11 = v131;
            goto LABEL_255;
          }
          v110 = v409[0] + 3;
          v409[0] += 3;
          v124 = 92;
          v17 = v135;
          v19 = v134;
          v13 = v133;
          v16 = v132;
          v11 = v131;
        }
      }
      else if ((v19 & 0x1000000) == 0 || (v124 != 32 ? (v130 = v124 == 9) : (v130 = 1), !v130))
      {
        v408 = v124;
        if (v123 || v124 != 94)
          goto LABEL_255;
        v123 = 1;
      }
      if (v110 >= v9)
        goto LABEL_254;
    }
  }
  v123 = 0;
  v124 = 91;
LABEL_254:
  v408 = v124;
LABEL_255:
  if (v124 == 93 && (*(_BYTE *)(v4 + 204) & 1) != 0)
  {
    v199 = v123;
    v18 = 0;
    v15 = 0;
    v14 = 0;
    if (v199)
      v68 = -2146697216;
    else
      v68 = -2146762752;
    goto LABEL_233;
  }
LABEL_257:
  v367 = v13;
  v357 = v11;
  v143 = 0;
  v144 = 0;
  if (v123)
    v145 = -2146566144;
  else
    v145 = -2146828288;
  *v6 = v145;
  v146 = v6 + 1;
  while (1)
  {
    if (v144)
    {
      if (v408 == 92 && v409[0] < v9 && *v409[0] == 69)
      {
        v144 = 0;
        ++v409[0];
        goto LABEL_318;
      }
LABEL_303:
      v163 = 0;
      v164 = 3;
      goto LABEL_304;
    }
    if ((v19 & 0x1000000) != 0 && (v408 == 9 || v408 == 32))
    {
      v144 = 0;
      goto LABEL_318;
    }
    if (v408 != 91)
      break;
    if (v9 - v409[0] < 3)
      goto LABEL_303;
    v147 = *v409[0];
    v328 = v147 > 0x3D;
    v148 = (1 << v147) & 0x2400400000000000;
    if (v328 || v148 == 0)
      goto LABEL_303;
    v150 = v16;
    v151 = v19;
    v152 = v17;
    if (sub_1A3A9B104(v409[0], (uint64_t)v9, &v401))
    {
      if (v143 == 1)
        goto LABEL_836;
      v153 = v409[0];
      if (*v409[0] != 58)
      {
        v349 = 113;
        goto LABEL_831;
      }
      v154 = ++v409[0];
      v155 = v153[1];
      if (v155 == 94)
      {
        v154 = v153 + 2;
        v409[0] = v153 + 2;
      }
      v156 = v401;
      v157 = sub_1A3A9B1A0(v154, (int)v401 - (int)v154);
      if (v157 < 0)
      {
        v346 = 130;
        goto LABEL_813;
      }
      v409[0] = v156 + 2;
      if (v156 + 2 < v389 && v156[2] == 45 && v156[3] != 93)
      {
LABEL_836:
        v346 = 150;
        goto LABEL_813;
      }
      v17 = v152;
      v19 = v151;
      v16 = v150;
      if ((v19 & 0x20000) == 0)
        goto LABEL_335;
      if (((0xBFFFAFFuLL >> (2 * v157)) & 1) != 0)
      {
        v143 = 0;
        v144 = 0;
        v177 = dword_1A3AC9FDC[(2 * v157) | 1];
        v178 = dword_1A3AC9FDC[2 * v157];
        if (v155 == 94)
          v179 = -2145910769;
        else
          v179 = -2145910768;
        *v146 = v179;
        v146[1] = v177 | (v178 << 16);
      }
      else
      {
        if (((0xAAA2280uLL >> ((2 * v157) | 1u)) & 1) == 0)
        {
          v143 = 0;
          v144 = 0;
          if (v155 == 94)
            v158 = -2145910766;
          else
            v158 = -2145910765;
          *v146++ = v158;
          goto LABEL_318;
        }
LABEL_335:
        v143 = 0;
        v144 = 0;
        if (v155 == 94)
          v175 = -2145583104;
        else
          v175 = -2145648640;
        *v146 = v175;
        v146[1] = v157;
      }
      v146 += 2;
      goto LABEL_318;
    }
    v163 = 0;
    v164 = 3;
    v17 = v152;
    v19 = v151;
    v16 = v150;
LABEL_304:
    v165 = v408;
    if (v143 == 1)
    {
      v166 = *(v146 - 2);
      if (v408 == v166)
      {
        v143 = 0;
        --v146;
      }
      else
      {
        if (v166 > v408)
        {
          v349 = 108;
          goto LABEL_831;
        }
        if (v163 && *(v146 - 1) == -2145452032)
        {
          *(v146 - 1) = -2145517568;
          v165 = v408;
        }
        v143 = 0;
        *v146++ = v165;
      }
    }
    else
    {
      *v146++ = v408;
      v143 = v164;
    }
LABEL_318:
    v168 = v409[0];
    if (v409[0] >= v9)
    {
      v350 = 106;
      goto LABEL_822;
    }
    ++v409[0];
    v169 = *v168;
    v408 = v169;
    if ((_DWORD)v8 && v169 >= 0xC0)
    {
      if ((v169 & 0x20) != 0)
      {
        v170 = v168[1] & 0x3F;
        if ((v169 & 0x10) != 0)
        {
          if ((v169 & 8) != 0)
          {
            v172 = v168[2] & 0x3F;
            v173 = v168[3] & 0x3F;
            v174 = v168[4] & 0x3F;
            if ((v169 & 4) != 0)
            {
              v169 = ((v169 & 1) << 30) | (v170 << 24) | (v172 << 18) | (v173 << 12) | (v174 << 6) | v168[5] & 0x3F;
              v408 = v169;
              v171 = v168 + 6;
            }
            else
            {
              v171 = v168 + 5;
              v169 = ((v169 & 3) << 24) | (v170 << 18) | (v172 << 12) | (v173 << 6) | v174;
              v408 = v169;
            }
          }
          else
          {
            v169 = ((v169 & 7) << 18) | (v170 << 12) | ((v168[2] & 0x3F) << 6) | v168[3] & 0x3F;
            v408 = v169;
            v171 = v168 + 4;
          }
        }
        else
        {
          v169 = ((v169 & 0xF) << 12) | (v170 << 6) | v168[2] & 0x3F;
          v408 = v169;
          v171 = v168 + 3;
        }
        v409[0] = v171;
      }
      else
      {
        v409[0] = v168 + 2;
        v408 = v168[1] & 0x3F | ((v169 & 0x1F) << 6);
        v169 = v408;
      }
    }
    if (!v144 && v169 == 93)
    {
      if (v143 == 1)
        *(v146 - 1) = 45;
      v18 = 0;
      v15 = 0;
      v14 = 0;
      *v146 = -2146631680;
      v6 = v146 + 1;
      v12 = 1;
      v11 = v357;
      v13 = v367;
      goto LABEL_30;
    }
  }
  if (v408 == 45 && v143 >= 2)
  {
    v144 = 0;
    if (v143 == 3)
      v167 = -2145452032;
    else
      v167 = -2145517568;
    *v146++ = v167;
    v143 = 1;
    goto LABEL_318;
  }
  if (v408 != 92)
    goto LABEL_303;
  v374 = v17;
  v160 = v409[0];
  v401 = v409[0];
  v362 = v19;
  v161 = _pcre2_check_escape_8(v409, (unint64_t)v9, &v408, (int *)&v405 + 1, v19, *(_DWORD *)(*(_QWORD *)v4 + 64), 1, v4);
  if (HIDWORD(v405))
  {
    if ((v391 & 2) == 0)
      goto LABEL_823;
    v409[0] = v160;
    v17 = v374;
    v19 = v362;
    if (v160 >= v9)
    {
      v408 = 92;
      v163 = 1;
      v164 = 2;
LABEL_343:
      v4 = v395;
      goto LABEL_304;
    }
    v409[0] = v160 + 1;
    v162 = *v160;
    v408 = v162;
    v163 = 1;
    v164 = 2;
    if (!(_DWORD)v8)
      goto LABEL_343;
    v4 = v395;
    if (v162 < 0xC0)
      goto LABEL_304;
    if ((v162 & 0x20) == 0)
    {
      v409[0] = v160 + 2;
      v408 = v160[1] & 0x3F | ((v162 & 0x1F) << 6);
      v163 = 1;
      goto LABEL_304;
    }
    v180 = v160[1] & 0x3F;
    if ((v162 & 0x10) == 0)
    {
      v408 = ((v162 & 0xF) << 12) | (v180 << 6) | v160[2] & 0x3F;
      v181 = v160 + 3;
      goto LABEL_374;
    }
    if ((v162 & 8) == 0)
    {
      v408 = ((v162 & 7) << 18) | (v180 << 12) | ((v160[2] & 0x3F) << 6) | v160[3] & 0x3F;
      v181 = v160 + 4;
      goto LABEL_374;
    }
    v183 = v160[2] & 0x3F;
    v184 = v160[3] & 0x3F;
    v185 = v160[4] & 0x3F;
    if ((v162 & 4) != 0)
    {
      v408 = ((v162 & 1) << 30) | (v180 << 24) | (v183 << 18) | (v184 << 12) | (v185 << 6) | v160[5] & 0x3F;
      v181 = v160 + 6;
LABEL_374:
      v409[0] = v181;
    }
    else
    {
      v408 = ((v162 & 3) << 24) | (v180 << 18) | (v183 << 12) | (v184 << 6) | v185;
      v409[0] = v160 + 5;
    }
LABEL_375:
    v163 = 1;
    v164 = 2;
    goto LABEL_304;
  }
  v176 = v161;
  if (v161 > 16)
  {
    v17 = v374;
    v19 = v362;
    v144 = 0;
    switch(v161)
    {
      case 17:
      case 22:
        goto LABEL_846;
      case 25:
        goto LABEL_318;
      case 26:
        v144 = 1;
        goto LABEL_318;
      default:
        goto LABEL_355;
    }
  }
  v17 = v374;
  v19 = v362;
  if (!v161)
    goto LABEL_375;
  if (v161 == 5)
  {
    v408 = 8;
    goto LABEL_375;
  }
  if (v161 != 4)
  {
LABEL_355:
    if (v143 == 1)
    {
LABEL_854:
      v350 = 150;
      goto LABEL_822;
    }
    switch(v161)
    {
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
        if ((v19 & 0x20000) == 0)
          goto LABEL_358;
        if ((v161 - 7) > 4)
          v186 = -2145910769;
        else
          v186 = dword_1A3ACA430[v161 - 7];
        *v146 = v186;
        v182 = v146 + 1;
        if (v161 > 0xB)
          goto LABEL_385;
        v191 = 1 << v161;
        if (((1 << v161) & 0xC0) != 0)
        {
          v182 = v146 + 2;
          v192 = 196621;
        }
        else
        {
          if ((v191 & 0x300) == 0)
          {
            v17 = v374;
            v19 = v362;
            if ((v191 & 0xC00) != 0)
            {
              v182 = v146 + 2;
              v146[1] = 589824;
            }
            goto LABEL_386;
          }
          v182 = v146 + 2;
          v192 = 458752;
        }
        v146[1] = v192;
LABEL_385:
        v17 = v374;
        v19 = v362;
LABEL_386:
        if (v409[0] < v389 && *v409[0] == 45 && v409[0][1] != 93)
          goto LABEL_854;
        v143 = 0;
        v144 = 0;
        v146 = v182;
        break;
      case 12:
        v350 = 171;
        goto LABEL_822;
      case 15:
      case 16:
        LODWORD(v398) = 0;
        v399 = 0;
        if (!sub_1A3A9AA74((unint64_t *)v409, &v398, (_WORD *)&v399 + 1, &v399, (_DWORD *)&v405 + 1, v4))goto LABEL_823;
        if (v176 == 15)
          v187 = 16;
        else
          v187 = 15;
        if ((_DWORD)v398)
          v188 = v187;
        else
          v188 = v176;
        v189 = v188 - 2145910784;
        v190 = (unsigned __int16)v399 | (HIWORD(v399) << 16);
        v182 = v146 + 2;
        *v146 = v189;
        v146[1] = v190;
        v17 = v374;
        v19 = v362;
        v4 = v395;
        goto LABEL_386;
      case 18:
      case 19:
      case 20:
      case 21:
LABEL_358:
        *v146 = v161 - 2145910784;
        v182 = v146 + 1;
        goto LABEL_386;
      default:
        goto LABEL_846;
    }
    goto LABEL_318;
  }
LABEL_846:
  HIDWORD(v405) = 107;
  v352 = v409[0] - 1;
LABEL_847:
  v409[0] = v352;
LABEL_823:
  v4 = v395;
LABEL_824:
  *(_QWORD *)(v4 + 168) = &v409[0][-*(_QWORD *)(v4 + 56)];
  return HIDWORD(v405);
}

uint64_t sub_1A3A9719C(unsigned int *a1, unsigned int **a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  unsigned int v6;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v15;
  unsigned int *v16;

  v5 = 0;
  v16 = a1;
  v15 = 0;
  *(_QWORD *)(a4 + 168) = -1;
  v6 = *a1;
  if (*a1 == 0x80000000)
    return v5;
  v11 = 0;
  while ((v6 & 0x80000000) == 0)
  {
LABEL_19:
    v13 = a1[1];
    ++a1;
    v6 = v13;
    v16 = a1;
    if (v13 == 0x80000000)
      return 0;
  }
  switch(((v6 & 0xFFFF0000) + 2147418112) >> 16)
  {
    case 0u:
    case 2u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x15u:
    case 0x16u:
    case 0x1Du:
    case 0x1Eu:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Du:
    case 0x2Fu:
    case 0x31u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
      goto LABEL_19;
    case 1u:
    case 7u:
    case 0xEu:
    case 0x19u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x26u:
      goto LABEL_6;
    case 3u:
    case 5u:
    case 0x20u:
      a1 += 3;
      goto LABEL_19;
    case 4u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
      ++a1;
      goto LABEL_19;
    case 6u:
      a1 += 5;
      goto LABEL_19;
    case 0xFu:
      a1 += 2;
      goto LABEL_6;
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
      a1 += 3;
LABEL_6:
      ++v11;
      goto LABEL_19;
    case 0x17u:
      v12 = v6 + 2145910769 < 2;
      goto LABEL_8;
    case 0x18u:
      if (v11 > 0)
      {
        --v11;
        goto LABEL_19;
      }
      if (!a2)
        return 0;
      v5 = 0;
      *a2 = a1;
      return v5;
    case 0x1Fu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
      a1 += 2;
      goto LABEL_19;
    case 0x24u:
    case 0x25u:
    case 0x27u:
      if (!sub_1A3A9B22C(&v16, (int *)&v15, a5, a3, a4))
        return v15;
      a1 = v16;
      goto LABEL_19;
    case 0x28u:
    case 0x2Cu:
    case 0x2Eu:
    case 0x30u:
    case 0x32u:
      v12 = a1[1] + 1;
LABEL_8:
      a1 += v12;
      goto LABEL_19;
    default:
      return 170;
  }
}

uint64_t sub_1A3A9730C(unsigned int a1, unsigned __int8 **a2, unsigned int **a3, int *a4, unsigned int a5, _DWORD *a6, unsigned int *a7, _DWORD *a8, unsigned int *a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  _QWORD *v13;
  unsigned int *v14;
  unsigned int (*v15)(_QWORD, _QWORD);
  uint64_t result;
  int v17;
  _QWORD *v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t *v23;
  int v24;
  int v25;
  char *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  char *i8;
  int v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned __int16 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  int v59;
  BOOL v60;
  _BOOL4 v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  char v67;
  int v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  uint64_t v77;
  char *v78;
  char *v79;
  unsigned int *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  int v87;
  unsigned __int8 *v88;
  unsigned __int16 *v89;
  int v90;
  unsigned int v91;
  int v92;
  char v93;
  unsigned int v94;
  int v95;
  unsigned int *v96;
  uint64_t v97;
  unsigned int v98;
  char v99;
  int v100;
  int v101;
  unsigned __int8 *v102;
  int v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  int v107;
  size_t v108;
  char v109;
  int v110;
  char *v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unint64_t v119;
  unsigned int v120;
  char v121;
  char v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  char v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t *v131;
  unsigned __int8 *v132;
  char *v133;
  int v134;
  int v135;
  unsigned __int8 v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  int v140;
  int v141;
  int v142;
  int v143;
  unint64_t v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  int8x16_t *v149;
  unsigned int v150;
  int v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  int v155;
  int v156;
  char *v157;
  unsigned int *v158;
  uint64_t v159;
  unsigned int *v160;
  int v161;
  int v162;
  char v163;
  char v164;
  char *v165;
  int8x16_t *v166;
  _DWORD *v167;
  int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  _BOOL4 v173;
  uint64_t v174;
  _OWORD *v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __int8 v182;
  unsigned int v183;
  unsigned int v184;
  char v185;
  int8x16_t *v186;
  int8x16_t *v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  char v191;
  _BYTE *v192;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  int *v201;
  unsigned int *v202;
  int v203;
  unsigned int v204;
  unsigned int v205;
  char v206;
  char *v207;
  unsigned int v208;
  int v209;
  _BOOL4 v211;
  unsigned int v212;
  int v213;
  char v214;
  unsigned int *v215;
  unsigned int v216;
  int v217;
  int v218;
  char v219;
  int v220;
  unsigned int v221;
  int v222;
  int v223;
  unsigned int v224;
  unsigned int v225;
  int v227;
  char v228;
  __int16 v229;
  char v230;
  uint64_t v231;
  unint64_t v232;
  unsigned __int8 *v233;
  int v234;
  _BYTE *v235;
  __int16 v236;
  unsigned int v237;
  unsigned __int8 *v238;
  int v239;
  char v240;
  int v241;
  size_t v242;
  unsigned int v243;
  int v244;
  unsigned __int8 v245;
  int v246;
  int v247;
  unsigned int v248;
  char v249;
  int v250;
  char *v251;
  unsigned int v252;
  BOOL v255;
  char *v256;
  unsigned int v257;
  char v258;
  char v259;
  char v260;
  char v261;
  unsigned int v262;
  char v263;
  int8x16_t v264;
  char v265;
  _BYTE *v266;
  unsigned int v267;
  char *v268;
  char *v269;
  int v270;
  char v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v275;
  char *v276;
  unsigned int v277;
  __int16 v278;
  __int16 v279;
  uint64_t v280;
  int v281;
  char v282;
  char *v283;
  uint64_t v284;
  unsigned int v285;
  BOOL v286;
  char *v287;
  __int16 v288;
  size_t v289;
  _BOOL4 v290;
  char v291;
  char v292;
  char v293;
  int v294;
  unint64_t v295;
  unsigned __int8 *v296;
  int v297;
  _BOOL4 v298;
  char v299;
  unsigned int v300;
  int v301;
  char v302;
  int8x16_t v303;
  int v304;
  int v305;
  __int16 v306;
  int v307;
  char v308;
  int v309;
  _BOOL4 v310;
  unsigned __int8 *v311;
  uint64_t v312;
  unsigned int v314;
  uint64_t v315;
  int v316;
  unint64_t v317;
  int v318;
  unsigned __int8 *v319;
  int v320;
  _BOOL4 v321;
  __int16 v322;
  char *v323;
  unsigned int v324;
  unsigned int v325;
  int v326;
  BOOL v328;
  BOOL v329;
  unsigned int v330;
  int v331;
  int v332;
  int v333;
  unsigned int v334;
  uint64_t v335;
  int v336;
  int v337;
  int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  int v343;
  unsigned int v344;
  uint64_t v345;
  char *v346;
  unsigned int v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  unsigned int v351;
  int v352;
  int v358;
  int v359;
  int v360;
  _BOOL4 v361;
  unsigned __int8 *v362;
  _BOOL4 v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t *v366;
  int v367;
  unsigned __int8 *__dst;
  int v370;
  _BOOL4 v371;
  unint64_t v372;
  unsigned int v373;
  int v374;
  int v376;
  int v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  char *v381;
  unsigned int v382;
  int v383;
  char v384;
  int v385;
  unsigned int v386;
  unsigned int v387;
  _BOOL4 v388;
  _BOOL4 v389;
  _BOOL4 v390;
  int v391;
  int v392;
  unint64_t v393;
  char v394;
  char v395;
  char v396;
  char v397;
  unsigned __int8 *v398;
  int v399;
  unsigned __int8 *v400;
  char *v401;
  char *__src;
  __int16 __srca;
  unint64_t v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  unsigned int v409;
  unint64_t v410;
  uint64_t v411;
  int8x16_t *v412;
  unsigned __int8 *v413;
  uint64_t v414;
  unsigned int *v415;
  _OWORD v416[2];
  char v417[8];
  int8x16_t v418;
  int8x16_t v419;
  uint64_t v420;

  v13 = (_QWORD *)a11;
  v420 = *MEMORY[0x1E0C80C00];
  v362 = *a2;
  v14 = *a3;
  v15 = *(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)a11 + 24);
  if (v15 && v15(*(unsigned __int16 *)(a11 + 180), *(_QWORD *)(*(_QWORD *)a11 + 32)))
  {
    result = 0;
    v17 = 133;
LABEL_4:
    *a4 = v17;
    return result;
  }
  v18 = a12;
  v407 = 0;
  v408 = 0;
  v405 = a10;
  v406 = (char *)v362;
  v19 = a5 + 6;
  v20 = *v362;
  if ((v20 - 128) < 2)
    goto LABEL_8;
  if (v20 == 136)
  {
    v21 = 0;
    v359 = 0;
    v341 = __rev16(*(unsigned __int16 *)(v362 + 3));
    LOWORD(v408) = v341;
    v407 = *(_QWORD *)(a11 + 184);
    WORD1(v408) = *(_WORD *)(a11 + 182);
    *(_QWORD *)(a11 + 184) = &v407;
  }
  else
  {
    if (v20 == 131)
    {
LABEL_8:
      v341 = 0;
      v21 = *((unsigned __int16 *)v14 - 2);
      v14 += 2;
      v359 = 1;
      goto LABEL_11;
    }
    v21 = 0;
    v359 = 0;
    v341 = 0;
  }
LABEL_11:
  v342 = 0;
  v343 = 0;
  *(_WORD *)(v362 + 1) = 0;
  v22 = &v362[a5 + 3];
  v23 = &v414;
  if (!a12)
    v23 = 0;
  v366 = v23;
  v345 = a5;
  v346 = (char *)v362;
  v344 = -1;
  LODWORD(result) = 1;
  v24 = -1;
  while (2)
  {
    v25 = v359;
    if (!v21)
      v25 = 0;
    v347 = result;
    v348 = v24;
    if (v25 == 1)
    {
      *v22 = 125;
      v22[1] = BYTE1(v21);
      v22[2] = v21;
      v22 += 3;
      v19 += 3;
    }
    v393 = 0;
    v372 = 0;
    v365 = 0;
    v26 = 0;
    v363 = 0;
    v379 = 0;
    v27 = 0;
    v367 = 0;
    v414 = 0;
    v415 = v14;
    v412 = 0;
    v413 = 0;
    v28 = v13[3];
    v351 = a1;
    v352 = (a1 >> 18) & 1;
    v360 = (a1 >> 3) & 1;
    v361 = (a1 & 0x40000) == 0;
    v358 = a1 & 0xA0000;
    v364 = v28;
    v349 = v28 + 64;
    v350 = v28 + 160;
    v380 = -1;
    v378 = a1;
    v29 = -1;
    v370 = -1;
    v376 = -1;
    i8 = (char *)v22;
    __dst = v22;
    v381 = (char *)v22;
    v31 = -1;
LABEL_19:
    v410 = 0;
    v411 = 0;
    LODWORD(v32) = *v14;
    v33 = *v14 & 0xFFFF0000;
    if (v18)
    {
      v34 = v13[5] + v13[10];
      if ((unint64_t)i8 > v34 - 100)
      {
        if ((unint64_t)i8 >= v34)
          v333 = 152;
        else
          v333 = 186;
        goto LABEL_826;
      }
      if (i8 < v381)
        i8 = v381;
      v35 = v33 + 2143354879;
      if (v33 + 2143354879 > 0xFFF4FFFE)
      {
        v381 = i8;
      }
      else
      {
        if (2147483627 - v19 < i8 - (char *)__dst)
          goto LABEL_822;
        v19 += i8 - (char *)__dst;
        i8 = (char *)__dst;
        v381 = (char *)__dst;
        if (v19 > 0x10000)
          goto LABEL_822;
      }
    }
    else
    {
      v35 = v33 + 2143354879;
    }
    v382 = *v14 & 0xFFFF0000;
    v387 = v29;
    v404 = v19;
    if (v379)
      v36 = 1;
    else
      v36 = v27 == 0;
    if (v36)
      v37 = v31;
    else
      v37 = 1;
    if (v35 < 0xFFF4FFFF)
      v26 = i8;
    __src = v26;
    if (v35 < 0xFFF4FFFF)
      v31 = v37;
    v392 = v31;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = (unsigned __int16)*v14;
    v43 = 0x10000;
    v44 = 138;
    v45 = 1;
    v46 = 1;
    switch(WORD1(v32) ^ 0x8000)
    {
      case 0:
      case 1:
      case 0x19:
        if (v31 < 0)
          result = 0xFFFFFFFFLL;
        else
          result = v347;
        v18 = a12;
        v19 = v404;
        if (a12)
        {
          v21 = *v14;
          v13 = (_QWORD *)a11;
          v322 = (__int16)v362;
          if ((*v14 & 0xFFFF0000) == 0x80010000)
          {
            v22 = &(*a2)[v345 + 3];
            v19 = v404 + 3;
LABEL_821:
            v21 = (unsigned __int16)v21;
            ++v14;
            a1 = v351;
            v24 = v348;
            continue;
          }
        }
        else
        {
          v323 = v346;
          v13 = (_QWORD *)a11;
          v322 = (__int16)v362;
          if (*v346 == 120)
          {
            v324 = v344;
            if (v344 == v380 && v342 == HIDWORD(v393))
            {
              v325 = v348;
            }
            else
            {
              v325 = v348;
              v326 = v343;
              if (v344 < 0xFFFFFFFE && v348 > 0xFFFFFFFD)
                v326 = v342;
              v343 = v326;
              if (v344 < 0xFFFFFFFE && v348 > 0xFFFFFFFD)
                v325 = v344;
              v324 = -2;
            }
            v344 = v324;
            v328 = v324 > 0xFFFFFFFD && v380 < 0xFFFFFFFE;
            v329 = v328 && v387 > 0xFFFFFFFD;
            if (v329)
              v330 = v380;
            else
              v330 = v387;
            if (((v330 ^ v325) & 0xFFFFFFFD) != 0)
            {
              v331 = -2;
            }
            else
            {
              v36 = !v329;
              v332 = HIDWORD(v393);
              if (v36)
                v332 = v393;
              v331 = v330 | v325;
              if (v343 != v332)
                v331 = -2;
            }
            v348 = v331;
            v323 = v346;
          }
          else
          {
            v342 = HIDWORD(v393);
            v343 = v393;
            v344 = v380;
            v348 = v387;
          }
          if (*((unsigned __int16 *)v14 + 1) << 16 == -2147418112)
          {
            *i8 = 120;
            i8[1] = (unsigned __int16)((_WORD)i8 - (_WORD)v323) >> 8;
            i8[2] = (_BYTE)i8 - (_BYTE)v323;
            v406 = i8;
            v22 = (unsigned __int8 *)(i8 + 3);
            LOWORD(v21) = *(_WORD *)v14;
            v346 = i8;
            goto LABEL_821;
          }
          v334 = (_DWORD)i8 - (_DWORD)v323;
          do
          {
            v335 = __rev16(*(unsigned __int16 *)(v323 + 1));
            *(_WORD *)(v323 + 1) = bswap32(v334) >> 16;
            v323 -= v335;
            v334 = v335;
          }
          while ((_DWORD)v335);
        }
        *i8 = 121;
        i8[1] = (unsigned __int16)((_WORD)i8 - v322) >> 8;
        i8[2] = (_BYTE)i8 - v322;
        if (v341 >= 1)
          v13[23] = *(_QWORD *)v13[23];
        *a2 = (unsigned __int8 *)(i8 + 3);
        *a3 = v14;
        *a6 = v342;
        *a7 = v344;
        *a8 = v343;
        *a9 = v348;
        if (!a12)
          return result;
        if (2147483627 - *a12 >= v404)
        {
          *a12 += v404;
          return result;
        }
        result = 0;
        v17 = 120;
        goto LABEL_4;
      case 2:
        v38 = 0;
        v40 = 0;
        v46 = 0;
        v44 = 132;
        goto LABEL_202;
      case 3:
        if (v42 > 9)
        {
          v216 = v14[2];
          v215 = v14 + 2;
          v112 = v216 | ((unint64_t)*(v215 - 1) << 32);
          v415 = v215;
          v82 = a11;
        }
        else
        {
          v82 = a11;
          v112 = *(_QWORD *)(a11 + 8 * v42 + 88);
        }
        v204 = HIDWORD(v393);
        if (v42 > *(_DWORD *)(v82 + 212))
          goto LABEL_833;
        v365 = v112;
        v18 = a12;
        v19 = v404;
        goto LABEL_420;
      case 4:
      case 0x21:
        v81 = v14[3];
        v80 = v14 + 3;
        v82 = a11;
        v83 = *(_QWORD *)(a11 + 192);
        v84 = *(v80 - 2);
        v85 = v81 | ((unint64_t)*(v80 - 1) << 32);
        v415 = v80;
        if (!*(_WORD *)(a11 + 176))
          goto LABEL_831;
        v86 = 0;
        v87 = 0;
        LODWORD(v42) = 0;
        v365 = v85;
        v88 = (unsigned __int8 *)(*(_QWORD *)(a11 + 56) + v85);
        v89 = (unsigned __int16 *)(v83 + 14);
        do
        {
          if ((_DWORD)v84 == *(v89 - 1) && !_pcre2_strncmp_8(v88, *(unsigned __int8 **)(v89 - 7), v84))
          {
            LODWORD(v42) = *(_DWORD *)(v89 - 3);
            if (v382 == -2145320960)
              goto LABEL_197;
            v87 = *v89;
            v90 = 1 << v42;
            if (v42 >= 0x20)
              v90 = 1;
            v91 = *(_DWORD *)(a11 + 248);
            *(_DWORD *)(a11 + 252) |= v90;
            if (v42 > v91)
              *(_DWORD *)(a11 + 248) = v42;
          }
          v89 += 8;
          ++v86;
        }
        while (v86 < *(unsigned __int16 *)(a11 + 176));
        v85 = v365;
        if (!(_DWORD)v42)
        {
LABEL_831:
          *a4 = 115;
          *(_QWORD *)(a11 + 168) = v85;
          return 0;
        }
        if (!v87)
        {
          v18 = a12;
          v19 = v404;
          v204 = HIDWORD(v393);
LABEL_420:
          if (v380 >= 0xFFFFFFFE)
            v217 = -2;
          else
            v217 = v380;
          v218 = v376;
          if (v380 == -1)
            v218 = -2;
          v376 = v218;
          if ((v378 & 8) != 0)
            v219 = 114;
          else
            v219 = 113;
          *i8 = v219;
          i8[1] = BYTE1(v42);
          i8[2] = v42;
          v220 = 1 << v42;
          if (v42 >= 0x20)
            v220 = 1;
          v221 = *(_DWORD *)(v82 + 248);
          i8 += 3;
          *(_DWORD *)(v82 + 252) |= v220;
          v26 = __src;
          v27 = 0;
          if (v42 > v221)
            *(_DWORD *)(v82 + 248) = v42;
          v62 = v204;
          v63 = v393;
          v380 = v217;
          goto LABEL_519;
        }
        LODWORD(v416[0]) = 0;
        v409 = 0;
        v18 = a12;
        v19 = v404;
        v26 = __src;
        if (!a12 && !sub_1A3A9BB84(v88, v84, &v409, (int *)v416, a4, a11))
          return 0;
        v27 = 0;
        v92 = v380;
        if (v380 >= 0xFFFFFFFE)
          v92 = -2;
        v380 = v92;
        if ((v378 & 8) != 0)
          v93 = 116;
        else
          v93 = 115;
        *i8 = v93;
        i8[1] = BYTE1(v409);
        i8[2] = v409;
        i8[3] = BYTE1(v416[0]);
        i8[4] = v416[0];
        i8 += 5;
        v62 = HIDWORD(v393);
        goto LABEL_518;
      case 5:
        LODWORD(v32) = v14[1];
        v415 = v14 + 1;
        v97 = a11;
        v98 = a1;
        goto LABEL_160;
      case 6:
        v27 = 0;
        *i8 = 118;
        i8[1] = BYTE1(v415[1]);
        i8[2] = v415[1];
        i8[3] = BYTE1(v415[2]);
        i8[4] = v415[2];
        i8[5] = v415[3];
        v415 += 3;
        i8 += 6;
        goto LABEL_221;
      case 7:
        v113 = v14[3];
        v18 = a12;
        if (!a12)
        {
          *i8 = 119;
          i8[1] = BYTE1(v415[1]);
          i8[2] = v415[1];
          i8[3] = BYTE1(v415[2]);
          i8[4] = v415[2];
          v231 = v415[5];
          v232 = v231 | ((unint64_t)v415[4] << 32);
          v415 += 5;
          v19 = v404;
          v365 = v232;
          v233 = (unsigned __int8 *)(*(_QWORD *)(a11 + 56) + v232);
          v234 = *v233;
          v235 = i8 + 10;
          i8[9] = v234;
          if (v234 == 123)
            v234 = 125;
          v236 = v231 + 1;
          i8[7] = HIBYTE(v236);
          i8[8] = v236;
          v237 = v113 - 1;
          if (v113 - 1 < 2)
          {
            v26 = __src;
            v62 = HIDWORD(v393);
          }
          else
          {
            v238 = v233 + 1;
            v26 = __src;
            v62 = HIDWORD(v393);
            do
            {
              v239 = *v238;
              if (v239 == v234 && v238[1] == v234)
              {
                *v235 = v234;
                v238 += 2;
                v237 = v113 - 2;
              }
              else
              {
                ++v238;
                *v235 = v239;
              }
              v113 = v237;
              ++v235;
              --v237;
            }
            while (v237 > 1);
          }
          v27 = 0;
          *v235 = 0;
          v287 = v235 + 1;
          i8[5] = (unsigned __int16)((_WORD)v287 - (_WORD)i8) >> 8;
          i8[6] = (_BYTE)v287 - (_BYTE)i8;
          v63 = v393;
          v29 = v387;
          i8 = v287;
          goto LABEL_591;
        }
        v27 = 0;
        v19 = v404 + v113 + 9;
        v415 = v14 + 5;
LABEL_237:
        v62 = HIDWORD(v393);
        v63 = v393;
        goto LABEL_238;
      case 8:
        v40 = 0;
        v46 = 0;
        *(_WORD *)(i8 + 3) = bswap32(v32) >> 16;
        *(_DWORD *)(a11 + 216) = v42;
        v44 = 136;
        v38 = 2;
        goto LABEL_202;
      case 9:
        if ((v378 & 0x400) != 0)
        {
          v27 = 0;
          if (v380 >= 0xFFFFFFFE)
            v222 = -2;
          else
            v222 = v380;
          v223 = v376;
          if (v380 == -1)
            v223 = -2;
          v376 = v223;
          *i8++ = 28;
          v62 = HIDWORD(v393);
          v63 = v393;
          v380 = v222;
          goto LABEL_222;
        }
        v27 = 0;
        LOBYTE(v101) = 27;
LABEL_220:
        *i8++ = v101;
        goto LABEL_221;
      case 0xA:
      case 0xE:
        v94 = *v14 & 0xFFFF0000;
        v95 = v33 == -2146566144;
        v96 = v14 + 1;
        v32 = v14[1];
        v97 = a11;
        if ((v32 & 0x80000000) != 0)
          goto LABEL_279;
        v35 = v14[2];
        if (v35 == -2146631680)
        {
          v415 = v14 + 2;
          v98 = a1;
          if (v33 == -2146828288)
          {
LABEL_160:
            v62 = HIDWORD(v393);
LABEL_240:
            v140 = 0;
            if (v358)
            {
              v19 = v404;
              if ((v378 & 8) != 0)
              {
                v141 = _pcre2_ucd_records_8[12
                                          * _pcre2_ucd_stage2_8[(int)(v32
                                                                    - (v35 & 0xFFFFFF80)
                                                                    + (_pcre2_ucd_stage1_8[(int)v32 / 128] << 7))]
                                          + 3];
                v18 = a12;
                if (v141)
                {
                  *(_WORD *)i8 = 2576;
                  i8[2] = v141;
                  i8 += 3;
                  if (v380 >= 0xFFFFFFFE)
                    v142 = -2;
                  else
                    v142 = v380;
                  v143 = v376;
                  if (v380 == -1)
                    v143 = -2;
                  v376 = v143;
                  v27 = 1;
                  v63 = v393;
                  v380 = v142;
LABEL_238:
                  v29 = v387;
                  goto LABEL_590;
                }
                v140 = 0;
                if ((v98 & 0x80000) != 0)
                {
LABEL_391:
                  v205 = _pcre2_ord2utf_8(v32, (uint64_t)v417);
                  goto LABEL_394;
                }
              }
              else
              {
                v18 = a12;
                if ((v98 & 0x80000) != 0)
                  goto LABEL_391;
              }
            }
            else
            {
              v18 = a12;
              v19 = v404;
              if ((v98 & 0x80000) != 0)
                goto LABEL_391;
            }
LABEL_393:
            v417[0] = v32;
            v205 = 1;
LABEL_394:
            if ((v378 & 8) != 0)
              v206 = 30;
            else
              v206 = 29;
            *i8 = v206;
            v207 = i8 + 1;
            memcpy(v207, v417, v205);
            v208 = v417[0];
            if (v417[0] == 13 || v417[0] == 10)
              *(_DWORD *)(v97 + 208) |= 0x800u;
            i8 = &v207[v205];
            v209 = v360;
            v211 = v205 == 1 || v360 == 0;
            if (v380 == -1)
            {
              if (v211)
              {
                if (v205 == 1)
                {
                  v376 = -2;
                  v62 = v208;
                  v213 = v393;
                  v63 = v393;
                  v380 = v360;
                  v212 = v387;
                  v29 = v387;
                }
                else
                {
                  v63 = *(i8 - 1);
                  v29 = *(_DWORD *)(v97 + 276);
                  v376 = -2;
                  v62 = v208;
                  v380 = v360;
LABEL_409:
                  v212 = v387;
                  v213 = v393;
                }
              }
              else
              {
                v380 = -2;
                v213 = v393;
                v63 = v393;
                v29 = -2;
                v376 = -2;
                v212 = v387;
              }
            }
            else
            {
              if (v211)
              {
                v63 = *(i8 - 1);
                v29 = *(_DWORD *)(v97 + 276) | v360;
                HIDWORD(v372) = v62;
                v376 = v380;
                goto LABEL_409;
              }
              v213 = v393;
              v63 = v393;
              HIDWORD(v372) = v62;
              v212 = v387;
              v29 = v387;
              v376 = v380;
            }
            v257 = v378;
            if (v140)
              v257 = v378 & 0xFFFFFFF7;
            v378 = v257;
            if (v140)
              v209 = 0;
            v360 = v209;
            v27 = 1;
            LODWORD(v372) = v213;
            v370 = v212;
          }
          else
          {
            v244 = v380;
            if (v380 >= 0xFFFFFFFE)
              v244 = -2;
            v380 = v244;
            if (!v358
              || (v378 & 8) == 0
              || (v245 = _pcre2_ucd_records_8[12
                                            * _pcre2_ucd_stage2_8[v32 & 0x7F | (*(unsigned __int16 *)((char *)_pcre2_ucd_stage1_8 + ((v32 >> 6) & 0x3FFFFFE)) << 7)]
                                            + 3]) == 0)
            {
              if ((v378 & 8) != 0)
                v265 = 32;
              else
                v265 = 31;
              *i8 = v265;
              v266 = i8 + 1;
              v19 = v404;
              v26 = __src;
              if ((a1 & 0x80000) != 0 && v32 >= 0x80)
              {
                v267 = _pcre2_ord2utf_8(v32, (uint64_t)v266);
              }
              else
              {
                *v266 = v32;
                v267 = 1;
              }
              v18 = a12;
              v27 = 1;
              v62 = HIDWORD(v393);
              v63 = v393;
              v372 = v393;
              v29 = v387;
              v370 = v387;
              v376 = v380;
              i8 = &v266[v267];
              goto LABEL_591;
            }
            *(_WORD *)i8 = 2575;
            i8[2] = v245;
            i8 += 3;
            v27 = 1;
            v62 = HIDWORD(v393);
            v63 = v393;
            v372 = v393;
            v29 = v387;
            v370 = v387;
            v376 = v244;
LABEL_223:
            v18 = a12;
            v19 = v404;
          }
LABEL_590:
          v26 = __src;
          goto LABEL_591;
        }
        if (v33 == -2146828288
          && (v35 & 0x80000000) == 0
          && v14[3] == -2146631680
          && !_pcre2_ucd_records_8[12
                                 * _pcre2_ucd_stage2_8[v14[1] & 0x7F | (*(unsigned __int16 *)((char *)_pcre2_ucd_stage1_8
                                                                                            + (((unint64_t)v14[1] >> 6) & 0x3FFFFFE)) << 7)]
                                 + 3])
        {
          v304 = v358 && v32 >= 0x80
               ? *(_DWORD *)&_pcre2_ucd_records_8[12
                                                * _pcre2_ucd_stage2_8[v14[1] & 0x7F | (*(unsigned __int16 *)((char *)_pcre2_ucd_stage1_8 + (((unint64_t)v14[1] >> 6) & 0x3FFFFFE)) << 7)]
                                                + 4]
               + v14[1]
               : *(unsigned __int8 *)(*(_QWORD *)(a11 + 16) + v32);
          if ((_DWORD)v32 != v304 && v35 == v304)
          {
            v415 = v14 + 3;
            v305 = v360;
            if ((v378 & 8) == 0)
              v305 = 1;
            v360 = v305;
            v140 = ((v378 & 8) >> 3) ^ 1;
            v378 |= 8u;
            v18 = a12;
            v19 = v404;
            v62 = HIDWORD(v393);
            if ((a1 & 0x80000) != 0)
              goto LABEL_391;
            goto LABEL_393;
          }
        }
LABEL_279:
        v149 = (int8x16_t *)(i8 + 4);
        v412 = (int8x16_t *)(i8 + 4);
        v418 = 0u;
        v419 = 0u;
        v150 = *v96;
        if (*v96 == -2146631680)
        {
          v151 = 0;
          v415 = v14 + 1;
          v152 = v380;
          if (v380 >= 0xFFFFFFFE)
            v152 = -2;
          v380 = v152;
          v18 = a12;
          v19 = v404;
          v26 = __src;
          v153 = HIDWORD(v393);
LABEL_613:
          if (v151 == v95)
            v263 = 110;
          else
            v263 = 111;
          *i8 = v263;
          if (!v18)
          {
            if (v94 == -2146566144)
            {
              v418 = vmvnq_s8(v418);
              v419 = vmvnq_s8(v419);
            }
            v264 = v419;
            *(int8x16_t *)(i8 + 1) = v418;
            *(int8x16_t *)(i8 + 17) = v264;
          }
          i8 += 33;
          goto LABEL_621;
        }
        v371 = v33 == -2146566144;
        v154 = 0;
        v377 = 0;
        v151 = 0;
        v155 = 0;
        v156 = 0;
        v373 = v378 & 0xFFFFFFF7;
        v157 = i8 + 4;
        v18 = a12;
        do
        {
          v158 = v14;
          v159 = v154;
          v14 = v96;
          if (v150 == -2147155968)
          {
            v150 = v158[2];
            v14 = v158 + 2;
            v167 = (_DWORD *)a11;
LABEL_303:
            if (v150 == 13 || v150 == 10)
              v167[52] |= 0x800u;
            v169 = v14[1] | 0x10000;
            if (v169 == -2145452032)
            {
              v169 = (_DWORD)v14 + 8;
              v170 = v14[2];
              if (v170 == -2147155968)
              {
                v171 = v14[3];
                v14 += 3;
                v170 = v171;
              }
              else
              {
                v14 += 2;
              }
              if (v170 == 13 || v170 == 10)
              {
                v169 = v167[52] | 0x800;
                v167[52] = v169;
              }
              v167[66] = v150;
              v167[67] = v170;
              v172 = v378;
            }
            else
            {
              v167[66] = v150;
              v167[67] = v150;
              v172 = v378;
              v170 = v150;
            }
            v154 = sub_1A3A9BCD8((uint64_t)&v418, (_BYTE **)&v412, v172, (uint64_t)v167, v150, v170, v169)
                 + v154;
            goto LABEL_351;
          }
          if (v150 == -2145583104 || v150 == -2145648640)
          {
            v151 = v150 == -2145583104;
            v162 = v158[2];
            v160 = v158 + 2;
            v161 = v162;
            if (((v162 < 3) & (v378 >> 3)) != 0)
              v161 = 0;
            if ((v378 & 0x20000) != 0)
            {
              if ((v161 - 8) <= 2)
              {
                if (v150 == -2145583104)
                  v163 = 4;
                else
                  v163 = 3;
                v412 = (int8x16_t *)(v157 + 1);
                *v157 = v163;
                if (v161 == 9)
                  v164 = 15;
                else
                  v164 = 16;
                if (v161 == 8)
                  v164 = 14;
                v165 = (char *)v412;
                v412 = (int8x16_t *)((char *)v412 + 1);
                *v165 = v164;
                v166 = v412;
                v412 = (int8x16_t *)((char *)v412 + 1);
                v166->i8[0] = 0;
LABEL_300:
                v155 = 1;
                goto LABEL_350;
              }
              v173 = (a1 & 0x80000) != 0 && v150 == -2145583104;
              v377 |= v173;
            }
            v174 = 3 * v161;
            v175 = (_OWORD *)(v364 + dword_1A3ACA2D4[v174]);
            v176 = v175[1];
            v416[0] = *v175;
            v416[1] = v176;
            v177 = (int)v174 + 1;
            v178 = (int)v174 + 2;
            if (((0x2DB6DB6FB6BuLL >> v177) & 1) != 0)
            {
              v179 = dword_1A3ACA2D4[v177];
              if (((0x2DB6DB6FB6BuLL >> v178) & 1) != 0)
              {
                v188 = 0;
                v189 = v364 + v179;
                do
                {
                  v416[v188] = vorrq_s8((int8x16_t)v416[v188], *(int8x16_t *)(v189 + v188 * 16));
                  ++v188;
                }
                while (v188 != 2);
              }
              else
              {
                v180 = 0;
                v181 = v364 + v179;
                do
                {
                  v416[v180] = vbicq_s8((int8x16_t)v416[v180], *(int8x16_t *)(v181 + v180 * 16));
                  ++v180;
                }
                while (v180 != 2);
              }
            }
            v190 = dword_1A3ACA2D4[v178];
            if (((0x12492490494uLL >> v178) & 1) != 0)
              v190 = -v190;
            if (v190 == 1)
            {
              v191 = -61;
              v192 = (char *)v416 + 1;
LABEL_342:
              *v192 &= v191;
            }
            else if (v190 == 2)
            {
              v191 = 127;
              v192 = (char *)v416 + 11;
              goto LABEL_342;
            }
            if (v150 == -2145583104)
            {
              for (i = 0; i != 2; ++i)
                *(int8x16_t *)((char *)&v418 + i * 16) = vornq_s8(*(int8x16_t *)((char *)&v418 + i * 16), (int8x16_t)v416[i]);
            }
            else
            {
              for (j = 0; j != 2; ++j)
                *(int8x16_t *)((char *)&v418 + j * 16) = vorrq_s8(*(int8x16_t *)((char *)&v418 + j * 16), (int8x16_t)v416[j]);
            }
            v159 = 1;
LABEL_350:
            v14 = v160;
            v154 = v159;
            goto LABEL_351;
          }
          v167 = (_DWORD *)a11;
          if ((v150 & 0x80000000) == 0)
            goto LABEL_303;
          if ((v150 & 0xFFFF0000) != 0x80180000)
          {
LABEL_832:
            v333 = 189;
            goto LABEL_826;
          }
          v154 = (v154 + 1);
          switch((__int16)v150)
          {
            case 6:
              for (k = 0; k != 32; ++k)
              {
                v418.i8[k] |= ~*(_BYTE *)(v349 + k);
                v151 = 1;
              }
              break;
            case 7:
              for (m = 0; m != 32; ++m)
                v418.i8[m] |= *(_BYTE *)(v349 + m);
              break;
            case 8:
              for (n = 0; n != 32; ++n)
              {
                v418.i8[n] |= ~*(_BYTE *)(v364 + n);
                v151 = 1;
              }
              break;
            case 9:
              for (ii = 0; ii != 32; ++ii)
                v418.i8[ii] |= *(_BYTE *)(v364 + ii);
              break;
            case 10:
              for (jj = 0; jj != 32; ++jj)
              {
                v418.i8[jj] |= ~*(_BYTE *)(v350 + jj);
                v151 = 1;
              }
              break;
            case 11:
              for (kk = 0; kk != 32; ++kk)
                v418.i8[kk] |= *(_BYTE *)(v350 + kk);
              break;
            case 15:
            case 16:
              v183 = v158[2];
              v160 = v158 + 2;
              v182 = v183;
              v184 = HIWORD(v183);
              if ((unsigned __int16)v150 == 16)
                v185 = 3;
              else
                v185 = 4;
              v412 = (int8x16_t *)(v157 + 1);
              *v157 = v185;
              v186 = v412;
              v412 = (int8x16_t *)((char *)v412 + 1);
              v186->i8[0] = v184;
              v187 = v412;
              v412 = (int8x16_t *)((char *)v412 + 1);
              v187->i8[0] = v182;
              goto LABEL_300;
            case 18:
              v201 = (int *)&_pcre2_hspace_list_8;
              goto LABEL_379;
            case 19:
              v202 = (unsigned int *)&_pcre2_hspace_list_8;
              goto LABEL_381;
            case 20:
              v201 = (int *)&_pcre2_vspace_list_8;
LABEL_379:
              sub_1A3A9BAB0((uint64_t)&v418, (_BYTE **)&v412, v373, a11, v201);
              break;
            case 21:
              v202 = (unsigned int *)&_pcre2_vspace_list_8;
LABEL_381:
              sub_1A3A9BA0C((uint64_t)&v418, (_BYTE **)&v412, v373, a11, v202);
              break;
            default:
              break;
          }
LABEL_351:
          v157 = (char *)v412;
          if (v412 > v149)
            v156 = 1;
          if (a12 && v412 > v149)
          {
            v404 += (char *)v412 - (char *)v149;
            v412 = (int8x16_t *)(i8 + 4);
            v156 = 1;
            v157 = i8 + 4;
          }
          v96 = v14 + 1;
          v150 = v14[1];
        }
        while (v150 != -2146631680);
        v415 = v14 + 1;
        v203 = v380;
        if (v380 >= 0xFFFFFFFE)
          v203 = -2;
        v380 = v203;
        if (!v156)
        {
          v19 = v404;
          v26 = __src;
          v153 = HIDWORD(v393);
          v94 = v382;
LABEL_612:
          v95 = v371;
          goto LABEL_613;
        }
        v374 = v155;
        v26 = __src;
        v153 = HIDWORD(v393);
        v94 = v382;
        if ((v378 & 0x20000) == 0 && !v374 && v151)
        {
          v19 = v404;
          goto LABEL_612;
        }
        v19 = v404;
        if (v377)
        {
          v412 = (int8x16_t *)(v157 + 1);
          *v157 = 2;
          if ((a1 & 0x80000) == 0)
          {
            v157 = (char *)v412;
            goto LABEL_720;
          }
LABEL_719:
          v300 = _pcre2_ord2utf_8(0x100u, (uint64_t)v412);
          v412 = (int8x16_t *)((char *)v412 + v300);
          v301 = _pcre2_ord2utf_8(0x10FFFFu, (uint64_t)v412);
          v157 = &v412->i8[v301];
        }
        else if ((v378 & 0x20000) == 0 && (a1 & 0x80000) != 0 && v151 && v382 != -2146566144)
        {
          v412 = (int8x16_t *)(v157 + 1);
          *v157 = 2;
          goto LABEL_719;
        }
LABEL_720:
        v302 = v382 == -2146566144;
        v412 = (int8x16_t *)(v157 + 1);
        *v157 = 0;
        *i8 = 112;
        if (v374)
          v302 = (v382 == -2146566144) | 4;
        i8[3] = v302;
        if ((int)v154 < 1)
        {
          i8 = (char *)v412;
        }
        else
        {
          i8[3] = v302 | 2;
          memmove(i8 + 36, i8 + 4, (char *)v412 - (char *)v149);
          if (v382 == -2146566144 && !v374)
          {
            v418 = vmvnq_s8(v418);
            v419 = vmvnq_s8(v419);
          }
          v303 = v419;
          *v149 = v418;
          *(int8x16_t *)(i8 + 20) = v303;
          i8 = v412[2].i8;
        }
        *(_WORD *)(__src + 1) = bswap32((_DWORD)i8 - (_DWORD)__src) >> 16;
LABEL_621:
        v27 = 1;
        v62 = v153;
        v63 = v393;
        v372 = __PAIR64__(v153, v393);
LABEL_622:
        v29 = v387;
        v370 = v387;
        v376 = v380;
LABEL_591:
        v14 = ++v415;
        v393 = __PAIR64__(v62, v63);
        v13 = (_QWORD *)a11;
        v31 = v392;
        goto LABEL_19;
      case 0xB:
      case 0xC:
        if (v33 == -2146697216)
          v99 = 13;
        else
          v99 = -94;
        *i8++ = v99;
        v100 = v380;
        if (v380 >= 0xFFFFFFFE)
          v100 = -2;
        v27 = 1;
        goto LABEL_199;
      case 0xF:
        goto LABEL_510;
      case 0x10:
        v45 = 0;
        v39 = 0;
        v40 = 0;
        v115 = v14[2];
        v114 = v14 + 2;
        v365 = v115 | ((unint64_t)*(v114 - 1) << 32);
        v415 = v114;
        i8[3] = -89;
        goto LABEL_509;
      case 0x11:
      case 0x13:
      case 0x14:
        v47 = *(_QWORD *)(a11 + 192);
        v50 = v14[3];
        v49 = v14 + 3;
        v48 = v50;
        v52 = *(v49 - 2);
        v51 = *(v49 - 1);
        v415 = v49;
        v53 = *(_QWORD *)(a11 + 56);
        v365 = v50 | ((unint64_t)v51 << 32);
        v54 = (unsigned __int8 *)(v53 + v365);
        v55 = *(_WORD *)(a11 + 176);
        if (!v55)
        {
          v56 = 0;
          goto LABEL_257;
        }
        v56 = 0;
        v57 = v47 + 8;
        while (2)
        {
          if ((_DWORD)v52 != *(unsigned __int16 *)(v57 + 4))
            goto LABEL_45;
          if (_pcre2_strncmp_8(v54, *(unsigned __int8 **)(v57 - 8), v52))
          {
            v55 = *(_WORD *)(a11 + 176);
LABEL_45:
            ++v56;
            v57 += 16;
            if (v56 >= v55)
              goto LABEL_257;
            continue;
          }
          break;
        }
        if (!*(_WORD *)(v57 + 6))
        {
          if (v382 == -2146238464)
            v261 = -110;
          else
            v261 = -112;
          i8[3] = v261;
          i8[4] = BYTE1(*(_DWORD *)v57);
          i8[5] = *(_DWORD *)v57;
          if (*(_DWORD *)v57 > *(_DWORD *)(a11 + 248))
            *(_DWORD *)(a11 + 248) = *(_DWORD *)v57;
          goto LABEL_273;
        }
        v55 = *(_WORD *)(a11 + 176);
LABEL_257:
        if (v56 < v55)
        {
          if (v382 == -2146238464)
            v145 = -110;
          else
            v145 = -112;
          i8[3] = v145;
          LODWORD(v416[0]) = 0;
          v409 = 0;
          if (a12 || sub_1A3A9BB84(v54, v52, &v409, (int *)v416, a4, a11))
          {
            ++i8[3];
            *((_WORD *)i8 + 2) = bswap32((unsigned __int16)v409) >> 16;
            *((_WORD *)i8 + 3) = bswap32(LOWORD(v416[0])) >> 16;
            v38 = 5;
            goto LABEL_274;
          }
          return 0;
        }
        if (v382 != -2146172928)
          goto LABEL_836;
        if (v52 < 2)
          goto LABEL_271;
        v146 = 0;
        v147 = (v51 << 32) + v48 + 1;
        v148 = v52 - 1;
        do
        {
          v146 = 10 * v146 + *(unsigned __int8 *)(v53 + v147) - 48;
          if (v146 >= 0x10000)
          {
            *a4 = 161;
LABEL_830:
            *(_QWORD *)(a11 + 168) = v147;
            return 0;
          }
          ++v147;
          --v148;
        }
        while (v148);
        if (v146 > *(_DWORD *)(a11 + 212))
        {
LABEL_836:
          *a4 = 115;
          v147 = v365;
          goto LABEL_830;
        }
        if (!v146)
LABEL_271:
          LOWORD(v146) = -1;
        i8[3] = -110;
        i8[4] = BYTE1(v146);
        i8[5] = v146;
LABEL_273:
        v38 = 3;
LABEL_274:
        v39 = 0;
        v40 = 0;
        v44 = 138;
        v45 = 1;
        v46 = 1;
LABEL_510:
        ++*(_WORD *)(a11 + 180);
        *i8 = v44;
        v414 = 0;
        ++v415;
        v413 = (unsigned __int8 *)i8;
        v246 = *(_DWORD *)(a11 + 276);
        v247 = sub_1A3A9730C(v378, &v413, &v415, a4, v38, &v411, &v410, (char *)&v411 + 4, (char *)&v410 + 4, &v405, a11, v366);
        if (!v247)
          return 0;
        --*(_WORD *)(a11 + 180);
        if (v247 > 0)
          v27 = v45 & v39;
        else
          v27 = 0;
        v367 = v247;
        if (v40)
        {
          --*(_WORD *)(a11 + 182);
          v18 = a12;
          v26 = __src;
          v248 = HIDWORD(v393);
          if (a12)
            goto LABEL_516;
LABEL_529:
          i8 = (char *)v413;
          if (v44 < 0x84)
          {
            v363 = 0;
            v255 = (v44 == 126 || v44 == 130) && HIDWORD(v410) < 0xFFFFFFFE;
            if (v255 && v410 < 0xFFFFFFFE)
              v63 = HIDWORD(v411);
            else
              v63 = v393;
            if (v255 && v410 < 0xFFFFFFFE)
              v29 = HIDWORD(v410);
            else
              v29 = v387;
            v62 = v248;
            v372 = __PAIR64__(v248, v393);
            v370 = v387;
            v376 = v380;
          }
          else
          {
            if (v380 != -1 || (_DWORD)v410 == -1)
            {
              v252 = HIDWORD(v410);
              if (v410 > 0xFFFFFFFD || HIDWORD(v410) < 0xFFFFFFFE)
              {
                v363 = 0;
              }
              else
              {
                v363 = 0;
                HIDWORD(v411) = v411;
                v252 = v410 | v246;
                HIDWORD(v410) = v410 | v246;
              }
              v62 = v248;
              v376 = v380;
            }
            else
            {
              v363 = v410 < 0xFFFFFFFE;
              if (v410 >= 0xFFFFFFFE)
                v62 = v248;
              else
                v62 = v411;
              v376 = -2;
              v252 = HIDWORD(v410);
              v380 = v410;
            }
            if (v252 >= 0xFFFFFFFE)
              v63 = v393;
            else
              v63 = HIDWORD(v411);
            if (v252 >= 0xFFFFFFFE)
              v29 = v387;
            else
              v29 = v252;
            v372 = __PAIR64__(v248, v393);
            v370 = v387;
          }
LABEL_570:
          v19 = v404;
          goto LABEL_591;
        }
        v249 = v46 ^ 1;
        if (a12)
          v249 = 1;
        v248 = HIDWORD(v393);
        if ((v249 & 1) != 0)
        {
          v18 = a12;
          v26 = __src;
          if (!a12)
            goto LABEL_529;
          goto LABEL_516;
        }
        v250 = 1;
        v251 = i8;
        v26 = __src;
        do
        {
          v251 += __rev16(*(unsigned __int16 *)(v251 + 1));
          --v250;
        }
        while (*v251 != 121);
        v18 = a12;
        if (i8[3] != 167)
        {
          if (-v250 >= 2)
          {
            *(_QWORD *)(a11 + 168) = v365;
            v333 = 127;
            goto LABEL_826;
          }
          if (v250)
            v27 = v247 > 0;
          else
            v410 = 0xFFFFFFFEFFFFFFFELL;
          v44 = 138;
          if (!a12)
            goto LABEL_529;
LABEL_516:
          if (2147483627 - v404 >= v414 - 6)
          {
            v19 = v414 - 6 + v404;
            *(_DWORD *)(i8 + 1) = 7930624;
            i8[5] = 3;
            i8 += 6;
            v62 = v248;
LABEL_518:
            v63 = v393;
LABEL_519:
            v29 = v387;
            goto LABEL_591;
          }
LABEL_822:
          v333 = 120;
          goto LABEL_826;
        }
        if (!v250)
        {
          i8[3] = -108;
          i8 = (char *)v413;
          v62 = HIDWORD(v393);
          v63 = v393;
          v29 = v387;
          goto LABEL_570;
        }
        *(_QWORD *)(a11 + 168) = v365;
        v333 = 154;
LABEL_826:
        *a4 = v333;
        return 0;
      case 0x12:
        v118 = v14[3];
        v117 = v14 + 3;
        v116 = v118;
        v119 = *(v117 - 1) | ((unint64_t)*(v117 - 2) << 32);
        v415 = v117;
        if (v118 <= *(_DWORD *)(a11 + 212))
        {
          if (v116 > *(_DWORD *)(a11 + 248))
            *(_DWORD *)(a11 + 248) = v116;
          v39 = 0;
          v40 = 0;
          v365 = v119 - 2;
          i8[3] = -112;
          i8[4] = BYTE1(v116);
          i8[5] = v116;
          v38 = 3;
          goto LABEL_510;
        }
        *a4 = 115;
        *(_QWORD *)(a11 + 168) = v119;
        return 0;
      case 0x15:
        v120 = v14[2];
        if (v14[1])
        {
          if (v120 < 0xA || v120 == 10 && v14[3] <= 0x28)
          {
            v121 = -107;
            goto LABEL_508;
          }
        }
        else if (v120 == 10)
        {
          if (v14[3] == 40)
            v121 = -107;
          else
            v121 = -108;
LABEL_508:
          v39 = 0;
          v40 = 0;
          i8[3] = v121;
          v415 += 3;
LABEL_509:
          v38 = 1;
          goto LABEL_510;
        }
        v121 = -108;
        goto LABEL_508;
      case 0x16:
        v27 = 0;
        if ((v378 & 0x400) != 0)
          LOBYTE(v101) = 26;
        else
          LOBYTE(v101) = 25;
        goto LABEL_220;
      case 0x17:
        v100 = v380;
        if (v380 >= 0xFFFFFFFE)
          v100 = -2;
        if ((v378 & 0x20) != 0)
          v122 = 13;
        else
          v122 = 12;
        *i8++ = v122;
        v27 = 1;
        v62 = HIDWORD(v393);
        v63 = v393;
        v372 = v393;
        v29 = v387;
        v370 = v387;
        goto LABEL_200;
      case 0x18:
        v123 = v42 - 6;
        v124 = v380;
        if (v380 >= 0xFFFFFFFE)
          v125 = -2;
        else
          v125 = v380;
        v27 = v123 < 0x11;
        if (v123 < 0x11)
          v124 = v125;
        v380 = v124;
        if ((v42 - 15) <= 1)
        {
          v127 = v14[1];
          v126 = v127;
          v415 = v14 + 1;
          v128 = HIWORD(v127);
          v19 = v404;
          if ((_DWORD)v42 != 16 || v128)
          {
            if ((_DWORD)v42 == 16)
              v258 = 16;
            else
              v258 = 15;
            *i8 = v258;
            i8[1] = v128;
            i8[2] = v126;
            i8 += 3;
          }
          else
          {
            *i8++ = 13;
          }
          v62 = HIDWORD(v393);
          v63 = v393;
          v372 = v393;
          v29 = v387;
          v370 = v387;
          v376 = v380;
          v18 = a12;
          goto LABEL_590;
        }
        if (*(_WORD *)(a11 + 182) && (_DWORD)v42 == 3)
        {
          v19 = v404;
          v224 = a1;
          v225 = HIDWORD(v393);
          if ((*(_BYTE *)(*(_QWORD *)a11 + 64) & 0x40) == 0)
          {
            v333 = 199;
            goto LABEL_826;
          }
        }
        else
        {
          v19 = v404;
          v224 = a1;
          v225 = HIDWORD(v393);
          if ((_DWORD)v42 == 14)
          {
            *(_DWORD *)(a11 + 208) |= 0x400000u;
            v259 = 1;
LABEL_595:
            v18 = a12;
            v26 = __src;
            if (((v32 & 0xFFFE) == 4 || (_DWORD)v42 == 1) && !*(_DWORD *)(a11 + 280))
              *(_DWORD *)(a11 + 280) = 1;
            if ((((v224 & 0x80000) == 0) & v259) != 0)
              v260 = 13;
            else
              v260 = v32;
            *i8++ = v260;
            v62 = v225;
            v63 = v393;
            v372 = __PAIR64__(v225, v393);
            goto LABEL_622;
          }
        }
        v259 = 0;
        goto LABEL_595;
      case 0x1A:
        v38 = 0;
        v40 = 0;
        v46 = 0;
        v44 = 134;
        goto LABEL_202;
      case 0x1B:
        v27 = 0;
        v351 = v14[1];
        v352 = (v351 >> 18) & 1;
        v415 = v14 + 1;
        v360 = (v351 >> 3) & 1;
        v361 = (v351 & 0x40000) == 0;
        v378 = v351;
        goto LABEL_221;
      case 0x20:
        v130 = v14[2];
        v129 = v14 + 2;
        v112 = v130 | ((unint64_t)*(v129 - 1) << 32);
        v415 = v129;
        v82 = a11;
        if (v42 > *(_DWORD *)(a11 + 212))
        {
LABEL_833:
          *(_QWORD *)(v82 + 168) = v112;
          v333 = 115;
          goto LABEL_826;
        }
        v365 = v112;
LABEL_197:
        v363 = 0;
        v27 = 0;
        *i8 = 117;
        i8[1] = BYTE1(v42);
        i8[2] = v42;
        i8 += 3;
        *(_DWORD *)(v82 + 292) = 1;
        v100 = v380;
        if (v380 >= 0xFFFFFFFE)
          v100 = -2;
LABEL_199:
        v62 = HIDWORD(v393);
        v63 = v393;
        HIDWORD(v372) = HIDWORD(v393);
        v29 = v387;
LABEL_200:
        v380 = v100;
        v376 = v100;
        goto LABEL_223;
      case 0x22:
        v38 = 0;
        v40 = 0;
        v46 = 0;
        v44 = 133;
LABEL_202:
        v39 = 1;
        goto LABEL_510;
      case 0x23:
        v45 = 0;
        v38 = 0;
        v46 = 0;
        ++*(_WORD *)(a11 + 182);
        v44 = 126;
        goto LABEL_254;
      case 0x24:
        if (v14[1] != -2145845248 || v14[2] + 2143354879 > 0xFFF4FFFE)
        {
          v45 = 0;
          v38 = 0;
          v46 = 0;
          ++*(_WORD *)(a11 + 182);
          v44 = 127;
LABEL_254:
          v39 = 1;
          v40 = 1;
          goto LABEL_510;
        }
        v27 = 0;
        *i8++ = -94;
        ++v415;
LABEL_221:
        v62 = HIDWORD(v393);
        v63 = v393;
LABEL_222:
        v29 = v387;
        goto LABEL_223;
      case 0x25:
        v45 = 0;
        v38 = 0;
        v46 = 0;
        ++*(_WORD *)(a11 + 182);
        v44 = 128;
        goto LABEL_254;
      case 0x26:
        v45 = 0;
        v38 = 0;
        v46 = 0;
        ++*(_WORD *)(a11 + 182);
        v44 = 129;
        goto LABEL_254;
      case 0x27:
        v45 = 0;
        v38 = 0;
        v46 = 0;
        ++*(_WORD *)(a11 + 182);
        v44 = 130;
        goto LABEL_254;
      case 0x28:
        v45 = 0;
        v38 = 0;
        v46 = 0;
        ++*(_WORD *)(a11 + 182);
        v44 = 131;
        goto LABEL_254;
      case 0x29:
      case 0x2D:
        goto LABEL_225;
      case 0x2A:
        *(_DWORD *)(a11 + 284) = 1;
        v131 = *(uint64_t **)(a11 + 184);
        if (v131)
        {
          v18 = a12;
          v19 = v404;
          v26 = __src;
          v62 = HIDWORD(v393);
          do
          {
            if (*((unsigned __int16 *)v131 + 5) < *(unsigned __int16 *)(a11 + 182))
              break;
            if (a12)
            {
              v19 += 3;
            }
            else
            {
              *i8 = -91;
              i8[1] = *((_BYTE *)v131 + 9);
              i8[2] = *((_BYTE *)v131 + 8);
              i8 += 3;
            }
            v131 = (uint64_t *)*v131;
          }
          while (v131);
        }
        else
        {
          v18 = a12;
          v19 = v404;
          v26 = __src;
          v62 = HIDWORD(v393);
        }
        v27 = 0;
        if (*(_WORD *)(a11 + 182))
          v240 = -92;
        else
          v240 = -93;
        *i8++ = v240;
        v241 = v380;
        if (v380 >= 0xFFFFFFFE)
          v241 = -2;
        v380 = v241;
        v379 = 1;
        goto LABEL_518;
      case 0x2B:
      case 0x2C:
        goto LABEL_128;
      case 0x2E:
      case 0x30:
        *(_DWORD *)(a11 + 288) = 1;
LABEL_128:
        v27 = 0;
        v101 = dword_1A3ACA37C[(v32 + 2144796672) >> 16];
        goto LABEL_220;
      case 0x2F:
      case 0x31:
        *(_DWORD *)(a11 + 288) = 1;
        goto LABEL_225;
      case 0x32:
        v27 = 0;
        *(_DWORD *)(a11 + 208) |= 0x1000u;
        LOBYTE(v101) = -98;
        goto LABEL_220;
      case 0x33:
        *(_DWORD *)(a11 + 208) |= 0x1000u;
LABEL_225:
        v132 = (unsigned __int8 *)(i8 + 1);
        *i8 = dword_1A3ACA37C[(v32 + 2144796672) >> 16];
        v133 = i8 + 2;
        v135 = v415[1];
        v134 = v135;
        ++v415;
        v413 = v132;
        if (v135 < 1)
        {
          v136 = 0;
          v18 = a12;
          v19 = v404;
        }
        else
        {
          v136 = 0;
          v18 = a12;
          v19 = v404;
          do
          {
            v137 = v415[1];
            ++v415;
            if ((a1 & 0x80000) != 0)
            {
              v138 = _pcre2_ord2utf_8(v137, (uint64_t)v417);
            }
            else
            {
              v417[0] = v137;
              v138 = 1;
            }
            v139 = v138;
            if (a12)
            {
              v19 += v138;
            }
            else
            {
              memcpy(v133, v417, v138);
              v133 += v139;
              v136 += v139;
            }
            --v134;
          }
          while (v134);
          v132 = v413;
        }
        v27 = 0;
        *v132 = v136;
        *v133 = 0;
        i8 = v133 + 1;
        goto LABEL_237;
      case 0x34:
      case 0x35:
      case 0x36:
        goto LABEL_50;
      case 0x37:
      case 0x38:
      case 0x39:
        v41 = 1;
        goto LABEL_50;
      case 0x3A:
      case 0x3B:
      case 0x3C:
        v41 = 0;
        v43 = 1;
        goto LABEL_50;
      case 0x3D:
      case 0x3E:
      case 0x3F:
        v59 = v14[2];
        v58 = v14 + 2;
        v43 = v59;
        v41 = *(v58 - 1);
        v415 = v58;
LABEL_50:
        if (v27)
          v60 = v41 == 0;
        else
          v60 = 1;
        v27 = !v60;
        v61 = v43 != v41;
        if (v41)
          v62 = HIDWORD(v393);
        else
          v62 = HIDWORD(v372);
        if (v41)
          v63 = v393;
        else
          v63 = v372;
        v64 = v380;
        if (!v41)
          v64 = v376;
        v380 = v64;
        if (v41)
          v29 = v387;
        else
          v29 = v370;
        v65 = (v382 + 2144010240) >> 16;
        if (v65 > 0xA)
          goto LABEL_130;
        v66 = 1;
        if (((1 << v65) & 0x249) != 0)
        {
          v68 = 0;
          v67 = 0;
        }
        else if (((1 << v65) & 0x492) != 0)
        {
          v66 = 0;
          v67 = 1;
          v68 = v361;
        }
        else
        {
LABEL_130:
          v66 = 0;
          v67 = 1;
          v68 = v352;
        }
        v69 = __src;
        v413 = (unsigned __int8 *)__src;
        v70 = *__src;
        v71 = (v70 - 117);
        if (v71 > 0x2D)
          goto LABEL_133;
        if (((1 << (v70 - 117)) & 0x2BFE00) != 0)
        {
          if (v43 == 1 && v41 == 1)
            v73 = v66;
          else
            v73 = 1;
          if ((v73 & 1) != 0)
          {
            v74 = (_DWORD)i8 - (_DWORD)__src;
            if ((_DWORD)v70 != 138)
              goto LABEL_85;
            if (__src[3] != 148 || __src[__rev16(*(unsigned __int16 *)(__src + 1))] == 120)
            {
              LODWORD(v70) = 138;
              goto LABEL_85;
            }
          }
          goto LABEL_147;
        }
        if ((_DWORD)v70 == 117)
        {
          if (v43 == 1 && v41 == 1)
            v227 = v66;
          else
            v227 = 1;
          if (v227 == 1)
          {
            v18 = a12;
            if (v41)
            {
              if (v41 == 1 && v43 == 0x10000)
              {
                v41 = 1;
              }
              else
              {
                v294 = v41 - (v43 == v41);
                if (a12)
                {
                  if (v294 > 715827882)
                    goto LABEL_822;
                  v295 = 3 * v294;
                  if (2147483627 - v404 < v295)
                    goto LABEL_822;
                  v404 += v295;
                }
                else if (v294 >= 1)
                {
                  do
                  {
                    v306 = *(_WORD *)v69;
                    i8[2] = v69[2];
                    *(_WORD *)i8 = v306;
                    v69 = i8;
                    i8 += 3;
                    --v294;
                  }
                  while (v294);
                  v69 = i8 - 3;
                }
                v307 = v43 - v41;
                if (v43 == v41)
                  goto LABEL_155;
                v41 = 0;
                if (v43 == 0x10000)
                  v43 = 0x10000;
                else
                  v43 = v307;
              }
            }
            *(_WORD *)(v69 + 3) = *(_WORD *)v69;
            v69[5] = v69[2];
            LODWORD(v70) = 134;
            *(_WORD *)v69 = 134;
            v69[2] = 6;
            *((_WORD *)v69 + 3) = 121;
            v69[8] = 6;
            i8 += 6;
            v414 = 9;
            __src = v69;
            v74 = (_DWORD)i8 - (_DWORD)v69;
            v367 = -1;
LABEL_85:
            v75 = v43 != 0x10000 || v70 >= 0x84;
            if (v75)
              v76 = v43;
            else
              v76 = v41 + 1;
            v77 = v41 - 1;
            v336 = v74;
            if (v41 != 1)
            {
              if (!v41)
              {
                v383 = v68;
                v394 = v67;
                v388 = v61;
                v337 = v27;
                v18 = a12;
                if (v76 < 2 || v76 == 0x10000)
                {
                  v78 = __src;
                  v398 = (unsigned __int8 *)(__src + 1);
                  memmove(__src + 1, __src, v74);
                  ++i8;
                  if (!v76)
                  {
                    *__src = -90;
                    v19 = v404;
                    v27 = v337;
                    v61 = v388;
                    v102 = (unsigned __int8 *)(__src + 1);
                    goto LABEL_150;
                  }
                  v79 = 0;
                  v68 = v383;
                  *__src = v383 - 106;
                }
                else
                {
                  v398 = (unsigned __int8 *)(__src + 4);
                  memmove(__src + 4, __src, v74);
                  i8 += 4;
                  v68 = v383;
                  *__src = v383 - 106;
                  v79 = __src + 2;
                  *(_WORD *)(__src + 1) = 134;
                  __src[3] = 0;
                  v78 = 0;
                }
                v67 = v394;
                if (v76 == 0x10000)
                {
                  v79 = v78;
                  v111 = i8;
                  v27 = v337;
                  v61 = v388;
                  v102 = v398;
LABEL_636:
                  v268 = v111 - 3;
                  v269 = &v111[-__rev16(*((unsigned __int16 *)v111 - 1)) - 3];
                  v270 = *v269;
                  v271 = v66 ^ 1;
                  if (v270 != 132)
                    v271 = 1;
                  if ((v271 & 1) == 0)
                  {
                    v270 = 134;
                    *v269 = -122;
                    goto LABEL_642;
                  }
                  if ((v270 & 0xFE) != 0x84)
                  {
LABEL_642:
                    if (!a12)
                    {
                      if (v367 < 0)
                      {
                        LOBYTE(v270) = v270 + 5;
                        goto LABEL_699;
                      }
                      if (v270 == 138)
                      {
                        if (v269[__rev16(*(unsigned __int16 *)(v269 + 1))] == 120)
                        {
                          LOBYTE(v270) = -118;
                          goto LABEL_700;
                        }
                        LOBYTE(v270) = -113;
LABEL_699:
                        *v269 = v270;
                      }
                    }
LABEL_700:
                    if (v66)
                    {
                      if (v270 == 143 || v270 == 138)
                      {
                        __srca = (_WORD)v111 - (_WORD)v269;
                        v296 = v102;
                        v297 = v27;
                        v298 = v61;
                        memmove(v269 + 3, v269, (int)v111 - (int)v269);
                        v102 = v296;
                        v61 = v298;
                        v27 = v297;
                        if (*v269 == 138)
                          v299 = -121;
                        else
                          v299 = -116;
                        *v269 = v299;
                        v111[3] = 124;
                        v111[4] = (unsigned __int16)(__srca + 3) >> 8;
                        v111[5] = __srca + 3;
                        i8 = v111 + 6;
                        v269[1] = (unsigned __int16)(__srca + 3) >> 8;
                        v269[2] = __srca + 3;
                      }
                      else
                      {
                        *v269 = v270 + 1;
                        *v268 = 124;
                        i8 = v111;
                      }
                      v18 = a12;
                      if (v79)
                        *v79 = -104;
                      v75 = v41 >= 2;
                      v19 = v404;
                      if (!v75)
                        goto LABEL_150;
LABEL_764:
                      v311 = v413;
                      v312 = *v413;
                      if (v312 > 0x5C)
                      {
                        if ((v312 - 110) < 2)
                        {
                          v311 = v413 + 33;
LABEL_779:
                          v413 = v311;
                          goto LABEL_780;
                        }
                        if ((_DWORD)v312 == 112)
                        {
                          v315 = __rev16(*(unsigned __int16 *)(v413 + 1));
                        }
                        else
                        {
                          if ((_DWORD)v312 != 93)
                          {
LABEL_780:
                            v316 = (_DWORD)i8 - (_DWORD)v311;
                            if ((int)i8 - (int)v311 >= 1)
                            {
                              v317 = *v311;
                              if (v317 <= 0x75 && (v318 = byte_1A3ACA3B8[v317]) != 0)
                              {
                                *v311 = v318;
                              }
                              else
                              {
                                v319 = v102;
                                v320 = v27;
                                v321 = v61;
                                memmove(v311 + 3, v311, ((_DWORD)i8 - (_DWORD)v311));
                                v102 = v319;
                                v61 = v321;
                                v27 = v320;
                                *v311 = -124;
                                i8[3] = 121;
                                i8[4] = (unsigned __int16)(v316 + 3) >> 8;
                                i8[5] = v316 + 3;
                                i8 += 6;
                                *(_WORD *)(v413 + 1) = bswap32(v316 + 3) >> 16;
                              }
                            }
                            v18 = a12;
                            goto LABEL_150;
                          }
                          v315 = 2 * (v413[3] - 15 < 2) + 4;
                        }
                      }
                      else
                      {
                        if ((v312 - 29) > 0x33
                          || ((1 << (v312 - 29)) & 0x800400200100FLL) == 0)
                        {
                          goto LABEL_780;
                        }
                        v311 = &v413[_pcre2_OP_lengths_8[v312]];
                        v413 = v311;
                        if ((a1 & 0x80000) == 0)
                          goto LABEL_780;
                        v314 = *(v311 - 1);
                        if (v314 < 0xC0)
                          goto LABEL_780;
                        v315 = _pcre2_utf8_table4[v314 & 0x3F];
                      }
                      v311 += v315;
                      goto LABEL_779;
                    }
                    *v268 = v68 + 122;
                    i8 = v111;
                    goto LABEL_148;
                  }
                  *v268 = v68 + 122;
                  v69 = (char *)v102;
                  v18 = a12;
                  goto LABEL_682;
                }
                v243 = v76 - 1;
                v27 = v337;
                v61 = v388;
                v102 = v398;
LABEL_633:
                if (v243 == 0x10000)
                {
                  v79 = v78;
                  goto LABEL_635;
                }
                if (v18 && v243)
                {
                  v272 = (v414 + 7) * v243;
                  v273 = v272 - 6;
                  if (v272 > 0x7FFFFFFF || 2147483627 - v404 < v273)
                    goto LABEL_822;
                  v19 = v404 + v273;
                }
                else
                {
                  v19 = v404;
                  if (v243)
                  {
                    v397 = v67;
                    v390 = v61;
                    v339 = v27;
                    v275 = (v68 - 106);
                    *i8 = v68 - 106;
                    v276 = i8 + 1;
                    v277 = v243 - 1;
                    v400 = v102;
                    if (v243 != 1)
                    {
                      v278 = (_WORD)i8 + 2;
                      do
                      {
                        v279 = v278 - (_WORD)v79;
                        if (!v79)
                          v279 = 0;
                        v276[1] = HIBYTE(v279);
                        v79 = v276 + 1;
                        *v276 = -122;
                        v276[2] = v279;
                        v280 = v275;
                        memcpy(v276 + 3, v400, v336);
                        v275 = v280;
                        v276 += v336 + 4;
                        *(v276 - 1) = v280;
                        v278 += v336 + 4;
                        --v277;
                      }
                      while (v277);
                      v79 = &v276[-v336 - 3];
                      v18 = a12;
                      v19 = v404;
                    }
                    memcpy(v276, v400, v336);
                    v102 = v400;
                    i8 = &v276[v336];
                    v27 = v339;
                    v61 = v390;
                    v67 = v397;
                  }
                }
                if (v79)
                {
                  v281 = (_DWORD)i8 + 1;
                  do
                  {
                    v282 = v281 - (_BYTE)v79;
                    v283 = &i8[-(v281 - (int)v79)];
                    v284 = __rev16(*(unsigned __int16 *)(v283 + 1));
                    *i8 = 121;
                    v285 = (v281 - (_DWORD)v79) >> 8;
                    i8[1] = (unsigned __int16)(v281 - (_WORD)v79) >> 8;
                    i8[2] = v281 - (_BYTE)v79;
                    if ((_DWORD)v284)
                      v286 = v79 == 0;
                    else
                      v286 = 1;
                    v79 -= v284;
                    i8 += 3;
                    v283[1] = v285;
                    v283[2] = v282;
                    v281 += 3;
                  }
                  while (!v286);
                }
                v111 = i8;
                v69 = (char *)v102;
LABEL_763:
                v102 = (unsigned __int8 *)v69;
                i8 = v111;
                if ((v67 & 1) == 0)
                  goto LABEL_764;
LABEL_150:
                *(_DWORD *)(a11 + 276) |= 2 * v61;
                v26 = (char *)v102;
                goto LABEL_591;
              }
              if (a12)
              {
                v144 = v414 * v77;
                if (v414 * v77 > 0x7FFFFFFF || 2147483627 - v404 < v144)
                  goto LABEL_822;
                v404 += v144;
              }
              else
              {
                v385 = v68;
                v396 = v67;
                v389 = v61;
                v338 = v27;
                if (v363 && v29 > 0xFFFFFFFD)
                {
                  v63 = v62;
                  v29 = v380;
                }
                v242 = v74;
                do
                {
                  memcpy(i8, __src, v242);
                  i8 += v242;
                  LODWORD(v77) = v77 - 1;
                }
                while ((_DWORD)v77);
                v27 = v338;
                v61 = v389;
                v67 = v396;
                v68 = v385;
              }
            }
            v79 = 0;
            if (v76 == 0x10000)
            {
              v102 = (unsigned __int8 *)__src;
LABEL_635:
              v111 = i8;
              goto LABEL_636;
            }
            v243 = v76 - v41;
            v102 = (unsigned __int8 *)__src;
            v78 = 0;
            v18 = a12;
            goto LABEL_633;
          }
        }
        else if (v71 != 45)
        {
LABEL_133:
          if ((v70 - 110) < 7)
          {
            if (v43)
            {
              v18 = a12;
              if (v43 == 1 && v41 == 1)
              {
                v102 = (unsigned __int8 *)__src;
LABEL_149:
                v19 = v404;
                goto LABEL_150;
              }
              if (v41 || v43 != 0x10000)
              {
                v111 = i8 + 1;
                if (v41 == 1 && v43 == 0x10000)
                {
                  v214 = v68 + 100;
                }
                else
                {
                  if (v43 != 1 || v41)
                  {
                    *i8 = v68 + 104;
                    i8[1] = BYTE1(v41);
                    i8[2] = v41;
                    if (v43 == 0x10000)
                      v288 = 0;
                    else
                      v288 = v43;
                    i8[3] = HIBYTE(v288);
                    i8[4] = v288;
                    v111 = i8 + 5;
                    goto LABEL_682;
                  }
                  v214 = v68 + 102;
                }
                *i8 = v214;
LABEL_682:
                v19 = v404;
                goto LABEL_763;
              }
              *i8++ = v68 + 98;
LABEL_155:
              v111 = i8;
              goto LABEL_682;
            }
            goto LABEL_146;
          }
          if ((v70 - 29) > 3)
          {
            if (v70 >= 0x17)
            {
              v333 = 110;
              goto LABEL_826;
            }
            if (v43 == 1 && v41 == 1)
              goto LABEL_147;
            v395 = v67;
            v108 = 0;
            if ((v70 - 15) > 1)
            {
              v109 = -1;
              v110 = -1;
            }
            else
            {
              v110 = __src[1];
              v109 = __src[2];
            }
            LOBYTE(v103) = 52;
            if (!v43)
              goto LABEL_146;
          }
          else
          {
            if (v43 == 1 && v41 == 1)
              goto LABEL_147;
            v103 = dword_1A3ACA3A8[v70 - 29];
            v104 = *(i8 - 1);
            v395 = v67;
            if ((a1 & 0x80000) != 0 && (v104 & 0xC0) == 0x80)
            {
              v399 = dword_1A3ACA3A8[v70 - 29];
              v384 = v68;
              v105 = v27;
              v106 = 0;
              do
                v107 = i8[--v106] & 0xC0;
              while (v107 == 128);
              v108 = -(int)v106;
              __memcpy_chk();
              v109 = -1;
              v110 = -1;
              v27 = v105;
              v61 = v43 != v41;
              LOBYTE(v68) = v384;
              LOBYTE(v103) = v399;
              if (!v43)
              {
LABEL_146:
                i8 = __src;
                goto LABEL_147;
              }
            }
            else
            {
              v417[0] = *(i8 - 1);
              v109 = -1;
              v110 = -1;
              v108 = 1;
              if (v41 >= 2 && v70 <= 0x1E)
              {
                v29 = *(_DWORD *)(a11 + 276) | ((_DWORD)v70 == 30);
                v109 = -1;
                v108 = 1;
                v63 = v104;
              }
              if (!v43)
                goto LABEL_146;
            }
          }
          v228 = v103 + v68;
          if (!v41)
          {
            if (v43 == 1)
            {
              v292 = v228 + 37;
              v69 = __src;
              *__src = v292;
              v256 = __src + 1;
              v19 = v404;
              goto LABEL_758;
            }
            v19 = v404;
            if (v43 != 0x10000)
            {
              v293 = v228 + 39;
              v69 = __src;
              *__src = v293;
              __src[1] = BYTE1(v43);
              __src[2] = v43;
              v256 = __src + 3;
              goto LABEL_758;
            }
            v230 = v228 + 33;
LABEL_574:
            v69 = __src;
            *__src = v230;
            v256 = __src + 1;
LABEL_758:
            if (v108)
            {
              v309 = v27;
              v310 = v61;
              memcpy(v256, v417, v108);
              v61 = v310;
              v27 = v309;
              v111 = &v256[v108];
            }
            else
            {
              *v256 = v70;
              v111 = v256 + 1;
              if ((v110 & 0x80000000) == 0)
              {
                v256[1] = v110;
                v111 = v256 + 3;
                v256[2] = v109;
              }
            }
            v18 = a12;
            v67 = v395;
            goto LABEL_763;
          }
          if (v41 == 1)
          {
            v229 = v43 - 1;
            if (v43 == 1)
            {
              v102 = (unsigned __int8 *)__src;
              goto LABEL_148;
            }
            v19 = v404;
            if (v43 == 0x10000)
            {
              v230 = v228 + 35;
              goto LABEL_574;
            }
            *i8 = v228 + 39;
            i8[1] = HIBYTE(v229);
            i8[2] = v229;
            goto LABEL_756;
          }
          *__src = v103 + 41;
          __src[1] = BYTE1(v41);
          __src[2] = v41;
          v256 = __src + 3;
          v262 = v43 - v41;
          if (v43 == v41)
          {
            v19 = v404;
          }
          else
          {
            v19 = v404;
            if (v108)
            {
              v289 = v108;
              v340 = v27;
              v401 = (char *)v108;
              v290 = v61;
              v291 = v109;
              v391 = v110;
              v386 = v262;
              memcpy(v256, v417, v289);
              v262 = v386;
              v110 = v391;
              v109 = v291;
              v61 = v290;
              v108 = (size_t)v401;
              v27 = v340;
              i8 = &v401[(_QWORD)v256];
            }
            else
            {
              __src[3] = v70;
              if (v110 < 0)
              {
                i8 = __src + 4;
              }
              else
              {
                __src[4] = v110;
                i8 = __src + 6;
                __src[5] = v109;
              }
            }
            if (v43 == 0x10000)
            {
              v308 = v228 + 33;
            }
            else
            {
              if (v262 != 1)
              {
                *i8 = v228 + 39;
                i8[1] = BYTE1(v262);
                i8[2] = v262;
LABEL_756:
                v256 = i8 + 3;
                goto LABEL_757;
              }
              v308 = v228 + 37;
            }
            *i8 = v308;
            v256 = i8 + 1;
          }
LABEL_757:
          v69 = __src;
          goto LABEL_758;
        }
LABEL_147:
        v102 = (unsigned __int8 *)__src;
LABEL_148:
        v18 = a12;
        goto LABEL_149;
      default:
        v97 = a11;
        v98 = a1;
        v62 = HIDWORD(v393);
        if ((*v14 & 0x80000000) == 0)
          goto LABEL_240;
        goto LABEL_832;
    }
  }
}

void sub_1A3A9A27C(uint64_t a1, void *__src, size_t __n, unsigned int a4, int a5)
{
  int v6;
  _WORD *v9;
  size_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char *v14;

  v6 = __n;
  v9 = *(_WORD **)(a1 + 72);
  v10 = __n;
  if (a5)
  {
    v11 = a5;
    v12 = __n + 2;
    do
    {
      v13 = memcmp(__src, v9 + 1, v10);
      if (v13)
      {
        if (v13 < 0)
          goto LABEL_9;
      }
      else if (*((_BYTE *)v9 + v12))
      {
LABEL_9:
        memmove((char *)v9 + *(unsigned __int16 *)(a1 + 178), v9, v11 * *(unsigned __int16 *)(a1 + 178));
        break;
      }
      v9 = (_WORD *)((char *)v9 + *(unsigned __int16 *)(a1 + 178));
      --v11;
    }
    while (v11);
  }
  *v9 = bswap32(a4) >> 16;
  v14 = (char *)(v9 + 1);
  memcpy(v14, __src, v10);
  bzero(&v14[v10], *(unsigned __int16 *)(a1 + 178) - v6 - 2);
}

unsigned __int8 *sub_1A3A9A34C(unsigned __int8 *result, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  while (2)
  {
    v2 = *result;
    switch(*result)
    {
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '^':
      case '_':
        v3 = result[1];
        goto LABEL_9;
      case '[':
      case '\\':
      case ']':
      case 'a':
        v3 = result[3];
LABEL_9:
        v5 = 2 * ((v3 - 15) < 2);
        goto LABEL_10;
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'v':
        goto LABEL_15;
      case 'p':
        v6 = *(unsigned __int16 *)(result + 1);
        goto LABEL_13;
      case 'u':
        return result;
      case 'w':
        v6 = *(unsigned __int16 *)(result + 5);
LABEL_13:
        result += __rev16(v6);
        continue;
      default:
        if ((v2 - 153) <= 8 && ((1 << (v2 + 103)) & 0x155) != 0)
        {
          v5 = result[1];
LABEL_10:
          result += v5 + _pcre2_OP_lengths_8[v2];
          continue;
        }
        if (*result)
        {
LABEL_15:
          result += _pcre2_OP_lengths_8[v2];
          if (a2 && (v2 - 29) <= 0x37)
          {
            v7 = *(result - 1);
            if (v7 >= 0xC0)
              result += _pcre2_utf8_table4[v7 & 0x3F];
          }
          continue;
        }
        return 0;
    }
  }
}

uint64_t sub_1A3A9A430(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t i;
  unsigned __int8 *v12;
  uint64_t result;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = a1;
  v10 = (a4 + 1);
  for (i = *a1; ; i = 0x78u)
  {
    v12 = sub_1A3A9C0B0(&v9[_pcre2_OP_lengths_8[i]], 0);
    result = 0;
    v14 = *v12;
    if (v14 > 0x5D)
    {
      switch(*v12)
      {
        case 0x7Eu:
        case 0x82u:
          v18 = v12;
          v17 = a2;
          v19 = a3;
          v20 = a4;
          v21 = 1;
          goto LABEL_17;
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
        case 0x83u:
        case 0x85u:
          return result;
        case 0x84u:
          v18 = v12;
          v17 = a2;
          v19 = a3;
          v20 = v10;
          goto LABEL_16;
        case 0x86u:
        case 0x87u:
        case 0x8Bu:
        case 0x8Cu:
          goto LABEL_14;
        case 0x88u:
        case 0x89u:
        case 0x8Du:
        case 0x8Eu:
          v15 = __rev16(*(unsigned __int16 *)(v12 + 3));
          if (v15 >= 0x20)
            v16 = 1;
          else
            v16 = 1 << v15;
          v17 = v16 | a2;
          v18 = v12;
          goto LABEL_15;
        case 0x8Au:
        case 0x8Fu:
          if (v12[__rev16(*(unsigned __int16 *)(v12 + 1))] != 120)
            return 0;
LABEL_14:
          v18 = v12;
          v17 = a2;
LABEL_15:
          v19 = a3;
          v20 = a4;
LABEL_16:
          v21 = a5;
LABEL_17:
          result = sub_1A3A9A430(v18, v17, v19, v20, v21);
          if ((_DWORD)result)
            goto LABEL_18;
          return result;
        default:
          if (v14 == 94)
            goto LABEL_21;
          return result;
      }
    }
    if (v14 - 1 >= 2)
      break;
LABEL_18:
    v9 += __rev16(*(unsigned __int16 *)(v9 + 1));
    if (*v9 != 120)
      return 1;
  }
  if (v14 - 85 >= 2)
  {
    if (v14 != 27)
      return result;
    goto LABEL_18;
  }
LABEL_21:
  if (v12[1] == 13)
  {
    result = 0;
    if ((int)a4 > 0 || (*(_DWORD *)(a3 + 252) & a2) != 0)
      return result;
    if (!(*(_DWORD *)(a3 + 288) | a5) && (*(_BYTE *)(a3 + 205) & 0x80) == 0)
      goto LABEL_18;
  }
  return 0;
}

uint64_t sub_1A3A9A5E8(_BYTE *a1, unsigned int *a2, int a3)
{
  _BYTE *v5;
  uint64_t v6;
  unsigned int v7;
  char i;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;

  v5 = a1;
  v6 = 0;
  v7 = -2;
  *a2 = -2;
  for (i = *a1 + 120; ; i = -16)
  {
    v9 = i > 6u ? 0 : qword_1A3ACA448[i];
    v10 = sub_1A3A9C0B0(&v5[v9 + 3], 1);
    v11 = *v10;
    if (v11 > 0x35)
      break;
    if (*v10 > 0x28u)
    {
      if (v11 - 48 >= 2)
      {
        if (v11 == 41)
        {
          v10 += 2;
          if (!a3)
            return 0;
        }
        else
        {
          if (v11 != 43)
            return 0;
LABEL_22:
          if (!a3)
            return 0;
        }
        v15 = v10[1];
        if (v7 > 0xFFFFFFFD)
        {
          v7 = 0;
LABEL_40:
          v6 = v15;
          goto LABEL_42;
        }
        goto LABEL_41;
      }
    }
    else
    {
      if (v11 - 35 < 2 || v11 == 29)
        goto LABEL_22;
      if (v11 != 30)
        return 0;
    }
LABEL_36:
    if (!a3 || (char)v10[1] < 0)
      return 0;
    v15 = v10[1];
    if (v7 > 0xFFFFFFFD)
    {
      v7 = 1;
      goto LABEL_40;
    }
LABEL_41:
    if ((_DWORD)v6 != (_DWORD)v15)
      return 0;
LABEL_42:
    v5 += __rev16(*(unsigned __int16 *)(v5 + 1));
    if (*v5 != 120)
    {
      *a2 = v7;
      return v6;
    }
  }
  if (v11 - 126 > 0x10 || ((1 << (v11 - 126)) & 0x18FD1) == 0)
  {
    if (v11 == 54)
    {
      v10 += 2;
    }
    else if (v11 != 56)
    {
      return 0;
    }
    goto LABEL_36;
  }
  v14 = sub_1A3A9A5E8();
  if (v7 > 0xFFFFFFFD)
  {
    v6 = v14;
    v7 = 0;
    goto LABEL_42;
  }
  if ((_DWORD)v6 == (_DWORD)v14 && v7 == 0)
    goto LABEL_42;
  return 0;
}

uint64_t sub_1A3A9A7CC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  uint64_t result;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;

  v9 = a1;
  v27 = a4 + 1;
  v10 = *a1;
  while (2)
  {
    v11 = sub_1A3A9C0B0(&v9[_pcre2_OP_lengths_8[v10]], 0);
    v12 = *v11;
    if (v12 != 138)
      goto LABEL_16;
    v14 = v11 + 3;
    v13 = v11[3];
    if (v13 == 119)
    {
      v15 = __rev16(*((unsigned __int16 *)v11 + 4));
      goto LABEL_7;
    }
    if (v13 == 118)
    {
      v15 = 6;
LABEL_7:
      v14 += v15;
      v13 = *v14;
    }
    v16 = v13 - 144;
    v17 = v16 > 0x12;
    v18 = (1 << v16) & 0x4003F;
    if (!v17 && v18 != 0)
      return 0;
    result = sub_1A3A9A7CC(v14, a2, a3, a4, 1);
    if (!(_DWORD)result)
      return result;
    do
      v14 += __rev16(*(unsigned __int16 *)(v14 + 1));
    while (*v14 == 120);
    v11 = sub_1A3A9C0B0(v14 + 3, 0);
    v12 = *v11;
LABEL_16:
    switch(v12)
    {
      case 126:
      case 130:
        v21 = a2;
        v24 = a3;
        v25 = a4;
        v26 = 1;
        goto LABEL_24;
      case 127:
      case 128:
      case 129:
      case 131:
      case 133:
      case 138:
        goto LABEL_36;
      case 132:
        v21 = a2;
        v24 = a3;
        v25 = v27;
        goto LABEL_23;
      case 134:
      case 135:
      case 139:
      case 140:
        v21 = a2;
        goto LABEL_22;
      case 136:
      case 137:
      case 141:
      case 142:
        v22 = __rev16(*(unsigned __int16 *)(v11 + 3));
        if (v22 >= 0x20)
          v23 = 1;
        else
          v23 = 1 << v22;
        v21 = v23 | a2;
LABEL_22:
        v24 = a3;
        v25 = a4;
LABEL_23:
        v26 = a5;
LABEL_24:
        result = sub_1A3A9A7CC(v11, v21, v24, v25, v26);
        if ((_DWORD)result)
          goto LABEL_25;
        return result;
      default:
        if ((v12 - 85) < 2 || v12 == 94)
        {
          if (v11[1] != 12)
            return 0;
          result = 0;
          if ((int)a4 > 0 || (*(_DWORD *)(a3 + 252) & a2) != 0)
            return result;
          if (*(_DWORD *)(a3 + 288) | a5 || (*(_BYTE *)(a3 + 205) & 0x80) != 0)
            return 0;
        }
        else
        {
LABEL_36:
          if ((v12 - 29) < 0xFFFFFFFE)
            return 0;
        }
LABEL_25:
        v9 += __rev16(*(unsigned __int16 *)(v9 + 1));
        v10 = 0x78u;
        if (*v9 == 120)
          continue;
        result = 1;
        break;
    }
    return result;
  }
}

_DWORD *sub_1A3A9A9F0(int a1, _QWORD *a2, int a3, _DWORD *a4, uint64_t a5)
{
  _DWORD *v5;
  BOOL v6;
  _DWORD *v7;
  _DWORD *v8;

  v5 = (_DWORD *)*a2;
  if (*a2)
    v5[2] = a1 - *(_DWORD *)(a5 + 56) - v5[1];
  if (a3)
  {
    if (v5)
      v6 = v5 == a4 - 4;
    else
      v6 = 0;
    if (v6 && v5[3] == 255)
    {
      v7 = a4;
      a4 = v5;
    }
    else
    {
      v7 = a4 + 4;
      *a4 = -2147090432;
      *((_QWORD *)a4 + 1) = 0xFF00000000;
    }
    v8 = a4;
    a4[1] = a1 - *(_DWORD *)(a5 + 56);
    a4 = v7;
  }
  else
  {
    v8 = 0;
  }
  *a2 = v8;
  return a4;
}

uint64_t sub_1A3A9AA74(unint64_t *a1, _DWORD *a2, _WORD *a3, _WORD *a4, _DWORD *a5, uint64_t a6)
{
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  unsigned int v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t result;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  char *v31;
  int v32;
  int v33;
  int v34;
  char *v35;
  unsigned __int8 v36[52];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = (_BYTE *)*a1;
  v9 = (_BYTE *)*a1;
  v10 = *(_QWORD *)(a6 + 64);
  if (*a1 >= v10)
    goto LABEL_31;
  v15 = *v9++;
  v14 = v15;
  *a2 = 0;
  if (v15 != 123)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a6 + 32) + v14) & 2) != 0)
    {
      *(_WORD *)v36 = __tolower(v14);
      *a1 = (unint64_t)v9;
LABEL_33:
      v34 = 255;
      v26 = 1;
      goto LABEL_34;
    }
LABEL_31:
    result = 0;
    *a5 = 146;
    *a1 = (unint64_t)v9;
    return result;
  }
  if ((unint64_t)v9 >= v10)
    goto LABEL_31;
  if (*v9 == 94)
  {
    *a2 = 1;
    v9 = v8 + 2;
  }
  v16 = 0;
  v17 = 0;
  v18 = MEMORY[0x1E0C80978];
  while (2)
  {
    v19 = *(_QWORD *)(a6 + 64);
    if ((unint64_t)v9 >= v19)
      goto LABEL_31;
    v35 = v16;
    while (1)
    {
      v20 = v9;
      v22 = *v9++;
      v21 = v22;
      if (v22 == 45 || (_DWORD)v21 == 95)
        goto LABEL_16;
      if ((v21 & 0x80) == 0)
      {
        if ((*(_DWORD *)(v18 + 4 * v21 + 60) & 0x4000) == 0)
          break;
        goto LABEL_15;
      }
      if (!__maskrune(v21, 0x4000uLL))
        break;
LABEL_15:
      v19 = *(_QWORD *)(a6 + 64);
LABEL_16:
      if ((unint64_t)v9 >= v19)
        goto LABEL_31;
    }
    if (!(_DWORD)v21)
      goto LABEL_31;
    if ((_DWORD)v21 != 125)
    {
      v9 = v20 + 1;
      v36[v17] = __tolower(v21);
      v23 = (_DWORD)v21 == 61 || (_DWORD)v21 == 58;
      v16 = v35;
      if (v23 && v35 == 0)
        v16 = (char *)&v36[v17];
      if (++v17 == 49)
      {
        v9 = v20 + 1;
        goto LABEL_31;
      }
      continue;
    }
    break;
  }
  v36[v17] = 0;
  *a1 = (unint64_t)(v20 + 1);
  if (!v35)
    goto LABEL_33;
  *v35 = 0;
  if (!_pcre2_strcmp_c8_8(v36, "bidiclass") || !_pcre2_strcmp_c8_8(v36, "bc"))
  {
    __memmove_chk();
    v26 = 0;
    *(_DWORD *)v36 = 1768188258;
    v34 = 255;
    goto LABEL_34;
  }
  if (!_pcre2_strcmp_c8_8(v36, "script") || !_pcre2_strcmp_c8_8(v36, "sc"))
  {
    v33 = 4;
    goto LABEL_57;
  }
  if (!_pcre2_strcmp_c8_8(v36, "scriptextensions"))
  {
    v33 = 5;
LABEL_57:
    v34 = v33;
LABEL_58:
    __memmove_chk();
    v26 = 0;
LABEL_34:
    v27 = 486;
    v28 = 0;
    while (1)
    {
      v29 = (v27 + v28) >> 1;
      v30 = _pcre2_strcmp_c8_8(v36, (unsigned __int8 *)&_pcre2_utt_names_8[_pcre2_utt_8[3 * v29]]);
      if (!v30)
        break;
      if (v30 <= 0)
        v27 = (v27 + v28) >> 1;
      else
        v28 = v29 + 1;
      if (v28 >= v27)
        goto LABEL_40;
    }
    v31 = (char *)&_pcre2_utt_8[3 * v29];
    *a4 = *((_WORD *)v31 + 2);
    v32 = *((unsigned __int16 *)v31 + 1);
    if (((v34 != 255) & ~v26) != 0)
    {
      if (v32 == 5)
      {
        *a3 = v34;
        return 1;
      }
      if (v32 != 4)
        goto LABEL_40;
    }
    *a3 = v32;
    return 1;
  }
  if (!_pcre2_strcmp_c8_8(v36, "scx"))
  {
    v34 = 5;
    goto LABEL_58;
  }
LABEL_40:
  result = 0;
  *a5 = 147;
  return result;
}

uint64_t sub_1A3A9ADF0(unsigned __int8 **a1, unint64_t a2, int a3, unsigned __int8 a4, _QWORD *a5, _QWORD *a6, _DWORD *a7, int *a8, uint64_t a9)
{
  _BYTE *v9;
  int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v24;
  int v25;
  char v26;
  int v27;
  int v28;
  int v29;

  v9 = *a1;
  v11 = *a1 + 1;
  v10 = **a1;
  if ((unint64_t)v11 >= a2)
  {
    v14 = 0;
    if (v10 == 42)
      v15 = 160;
    else
      v15 = 162;
    goto LABEL_36;
  }
  *a6 = v11;
  *a5 = &v11[-*(_QWORD *)(a9 + 56)];
  if (!a3 || v10 == 42)
  {
    if (v10 != 42 && *v11 - 48 <= 9)
      goto LABEL_35;
    v16 = 1;
    while ((*(_BYTE *)(*(_QWORD *)(a9 + 32) + v9[v16]) & 0x10) != 0)
    {
      if (a2 - (_QWORD)v9 == ++v16)
      {
        v16 = a2 - (_QWORD)v9;
        goto LABEL_16;
      }
    }
    goto LABEL_16;
  }
  v12 = *v11;
  if (v12 >= 0xC0)
  {
    v13 = v9[2] & 0x3F;
    if ((v12 & 0x20) == 0)
    {
      v12 = v9[2] & 0x3F | ((v12 & 0x1F) << 6);
      goto LABEL_34;
    }
    if ((v12 & 0x10) != 0)
    {
      if ((v12 & 8) != 0)
      {
        v19 = v9[3] & 0x3F;
        v20 = v9[4] & 0x3F;
        v21 = v9[5] & 0x3F;
        if ((v12 & 4) == 0)
        {
          v12 = ((v12 & 3) << 24) | (v13 << 18) | (v19 << 12) | (v20 << 6) | v21;
          goto LABEL_34;
        }
        v17 = ((v12 & 1) << 30) | (v13 << 24) | (v19 << 18) | (v20 << 12) | (v21 << 6);
        v18 = v9[6];
      }
      else
      {
        v17 = ((v12 & 7) << 18) | (v13 << 12) | ((v9[3] & 0x3F) << 6);
        v18 = v9[4];
      }
    }
    else
    {
      v17 = ((v12 & 0xF) << 12) | (v13 << 6);
      v18 = v9[3];
    }
    v12 = v17 & 0xFFFFFFC0 | v18 & 0x3F;
  }
LABEL_34:
  v22 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v12 & 0x7F | (_pcre2_ucd_stage1_8[v12 >> 7] << 7)] + 1];
  if (v22 == 13)
  {
LABEL_35:
    v14 = 0;
    v15 = 144;
    goto LABEL_36;
  }
  v16 = 1;
  while (2)
  {
    if (v22 == 13 || v12 == 95 || _pcre2_ucp_gentype_8[v22] == 1)
    {
      do
      {
        if ((unint64_t)&v9[++v16] >= a2)
          goto LABEL_16;
        v12 = v9[v16];
      }
      while ((v12 & 0xC0) == 0x80);
      if (v12 >= 0xC0)
      {
        v24 = v9[v16 + 1] & 0x3F;
        if ((v12 & 0x20) != 0)
        {
          if ((v12 & 0x10) != 0)
          {
            if ((v12 & 8) != 0)
            {
              v27 = v9[v16 + 2] & 0x3F;
              v28 = v9[v16 + 3] & 0x3F;
              v29 = v9[v16 + 4] & 0x3F;
              if ((v12 & 4) == 0)
              {
                v12 = ((v12 & 3) << 24) | (v24 << 18) | (v27 << 12) | (v28 << 6) | v29;
                goto LABEL_55;
              }
              v25 = ((v12 & 1) << 30) | (v24 << 24) | (v27 << 18) | (v28 << 12) | (v29 << 6);
              v26 = v9[v16 + 5];
            }
            else
            {
              v25 = ((v12 & 7) << 18) | (v24 << 12) | ((v9[v16 + 2] & 0x3F) << 6);
              v26 = v9[v16 + 3];
            }
          }
          else
          {
            v25 = ((v12 & 0xF) << 12) | (v24 << 6);
            v26 = v9[v16 + 2];
          }
          v12 = v25 & 0xFFFFFFC0 | v26 & 0x3F;
          goto LABEL_55;
        }
        v12 = v9[v16 + 1] & 0x3F | ((v12 & 0x1F) << 6);
      }
LABEL_55:
      v22 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v12 & 0x7F | (_pcre2_ucd_stage1_8[v12 >> 7] << 7)] + 1];
      continue;
    }
    break;
  }
LABEL_16:
  v11 = &v9[v16];
  if (v16 >= 34)
  {
    v14 = 0;
    v15 = 148;
LABEL_36:
    *a8 = v15;
    goto LABEL_37;
  }
  *a7 = v16 - 1;
  if (v10 != 42)
  {
    if (v16 == 1)
    {
      v14 = 0;
      v15 = 162;
      goto LABEL_36;
    }
    if ((unint64_t)v11 >= a2 || *v11 != a4)
    {
      v14 = 0;
      v15 = 142;
      goto LABEL_36;
    }
    ++v11;
  }
  v14 = 1;
LABEL_37:
  *a1 = v11;
  return v14;
}

uint64_t sub_1A3A9B104(unsigned __int8 *a1, uint64_t a2, unsigned __int8 **a3)
{
  int v3;
  unsigned __int8 *v4;
  int v5;

  v4 = a1 + 1;
  v3 = *a1;
  if (a2 - (uint64_t)(a1 + 1) < 2)
    return 0;
  while (1)
  {
    v5 = a1[1];
    if (v5 == 91)
      break;
    if (v5 != 92)
    {
      if (v5 == 93)
        return 0;
      goto LABEL_10;
    }
    if ((a1[2] & 0xFE) != 0x5C)
      goto LABEL_10;
    v4 = a1 + 2;
LABEL_12:
    a1 = v4++;
    if (a2 - (uint64_t)v4 <= 1)
      return 0;
  }
  if (a1[2] == v3)
    return 0;
LABEL_10:
  if (v5 != v3 || a1[2] != 93)
    goto LABEL_12;
  *a3 = v4;
  return 1;
}

uint64_t sub_1A3A9B1A0(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v4 = 0;
  v5 = a2;
  v6 = "alpha";
  while (1)
  {
    v7 = asc_1A3AF2CBB[v4];
    if ((_DWORD)v7 == a2 && !_pcre2_strncmp_c8_8(a1, v6, v5))
      break;
    v6 += v7 + 1;
    if (++v4 == 14)
      return 0xFFFFFFFFLL;
  }
  return v4;
}

uint64_t sub_1A3A9B22C(unsigned int **a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v10;
  unsigned int *v11;
  unint64_t v12;
  int v13;
  uint64_t result;

  v10 = *a1;
  v11 = *a1 + 2;
  v12 = *v11 | ((unint64_t)(*a1)[1] << 32);
  while (1)
  {
    *a1 = v11 + 1;
    v13 = sub_1A3A9B310(a1, a2, a3, a4, a5);
    if (v13 < 0)
      break;
    if (v13 > *(_DWORD *)(a5 + 280))
      *(_DWORD *)(a5 + 280) = v13;
    *v10 |= v13;
    v11 = *a1;
    v10 = *a1;
    if (**a1 != -2147418112)
      return 1;
  }
  if (!*a2)
    *a2 = 125;
  result = 0;
  if (*(_QWORD *)(a5 + 168) == -1)
    *(_QWORD *)(a5 + 168) = v12;
  return result;
}

uint64_t sub_1A3A9B310(unsigned int **a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  unsigned int **v6;
  unsigned int *v7;
  int v8;
  int v9;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  unsigned int *v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  BOOL v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned __int16 *v39;
  int v40;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  _QWORD *v48;
  int v49;
  uint64_t v51;
  unsigned int **v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;

  v6 = a1;
  v7 = *a1;
  v56 = v7;
  v8 = (*a3)++;
  if (v8 > 2000)
  {
    v9 = 135;
    goto LABEL_86;
  }
  v13 = 0;
  v14 = 0;
  v54 = 0;
  v55 = 0;
  while (2)
  {
    v53 = 0;
    v15 = *v7;
    if ((*v7 & 0x80000000) == 0)
    {
LABEL_5:
      v16 = 1;
      goto LABEL_6;
    }
    v17 = v15 & 0xFFFF0000;
    v18 = 0;
    v16 = 0;
    switch(((v15 & 0xFFFF0000) + 2147418112) >> 16)
    {
      case 0u:
      case 0x18u:
        goto LABEL_92;
      case 1u:
      case 0x19u:
      case 0x21u:
        goto LABEL_40;
      case 2u:
        if ((*(_BYTE *)(a5 + 205) & 2) != 0 || (*(_BYTE *)(a5 + 210) & 0x20) != 0)
          goto LABEL_95;
        v30 = (unsigned __int16)*v7;
        if ((unsigned __int16)*v7 > 9u)
          goto LABEL_56;
        v31 = *(_QWORD *)(a5 + 8 * v30 + 88);
        goto LABEL_57;
      case 3u:
        if ((*(_BYTE *)(a5 + 205) & 2) == 0)
          goto LABEL_29;
        goto LABEL_95;
      case 4u:
        goto LABEL_53;
      case 5u:
        v16 = 0;
        v20 = v7 + 3;
        goto LABEL_12;
      case 6u:
        v16 = 0;
        v20 = v7 + 5;
        goto LABEL_12;
      case 7u:
        v18 = (unsigned __int16)*v7;
        goto LABEL_40;
      case 8u:
      case 0x15u:
      case 0x2Bu:
      case 0x2Du:
      case 0x2Fu:
      case 0x31u:
        goto LABEL_6;
      case 9u:
      case 0xDu:
        v16 = 1;
        v56 = sub_1A3A9B7E4(v7, 1);
        if (v56)
          goto LABEL_6;
        goto LABEL_93;
      case 0xBu:
      case 0x16u:
        goto LABEL_5;
      case 0xEu:
        v18 = 0;
LABEL_40:
        v19 = v7 + 1;
        goto LABEL_41;
      case 0xFu:
        v26 = sub_1A3A9B7E4(v7 + 1, 2);
        goto LABEL_44;
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
        v18 = 0;
        v19 = v7 + 4;
LABEL_41:
        v56 = v19;
        v16 = sub_1A3A9B8D8(&v56, 1, (uint64_t)a2, (uint64_t)a3, v18, a4, a5);
        if (v16 < 0)
          return 0xFFFFFFFFLL;
        goto LABEL_6;
      case 0x17u:
        v40 = (unsigned __int16)*v7;
        if (v40 == 17 || v40 == 22)
          return 0xFFFFFFFFLL;
        if ((v40 - 6) > 0x10)
          goto LABEL_17;
        if (v40 == 14 && (*(_DWORD *)(a5 + 204) & 0x80000) != 0)
        {
          v9 = 136;
          goto LABEL_86;
        }
        if ((v40 - 15) <= 1)
LABEL_53:
          v56 = v7 + 1;
        goto LABEL_5;
      case 0x1Au:
        v16 = 0;
        v20 = v7 + 1;
        goto LABEL_12;
      case 0x1Fu:
        LODWORD(v30) = (unsigned __int16)*v7;
LABEL_56:
        v43 = v7[2];
        v42 = v7 + 2;
        v31 = v43 | ((unint64_t)*(v42 - 1) << 32);
        v56 = v42;
        goto LABEL_57;
      case 0x20u:
LABEL_29:
        v51 = a4;
        v52 = v6;
        v33 = v7[3];
        v32 = v7 + 3;
        v34 = *(_QWORD *)(a5 + 192);
        v35 = *(v32 - 2);
        v31 = v33 | ((unint64_t)*(v32 - 1) << 32);
        v56 = v32;
        v36 = *(_WORD *)(a5 + 176);
        if (!v36)
          goto LABEL_89;
        v37 = 0;
        v38 = (unsigned __int8 *)(*(_QWORD *)(a5 + 56) + v31);
        v39 = (unsigned __int16 *)(v34 + 14);
        while (2)
        {
          if ((_DWORD)v35 != *(v39 - 1))
            goto LABEL_34;
          if (_pcre2_strncmp_8(v38, *(unsigned __int8 **)(v39 - 7), v35))
          {
            v36 = *(_WORD *)(a5 + 176);
LABEL_34:
            ++v37;
            v39 += 8;
            if (v37 >= v36)
              goto LABEL_89;
            continue;
          }
          break;
        }
        LODWORD(v30) = *(_DWORD *)(v39 - 3);
        if (!(_DWORD)v30)
        {
LABEL_89:
          *a2 = 115;
          *(_QWORD *)(a5 + 168) = v31;
          return 0xFFFFFFFFLL;
        }
        if (v17 == -2145320960)
        {
          a4 = v51;
          v6 = v52;
        }
        else
        {
          v49 = *v39;
          a4 = v51;
          v6 = v52;
          if (v49 || (*(_BYTE *)(a5 + 210) & 0x20) != 0)
            goto LABEL_95;
        }
LABEL_57:
        if (v30 > *(_DWORD *)(a5 + 212))
        {
          *(_QWORD *)(a5 + 168) = v31;
          v9 = 115;
          goto LABEL_86;
        }
        if (!(_DWORD)v30)
          goto LABEL_95;
        v44 = *(unsigned int **)(a5 + 224);
        v45 = *v44;
        if (*v44 != 0x80000000)
        {
          do
          {
            if ((v45 & 0xFFFF0000) == 0x80050000)
            {
              ++v44;
            }
            else if (v45 == (v30 | 0x80080000))
            {
              break;
            }
            v46 = v44[1];
            ++v44;
            v45 = v46;
          }
          while (v46 != 0x80000000);
        }
        v53 = v44;
        v47 = sub_1A3A9B7E4(v44 + 1, 2);
        if (!v47)
        {
LABEL_93:
          v9 = 190;
          goto LABEL_86;
        }
        if (v56 > v44 && v56 < v47)
          goto LABEL_95;
        if (!a4)
        {
LABEL_71:
          v54 = a4;
          v55 = v44;
          v53 = v44 + 1;
          v16 = sub_1A3A9B8D8(&v53, 0, (uint64_t)a2, (uint64_t)a3, v30, (uint64_t)&v54, a5);
          if (v16 < 0)
          {
            if (!*a2)
              goto LABEL_95;
            return 0xFFFFFFFFLL;
          }
LABEL_6:
          if ((int)(v13 ^ 0x7FFFFFFF) < v16)
            goto LABEL_85;
          v13 = (v16 + v13);
          if ((int)v13 >= 0x10000)
            goto LABEL_85;
          v7 = ++v56;
          v14 = v16;
          continue;
        }
        v48 = (_QWORD *)a4;
        while ((unsigned int *)v48[1] != v44)
        {
          v48 = (_QWORD *)*v48;
          if (!v48)
            goto LABEL_71;
        }
LABEL_95:
        v9 = 125;
LABEL_86:
        *a2 = v9;
        return 0xFFFFFFFFLL;
      case 0x22u:
      case 0x23u:
      case 0x26u:
        v21 = sub_1A3A9719C(v7 + 1, &v56, a4, a5, a3);
        *a2 = v21;
        if (v21)
          return 0xFFFFFFFFLL;
        HIDWORD(v23) = v56[1];
        LODWORD(v23) = HIDWORD(v23) + 2144075776;
        v22 = v23 >> 16;
        v24 = v22 >= 9;
        v25 = v22 - 9;
        if (v24)
        {
          if (v25 >= 3)
          {
LABEL_17:
            v16 = 0;
          }
          else
          {
            v16 = 0;
            v20 = v56 + 3;
LABEL_12:
            v56 = v20;
          }
        }
        else
        {
          v16 = 0;
          ++v56;
        }
        goto LABEL_6;
      case 0x24u:
      case 0x25u:
      case 0x27u:
        if (!sub_1A3A9B22C(&v56, a2, a3, a4, a5))
          return 0xFFFFFFFFLL;
        goto LABEL_17;
      case 0x28u:
      case 0x2Cu:
      case 0x2Eu:
      case 0x30u:
      case 0x32u:
        v16 = 0;
        v20 = &v7[v7[1] + 1];
        goto LABEL_12;
      case 0x29u:
      case 0x2Au:
        v7 = sub_1A3A9B7E4(v7, 0);
        if (!v7)
          goto LABEL_93;
LABEL_92:
        *v6 = v7;
        return v13;
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
        v27 = v7[2];
        v26 = v7 + 2;
        v28 = *(v26 - 1);
        if (v28 != v27)
          goto LABEL_95;
        v29 = v28 - 1;
        if (v28 == 1)
        {
LABEL_44:
          v16 = 0;
        }
        else if (v28)
        {
          if (v14 && 0x7FFFFFFF / v14 < v29)
          {
LABEL_85:
            v9 = 187;
            goto LABEL_86;
          }
          v16 = v29 * v14;
        }
        else
        {
          v16 = 0;
          LODWORD(v13) = v13 - v14;
        }
        v56 = v26;
        goto LABEL_6;
      default:
        goto LABEL_95;
    }
  }
}

unsigned int *sub_1A3A9B7E4(unsigned int *a1, int a2)
{
  int v2;
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;

  v2 = 0;
  while (2)
  {
    v3 = *a1;
    v4 = 0;
    switch(HIWORD(*a1) ^ 0x8000)
    {
      case 0:
        return v4;
      case 1:
        v4 = a1;
        if (v2 | a2)
          goto LABEL_5;
        return v4;
      case 2:
      case 8:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x1A:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
        ++v2;
        goto LABEL_5;
      case 3:
        a1 += 2 * ((*a1 & 0xFFFE) > 9);
        goto LABEL_5;
      case 0xD:
        v4 = a1;
        if (a2 == 1)
          return v4;
        goto LABEL_5;
      case 0x18:
        v6 = a1 + 1;
        if ((unsigned __int16)*a1 - 15 > 1)
          v6 = a1;
        if ((unsigned __int16)*a1 - 27 >= 2)
          a1 = v6;
        else
          a1 += 3;
        goto LABEL_5;
      case 0x19:
        if (!v2)
          return a1;
        --v2;
LABEL_5:
        v5 = (v3 >> 16) & 0x7FFF;
        if (v5 <= 0x3F)
        {
          a1 += byte_1A3ACA294[v5];
LABEL_7:
          ++a1;
          continue;
        }
        return 0;
      case 0x29:
      case 0x2D:
      case 0x2F:
      case 0x31:
      case 0x33:
        a1 += a1[1];
        goto LABEL_5;
      default:
        if ((v3 & 0x80000000) != 0)
          goto LABEL_5;
        goto LABEL_7;
    }
  }
}

uint64_t sub_1A3A9B8D8(unsigned int **a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (a5 < 1 || (*(_BYTE *)(a7 + 210) & 0x20) != 0)
    goto LABEL_5;
  LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a7 + 240) + 4 * a5);
  if ((v13 & 0x40000000) != 0)
    return 0xFFFFFFFFLL;
  if ((v13 & 0x80000000) == 0)
  {
LABEL_5:
    v14 = sub_1A3A9B310(a1, a3, a4, a6, a7);
    if ((v14 & 0x80000000) == 0)
    {
      v15 = -1;
      do
      {
        v13 = v14;
        if (v15 != -1 && v15 != (_DWORD)v14)
          break;
        if (**a1 == -2145845248)
        {
          if (a5 >= 1)
            *(_DWORD *)(*(_QWORD *)(a7 + 240) + 4 * a5) |= v14 | 0x80000000;
          return v13;
        }
        ++*a1;
        v14 = sub_1A3A9B310(a1, a3, a4, a6, a7);
        v15 = v13;
      }
      while ((v14 & 0x80000000) == 0);
    }
    if (a5 >= 1)
      *(_DWORD *)(*(_QWORD *)(a7 + 240) + 4 * a5) |= 0x40000000u;
    return 0xFFFFFFFFLL;
  }
  if (a2)
    *a1 = sub_1A3A9B7E4(*a1, 2);
  return (unsigned __int16)v13;
}

uint64_t sub_1A3A9BA0C(uint64_t result, _BYTE **a2, int a3, uint64_t a4, unsigned int *a5)
{
  unsigned int v5;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;

  v5 = *a5;
  if (*a5 != -1)
  {
    v9 = result;
    do
    {
      v10 = -1;
      do
      {
        v11 = v10 + 2;
        ++v10;
      }
      while (v5 + v10 + 1 == a5[v11]);
      v12 = &a5[v11];
      *(_DWORD *)(a4 + 264) = v5;
      *(_DWORD *)(a4 + 268) = a5[v10];
      result = sub_1A3A9BCD8(v9, a2, a3, a4, *a5, a5[v10], *a5);
      v5 = *v12;
      a5 = v12;
    }
    while (*v12 != -1);
  }
  return result;
}

uint64_t sub_1A3A9BAB0(uint64_t a1, _BYTE **a2, int a3, uint64_t a4, int *a5)
{
  int v10;
  uint64_t result;
  int v12;
  int *i;
  int v14;
  unsigned int v15;
  unsigned int v16;

  v10 = *a5;
  if (!*a5
    || (*(_DWORD *)(a4 + 264) = 0,
        *(_DWORD *)(a4 + 268) = v10 - 1,
        result = sub_1A3A9BCD8(a1, a2, a3, a4, 0, v10 - 1, v10),
        v10 = *a5,
        *a5 != -1))
  {
    if ((a3 & 0x80000) != 0)
      v12 = 1114111;
    else
      v12 = -1;
    for (i = a5 + 1; ; ++i)
    {
      v14 = *i;
      v15 = v10 + 1;
      if (*i != v10 + 1)
      {
        v16 = v14 == -1 ? v12 : v14 - 1;
        *(_DWORD *)(a4 + 264) = v15;
        *(_DWORD *)(a4 + 268) = v16;
        result = sub_1A3A9BCD8(a1, a2, a3, a4, v15, v16, v14 - 1);
        v14 = *i;
        if (*i == -1)
          break;
      }
      v10 = v14;
    }
  }
  return result;
}

uint64_t sub_1A3A9BB84(unsigned __int8 *a1, unsigned int a2, unsigned int *a3, int *a4, _DWORD *a5, uint64_t a6)
{
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t result;

  v12 = *(unsigned __int8 **)(a6 + 72);
  v13 = *(unsigned __int16 *)(a6 + 176);
  if (*(_WORD *)(a6 + 176))
  {
    v14 = 0;
    v15 = a2 + 2;
    while (_pcre2_strncmp_8(a1, v12 + 2, a2) || v12[v15])
    {
      v12 += *(unsigned __int16 *)(a6 + 178);
      ++v14;
      v13 = *(unsigned __int16 *)(a6 + 176);
      if (v14 >= v13)
        goto LABEL_9;
    }
    v13 = *(unsigned __int16 *)(a6 + 176);
  }
  else
  {
    v14 = 0;
  }
LABEL_9:
  if (v14 >= v13)
  {
    result = 0;
    *a5 = 153;
    *(_QWORD *)(a6 + 168) = &a1[-*(_QWORD *)(a6 + 56)];
  }
  else
  {
    *a3 = v14;
    v16 = 1;
    do
    {
      v17 = v16;
      v18 = __rev16(*(unsigned __int16 *)v12);
      v19 = 1 << v18;
      if (v18 >= 0x20)
        v19 = 1;
      v20 = *(_DWORD *)(a6 + 248);
      *(_DWORD *)(a6 + 252) |= v19;
      if (v18 > v20)
        *(_DWORD *)(a6 + 248) = v18;
      if (v14 + v17 >= *(unsigned __int16 *)(a6 + 176))
        break;
      v12 += *(unsigned __int16 *)(a6 + 178);
      if (_pcre2_strncmp_8(a1, v12 + 2, a2))
        break;
      v16 = v17 + 1;
    }
    while (!v12[a2 + 2]);
    *a4 = v17;
    return 1;
  }
  return result;
}

uint64_t sub_1A3A9BCD8@<X0>(uint64_t a1@<X0>, _BYTE **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, unsigned int a6@<W5>, int a7@<W8>)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  signed int v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;

  v7 = a6;
  v8 = a5;
  LODWORD(v10) = a3;
  if (a6 >= 0xFF)
    v12 = 255;
  else
    v12 = a6;
  if ((a3 & 8) == 0)
    goto LABEL_5;
  if ((a3 & 0xA0000) != 0)
  {
    v13 = 0;
    v10 = a3 & 0xFFFFFFF7;
    v14 = a5;
LABEL_8:
    v36 = v14 - 1;
    v40 = v14;
LABEL_9:
    v37 = v7 + 1;
    while (v8 <= v7)
    {
      v15 = v8;
      while (1)
      {
        a7 = _pcre2_ucd_stage2_8[v15 - (a7 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[v15 / 128] << 7)];
        if (_pcre2_ucd_records_8[12 * a7 + 3])
        {
          v8 = v15 + 1;
          v16 = (int *)((char *)&_pcre2_ucd_caseless_sets_8 + 4 * _pcre2_ucd_records_8[12 * a7 + 3]);
          v17 = *v16;
          if (*v16 == -1)
          {
            v18 = 0;
          }
          else
          {
            v38 = v12;
            v39 = v7;
            v18 = 0;
            do
            {
              if (v17 == v15)
              {
                v19 = 0;
                v17 = v16[1];
              }
              else
              {
                v19 = -1;
                do
                {
                  v20 = v16[v19 + 2];
                  ++v19;
                }
                while (v17 + v19 + 1 == v20);
                v18 += sub_1A3A9BCD8(a1, a2, v10, a4);
                v17 = v20;
              }
              v16 += (v19 + 1);
            }
            while (v17 != -1);
            v12 = v38;
            v7 = v39;
          }
          goto LABEL_37;
        }
        a7 = *(_DWORD *)&_pcre2_ucd_records_8[12 * a7 + 4];
        if (a7)
          break;
        if (++v15 > v7)
          goto LABEL_45;
      }
      v21 = v15 + 1;
      v22 = v15 + a7;
      do
      {
        v23 = v22;
        v8 = v21;
        if (v21 > v7)
          break;
        v24 = _pcre2_ucd_stage2_8[v21 - (v22 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[(int)v21 / 128] << 7)];
        if (_pcre2_ucd_records_8[12
                                * _pcre2_ucd_stage2_8[v8 - (v22 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[v22 >> 7] << 7)]
                                + 3])
          break;
        ++v22;
        v25 = *(_DWORD *)&_pcre2_ucd_records_8[12 * v24 + 4];
        v21 = v8 + 1;
      }
      while (v22 == v25 + v8);
      if ((v15 + a7) < *(_DWORD *)(a4 + 264) || v23 > *(_DWORD *)(a4 + 268))
      {
        if (v15 + a7 < v14 && v23 >= v36)
        {
          v14 = v15 + a7;
          goto LABEL_8;
        }
        if (v23 <= v7 || v15 + a7 > v37)
        {
          v18 = sub_1A3A9BCD8(a1, a2, v10, a4);
LABEL_37:
          v13 = (v18 + v13);
          v14 = v40;
          continue;
        }
        if (v23 >= 0xFF)
          a7 = 255;
        else
          a7 = v23;
        if (v23 > v12)
          v12 = a7;
        v7 = v23;
        goto LABEL_9;
      }
    }
LABEL_45:
    v8 = v14;
  }
  else
  {
    if (v12 < a5)
    {
LABEL_5:
      v13 = 0;
      goto LABEL_50;
    }
    v26 = a5;
    v27 = v12 + 1;
    do
    {
      v28 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 16) + v26);
      *(_BYTE *)(a1 + (v28 >> 3)) |= 1 << (v28 & 7);
      ++v26;
    }
    while (v27 != v26);
    v13 = v27 - a5;
  }
LABEL_50:
  if (v7 > 0xFF && (v10 & 0x80000) == 0)
    v30 = 255;
  else
    v30 = v7;
  if (v8 <= *(_DWORD *)(a4 + 264) || v30 >= *(_DWORD *)(a4 + 268))
  {
    if (v8 <= v12)
    {
      v31 = v8;
      do
      {
        *(_BYTE *)(a1 + ((unint64_t)v31 >> 3)) |= 1 << (v31 & 7);
        v13 = (v13 + 1);
        ++v31;
      }
      while (v31 <= v12);
    }
    v32 = v8 <= 0x100 ? 256 : v8;
    if (v30 >= v32)
    {
      v33 = *a2;
      if ((v10 & 0x80000) != 0)
      {
        if (v32 < v7)
        {
          *v33 = 2;
          v34 = (uint64_t)&v33[_pcre2_ord2utf_8(v32, (uint64_t)(v33 + 1)) + 1];
LABEL_70:
          v33 = (_BYTE *)(v34 + _pcre2_ord2utf_8(v7, v34));
          goto LABEL_71;
        }
        if (v32 == v7)
        {
          *v33 = 1;
          v34 = (uint64_t)(v33 + 1);
          goto LABEL_70;
        }
      }
LABEL_71:
      *a2 = v33;
    }
  }
  return v13;
}

unsigned __int8 *sub_1A3A9C0B0(unsigned __int8 *result, int a2)
{
  uint64_t v2;
  unsigned int v4;

  while (1)
  {
    v2 = *result;
    switch(*result)
    {
      case 0x76u:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
        goto LABEL_10;
      case 0x77u:
        result += __rev16(*(unsigned __int16 *)(result + 5));
        continue;
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x82u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x96u:
      case 0x97u:
      case 0x98u:
      case 0x9Au:
      case 0x9Cu:
      case 0x9Eu:
      case 0xA0u:
      case 0xA2u:
      case 0xA3u:
      case 0xA4u:
      case 0xA5u:
        return result;
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x83u:
        if (!a2)
          return result;
        do
        {
          result += __rev16(*(unsigned __int16 *)(result + 1));
          v2 = *result;
        }
        while (v2 == 120);
LABEL_10:
        result += _pcre2_OP_lengths_8[v2];
        break;
      case 0x8Au:
      case 0x8Fu:
        if (result[3] != 148)
          return result;
        v4 = __rev16(*(unsigned __int16 *)(result + 1));
        if (result[v4] != 121)
          return result;
        result += v4 + 3;
        break;
      case 0x99u:
      case 0x9Bu:
      case 0x9Du:
      case 0x9Fu:
      case 0xA1u:
        result += result[1] + (unint64_t)_pcre2_OP_lengths_8[v2];
        continue;
      case 0xA6u:
        result += __rev16(*((unsigned __int16 *)result + 1)) + 4;
        continue;
      default:
        if ((v2 - 4) < 2 && a2 != 0)
          goto LABEL_10;
        return result;
    }
  }
}

unsigned __int8 *_pcre2_find_bracket_8(unsigned __int8 *result, int a2, int a3)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  while (2)
  {
    v3 = *result;
    switch(*result)
    {
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '^':
      case '_':
        v4 = result[1];
        goto LABEL_10;
      case '[':
      case '\\':
      case ']':
      case 'a':
        v4 = result[3];
LABEL_10:
        v6 = 2 * ((v4 - 15) < 2);
        goto LABEL_11;
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
        goto LABEL_19;
      case 'p':
        v7 = *(unsigned __int16 *)(result + 1);
        goto LABEL_17;
      case 'w':
        v7 = *(unsigned __int16 *)(result + 5);
LABEL_17:
        result += __rev16(v7);
        continue;
      default:
        v5 = v3 - 125;
        if ((v3 - 125) > 0x24)
          goto LABEL_18;
        if (((1 << v5) & 0x1550000000) != 0)
        {
          v6 = result[1];
LABEL_11:
          result += v6 + _pcre2_OP_lengths_8[v3];
          continue;
        }
        if (((1 << v5) & 0x31800) != 0)
        {
          if (a3 == bswap32(*(unsigned __int16 *)(result + 3)) >> 16)
            return result;
          result += _pcre2_OP_lengths_8[v3];
          continue;
        }
        if ((_DWORD)v3 == 125)
        {
          if (a3 < 0)
            return result;
          result += 3;
          continue;
        }
LABEL_18:
        if (*result)
        {
LABEL_19:
          result += _pcre2_OP_lengths_8[v3];
          if (a2 && (v3 - 29) <= 0x37)
          {
            v8 = *(result - 1);
            if (v8 >= 0xC0)
              result += _pcre2_utf8_table4[v8 & 0x3F];
          }
          continue;
        }
        return 0;
    }
  }
}

uint64_t pcre2_get_error_message_8(int a1, uint64_t a2, uint64_t a3)
{
  int v3;
  char *v4;
  int v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  if (!a3)
    return 4294967248;
  v3 = a1 - 100;
  if (a1 < 100)
  {
    if ((a1 & 0x80000000) == 0)
    {
      v4 = &byte_1A3ACDB99;
      v3 = 1;
      goto LABEL_8;
    }
    v3 = -a1;
    v4 = "no error";
  }
  else
  {
    v4 = "no error";
  }
  if (v3 < 1)
  {
    LOBYTE(v6) = *v4;
    if (!*v4)
    {
      result = 0;
LABEL_22:
      *(_BYTE *)(a2 + result) = 0;
      return result;
    }
LABEL_15:
    v9 = 0;
    v10 = a3 - 1;
    v11 = v4 + 1;
    while (v10 != v9)
    {
      *(_BYTE *)(a2 + v9) = v6;
      result = v9 + 1;
      v6 = v11[v9++];
      if (!v6)
        goto LABEL_22;
    }
    *(_BYTE *)(a2 + v10) = 0;
    return 4294967248;
  }
  while (1)
  {
LABEL_8:
    while (*v4++)
      ;
    LOBYTE(v6) = *v4;
    if (!*v4)
      return 4294967267;
    if (v3-- < 2)
      goto LABEL_15;
  }
}

unsigned __int8 *_pcre2_extuni_8(int a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, int a5, _DWORD *a6)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 *v12;
  char v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned __int8 v20;
  int v21;
  int v22;
  int v23;
  int v26;
  int v27;
  int v28;

  if ((unint64_t)a2 >= a4)
    return a2;
  if (a1 >= 0)
    v6 = a1;
  else
    v6 = a1 + 127;
  v7 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[a1 - (v6 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[v6 >> 7] << 7)] + 2];
  while (1)
  {
    v8 = *a2;
    if (a5 && v8 >= 0xC0)
    {
      v9 = a2[1] & 0x3F;
      if ((v8 & 0x20) != 0)
      {
        if ((v8 & 0x10) != 0)
        {
          if ((v8 & 8) != 0)
          {
            v26 = a2[2] & 0x3F;
            v27 = a2[3] & 0x3F;
            v28 = a2[4] & 0x3F;
            if ((v8 & 4) != 0)
            {
              v8 = ((v8 & 1) << 30) | (v9 << 24) | (v26 << 18) | (v27 << 12) | (v28 << 6) | a2[5] & 0x3F;
              v10 = 6;
            }
            else
            {
              v8 = ((v8 & 3) << 24) | (v9 << 18) | (v26 << 12) | (v27 << 6) | v28;
              v10 = 5;
            }
          }
          else
          {
            v8 = ((v8 & 7) << 18) | (v9 << 12) | ((a2[2] & 0x3F) << 6) | a2[3] & 0x3F;
            v10 = 4;
          }
        }
        else
        {
          v8 = ((v8 & 0xF) << 12) | (v9 << 6) | a2[2] & 0x3F;
          v10 = 3;
        }
      }
      else
      {
        v8 = a2[1] & 0x3F | ((v8 & 0x1F) << 6);
        v10 = 2;
      }
    }
    else
    {
      v10 = 1;
    }
    v11 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v8 & 0x7F | (_pcre2_ucd_stage1_8[v8 >> 7] << 7)] + 2];
    if (((_pcre2_ucp_gbtable_8[v7] >> v11) & 1) == 0)
      return a2;
    if (v7 == 11 && v11 == 11)
    {
      if (a5)
      {
        v12 = a2;
        do
          v13 = *--v12;
        while ((v13 & 0xC0) == 0x80);
      }
      else
      {
        v12 = a2 - 1;
      }
      if ((unint64_t)v12 > a3)
        break;
    }
LABEL_40:
    if ((v11 == 13 || v11 == 3) && v7 == 14)
      v7 = 14;
    else
      v7 = v11;
    if (a6)
      ++*a6;
    a2 += v10;
    if ((unint64_t)a2 >= a4)
      return a2;
  }
  v14 = 0;
  do
  {
    if (a5)
    {
      do
      {
        v16 = *--v12;
        v15 = v16;
      }
      while ((v16 & 0xC0) == 0x80);
      if (v15 >= 0xC0)
      {
        v17 = v12[1] & 0x3F;
        if ((v15 & 0x20) != 0)
        {
          if ((v15 & 0x10) != 0)
          {
            if ((v15 & 8) != 0)
            {
              v21 = v12[2] & 0x3F;
              v22 = v12[3] & 0x3F;
              v23 = v12[4] & 0x3F;
              if ((v15 & 4) == 0)
              {
                v15 = ((v15 & 3) << 24) | (v17 << 18) | (v21 << 12) | (v22 << 6) | v23;
                goto LABEL_37;
              }
              v19 = ((v15 & 1) << 30) | (v17 << 24) | (v21 << 18) | (v22 << 12) | (v23 << 6);
              v20 = v12[5];
            }
            else
            {
              v19 = ((v15 & 7) << 18) | (v17 << 12) | ((v12[2] & 0x3F) << 6);
              v20 = v12[3];
            }
          }
          else
          {
            v19 = ((v15 & 0xF) << 12) | (v17 << 6);
            v20 = v12[2];
          }
          v15 = v19 & 0xFFFFFFC0 | v20 & 0x3F;
          goto LABEL_37;
        }
        v15 = v12[1] & 0x3F | ((v15 & 0x1F) << 6);
      }
    }
    else
    {
      v18 = *--v12;
      v15 = v18;
    }
LABEL_37:
    if (_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v15 & 0x7F | (_pcre2_ucd_stage1_8[v15 >> 7] << 7)] + 2] != 11)
      break;
    ++v14;
  }
  while ((unint64_t)v12 > a3);
  if ((v14 & 1) == 0)
    goto LABEL_40;
  return a2;
}

uint64_t _pcre2_is_newline_8(unsigned __int8 *a1, int a2, uint64_t a3, int *a4, int a5)
{
  int v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v5 = *a1;
  if (a5 && v5 >= 0xC0)
  {
    v6 = a1[1] & 0x3F;
    if ((v5 & 0x20) == 0)
    {
      v5 = a1[1] & 0x3F | ((v5 & 0x1F) << 6);
      goto LABEL_13;
    }
    if ((v5 & 0x10) != 0)
    {
      if ((v5 & 8) != 0)
      {
        v9 = a1[2] & 0x3F;
        v10 = a1[3] & 0x3F;
        v11 = a1[4] & 0x3F;
        if ((v5 & 4) == 0)
        {
          v5 = ((v5 & 3) << 24) | (v6 << 18) | (v9 << 12) | (v10 << 6) | v11;
          goto LABEL_13;
        }
        v7 = ((v5 & 1) << 30) | (v6 << 24) | (v9 << 18) | (v10 << 12) | (v11 << 6);
        v8 = a1[5];
      }
      else
      {
        v7 = ((v5 & 7) << 18) | (v6 << 12) | ((a1[2] & 0x3F) << 6);
        v8 = a1[3];
      }
    }
    else
    {
      v7 = ((v5 & 0xF) << 12) | (v6 << 6);
      v8 = a1[2];
    }
    v5 = v7 & 0xFFFFFFC0 | v8 & 0x3F;
  }
LABEL_13:
  if (a2 != 2)
  {
    v12 = 0;
    if (v5 > 132)
    {
      if ((v5 - 8232) >= 2)
      {
        if (v5 != 133)
          return v12;
        if (a5)
          v13 = 2;
        else
          v13 = 1;
      }
      else
      {
        v13 = 3;
      }
LABEL_31:
      *a4 = v13;
      return 1;
    }
    if ((v5 - 10) >= 3)
    {
      if (v5 != 13)
        return v12;
      goto LABEL_23;
    }
LABEL_19:
    v13 = 1;
    goto LABEL_31;
  }
  if (v5 == 10)
    goto LABEL_19;
  if (v5 == 13)
  {
LABEL_23:
    v13 = 1;
    if (a3 - 1 > (unint64_t)a1)
    {
      if (a1[1] == 10)
        v13 = 2;
      else
        v13 = 1;
    }
    goto LABEL_31;
  }
  return 0;
}

uint64_t _pcre2_was_newline_8(_BYTE *a1, int a2, unint64_t a3, int *a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;

  if (!a5)
  {
    v8 = *--a1;
    v5 = v8;
    goto LABEL_15;
  }
  do
  {
    v6 = *--a1;
    v5 = v6;
  }
  while ((v6 & 0xC0) == 0x80);
  if (v5 >= 0xC0)
  {
    v7 = a1[1] & 0x3F;
    if ((v5 & 0x20) == 0)
    {
      v5 = a1[1] & 0x3F | ((v5 & 0x1F) << 6);
      goto LABEL_15;
    }
    if ((v5 & 0x10) != 0)
    {
      if ((v5 & 8) != 0)
      {
        v11 = a1[2] & 0x3F;
        v12 = a1[3] & 0x3F;
        v13 = a1[4] & 0x3F;
        if ((v5 & 4) == 0)
        {
          v5 = ((v5 & 3) << 24) | (v7 << 18) | (v11 << 12) | (v12 << 6) | v13;
          goto LABEL_15;
        }
        v9 = ((v5 & 1) << 30) | (v7 << 24) | (v11 << 18) | (v12 << 12) | (v13 << 6);
        v10 = a1[5];
      }
      else
      {
        v9 = ((v5 & 7) << 18) | (v7 << 12) | ((a1[2] & 0x3F) << 6);
        v10 = a1[3];
      }
    }
    else
    {
      v9 = ((v5 & 0xF) << 12) | (v7 << 6);
      v10 = a1[2];
    }
    v5 = v9 & 0xFFFFFFC0 | v10 & 0x3F;
  }
LABEL_15:
  if (a2 != 2)
  {
    v14 = 0;
    if (v5 > 132)
    {
      if ((v5 - 8232) >= 2)
      {
        if (v5 != 133)
          return v14;
        if (a5)
          v15 = 2;
        else
          v15 = 1;
      }
      else
      {
        v15 = 3;
      }
LABEL_33:
      *a4 = v15;
      return 1;
    }
    if ((v5 - 11) >= 3)
    {
      if (v5 != 10)
        return v14;
      goto LABEL_25;
    }
LABEL_21:
    v15 = 1;
    goto LABEL_33;
  }
  if (v5 == 13)
    goto LABEL_21;
  if (v5 == 10)
  {
LABEL_25:
    v15 = 1;
    if ((unint64_t)a1 > a3)
    {
      if (*(a1 - 1) == 13)
        v15 = 2;
      else
        v15 = 1;
    }
    goto LABEL_33;
  }
  return 0;
}

uint64_t _pcre2_study_8(uint64_t a1)
{
  unsigned int v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __int16 v26;
  int v27;
  int v28;
  int v29[129];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v2 = *(_DWORD *)(a1 + 88);
  v3 = (unsigned __int8 *)(a1 + *(unsigned __int16 *)(a1 + 134) * (unint64_t)*(unsigned __int16 *)(a1 + 132) + 136);
  v4 = *(_DWORD *)(a1 + 96);
  if ((v4 & 0x210) != 0)
    goto LABEL_2;
  v29[0] = 0;
  v7 = sub_1A3A9CBB0(a1, v3, (v2 >> 19) & 1, (v2 >> 17) & 1, v29);
  if (v7 != 1)
  {
    if (v7 != 3)
    {
      v4 = *(_DWORD *)(a1 + 96);
      goto LABEL_2;
    }
    return 1;
  }
  v8 = 0;
  v9 = (_BYTE *)(a1 + 40);
  v10 = 0xFFFFFFFFLL;
  v11 = -8;
  v12 = -1;
  do
  {
    v13 = v10;
    v11 += 8;
    v14 = *v9;
    if (!*v9)
      goto LABEL_46;
    if ((v14 & (v14 - 1)) != 0)
      goto LABEL_54;
    v15 = v8 | 6;
    v16 = v8 | 7;
    if (v14 != 128)
      v16 = v11;
    if (v14 != 64)
      v15 = v16;
    v17 = v8 | 4;
    v18 = v8 | 5;
    if (v14 != 32)
      v18 = v11;
    if (v14 != 16)
      v17 = v18;
    if (*v9 <= 0x3Fu)
      v15 = v17;
    v19 = v8 | 1;
    v20 = v8 | 2;
    v21 = v8 | 3;
    if (v14 != 8)
      v21 = v11;
    if (v14 != 4)
      v20 = v21;
    if (v14 != 2)
      v19 = v20;
    v10 = *v9 <= 0xFu ? v19 : v15;
    if ((v2 & 0x80000) != 0 && v10 > 0x7F)
    {
LABEL_54:
      v24 = *(_DWORD *)(a1 + 96);
LABEL_55:
      v25 = 64;
      goto LABEL_56;
    }
    if (v12 < 0)
    {
      v12 = v10;
LABEL_46:
      v10 = v13;
      goto LABEL_47;
    }
    if ((v13 & 0x80000000) == 0)
      goto LABEL_54;
    v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v10 + 256);
    if ((v2 & 0xA0000) != 0)
    {
      v23 = v10 - 128;
      if (v10 < 0x80)
        v23 = v10;
      if (_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[128 * _pcre2_ucd_stage1_8[v10 > 0x7F] + v23] + 3])
        goto LABEL_54;
      if (v10 >= 0x80)
        v22 = *(_DWORD *)&_pcre2_ucd_records_8[12
                                             * _pcre2_ucd_stage2_8[128 * _pcre2_ucd_stage1_8[v10 > 0x7F]
                                                                 + v23]
                                             + 4]
            + v10;
    }
    if (v22 != v12)
      goto LABEL_54;
LABEL_47:
    ++v9;
    v8 += 8;
  }
  while (v11 < 0xF8);
  v24 = *(_DWORD *)(a1 + 96);
  if (v12 < 0)
    goto LABEL_55;
  if ((v24 & 0x80) != 0)
  {
    v27 = *(_DWORD *)(a1 + 116);
    if (v27 == v12 || (v10 & 0x80000000) == 0 && v27 == (_DWORD)v10)
      goto LABEL_55;
  }
  *(_DWORD *)(a1 + 112) = v12;
  if ((int)v10 < 0)
    v25 = 16;
  else
    v25 = 48;
LABEL_56:
  v4 = v24 | v25;
  *(_DWORD *)(a1 + 96) = v4;
LABEL_2:
  if ((v4 & 0x802000) != 0)
    return 0;
  if (*(unsigned __int16 *)(a1 + 130) > 0x80u)
    return 0;
  v29[0] = 0;
  v5 = sub_1A3A9D414(a1, (char *)v3, v3, (v2 >> 19) & 1, 0, &v28, v29);
  switch(v5)
  {
    case -1:
      return 0;
    case -2:
      return 2;
    case -3:
      return 3;
  }
  if (v5 >= 0xFFFF)
    v26 = -1;
  else
    v26 = v5;
  *(_WORD *)(a1 + 126) = v26;
  return 0;
}

uint64_t sub_1A3A9CBB0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  int v6;
  uint64_t result;
  unsigned __int8 *v11;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  char v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  unint64_t v37;
  char v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned __int8 *v69;
  uint64_t v70;
  int v71;
  _DWORD *v72;
  unsigned int v73;
  char v74[6];

  if ((_DWORD)a3)
    v5 = 16;
  else
    v5 = 32;
  v6 = (*a5)++;
  if (v6 > 999)
    return 4;
  v11 = a2;
  v13 = *a2;
  v72 = (_DWORD *)(a1 + 65);
  v14 = a1 + 40;
  v73 = 1;
LABEL_7:
  v15 = v13 - 136;
  v16 = v15 > 6;
  v17 = (1 << v15) & 0x63;
  if (v16 || v17 == 0)
    v19 = v11 + 3;
  else
    v19 = v11 + 5;
  while (2)
  {
    v20 = *v19;
    result = 3;
    v21 = 0;
    v22 = 2;
    switch(*v19)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x12u:
      case 0x14u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Cu:
      case 0x1Fu:
      case 0x20u:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x4Fu:
      case 0x50u:
      case 0x51u:
      case 0x52u:
      case 0x53u:
      case 0x54u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x7Du:
      case 0x8Au:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Cu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
      case 0xA0u:
      case 0xA1u:
      case 0xA2u:
      case 0xA3u:
      case 0xA4u:
      case 0xA5u:
        return 0;
      case 4u:
      case 5u:
      case 0x57u:
      case 0x58u:
      case 0x5Fu:
        ++v19;
        continue;
      case 6u:
        v57 = 0;
        v58 = *(_QWORD *)(a1 + 24);
        do
        {
          *(_BYTE *)(v14 + v57) |= ~*(_BYTE *)(v58 + (v57 + 576));
          ++v57;
        }
        while (v5 != v57);
        goto LABEL_118;
      case 7u:
        v59 = a1;
        v60 = 64;
        goto LABEL_121;
      case 8u:
        v61 = 0;
        v62 = *(_QWORD *)(a1 + 24);
        do
        {
          *(_BYTE *)(v14 + v61) |= ~*(_BYTE *)(v62 + (v61 + 512));
          ++v61;
        }
        while (v5 != v61);
        goto LABEL_118;
      case 9u:
        v59 = a1;
        v60 = 0;
        goto LABEL_121;
      case 0xAu:
        v63 = 0;
        v64 = *(_QWORD *)(a1 + 24);
        do
        {
          *(_BYTE *)(v14 + v63) |= ~*(_BYTE *)(v64 + (v63 + 672));
          ++v63;
        }
        while (v5 != v63);
LABEL_118:
        if ((_DWORD)a3)
          *(_QWORD *)(a1 + 64) = -1;
        goto LABEL_140;
      case 0xBu:
        v59 = a1;
        v60 = 160;
LABEL_121:
        sub_1A3A9DFDC(v59, v60, v5);
        goto LABEL_140;
      case 0x10u:
        if (v19[1] == 10)
        {
          v65 = v19[2];
          v66 = _pcre2_ucd_caseless_sets_8[v65];
          if (v66 == -1)
          {
LABEL_140:
            v22 = v73;
            goto LABEL_141;
          }
          v67 = &_pcre2_ucd_caseless_sets_8[v65 + 1];
          while (!(_DWORD)a3)
          {
            if (v66 < 0x100)
              goto LABEL_129;
            *(_BYTE *)(a1 + 71) |= 0x80u;
LABEL_130:
            v68 = *v67++;
            v66 = v68;
            if (v68 == -1)
              goto LABEL_140;
          }
          _pcre2_ord2utf_8(v66, (uint64_t)v74);
          v66 = v74[0];
LABEL_129:
          *(_BYTE *)(a1 + (v66 >> 3) + 40) |= 1 << (v66 & 7);
          goto LABEL_130;
        }
        return 0;
      case 0x11u:
      case 0x15u:
        *(_BYTE *)(a1 + 41) |= 0x3Cu;
        if ((_DWORD)a3)
        {
          *(_BYTE *)(a1 + 64) |= 4u;
          v56 = *(_BYTE *)(a1 + 68) | 4;
          goto LABEL_134;
        }
        *(_BYTE *)(a1 + 56) |= 0x20u;
        goto LABEL_140;
      case 0x13u:
        *(_BYTE *)(a1 + 41) |= 2u;
        *(_BYTE *)(a1 + 44) |= 1u;
        if ((_DWORD)a3)
        {
          *(_BYTE *)(a1 + 64) |= 4u;
          v56 = *(_BYTE *)(a1 + 68) | 0xE;
LABEL_134:
          *(_BYTE *)(a1 + 68) = v56;
        }
        else
        {
          *(_BYTE *)(a1 + 60) |= 1u;
        }
        goto LABEL_140;
      case 0x1Bu:
        v26 = 1;
        goto LABEL_61;
      case 0x1Du:
      case 0x23u:
      case 0x24u:
      case 0x2Bu:
        goto LABEL_136;
      case 0x1Eu:
      case 0x30u:
      case 0x31u:
      case 0x38u:
        goto LABEL_138;
      case 0x21u:
      case 0x22u:
      case 0x25u:
      case 0x26u:
      case 0x2Au:
      case 0x2Cu:
        v23 = v19 + 1;
        goto LABEL_23;
      case 0x27u:
      case 0x28u:
      case 0x2Du:
        v23 = v19 + 3;
LABEL_23:
        v19 = sub_1A3A9DE10(a1, v23, 0, a3, a4);
        continue;
      case 0x29u:
        v19 += 2;
LABEL_136:
        v69 = v19 + 1;
        v70 = a1;
        v71 = 0;
        goto LABEL_139;
      case 0x2Eu:
      case 0x2Fu:
      case 0x32u:
      case 0x33u:
      case 0x37u:
      case 0x39u:
        v24 = v19 + 1;
        goto LABEL_25;
      case 0x34u:
      case 0x35u:
      case 0x3Au:
        v24 = v19 + 3;
LABEL_25:
        v19 = sub_1A3A9DE10(a1, v24, 1, a3, a4);
        continue;
      case 0x36u:
        v19 += 2;
LABEL_138:
        v69 = v19 + 1;
        v70 = a1;
        v71 = 1;
LABEL_139:
        sub_1A3A9DE10(v70, v69, v71, a3, a4);
        goto LABEL_140;
      case 0x55u:
      case 0x56u:
      case 0x59u:
      case 0x5Au:
      case 0x5Eu:
      case 0x60u:
        goto LABEL_27;
      case 0x5Bu:
      case 0x5Cu:
      case 0x61u:
        v19 += 2;
LABEL_27:
        result = 0;
        switch(v19[1])
        {
          case 6u:
            v41 = 0;
            v42 = *(_QWORD *)(a1 + 24);
            do
            {
              *(_BYTE *)(v14 + v41) |= ~*(_BYTE *)(v42 + (v41 + 576));
              ++v41;
            }
            while (v5 != v41);
            goto LABEL_75;
          case 7u:
            v43 = a1;
            v44 = 64;
            goto LABEL_78;
          case 8u:
            v45 = 0;
            v46 = *(_QWORD *)(a1 + 24);
            do
            {
              *(_BYTE *)(v14 + v45) |= ~*(_BYTE *)(v46 + (v45 + 512));
              ++v45;
            }
            while (v5 != v45);
            goto LABEL_75;
          case 9u:
            v43 = a1;
            v44 = 0;
            goto LABEL_78;
          case 0xAu:
            v47 = 0;
            v48 = *(_QWORD *)(a1 + 24);
            do
            {
              *(_BYTE *)(v14 + v47) |= ~*(_BYTE *)(v48 + (v47 + 672));
              ++v47;
            }
            while (v5 != v47);
LABEL_75:
            if ((_DWORD)a3)
              *(_QWORD *)(a1 + 64) = -1;
            break;
          case 0xBu:
            v43 = a1;
            v44 = 160;
LABEL_78:
            sub_1A3A9DFDC(v43, v44, v5);
            break;
          case 0x11u:
          case 0x15u:
            *(_BYTE *)(a1 + 41) |= 0x3Cu;
            if ((_DWORD)a3)
            {
              *(_BYTE *)(a1 + 64) |= 4u;
              v25 = *(_BYTE *)(a1 + 68) | 4;
              goto LABEL_81;
            }
            *(_BYTE *)(a1 + 56) |= 0x20u;
            break;
          case 0x13u:
            *(_BYTE *)(a1 + 41) |= 2u;
            *(_BYTE *)(a1 + 44) |= 1u;
            if ((_DWORD)a3)
            {
              *(_BYTE *)(a1 + 64) |= 4u;
              v25 = *(_BYTE *)(a1 + 68) | 0xE;
LABEL_81:
              *(_BYTE *)(a1 + 68) = v25;
            }
            else
            {
              *(_BYTE *)(a1 + 60) |= 1u;
            }
            break;
          default:
            return result;
        }
        v19 += 2;
        continue;
      case 0x5Du:
        goto LABEL_33;
      case 0x6Eu:
        goto LABEL_58;
      case 0x6Fu:
        goto LABEL_54;
      case 0x70u:
        result = 0;
        v27 = v19[3];
        if ((v27 & 4) != 0 || (v27 & 3) == 1)
          return result;
        if ((v19[3] & 2) != 0)
          v21 = v19 + 4;
        else
          v21 = 0;
        if (!(_DWORD)a3 || (v19[3] & 1) != 0)
        {
LABEL_54:
          if ((_DWORD)a3)
          {
            *(_BYTE *)(a1 + 64) |= 0xF0u;
            *v72 = -1;
            *(_DWORD *)((char *)v72 + 3) = -1;
            v20 = *v19;
          }
          if (v20 != 112)
          {
LABEL_58:
            v21 = v19 + 1;
            v39 = v19 + 33;
            goto LABEL_85;
          }
          v29 = __rev16(*(unsigned __int16 *)(v19 + 1));
        }
        else
        {
          v28 = &v19[16 * (v27 & 2) + 4];
          v29 = __rev16(*(unsigned __int16 *)(v19 + 1));
          while (1)
          {
            while (1)
            {
              v30 = v28 + 1;
              v31 = *v28;
              if (v31 != 1)
                break;
              v37 = *v30;
              do
                v38 = *++v30;
              while ((v38 & 0xC0) == 0x80);
              *(_BYTE *)(a1 + (v37 >> 3) + 40) |= 1 << (v37 & 7);
              v28 = v30;
            }
            if (v31 != 2)
              break;
            v33 = *++v28;
            v32 = v33;
            do
            {
              v35 = *++v28;
              v34 = v35;
            }
            while ((v35 & 0xC0) == 0x80);
            do
              v36 = *++v28;
            while ((v36 & 0xC0) == 0x80);
            if (v32 <= v34)
            {
              do
              {
                *(_BYTE *)(a1 + (v32 >> 3) + 40) |= 1 << (v32 & 7);
                ++v32;
              }
              while (v34 >= v32);
            }
          }
          if (*v28)
            return 3;
        }
        v39 = &v19[v29];
        if (!v21)
          goto LABEL_94;
LABEL_85:
        v49 = 0;
        if ((_DWORD)a3)
        {
          do
          {
            *(_BYTE *)(v14 + v49) |= v21[v49];
            ++v49;
          }
          while (v49 != 16);
          v50 = 128;
          do
          {
            if (((v21[(unint64_t)v50 >> 3] >> (v50 & 7)) & 1) != 0)
            {
              *(_BYTE *)(a1 + 64) |= 1 << (v50 >> 6);
              v50 |= 0x3Fu;
            }
          }
          while (v50++ < 0xFF);
        }
        else
        {
          do
          {
            *(_BYTE *)(v14 + v49) |= v21[v49];
            ++v49;
          }
          while (v49 != 32);
        }
LABEL_94:
        v52 = *v39 - 98;
        if (v52 > 0xB)
          goto LABEL_140;
        v53 = 1 << v52;
        if ((v53 & 0x533) != 0)
        {
          v19 = v39 + 1;
        }
        else
        {
          if ((v53 & 0x8C0) == 0)
            goto LABEL_140;
          v54 = __rev16(*(unsigned __int16 *)(v39 + 1)) == 0;
          v55 = 5;
          if (!v54)
            v55 = 0;
          v19 = &v39[v55];
          if (!v54)
            goto LABEL_140;
        }
        continue;
      case 0x76u:
        v26 = 6;
        goto LABEL_61;
      case 0x77u:
        v26 = __rev16(*(unsigned __int16 *)(v19 + 5));
LABEL_61:
        v19 += v26;
        continue;
      case 0x78u:
        goto LABEL_141;
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
        return 2;
      case 0x7Eu:
      case 0x82u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
        result = sub_1A3A9CBB0(a1, v19, a3, a4, a5);
        if ((_DWORD)result == 2)
        {
          do
            v19 += __rev16(*(unsigned __int16 *)(v19 + 1));
          while (*v19 == 120);
LABEL_33:
          v19 += 3;
          continue;
        }
        v22 = v73;
        if ((_DWORD)result != 1)
          return result;
LABEL_141:
        v11 += __rev16(*(unsigned __int16 *)(v11 + 1));
        v13 = 120;
        v73 = v22;
        result = v22;
        if (*v11 != 120)
          return result;
        goto LABEL_7;
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x83u:
        do
          v19 += __rev16(*(unsigned __int16 *)(v19 + 1));
        while (*v19 == 120);
        goto LABEL_33;
      case 0x96u:
      case 0x97u:
      case 0x98u:
        result = sub_1A3A9CBB0(a1, ++v19, a3, a4, a5);
        if (result <= 4 && ((1 << result) & 0x19) != 0)
          return result;
        do
          v19 += __rev16(*(unsigned __int16 *)(v19 + 1));
        while (*v19 == 120);
        goto LABEL_33;
      case 0xA6u:
        v40 = v19 + 1;
        do
          v40 += __rev16(*(unsigned __int16 *)(v40 + 1));
        while (*v40 == 120);
        v19 = v40 + 3;
        continue;
      default:
        return result;
    }
  }
}

uint64_t sub_1A3A9D414(uint64_t a1, char *a2, unsigned __int8 *a3, int a4, _QWORD *a5, _DWORD *a6, int *a7)
{
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *bracket_8;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  signed int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int *v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  int v55;
  unsigned __int8 *v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v63;
  int v64;
  unsigned __int8 *v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  int *v80;
  int v81;
  signed int v82;
  int v83;
  int v84;
  int v85;
  int v87;
  int v88;
  uint64_t v90;
  int v91;

  v7 = *a2;
  if ((*a2 + 117) >= 5u)
  {
    v9 = *(_DWORD *)(a1 + 96);
    v10 = a2[1];
    v11 = a2[2];
    v12 = (*a6)++;
    if (v12 > 1000)
      return 0xFFFFFFFFLL;
    v14 = a7;
    v84 = 0;
    v85 = v9;
    v15 = 0;
    v78 = 0;
    v16 = 0;
    v27 = (v7 & 0xFE) == 136;
    v17 = 3;
    if (v27)
      v17 = 5;
    v18 = (unsigned __int8 *)&a2[v17];
    v19 = (unsigned __int8 *)&a2[v11 | (v10 << 8)];
    v77 = a1 + 136;
    v80 = a7 + 1;
    v87 = 0;
    v88 = -1;
    v83 = -1;
    v79 = -1;
    v91 = a4;
    v90 = a1;
    while (1)
    {
      if (v15 <= 65534)
        v20 = v15;
      else
        v20 = 0xFFFFLL;
      if (v15 <= 65534)
        v21 = v18;
      else
        v21 = v19;
      v22 = *v21;
      v23 = v16;
      v8 = 0xFFFFFFFFLL;
      switch(*v21)
      {
        case 0u:
        case 0x78u:
        case 0x79u:
        case 0x7Au:
        case 0x7Bu:
        case 0x7Cu:
          v8 = v88;
          if (v88 < 0 || !v87 && (int)v20 < v88)
            v8 = v20;
          v27 = (_DWORD)v22 != 120 || (_DWORD)v8 == 0;
          if (!v27)
          {
            v87 = 0;
            v88 = v8;
            v15 = 0;
            v19 = &v21[__rev16(*(unsigned __int16 *)(v21 + 1))];
            goto LABEL_45;
          }
          return v8;
        case 1u:
        case 2u:
        case 4u:
        case 5u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x76u:
        case 0x7Du:
        case 0x90u:
        case 0x91u:
        case 0x92u:
        case 0x93u:
        case 0x94u:
        case 0x95u:
          goto LABEL_20;
        case 3u:
        case 0x9Au:
        case 0x9Cu:
        case 0x9Eu:
        case 0xA0u:
        case 0xA2u:
        case 0xA5u:
          v25 = _pcre2_OP_lengths_8[v22];
          goto LABEL_26;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          goto LABEL_104;
        case 0xEu:
          if (!a4)
            goto LABEL_104;
          return v8;
        case 0xFu:
        case 0x10u:
          v21 += 2;
LABEL_104:
          v15 = v20 + 1;
          v18 = v21 + 1;
          continue;
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x23u:
        case 0x24u:
        case 0x2Bu:
        case 0x30u:
        case 0x31u:
        case 0x38u:
        case 0x3Du:
        case 0x3Eu:
        case 0x45u:
        case 0x4Au:
        case 0x4Bu:
        case 0x52u:
          v15 = v20 + 1;
          v18 = v21 + 2;
          if (!a4)
            continue;
          v26 = v21[1];
          goto LABEL_23;
        case 0x21u:
        case 0x22u:
        case 0x25u:
        case 0x26u:
        case 0x27u:
        case 0x28u:
        case 0x2Au:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x32u:
        case 0x33u:
        case 0x34u:
        case 0x35u:
        case 0x37u:
        case 0x39u:
        case 0x3Au:
        case 0x3Bu:
        case 0x3Cu:
        case 0x3Fu:
        case 0x40u:
        case 0x41u:
        case 0x42u:
        case 0x44u:
        case 0x46u:
        case 0x47u:
        case 0x48u:
        case 0x49u:
        case 0x4Cu:
        case 0x4Du:
        case 0x4Eu:
        case 0x4Fu:
        case 0x51u:
        case 0x53u:
        case 0x54u:
          v18 = &v21[_pcre2_OP_lengths_8[v22]];
          v15 = v20;
          if (!a4)
            continue;
          v24 = *(v18 - 1);
          v15 = v20;
          if (v24 < 0xC0)
            continue;
          v18 += _pcre2_utf8_table4[v24 & 0x3F];
          goto LABEL_53;
        case 0x29u:
        case 0x36u:
        case 0x43u:
        case 0x50u:
          v15 = v20 + (bswap32(*(unsigned __int16 *)(v21 + 1)) >> 16);
          v18 = v21 + 4;
          if (!a4)
            continue;
          v26 = v21[3];
LABEL_23:
          if (v26 >= 0xC0)
            v18 += _pcre2_utf8_table4[v26 & 0x3F];
          continue;
        case 0x55u:
        case 0x56u:
        case 0x59u:
        case 0x5Au:
        case 0x5Eu:
        case 0x60u:
          v28 = v21[1];
          goto LABEL_51;
        case 0x57u:
        case 0x58u:
        case 0x5Fu:
          v15 = v20 + 1;
          v35 = v21[1] - 15 >= 2;
          v36 = 2;
          v37 = 4;
          goto LABEL_106;
        case 0x5Bu:
        case 0x5Cu:
        case 0x61u:
          v28 = v21[3];
LABEL_51:
          v30 = &v21[2 * ((v28 - 15) < 2)];
          v29 = _pcre2_OP_lengths_8[v22];
          goto LABEL_52;
        case 0x5Du:
          v15 = v20 + (bswap32(*(unsigned __int16 *)(v21 + 1)) >> 16);
          v35 = v21[3] - 15 >= 2;
          v36 = 4;
          v37 = 6;
LABEL_106:
          if (!v35)
            v36 = v37;
          v18 = &v21[v36];
          v16 = v23;
          continue;
        case 0x6Eu:
        case 0x6Fu:
        case 0x70u:
          if ((_DWORD)v22 == 112)
            v38 = __rev16(*(unsigned __int16 *)(v21 + 1));
          else
            v38 = 33;
          v18 = &v21[v38];
          v63 = *v18 - 98;
          if (v63 > 0xB)
          {
            v15 = v20 + 1;
          }
          else
          {
            v64 = 1 << v63;
            if ((v64 & 0x533) == 0)
            {
              if ((v64 & 0x20C) == 0)
              {
                v15 = v20 + (bswap32(*(unsigned __int16 *)(v18 + 1)) >> 16);
                v18 += 5;
                continue;
              }
              LODWORD(v20) = v20 + 1;
            }
            ++v18;
LABEL_53:
            v15 = v20;
          }
          continue;
        case 0x71u:
        case 0x72u:
          v39 = v21[1];
          v40 = v21[2];
          v41 = v40 | (v39 << 8);
          if (v41 <= *v14)
          {
            LODWORD(v42) = v14[v41];
            if ((v42 & 0x80000000) == 0)
              goto LABEL_143;
          }
          if ((*(_BYTE *)(a1 + 89) & 2) != 0)
          {
            LODWORD(v42) = 0;
            goto LABEL_140;
          }
          bracket_8 = _pcre2_find_bracket_8(a3, a4, v21[2] | (v21[1] << 8));
          if (!bracket_8)
            return 4294967294;
          v44 = bracket_8;
          v45 = bracket_8;
          do
            v45 += __rev16(*(unsigned __int16 *)(v45 + 1));
          while (*v45 == 120);
          a4 = v91;
          if ((v85 & 0x200000) != 0)
          {
            v46 = _pcre2_find_bracket_8(v45, v91, v41);
            a4 = v91;
            if (v46)
            {
              LODWORD(v42) = 0;
LABEL_126:
              a1 = v90;
              goto LABEL_140;
            }
          }
          if (v21 > v44 && v21 < v45)
          {
            LODWORD(v42) = 0;
            v87 = 1;
            goto LABEL_126;
          }
          a1 = v90;
          if (a5)
          {
            v71 = a5;
            while ((unsigned __int8 *)v71[1] != v44)
            {
              v71 = (_QWORD *)*v71;
              if (!v71)
                goto LABEL_139;
            }
            LODWORD(v42) = 0;
            v87 = 1;
          }
          else
          {
LABEL_139:
            v72 = sub_1A3A9D414(v90);
            a4 = v91;
            v42 = v72;
            a1 = v90;
            v8 = v42;
            if ((v42 & 0x80000000) != 0)
              return v8;
          }
LABEL_140:
          v14[v41] = v42;
          v73 = *v14;
          if ((int)v73 + 1 < v41)
          {
            memset(&v80[v73], 255, 4 * ((v39 << 8) + v40 - v73 - 2) + 4);
            a1 = v90;
            a4 = v91;
          }
          *v14 = v41;
LABEL_143:
          v61 = 3;
LABEL_144:
          v18 = &v21[v61];
          v74 = 1;
          v75 = *v18 - 98;
          if (v75 <= 0xB)
          {
            if (((1 << v75) & 0x533) != 0)
            {
              v74 = 0;
              ++v18;
            }
            else if (((1 << v75) & 0x20C) != 0)
            {
              ++v18;
              v74 = 1;
            }
            else
            {
              v74 = __rev16(*(unsigned __int16 *)(v18 + 1));
              v18 += 5;
            }
          }
          if ((int)v42 < 1 || (v15 = 0xFFFF, v16 = v23, 0x7FFFFFFF / v42 >= v74))
          {
            v76 = v74 * v42;
            if (0xFFFF - (int)v20 >= v76)
              v15 = v76 + v20;
            else
              v15 = 0xFFFF;
            v16 = v23;
          }
          break;
        case 0x73u:
        case 0x74u:
          if ((v85 & 0x200000) != 0 || (*(_BYTE *)(a1 + 89) & 2) != 0)
          {
            LODWORD(v42) = 0;
            goto LABEL_102;
          }
          v47 = __rev16(*(unsigned __int16 *)(v21 + 3));
          if (!v47)
          {
            LODWORD(v42) = 0x7FFFFFFF;
            goto LABEL_102;
          }
          v48 = (unsigned __int8 *)(v77
                                  + *(unsigned __int16 *)(a1 + 132)
                                  * (unint64_t)__rev16(*(unsigned __int16 *)(v21 + 1)));
          v49 = *v14;
          LODWORD(v42) = 0x7FFFFFFF;
          while (2)
          {
            v50 = v14;
            v51 = *v48;
            v52 = v48[1] | (v51 << 8);
            if ((int)v52 <= (int)v49)
            {
              LODWORD(v8) = v50[v52];
              if ((v8 & 0x80000000) == 0)
              {
                v52 = v49;
                v14 = v50;
                goto LABEL_87;
              }
            }
            v81 = v48[1];
            v82 = v47;
            v53 = _pcre2_find_bracket_8(a3, a4, v52);
            if (!v53)
              return 4294967294;
            v54 = v53;
            v55 = v51 << 8;
            v56 = v53;
            do
              v56 += __rev16(*(unsigned __int16 *)(v56 + 1));
            while (*v56 == 120);
            v14 = v50;
            a4 = v91;
            a1 = v90;
            if (v21 > v54 && v21 < v56)
              goto LABEL_78;
            if (a5)
            {
              v57 = a5;
              while ((unsigned __int8 *)v57[1] != v54)
              {
                v57 = (_QWORD *)*v57;
                if (!v57)
                  goto LABEL_83;
              }
LABEL_78:
              LODWORD(v8) = 0;
              v87 = 1;
            }
            else
            {
LABEL_83:
              v58 = v55;
              v59 = sub_1A3A9D414(v90);
              v55 = v58;
              a4 = v91;
              v8 = v59;
              a1 = v90;
              if ((v8 & 0x80000000) != 0)
                return v8;
            }
            v14[v52] = v8;
            v60 = *v14;
            if ((int)v60 + 1 < (int)v52)
            {
              memset(&v80[v60], 255, 4 * (v55 + v81 - v60 - 2) + 4);
              a1 = v90;
              a4 = v91;
            }
            *v14 = v52;
            v47 = v82;
LABEL_87:
            if ((int)v8 < (int)v42)
              LODWORD(v42) = v8;
            if ((int)v42 >= 1)
            {
              v48 += *(unsigned __int16 *)(a1 + 132);
              v61 = 5;
              v49 = v52;
              if (v47-- <= 1)
                goto LABEL_144;
              continue;
            }
            break;
          }
LABEL_102:
          v61 = 5;
          goto LABEL_144;
        case 0x75u:
          v65 = &a3[__rev16(*(unsigned __int16 *)(v21 + 1))];
          v66 = __rev16(*(unsigned __int16 *)(v65 + 3));
          v67 = (unint64_t)v65;
          if (v66 == v79)
          {
            LODWORD(v20) = v78 + v20;
            goto LABEL_133;
          }
          do
            v67 += __rev16(*(unsigned __int16 *)(v67 + 1));
          while (*(_BYTE *)v67 == 120);
          if (v21 > v65 && (unint64_t)v21 < v67)
            goto LABEL_114;
          if (a5)
          {
            v69 = a5;
            while ((unsigned __int8 *)v69[1] != v65)
            {
              v69 = (_QWORD *)*v69;
              if (!v69)
                goto LABEL_131;
            }
LABEL_114:
            v87 = 1;
          }
          else
          {
LABEL_131:
            v70 = sub_1A3A9D414(a1);
            if ((v70 & 0x80000000) != 0)
              return v70;
            v78 = v70;
            v79 = v66;
            LODWORD(v20) = v70 + v20;
            a4 = v91;
            a1 = v90;
          }
LABEL_133:
          v16 = 0;
          v18 = &v21[(v23 + 3)];
          v15 = v20;
          continue;
        case 0x77u:
          v25 = __rev16(*(unsigned __int16 *)(v21 + 5));
          goto LABEL_26;
        case 0x7Eu:
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
        case 0x82u:
        case 0x83u:
          do
          {
            v21 += __rev16(*(unsigned __int16 *)(v21 + 1));
            LODWORD(v22) = *v21;
          }
          while ((_DWORD)v22 == 120);
LABEL_20:
          v25 = _pcre2_OP_lengths_8[v22];
LABEL_26:
          v18 = &v21[v25];
          goto LABEL_53;
        case 0x84u:
        case 0x85u:
        case 0x87u:
        case 0x8Bu:
        case 0x8Cu:
          goto LABEL_118;
        case 0x86u:
          v18 = v21 + 3;
          if (v21[3] == 117)
          {
            v16 = 3;
            v15 = v20;
            if (v21[6] == 121)
              continue;
          }
          goto LABEL_118;
        case 0x88u:
        case 0x89u:
        case 0x8Du:
        case 0x8Eu:
          v31 = __rev16(*(unsigned __int16 *)(v21 + 3));
          if ((v85 & 0x200000) != 0 || v31 != v83)
          {
            v32 = sub_1A3A9D414(v90);
            a4 = v91;
            v33 = v32;
            a1 = v90;
            v83 = v31;
            v84 = v33;
            v8 = v33;
            if ((v33 & 0x80000000) != 0)
              return v8;
          }
          do
            v21 += __rev16(*(unsigned __int16 *)(v21 + 1));
          while (*v21 == 120);
          v15 = v84 + v20;
LABEL_45:
          v18 = v21 + 3;
          v16 = v23;
          continue;
        case 0x8Au:
        case 0x8Fu:
          v34 = &v21[__rev16(*(unsigned __int16 *)(v21 + 1))];
          if (*v34 != 120)
            goto LABEL_48;
LABEL_118:
          v68 = sub_1A3A9D414(a1);
          v8 = v68;
          if ((v68 & 0x80000000) != 0)
            return v8;
          do
            v21 += __rev16(*(unsigned __int16 *)(v21 + 1));
          while (*v21 == 120);
          v15 = v68 + v20;
          v18 = v21 + 3;
          v16 = v23;
          a4 = v91;
          a1 = v90;
          continue;
        case 0x96u:
        case 0x97u:
        case 0x98u:
        case 0xA6u:
          v34 = &v21[_pcre2_OP_lengths_8[v22]];
          do
            v34 += __rev16(*(unsigned __int16 *)(v34 + 1));
          while (*v34 == 120);
LABEL_48:
          v18 = v34 + 3;
          goto LABEL_53;
        case 0x99u:
        case 0x9Bu:
        case 0x9Du:
        case 0x9Fu:
        case 0xA1u:
          v29 = _pcre2_OP_lengths_8[v22];
          v30 = &v21[v21[1]];
LABEL_52:
          v18 = &v30[v29];
          goto LABEL_53;
        case 0xA3u:
        case 0xA4u:
          return v8;
        default:
          return 4294967293;
      }
    }
  }
  return 0;
}

unsigned __int8 *sub_1A3A9DE10(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int a5)
{
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  char v15[6];

  v7 = a2 + 1;
  v6 = *a2;
  *(_BYTE *)(a1 + (v6 >> 3) + 40) |= 1 << (v6 & 7);
  if (a4 && v6 >= 0xC0)
  {
    if ((v6 & 0x20) != 0)
    {
      if ((v6 & 0x10) != 0)
      {
        if ((v6 & 8) != 0)
        {
          v8 = a2[1] & 0x3F;
          v9 = a2[2] & 0x3F;
          v10 = a2[3] & 0x3F;
          v11 = a2[4] & 0x3F;
          if ((v6 & 4) != 0)
          {
            LODWORD(v6) = ((v6 & 1) << 30) | (v8 << 24) | (v9 << 18) | (v10 << 12) | (v11 << 6) | a2[5] & 0x3F;
            v7 = a2 + 6;
          }
          else
          {
            LODWORD(v6) = ((v6 & 3) << 24) | (v8 << 18) | (v9 << 12) | (v10 << 6) | v11;
            v7 = a2 + 5;
          }
        }
        else
        {
          LODWORD(v6) = ((v6 & 7) << 18) | ((a2[1] & 0x3F) << 12) | ((a2[2] & 0x3F) << 6) | a2[3] & 0x3F;
          v7 = a2 + 4;
        }
      }
      else
      {
        LODWORD(v6) = ((v6 & 0xF) << 12) | ((a2[1] & 0x3F) << 6) | a2[2] & 0x3F;
        v7 = a2 + 3;
      }
    }
    else
    {
      v7 = a2 + 2;
      LODWORD(v6) = a2[1] & 0x3F | ((v6 & 0x1F) << 6);
    }
  }
  if (a3)
  {
    if (!(a5 | a4))
    {
      v13 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v6 + 256);
      goto LABEL_17;
    }
    v12 = *(_DWORD *)&_pcre2_ucd_records_8[12
                                         * _pcre2_ucd_stage2_8[v6 & 0x7F | (_pcre2_ucd_stage1_8[v6 >> 7] << 7)]
                                         + 4]
        + v6;
    if (a4)
    {
      _pcre2_ord2utf_8(v12, (uint64_t)v15);
      v13 = v15[0];
LABEL_17:
      *(_BYTE *)(a1 + (v13 >> 3) + 40) |= 1 << (v13 & 7);
      return v7;
    }
    if (v12 <= 0xFF)
      *(_BYTE *)(a1 + (v12 >> 3) + 40) |= 1 << (v12 & 7);
  }
  return v7;
}

uint64_t sub_1A3A9DFDC(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int i;
  _BYTE v7[6];

  v3 = result;
  if (!a3)
    goto LABEL_5;
  v4 = 0;
  v5 = *(_QWORD *)(result + 24);
  do
  {
    *(_BYTE *)(result + 40 + v4) |= *(_BYTE *)(v5 + (a2 + 512 + v4));
    ++v4;
  }
  while (a3 != v4);
  if (a3 != 32)
  {
LABEL_5:
    for (i = 128; i != 256; ++i)
    {
      if (((*(unsigned __int8 *)((i >> 3) + *(_QWORD *)(v3 + 24) + 512) >> (i & 7)) & 1) != 0)
      {
        result = _pcre2_ord2utf_8(i, (uint64_t)v7);
        *(_BYTE *)(v3 + ((unint64_t)v7[0] >> 3) + 40) |= 1 << (v7[0] & 7);
      }
    }
  }
  return result;
}

uint64_t _pcre2_auto_possessify_8(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v23 = 1000;
  v2 = *a1;
  if (v2 <= 0xA7)
  {
    v5 = a1;
    v6 = *(_DWORD *)(a2 + 204);
    v22 = v6 & 0x80000;
    v7 = (v6 >> 19) & 1;
    v8 = (v6 >> 17) & 1;
    while ((v2 - 33) > 0x40u)
    {
      if (v2 - 110 < 2)
      {
        v10 = 33;
        goto LABEL_14;
      }
      if (v2 == 112)
      {
        v10 = __rev16(*(unsigned __int16 *)(v5 + 1));
LABEL_14:
        v11 = v5[v10];
        if ((v11 - 98) <= 7u)
        {
          v12 = sub_1A3A9E420(v5, v7, v8, *(_QWORD *)(a2 + 16), (uint64_t)&v24);
          v25 = (v11 & 1) == 0;
          if (v12)
          {
            if (sub_1A3A9E8AC(v12, v7, v8, a2, &v24, v12, &v23) && (v11 - 98) <= 7u)
              v5[v10] = 0x6D6D6C6C6B6B6A6AuLL >> (8 * (v11 - 98));
          }
        }
LABEL_36:
        LOBYTE(v2) = *v5;
      }
      result = v2;
      switch((char)v2)
      {
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '^':
        case '_':
          v16 = v5[1];
          goto LABEL_43;
        case '[':
        case '\\':
        case ']':
        case 'a':
          v16 = v5[3];
LABEL_43:
          v17 = 2 * ((v16 - 15) < 2);
          goto LABEL_44;
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'u':
        case 'v':
          goto LABEL_52;
        case 'p':
          v20 = *(unsigned __int16 *)(v5 + 1);
          goto LABEL_50;
        case 'w':
          v20 = *(unsigned __int16 *)(v5 + 5);
LABEL_50:
          v17 = __rev16(v20);
          goto LABEL_44;
        default:
          if (v2 - 153 <= 8 && ((1 << (v2 + 103)) & 0x155) != 0)
          {
            v17 = v5[1];
LABEL_44:
            v18 = _pcre2_OP_lengths_8;
            goto LABEL_45;
          }
          if (!(_BYTE)v2)
            return result;
LABEL_52:
          v17 = _pcre2_OP_lengths_8[v2];
          v19 = &v5[v17];
          if (v22)
          {
            if ((v2 - 29) <= 0x37u)
            {
              v21 = *(v19 - 1);
              if (v21 >= 0xC0)
              {
                LOBYTE(v2) = v21 & 0x3F;
                v18 = _pcre2_utf8_table4;
LABEL_45:
                v19 = &v5[v17 + v18[v2]];
              }
            }
          }
          v2 = *v19;
          v5 = v19;
          if (v2 >= 0xA8)
            return 0xFFFFFFFFLL;
          break;
      }
    }
    if (v2 <= 0x54u)
    {
      if (v2 <= 0x47u)
      {
        if (v2 >= 0x2Eu)
          v13 = -46;
        else
          v13 = -33;
        if (v2 <= 0x3Au)
          v9 = v13;
        else
          v9 = 197;
      }
      else
      {
        v9 = 184;
      }
    }
    else
    {
      v9 = 171;
    }
    if ((v2 + v9 + 33) >= 0x29u)
    {
      v25 = ((v9 + v2) & 0xF9) == 0;
    }
    else
    {
      v14 = sub_1A3A9E420(v5, v7, v8, *(_QWORD *)(a2 + 16), (uint64_t)&v24);
      v25 = ((v9 + v2) & 0xF9) == 0;
      if (v14 && sub_1A3A9E8AC(v14, v7, v8, a2, &v24, v14, &v23))
      {
        switch((_BYTE)v2 + (_BYTE)v9)
        {
          case 0:
            v15 = *v5 + 9;
            goto LABEL_35;
          case 1:
          case 2:
            v15 = *v5 + 8;
            goto LABEL_35;
          case 3:
          case 4:
            v15 = *v5 + 7;
            goto LABEL_35;
          case 5:
          case 6:
            v15 = *v5 + 6;
            goto LABEL_35;
          case 7:
            v15 = *v5 + 5;
LABEL_35:
            *v5 = v15;
            break;
          default:
            goto LABEL_36;
        }
      }
    }
    goto LABEL_36;
  }
  return 0xFFFFFFFFLL;
}

unsigned __int8 *sub_1A3A9E420(unsigned __int8 *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned __int8 v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;

  v8 = *a1;
  result = a1 + 1;
  v7 = v8;
  *(_QWORD *)a5 = v8;
  if (v8 - 33 <= 0x40)
  {
    if (v7 >= 0x2E)
      v9 = 46;
    else
      v9 = 33;
    if (v7 <= 0x3A)
      v10 = v9;
    else
      v10 = 59;
    if (v7 <= 0x47)
      v11 = v10;
    else
      v11 = 72;
    if (v7 <= 0x54)
      v12 = v11;
    else
      v12 = 85;
    v13 = (v7 - v12 + 33) > 0x2Du
       || ((1 << (v7 - v12 + 33)) & 0x238000000000) == 0;
    v14 = a1 + 3;
    if (!v13)
      result = v14;
    if ((v7 - v12 - 2) > 8u)
      v15 = 1;
    else
      v15 = dword_1A3ACE660[(char)(v7 - v12 - 2)];
    *(_DWORD *)(a5 + 4) = v15;
    if (v12 <= 58)
    {
      if (v12 == 33)
      {
        v16 = 29;
LABEL_38:
        *(_DWORD *)a5 = v16;
LABEL_39:
        v22 = result + 1;
        v21 = *result;
        if (a2 && v21 >= 0xC0)
        {
          if ((v21 & 0x20) != 0)
          {
            v25 = *v22 & 0x3F;
            if ((v21 & 0x10) != 0)
            {
              if ((v21 & 8) != 0)
              {
                v36 = result[2] & 0x3F;
                v37 = result[3] & 0x3F;
                v38 = result[4] & 0x3F;
                if ((v21 & 4) != 0)
                {
                  v21 = ((v21 & 1) << 30) | (v25 << 24) | (v36 << 18) | (v37 << 12) | (v38 << 6) | result[5] & 0x3F;
                  v22 = result + 6;
                }
                else
                {
                  v21 = ((v21 & 3) << 24) | (v25 << 18) | (v36 << 12) | (v37 << 6) | v38;
                  v22 = result + 5;
                }
              }
              else
              {
                v21 = ((v21 & 7) << 18) | (v25 << 12) | ((result[2] & 0x3F) << 6) | result[3] & 0x3F;
                v22 = result + 4;
              }
            }
            else
            {
              v21 = ((v21 & 0xF) << 12) | (v25 << 6) | result[2] & 0x3F;
              v22 = result + 3;
            }
          }
          else
          {
            v22 = result + 2;
            v21 = result[1] & 0x3F | ((v21 & 0x1F) << 6);
          }
        }
        *(_DWORD *)(a5 + 8) = v21;
        *(_DWORD *)(a5 + 12) = -1;
        return v22;
      }
LABEL_30:
      v18 = 29;
LABEL_32:
      *(_DWORD *)a5 = v18;
      v19 = *result;
      if (a2 && v19 >= 0xC0)
      {
        if ((v19 & 0x20) != 0)
        {
          v24 = result[1] & 0x3F;
          if ((v19 & 0x10) != 0)
          {
            if ((v19 & 8) != 0)
            {
              v33 = result[2] & 0x3F;
              v34 = result[3] & 0x3F;
              v35 = result[4] & 0x3F;
              if ((v19 & 4) != 0)
              {
                v19 = ((v19 & 1) << 30) | (v24 << 24) | (v33 << 18) | (v34 << 12) | (v35 << 6) | result[5] & 0x3F;
                result += 6;
              }
              else
              {
                v19 = ((v19 & 3) << 24) | (v24 << 18) | (v33 << 12) | (v34 << 6) | v35;
                result += 5;
              }
            }
            else
            {
              v19 = ((v19 & 7) << 18) | (v24 << 12) | ((result[2] & 0x3F) << 6) | result[3] & 0x3F;
              result += 4;
            }
          }
          else
          {
            v19 = ((v19 & 0xF) << 12) | (v24 << 6) | result[2] & 0x3F;
            result += 3;
          }
        }
        else
        {
          v20 = result[1];
          result += 2;
          v19 = v20 & 0x3F | ((v19 & 0x1F) << 6);
        }
      }
      else
      {
        ++result;
      }
      *(_DWORD *)(a5 + 8) = v19;
      if (v19 >= 0x80 && (a3 | a2 || v19 > 0xFF))
        v39 = *(_DWORD *)&_pcre2_ucd_records_8[12
                                             * _pcre2_ucd_stage2_8[v19 & 0x7F | (_pcre2_ucd_stage1_8[v19 >> 7] << 7)]
                                             + 4]
            + v19;
      else
        v39 = *(unsigned __int8 *)(a4 + v19);
      *(_DWORD *)(a5 + 12) = v39;
      if (v19 == v39)
        *(_DWORD *)(a5 + 12) = -1;
      else
        *(_DWORD *)(a5 + 16) = -1;
      return result;
    }
    if (v12 != 85)
    {
      if (v12 != 72)
      {
        v16 = 31;
        goto LABEL_38;
      }
      v18 = 31;
      goto LABEL_32;
    }
    v17 = *result++;
    v7 = v17;
    *(_DWORD *)a5 = v17;
  }
  v18 = 31;
  switch(v7)
  {
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
      return result;
    case 0xEu:
    case 0x1Bu:
    case 0x1Cu:
      return 0;
    case 0xFu:
    case 0x10u:
      v26 = *result;
      if (v26 != 10)
      {
        *(_DWORD *)(a5 + 8) = v26;
        *(_DWORD *)(a5 + 12) = result[1];
        result += 2;
        return result;
      }
      v27 = 0;
      v28 = (char *)&_pcre2_ucd_caseless_sets_8 + 4 * result[1];
      v23 = result + 2;
      do
      {
        if (v27 == 24)
        {
          *(_DWORD *)(a5 + 8) = result[2];
          *(_DWORD *)(a5 + 12) = result[3];
          return v23;
        }
        v29 = *(_DWORD *)&v28[v27];
        *(_DWORD *)(a5 + v27 + 8) = v29;
        v27 += 4;
      }
      while (v29 != -1);
      if (v7 == 16)
        v30 = 29;
      else
        v30 = 31;
      *(_DWORD *)a5 = v30;
      return v23;
    case 0x1Du:
    case 0x1Fu:
      goto LABEL_39;
    case 0x1Eu:
      goto LABEL_30;
    case 0x20u:
      goto LABEL_32;
    default:
      if (v7 - 110 >= 2)
      {
        if (v7 != 112)
          return 0;
        v23 = &result[__rev16(*(unsigned __int16 *)result) - 1];
      }
      else
      {
        v23 = result + 32;
      }
      v31 = *v23 - 98;
      if (v31 > 0xB)
        goto LABEL_71;
      v32 = 1 << v31;
      if ((v32 & 0x533) != 0)
      {
        *(_DWORD *)(a5 + 4) = 1;
LABEL_64:
        ++v23;
        goto LABEL_71;
      }
      if ((v32 & 0x20C) != 0)
        goto LABEL_64;
      *(_DWORD *)(a5 + 4) = __rev16(*(unsigned __int16 *)(v23 + 1)) == 0;
      v23 += 5;
LABEL_71:
      *(_DWORD *)(a5 + 8) = (_DWORD)v23 - (_DWORD)result;
      return v23;
  }
}

uint64_t sub_1A3A9E8AC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, unsigned __int8 *a6, _DWORD *a7)
{
  int v7;
  uint64_t result;
  int v16;
  int v17;
  int *v18;
  int v19;
  int *v20;
  int *v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  int *v28;
  _BOOL4 v29;
  int v30;
  unint64_t v31;
  unsigned __int8 *v32;
  int v33;
  int *v34;
  int v35;
  int v36;
  int *v37;
  int v38;
  int v39;
  BOOL v41;
  _BOOL4 v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  unsigned int v51;
  int v52;
  BOOL v53;
  BOOL v54;
  int v55;
  int *v56;
  unsigned __int8 *v57;
  int v58;
  int *v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned __int8 *v63;
  int *v64;
  unsigned __int8 *v65;
  int *v66;
  unsigned __int8 *v67;
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  int v74;
  unsigned __int8 *v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  unsigned __int8 *v79;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v7 = (*a7)--;
  if (v7 < 2)
    return 0;
  v84 = 0;
  v83 = a5 + 2;
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_5:
        while (1)
        {
          v16 = *a1;
          if (v16 != 118)
            break;
          a1 += 6;
        }
        if (v16 != 119)
          break;
        a1 += __rev16(*(unsigned __int16 *)(a1 + 5));
      }
      while (v16 == 120)
      {
        a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
        v16 = *a1;
      }
      if ((v16 - 121) > 0x1E)
        break;
      v17 = 1 << (v16 - 121);
      if ((v17 & 0xA800) != 0)
      {
        v22 = &a1[__rev16(*(unsigned __int16 *)(a1 + 1))];
        a1 += _pcre2_OP_lengths_8[v16];
        v84 = 1;
        if (*v22 == 120)
        {
          do
          {
            result = sub_1A3A9E8AC(a1, a2, a3, a4, a5, a6, a7);
            if (!(_DWORD)result)
              return result;
            a1 = v22 + 3;
            v22 += __rev16(*(unsigned __int16 *)(v22 + 1));
          }
          while (*v22 == 120);
          v84 = 1;
        }
      }
      else if ((v17 & 9) != 0)
      {
        if (!a5[1])
          return 0;
        result = 0;
        switch(a1[-__rev16(*(unsigned __int16 *)(a1 + 1))])
        {
          case 0x7Eu:
          case 0x7Fu:
          case 0x80u:
          case 0x81u:
          case 0x84u:
            return v84 ^ 1u;
          case 0x82u:
          case 0x83u:
            return result;
          case 0x85u:
            if ((*a5 - 29) >= 2)
              return 0;
            goto LABEL_24;
          case 0x88u:
          case 0x89u:
          case 0x8Du:
          case 0x8Eu:
            if (!*(_DWORD *)(a4 + 292))
              goto LABEL_24;
            return 0;
          default:
LABEL_24:
            a1 += _pcre2_OP_lengths_8[v16];
            break;
        }
      }
      else
      {
        if ((v17 & 0x60000000) == 0)
          break;
        v79 = a1 + 1;
        if (a1[1] - 132 > 4 || ((1 << (a1[1] + 124)) & 0x15) == 0)
          return 0;
        do
          v79 += __rev16(*(unsigned __int16 *)(v79 + 1));
        while (*v79 == 120);
        result = sub_1A3A9E8AC(v79 + 3, a2, a3, a4, a5, a6, a7);
        if (!(_DWORD)result)
          return result;
        a1 += _pcre2_OP_lengths_8[v16];
      }
    }
    if (!v16)
      return a5[1] != 0;
    result = (uint64_t)sub_1A3A9E420(a1, a2, a3, *(_QWORD *)(a4 + 16), (uint64_t)&v85);
    if (!result)
      return result;
    a1 = (unsigned __int8 *)result;
    v19 = *a5;
    if (*a5 == 29)
    {
      v20 = &v85;
      v21 = v83;
LABEL_26:
      v23 = *v21;
      if (v20 == &v85)
        v24 = result;
      else
        v24 = (uint64_t)a6;
      v25 = v24 + 2;
      v26 = v20 + 3;
      while (2)
      {
        result = 0;
        v27 = *v20;
        if (*v20 <= 109)
        {
          switch(v27)
          {
            case 6:
              if (v23 > 0xFF || (*(_BYTE *)(*(_QWORD *)(a4 + 32) + v23) & 8) == 0)
                return 0;
              goto LABEL_150;
            case 7:
              if (v23 <= 0xFF && (*(_BYTE *)(*(_QWORD *)(a4 + 32) + v23) & 8) != 0)
                return 0;
              goto LABEL_150;
            case 8:
              if (v23 > 0xFF || (*(_BYTE *)(*(_QWORD *)(a4 + 32) + v23) & 1) == 0)
                return 0;
              goto LABEL_150;
            case 9:
              if (v23 <= 0xFF && (*(_BYTE *)(*(_QWORD *)(a4 + 32) + v23) & 1) != 0)
                return 0;
              goto LABEL_150;
            case 10:
              if (v23 > 0xFF || (*(_BYTE *)(*(_QWORD *)(a4 + 32) + v23) & 0x10) == 0)
                return 0;
              goto LABEL_150;
            case 11:
              if (v23 <= 0xFE && (*(_BYTE *)(*(_QWORD *)(a4 + 32) + v23) & 0x10) != 0)
                return 0;
              goto LABEL_150;
            case 15:
            case 16:
              v30 = v27 == 15;
              v31 = v20[3];
              LODWORD(v18) = _pcre2_ucd_stage2_8[v23
                                               - (v18 & 0xFFFFFF80)
                                               + (_pcre2_ucd_stage1_8[v23 / 128] << 7)];
              v32 = &_pcre2_ucd_records_8[12 * v18];
              switch(v20[2])
              {
                case 1:
                  v39 = _pcre2_ucd_records_8[12 * v18 + 1];
                  if (v39 == 5 || v39 == 9)
                    goto LABEL_124;
                  v41 = v39 == 8;
                  goto LABEL_145;
                case 2:
                  v42 = v27 == 15;
                  v43 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * v18 + 1]] == (_DWORD)v31;
                  goto LABEL_119;
                case 3:
                  v42 = v27 == 15;
                  v44 = _pcre2_ucd_records_8[12 * v18 + 1];
                  goto LABEL_115;
                case 4:
                  v42 = v27 == 15;
                  v44 = *v32;
LABEL_115:
                  v43 = (_DWORD)v31 == v44;
                  goto LABEL_119;
                case 5:
                  if ((_DWORD)v31 == *v32)
                    goto LABEL_124;
                  v45 = (*(_DWORD *)((char *)&_pcre2_ucd_script_sets_8[*(_WORD *)&_pcre2_ucd_records_8[12 * v18 + 8] & 0x3FF]
                                   + ((v31 >> 3) & 0x1FFFFFFC)) >> v31) & 1;
                  goto LABEL_148;
                case 6:
                  v42 = v27 == 15;
                  v43 = (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * v18 + 1]] & 0xFFFFFFFD) == 1;
                  goto LABEL_119;
                case 7:
                case 8:
                  if (v23 < 0x2000)
                  {
                    if (v23 > 132)
                    {
                      if (v23 > 5759)
                      {
                        if (v23 == 5760 || v23 == 6158)
                          goto LABEL_149;
                      }
                      else if (v23 == 133 || v23 == 160)
                      {
                        goto LABEL_149;
                      }
                    }
                    else if (v23 <= 0x20 && ((1 << v23) & 0x100003E00) != 0)
                    {
                      goto LABEL_149;
                    }
                  }
                  else if ((v23 - 0x2000) < 0xB
                         || (v23 - 8232) <= 0x37
                         && ((1 << (v23 - 40)) & 0x80000000000083) != 0
                         || v23 == 12288)
                  {
                    goto LABEL_149;
                  }
                  v42 = v27 == 15;
                  v43 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * v18 + 1]] == 6;
LABEL_119:
                  v46 = !v43;
                  v30 = v42 ^ v46;
                  goto LABEL_149;
                case 9:
                  if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * v18 + 1]] | 2) == 3)
                  {
LABEL_124:
                    v45 = 1;
                  }
                  else
                  {
                    v41 = v23 == 95;
LABEL_145:
                    v45 = v41;
                  }
LABEL_148:
                  v30 = v45 == v30;
                  goto LABEL_149;
                case 10:
                  v18 = &_pcre2_ucd_caseless_sets_8[_pcre2_ucd_records_8[12 * v18 + 3]];
                  break;
                default:
                  return 0;
              }
              while (1)
              {
                v47 = *v18;
                if (*v18 > v23)
                  break;
                ++v18;
                if (v47 == v23)
                  goto LABEL_149;
              }
              v30 = v27 != 15;
LABEL_149:
              if (v30)
                goto LABEL_150;
              return 0;
            case 17:
            case 21:
            case 23:
            case 25:
              result = 0;
              if ((v23 - 10) >= 4 && (v23 - 8232) >= 2 && v23 != 133)
                goto LABEL_150;
              return result;
            case 18:
              result = 0;
              if (v23 < 0x2000)
              {
                if (v23 <= 159)
                {
                  if (v23 != 9 && v23 != 32)
                    return result;
                }
                else if (v23 != 160 && v23 != 5760 && v23 != 6158)
                {
                  return result;
                }
              }
              else if (v23 > 8238)
              {
                if (v23 != 8239 && v23 != 8287 && v23 != 12288)
                  return result;
              }
              else if ((v23 - 0x2000) >= 0xB)
              {
                return result;
              }
              goto LABEL_150;
            case 19:
              result = 0;
              if (v23 < 0x2000)
              {
                if (v23 <= 159)
                {
                  if (v23 == 9 || v23 == 32)
                    return result;
                }
                else if (v23 == 160 || v23 == 5760 || v23 == 6158)
                {
                  return result;
                }
              }
              else if (v23 > 8238)
              {
                if (v23 == 8239 || v23 == 8287 || v23 == 12288)
                  return result;
              }
              else if ((v23 - 0x2000) < 0xB)
              {
                return result;
              }
              break;
            case 20:
              if ((v23 - 10) >= 4 && (v23 - 8232) >= 2 && v23 != 133)
                return 0;
              goto LABEL_150;
            case 24:
              goto LABEL_150;
            case 29:
              v33 = v20[2];
              v34 = v26;
              while (v23 != v33)
              {
                v35 = *v34++;
                v33 = v35;
                if (v35 == -1)
                  goto LABEL_150;
              }
              return 0;
            case 31:
              v36 = v20[2];
              v37 = v26;
              while (v23 != v36)
              {
                v38 = *v37++;
                v36 = v38;
                if (v38 == -1)
                  return 0;
              }
              if (v23 == -1)
                return 0;
              goto LABEL_150;
            default:
              return result;
          }
          goto LABEL_150;
        }
        switch(v27)
        {
          case 'n':
            if (v23 <= 0xFF)
              goto LABEL_89;
            break;
          case 'o':
            if (v23 > 0xFF)
              return 0;
LABEL_89:
            if (((*(unsigned __int8 *)(v24 - v20[2] + ((unint64_t)v23 >> 3)) >> (v23 & 7)) & 1) != 0)
              return 0;
            break;
          case 'p':
            v81 = v24;
            v82 = v25;
            v28 = v26;
            v29 = _pcre2_xclass_8(v23, (_BYTE *)(v25 - v20[2]));
            v26 = v28;
            v24 = v81;
            v25 = v82;
            if (v29)
              return 0;
            break;
          default:
            return result;
        }
LABEL_150:
        v48 = v21[1];
        ++v21;
        v23 = v48;
        if (v48 == -1)
          goto LABEL_235;
        continue;
      }
    }
    v21 = (int *)&v87;
    v20 = a5;
    if (v85 == 29)
      goto LABEL_26;
    if (v19 == 110 || v85 == 110 || !(_DWORD)a2 && (v19 == 111 || v85 == 111))
      break;
    if ((v19 - 15) > 1)
    {
      result = 0;
      v62 = v19 - 6;
      if (v62 > 0x10 || (v85 - 6) > 0x14)
        return result;
      if (!byte_1A3ACE434[21 * v62 + v85 - 6])
        return 0;
    }
    else if (v85 != 24)
    {
      if ((v85 - 15) > 1)
        return 0;
      v49 = byte_1A3ACE599[14 * *v83 + v87];
      switch(byte_1A3ACE599[14 * *v83 + v87])
      {
        case 1u:
          result = 0;
          if (v19 != 16 || v85 != 16)
            return result;
          break;
        case 2u:
          if ((v19 == v85) == (a5[3] == v88))
            return 0;
          break;
        case 3u:
          if (v19 == v85)
            return 0;
          break;
        case 4u:
          if (v85 != 16)
            return 0;
          v76 = v19 == 16;
          v77 = a5[3];
          v78 = v88;
          goto LABEL_271;
        case 5u:
          if (v19 != 16)
            return 0;
          v76 = v85 == 16;
          v77 = v88;
          v78 = a5[3];
LABEL_271:
          if (byte_1A3ACE356[30 * v77 + v78] != v76)
            return 0;
          break;
        case 6u:
        case 7u:
        case 8u:
          if (v85 != 16)
            return 0;
          v50 = (unsigned __int8 *)&unk_1A3ACE428 + 4 * (v49 - 6);
          v51 = v88;
          if (v88 == *v50 || v88 == v50[1])
            goto LABEL_249;
          result = 0;
          if (v19 != 16)
            return result;
          v52 = v50[2];
          goto LABEL_242;
        case 9u:
        case 0xAu:
        case 0xBu:
          if (v19 != 16)
            return 0;
          v71 = (unsigned __int8 *)&unk_1A3ACE428 + 4 * (v49 - 9);
          v51 = a5[3];
          if (v51 == *v71 || v51 == v71[1])
            goto LABEL_258;
          result = 0;
          if (v85 != 16)
            return result;
          v52 = v71[2];
LABEL_242:
          if (v51 == v52)
            return result;
          break;
        case 0xCu:
        case 0xDu:
        case 0xEu:
          if (v85 != 16)
            return 0;
          v72 = (unsigned __int8 *)&unk_1A3ACE428 + 4 * (v49 - 12);
          LODWORD(v73) = v88;
          if (byte_1A3ACE356[30 * *v72 + v88] && byte_1A3ACE356[30 * v72[1] + v88])
          {
            result = 0;
            if (v19 != 16)
              return result;
            v74 = v72[3];
            goto LABEL_256;
          }
LABEL_249:
          if (v19 == 16)
            return 0;
          break;
        case 0xFu:
        case 0x10u:
        case 0x11u:
          if (v19 != 16)
            return 0;
          v75 = (unsigned __int8 *)&unk_1A3ACE428 + 4 * (v49 - 15);
          v73 = a5[3];
          if (byte_1A3ACE356[30 * *v75 + v73] && byte_1A3ACE356[30 * v75[1] + v73])
          {
            result = 0;
            if (v85 != 16)
              return result;
            v74 = v75[3];
LABEL_256:
            if ((_DWORD)v73 == v74)
              return result;
          }
          else
          {
LABEL_258:
            if (v85 == 16)
              return 0;
          }
          break;
        default:
          return 0;
      }
    }
LABEL_235:
    if (!v86)
      return 1;
  }
  result = 0;
  if ((_DWORD)a2)
    v53 = 0;
  else
    v53 = v19 == 111;
  v54 = v53 || v19 == 110;
  v55 = v54;
  if (v54)
    v56 = a5;
  else
    v56 = &v85;
  if (v54)
    v57 = a6;
  else
    v57 = a1;
  if (v54)
    v58 = v85;
  else
    v58 = *a5;
  if (v54)
    v59 = &v85;
  else
    v59 = a5;
  v60 = &v57[-v56[2]];
  switch(v58)
  {
    case 6:
      LODWORD(result) = 1;
      goto LABEL_198;
    case 7:
LABEL_198:
      v61 = *(_QWORD *)(a4 + 24) + 64;
      goto LABEL_226;
    case 8:
      LODWORD(result) = 1;
      goto LABEL_223;
    case 9:
LABEL_223:
      v61 = *(_QWORD *)(a4 + 24);
      goto LABEL_226;
    case 10:
      LODWORD(result) = 1;
      goto LABEL_225;
    case 11:
LABEL_225:
      v61 = *(_QWORD *)(a4 + 24) + 160;
LABEL_226:
      if (!(_DWORD)result)
        goto LABEL_232;
      v69 = 0;
      while ((v60[v69] & ~*(unsigned __int8 *)(v61 + v69)) == 0)
      {
        if (++v69 == 32)
          goto LABEL_235;
      }
      return 0;
    default:
      if ((v58 - 110) < 2)
      {
        if (v59 == &v85)
          v63 = a1;
        else
          v63 = a6;
        if (v55)
          v64 = &v85;
        else
          v64 = a5;
        v61 = (uint64_t)&v63[-v64[2]];
        goto LABEL_232;
      }
      if (v58 != 112)
        return result;
      if (v59 == &v85)
        v65 = a1;
      else
        v65 = a6;
      if (v55)
        v66 = &v85;
      else
        v66 = a5;
      v67 = &v65[-v66[2]];
      v68 = v67[2];
      if ((v68 & 4) != 0)
        return 0;
      if ((v67[2] & 2) == 0)
      {
        if (!v86)
          return (v68 & 1) == 0;
        goto LABEL_5;
      }
      v61 = (uint64_t)(v67 + 3);
LABEL_232:
      v70 = 0;
      while ((*(_BYTE *)(v61 + v70) & v60[v70]) == 0)
      {
        if (++v70 == 32)
          goto LABEL_235;
      }
      return 0;
  }
}

uint64_t pcre2_match_8(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint32x2_t *v7;
  char *v8;
  uint64_t valid;
  uint64_t v11;
  uint32x2_t *v12;
  uint32x2_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int32 v18;
  __int32 v19;
  int v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  uint32x2_t *v25;
  __int32 v26;
  unsigned __int32 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char v31;
  int v32;
  unsigned __int8 *v33;
  char v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unint64_t v44;
  uint32x2_t v45;
  uint64_t v46;
  __int32 v47;
  __int32 v48;
  unsigned __int32 v49;
  int v50;
  uint32x2_t *v51;
  __int32 v52;
  int v53;
  _BOOL4 v55;
  unsigned __int8 *v56;
  char *v57;
  char *v58;
  char v59;
  char v60;
  unint64_t v61;
  _BOOL4 v63;
  char v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  int v68;
  BOOL v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  uint64_t v74;
  _BOOL4 v75;
  uint64_t v76;
  _BOOL4 v77;
  BOOL v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  BOOL v83;
  int v84;
  char *v85;
  BOOL v87;
  char *v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  void *v94;
  uint64_t *v95;
  __int32 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  unsigned __int8 *v102;
  unint64_t v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  unsigned __int32 v110;
  _BOOL4 v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  int __c;
  unint64_t v116;
  int v117;
  uint64_t *v118;
  unint64_t v119;
  char v120;
  __int16 v121;
  uint32x2_t *v122;
  int v123;
  unsigned __int8 *v124;
  int v125;
  unint64_t v126;
  char *v127;
  int v128;
  int v129;
  unsigned __int32 v130;
  uint64_t v131;
  __int32 v132;
  unint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  _OWORD v152[2];
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  char v158;
  uint64_t v159;

  v1 = MEMORY[0x1E0C80A78](a1);
  v159 = *MEMORY[0x1E0C80C00];
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v136 = 0u;
  v137 = 0u;
  v134 = 0u;
  v135 = 0u;
  if ((unint64_t)v2 | v3)
    v8 = v2;
  else
    v8 = "";
  *(_QWORD *)&v137 = &v158;
  if ((v5 & 0x1FFF9FC0) != 0)
    return 4294967262;
  v11 = v6;
  valid = 4294967245;
  if (!v6)
    return valid;
  v12 = (uint32x2_t *)v1;
  if (!v1 || !v8)
    return valid;
  v13 = v7;
  v14 = v5;
  v15 = v4;
  v16 = v3;
  v156 = 0uLL;
  v157 = 0uLL;
  v154 = 0uLL;
  v155 = 0uLL;
  v153 = 0uLL;
  memset(v152, 0, sizeof(v152));
  if (v3 == -1)
  {
    v16 = _pcre2_strlen_8(v8);
    v17 = 1;
  }
  else
  {
    v17 = 0;
  }
  if (v16 < (unint64_t)v15)
    return 4294967263;
  if (v12[10].i32[0] != 1346589253)
    return 4294967265;
  v18 = v12[12].i32[0];
  if ((v18 & 7) != 1)
    return 4294967264;
  v19 = v12[11].i32[0];
  v20 = (v14 >> 4) & 1;
  if ((v14 & 0x20) != 0)
    v20 = 2;
  LOWORD(v142) = v20;
  if (v20)
  {
    if (((v19 | v14) & 0x20000000) != 0)
      return 4294967262;
  }
  if (v13 && *(_QWORD *)&v13[7] != -1 && (v19 & 0x800000) == 0)
    return 4294967240;
  v127 = &v8[v15];
  v128 = v19 & 0x80000;
  v132 = v19;
  if ((*(_BYTE *)(v11 + 73) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)(v11 + 32), *(_QWORD *)(v11 + 16));
    v19 = v132;
    *(_BYTE *)(v11 + 73) &= ~1u;
  }
  *(_QWORD *)(v11 + 64) = 0;
  v118 = (uint64_t *)(v11 + 64);
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)&v144 = v8;
  v112 = v15;
  v107 = v17;
  v116 = (unint64_t)&v8[v16];
  v130 = v18;
  if (v128 && ((v14 & 0x40000000) == 0 || (v19 & 0x4000000) != 0))
  {
    if ((v19 & 0x4000000) != 0)
    {
      if (v16 > v15)
      {
        v23 = (unint64_t)&v8[v15];
        v32 = *v127 & 0xC0;
        if (v32 == 128)
        {
          v33 = (unsigned __int8 *)&v8[v15 + 1];
          while (v33 < (unsigned __int8 *)&v8[v16])
          {
            v34 = *v33++;
            if ((v34 & 0xC0) != 0x80)
            {
              v23 = (unint64_t)(v33 - 1);
              goto LABEL_50;
            }
          }
          *(_QWORD *)&v144 = v33;
          v23 = (unint64_t)v33;
          goto LABEL_338;
        }
LABEL_50:
        *(_QWORD *)&v144 = v23;
        v33 = (unsigned __int8 *)v23;
        if (v32 == 128)
        {
LABEL_338:
          valid = _pcre2_valid_utf_8(v33, &v8[v16] - (char *)v33, v118);
          *(_DWORD *)(v11 + 76) = valid;
          if ((_DWORD)valid)
          {
            v95 = (uint64_t *)(v11 + 64);
            v96 = v132;
            while (1)
            {
              v97 = v144;
              v98 = *v95;
              v99 = v144 - (_QWORD)v8 + *v95;
              *v95 = v99;
              if ((v96 & 0x4000000) == 0 || (int)valid > 0)
                return valid;
              v22 = &v8[v99];
              if ((unint64_t)&v8[v99] >= v23)
                break;
              v100 = v98 + v97 + 1;
              v101 = &v8[v16 - 1 - v98 - v97];
              do
              {
                v102 = (unsigned __int8 *)v100;
                v103 = (unint64_t)v101;
                *(_QWORD *)&v144 = v100;
                if (v100 >= v23)
                  break;
                ++v100;
                --v101;
              }
              while ((*v102 & 0xC0) == 0x80);
              v95 = (uint64_t *)(v11 + 64);
              valid = _pcre2_valid_utf_8(v102, v103, v118);
              *(_DWORD *)(v11 + 76) = valid;
              v96 = v132;
              if (!(_DWORD)valid)
                goto LABEL_347;
            }
            LODWORD(valid) = 2;
            v21 = &v8[v16];
          }
          else
          {
LABEL_347:
            v21 = &v8[v16];
            v22 = &v8[v16];
          }
          goto LABEL_33;
        }
LABEL_74:
        v41 = v12[15].u16[2];
        if (v12[15].i16[2] && v23 > (unint64_t)v8)
        {
          v42 = v23;
LABEL_77:
          v43 = (unsigned __int8 *)(v42 - 1);
          while (1)
          {
            v33 = v43;
            *(_QWORD *)&v144 = v43;
            if (v43 <= (unsigned __int8 *)v8)
              break;
            --v43;
            if ((*v33 & 0xC0) != 0x80)
            {
              v42 = (unint64_t)v33;
              if (--v41)
                goto LABEL_77;
              goto LABEL_338;
            }
          }
        }
        else
        {
          v33 = (unsigned __int8 *)v23;
        }
        goto LABEL_338;
      }
    }
    else if (v16 > v15 && (*v127 & 0xC0) == 0x80)
    {
      if (v15)
        return 4294967260;
      else
        return 4294967274;
    }
    v23 = (unint64_t)&v8[v15];
    *(_QWORD *)&v144 = &v8[v15];
    goto LABEL_74;
  }
  v21 = &v8[v16];
  LODWORD(valid) = 0;
  v22 = &v8[v16];
  v23 = (unint64_t)v127;
LABEL_33:
  v24 = &_pcre2_default_match_context_8;
  if (v13)
    v25 = v13;
  else
    v25 = v12;
  if (v13)
    v24 = (__int128 *)v13;
  v134 = *(_OWORD *)v25->i8;
  *(uint32x2_t *)&v135 = v25[2];
  v26 = v12[11].i32[0];
  v27 = v12[12].u32[0];
  v28 = *((_QWORD *)v24 + 7);
  if (v28 == -1)
    v29 = v21;
  else
    v29 = &v8[v28];
  v126 = (unint64_t)v29;
  LODWORD(v152[0]) = 2;
  *(_QWORD *)&v153 = v8;
  *((_QWORD *)&v153 + 1) = v22 - v8;
  DWORD2(v157) = 0;
  v30 = *((_QWORD *)v24 + 3);
  *(_QWORD *)&v151 = *((_QWORD *)v24 + 4);
  *((_QWORD *)&v151 + 1) = v30;
  *((_QWORD *)&v150 + 1) = v152;
  *(_QWORD *)&v141 = v112;
  *((_QWORD *)&v144 + 1) = v22;
  v110 = v27;
  LODWORD(v30) = (v12[15].u16[2] | v27 & 0x2000) != 0;
  LODWORD(v139) = (v27 >> 12) & 1;
  DWORD1(v139) = v30;
  *((_QWORD *)&v146 + 1) = 0;
  *(_QWORD *)&v147 = 0;
  WORD2(v142) = v12[16].i16[3];
  WORD3(v142) = v12[16].i16[2];
  *((_QWORD *)&v142 + 1) = v12 + 17;
  *(_QWORD *)&v143 = (char *)v12 + WORD3(v142) * (unint64_t)WORD2(v142) + 136;
  *((_QWORD *)&v143 + 1) = v8;
  WORD1(v142) = v12[15].i16[0];
  LODWORD(v149) = v26;
  *((_QWORD *)&v149 + 1) = 0;
  switch(v12[15].i16[1])
  {
    case 1:
      LODWORD(v150) = 1;
      v31 = 13;
      goto LABEL_54;
    case 2:
      LODWORD(v150) = 1;
      v31 = 10;
LABEL_54:
      BYTE4(v150) = v31;
      goto LABEL_60;
    case 3:
      LODWORD(v150) = 2;
      WORD2(v150) = 2573;
      goto LABEL_60;
    case 4:
      v35 = 1;
      goto LABEL_58;
    case 5:
      v35 = 2;
LABEL_58:
      HIDWORD(v149) = v35;
      goto LABEL_60;
    case 6:
      LODWORD(v150) = 1;
      BYTE4(v150) = 0;
LABEL_60:
      v36 = (16 * v12[16].u16[0] + 135) & 0x1FFFF0;
      LODWORD(v37) = *((_DWORD *)v24 + 16);
      v38 = v12[12].u32[1];
      if (v37 >= v38)
        v37 = v38;
      else
        v37 = v37;
      *((_QWORD *)&v137 + 1) = v37;
      *(uint32x2_t *)&v138 = vmin_u32(*(uint32x2_t *)((char *)v24 + 68), v12[13]);
      if (v36 > 0x800)
      {
        *((_QWORD *)&v135 + 1) = 10 * v36;
        if (v37 < (10 * v36) >> 10)
        {
          if (v36 > v37 << 10)
            return 4294967233;
          *((_QWORD *)&v135 + 1) = (v37 << 10) / v36 * v36;
        }
        v44 = v36;
        v39 = ((uint64_t (*)(void))v134)();
        *(_QWORD *)&v136 = v39;
        if (!v39)
          return 4294967248;
        v40 = *((_QWORD *)&v135 + 1);
        v36 = v44;
      }
      else
      {
        v39 = v137;
        v40 = (unsigned __int16)(0x5000u / (unsigned __int16)v36 * v36);
        *((_QWORD *)&v135 + 1) = v40;
        *(_QWORD *)&v136 = v137;
      }
      *((_QWORD *)&v136 + 1) = v39 + v40;
      v124 = (unsigned __int8 *)v36;
      memset((void *)(v39 + 128), 255, v36 - 128);
      v45 = v12[3];
      v46 = *(_QWORD *)&v45 + 256;
      *((uint32x2_t *)&v139 + 1) = v45;
      *(_QWORD *)&v140 = *(_QWORD *)&v45 + 256;
      *((_QWORD *)&v140 + 1) = *(_QWORD *)&v45 + 832;
      v47 = v12[12].i32[0];
      v119 = v47 & 0x10;
      v120 = v47;
      if ((v47 & 0x10) != 0)
      {
        v48 = v12[14].i32[0];
        v49 = v132;
        __c = v48;
        if ((v47 & 0x20) != 0)
        {
          v122 = 0;
          v117 = *(unsigned __int8 *)(v46 + v48);
          if (v48 >= 0x80u && (v132 & 0x20000) != 0 && !v128)
          {
            v122 = 0;
            v117 = (*(_DWORD *)&_pcre2_ucd_records_8[12
                                                                    * _pcre2_ucd_stage2_8[v48 & 0x7F | (_pcre2_ucd_stage1_8[v48 >> 7] << 7)]
                                                                    + 4]
                                   + v48);
          }
        }
        else
        {
          v122 = 0;
          v117 = v12[14].i32[0];
        }
      }
      else
      {
        __c = 0;
        v117 = 0;
        v50 = (v110 >> 9) & 1;
        if ((v47 & 0x40) == 0)
          v50 = 1;
        if (v50)
          v51 = 0;
        else
          v51 = v12 + 5;
        v122 = v51;
        v49 = v132;
      }
      v109 = v127 - 1;
      v123 = (v49 >> 19) & 1;
      v129 = v26 | v14;
      if ((v47 & 0x80) != 0)
      {
        v52 = v12[14].i32[1];
        if ((v47 & 0x100) != 0)
        {
          LOBYTE(v46) = *(_BYTE *)(v46 + v12[14].i32[1]);
          if (v12[14].i32[1] >= 0x80u && (v49 & 0x20000) != 0 && !v128)
            LODWORD(v46) = *(_DWORD *)&_pcre2_ucd_records_8[12
                                                          * _pcre2_ucd_stage2_8[v12[14].i32[1] & 0x7F | (_pcre2_ucd_stage1_8[v12[14].i32[1] >> 7] << 7)]
                                                          + 4]
                         + v12[14].i32[1];
        }
        else
        {
          LODWORD(v46) = v12[14].i32[1];
        }
      }
      else
      {
        LOBYTE(v52) = 0;
        LOBYTE(v46) = 0;
      }
      v53 = (v130 >> 14) & 0xC;
      v55 = (v47 & 0x10) != 0 || v122 != 0;
      v111 = v55;
      v105 = v52;
      v106 = v46;
      v108 = v119 >> 4;
      v121 = v26;
      v104 = (v130 >> 14) & 0xC;
LABEL_113:
      v113 = 0;
      v114 = 0;
      v131 = 0;
      v133 = 0;
      HIDWORD(v138) = 0;
      v125 = v53 | valid | v14;
      break;
    default:
      return 4294967252;
  }
  while (1)
  {
    if ((v12[11].i8[2] & 1) != 0)
      goto LABEL_234;
    if ((v26 & 0x100) == 0)
    {
      v56 = (unsigned __int8 *)v22;
      goto LABEL_117;
    }
    if (v128)
    {
      v56 = (unsigned __int8 *)v23;
      if (v23 >= (unint64_t)v22)
        goto LABEL_117;
LABEL_126:
      if (HIDWORD(v149))
      {
        if ((unint64_t)v56 < *((_QWORD *)&v144 + 1)
          && _pcre2_is_newline_8(v56, SHIDWORD(v149), *((uint64_t *)&v144 + 1), (int *)&v150, v123))
        {
          goto LABEL_117;
        }
      }
      else if ((unint64_t)v56 <= *((_QWORD *)&v144 + 1) - (unint64_t)v150
             && *v56 == BYTE4(v150)
             && ((_DWORD)v150 == 1 || v56[1] == BYTE5(v150)))
      {
        goto LABEL_117;
      }
      ++v56;
      while (v56 < (unsigned __int8 *)v22)
      {
        v60 = *v56++;
        if ((v60 & 0xC0) != 0x80)
        {
          --v56;
          goto LABEL_126;
        }
      }
    }
    else
    {
      v56 = (unsigned __int8 *)v23;
      if (v23 < (unint64_t)v22)
      {
        do
        {
          if (HIDWORD(v149))
          {
            if ((unint64_t)v56 < *((_QWORD *)&v144 + 1)
              && _pcre2_is_newline_8(v56, SHIDWORD(v149), *((uint64_t *)&v144 + 1), (int *)&v150, v123))
            {
              break;
            }
          }
          else if ((unint64_t)v56 <= *((_QWORD *)&v144 + 1) - (unint64_t)v150
                 && *v56 == BYTE4(v150)
                 && ((_DWORD)v150 == 1 || v56[1] == BYTE5(v150)))
          {
            break;
          }
          ++v56;
        }
        while (v56 < (unsigned __int8 *)v22);
      }
    }
LABEL_117:
    if (v129 < 0)
      break;
    if (!(_DWORD)v119)
    {
      if ((v110 & 0x200) != 0)
      {
        if (v23 > *((_QWORD *)&v143 + 1) + v112)
        {
          if (v128)
          {
            if (v23 >= (unint64_t)v56)
              goto LABEL_290;
LABEL_169:
            if (HIDWORD(v149))
            {
              if (v23 > *((_QWORD *)&v143 + 1)
                && _pcre2_was_newline_8((_BYTE *)v23, SHIDWORD(v149), *((unint64_t *)&v143 + 1), (int *)&v150, v123))
              {
                goto LABEL_290;
              }
LABEL_177:
              ++v23;
              while (v23 < (unint64_t)v56)
              {
                v65 = *(_BYTE *)v23++;
                if ((v65 & 0xC0) != 0x80)
                {
                  --v23;
                  goto LABEL_169;
                }
              }
            }
            else if (v23 < *((_QWORD *)&v143 + 1) + (unint64_t)v150
                   || *(unsigned __int8 *)(v23 - v150) != BYTE4(v150)
                   || (_DWORD)v150 != 1 && *(unsigned __int8 *)(v23 - v150 + 1) != BYTE5(v150))
            {
              goto LABEL_177;
            }
          }
          else
          {
            while (v23 < (unint64_t)v56)
            {
              if (HIDWORD(v149))
              {
                if (v23 > *((_QWORD *)&v143 + 1)
                  && _pcre2_was_newline_8((_BYTE *)v23, SHIDWORD(v149), *((unint64_t *)&v143 + 1), (int *)&v150, v123))
                {
                  break;
                }
              }
              else if (v23 >= *((_QWORD *)&v143 + 1) + (unint64_t)v150
                     && *(unsigned __int8 *)(v23 - v150) == BYTE4(v150)
                     && ((_DWORD)v150 == 1 || *(unsigned __int8 *)(v23 - v150 + 1) == BYTE5(v150)))
              {
                break;
              }
              ++v23;
            }
          }
LABEL_290:
          if (*(_BYTE *)(v23 - 1) == 13)
          {
            v87 = (HIDWORD(v149) - 1) > 1 || v23 >= (unint64_t)v56;
            if (!v87 && *(_BYTE *)v23 == 10)
              ++v23;
          }
        }
LABEL_230:
        LOWORD(v26) = v121;
        v68 = (unsigned __int16)v142;
        v22 = (char *)*((_QWORD *)&v144 + 1);
        v58 = (char *)v23;
      }
      else
      {
        if (!v122)
          goto LABEL_230;
        do
        {
          v58 = (char *)v23;
          if (v23 >= (unint64_t)v56)
            break;
          ++v23;
        }
        while (((v122->u8[(unint64_t)*v58 >> 3] >> (*v58 & 7)) & 1) == 0);
        v68 = (unsigned __int16)v142;
        v22 = (char *)*((_QWORD *)&v144 + 1);
        if ((_WORD)v142)
          v69 = 0;
        else
          v69 = (unint64_t)v58 >= *((_QWORD *)&v144 + 1);
        if (v69)
          goto LABEL_300;
        LOWORD(v26) = v121;
      }
      v59 = v120;
      goto LABEL_232;
    }
    if (__c == v117)
    {
      v57 = (char *)memchr((void *)v23, __c, (size_t)&v56[-v23]);
      if (v57)
        v58 = v57;
      else
        v58 = (char *)v56;
      v59 = v120;
    }
    else
    {
      v66 = v114;
      if (v114 && v23 <= (unint64_t)v114)
      {
        if (v114 == v56)
          v67 = 0;
        else
          v67 = v114;
      }
      else
      {
        v70 = (unsigned __int8 *)memchr((void *)v23, __c, (size_t)&v56[-v23]);
        v67 = v70;
        if (v70)
          v66 = v70;
        else
          v66 = v56;
      }
      v71 = v113;
      v114 = v66;
      if (v113 && v23 <= (unint64_t)v113)
      {
        if (v113 == v56)
          v72 = 0;
        else
          v72 = v113;
      }
      else
      {
        v72 = (unsigned __int8 *)memchr((void *)v23, v117, (size_t)&v56[-v23]);
        if (v72)
          v71 = v72;
        else
          v71 = v56;
      }
      v59 = v120;
      v113 = v71;
      if (v67)
      {
        if (v67 < v72 || v72 == 0)
          v58 = (char *)v67;
        else
          v58 = (char *)v72;
      }
      else if (v72)
      {
        v58 = (char *)v72;
      }
      else
      {
        v58 = (char *)v56;
      }
    }
    v68 = (unsigned __int16)v142;
    v22 = (char *)*((_QWORD *)&v144 + 1);
    if (!(_WORD)v142 && (unint64_t)v58 >= *((_QWORD *)&v144 + 1))
    {
LABEL_300:
      valid = 0;
      v23 = (unint64_t)v58;
      goto LABEL_302;
    }
    LOWORD(v26) = v121;
LABEL_232:
    if (v68)
      goto LABEL_233;
    v81 = v22 - v58;
    if (v22 - v58 < v12[15].u16[3])
      goto LABEL_299;
    if ((v59 & 0x80) == 0
      || (v82 = &v58[v108], &v58[v108] <= v109)
      || (v129 >= 0 ? (v83 = v81 >= 0x4C4B40) : (v83 = 1), v83 ? (v84 = 0) : (v84 = 1), v81 >> 3 >= 0x271 && !v84))
    {
LABEL_233:
      v23 = (unint64_t)v58;
      goto LABEL_234;
    }
    v85 = (char *)memchr(&v58[v108], v105, v22 - v82);
    if (v105 == v106)
      goto LABEL_269;
    if (!v85)
    {
      v85 = (char *)memchr(v82, v106, v22 - v82);
LABEL_269:
      if (!v85)
        v85 = v22;
    }
    if (v85 >= v22)
      goto LABEL_299;
    v23 = (unint64_t)v58;
    v109 = v85;
    LOWORD(v26) = v121;
LABEL_234:
    if (v23 > v126)
      goto LABEL_298;
    *(_QWORD *)&v154 = v23 - (_QWORD)v8;
    DWORD2(v157) |= 1u;
    *((_QWORD *)&v145 + 1) = v23;
    *(_QWORD *)&v146 = v23;
    DWORD2(v138) = 0;
    *((_QWORD *)&v141 + 1) = 0;
    HIDWORD(v148) = v125;
    DWORD1(v149) = 0;
    v74 = sub_1A3AA0628((unsigned __int8 *)v23, (unsigned __int8 *)v143, (_QWORD *)(v11 + 80), *(unsigned __int16 *)(v11 + 74), v12[16].u16[0], v124, (uint64_t)&v134);
    v75 = HIDWORD(v138) != 0;
    v76 = v131;
    v77 = v131 == 0;
    v78 = !v75 || !v77;
    if (v75 && v77)
      v76 = *((_QWORD *)&v145 + 1);
    v79 = v133;
    if (!v78)
      v79 = v23;
    v131 = v76;
    v133 = v79;
    valid = 0;
    switch(v74)
    {
      case 0xFFFFFC1B:
        goto LABEL_303;
      case 0xFFFFFC1C:
      case 0xFFFFFC1F:
        goto LABEL_243;
      case 0xFFFFFC1D:
        v58 = (char *)v148;
        if ((unint64_t)v148 > v23)
          goto LABEL_250;
        goto LABEL_243;
      case 0xFFFFFC1E:
        DWORD2(v149) = DWORD1(v149);
        v58 = (char *)v23;
        goto LABEL_250;
      default:
        valid = v74;
        if ((_DWORD)v74)
          goto LABEL_303;
LABEL_243:
        DWORD2(v149) = 0;
        v58 = (char *)(v23 + 1);
        if (!v128 || v58 >= v22)
          goto LABEL_250;
        v80 = &v22[~v23];
        break;
    }
    while ((*v58 & 0xC0) == 0x80)
    {
      ++v58;
      if (!--v80)
      {
        v58 = v22;
        break;
      }
    }
LABEL_250:
    if ((v26 & 0x100) != 0)
    {
      if (HIDWORD(v149))
      {
        if (v23 < *((_QWORD *)&v144 + 1)
          && _pcre2_is_newline_8((unsigned __int8 *)v23, SHIDWORD(v149), *((uint64_t *)&v144 + 1), (int *)&v150, v123))
        {
          goto LABEL_298;
        }
      }
      else if (v23 <= *((_QWORD *)&v144 + 1) - (unint64_t)v150
             && *(unsigned __int8 *)v23 == BYTE4(v150)
             && ((_DWORD)v150 == 1 || *(unsigned __int8 *)(v23 + 1) == BYTE5(v150)))
      {
LABEL_298:
        valid = 0;
        goto LABEL_303;
      }
    }
    if (v129 < 0 || v58 > v22)
    {
LABEL_299:
      valid = 0;
      v23 = (unint64_t)v58;
      goto LABEL_303;
    }
    if (v58 > v127
      && *(v58 - 1) == 13
      && v58 < v22
      && *v58 == 10
      && (v12[12].i8[1] & 8) == 0
      && ((HIDWORD(v149) - 1) < 2 || (_DWORD)v150 == 2))
    {
      ++v58;
    }
    *((_QWORD *)&v146 + 1) = 0;
    v23 = (unint64_t)v58;
  }
  if (!v111)
    goto LABEL_230;
  if (v23 >= (unint64_t)v56)
    goto LABEL_301;
  v61 = *(unsigned __int8 *)v23;
  if ((_DWORD)v119)
  {
    v63 = (_DWORD)v61 != __c && (_DWORD)v61 != v117;
    if (!v63 || v122 == 0)
    {
      if (v63)
        goto LABEL_301;
      goto LABEL_230;
    }
  }
  else if (!v122)
  {
    goto LABEL_301;
  }
  if (((v122->u8[v61 >> 3] >> (v61 & 7)) & 1) != 0)
    goto LABEL_230;
LABEL_301:
  valid = 0;
LABEL_302:
  v22 = (char *)v56;
LABEL_303:
  if (v128 && v22 != (char *)v116 && (!(_DWORD)valid || (_DWORD)valid == -2))
  {
LABEL_307:
    v88 = v22;
    while (1)
    {
      v23 = (unint64_t)(v88 + 1);
      if ((unint64_t)(v88 + 1) >= v116)
        break;
      ++v88;
      if ((*(_BYTE *)v23 & 0xC0) != 0x80)
      {
        *(_QWORD *)&v144 = v23;
        v89 = _pcre2_valid_utf_8((unsigned __int8 *)v23, (unint64_t)&v8[v16 - v23], v118);
        if (!v89)
        {
          *((_QWORD *)&v144 + 1) = &v8[v16];
          v22 = &v8[v16];
          LODWORD(valid) = 1;
LABEL_315:
          LOWORD(v26) = v121;
          v53 = v104;
          goto LABEL_113;
        }
        v88 = v22;
        if (v89 < 0)
        {
          v90 = *v118;
          v22 = (char *)(v23 + *v118);
          *((_QWORD *)&v144 + 1) = v22;
          if (v90 <= 0)
            goto LABEL_307;
          LODWORD(valid) = 3;
          goto LABEL_315;
        }
      }
    }
    valid = 0;
  }
  if ((_QWORD)v136 != (_QWORD)v137)
    (*((void (**)(_QWORD, _QWORD))&v134 + 1))(v136, v135);
  *(_QWORD *)(v11 + 24) = v12;
  *(_QWORD *)(v11 + 40) = *((_QWORD *)&v146 + 1);
  *(_BYTE *)(v11 + 72) = 0;
  if ((_DWORD)valid == 1)
  {
    if ((SDWORD2(v141) & 0x80000000) == 0)
      v91 = DWORD2(v141);
    else
      v91 = DWORD2(v141) + 1;
    v92 = v91 >> 1;
    if (SDWORD2(v141) < 2 * *(unsigned __int16 *)(v11 + 74))
      valid = (v92 + 1);
    else
      valid = 0;
    *(_DWORD *)(v11 + 76) = valid;
    *(_QWORD *)(v11 + 64) = v23 - (_QWORD)v8;
    v93 = v145;
    if ((unint64_t)v146 > (unint64_t)v145)
      v93 = v146;
    *(_QWORD *)(v11 + 48) = *((_QWORD *)&v145 + 1) - (_QWORD)v8;
    *(_QWORD *)(v11 + 56) = v93 - (_QWORD)v8;
    if ((v14 & 0x4000) == 0)
    {
      *(_QWORD *)(v11 + 32) = v8;
      return valid;
    }
    v94 = (void *)(*(uint64_t (**)(uint64_t, _QWORD))v11)(v107 + v16, *(_QWORD *)(v11 + 16));
    *(_QWORD *)(v11 + 32) = v94;
    if (v94)
    {
      memcpy(v94, v8, v107 + v16);
      *(_BYTE *)(v11 + 73) |= 1u;
      return *(unsigned int *)(v11 + 76);
    }
    return 4294967248;
  }
  *(_QWORD *)(v11 + 40) = v147;
  if ((_DWORD)valid == -2 || !(_DWORD)valid)
  {
    if (v133)
    {
      *(_QWORD *)(v11 + 32) = v8;
      *(_QWORD *)(v11 + 80) = v133 - (_QWORD)v8;
      *(_QWORD *)(v11 + 88) = v22 - v8;
      *(_QWORD *)(v11 + 56) = v22 - v8;
      *(_QWORD *)(v11 + 64) = v133 - (_QWORD)v8;
      *(_QWORD *)(v11 + 48) = v131 - (_QWORD)v8;
      valid = 4294967294;
    }
    else
    {
      valid = 0xFFFFFFFFLL;
    }
  }
  *(_DWORD *)(v11 + 76) = valid;
  return valid;
}

uint64_t sub_1A3AA0628(unsigned __int8 *a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4, int a5, unsigned __int8 *a6, uint64_t a7)
{
  unsigned __int8 *v7;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned __int8 **v17;
  unint64_t *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  int v43;
  unsigned __int8 *v44;
  unsigned __int8 **v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  int v73;
  BOOL v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned int v77;
  unint64_t v78;
  int v79;
  unsigned int v81;
  unsigned int v82;
  int v83;
  int v84;
  unsigned __int8 *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unsigned int i2;
  unsigned __int8 *v94;
  unsigned int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  _BOOL4 v100;
  unsigned __int8 *v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  BOOL v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned __int8 *v115;
  int64_t v116;
  unsigned __int8 *v117;
  int v118;
  unsigned int v119;
  int v120;
  int v121;
  int v122;
  unsigned __int8 *v123;
  unsigned int v124;
  unint64_t v125;
  unsigned __int8 **v126;
  unsigned __int8 *v127;
  unsigned int v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  unsigned __int8 *v143;
  unint64_t v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  unint64_t v147;
  unsigned __int8 *v148;
  int v149;
  int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned __int8 *v154;
  unint64_t v155;
  unsigned __int8 *v156;
  unsigned int v157;
  unsigned __int8 *v158;
  uint64_t v159;
  int v160;
  int is_newline_8;
  uint64_t v162;
  int v163;
  int v164;
  unsigned __int8 *v165;
  uint64_t v166;
  int v167;
  int v168;
  unsigned __int8 *v169;
  unint64_t v170;
  int v171;
  unint64_t v172;
  unsigned int v173;
  unsigned __int8 *v174;
  uint64_t v175;
  unsigned __int8 *v176;
  unsigned int v177;
  int v178;
  unint64_t v179;
  unsigned int *v180;
  int v181;
  _DWORD *v182;
  uint64_t v183;
  unsigned int v184;
  unint64_t v185;
  unsigned __int8 *v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  unsigned __int8 *v194;
  unint64_t v195;
  unsigned int v196;
  unsigned __int8 *v197;
  unsigned int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  unsigned int v203;
  uint64_t v204;
  unint64_t v205;
  unsigned __int8 *v206;
  unsigned int n;
  unsigned int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  uint64_t v214;
  unint64_t v215;
  unsigned __int8 *v216;
  unsigned __int8 *v217;
  unsigned __int8 *v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unsigned __int8 *v226;
  unsigned __int8 *v227;
  char v228;
  unsigned int v229;
  unsigned int v230;
  uint64_t v231;
  unsigned __int8 *v232;
  unsigned __int8 *v233;
  unsigned int v234;
  unint64_t *v235;
  int v236;
  int v237;
  int v238;
  unsigned int v239;
  unint64_t v240;
  unsigned __int8 *v241;
  int v242;
  unsigned int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  unint64_t v249;
  unsigned __int8 *v250;
  int v251;
  unsigned int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  uint64_t v259;
  unint64_t v260;
  unsigned __int8 *v261;
  unsigned __int8 *v262;
  unsigned __int8 *v263;
  unsigned __int8 *v264;
  BOOL v265;
  unsigned int v266;
  unint64_t v267;
  unsigned int v268;
  int v269;
  uint64_t v270;
  int v271;
  int v272;
  int v273;
  uint64_t v274;
  unint64_t v275;
  unsigned __int8 *v276;
  unsigned __int8 *v277;
  int v278;
  unsigned __int8 *v280;
  unsigned __int8 *v281;
  BOOL v282;
  unsigned int v283;
  unint64_t v284;
  unsigned int v285;
  int v286;
  uint64_t v287;
  int v288;
  int v289;
  int v290;
  unint64_t v292;
  unint64_t v293;
  int v294;
  unsigned int v296;
  unsigned __int8 *v297;
  unsigned __int8 *v298;
  unsigned int v299;
  int v300;
  unsigned __int8 *v301;
  unsigned __int8 *v302;
  uint64_t i3;
  unsigned __int8 *v304;
  unsigned int v305;
  unint64_t v306;
  uint64_t v307;
  unsigned __int8 *v308;
  unsigned __int8 **v309;
  unsigned __int8 *v310;
  uint64_t v311;
  int v312;
  unsigned int v313;
  unsigned int v314;
  int v315;
  unsigned __int16 *v316;
  unsigned __int8 *v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  uint64_t v321;
  unint64_t v322;
  unsigned __int8 *v323;
  unsigned __int8 *v324;
  unsigned int v325;
  unint64_t v326;
  unsigned int v327;
  int v328;
  uint64_t v329;
  int v330;
  int v331;
  int v332;
  int v333;
  unsigned __int8 *v334;
  int v335;
  size_t v336;
  unint64_t v337;
  size_t v338;
  unint64_t v339;
  unsigned __int8 *v340;
  unint64_t v341;
  int v342;
  int v343;
  size_t v344;
  int v345;
  unsigned int v346;
  unsigned __int8 *v347;
  unsigned __int8 *v348;
  unsigned int v349;
  size_t v350;
  unint64_t v351;
  unint64_t v352;
  int v353;
  size_t v354;
  int v355;
  unsigned int v356;
  unsigned __int8 *v357;
  unint64_t v358;
  uint64_t v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned __int8 **v363;
  unsigned __int8 *v364;
  unsigned __int8 *v365;
  unint64_t v366;
  unsigned __int8 *v367;
  uint64_t v368;
  unsigned __int8 *v369;
  unsigned __int8 **v370;
  unsigned __int8 *v371;
  _BYTE *v372;
  _BYTE *v373;
  _BYTE *v374;
  _BYTE *v375;
  unsigned int v376;
  int v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  unsigned int v381;
  unsigned int v382;
  unsigned int v383;
  unint64_t v384;
  unsigned __int8 *v385;
  unsigned int v386;
  unsigned __int8 *v387;
  unsigned int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  unsigned __int8 *v394;
  int v395;
  unsigned int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  unsigned int v402;
  int v403;
  unint64_t v405;
  unsigned __int8 *v406;
  unsigned int i;
  unsigned int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  unint64_t v414;
  int v415;
  unsigned int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  unint64_t v422;
  int v423;
  unsigned int v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  unint64_t v430;
  unsigned __int8 *v431;
  unsigned int j;
  unsigned int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  BOOL v440;
  unint64_t v441;
  int v442;
  unsigned int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  unint64_t v449;
  int v450;
  unsigned int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  _BOOL4 v458;
  unint64_t v459;
  unsigned __int8 *v460;
  unsigned int *v461;
  unsigned int k;
  unsigned int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  unsigned int *v469;
  unsigned int v470;
  unint64_t v471;
  unsigned int m;
  unsigned int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  _BOOL4 v481;
  unint64_t v482;
  int v483;
  unsigned int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  unint64_t v490;
  _DWORD *v491;
  unsigned int v492;
  int v493;
  unsigned int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  unsigned __int8 *v501;
  unsigned int v502;
  unint64_t v503;
  int v504;
  int v505;
  unsigned __int8 *v506;
  uint64_t v507;
  int v508;
  int v509;
  unsigned int v510;
  unsigned int v511;
  unsigned int v512;
  int v513;
  unsigned __int8 *v514;
  int v515;
  int v516;
  int v517;
  unsigned int v518;
  unsigned __int8 *v519;
  unsigned int v520;
  uint64_t v521;
  int v522;
  int v523;
  int v524;
  int v525;
  _BOOL4 v526;
  unsigned int v527;
  unsigned int v528;
  uint64_t v529;
  unsigned int v530;
  unsigned __int8 *v531;
  int v532;
  unsigned __int8 *v533;
  unint64_t v534;
  int v535;
  unsigned int v536;
  int v538;
  int v539;
  unint64_t v540;
  int v541;
  unsigned __int8 v542;
  int v543;
  unsigned __int8 *v544;
  int v545;
  unsigned __int8 *v546;
  int v547;
  unsigned __int8 *v548;
  int v549;
  unsigned __int8 *v550;
  int v551;
  unsigned __int8 *v552;
  int v553;
  unsigned __int8 *v554;
  int v555;
  unsigned __int8 *v556;
  int v557;
  int v558;
  unsigned __int8 *v559;
  int v560;
  unsigned __int8 *v561;
  int v562;
  unsigned __int8 *v563;
  int v564;
  unsigned __int8 *v565;
  int v566;
  int v567;
  unsigned __int8 v568;
  int v569;
  uint64_t v570;
  unsigned int v571;
  unsigned __int8 *v572;
  unsigned __int8 *v573;
  unint64_t v574;
  unsigned __int8 *v575;
  unsigned int v576;
  unsigned int v577;
  uint64_t v578;
  unsigned int v579;
  unsigned __int8 *v580;
  uint64_t v581;
  unint64_t v582;
  unsigned __int8 *v583;
  uint64_t v584;
  unint64_t v585;
  unsigned __int8 *v586;
  uint64_t v587;
  unint64_t v588;
  unsigned __int8 *v589;
  uint64_t v590;
  unint64_t v591;
  unsigned __int8 *v592;
  uint64_t v593;
  unint64_t v594;
  unsigned __int8 *v595;
  unsigned int v596;
  uint64_t v597;
  int v598;
  uint64_t v599;
  unsigned int v600;
  unint64_t v601;
  unsigned int v602;
  unint64_t v603;
  unsigned int v604;
  unsigned __int8 *v605;
  unsigned int v606;
  uint64_t v607;
  unint64_t v608;
  unsigned __int8 *v609;
  int v610;
  uint64_t v611;
  unint64_t v612;
  unsigned __int8 *v613;
  int v614;
  uint64_t v615;
  unint64_t v616;
  unsigned __int8 *v617;
  int v618;
  uint64_t v619;
  unint64_t v620;
  unsigned __int8 *v621;
  int v622;
  uint64_t v623;
  unint64_t v624;
  unsigned __int8 *v625;
  unint64_t v626;
  unsigned __int8 *v627;
  unsigned int ii;
  unsigned __int8 *v629;
  uint64_t v630;
  unint64_t v631;
  unsigned __int8 *v632;
  unint64_t v633;
  unsigned int jj;
  unsigned __int8 *v635;
  uint64_t v636;
  unint64_t v637;
  unsigned __int8 *v638;
  unint64_t v639;
  unsigned int v640;
  int v641;
  uint64_t v642;
  unsigned int v643;
  unsigned __int8 *v644;
  unint64_t v645;
  unsigned int kk;
  unsigned __int8 *v647;
  unsigned int v648;
  unsigned int v649;
  unsigned int v650;
  unsigned __int8 *v651;
  int v652;
  unsigned int v653;
  unint64_t v654;
  int v655;
  uint64_t v656;
  int v657;
  int v658;
  int v659;
  int v660;
  unint64_t v661;
  unsigned __int8 *v662;
  unsigned int v663;
  int v664;
  int v665;
  int v666;
  int v667;
  unsigned int v668;
  uint64_t v669;
  unsigned int v670;
  unint64_t v671;
  int v672;
  int v673;
  int v674;
  uint64_t v675;
  int v676;
  int v677;
  int v678;
  int v679;
  uint64_t v680;
  unsigned __int8 *v681;
  unsigned int v682;
  unsigned int v683;
  unint64_t v684;
  uint64_t v685;
  unsigned int v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unsigned int v690;
  unint64_t v691;
  unsigned int v692;
  int v693;
  uint64_t v694;
  unsigned int v695;
  int v697;
  int v698;
  int v699;
  unsigned int v700;
  unint64_t v701;
  unsigned int v702;
  uint64_t v703;
  int v704;
  int v705;
  int v706;
  int v707;
  unsigned int v708;
  unint64_t v709;
  unsigned int v710;
  uint64_t v711;
  int v712;
  int v713;
  int v714;
  int v715;
  unsigned int v716;
  unint64_t v717;
  unsigned int v718;
  uint64_t v719;
  int v720;
  int v721;
  int v722;
  int v723;
  unsigned int v724;
  unint64_t v725;
  unsigned int v726;
  uint64_t v727;
  int v728;
  int v729;
  int v730;
  int v731;
  int v732;
  unint64_t v733;
  unsigned int v734;
  unint64_t v735;
  unsigned int v736;
  uint64_t v737;
  int v738;
  int v739;
  int v740;
  int v741;
  unsigned int v742;
  unint64_t v743;
  unsigned int v744;
  uint64_t v745;
  int v746;
  int v747;
  int v748;
  int v749;
  _BOOL4 v751;
  unint64_t v752;
  unsigned int v753;
  uint64_t v754;
  int v755;
  int v756;
  int v757;
  int v758;
  unsigned int *v759;
  unsigned int v760;
  unsigned int v761;
  unint64_t v762;
  unsigned int v763;
  uint64_t v764;
  int v765;
  int v766;
  int v767;
  int v768;
  _BOOL4 v771;
  unsigned int v772;
  unint64_t v773;
  unsigned int v774;
  uint64_t v775;
  int v776;
  int v777;
  int v778;
  int v779;
  unsigned int v780;
  unint64_t v781;
  unsigned int v782;
  uint64_t v783;
  int v784;
  int v785;
  int v786;
  int v787;
  unsigned int v788;
  unsigned __int8 *v789;
  unsigned int v790;
  unsigned __int8 *v791;
  unint64_t v792;
  unsigned int v793;
  unsigned __int8 *v794;
  int v795;
  int v796;
  int v797;
  int v798;
  int v799;
  unint64_t v800;
  unsigned __int8 *v801;
  unsigned int mm;
  int v803;
  int v804;
  int v805;
  int v806;
  int v807;
  int v808;
  unint64_t v809;
  unsigned int v810;
  int v811;
  int v812;
  int v813;
  int v814;
  int v815;
  int v816;
  int v817;
  unint64_t v818;
  unsigned int nn;
  unsigned int v820;
  int v821;
  int v822;
  int v823;
  int v824;
  int v825;
  BOOL v826;
  unint64_t v827;
  unsigned int i1;
  unsigned int v829;
  int v830;
  int v831;
  int v832;
  int v833;
  int v834;
  BOOL v835;
  uint64_t v836;
  unsigned __int8 *v837;
  unsigned __int8 *v838;
  unsigned __int8 *v839;
  int v840;
  int v841;
  int v842;
  int v843;
  unsigned int v844;
  unint64_t v845;
  int v846;
  unsigned int v847;
  int v848;
  uint64_t v849;
  int v850;
  int v851;
  int v852;
  unsigned int v853;
  _BOOL4 v854;
  unsigned int v855;
  int v857;
  unsigned int v858;
  unsigned int v859;
  unsigned int v860;
  int v861;
  int v862;
  int v863;
  int v864;
  int v865;
  int v866;
  int v867;
  int v868;
  int v869;
  int v870;
  int v871;
  int v872;
  int v873;
  int v874;
  int v875;
  int v876;
  int v877;
  int v878;
  int v879;
  int v880;
  int v881;
  int v882;
  int v883;
  int v884;
  int v885;
  int v886;
  int v887;
  int v888;
  int v889;
  int v890;
  int v891;
  int v892;
  int v893;
  int v894;
  int v895;
  int v896;
  int v897;
  int v898;
  int v899;
  int v900;
  int v901;
  int v902;
  int v903;
  int v904;
  int v905;
  int v906;
  unsigned __int8 *v907;
  unsigned int v908;
  int v909;
  _BOOL4 v911;
  BOOL v912;
  int v913;
  int v914;
  int v915;
  unint64_t v916;
  _BOOL4 v917;
  _BOOL4 v918;
  unsigned int *v919;
  unsigned int v920;
  _BOOL4 v922;
  BOOL v923;
  _BOOL4 v924;
  unsigned int v925;
  unint64_t v926;
  unsigned int v927;
  int v928;
  uint64_t v929;
  int v930;
  int v931;
  int v932;
  unsigned int v933;
  unint64_t v934;
  unsigned int v935;
  int v936;
  uint64_t v937;
  int v938;
  int v939;
  int v940;
  unsigned int v941;
  unint64_t v942;
  unsigned int v943;
  int v944;
  uint64_t v945;
  int v946;
  int v947;
  int v948;
  unsigned int v949;
  unint64_t v950;
  unsigned int v951;
  int v952;
  uint64_t v953;
  int v954;
  int v955;
  int v956;
  unsigned int v957;
  unint64_t v958;
  unsigned int v959;
  int v960;
  uint64_t v961;
  int v962;
  int v963;
  int v964;
  unsigned int v965;
  unint64_t v966;
  unsigned int v967;
  int v968;
  uint64_t v969;
  int v970;
  int v971;
  int v972;
  unint64_t v973;
  int v974;
  uint64_t v975;
  unsigned int v976;
  unsigned __int8 *v977;
  unint64_t v978;
  unsigned __int8 *v979;
  unsigned __int8 *v980;
  unsigned int v981;
  unsigned int v982;
  unint64_t v983;
  unsigned int v984;
  int v985;
  uint64_t v986;
  uint64_t v987;
  int v988;
  int v989;
  int v990;
  unsigned __int8 *v991;
  unsigned int v992;
  unsigned int v993;
  unint64_t v994;
  unsigned int v995;
  unint64_t v996;
  unsigned int v997;
  unint64_t v998;
  unsigned int v999;
  unint64_t v1000;
  unsigned int v1001;
  unint64_t v1002;
  unsigned int v1003;
  unint64_t v1004;
  uint64_t v1005;
  int v1006;
  uint64_t v1007;
  unsigned int v1008;
  unsigned int v1009;
  unint64_t v1010;
  int v1011;
  unsigned __int8 *v1012;
  uint64_t v1013;
  unsigned int v1014;
  unint64_t v1015;
  int v1016;
  unsigned int v1017;
  unint64_t v1018;
  int v1019;
  unsigned int v1020;
  unint64_t v1021;
  int v1022;
  unsigned int v1023;
  unint64_t v1024;
  int v1025;
  unsigned int v1026;
  unsigned __int8 *v1027;
  int v1029;
  int v1030;
  int v1031;
  unsigned int v1032;
  int v1033;
  unsigned __int8 *v1034;
  int v1035;
  int v1036;
  int v1037;
  BOOL v1040;
  BOOL v1041;
  int v1042;
  BOOL v1044;
  BOOL v1045;
  unsigned __int8 *v1046;
  unsigned int v1047;
  int v1048;
  unint64_t v1049;
  unsigned __int8 *v1050;
  unsigned int v1051;
  int v1052;
  unsigned __int8 *v1053;
  int v1054;
  int v1055;
  int v1056;
  unsigned int v1057;
  unsigned __int8 *v1058;
  unsigned int v1059;
  unsigned int v1060;
  unsigned int v1061;
  unsigned __int8 *v1062;
  unsigned int v1063;
  unsigned __int8 *v1064;
  unsigned __int8 *v1065;
  uint64_t v1066;
  unsigned __int8 *v1067;
  unsigned __int8 *v1068;
  int v1069;
  int v1070;
  unsigned int v1071;
  unsigned int v1072;
  int v1073;
  unsigned __int8 *v1074;
  unsigned __int8 *v1075;
  unsigned int v1076;
  unsigned int v1077;
  unsigned int v1078;
  unsigned int v1079;
  unsigned __int8 *v1080;
  int v1081;
  unsigned int v1082;
  unsigned int v1083;
  int v1084;
  unsigned int v1085;
  unsigned int v1086;
  int v1087;
  unsigned int v1088;
  unsigned int v1089;
  int v1090;
  unsigned int v1091;
  unsigned int v1092;
  uint64_t v1093;
  int v1094;
  int v1095;
  int v1096;
  int v1097;
  int v1098;
  uint64_t v1099;
  unsigned __int8 *v1100;
  unsigned int v1101;
  unsigned int v1102;
  unsigned __int8 *v1103;
  unint64_t v1104;
  unsigned __int8 *v1105;
  int v1106;
  int v1107;
  unsigned int v1108;
  unsigned int v1109;
  unsigned int v1110;
  unsigned __int8 *v1111;
  unsigned int v1112;
  unsigned int v1113;
  unsigned int v1114;
  unsigned __int8 *v1115;
  unsigned int v1116;
  unsigned int v1117;
  unsigned int v1118;
  unsigned __int8 *v1119;
  unsigned int v1120;
  uint64_t v1121;
  unsigned int v1122;
  unsigned int v1123;
  unsigned __int8 *v1124;
  unsigned int v1125;
  unsigned int v1126;
  unsigned int v1127;
  unsigned __int8 *v1128;
  unsigned int v1129;
  unsigned int v1130;
  unsigned int v1131;
  unsigned __int8 *v1132;
  unsigned int v1133;
  unsigned int v1134;
  unsigned int v1135;
  unsigned __int8 *v1136;
  unsigned int v1137;
  unsigned int v1138;
  unsigned int v1139;
  unsigned __int8 *v1140;
  unsigned int v1141;
  unsigned int v1142;
  unsigned int v1143;
  unsigned __int8 *v1144;
  int v1145;
  unsigned int v1146;
  unsigned int v1147;
  unsigned __int8 *v1148;
  unsigned int v1149;
  unsigned int v1150;
  unsigned int v1151;
  unsigned __int8 *v1152;
  unsigned int v1153;
  unsigned int v1154;
  unsigned int v1155;
  unsigned __int8 *v1156;
  unsigned int v1157;
  unsigned int v1158;
  unsigned int v1159;
  unsigned __int8 *v1160;
  unint64_t v1161;
  unsigned int v1162;
  unsigned int v1163;
  unsigned int v1164;
  unsigned __int8 *v1165;
  uint64_t v1166;
  int v1167;
  int v1168;
  int v1169;
  unsigned int v1170;
  unsigned int v1171;
  unsigned __int8 *v1172;
  unsigned int v1173;
  unsigned int v1174;
  unsigned int v1175;
  unsigned __int8 *v1176;
  unsigned int v1177;
  unsigned int v1178;
  unsigned int v1179;
  unsigned __int8 *v1180;
  unsigned int v1181;
  unsigned int v1182;
  unsigned int v1183;
  unsigned int v1184;
  unsigned __int8 *v1185;
  uint64_t v1186;
  unsigned int v1187;
  unsigned __int8 *v1188;
  unsigned __int8 *v1189;
  uint64_t v1190;
  unsigned __int8 *v1191;
  unsigned __int8 *v1192;
  unsigned int v1193;
  unsigned int v1194;
  unsigned int v1195;
  unsigned int v1196;
  unsigned int v1197;
  unsigned int v1198;
  unsigned int v1199;
  unsigned int v1200;
  unsigned int v1201;
  unsigned int v1202;
  unsigned int v1203;
  unsigned int v1204;
  unsigned int v1205;
  unsigned int v1206;
  unsigned int v1207;
  unsigned int v1208;
  unsigned int v1209;
  unsigned int v1210;
  int v1211;
  unsigned __int8 *v1212;
  int v1213;
  unsigned __int8 *v1214;
  int v1215;
  unsigned __int8 *v1216;
  uint64_t v1217;
  uint64_t v1218;
  int v1219;
  unsigned __int8 *v1220;
  int v1221;
  unsigned __int8 *v1222;
  int v1223;
  unsigned __int8 *v1224;
  int v1225;
  unsigned __int8 *v1226;
  int v1227;
  unsigned __int8 *v1228;
  int v1229;
  unsigned __int8 *v1230;
  int v1231;
  unsigned __int8 *v1232;
  int v1233;
  unsigned __int8 *v1234;
  int v1235;
  unsigned __int8 *v1236;
  int v1237;
  unsigned __int8 *v1238;
  int v1239;
  unsigned __int8 *v1240;
  int v1241;
  unsigned __int8 *v1242;
  int v1243;
  unsigned __int8 *v1244;
  uint64_t v1245;
  uint64_t v1246;
  unsigned __int8 *v1247;
  int v1248;
  int v1249;
  int v1250;
  int v1251;
  int v1252;
  int v1253;
  int v1254;
  int v1255;
  int v1256;
  int v1257;
  int v1258;
  int v1259;
  int v1260;
  int v1261;
  int v1262;
  int v1263;
  int v1264;
  int v1265;
  int v1266;
  int v1267;
  int v1268;
  int v1269;
  int v1270;
  int v1271;
  int v1272;
  int v1273;
  int v1274;
  int v1275;
  int v1276;
  int v1277;
  int v1278;
  int v1279;
  int v1280;
  int v1281;
  int v1282;
  int v1283;
  int v1284;
  int v1285;
  int v1286;
  int v1287;
  int v1288;
  int v1289;
  int v1290;
  int v1291;
  int v1292;
  int v1293;
  int v1294;
  int v1295;
  int v1296;
  int v1297;
  int v1298;
  int v1299;
  int v1300;
  unsigned int v1301;
  int v1302;
  BOOL v1304;
  _BOOL4 v1308;
  unsigned int *v1309;
  unsigned int v1310;
  _BOOL4 v1313;
  int v1314;
  unint64_t v1315;
  _BOOL4 v1316;
  BOOL v1317;
  unsigned __int8 *v1319;
  uint64_t v1320;
  uint64_t v1321;
  unsigned __int8 *v1322;
  unsigned __int8 *v1323;
  int v1324;
  unsigned __int8 *v1325;
  char v1326;
  unsigned __int8 *v1327;
  char v1328;
  unsigned __int8 *v1329;
  char v1330;
  unsigned __int8 *v1331;
  unsigned int v1332;
  unsigned __int8 *v1333;
  unsigned int v1334;
  int v1335;
  int v1336;
  int v1337;
  BOOL v1338;
  unsigned __int8 *v1339;
  unsigned __int8 *v1340;
  char v1341;
  unsigned __int8 *v1342;
  int v1343;
  unsigned __int8 v1344;
  int v1345;
  int v1346;
  int v1347;
  unsigned __int8 v1348;
  unsigned __int8 *v1349;
  unsigned int v1350;
  unsigned int v1351;
  int v1352;
  int v1353;
  int v1354;
  unsigned __int8 v1355;
  int v1356;
  int v1357;
  int v1358;
  unint64_t v1359;
  unint64_t v1360;
  unint64_t v1361;
  uint64_t v1362;
  char *v1363;
  char *v1364;
  uint64_t v1365;
  uint64_t v1366;
  unsigned __int8 *v1367;
  char v1368;
  unsigned int v1369;
  unsigned int v1370;
  unsigned __int8 *v1371;
  char v1372;
  uint64_t v1373;
  unsigned __int8 *v1374;
  unsigned int v1375;
  unsigned int v1376;
  char v1377;
  unsigned __int8 *v1378;
  BOOL v1379;
  uint64_t v1380;
  unsigned __int8 **v1381;
  unsigned __int8 *v1382;
  unsigned __int8 *v1383;
  unsigned __int8 *v1384;
  int v1385;
  unsigned int v1386;
  unsigned int v1387;
  int v1388;
  unsigned __int8 *v1389;
  unsigned int v1390;
  int v1391;
  uint64_t v1392;
  int v1393;
  int v1394;
  int v1395;
  unsigned int v1396;
  unsigned __int8 *v1397;
  unsigned int v1398;
  uint64_t v1400;
  int v1401;
  int v1402;
  unsigned int v1403;
  unint64_t v1404;
  unint64_t v1405;
  unsigned int v1406;
  unsigned int v1407;
  int v1408;
  unsigned int v1409;
  unsigned __int8 **v1411;
  uint64_t v1412;
  int *v1413;
  unsigned __int8 *v1414;
  size_t __n;
  int v1417;
  int *v1418;
  _DWORD *v1419;
  int v1420;
  unint64_t *v1421;
  unint64_t *v1422;
  int v1423;
  unsigned __int16 *v1424;
  uint64_t v1425;
  unsigned __int8 *v1426;
  unsigned __int8 *v1427;
  unsigned __int8 *v1428[2];

  v7 = a6;
  v1411 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v1428[0] = 0;
  v15 = *(_DWORD *)(a7 + 240);
  v16 = v15 & 0x80000;
  v1420 = (v15 >> 19) & 1;
  __n = (size_t)(a6 - 80);
  v17 = *(unsigned __int8 ***)(a7 + 32);
  *((_DWORD *)v17 + 12) = 0;
  v17[13] = (unsigned __int8 *)0xFFFFFFFFLL;
  v17[10] = a1;
  v17[11] = a1;
  v17[12] = 0;
  v1421 = (unint64_t *)(a7 + 184);
  v18 = (unint64_t *)(a7 + 168);
  v1424 = (unsigned __int16 *)(a7 + 128);
  *((_OWORD *)v17 + 7) = xmmword_1A3ACEA30;
  v1418 = (int *)(a7 + 84);
  v1419 = (_DWORD *)(a7 + 76);
  v1412 = -(uint64_t)a6;
  v1413 = (int *)(a7 + 256);
  v1409 = v15;
  v1417 = v15 & 0xA0000;
  v1425 = a7;
  v1423 = v15 & 0x80000;
  v1422 = (unint64_t *)(a7 + 168);
LABEL_2:
  *((_DWORD *)v17 + 13) = v13;
  *v17 = a2;
  v17[4] = v7;
  if (v13)
  {
    v17[14] = (unsigned __int8 *)v17 - *(_QWORD *)(a7 + 32);
    if ((v13 & 0xFFFF0000) == 0x40000)
      *((_DWORD *)v17 + 26) = (unsigned __int16)v13;
  }
  v19 = *(_DWORD *)(a7 + 72);
  *(_DWORD *)(a7 + 72) = v19 + 1;
  if (v19 < *(_DWORD *)(a7 + 64))
  {
    if (v11 >= *(_DWORD *)(a7 + 68))
      return 4294967243;
    v1414 = v14;
LABEL_8:
    while (2)
    {
      v20 = *v17;
      v21 = **v17;
      *((_BYTE *)v17 + 73) = v21;
      v22 = 4294967252;
      v23 = 0;
      switch(v21)
      {
        case 0u:
        case 0xA3u:
          if (*((_DWORD *)v17 + 26) != -1)
          {
            v45 = v17;
            do
            {
              v46 = v45[14];
              if (v46 == (unsigned __int8 *)-1)
                return 4294967252;
              v47 = &v46[*(_QWORD *)(a7 + 32)];
              v45 = (unsigned __int8 **)&v47[v1412];
            }
            while (*((unsigned __int16 *)v47 + 27) << 16 != 0x40000);
            v1414 = v47;
            v45[12] = v17[12];
            *((_OWORD *)v45 + 5) = *((_OWORD *)v17 + 5);
            *v45 += 3;
            v17 = (unsigned __int8 **)&v47[v1412];
            continue;
          }
          v297 = v17[10];
          v298 = v17[11];
          if (v297 == v298)
          {
            v500 = *(_DWORD *)(a7 + 236);
            if ((v500 & 4) != 0
              || (v500 & 8) != 0 && v297 == (unsigned __int8 *)(*(_QWORD *)(a7 + 152) + *(_QWORD *)(a7 + 112)))
            {
              v23 = 0;
              goto LABEL_2584;
            }
          }
          if ((unint64_t)v297 < *v18 && ((*(_DWORD *)(a7 + 240) | *(_DWORD *)(a7 + 236)) & 0x20000000) != 0)
          {
            v23 = 0;
            v22 = 0;
            if (!v21)
              goto LABEL_2584;
          }
          else
          {
            *(_QWORD *)(a7 + 176) = v297;
            *(_QWORD *)(a7 + 120) = v17[15];
            *(_QWORD *)(a7 + 200) = v17[12];
            if ((unint64_t)v297 > *(_QWORD *)(a7 + 192))
              *(_QWORD *)(a7 + 192) = v297;
            v1400 = *(_QWORD *)(a7 + 152);
            *a3 = &v298[-v1400];
            a3[1] = &v297[-v1400];
            if (a5 + 1 < a4)
              v1401 = a5 + 1;
            else
              v1401 = a4;
            v1402 = 2 * v1401;
            v1403 = 2 * v1401 - 2;
            memcpy(a3 + 2, v17 + 16, 8 * v1403);
            v1404 = (v1402 - 1);
            if ((unint64_t)(v17[15] + 2) <= v1404)
            {
              do
              {
                a3[v1404] = -1;
                v1404 = v1403;
                v110 = (unint64_t)(v17[15] + 2) > v1403;
                v22 = 1;
                --v1403;
              }
              while (!v110);
            }
            else
            {
              return 1;
            }
          }
          return v22;
        case 1u:
          v133 = v17[10];
          v134 = *(unsigned __int8 **)(a7 + 152);
          goto LABEL_212;
        case 2u:
          v133 = v17[10];
          v134 = (unsigned __int8 *)(*(_QWORD *)(a7 + 152) + *(_QWORD *)(a7 + 112));
LABEL_212:
          if (v133 == v134)
            goto LABEL_2526;
          goto LABEL_3357;
        case 3u:
          v17[11] = v17[10];
          goto LABEL_2526;
        case 4u:
        case 5u:
          v48 = v17[10];
          if (v48 == *(unsigned __int8 **)(a7 + 160))
            goto LABEL_602;
          if (!v16)
          {
            v49 = v48 - 1;
            v50 = *(v48 - 1);
            goto LABEL_597;
          }
          v49 = v17[10];
          do
          {
            v51 = *--v49;
            v50 = v51;
          }
          while ((v51 & 0xC0) == 0x80);
          if (v50 < 0xC0)
            goto LABEL_597;
          v52 = v49[1] & 0x3F;
          if ((v50 & 0x20) == 0)
          {
            v50 = v49[1] & 0x3F | ((v50 & 0x1F) << 6);
            goto LABEL_597;
          }
          if ((v50 & 0x10) != 0)
          {
            if ((v50 & 8) != 0)
            {
              v861 = v49[2] & 0x3F;
              v862 = v49[3] & 0x3F;
              v863 = v49[4] & 0x3F;
              if ((v50 & 4) == 0)
              {
                v50 = ((v50 & 3) << 24) | (v52 << 18) | (v861 << 12) | (v862 << 6) | v863;
                goto LABEL_597;
              }
              v541 = ((v50 & 1) << 30) | (v52 << 24) | (v861 << 18) | (v862 << 12) | (v863 << 6);
              v542 = v49[5];
            }
            else
            {
              v541 = ((v50 & 7) << 18) | (v52 << 12) | ((v49[2] & 0x3F) << 6);
              v542 = v49[3];
            }
          }
          else
          {
            v541 = ((v50 & 0xF) << 12) | (v52 << 6);
            v542 = v49[2];
          }
          v50 = v541 & 0xFFFFFFC0 | v542 & 0x3F;
LABEL_597:
          if ((unint64_t)v49 < *v1421)
            *v1421 = (unint64_t)v49;
          if ((*(_BYTE *)(a7 + 242) & 2) != 0)
          {
            v300 = v50 == 95
                || (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                            * _pcre2_ucd_stage2_8[v50 & 0x7F | (_pcre2_ucd_stage1_8[v50 >> 7] << 7)]
                                                            + 1]] & 0xFFFFFFFD) == 1;
          }
          else if (v50 > 0xFF)
          {
LABEL_602:
            v300 = 0;
          }
          else
          {
            v300 = (*(unsigned __int8 *)(*(_QWORD *)(a7 + 104) + v50) >> 4) & 1;
          }
          v372 = (_BYTE *)*v18;
          if ((unint64_t)v48 >= *v18)
          {
            v378 = *v1424;
            if (!*v1424)
              goto LABEL_774;
            if ((unint64_t)v48 > *v1421 || (v379 = *v1418) != 0)
            {
              *v1419 = 1;
              if (v378 > 1)
                return 4294967294;
LABEL_774:
              v379 = 0;
            }
LABEL_775:
            *v17 = v20 + 1;
            if (*v20 != 5)
            {
              v23 = 0;
              if (v379 == v300)
                continue;
              goto LABEL_2584;
            }
            goto LABEL_776;
          }
          v373 = v48 + 1;
          if (v16)
          {
            v374 = v48 + 1;
            if (v373 < v372)
            {
              v375 = &v372[~(unint64_t)v48];
              v374 = v48 + 1;
              do
              {
                if ((*v374 & 0xC0) != 0x80)
                  goto LABEL_760;
                ++v374;
                --v375;
              }
              while (v375);
              v374 = (_BYTE *)*v18;
            }
LABEL_760:
            v376 = *v48;
            if (v376 >= 0xC0)
            {
              v377 = *v373 & 0x3F;
              if ((v376 & 0x20) != 0)
              {
                if ((v376 & 0x10) != 0)
                {
                  if ((v376 & 8) != 0)
                  {
                    v903 = v48[2] & 0x3F;
                    v904 = v48[3] & 0x3F;
                    v905 = v48[4] & 0x3F;
                    if ((v376 & 4) == 0)
                    {
                      v376 = ((v376 & 3) << 24) | (v377 << 18) | (v903 << 12) | (v904 << 6) | v905;
                      goto LABEL_769;
                    }
                    v567 = ((v376 & 1) << 30) | (v377 << 24) | (v903 << 18) | (v904 << 12) | (v905 << 6);
                    v568 = v48[5];
                  }
                  else
                  {
                    v567 = ((v376 & 7) << 18) | (v377 << 12) | ((v48[2] & 0x3F) << 6);
                    v568 = v48[3];
                  }
                }
                else
                {
                  v567 = ((v376 & 0xF) << 12) | (v377 << 6);
                  v568 = v48[2];
                }
                v376 = v567 & 0xFFFFFFC0 | v568 & 0x3F;
                goto LABEL_769;
              }
              v376 = v377 & 0xFFFFF83F | ((v376 & 0x1F) << 6);
            }
          }
          else
          {
            v376 = *v48;
            v374 = v48 + 1;
          }
LABEL_769:
          if ((unint64_t)v374 > *(_QWORD *)(a7 + 192))
            *(_QWORD *)(a7 + 192) = v374;
          if ((*(_BYTE *)(a7 + 242) & 2) == 0)
          {
            if (v376 <= 0xFF)
            {
              v379 = (*(unsigned __int8 *)(*(_QWORD *)(a7 + 104) + v376) >> 4) & 1;
              goto LABEL_775;
            }
            goto LABEL_774;
          }
          v379 = v376 == 95
              || (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                          * _pcre2_ucd_stage2_8[v376 & 0x7F | (_pcre2_ucd_stage1_8[v376 >> 7] << 7)]
                                                          + 1]] & 0xFFFFFFFD) == 1;
          goto LABEL_775;
        case 6u:
          v135 = v17[10];
          if ((unint64_t)v135 >= *v18)
            goto LABEL_1954;
          v17[10] = v135 + 1;
          v136 = *v135;
          if (v16 && v136 >= 0xC0)
          {
            if ((v136 & 0x20) != 0)
            {
              v545 = v135[1] & 0x3F;
              if ((v136 & 0x10) != 0)
              {
                if ((v136 & 8) != 0)
                {
                  v867 = v135[2] & 0x3F;
                  v868 = v135[3] & 0x3F;
                  v869 = v135[4] & 0x3F;
                  if ((v136 & 4) != 0)
                  {
                    v136 = ((v136 & 1) << 30) | (v545 << 24) | (v867 << 18) | (v868 << 12) | (v869 << 6) | v135[5] & 0x3F;
                    v546 = v135 + 6;
                  }
                  else
                  {
                    v136 = ((v136 & 3) << 24) | (v545 << 18) | (v867 << 12) | (v868 << 6) | v869;
                    v546 = v135 + 5;
                  }
                }
                else
                {
                  v136 = ((v136 & 7) << 18) | (v545 << 12) | ((v135[2] & 0x3F) << 6) | v135[3] & 0x3F;
                  v546 = v135 + 4;
                }
              }
              else
              {
                v136 = ((v136 & 0xF) << 12) | (v545 << 6) | v135[2] & 0x3F;
                v546 = v135 + 3;
              }
              v17[10] = v546;
            }
            else
            {
              v17[10] = v135 + 2;
              v136 = v135[1] & 0x3F | ((v136 & 0x1F) << 6);
            }
            if (v136 > 0xFF)
              goto LABEL_2526;
          }
          if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v136) & 8) == 0)
            goto LABEL_2526;
          goto LABEL_1958;
        case 7u:
          v135 = v17[10];
          if ((unint64_t)v135 >= *v18)
            goto LABEL_1954;
          v17[10] = v135 + 1;
          v137 = *v135;
          if (!v16 || v137 < 0xC0)
            goto LABEL_2427;
          if ((v137 & 0x20) != 0)
          {
            v547 = v135[1] & 0x3F;
            if ((v137 & 0x10) != 0)
            {
              if ((v137 & 8) != 0)
              {
                v870 = v135[2] & 0x3F;
                v871 = v135[3] & 0x3F;
                v872 = v135[4] & 0x3F;
                if ((v137 & 4) != 0)
                {
                  v137 = ((v137 & 1) << 30) | (v547 << 24) | (v870 << 18) | (v871 << 12) | (v872 << 6) | v135[5] & 0x3F;
                  v548 = v135 + 6;
                }
                else
                {
                  v137 = ((v137 & 3) << 24) | (v547 << 18) | (v870 << 12) | (v871 << 6) | v872;
                  v548 = v135 + 5;
                }
              }
              else
              {
                v137 = ((v137 & 7) << 18) | (v547 << 12) | ((v135[2] & 0x3F) << 6) | v135[3] & 0x3F;
                v548 = v135 + 4;
              }
            }
            else
            {
              v137 = ((v137 & 0xF) << 12) | (v547 << 6) | v135[2] & 0x3F;
              v548 = v135 + 3;
            }
            v17[10] = v548;
          }
          else
          {
            v17[10] = v135 + 2;
            v137 = v135[1] & 0x3F | ((v137 & 0x1F) << 6);
          }
          if (v137 <= 0xFF)
          {
LABEL_2427:
            if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v137) & 8) != 0)
              goto LABEL_2526;
          }
          goto LABEL_1958;
        case 8u:
          v135 = v17[10];
          if ((unint64_t)v135 >= *v18)
            goto LABEL_1954;
          v17[10] = v135 + 1;
          v138 = *v135;
          if (v16 && v138 >= 0xC0)
          {
            if ((v138 & 0x20) != 0)
            {
              v549 = v135[1] & 0x3F;
              if ((v138 & 0x10) != 0)
              {
                if ((v138 & 8) != 0)
                {
                  v873 = v135[2] & 0x3F;
                  v874 = v135[3] & 0x3F;
                  v875 = v135[4] & 0x3F;
                  if ((v138 & 4) != 0)
                  {
                    v138 = ((v138 & 1) << 30) | (v549 << 24) | (v873 << 18) | (v874 << 12) | (v875 << 6) | v135[5] & 0x3F;
                    v550 = v135 + 6;
                  }
                  else
                  {
                    v138 = ((v138 & 3) << 24) | (v549 << 18) | (v873 << 12) | (v874 << 6) | v875;
                    v550 = v135 + 5;
                  }
                }
                else
                {
                  v138 = ((v138 & 7) << 18) | (v549 << 12) | ((v135[2] & 0x3F) << 6) | v135[3] & 0x3F;
                  v550 = v135 + 4;
                }
              }
              else
              {
                v138 = ((v138 & 0xF) << 12) | (v549 << 6) | v135[2] & 0x3F;
                v550 = v135 + 3;
              }
              v17[10] = v550;
            }
            else
            {
              v17[10] = v135 + 2;
              v138 = v135[1] & 0x3F | ((v138 & 0x1F) << 6);
            }
            if (v138 > 0xFF)
              goto LABEL_2526;
          }
          if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v138) & 1) == 0)
            goto LABEL_2526;
          goto LABEL_1958;
        case 9u:
          v135 = v17[10];
          if ((unint64_t)v135 >= *v18)
            goto LABEL_1954;
          v17[10] = v135 + 1;
          v139 = *v135;
          if (!v16 || v139 < 0xC0)
            goto LABEL_2437;
          if ((v139 & 0x20) != 0)
          {
            v551 = v135[1] & 0x3F;
            if ((v139 & 0x10) != 0)
            {
              if ((v139 & 8) != 0)
              {
                v876 = v135[2] & 0x3F;
                v877 = v135[3] & 0x3F;
                v878 = v135[4] & 0x3F;
                if ((v139 & 4) != 0)
                {
                  v139 = ((v139 & 1) << 30) | (v551 << 24) | (v876 << 18) | (v877 << 12) | (v878 << 6) | v135[5] & 0x3F;
                  v552 = v135 + 6;
                }
                else
                {
                  v139 = ((v139 & 3) << 24) | (v551 << 18) | (v876 << 12) | (v877 << 6) | v878;
                  v552 = v135 + 5;
                }
              }
              else
              {
                v139 = ((v139 & 7) << 18) | (v551 << 12) | ((v135[2] & 0x3F) << 6) | v135[3] & 0x3F;
                v552 = v135 + 4;
              }
            }
            else
            {
              v139 = ((v139 & 0xF) << 12) | (v551 << 6) | v135[2] & 0x3F;
              v552 = v135 + 3;
            }
            v17[10] = v552;
          }
          else
          {
            v17[10] = v135 + 2;
            v139 = v135[1] & 0x3F | ((v139 & 0x1F) << 6);
          }
          if (v139 <= 0xFF)
          {
LABEL_2437:
            if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v139) & 1) != 0)
              goto LABEL_2526;
          }
          goto LABEL_1958;
        case 0xAu:
          v135 = v17[10];
          if ((unint64_t)v135 >= *v18)
            goto LABEL_1954;
          v17[10] = v135 + 1;
          v140 = *v135;
          if (v16 && v140 >= 0xC0)
          {
            if ((v140 & 0x20) != 0)
            {
              v553 = v135[1] & 0x3F;
              if ((v140 & 0x10) != 0)
              {
                if ((v140 & 8) != 0)
                {
                  v879 = v135[2] & 0x3F;
                  v880 = v135[3] & 0x3F;
                  v881 = v135[4] & 0x3F;
                  if ((v140 & 4) != 0)
                  {
                    v140 = ((v140 & 1) << 30) | (v553 << 24) | (v879 << 18) | (v880 << 12) | (v881 << 6) | v135[5] & 0x3F;
                    v554 = v135 + 6;
                  }
                  else
                  {
                    v140 = ((v140 & 3) << 24) | (v553 << 18) | (v879 << 12) | (v880 << 6) | v881;
                    v554 = v135 + 5;
                  }
                }
                else
                {
                  v140 = ((v140 & 7) << 18) | (v553 << 12) | ((v135[2] & 0x3F) << 6) | v135[3] & 0x3F;
                  v554 = v135 + 4;
                }
              }
              else
              {
                v140 = ((v140 & 0xF) << 12) | (v553 << 6) | v135[2] & 0x3F;
                v554 = v135 + 3;
              }
              v17[10] = v554;
            }
            else
            {
              v17[10] = v135 + 2;
              v140 = v135[1] & 0x3F | ((v140 & 0x1F) << 6);
            }
            if (v140 > 0xFF)
              goto LABEL_2526;
          }
          if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v140) & 0x10) == 0)
            goto LABEL_2526;
          goto LABEL_1958;
        case 0xBu:
          v135 = v17[10];
          if ((unint64_t)v135 >= *v18)
            goto LABEL_1954;
          v17[10] = v135 + 1;
          v141 = *v135;
          if (!v16 || v141 < 0xC0)
            goto LABEL_2447;
          if ((v141 & 0x20) != 0)
          {
            v555 = v135[1] & 0x3F;
            if ((v141 & 0x10) != 0)
            {
              if ((v141 & 8) != 0)
              {
                v882 = v135[2] & 0x3F;
                v883 = v135[3] & 0x3F;
                v884 = v135[4] & 0x3F;
                if ((v141 & 4) != 0)
                {
                  v141 = ((v141 & 1) << 30) | (v555 << 24) | (v882 << 18) | (v883 << 12) | (v884 << 6) | v135[5] & 0x3F;
                  v556 = v135 + 6;
                }
                else
                {
                  v141 = ((v141 & 3) << 24) | (v555 << 18) | (v882 << 12) | (v883 << 6) | v884;
                  v556 = v135 + 5;
                }
              }
              else
              {
                v141 = ((v141 & 7) << 18) | (v555 << 12) | ((v135[2] & 0x3F) << 6) | v135[3] & 0x3F;
                v556 = v135 + 4;
              }
            }
            else
            {
              v141 = ((v141 & 0xF) << 12) | (v555 << 6) | v135[2] & 0x3F;
              v556 = v135 + 3;
            }
            v17[10] = v556;
          }
          else
          {
            v17[10] = v135 + 2;
            v141 = v135[1] & 0x3F | ((v141 & 0x1F) << 6);
          }
          if (v141 <= 0xFF)
          {
LABEL_2447:
            if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v141) & 0x10) != 0)
              goto LABEL_2526;
          }
          goto LABEL_1958;
        case 0xCu:
          v142 = *(_DWORD *)(a7 + 252);
          v143 = v17[10];
          v144 = *(_QWORD *)(a7 + 168);
          if (v142)
          {
            if ((unint64_t)v143 < v144)
            {
              if (_pcre2_is_newline_8(v143, v142, v144, v1413, v1420))
              {
                v23 = 0;
LABEL_724:
                a7 = v1425;
                v16 = v1423;
                v18 = v1422;
                goto LABEL_2584;
              }
              v18 = v1422;
              v144 = *v1422;
              a7 = v1425;
              v16 = v1423;
            }
          }
          else
          {
            v359 = *v1413;
            if ((unint64_t)v143 <= v144 - v359
              && *v143 == *(unsigned __int8 *)(a7 + 260)
              && ((_DWORD)v359 == 1 || v143[1] == *(unsigned __int8 *)(a7 + 261)))
            {
              goto LABEL_1958;
            }
          }
          v571 = *v1424;
          if (*v1424)
          {
            v572 = v17[10];
            if (v572 == (unsigned __int8 *)(v144 - 1)
              && !*(_DWORD *)(a7 + 252)
              && *v1413 == 2
              && *v572 == *(unsigned __int8 *)(a7 + 260))
            {
              *v1419 = 1;
              if (v571 > 1)
                return 4294967294;
            }
          }
LABEL_1232:
          v135 = v17[10];
          if ((unint64_t)v135 >= v144)
            goto LABEL_1954;
          v573 = v135 + 1;
          v17[10] = v135 + 1;
          if (v16 && (unint64_t)v573 < v144)
          {
            v574 = v144 - (_QWORD)v573;
            v575 = v135 + 2;
            do
            {
              if ((*(v575 - 1) & 0xC0) != 0x80)
                break;
              v17[10] = v575++;
              --v574;
            }
            while (v574);
          }
LABEL_1238:
          ++*v17;
          continue;
        case 0xDu:
          v144 = *v18;
          goto LABEL_1232;
        case 0xEu:
          v135 = v17[10];
          if ((unint64_t)v135 >= *v18)
            goto LABEL_1954;
          v145 = v135 + 1;
          goto LABEL_252;
        case 0xFu:
        case 0x10u:
          v53 = v17[10];
          if ((unint64_t)v53 >= *v18)
            goto LABEL_179;
          v17[10] = v53 + 1;
          v54 = *v53;
          if (v16 && v54 >= 0xC0)
          {
            if ((v54 & 0x20) != 0)
            {
              v505 = v53[1] & 0x3F;
              if ((v54 & 0x10) != 0)
              {
                if ((v54 & 8) != 0)
                {
                  v841 = v53[2] & 0x3F;
                  v842 = v53[3] & 0x3F;
                  v843 = v53[4] & 0x3F;
                  if ((v54 & 4) != 0)
                  {
                    v54 = ((v54 & 1) << 30) | (v505 << 24) | (v841 << 18) | (v842 << 12) | (v843 << 6) | v53[5] & 0x3F;
                    v506 = v53 + 6;
                  }
                  else
                  {
                    v54 = ((v54 & 3) << 24) | (v505 << 18) | (v841 << 12) | (v842 << 6) | v843;
                    v506 = v53 + 5;
                  }
                }
                else
                {
                  v54 = ((v54 & 7) << 18) | (v505 << 12) | ((v53[2] & 0x3F) << 6) | v53[3] & 0x3F;
                  v506 = v53 + 4;
                }
              }
              else
              {
                v54 = ((v54 & 0xF) << 12) | (v505 << 6) | v53[2] & 0x3F;
                v506 = v53 + 3;
              }
              v17[10] = v506;
            }
            else
            {
              v17[10] = v53 + 2;
              v54 = v53[1] & 0x3F | ((v54 & 0x1F) << 6);
            }
          }
          v906 = _pcre2_ucd_stage2_8[v54 & 0x7F | (_pcre2_ucd_stage1_8[v54 >> 7] << 7)];
          v907 = &_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v54 & 0x7F | (_pcre2_ucd_stage1_8[v54 >> 7] << 7)]];
          switch(v20[1])
          {
            case 0u:
              goto LABEL_2106;
            case 1u:
              v908 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v54 & 0x7F | (_pcre2_ucd_stage1_8[v54 >> 7] << 7)]
                                        + 1];
              v110 = v908 > 9;
              v909 = (1 << v908) & 0x320;
              if (!v110 && v909 != 0)
                goto LABEL_2106;
              if (v21 == 15)
                goto LABEL_2583;
              goto LABEL_1958;
            case 2u:
              v911 = v21 == 15;
              v912 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * v906 + 1]] == v20[2];
              goto LABEL_2074;
            case 3u:
              v911 = v21 == 15;
              v913 = v20[2];
              v914 = _pcre2_ucd_records_8[12 * v906 + 1];
              goto LABEL_2073;
            case 4u:
              v911 = v21 == 15;
              v913 = v20[2];
              v914 = *v907;
LABEL_2073:
              v912 = v913 == v914;
LABEL_2074:
              v915 = !v912;
              if (((v911 ^ v915) & 1) == 0)
                goto LABEL_2583;
              goto LABEL_1958;
            case 5u:
              v916 = v20[2];
              if ((_DWORD)v916 == *v907)
                goto LABEL_2106;
              if ((((v21 == 15) ^ (*(_DWORD *)((char *)&_pcre2_ucd_script_sets_8[*(_WORD *)&_pcre2_ucd_records_8[12 * v906 + 8] & 0x3FF]
                                              + ((v916 >> 3) & 0x1C)) >> v916)) & 1) != 0)
                goto LABEL_2583;
              goto LABEL_1958;
            case 6u:
              if ((v21 == 15) != ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                            * _pcre2_ucd_stage2_8[v54 & 0x7F | (_pcre2_ucd_stage1_8[v54 >> 7] << 7)]
                                                                            + 1]] & 0xFFFFFFFD) == 1))
                goto LABEL_2583;
              goto LABEL_1958;
            case 7u:
            case 8u:
              if ((int)v54 >= 0x2000)
              {
                if (v54 - 0x2000 >= 0xB
                  && (v54 - 8232 > 0x37 || ((1 << (v54 - 40)) & 0x80000000000083) == 0)
                  && v54 != 12288)
                {
                  goto LABEL_2551;
                }
LABEL_2106:
                if (v21 == 15)
                  goto LABEL_1958;
                goto LABEL_2583;
              }
              if ((int)v54 > 132)
              {
                if ((int)v54 > 5759)
                {
                  if (v54 == 5760 || v54 == 6158)
                    goto LABEL_2106;
                }
                else if (v54 == 133 || v54 == 160)
                {
                  goto LABEL_2106;
                }
              }
              else if (v54 <= 0x20 && ((1 << v54) & 0x100003E00) != 0)
              {
                goto LABEL_2106;
              }
LABEL_2551:
              v922 = v21 == 15;
              v923 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * v906 + 1]] == 6;
LABEL_2097:
              v924 = !v923;
LABEL_2101:
              if (((v922 ^ v924) & 1) != 0)
                goto LABEL_2405;
              goto LABEL_2583;
            case 9u:
              if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                            * _pcre2_ucd_stage2_8[v54 & 0x7F | (_pcre2_ucd_stage1_8[v54 >> 7] << 7)]
                                                            + 1]] | 2) == 3)
                goto LABEL_2094;
              v917 = v21 == 15;
              v918 = v54 == 95;
              goto LABEL_2404;
            case 0xAu:
              v919 = &_pcre2_ucd_caseless_sets_8[v20[2]];
              while (1)
              {
                v920 = *v919;
                if (v54 < *v919)
                  break;
                ++v919;
                if (v54 == v920)
                {
LABEL_2094:
                  if (v21 == 15)
                    goto LABEL_2405;
LABEL_2583:
                  *v17 = v20 + 3;
                  goto LABEL_8;
                }
              }
              if (v21 == 15)
                goto LABEL_2583;
              goto LABEL_2405;
            case 0xBu:
              if (v54 - 36 <= 0x3C && ((1 << (v54 - 36)) & 0x1000000010000001) != 0)
                goto LABEL_2094;
              v917 = v21 == 15;
              v918 = v54 >> 13 > 6 || (v54 - 160) >> 5 < 0x6BB;
LABEL_2404:
              if (((v917 ^ v918) & 1) == 0)
                goto LABEL_2405;
              goto LABEL_2583;
            case 0xCu:
              v922 = v21 == 15;
              v923 = v20[2] == *(unsigned __int16 *)&_pcre2_ucd_records_8[12 * v906 + 8] >> 11;
              goto LABEL_2097;
            case 0xDu:
              v922 = v21 == 15;
              v924 = ((*(_DWORD *)((char *)&_pcre2_ucd_BOOLprop_sets_8[*(_WORD *)&_pcre2_ucd_records_8[12 * v906 + 10] & 0xFFF]
                                 + ((v20[2] >> 3) & 0x1CLL)) >> v20[2]) & 1) == 0;
              goto LABEL_2101;
            default:
              return 4294967252;
          }
        case 0x11u:
          v146 = v17[10];
          v147 = *v18;
          if ((unint64_t)v146 >= *v18)
          {
            v119 = *v1424;
            if (*v1424)
            {
              if ((unint64_t)v146 <= *v1421)
                goto LABEL_1956;
              goto LABEL_1957;
            }
            goto LABEL_1958;
          }
          v148 = v146 + 1;
          v17[10] = v146 + 1;
          v149 = *v146;
          if (v16 && v149 >= 0xC0)
          {
            if ((v149 & 0x20) != 0)
            {
              v557 = *v148 & 0x3F;
              if ((v149 & 0x10) != 0)
              {
                if ((v149 & 8) != 0)
                {
                  v885 = v146[2] & 0x3F;
                  v886 = v146[3] & 0x3F;
                  v887 = v146[4] & 0x3F;
                  if ((v149 & 4) != 0)
                  {
                    v149 = ((v149 & 1) << 30) | (v557 << 24) | (v885 << 18) | (v886 << 12) | (v887 << 6) | v146[5] & 0x3F;
                    v148 = v146 + 6;
                  }
                  else
                  {
                    v149 = ((v149 & 3) << 24) | (v557 << 18) | (v885 << 12) | (v886 << 6) | v887;
                    v148 = v146 + 5;
                  }
                }
                else
                {
                  v149 = ((v149 & 7) << 18) | (v557 << 12) | ((v146[2] & 0x3F) << 6) | v146[3] & 0x3F;
                  v148 = v146 + 4;
                }
              }
              else
              {
                v149 = ((v149 & 0xF) << 12) | (v557 << 6) | v146[2] & 0x3F;
                v148 = v146 + 3;
              }
              v17[10] = v148;
            }
            else
            {
              v148 = v146 + 2;
              v17[10] = v146 + 2;
              v149 = v146[1] & 0x3F | ((v149 & 0x1F) << 6);
            }
          }
          v23 = 0;
          if (v149 <= 12)
          {
            if ((v149 - 11) >= 2)
            {
              if (v149 != 10)
                goto LABEL_2584;
              goto LABEL_2526;
            }
          }
          else if ((v149 - 8232) >= 2 && v149 != 133)
          {
            if (v149 != 13)
              goto LABEL_2584;
            if ((unint64_t)v148 < v147)
            {
              if (*v148 == 10)
              {
                v145 = v148 + 1;
LABEL_252:
                v17[10] = v145;
              }
              goto LABEL_2526;
            }
            v314 = *v1424;
            if (*v1424)
            {
              if ((unint64_t)v148 > *v1421)
                goto LABEL_635;
LABEL_634:
              if (*v1418)
                goto LABEL_635;
            }
LABEL_2526:
            *v17 = v20 + 1;
            continue;
          }
          if (*(_WORD *)(a7 + 130) == 2)
            goto LABEL_1958;
          goto LABEL_2526;
        case 0x12u:
          v135 = v17[10];
          if ((unint64_t)v135 >= *v18)
            goto LABEL_1954;
          v17[10] = v135 + 1;
          v150 = *v135;
          if (v16 && v150 >= 0xC0)
          {
            if ((v150 & 0x20) != 0)
            {
              v558 = v135[1] & 0x3F;
              if ((v150 & 0x10) != 0)
              {
                if ((v150 & 8) != 0)
                {
                  v888 = v135[2] & 0x3F;
                  v889 = v135[3] & 0x3F;
                  v890 = v135[4] & 0x3F;
                  if ((v150 & 4) != 0)
                  {
                    v150 = ((v150 & 1) << 30) | (v558 << 24) | (v888 << 18) | (v889 << 12) | (v890 << 6) | v135[5] & 0x3F;
                    v559 = v135 + 6;
                  }
                  else
                  {
                    v150 = ((v150 & 3) << 24) | (v558 << 18) | (v888 << 12) | (v889 << 6) | v890;
                    v559 = v135 + 5;
                  }
                }
                else
                {
                  v150 = ((v150 & 7) << 18) | (v558 << 12) | ((v135[2] & 0x3F) << 6) | v135[3] & 0x3F;
                  v559 = v135 + 4;
                }
              }
              else
              {
                v150 = ((v150 & 0xF) << 12) | (v558 << 6) | v135[2] & 0x3F;
                v559 = v135 + 3;
              }
              v17[10] = v559;
            }
            else
            {
              v17[10] = v135 + 2;
              v150 = v135[1] & 0x3F | ((v150 & 0x1F) << 6);
            }
          }
          v23 = 0;
          if (v150 < 0x2000)
          {
            if (v150 <= 159)
            {
              if (v150 == 9 || v150 == 32)
                goto LABEL_2584;
            }
            else if (v150 == 160 || v150 == 5760 || v150 == 6158)
            {
              goto LABEL_2584;
            }
          }
          else if (v150 > 8238)
          {
            v1040 = v150 == 8239 || v150 == 8287;
            if (v1040 || v150 == 12288)
              goto LABEL_2584;
          }
          else if ((v150 - 0x2000) < 0xB)
          {
            goto LABEL_2584;
          }
          goto LABEL_2526;
        case 0x13u:
          v135 = v17[10];
          if ((unint64_t)v135 >= *v18)
            goto LABEL_1954;
          v17[10] = v135 + 1;
          v151 = *v135;
          if (v16 && v151 >= 0xC0)
          {
            if ((v151 & 0x20) != 0)
            {
              v560 = v135[1] & 0x3F;
              if ((v151 & 0x10) != 0)
              {
                if ((v151 & 8) != 0)
                {
                  v891 = v135[2] & 0x3F;
                  v892 = v135[3] & 0x3F;
                  v893 = v135[4] & 0x3F;
                  if ((v151 & 4) != 0)
                  {
                    v151 = ((v151 & 1) << 30) | (v560 << 24) | (v891 << 18) | (v892 << 12) | (v893 << 6) | v135[5] & 0x3F;
                    v561 = v135 + 6;
                  }
                  else
                  {
                    v151 = ((v151 & 3) << 24) | (v560 << 18) | (v891 << 12) | (v892 << 6) | v893;
                    v561 = v135 + 5;
                  }
                }
                else
                {
                  v151 = ((v151 & 7) << 18) | (v560 << 12) | ((v135[2] & 0x3F) << 6) | v135[3] & 0x3F;
                  v561 = v135 + 4;
                }
              }
              else
              {
                v151 = ((v151 & 0xF) << 12) | (v560 << 6) | v135[2] & 0x3F;
                v561 = v135 + 3;
              }
              v17[10] = v561;
            }
            else
            {
              v17[10] = v135 + 2;
              v151 = v135[1] & 0x3F | ((v151 & 0x1F) << 6);
            }
          }
          v23 = 0;
          if (v151 < 0x2000)
          {
            if (v151 <= 159)
            {
              if (v151 != 9 && v151 != 32)
                goto LABEL_2584;
              goto LABEL_2526;
            }
            v1041 = v151 == 160 || v151 == 5760;
            v1042 = 6158;
          }
          else
          {
            if (v151 <= 8238)
            {
              if ((v151 - 0x2000) >= 0xB)
                goto LABEL_2584;
              goto LABEL_2526;
            }
            if (v151 == 8239)
              goto LABEL_2526;
            v1041 = v151 == 12288;
            v1042 = 8287;
          }
          if (!v1041 && v151 != v1042)
            goto LABEL_2584;
          goto LABEL_2526;
        case 0x14u:
          v135 = v17[10];
          if ((unint64_t)v135 >= *v18)
            goto LABEL_1954;
          v17[10] = v135 + 1;
          v152 = *v135;
          if (v16 && v152 >= 0xC0)
          {
            if ((v152 & 0x20) != 0)
            {
              v562 = v135[1] & 0x3F;
              if ((v152 & 0x10) != 0)
              {
                if ((v152 & 8) != 0)
                {
                  v894 = v135[2] & 0x3F;
                  v895 = v135[3] & 0x3F;
                  v896 = v135[4] & 0x3F;
                  if ((v152 & 4) != 0)
                  {
                    v152 = ((v152 & 1) << 30) | (v562 << 24) | (v894 << 18) | (v895 << 12) | (v896 << 6) | v135[5] & 0x3F;
                    v563 = v135 + 6;
                  }
                  else
                  {
                    v152 = ((v152 & 3) << 24) | (v562 << 18) | (v894 << 12) | (v895 << 6) | v896;
                    v563 = v135 + 5;
                  }
                }
                else
                {
                  v152 = ((v152 & 7) << 18) | (v562 << 12) | ((v135[2] & 0x3F) << 6) | v135[3] & 0x3F;
                  v563 = v135 + 4;
                }
              }
              else
              {
                v152 = ((v152 & 0xF) << 12) | (v562 << 6) | v135[2] & 0x3F;
                v563 = v135 + 3;
              }
              v17[10] = v563;
            }
            else
            {
              v17[10] = v135 + 2;
              v152 = v135[1] & 0x3F | ((v152 & 0x1F) << 6);
            }
          }
          v23 = 0;
          v1044 = v152 - 10 >= 4 && v152 - 8232 >= 2;
          if (v1044 && v152 != 133)
            goto LABEL_2526;
          goto LABEL_2584;
        case 0x15u:
          v135 = v17[10];
          if ((unint64_t)v135 >= *v18)
            goto LABEL_1954;
          v17[10] = v135 + 1;
          v153 = *v135;
          if (v16 && v153 >= 0xC0)
          {
            if ((v153 & 0x20) != 0)
            {
              v564 = v135[1] & 0x3F;
              if ((v153 & 0x10) != 0)
              {
                if ((v153 & 8) != 0)
                {
                  v897 = v135[2] & 0x3F;
                  v898 = v135[3] & 0x3F;
                  v899 = v135[4] & 0x3F;
                  if ((v153 & 4) != 0)
                  {
                    v153 = ((v153 & 1) << 30) | (v564 << 24) | (v897 << 18) | (v898 << 12) | (v899 << 6) | v135[5] & 0x3F;
                    v565 = v135 + 6;
                  }
                  else
                  {
                    v153 = ((v153 & 3) << 24) | (v564 << 18) | (v897 << 12) | (v898 << 6) | v899;
                    v565 = v135 + 5;
                  }
                }
                else
                {
                  v153 = ((v153 & 7) << 18) | (v564 << 12) | ((v135[2] & 0x3F) << 6) | v135[3] & 0x3F;
                  v565 = v135 + 4;
                }
              }
              else
              {
                v153 = ((v153 & 0xF) << 12) | (v564 << 6) | v135[2] & 0x3F;
                v565 = v135 + 3;
              }
              v17[10] = v565;
            }
            else
            {
              v17[10] = v135 + 2;
              v153 = v135[1] & 0x3F | ((v153 & 0x1F) << 6);
            }
          }
          v1045 = v153 - 10 >= 4 && v153 - 8232 >= 2;
          if (!v1045 || v153 == 133)
            goto LABEL_2526;
          goto LABEL_1958;
        case 0x16u:
          v154 = v17[10];
          v155 = *v18;
          if ((unint64_t)v154 >= v155)
          {
            v313 = *v1424;
            if (!*v1424)
            {
              v23 = 0;
              v18 = v1422;
              goto LABEL_2584;
            }
            v18 = v1422;
            if ((unint64_t)v154 > *v1421 || *v1418)
            {
              *v1419 = 1;
              if (v313 > 1)
                return 4294967294;
            }
            goto LABEL_2405;
          }
          v156 = v154 + 1;
          v17[10] = v154 + 1;
          v157 = *v154;
          if (v16 && v157 >= 0xC0)
          {
            if ((v157 & 0x20) != 0)
            {
              v566 = *v156 & 0x3F;
              if ((v157 & 0x10) != 0)
              {
                if ((v157 & 8) != 0)
                {
                  v900 = v154[2] & 0x3F;
                  v901 = v154[3] & 0x3F;
                  v902 = v154[4] & 0x3F;
                  if ((v157 & 4) != 0)
                  {
                    v157 = ((v157 & 1) << 30) | (v566 << 24) | (v900 << 18) | (v901 << 12) | (v902 << 6) | v154[5] & 0x3F;
                    v156 = v154 + 6;
                  }
                  else
                  {
                    v157 = ((v157 & 3) << 24) | (v566 << 18) | (v900 << 12) | (v901 << 6) | v902;
                    v156 = v154 + 5;
                  }
                }
                else
                {
                  v157 = ((v157 & 7) << 18) | (v566 << 12) | ((v154[2] & 0x3F) << 6) | v154[3] & 0x3F;
                  v156 = v154 + 4;
                }
              }
              else
              {
                v157 = ((v157 & 0xF) << 12) | (v566 << 6) | v154[2] & 0x3F;
                v156 = v154 + 3;
              }
              v17[10] = v156;
            }
            else
            {
              v156 = v154 + 2;
              v17[10] = v154 + 2;
              v157 = v154[1] & 0x3F | ((v157 & 0x1F) << 6);
            }
          }
          v1046 = _pcre2_extuni_8(v157, v156, *(_QWORD *)(a7 + 152), v155, v1420, 0);
          a7 = v1425;
          v17[10] = v1046;
          if ((unint64_t)v1046 >= *(_QWORD *)(v1425 + 168))
          {
            v1047 = *v1424;
            if (*v1424)
            {
              if ((unint64_t)v1046 > *v1421 || *v1418)
              {
                *v1419 = 1;
                if (v1047 > 1)
                  return 4294967294;
              }
            }
          }
          ++*v17;
          goto LABEL_3425;
        case 0x17u:
          goto LABEL_285;
        case 0x18u:
          goto LABEL_293;
        case 0x19u:
          if ((*(_BYTE *)(a7 + 236) & 2) != 0)
            goto LABEL_3357;
          if ((*(_BYTE *)(a7 + 240) & 0x10) == 0)
          {
LABEL_285:
            v158 = v17[10];
            v159 = *v18;
            if ((unint64_t)v158 < *v18)
            {
              v160 = *(_DWORD *)(a7 + 252);
              if (v160)
              {
                is_newline_8 = _pcre2_is_newline_8(v158, v160, v159, v1413, v1420);
                v18 = v1422;
                v16 = v1423;
                a7 = v1425;
                if (!is_newline_8)
                  goto LABEL_1154;
                v158 = v17[10];
                v159 = *v1422;
                v162 = *v1413;
              }
              else
              {
                v162 = *v1413;
                if ((unint64_t)v158 > v159 - v162
                  || *v158 != *(unsigned __int8 *)(a7 + 260)
                  || v162 != 1 && v158[1] != *(unsigned __int8 *)(a7 + 261))
                {
                  goto LABEL_1154;
                }
              }
              if (v158 != (unsigned __int8 *)(v159 - v162))
                goto LABEL_1154;
            }
            v163 = *v1424;
            if (*v1424)
            {
              *v1419 = 1;
              if (v163 != 1)
                return 4294967294;
            }
            goto LABEL_1238;
          }
LABEL_293:
          if ((unint64_t)v17[10] < *v18)
            goto LABEL_3357;
          v164 = *v1424;
          if (*v1424)
          {
            *v1419 = 1;
            if (v164 != 1)
              return 4294967294;
          }
          goto LABEL_2526;
        case 0x1Au:
          v165 = v17[10];
          v166 = *v18;
          if ((unint64_t)v165 < *v18)
          {
            v167 = *(_DWORD *)(a7 + 252);
            if (v167)
            {
              v168 = _pcre2_is_newline_8(v165, v167, v166, v1413, v1420);
              v18 = v1422;
              v16 = v1423;
              a7 = v1425;
              if (!v168)
                goto LABEL_1154;
              v20 = *v17;
            }
            else
            {
              v529 = *v1413;
              if ((unint64_t)v165 > v166 - v529
                || *v165 != *(unsigned __int8 *)(a7 + 260)
                || (_DWORD)v529 != 1 && v165[1] != *(unsigned __int8 *)(a7 + 261))
              {
LABEL_1154:
                v530 = *v1424;
                if (*v1424)
                {
                  v531 = v17[10];
                  if ((unint64_t)(v531 + 1) >= *v18
                    && !*(_DWORD *)(a7 + 252)
                    && *v1413 == 2
                    && *v531 == *(unsigned __int8 *)(a7 + 260))
                  {
                    *v1419 = 1;
                    if (v530 > 1)
                      return 4294967294;
                  }
                }
                goto LABEL_3357;
              }
            }
            goto LABEL_2526;
          }
          if ((*(_BYTE *)(a7 + 236) & 2) != 0)
            goto LABEL_3357;
          v314 = *v1424;
          if (!*v1424)
            goto LABEL_2526;
          if ((unint64_t)v165 > *v1421)
          {
LABEL_635:
            *v1419 = 1;
            if (v314 > 1)
              return 4294967294;
            goto LABEL_2526;
          }
          goto LABEL_634;
        case 0x1Bu:
          if (v17[10] != *(unsigned __int8 **)(a7 + 152) || (*(_BYTE *)(a7 + 236) & 1) != 0)
            goto LABEL_3357;
          goto LABEL_2526;
        case 0x1Cu:
          v169 = v17[10];
          v170 = *(_QWORD *)(a7 + 152);
          if ((*(_BYTE *)(a7 + 236) & 1) != 0 && v169 == (unsigned __int8 *)v170)
            goto LABEL_3357;
          if (v169 == (unsigned __int8 *)v170)
            goto LABEL_2526;
          if (v169 == (unsigned __int8 *)*v18 && (*(_BYTE *)(a7 + 242) & 0x20) == 0)
            goto LABEL_3357;
          v171 = *(_DWORD *)(a7 + 252);
          if (v171)
          {
            if ((unint64_t)v169 <= v170)
              goto LABEL_3357;
            v23 = _pcre2_was_newline_8(v169, v171, v170, v1413, v1420);
            if (!(_DWORD)v23)
              goto LABEL_177;
            v20 = *v17;
            a7 = v1425;
            v16 = v1423;
            v18 = v1422;
          }
          else
          {
            v578 = *v1413;
            if ((unint64_t)v169 < v170 + v578
              || v169[-v578] != *(unsigned __int8 *)(a7 + 260)
              || (_DWORD)v578 != 1 && v169[-v578 + 1] != *(unsigned __int8 *)(a7 + 261))
            {
              goto LABEL_3357;
            }
          }
          goto LABEL_2526;
        case 0x1Du:
          if (v16)
          {
            v172 = 1;
            v17[3] = (unsigned __int8 *)1;
            *v17 = v20 + 1;
            v173 = v20[1];
            if (v173 >= 0xC0)
            {
              if ((v173 & 0x20) != 0)
              {
                if ((v173 & 0x10) != 0)
                {
                  v172 = 4;
                  v836 = 5;
                  if ((v173 & 4) != 0)
                    v836 = 6;
                  if ((v173 & 8) != 0)
                    v172 = v836;
                }
                else
                {
                  v172 = 3;
                }
              }
              else
              {
                v172 = 2;
              }
              v17[3] = (unsigned __int8 *)v172;
            }
            v135 = v17[10];
            if (v172 <= *v18 - (unint64_t)v135)
            {
              v837 = v135 + 1;
              v838 = v20 + 2;
              v839 = (unsigned __int8 *)(v172 - 1);
              do
              {
                *v17 = v838;
                v840 = *(v838 - 1);
                v17[10] = v837;
                if (v840 != *(v837 - 1))
                  goto LABEL_1958;
                v17[3] = v839;
                ++v837;
                ++v838;
                --v839;
              }
              while (v839 != (unsigned __int8 *)-1);
              continue;
            }
            if ((unint64_t)v135 >= *v18)
            {
LABEL_1954:
              v119 = *v1424;
              if (*v1424)
              {
                if ((unint64_t)v135 <= *v1421)
                  goto LABEL_1956;
                goto LABEL_1957;
              }
            }
            goto LABEL_1958;
          }
          v174 = v17[10];
          if ((uint64_t)(*v18 - (_QWORD)v174) <= 0)
          {
LABEL_640:
            v316 = v1424;
LABEL_1136:
            v527 = *v316;
            if (v527 && ((unint64_t)v174 > *v1421 || *v1418))
            {
              *v1419 = 1;
              if (v527 > 1)
                return 4294967294;
            }
            goto LABEL_1958;
          }
          v315 = v20[1];
          v17[10] = v174 + 1;
          if (v315 != *v174)
            goto LABEL_1958;
          goto LABEL_2001;
        case 0x1Eu:
          v174 = v17[10];
          if ((unint64_t)v174 >= *v18)
            goto LABEL_640;
          if (!v16)
          {
            if ((v1409 & 0x20000) != 0)
            {
              v509 = *v174;
              v569 = v20[1];
              if (((char)v20[1] & 0x80000000) == 0)
              {
                v570 = *(_QWORD *)(a7 + 88);
                v508 = *(unsigned __int8 *)(v570 + v20[1]);
                v509 = *(unsigned __int8 *)(v570 + *v174);
                goto LABEL_1999;
              }
              if (v509 != v569)
              {
                v508 = *(_DWORD *)&_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v569 & 0x7F | 0x80] + 4] + v569;
                goto LABEL_1999;
              }
            }
            else
            {
              v507 = *(_QWORD *)(a7 + 88);
              v508 = *(unsigned __int8 *)(v507 + v20[1]);
              v509 = *(unsigned __int8 *)(v507 + *v174);
LABEL_1999:
              if (v508 != v509)
                goto LABEL_1958;
            }
            v17[10] = v174 + 1;
LABEL_2001:
            *v17 = v20 + 2;
            continue;
          }
          v175 = 1;
          v17[3] = (unsigned __int8 *)1;
          v176 = v20 + 1;
          *v17 = v20 + 1;
          v177 = v20[1];
          if (v177 >= 0xC0)
          {
            v178 = v20[2] & 0x3F;
            if ((v177 & 0x20) != 0)
            {
              if ((v177 & 0x10) != 0)
              {
                if ((v177 & 8) != 0)
                {
                  v1029 = v20[3] & 0x3F;
                  v1030 = v20[4] & 0x3F;
                  v1031 = v20[5] & 0x3F;
                  if ((v177 & 4) != 0)
                  {
                    v177 = ((v177 & 1) << 30) | (v178 << 24) | (v1029 << 18) | (v1030 << 12) | (v1031 << 6) | v20[6] & 0x3F;
                    v175 = 6;
                  }
                  else
                  {
                    v177 = ((v177 & 3) << 24) | (v178 << 18) | (v1029 << 12) | (v1030 << 6) | v1031;
                    v175 = 5;
                  }
                }
                else
                {
                  v177 = ((v177 & 7) << 18) | (v178 << 12) | ((v20[3] & 0x3F) << 6) | v20[4] & 0x3F;
                  v175 = 4;
                }
              }
              else
              {
                v177 = ((v177 & 0xF) << 12) | (v178 << 6) | v20[3] & 0x3F;
                v175 = 3;
              }
            }
            else
            {
              v175 = 2;
              v177 = v20[2] & 0x3F | ((v177 & 0x1F) << 6);
            }
            v17[3] = (unsigned __int8 *)v175;
          }
          if (v177 <= 0x7F)
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(a7 + 88) + v177) != *(unsigned __int8 *)(*(_QWORD *)(a7 + 88) + *v174))
              goto LABEL_1958;
            *v17 = v20 + 2;
            v17[10] = v174 + 1;
            continue;
          }
          v17[10] = v174 + 1;
          v1051 = *v174;
          if (v1051 >= 0xC0)
          {
            if ((v1051 & 0x20) != 0)
            {
              v1052 = v174[1] & 0x3F;
              if ((v1051 & 0x10) != 0)
              {
                if ((v1051 & 8) != 0)
                {
                  v1054 = v174[2] & 0x3F;
                  v1055 = v174[3] & 0x3F;
                  v1056 = v174[4] & 0x3F;
                  if ((v1051 & 4) != 0)
                  {
                    v1051 = ((v1051 & 1) << 30) | (v1052 << 24) | (v1054 << 18) | (v1055 << 12) | (v1056 << 6) | v174[5] & 0x3F;
                    v1053 = v174 + 6;
                  }
                  else
                  {
                    v1051 = ((v1051 & 3) << 24) | (v1052 << 18) | (v1054 << 12) | (v1055 << 6) | v1056;
                    v1053 = v174 + 5;
                  }
                }
                else
                {
                  v1051 = ((v1051 & 7) << 18) | (v1052 << 12) | ((v174[2] & 0x3F) << 6) | v174[3] & 0x3F;
                  v1053 = v174 + 4;
                }
              }
              else
              {
                v1051 = ((v1051 & 0xF) << 12) | (v1052 << 6) | v174[2] & 0x3F;
                v1053 = v174 + 3;
              }
              v17[10] = v1053;
            }
            else
            {
              v17[10] = v174 + 2;
              v1051 = v174[1] & 0x3F | ((v1051 & 0x1F) << 6);
            }
          }
          *v17 = &v176[v175];
          if (v1051 == v177)
            continue;
          v23 = 0;
          if (v1051 == *(_DWORD *)&_pcre2_ucd_records_8[12
                                                       * _pcre2_ucd_stage2_8[v177 & 0x7F | (_pcre2_ucd_stage1_8[v177 >> 7] << 7)]
                                                       + 4]
                      + v177)
            continue;
LABEL_2584:
          while (2)
          {
            v1058 = v17[10];
            if ((unint64_t)v1058 > *(_QWORD *)(a7 + 192))
              *(_QWORD *)(a7 + 192) = v1058;
            if (*((_DWORD *)v17 + 12))
            {
              v17 = (unsigned __int8 **)((unsigned __int8 *)v17 - v17[4]);
              *(_DWORD *)(*(_QWORD *)(a7 + 264) + 104) |= 2u;
              v1059 = *((unsigned __int8 *)v17 + 72);
              v22 = 4294967252;
              if (v1059 <= 0x63)
              {
                switch(*((_BYTE *)v17 + 72))
                {
                  case 1:
                    if ((_DWORD)v23)
                      continue;
                    v20 = v17[1];
                    *v17 = v20;
                    goto LABEL_3352;
                  case 2:
                    if ((_DWORD)v23 == -993)
                    {
                      v1065 = *v17;
                      v1066 = __rev16(*(unsigned __int16 *)(*v17 + 1));
                      v1188 = &(*v17)[v1066];
                      if (*(_QWORD *)(a7 + 216) >= (unint64_t)v1188)
                        continue;
                      if (*v1065 != 120)
                      {
                        v23 = 4294966303;
                        if (*v1188 != 120)
                          continue;
                      }
                    }
                    else
                    {
                      if ((_DWORD)v23)
                        continue;
                      v1065 = *v17;
                      v1066 = __rev16(*(unsigned __int16 *)(*v17 + 1));
                    }
                    v23 = 0;
                    v20 = &v1065[v1066];
                    *v17 = &v1065[v1066];
                    if (v1065[v1066] == 120)
                    {
                      v13 = *((_DWORD *)v17 + 14);
LABEL_3519:
                      a2 = &v20[_pcre2_OP_lengths_8[*v20]];
                      v1377 = 2;
                      goto LABEL_3460;
                    }
                    continue;
                  case 3:
                    if ((_DWORD)v23 == -993 || !(_DWORD)v23)
                    {
                      v23 = 0;
                      v1185 = *v17;
                      v1186 = __rev16(*(unsigned __int16 *)(*v17 + 1));
                      v20 = &(*v17)[v1186];
                      *v17 = v20;
                      if (v1185[v1186] == 120)
                      {
                        v13 = *((_DWORD *)v17 + 14);
                        v1366 = 0x78u;
LABEL_3485:
                        a2 = &v20[_pcre2_OP_lengths_8[v1366]];
                        v1377 = 3;
                        goto LABEL_3460;
                      }
                      continue;
                    }
                    if ((_DWORD)v23 != -999)
                      continue;
                    memcpy(v17 + 16, v1411 + 16, 8 * (_QWORD)v1411[15]);
                    v17[15] = v1411[15];
                    v17[12] = v1411[12];
                    v1342 = *v17;
                    do
                    {
                      v1342 += __rev16(*(unsigned __int16 *)(v1342 + 1));
                      *v17 = v1342;
                    }
                    while (*v1342 == 120);
                    v115 = v1342 + 3;
LABEL_3423:
                    *v17 = v115;
                    goto LABEL_3424;
                  case 4:
                    if ((int)v23 <= -994)
                    {
                      if ((_DWORD)v23 == -999)
                        goto LABEL_2405;
                      if ((v23 + 997) < 3)
                      {
                        v20 = *v17;
                        do
                        {
                          v20 += __rev16(*(unsigned __int16 *)(v20 + 1));
                          *v17 = v20;
                        }
                        while (*v20 == 120);
                        goto LABEL_2583;
                      }
                      continue;
                    }
                    if ((_DWORD)v23 == 1)
                      goto LABEL_2405;
                    if ((_DWORD)v23 != -993 && (_DWORD)v23)
                      continue;
                    v20 = &(*v17)[__rev16(*(unsigned __int16 *)(*v17 + 1))];
                    *v17 = v20;
                    if (*v20 != 120)
                      goto LABEL_2583;
                    v13 = *((_DWORD *)v17 + 14);
                    v1392 = 0x78u;
LABEL_3508:
                    v7 = a6;
                    a2 = &v20[_pcre2_OP_lengths_8[v1392]];
                    v1377 = 4;
LABEL_3461:
                    *((_BYTE *)v17 + 72) = v1377;
                    v14 = &v7[(_QWORD)v17];
                    if (&v7[(_QWORD)v17] >= (unsigned __int8 *)*(_QWORD *)(a7 + 40))
                    {
                      v1359 = *(_QWORD *)(a7 + 24);
                      v1360 = 2 * v1359;
                      v1361 = *(_QWORD *)(a7 + 56);
                      if (v1361 < (2 * v1359) >> 10)
                      {
                        v1360 = (v1361 << 10) / (unint64_t)v7 * (_QWORD)v7;
                        if (v1359 >= v1360)
                          return 4294967233;
                      }
                      v1362 = a7;
                      v1363 = (char *)(*(uint64_t (**)(unint64_t, _QWORD))a7)(v1360, *(_QWORD *)(a7 + 16));
                      if (!v1363)
                        return 4294967248;
                      v1364 = v1363;
                      memcpy(v1363, *(const void **)(v1362 + 32), *(_QWORD *)(v1362 + 24));
                      v1365 = *(_QWORD *)(v1362 + 32);
                      if (v1365 != *(_QWORD *)(v1362 + 48))
                      {
                        (*(void (**)(_QWORD, _QWORD))(v1362 + 8))(*(_QWORD *)(v1362 + 32), *(_QWORD *)(v1362 + 16));
                        v1362 = v1425;
                      }
                      *(_QWORD *)(v1362 + 32) = v1364;
                      *(_QWORD *)(v1362 + 40) = &v1364[v1360];
                      v17 = (unsigned __int8 **)((char *)v17 + (_QWORD)v1364 - v1365);
                      v7 = a6;
                      *(_QWORD *)(v1362 + 24) = v1360;
                      v14 = &a6[(_QWORD)v17];
                    }
                    memcpy(v14 + 80, v17 + 10, __n);
                    v11 = *((_DWORD *)v17 + 12) + 1;
                    *((_DWORD *)v14 + 12) = v11;
                    v17 = (unsigned __int8 **)v14;
                    a7 = v1425;
                    v16 = v1423;
                    v18 = v1422;
                    goto LABEL_2;
                  case 5:
                    if ((int)v23 > -994)
                    {
                      if ((_DWORD)v23 == -993 || !(_DWORD)v23)
                      {
                        v1319 = v17[1];
                        v1320 = __rev16(*(unsigned __int16 *)(v1319 + 1));
                        v117 = &v1319[v1320];
                        v17[1] = &v1319[v1320];
                        if (v1319[v1320] != 120)
                        {
LABEL_3348:
                          if (*((_DWORD *)v17 + 14))
                            goto LABEL_3416;
                          goto LABEL_3349;
                        }
                        v1386 = **v17;
                        v1387 = 0x78u;
                        v7 = a6;
LABEL_3612:
                        v13 = v1386 | 0x30000;
                        a2 = &v117[_pcre2_OP_lengths_8[v1387]];
                        v1377 = 5;
                        goto LABEL_3461;
                      }
                      if ((_DWORD)v23 == 1)
                        goto LABEL_3415;
                    }
                    else
                    {
                      if ((v23 + 997) < 3)
                        goto LABEL_3348;
                      if ((_DWORD)v23 == -999)
                      {
                        memcpy(v17 + 16, v1411 + 16, 8 * (_QWORD)v1411[15]);
                        v18 = v1422;
                        v16 = v1423;
                        a7 = v1425;
                        v17[15] = v1411[15];
LABEL_3415:
                        if (!*((_DWORD *)v17 + 14))
                        {
LABEL_3416:
                          v116 = (int64_t)v17[3];
                          v117 = *v17;
LABEL_3417:
                          a2 = &v117[v116];
                          *v17 = &v117[v116];
                          if (*((unsigned __int8 *)v17 + 73) == 143)
                          {
                            v13 = 131215;
                            v1377 = 35;
                            goto LABEL_3460;
                          }
                          goto LABEL_8;
                        }
LABEL_3349:
                        v117 = *v17;
                        do
                        {
                          v117 += __rev16(*(unsigned __int16 *)(v117 + 1));
                          *v17 = v117;
                          v118 = *v117;
                        }
                        while (v118 == 120);
LABEL_3351:
                        v116 = _pcre2_OP_lengths_8[v118];
                        goto LABEL_3417;
                      }
                    }
                    continue;
                  case 6:
                    if ((_DWORD)v23)
                      continue;
                    *v17 -= __rev16(*(unsigned __int16 *)(*v17 + 1));
                    goto LABEL_8;
                  case 7:
                    if ((_DWORD)v23)
                      continue;
                    v233 = *v17;
                    goto LABEL_3429;
                  case 8:
                    if ((_DWORD)v23 == -993)
                    {
                      v1189 = *v17;
                      v1190 = __rev16(*(unsigned __int16 *)(*v17 + 1));
                      v1191 = &(*v17)[v1190];
                      if (*(_QWORD *)(a7 + 216) >= (unint64_t)v1191)
                        continue;
                      if (*v1189 != 120)
                      {
                        v23 = 4294966303;
                        if (*v1191 != 120)
                          continue;
                      }
                    }
                    else
                    {
                      if ((_DWORD)v23)
                      {
                        if ((_DWORD)v23 == -998)
                        {
                          *((_DWORD *)v17 + 15) = 1;
                          if (v17[10] == v17[1])
                          {
                            v233 = *v17;
                            do
                            {
                              v233 += __rev16(*(unsigned __int16 *)(v233 + 1));
                              *v17 = v233;
                            }
                            while (*v233 == 120);
                            goto LABEL_3429;
                          }
                          v1192 = v17[2];
                          *v17 = v1192;
LABEL_3607:
                          v7 = a6;
LABEL_3608:
                          v17[1] = v17[10];
                          v13 = *((_DWORD *)v17 + 14);
                          a2 = &v1192[_pcre2_OP_lengths_8[*v1192]];
                          v1377 = 8;
                          goto LABEL_3461;
                        }
                        continue;
                      }
                      v1189 = *v17;
                      v1190 = __rev16(*(unsigned __int16 *)(*v17 + 1));
                    }
                    v1192 = &v1189[v1190];
                    *v17 = &v1189[v1190];
                    if (v1189[v1190] == 120)
                      goto LABEL_3607;
                    if (*((_DWORD *)v17 + 15) || (v23 = 0, *((_DWORD *)v17 + 16)))
                    {
                      v233 = &v1189[v1190];
LABEL_3429:
                      *v17 = v233 + 3;
                      goto LABEL_8;
                    }
                    continue;
                  case 9:
                    if ((_DWORD)v23)
                      continue;
                    v233 = v17[1];
                    do
                    {
                      v233 += __rev16(*(unsigned __int16 *)(v233 + 1));
                      v17[1] = v233;
                    }
                    while (*v233 == 120);
                    goto LABEL_3429;
                  case 0xA:
                    if (!(_DWORD)v23)
                      goto LABEL_1238;
                    continue;
                  case 0xB:
                    v1067 = v17[1];
                    v1068 = &v1067[__rev16(*(unsigned __int16 *)(v1067 + 1))];
                    if ((v23 + 997) >= 5)
                    {
                      if ((_DWORD)v23)
                        continue;
                    }
                    else
                    {
                      if (*(_DWORD *)(a7 + 232) != (*((_DWORD *)v17 + 14) ^ 0x40000))
                        continue;
                      v74 = (_DWORD)v23 == -993;
                      v23 = 0;
                      if (!v74)
                        continue;
                      v23 = 0;
                      if (*(_QWORD *)(a7 + 216) >= (unint64_t)v1068)
                        continue;
                      if (*v1067 != 120)
                      {
                        v23 = 0;
                        if (*v1068 != 120)
                          continue;
                      }
                    }
                    v23 = 0;
                    v17[1] = v1068;
                    if (*v1068 == 120)
                    {
                      v13 = *((_DWORD *)v17 + 14);
                      v1373 = 0x78u;
                      v7 = a6;
LABEL_3561:
                      a2 = &v1068[_pcre2_OP_lengths_8[v1373]];
                      v1377 = 11;
                      goto LABEL_3461;
                    }
                    continue;
                  case 0xC:
                    if ((_DWORD)v23 == -994)
                    {
                      v1069 = _pcre2_strcmp_8(*v17 + 2, *(unsigned __int8 **)(a7 + 224));
                      v18 = v1422;
                      v16 = v1423;
                      a7 = v1425;
                      v1070 = v1069;
                      v23 = 4294966302;
                      if (!v1070)
                      {
                        *(_QWORD *)(v1425 + 224) = v17[10];
                        v23 = 4294966301;
                      }
                    }
                    continue;
                  case 0xD:
                  case 0x24:
                    if (!(_DWORD)v23)
                    {
                      *(_DWORD *)(a7 + 232) = *((_DWORD *)v17 + 26);
                      v23 = 4294966299;
                    }
                    continue;
                  case 0xE:
                  case 0xF:
                    if (!(_DWORD)v23)
                    {
                      *(_DWORD *)(a7 + 232) = *((_DWORD *)v17 + 26);
                      v23 = 4294966300;
                    }
                    continue;
                  case 0x10:
                    if (!(_DWORD)v23)
                    {
                      *(_QWORD *)(a7 + 224) = v17[10];
                      *(_DWORD *)(a7 + 232) = *((_DWORD *)v17 + 26);
                      v23 = 4294966301;
                    }
                    continue;
                  case 0x11:
                    if (!(_DWORD)v23)
                    {
                      *(_QWORD *)(a7 + 224) = *v17 + 2;
                      *(_DWORD *)(a7 + 232) = *((_DWORD *)v17 + 26);
                      v23 = 4294966302;
                    }
                    continue;
                  case 0x12:
                  case 0x13:
                    if (!(_DWORD)v23)
                    {
                      *(_QWORD *)(a7 + 216) = *v17;
                      *(_DWORD *)(a7 + 232) = *((_DWORD *)v17 + 26);
                      v23 = 4294966303;
                    }
                    continue;
                  case 0x14:
                    if ((_DWORD)v23)
                      continue;
                    v1071 = *((_DWORD *)v17 + 14);
                    v1072 = *((_DWORD *)v17 + 15);
                    *((_DWORD *)v17 + 14) = v1071 + 1;
                    if (v1071 >= v1072)
                      continue;
                    v1073 = sub_1A3AAD9BC((unint64_t)v17[5], *((_DWORD *)v17 + 16), (uint64_t)v17, a7, &v1426);
                    if (!v1073)
                    {
                      a7 = v1425;
                      v17[10] = &v1426[(_QWORD)v17[10]];
                      goto LABEL_3494;
                    }
                    if (v1073 <= 0)
                    {
                      v1074 = v17[10];
                      a7 = v1425;
                      v16 = v1423;
                      v18 = v1422;
                    }
                    else
                    {
                      v18 = v1422;
                      v1074 = (unsigned __int8 *)*v1422;
                      v17[10] = (unsigned __int8 *)*v1422;
                      a7 = v1425;
                      v16 = v1423;
                    }
                    v23 = 0;
                    if ((unint64_t)v1074 >= *v18)
                    {
                      v23 = 0;
                      v1210 = *v1424;
                      if (*v1424)
                      {
                        if ((unint64_t)v1074 > *v1421 || (v23 = 0, *v1418))
                        {
                          v23 = 0;
                          *v1419 = 1;
                          if (v1210 > 1)
                            return 4294967294;
                        }
                      }
                    }
                    continue;
                  case 0x15:
                    if ((_DWORD)v23)
                      continue;
                    v580 = (unsigned __int8 *)(v17[10] - v17[3]);
                    v17[10] = v580;
                    goto LABEL_3356;
                  case 0x16:
                    if ((_DWORD)v23)
                      continue;
                    v1075 = v17[1];
                    if (v17[10] == v1075)
                      continue;
                    v17[10] = v1075;
                    v1369 = *((_DWORD *)v17 + 14);
                    v1370 = *((_DWORD *)v17 + 15) - 1;
                    *((_DWORD *)v17 + 15) = v1370;
                    if (v1369 >= v1370)
                    {
                      v7 = a6;
                    }
                    else
                    {
                      v7 = a6;
                      do
                      {
                        v1427 = 0;
                        sub_1A3AAD9BC((unint64_t)v17[5], *((_DWORD *)v17 + 16), (uint64_t)v17, a7, &v1427);
                        a7 = v1425;
                        v17[10] = &v1427[(_QWORD)v17[10]];
                        ++v1369;
                      }
                      while (v1369 < *((_DWORD *)v17 + 15));
                    }
                    goto LABEL_3500;
                  case 0x17:
                    if ((_DWORD)v23)
                      continue;
                    v1076 = *((_DWORD *)v17 + 14);
                    v1077 = *((_DWORD *)v17 + 15);
                    *((_DWORD *)v17 + 14) = v1076 + 1;
                    if (v1076 >= v1077)
                      continue;
                    v1062 = v17[10];
                    if ((unint64_t)v1062 >= *v18)
                      goto LABEL_2876;
                    v23 = 0;
                    v17[10] = v1062 + 1;
                    if (((v17[2][(unint64_t)*v1062 >> 3] >> (*v1062 & 7)) & 1) == 0)
                      continue;
                    a2 = *v17;
                    v7 = a6;
                    goto LABEL_3521;
                  case 0x18:
                    if ((_DWORD)v23)
                      continue;
                    v501 = v17[10] - 1;
                    v17[10] = v501;
                    v324 = v17[1];
                    v90 = v12;
                    goto LABEL_3358;
                  case 0x19:
                    if ((_DWORD)v23)
                      continue;
                    v1078 = *((_DWORD *)v17 + 14);
                    v1079 = *((_DWORD *)v17 + 15);
                    *((_DWORD *)v17 + 14) = v1078 + 1;
                    if (v1078 >= v1079)
                      continue;
                    v1080 = v17[10];
                    if ((unint64_t)v1080 >= *v18)
                      goto LABEL_2895;
                    v1081 = *v1080;
                    if (*((_DWORD *)v17 + 16) != v1081)
                    {
                      v23 = 0;
                      if (*((_DWORD *)v17 + 17) != v1081)
                        continue;
                    }
                    v13 = 0;
                    v17[10] = v1080 + 1;
                    a2 = *v17;
                    goto LABEL_3506;
                  case 0x1A:
                    v76 = v17[10] - 1;
                    v17[10] = v76;
                    if ((_DWORD)v23)
                      continue;
                    v75 = v17[1];
                    v30 = v12;
                    goto LABEL_3360;
                  case 0x1B:
                    if ((_DWORD)v23)
                      continue;
                    v1082 = *((_DWORD *)v17 + 14);
                    v1083 = *((_DWORD *)v17 + 15);
                    *((_DWORD *)v17 + 14) = v1082 + 1;
                    if (v1082 >= v1083)
                      continue;
                    v1062 = v17[10];
                    if ((unint64_t)v1062 >= *v18)
                      goto LABEL_2876;
                    v23 = 0;
                    v1084 = *((_DWORD *)v17 + 16);
                    v17[10] = v1062 + 1;
                    if (v1084 != *v1062)
                      continue;
                    v13 = 0;
                    a2 = *v17;
                    goto LABEL_3522;
                  case 0x1C:
                    v66 = v17[10] - 1;
                    v17[10] = v66;
                    if ((_DWORD)v23)
                      continue;
                    v65 = v17[1];
                    v30 = v12;
                    goto LABEL_3362;
                  case 0x1D:
                    if ((_DWORD)v23)
                      continue;
                    v1085 = *((_DWORD *)v17 + 14);
                    v1086 = *((_DWORD *)v17 + 15);
                    *((_DWORD *)v17 + 14) = v1085 + 1;
                    if (v1085 >= v1086)
                      continue;
                    v1080 = v17[10];
                    if ((unint64_t)v1080 >= *v18)
                      goto LABEL_2895;
                    v23 = 0;
                    v1087 = *v1080;
                    if (*((_DWORD *)v17 + 16) == v1087)
                      continue;
                    v23 = 0;
                    if (*((_DWORD *)v17 + 17) == v1087)
                      continue;
                    v17[10] = v1080 + 1;
                    a2 = *v17;
                    v7 = a6;
                    goto LABEL_3579;
                  case 0x1E:
                    if ((_DWORD)v23)
                      continue;
                    v281 = v17[10] - 1;
                    v17[10] = v281;
                    v280 = v17[1];
                    v37 = v12;
                    goto LABEL_3364;
                  case 0x1F:
                    if ((_DWORD)v23)
                      continue;
                    v1088 = *((_DWORD *)v17 + 14);
                    v1089 = *((_DWORD *)v17 + 15);
                    *((_DWORD *)v17 + 14) = v1088 + 1;
                    if (v1088 >= v1089)
                      continue;
                    v1062 = v17[10];
                    if ((unint64_t)v1062 >= *v18)
                      goto LABEL_2876;
                    v23 = 0;
                    v1090 = *((_DWORD *)v17 + 16);
                    v17[10] = v1062 + 1;
                    if (v1090 == *v1062)
                      continue;
                    a2 = *v17;
                    v7 = a6;
                    goto LABEL_3523;
                  case 0x20:
                    if ((_DWORD)v23)
                      continue;
                    v264 = v17[10] - 1;
                    v17[10] = v264;
                    v263 = v17[1];
                    v37 = v12;
                    goto LABEL_3366;
                  case 0x21:
                    if ((_DWORD)v23)
                      continue;
                    v1091 = *((_DWORD *)v17 + 14);
                    v1092 = *((_DWORD *)v17 + 15);
                    *((_DWORD *)v17 + 14) = v1091 + 1;
                    if (v1091 >= v1092)
                      continue;
                    v1062 = v17[10];
                    v1093 = *v18;
                    if ((unint64_t)v1062 >= *v18)
                      goto LABEL_2876;
                    v1094 = *((_DWORD *)v17 + 16);
                    if (v1094 != 12)
                      goto LABEL_2705;
                    v1095 = *(_DWORD *)(a7 + 252);
                    if (v1095)
                    {
                      v1096 = _pcre2_is_newline_8(v17[10], v1095, v1093, v1413, v1420);
                      v18 = v1422;
                      v16 = v1423;
                      a7 = v1425;
                      v1097 = v1096;
                      v23 = 0;
                      if (!v1097)
                      {
                        v1094 = *((_DWORD *)v17 + 16);
                        v1062 = v17[10];
LABEL_2705:
                        v17[10] = v1062 + 1;
                        v22 = 4294967252;
                        v1098 = v1094 - 6;
                        v1099 = *v1062;
                        switch(v1098)
                        {
                          case 0:
                            v23 = 0;
                            if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v1099) & 8) == 0)
                              goto LABEL_3592;
                            continue;
                          case 1:
                            v23 = 0;
                            if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v1099) & 8) != 0)
                              goto LABEL_3592;
                            continue;
                          case 2:
                            v23 = 0;
                            if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v1099) & 1) == 0)
                              goto LABEL_3592;
                            continue;
                          case 3:
                            v23 = 0;
                            if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v1099) & 1) != 0)
                              goto LABEL_3592;
                            continue;
                          case 4:
                            v23 = 0;
                            if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v1099) & 0x10) == 0)
                              goto LABEL_3592;
                            continue;
                          case 5:
                            v23 = 0;
                            if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v1099) & 0x10) != 0)
                              goto LABEL_3592;
                            continue;
                          case 6:
                            v1389 = v1062 + 1;
                            goto LABEL_3584;
                          case 7:
                          case 8:
                            goto LABEL_3592;
                          case 11:
                            v23 = 0;
                            if (*v1062 <= 0xCu)
                            {
                              if ((v1099 - 11) >= 2)
                              {
                                if ((_DWORD)v1099 == 10)
                                  goto LABEL_3592;
                                continue;
                              }
LABEL_3321:
                              v23 = 0;
                              if (*(_WORD *)(a7 + 130) != 2)
                                goto LABEL_3592;
                              continue;
                            }
                            if ((_DWORD)v1099 == 133)
                              goto LABEL_3321;
                            if ((_DWORD)v1099 != 13)
                              continue;
                            if ((unint64_t)(v1062 + 1) < *v18 && v1062[1] == 10)
                              v17[10] = v1062 + 2;
                            break;
                          case 12:
                            v23 = 0;
                            if ((_DWORD)v1099 != 9 && (_DWORD)v1099 != 32 && (_DWORD)v1099 != 160)
                              goto LABEL_3592;
                            continue;
                          case 13:
                            if ((_DWORD)v1099 == 9)
                              goto LABEL_3592;
                            if ((_DWORD)v1099 == 32)
                              goto LABEL_3592;
                            v23 = 0;
                            if ((_DWORD)v1099 == 160)
                              goto LABEL_3592;
                            continue;
                          case 14:
                            v23 = 0;
                            if ((v1099 - 10) >= 4 && (_DWORD)v1099 != 133)
                              goto LABEL_3592;
                            continue;
                          case 15:
                            if ((v1099 - 10) < 4)
                              goto LABEL_3592;
                            v23 = 0;
                            if ((_DWORD)v1099 == 133)
                              goto LABEL_3592;
                            continue;
                          default:
                            return v22;
                        }
                        goto LABEL_3632;
                      }
                    }
                    else
                    {
                      v1245 = *v1413;
                      if ((unint64_t)v1062 > v1093 - v1245
                        || *v1062 != *(unsigned __int8 *)(a7 + 260)
                        || (v23 = 0, (_DWORD)v1245 != 1) && (v23 = 0, v1062[1] != *(unsigned __int8 *)(a7 + 261)))
                      {
                        v1389 = v1062 + 1;
                        v17[10] = v1062 + 1;
                        LODWORD(v1099) = *v1062;
LABEL_3584:
                        v1390 = *v1424;
                        if (!*v1424 || (unint64_t)v1389 < *v18 || *(_DWORD *)(a7 + 252) || *v1413 != 2)
                          goto LABEL_3592;
                        if ((_DWORD)v1099 == *(unsigned __int8 *)(a7 + 260))
                        {
                          *v1419 = 1;
                          a7 = v1425;
                          if (v1390 > 1)
                            return 4294967294;
                          goto LABEL_3592;
                        }
LABEL_3632:
                        a7 = v1425;
                        goto LABEL_3592;
                      }
                    }
                    continue;
                  case 0x22:
                    if ((_DWORD)v23)
                      continue;
                    v1322 = v17[10];
                    v1027 = v1322 - 1;
                    v17[10] = v1322 - 1;
                    if (*((_DWORD *)v17 + 16) == 17 && v1027 > v17[1] && *v1027 == 10)
                    {
                      v1324 = *(v1322 - 2);
                      v1323 = v1322 - 2;
                      if (v1324 == 13)
                      {
                        v17[10] = v1323;
                        v1027 = v1323;
                      }
                    }
                    goto LABEL_3373;
                  case 0x23:
                    continue;
                  default:
                    return v22;
                }
              }
              switch(*((_BYTE *)v17 + 72))
              {
                case 0xC8:
                  if ((_DWORD)v23)
                    continue;
                  v1060 = *((_DWORD *)v17 + 14);
                  v1061 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1060 + 1;
                  if (v1060 >= v1061)
                    continue;
                  v1062 = v17[10];
                  if ((unint64_t)v1062 >= *v18)
                  {
LABEL_2876:
                    v23 = 0;
                    v1187 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1062 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1187 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1062 + 1;
                    v1063 = *v1062;
                    if (v1063 < 0xC0)
                      goto LABEL_3144;
                    if ((v1063 & 0x20) != 0)
                    {
                      v1211 = v1062[1] & 0x3F;
                      if ((v1063 & 0x10) != 0)
                      {
                        if ((v1063 & 8) != 0)
                        {
                          v1250 = v1062[2] & 0x3F;
                          v1251 = v1062[3] & 0x3F;
                          v1252 = v1062[4] & 0x3F;
                          if ((v1063 & 4) != 0)
                          {
                            v1063 = ((v1063 & 1) << 30) | (v1211 << 24) | (v1250 << 18) | (v1251 << 12) | (v1252 << 6) | v1062[5] & 0x3F;
                            v1212 = v1062 + 6;
                          }
                          else
                          {
                            v1063 = ((v1063 & 3) << 24) | (v1211 << 18) | (v1250 << 12) | (v1251 << 6) | v1252;
                            v1212 = v1062 + 5;
                          }
                        }
                        else
                        {
                          v1063 = ((v1063 & 7) << 18) | (v1211 << 12) | ((v1062[2] & 0x3F) << 6) | v1062[3] & 0x3F;
                          v1212 = v1062 + 4;
                        }
                      }
                      else
                      {
                        v1063 = ((v1063 & 0xF) << 12) | (v1211 << 6) | v1062[2] & 0x3F;
                        v1212 = v1062 + 3;
                      }
                      v17[10] = v1212;
                    }
                    else
                    {
                      v17[10] = v1062 + 2;
                      v1063 = v1062[1] & 0x3F | ((v1063 & 0x1F) << 6);
                    }
                    if (v1063 < 0x100)
                    {
LABEL_3144:
                      v23 = 0;
                      if (((v17[2][(unint64_t)v1063 >> 3] >> (v1063 & 7)) & 1) != 0)
                      {
LABEL_3525:
                        v13 = 0;
                        a2 = *v17;
                        v1377 = -56;
                        goto LABEL_3460;
                      }
                    }
                    else
                    {
                      v23 = 0;
                      if (*((_BYTE *)v17 + 73) != 110)
                        goto LABEL_3525;
                    }
                  }
                  continue;
                case 0xC9:
                  if ((_DWORD)v23)
                    continue;
                  v1100 = v17[10];
                  v17[10] = v1100 - 1;
                  if (v1100 <= v17[1])
                    continue;
                  if ((*(v1100 - 1) & 0xC0) == 0x80)
                  {
                    v1371 = v1100 - 2;
                    do
                    {
                      v17[10] = v1371;
                      v1372 = *v1371--;
                    }
                    while ((v1372 & 0xC0) == 0x80);
                  }
                  v90 = v12;
                  goto LABEL_3483;
                case 0xCA:
                  if ((_DWORD)v23)
                    continue;
                  v1101 = *((_DWORD *)v17 + 14);
                  v1102 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1101 + 1;
                  if (v1101 >= v1102)
                    continue;
                  v1103 = v17[10];
                  v1104 = *v18;
                  v1105 = v17[3];
                  if ((unint64_t)v1103 <= *v18 - (unint64_t)v1105)
                  {
                    v1106 = memcmp(v17[10], v17[2], (size_t)v17[3]);
                    v18 = v1422;
                    v16 = v1423;
                    a7 = v1425;
                    if (!v1106)
                      goto LABEL_3501;
                  }
                  v1105 = v17[5];
                  if (v1105)
                  {
                    if ((unint64_t)v1103 <= v1104 - (unint64_t)v1105)
                    {
                      v1107 = memcmp(v1103, (char *)v17 + 74, (size_t)v17[5]);
                      v18 = v1422;
                      v16 = v1423;
                      a7 = v1425;
                      if (!v1107)
                      {
LABEL_3501:
                        v17[10] = &v1105[(_QWORD)v1103];
LABEL_3517:
                        v7 = a6;
                        v13 = 0;
                        a2 = *v17;
                        v1377 = -54;
                        goto LABEL_3461;
                      }
                    }
                  }
                  v23 = 0;
                  if ((unint64_t)v1103 >= v1104)
                  {
                    v23 = 0;
                    v1108 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1103 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1108 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  continue;
                case 0xCB:
                  if ((_DWORD)v23)
                    continue;
                  v1325 = v17[10] - 1;
                  do
                  {
                    v17[10] = v1325;
                    v1326 = *v1325--;
                  }
                  while ((v1326 & 0xC0) == 0x80);
                  v347 = v17[1];
                  v348 = v1325 + 1;
                  v37 = v12;
                  goto LABEL_3377;
                case 0xCC:
                  if ((_DWORD)v23)
                    continue;
                  v1109 = *((_DWORD *)v17 + 14);
                  v1110 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1109 + 1;
                  if (v1109 >= v1110)
                    continue;
                  v1111 = v17[10];
                  if ((unint64_t)v1111 >= *v18)
                  {
                    v23 = 0;
                    v1194 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1111 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1194 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1111 + 1;
                    v1112 = *v1111;
                    if (v1112 >= 0xC0)
                    {
                      if ((v1112 & 0x20) != 0)
                      {
                        v1213 = v1111[1] & 0x3F;
                        if ((v1112 & 0x10) != 0)
                        {
                          if ((v1112 & 8) != 0)
                          {
                            v1253 = v1111[2] & 0x3F;
                            v1254 = v1111[3] & 0x3F;
                            v1255 = v1111[4] & 0x3F;
                            if ((v1112 & 4) != 0)
                            {
                              v1112 = ((v1112 & 1) << 30) | (v1213 << 24) | (v1253 << 18) | (v1254 << 12) | (v1255 << 6) | v1111[5] & 0x3F;
                              v1214 = v1111 + 6;
                            }
                            else
                            {
                              v1112 = ((v1112 & 3) << 24) | (v1213 << 18) | (v1253 << 12) | (v1254 << 6) | v1255;
                              v1214 = v1111 + 5;
                            }
                          }
                          else
                          {
                            v1112 = ((v1112 & 7) << 18) | (v1213 << 12) | ((v1111[2] & 0x3F) << 6) | v1111[3] & 0x3F;
                            v1214 = v1111 + 4;
                          }
                        }
                        else
                        {
                          v1112 = ((v1112 & 0xF) << 12) | (v1213 << 6) | v1111[2] & 0x3F;
                          v1214 = v1111 + 3;
                        }
                        v17[10] = v1214;
                      }
                      else
                      {
                        v17[10] = v1111 + 2;
                        v1112 = v1111[1] & 0x3F | ((v1112 & 0x1F) << 6);
                      }
                    }
                    v23 = 0;
                    if (*((_DWORD *)v17 + 16) != v1112)
                    {
                      v23 = 0;
                      if (*((_DWORD *)v17 + 17) != v1112)
                      {
                        v13 = 0;
                        a2 = *v17;
                        v1377 = -52;
                        goto LABEL_3460;
                      }
                    }
                  }
                  continue;
                case 0xCD:
                  if ((_DWORD)v23)
                    continue;
                  v1327 = v17[10] - 1;
                  do
                  {
                    v17[10] = v1327;
                    v1328 = *v1327--;
                  }
                  while ((v1328 & 0xC0) == 0x80);
                  v280 = v17[1];
                  v281 = v1327 + 1;
                  v37 = v12;
                  goto LABEL_3381;
                case 0xCE:
                  if ((_DWORD)v23)
                    continue;
                  v1113 = *((_DWORD *)v17 + 14);
                  v1114 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1113 + 1;
                  if (v1113 >= v1114)
                    continue;
                  v1115 = v17[10];
                  if ((unint64_t)v1115 >= *v18)
                  {
                    v23 = 0;
                    v1195 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1115 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1195 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1115 + 1;
                    v1116 = *v1115;
                    if (v1116 >= 0xC0)
                    {
                      if ((v1116 & 0x20) != 0)
                      {
                        v1215 = v1115[1] & 0x3F;
                        if ((v1116 & 0x10) != 0)
                        {
                          if ((v1116 & 8) != 0)
                          {
                            v1256 = v1115[2] & 0x3F;
                            v1257 = v1115[3] & 0x3F;
                            v1258 = v1115[4] & 0x3F;
                            if ((v1116 & 4) != 0)
                            {
                              v1116 = ((v1116 & 1) << 30) | (v1215 << 24) | (v1256 << 18) | (v1257 << 12) | (v1258 << 6) | v1115[5] & 0x3F;
                              v1216 = v1115 + 6;
                            }
                            else
                            {
                              v1116 = ((v1116 & 3) << 24) | (v1215 << 18) | (v1256 << 12) | (v1257 << 6) | v1258;
                              v1216 = v1115 + 5;
                            }
                          }
                          else
                          {
                            v1116 = ((v1116 & 7) << 18) | (v1215 << 12) | ((v1115[2] & 0x3F) << 6) | v1115[3] & 0x3F;
                            v1216 = v1115 + 4;
                          }
                        }
                        else
                        {
                          v1116 = ((v1116 & 0xF) << 12) | (v1215 << 6) | v1115[2] & 0x3F;
                          v1216 = v1115 + 3;
                        }
                        v17[10] = v1216;
                      }
                      else
                      {
                        v17[10] = v1115 + 2;
                        v1116 = v1115[1] & 0x3F | ((v1116 & 0x1F) << 6);
                      }
                    }
                    v23 = 0;
                    if (*((_DWORD *)v17 + 16) != v1116)
                    {
                      v13 = 0;
                      a2 = *v17;
                      v1377 = -50;
                      goto LABEL_3460;
                    }
                  }
                  continue;
                case 0xCF:
                  if ((_DWORD)v23)
                    continue;
                  v1329 = v17[10] - 1;
                  do
                  {
                    v17[10] = v1329;
                    v1330 = *v1329--;
                  }
                  while ((v1330 & 0xC0) == 0x80);
                  v263 = v17[1];
                  v264 = v1329 + 1;
                  v37 = v12;
                  goto LABEL_3385;
                case 0xD0:
                  if ((_DWORD)v23)
                    continue;
                  v1117 = *((_DWORD *)v17 + 14);
                  v1118 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1117 + 1;
                  if (v1117 >= v1118)
                    continue;
                  v1119 = v17[10];
                  if ((unint64_t)v1119 >= *v18)
                  {
                    v23 = 0;
                    v1196 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1119 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1196 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1119 + 1;
                    if (v16)
                    {
                      v1120 = *v1119;
                      if (v1120 >= 0xC0)
                      {
                        if ((v1120 & 0x20) != 0)
                        {
                          v1217 = 4;
                          v1218 = 5;
                          if ((v1120 & 4) != 0)
                            v1218 = 6;
                          if ((v1120 & 8) != 0)
                            v1217 = v1218;
                          if ((v1120 & 0x10) != 0)
                            v1121 = v1217;
                          else
                            v1121 = 3;
                        }
                        else
                        {
                          v1121 = 2;
                        }
                        v17[10] = &v1119[v1121];
                      }
                    }
                    v23 = 0;
                    if (*((_DWORD *)v17 + 16) != 15)
                    {
                      v183 = v12;
                      v7 = a6;
LABEL_3524:
                      v13 = 0;
                      a2 = *v17;
                      v1377 = -48;
                      v12 = v183;
                      goto LABEL_3461;
                    }
                  }
                  continue;
                case 0xD1:
                  if ((_DWORD)v23)
                    continue;
                  v1122 = *((_DWORD *)v17 + 14);
                  v1123 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1122 + 1;
                  if (v1122 >= v1123)
                    continue;
                  v1124 = v17[10];
                  if ((unint64_t)v1124 >= *v18)
                  {
                    v23 = 0;
                    v1197 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1124 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1197 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1124 + 1;
                    v1125 = *v1124;
                    if (v16 && v1125 >= 0xC0)
                    {
                      if ((v1125 & 0x20) != 0)
                      {
                        v1219 = v1124[1] & 0x3F;
                        if ((v1125 & 0x10) != 0)
                        {
                          if ((v1125 & 8) != 0)
                          {
                            v1259 = v1124[2] & 0x3F;
                            v1260 = v1124[3] & 0x3F;
                            v1261 = v1124[4] & 0x3F;
                            if ((v1125 & 4) != 0)
                            {
                              v1125 = ((v1125 & 1) << 30) | (v1219 << 24) | (v1259 << 18) | (v1260 << 12) | (v1261 << 6) | v1124[5] & 0x3F;
                              v1220 = v1124 + 6;
                            }
                            else
                            {
                              v1125 = ((v1125 & 3) << 24) | (v1219 << 18) | (v1259 << 12) | (v1260 << 6) | v1261;
                              v1220 = v1124 + 5;
                            }
                          }
                          else
                          {
                            v1125 = ((v1125 & 7) << 18) | (v1219 << 12) | ((v1124[2] & 0x3F) << 6) | v1124[3] & 0x3F;
                            v1220 = v1124 + 4;
                          }
                        }
                        else
                        {
                          v1125 = ((v1125 & 0xF) << 12) | (v1219 << 6) | v1124[2] & 0x3F;
                          v1220 = v1124 + 3;
                        }
                        v17[10] = v1220;
                      }
                      else
                      {
                        v17[10] = v1124 + 2;
                        v1125 = v1124[1] & 0x3F | ((v1125 & 0x1F) << 6);
                      }
                    }
                    v1301 = _pcre2_ucd_records_8[12
                                               * _pcre2_ucd_stage2_8[v1125 & 0x7F | (_pcre2_ucd_stage1_8[v1125 >> 7] << 7)]
                                               + 1];
                    v110 = v1301 > 9;
                    v1302 = (1 << v1301) & 0x320;
                    v23 = 0;
                    if (v110 || v1302 == 0)
                    {
                      if (*((_DWORD *)v17 + 16) == 15)
                      {
LABEL_3526:
                        v7 = a6;
LABEL_3527:
                        v13 = 0;
                        a2 = *v17;
                        v1377 = -47;
                        goto LABEL_3461;
                      }
                    }
                    else if (*((_DWORD *)v17 + 16) != 15)
                    {
                      goto LABEL_3526;
                    }
                  }
                  continue;
                case 0xD2:
                  if ((_DWORD)v23)
                    continue;
                  v1126 = *((_DWORD *)v17 + 14);
                  v1127 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1126 + 1;
                  if (v1126 >= v1127)
                    continue;
                  v1128 = v17[10];
                  if ((unint64_t)v1128 >= *v18)
                  {
                    v23 = 0;
                    v1198 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1128 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1198 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1128 + 1;
                    v1129 = *v1128;
                    if (v16 && v1129 >= 0xC0)
                    {
                      if ((v1129 & 0x20) != 0)
                      {
                        v1221 = v1128[1] & 0x3F;
                        if ((v1129 & 0x10) != 0)
                        {
                          if ((v1129 & 8) != 0)
                          {
                            v1262 = v1128[2] & 0x3F;
                            v1263 = v1128[3] & 0x3F;
                            v1264 = v1128[4] & 0x3F;
                            if ((v1129 & 4) != 0)
                            {
                              v1129 = ((v1129 & 1) << 30) | (v1221 << 24) | (v1262 << 18) | (v1263 << 12) | (v1264 << 6) | v1128[5] & 0x3F;
                              v1222 = v1128 + 6;
                            }
                            else
                            {
                              v1129 = ((v1129 & 3) << 24) | (v1221 << 18) | (v1262 << 12) | (v1263 << 6) | v1264;
                              v1222 = v1128 + 5;
                            }
                          }
                          else
                          {
                            v1129 = ((v1129 & 7) << 18) | (v1221 << 12) | ((v1128[2] & 0x3F) << 6) | v1128[3] & 0x3F;
                            v1222 = v1128 + 4;
                          }
                        }
                        else
                        {
                          v1129 = ((v1129 & 0xF) << 12) | (v1221 << 6) | v1128[2] & 0x3F;
                          v1222 = v1128 + 3;
                        }
                        v17[10] = v1222;
                      }
                      else
                      {
                        v17[10] = v1128 + 2;
                        v1129 = v1128[1] & 0x3F | ((v1129 & 0x1F) << 6);
                      }
                    }
                    v23 = 0;
                    if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                  * _pcre2_ucd_stage2_8[v1129 & 0x7F | (_pcre2_ucd_stage1_8[v1129 >> 7] << 7)]
                                                                  + 1]] != *((_DWORD *)v17 + 17)) == (*((_DWORD *)v17 + 16) == 15))
                    {
                      v7 = a6;
LABEL_3528:
                      v13 = 0;
                      a2 = *v17;
                      v1377 = -46;
                      goto LABEL_3461;
                    }
                  }
                  continue;
                case 0xD3:
                  if ((_DWORD)v23)
                    continue;
                  v1130 = *((_DWORD *)v17 + 14);
                  v1131 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1130 + 1;
                  if (v1130 >= v1131)
                    continue;
                  v1132 = v17[10];
                  if ((unint64_t)v1132 >= *v18)
                  {
                    v23 = 0;
                    v1199 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1132 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1199 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1132 + 1;
                    v1133 = *v1132;
                    if (v16 && v1133 >= 0xC0)
                    {
                      if ((v1133 & 0x20) != 0)
                      {
                        v1223 = v1132[1] & 0x3F;
                        if ((v1133 & 0x10) != 0)
                        {
                          if ((v1133 & 8) != 0)
                          {
                            v1265 = v1132[2] & 0x3F;
                            v1266 = v1132[3] & 0x3F;
                            v1267 = v1132[4] & 0x3F;
                            if ((v1133 & 4) != 0)
                            {
                              v1133 = ((v1133 & 1) << 30) | (v1223 << 24) | (v1265 << 18) | (v1266 << 12) | (v1267 << 6) | v1132[5] & 0x3F;
                              v1224 = v1132 + 6;
                            }
                            else
                            {
                              v1133 = ((v1133 & 3) << 24) | (v1223 << 18) | (v1265 << 12) | (v1266 << 6) | v1267;
                              v1224 = v1132 + 5;
                            }
                          }
                          else
                          {
                            v1133 = ((v1133 & 7) << 18) | (v1223 << 12) | ((v1132[2] & 0x3F) << 6) | v1132[3] & 0x3F;
                            v1224 = v1132 + 4;
                          }
                        }
                        else
                        {
                          v1133 = ((v1133 & 0xF) << 12) | (v1223 << 6) | v1132[2] & 0x3F;
                          v1224 = v1132 + 3;
                        }
                        v17[10] = v1224;
                      }
                      else
                      {
                        v17[10] = v1132 + 2;
                        v1133 = v1132[1] & 0x3F | ((v1133 & 0x1F) << 6);
                      }
                    }
                    v23 = 0;
                    if ((*((_DWORD *)v17 + 17) != _pcre2_ucd_records_8[12
                                                                      * _pcre2_ucd_stage2_8[v1133 & 0x7F | (_pcre2_ucd_stage1_8[v1133 >> 7] << 7)]
                                                                      + 1]) == (*((_DWORD *)v17 + 16) == 15))
                    {
                      v7 = a6;
LABEL_3529:
                      v13 = 0;
                      a2 = *v17;
                      v1377 = -45;
                      goto LABEL_3461;
                    }
                  }
                  continue;
                case 0xD4:
                  if ((_DWORD)v23)
                    continue;
                  v1134 = *((_DWORD *)v17 + 14);
                  v1135 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1134 + 1;
                  if (v1134 >= v1135)
                    continue;
                  v1136 = v17[10];
                  if ((unint64_t)v1136 >= *v18)
                  {
                    v23 = 0;
                    v1200 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1136 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1200 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1136 + 1;
                    v1137 = *v1136;
                    if (v16 && v1137 >= 0xC0)
                    {
                      if ((v1137 & 0x20) != 0)
                      {
                        v1225 = v1136[1] & 0x3F;
                        if ((v1137 & 0x10) != 0)
                        {
                          if ((v1137 & 8) != 0)
                          {
                            v1268 = v1136[2] & 0x3F;
                            v1269 = v1136[3] & 0x3F;
                            v1270 = v1136[4] & 0x3F;
                            if ((v1137 & 4) != 0)
                            {
                              v1137 = ((v1137 & 1) << 30) | (v1225 << 24) | (v1268 << 18) | (v1269 << 12) | (v1270 << 6) | v1136[5] & 0x3F;
                              v1226 = v1136 + 6;
                            }
                            else
                            {
                              v1137 = ((v1137 & 3) << 24) | (v1225 << 18) | (v1268 << 12) | (v1269 << 6) | v1270;
                              v1226 = v1136 + 5;
                            }
                          }
                          else
                          {
                            v1137 = ((v1137 & 7) << 18) | (v1225 << 12) | ((v1136[2] & 0x3F) << 6) | v1136[3] & 0x3F;
                            v1226 = v1136 + 4;
                          }
                        }
                        else
                        {
                          v1137 = ((v1137 & 0xF) << 12) | (v1225 << 6) | v1136[2] & 0x3F;
                          v1226 = v1136 + 3;
                        }
                        v17[10] = v1226;
                      }
                      else
                      {
                        v17[10] = v1136 + 2;
                        v1137 = v1136[1] & 0x3F | ((v1137 & 0x1F) << 6);
                      }
                    }
                    v23 = 0;
                    if ((*((_DWORD *)v17 + 17) != _pcre2_ucd_records_8[12
                                                                      * _pcre2_ucd_stage2_8[v1137 & 0x7F | (_pcre2_ucd_stage1_8[v1137 >> 7] << 7)]]) == (*((_DWORD *)v17 + 16) == 15))
                    {
                      v7 = a6;
LABEL_3530:
                      v13 = 0;
                      a2 = *v17;
                      v1377 = -44;
                      goto LABEL_3461;
                    }
                  }
                  continue;
                case 0xD5:
                  if ((_DWORD)v23)
                    continue;
                  v1138 = *((_DWORD *)v17 + 14);
                  v1139 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1138 + 1;
                  if (v1138 >= v1139)
                    continue;
                  v1140 = v17[10];
                  if ((unint64_t)v1140 >= *v18)
                  {
                    v23 = 0;
                    v1201 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1140 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1201 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1140 + 1;
                    v1141 = *v1140;
                    if (v16 && v1141 >= 0xC0)
                    {
                      if ((v1141 & 0x20) != 0)
                      {
                        v1227 = v1140[1] & 0x3F;
                        if ((v1141 & 0x10) != 0)
                        {
                          if ((v1141 & 8) != 0)
                          {
                            v1271 = v1140[2] & 0x3F;
                            v1272 = v1140[3] & 0x3F;
                            v1273 = v1140[4] & 0x3F;
                            if ((v1141 & 4) != 0)
                            {
                              v1141 = ((v1141 & 1) << 30) | (v1227 << 24) | (v1271 << 18) | (v1272 << 12) | (v1273 << 6) | v1140[5] & 0x3F;
                              v1228 = v1140 + 6;
                            }
                            else
                            {
                              v1141 = ((v1141 & 3) << 24) | (v1227 << 18) | (v1271 << 12) | (v1272 << 6) | v1273;
                              v1228 = v1140 + 5;
                            }
                          }
                          else
                          {
                            v1141 = ((v1141 & 7) << 18) | (v1227 << 12) | ((v1140[2] & 0x3F) << 6) | v1140[3] & 0x3F;
                            v1228 = v1140 + 4;
                          }
                        }
                        else
                        {
                          v1141 = ((v1141 & 0xF) << 12) | (v1227 << 6) | v1140[2] & 0x3F;
                          v1228 = v1140 + 3;
                        }
                        v17[10] = v1228;
                      }
                      else
                      {
                        v17[10] = v1140 + 2;
                        v1141 = v1140[1] & 0x3F | ((v1141 & 0x1F) << 6);
                      }
                    }
                    v23 = 0;
                    if (((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                   * _pcre2_ucd_stage2_8[v1141 & 0x7F | (_pcre2_ucd_stage1_8[v1141 >> 7] << 7)]
                                                                   + 1]] & 0xFFFFFFFD) != 1) == (*((_DWORD *)v17 + 16) == 15))
                    {
                      v7 = a6;
LABEL_3531:
                      v13 = 0;
                      a2 = *v17;
                      v1377 = -43;
                      goto LABEL_3461;
                    }
                  }
                  continue;
                case 0xD6:
                  if ((_DWORD)v23)
                    continue;
                  v1142 = *((_DWORD *)v17 + 14);
                  v1143 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1142 + 1;
                  if (v1142 >= v1143)
                    continue;
                  v1144 = v17[10];
                  if ((unint64_t)v1144 >= *v18)
                  {
                    v23 = 0;
                    v1202 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1144 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1202 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1144 + 1;
                    v1145 = *v1144;
                    if (v16 && v1145 >= 0xC0)
                    {
                      if ((v1145 & 0x20) != 0)
                      {
                        v1229 = v1144[1] & 0x3F;
                        if ((v1145 & 0x10) != 0)
                        {
                          if ((v1145 & 8) != 0)
                          {
                            v1274 = v1144[2] & 0x3F;
                            v1275 = v1144[3] & 0x3F;
                            v1276 = v1144[4] & 0x3F;
                            if ((v1145 & 4) != 0)
                            {
                              v1145 = ((v1145 & 1) << 30) | (v1229 << 24) | (v1274 << 18) | (v1275 << 12) | (v1276 << 6) | v1144[5] & 0x3F;
                              v1230 = v1144 + 6;
                            }
                            else
                            {
                              v1145 = ((v1145 & 3) << 24) | (v1229 << 18) | (v1274 << 12) | (v1275 << 6) | v1276;
                              v1230 = v1144 + 5;
                            }
                          }
                          else
                          {
                            v1145 = ((v1145 & 7) << 18) | (v1229 << 12) | ((v1144[2] & 0x3F) << 6) | v1144[3] & 0x3F;
                            v1230 = v1144 + 4;
                          }
                        }
                        else
                        {
                          v1145 = ((v1145 & 0xF) << 12) | (v1229 << 6) | v1144[2] & 0x3F;
                          v1230 = v1144 + 3;
                        }
                        v17[10] = v1230;
                      }
                      else
                      {
                        v17[10] = v1144 + 2;
                        v1145 = v1144[1] & 0x3F | ((v1145 & 0x1F) << 6);
                      }
                    }
                    if (v1145 < 0x2000)
                    {
                      if (v1145 > 132)
                      {
                        if (v1145 > 5759)
                        {
                          if (v1145 != 5760 && v1145 != 6158)
                          {
LABEL_3202:
                            v23 = 0;
                            if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                          * _pcre2_ucd_stage2_8[v1145 & 0x7F | (_pcre2_ucd_stage1_8[v1145 >> 7] << 7)]
                                                                          + 1]] != 6) == (*((_DWORD *)v17 + 16) == 15))
                              goto LABEL_3532;
                            continue;
                          }
                        }
                        else if (v1145 != 133 && v1145 != 160)
                        {
                          goto LABEL_3202;
                        }
                      }
                      else if (v1145 > 0x20 || ((1 << v1145) & 0x100003E00) == 0)
                      {
                        goto LABEL_3202;
                      }
                    }
                    else if ((v1145 - 0x2000) >= 0xB)
                    {
                      v1304 = (v1145 - 8232) > 0x37
                           || ((1 << (v1145 - 40)) & 0x80000000000083) == 0;
                      if (v1304 && v1145 != 12288)
                        goto LABEL_3202;
                    }
                    v23 = 0;
                    if (*((_DWORD *)v17 + 16) != 15)
                    {
LABEL_3532:
                      v7 = a6;
LABEL_3533:
                      v13 = 0;
                      a2 = *v17;
                      v1377 = -42;
                      goto LABEL_3461;
                    }
                  }
                  continue;
                case 0xD7:
                  if ((_DWORD)v23)
                    continue;
                  v1146 = *((_DWORD *)v17 + 14);
                  v1147 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1146 + 1;
                  if (v1146 >= v1147)
                    continue;
                  v1148 = v17[10];
                  if ((unint64_t)v1148 >= *v18)
                  {
                    v23 = 0;
                    v1203 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1148 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1203 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1148 + 1;
                    v1149 = *v1148;
                    if (v16 && v1149 >= 0xC0)
                    {
                      if ((v1149 & 0x20) != 0)
                      {
                        v1231 = v1148[1] & 0x3F;
                        if ((v1149 & 0x10) != 0)
                        {
                          if ((v1149 & 8) != 0)
                          {
                            v1277 = v1148[2] & 0x3F;
                            v1278 = v1148[3] & 0x3F;
                            v1279 = v1148[4] & 0x3F;
                            if ((v1149 & 4) != 0)
                            {
                              v1149 = ((v1149 & 1) << 30) | (v1231 << 24) | (v1277 << 18) | (v1278 << 12) | (v1279 << 6) | v1148[5] & 0x3F;
                              v1232 = v1148 + 6;
                            }
                            else
                            {
                              v1149 = ((v1149 & 3) << 24) | (v1231 << 18) | (v1277 << 12) | (v1278 << 6) | v1279;
                              v1232 = v1148 + 5;
                            }
                          }
                          else
                          {
                            v1149 = ((v1149 & 7) << 18) | (v1231 << 12) | ((v1148[2] & 0x3F) << 6) | v1148[3] & 0x3F;
                            v1232 = v1148 + 4;
                          }
                        }
                        else
                        {
                          v1149 = ((v1149 & 0xF) << 12) | (v1231 << 6) | v1148[2] & 0x3F;
                          v1232 = v1148 + 3;
                        }
                        v17[10] = v1232;
                      }
                      else
                      {
                        v17[10] = v1148 + 2;
                        v1149 = v1148[1] & 0x3F | ((v1149 & 0x1F) << 6);
                      }
                    }
                    v23 = 0;
                    v1308 = v1149 == 95
                         || (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                     * _pcre2_ucd_stage2_8[v1149 & 0x7F | (_pcre2_ucd_stage1_8[v1149 >> 7] << 7)]
                                                                     + 1]] & 0xFFFFFFFD) == 1;
                    if ((((*((_DWORD *)v17 + 16) != 15) ^ v1308) & 1) == 0)
                    {
                      v7 = a6;
LABEL_3534:
                      v13 = 0;
                      a2 = *v17;
                      v1377 = -41;
                      goto LABEL_3461;
                    }
                  }
                  continue;
                case 0xD8:
                  if ((_DWORD)v23)
                    continue;
                  v1150 = *((_DWORD *)v17 + 14);
                  v1151 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1150 + 1;
                  if (v1150 >= v1151)
                    continue;
                  v1152 = v17[10];
                  if ((unint64_t)v1152 >= *v18)
                  {
                    v23 = 0;
                    v1204 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1152 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1204 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1152 + 1;
                    v1153 = *v1152;
                    if (v16 && v1153 >= 0xC0)
                    {
                      if ((v1153 & 0x20) != 0)
                      {
                        v1233 = v1152[1] & 0x3F;
                        if ((v1153 & 0x10) != 0)
                        {
                          if ((v1153 & 8) != 0)
                          {
                            v1280 = v1152[2] & 0x3F;
                            v1281 = v1152[3] & 0x3F;
                            v1282 = v1152[4] & 0x3F;
                            if ((v1153 & 4) != 0)
                            {
                              v1153 = ((v1153 & 1) << 30) | (v1233 << 24) | (v1280 << 18) | (v1281 << 12) | (v1282 << 6) | v1152[5] & 0x3F;
                              v1234 = v1152 + 6;
                            }
                            else
                            {
                              v1153 = ((v1153 & 3) << 24) | (v1233 << 18) | (v1280 << 12) | (v1281 << 6) | v1282;
                              v1234 = v1152 + 5;
                            }
                          }
                          else
                          {
                            v1153 = ((v1153 & 7) << 18) | (v1233 << 12) | ((v1152[2] & 0x3F) << 6) | v1152[3] & 0x3F;
                            v1234 = v1152 + 4;
                          }
                        }
                        else
                        {
                          v1153 = ((v1153 & 0xF) << 12) | (v1233 << 6) | v1152[2] & 0x3F;
                          v1234 = v1152 + 3;
                        }
                        v17[10] = v1234;
                      }
                      else
                      {
                        v17[10] = v1152 + 2;
                        v1153 = v1152[1] & 0x3F | ((v1153 & 0x1F) << 6);
                      }
                    }
                    v1309 = &_pcre2_ucd_caseless_sets_8[*((unsigned int *)v17 + 17)];
                    do
                    {
                      v1310 = *v1309;
                      if (v1153 < *v1309)
                      {
                        v23 = 0;
                        if (*((_DWORD *)v17 + 16) == 15)
                          goto LABEL_3535;
                        goto LABEL_2584;
                      }
                      ++v1309;
                    }
                    while (v1153 != v1310);
                    v23 = 0;
                    if (*((_DWORD *)v17 + 16) != 15)
                    {
LABEL_3535:
                      v7 = a6;
LABEL_3536:
                      v13 = 0;
                      a2 = *v17;
                      v1377 = -40;
                      goto LABEL_3461;
                    }
                  }
                  continue;
                case 0xD9:
                  if ((_DWORD)v23)
                    continue;
                  v1154 = *((_DWORD *)v17 + 14);
                  v1155 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1154 + 1;
                  if (v1154 >= v1155)
                    continue;
                  v1156 = v17[10];
                  if ((unint64_t)v1156 >= *v18)
                  {
                    v23 = 0;
                    v1205 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1156 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1205 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1156 + 1;
                    v1157 = *v1156;
                    if (v16 && v1157 >= 0xC0)
                    {
                      if ((v1157 & 0x20) != 0)
                      {
                        v1235 = v1156[1] & 0x3F;
                        if ((v1157 & 0x10) != 0)
                        {
                          if ((v1157 & 8) != 0)
                          {
                            v1283 = v1156[2] & 0x3F;
                            v1284 = v1156[3] & 0x3F;
                            v1285 = v1156[4] & 0x3F;
                            if ((v1157 & 4) != 0)
                            {
                              v1157 = ((v1157 & 1) << 30) | (v1235 << 24) | (v1283 << 18) | (v1284 << 12) | (v1285 << 6) | v1156[5] & 0x3F;
                              v1236 = v1156 + 6;
                            }
                            else
                            {
                              v1157 = ((v1157 & 3) << 24) | (v1235 << 18) | (v1283 << 12) | (v1284 << 6) | v1285;
                              v1236 = v1156 + 5;
                            }
                          }
                          else
                          {
                            v1157 = ((v1157 & 7) << 18) | (v1235 << 12) | ((v1156[2] & 0x3F) << 6) | v1156[3] & 0x3F;
                            v1236 = v1156 + 4;
                          }
                        }
                        else
                        {
                          v1157 = ((v1157 & 0xF) << 12) | (v1235 << 6) | v1156[2] & 0x3F;
                          v1236 = v1156 + 3;
                        }
                        v17[10] = v1236;
                      }
                      else
                      {
                        v17[10] = v1156 + 2;
                        v1157 = v1156[1] & 0x3F | ((v1157 & 0x1F) << 6);
                      }
                    }
                    v23 = 0;
                    if (v1157 - 36 > 0x3C || ((1 << (v1157 - 36)) & 0x1000000010000001) == 0)
                    {
                      v1313 = v1157 >> 13 > 6 || (v1157 - 160) >> 5 < 0x6BB;
                      if (((v1313 ^ (*((_DWORD *)v17 + 16) != 15)) & 1) == 0)
                      {
LABEL_3537:
                        v7 = a6;
LABEL_3538:
                        v13 = 0;
                        a2 = *v17;
                        v1377 = -39;
                        goto LABEL_3461;
                      }
                    }
                    else if (*((_DWORD *)v17 + 16) != 15)
                    {
                      goto LABEL_3537;
                    }
                  }
                  continue;
                case 0xDA:
                  if ((_DWORD)v23)
                    continue;
                  v1158 = *((_DWORD *)v17 + 14);
                  v1159 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1158 + 1;
                  if (v1158 >= v1159)
                    continue;
                  v1160 = v17[10];
                  v1161 = *v18;
                  if ((unint64_t)v1160 >= v1161)
                  {
                    v23 = 0;
                    v1162 = *v1424;
                    v18 = v1422;
                    if (*v1424)
                    {
                      if ((unint64_t)v1160 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1162 > 1)
                          return 4294967294;
                      }
                    }
                    continue;
                  }
                  v1374 = v1160 + 1;
                  v17[10] = v1160 + 1;
                  v1375 = *v1160;
                  if (v16)
                  {
                    v7 = a6;
                    if (v1375 >= 0xC0)
                    {
                      if ((v1375 & 0x20) != 0)
                      {
                        v1388 = *v1374 & 0x3F;
                        if ((v1375 & 0x10) != 0)
                        {
                          if ((v1375 & 8) != 0)
                          {
                            v1393 = v1160[2] & 0x3F;
                            v1394 = v1160[3] & 0x3F;
                            v1395 = v1160[4] & 0x3F;
                            if ((v1375 & 4) != 0)
                            {
                              v1375 = ((v1375 & 1) << 30) | (v1388 << 24) | (v1393 << 18) | (v1394 << 12) | (v1395 << 6) | v1160[5] & 0x3F;
                              v1374 = v1160 + 6;
                            }
                            else
                            {
                              v1375 = ((v1375 & 3) << 24) | (v1388 << 18) | (v1393 << 12) | (v1394 << 6) | v1395;
                              v1374 = v1160 + 5;
                            }
                          }
                          else
                          {
                            v1375 = ((v1375 & 7) << 18) | (v1388 << 12) | ((v1160[2] & 0x3F) << 6) | v1160[3] & 0x3F;
                            v1374 = v1160 + 4;
                          }
                        }
                        else
                        {
                          v1375 = ((v1375 & 0xF) << 12) | (v1388 << 6) | v1160[2] & 0x3F;
                          v1374 = v1160 + 3;
                        }
                        v17[10] = v1374;
                      }
                      else
                      {
                        v1374 = v1160 + 2;
                        v17[10] = v1160 + 2;
                        v1375 = v1160[1] & 0x3F | ((v1375 & 0x1F) << 6);
                      }
                    }
                  }
                  else
                  {
                    v7 = a6;
                  }
                  v1397 = _pcre2_extuni_8(v1375, v1374, *(_QWORD *)(a7 + 152), v1161, v1420, 0);
                  a7 = v1425;
                  v17[10] = v1397;
                  if ((unint64_t)v1397 >= *(_QWORD *)(v1425 + 168))
                  {
                    v1398 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1397 > *v1421 || *v1418)
                      {
                        *v1419 = 1;
                        if (v1398 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  goto LABEL_3627;
                case 0xDB:
                  if ((_DWORD)v23)
                    continue;
                  v1163 = *((_DWORD *)v17 + 14);
                  v1164 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1163 + 1;
                  if (v1163 >= v1164)
                    continue;
                  v1165 = v17[10];
                  v1166 = *v18;
                  if ((unint64_t)v1165 >= *v18)
                  {
                    v23 = 0;
                    v1206 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1165 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1206 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    if (*((_DWORD *)v17 + 16) == 12)
                    {
                      v1167 = *(_DWORD *)(a7 + 252);
                      if (v1167)
                      {
                        v1168 = _pcre2_is_newline_8(v17[10], v1167, v1166, v1413, v1420);
                        v18 = v1422;
                        v16 = v1423;
                        a7 = v1425;
                        v1169 = v1168;
                        v23 = 0;
                        if (v1169)
                          continue;
                        v1165 = v17[10];
                      }
                      else
                      {
                        v1246 = *v1413;
                        if ((unint64_t)v1165 <= v1166 - v1246 && *v1165 == *(unsigned __int8 *)(a7 + 260))
                        {
                          v23 = 0;
                          if ((_DWORD)v1246 == 1)
                            continue;
                          v23 = 0;
                          if (v1165[1] == *(unsigned __int8 *)(a7 + 261))
                            continue;
                        }
                      }
                    }
                    v1247 = v1165 + 1;
                    v17[10] = v1165 + 1;
                    v1248 = *v1165;
                    if (v1248 >= 0xC0)
                    {
                      if ((v1248 & 0x20) != 0)
                      {
                        v1249 = *v1247 & 0x3F;
                        if ((v1248 & 0x10) != 0)
                        {
                          if ((v1248 & 8) != 0)
                          {
                            v1298 = v1165[2] & 0x3F;
                            v1299 = v1165[3] & 0x3F;
                            v1300 = v1165[4] & 0x3F;
                            if ((v1248 & 4) != 0)
                            {
                              v1248 = ((v1248 & 1) << 30) | (v1249 << 24) | (v1298 << 18) | (v1299 << 12) | (v1300 << 6) | v1165[5] & 0x3F;
                              v1247 = v1165 + 6;
                            }
                            else
                            {
                              v1248 = ((v1248 & 3) << 24) | (v1249 << 18) | (v1298 << 12) | (v1299 << 6) | v1300;
                              v1247 = v1165 + 5;
                            }
                          }
                          else
                          {
                            v1248 = ((v1248 & 7) << 18) | (v1249 << 12) | ((v1165[2] & 0x3F) << 6) | v1165[3] & 0x3F;
                            v1247 = v1165 + 4;
                          }
                        }
                        else
                        {
                          v1248 = ((v1248 & 0xF) << 12) | (v1249 << 6) | v1165[2] & 0x3F;
                          v1247 = v1165 + 3;
                        }
                        v17[10] = v1247;
                      }
                      else
                      {
                        v1247 = v1165 + 2;
                        v17[10] = v1165 + 2;
                        v1248 = v1165[1] & 0x3F | ((v1248 & 0x1F) << 6);
                      }
                    }
                    v22 = 4294967252;
                    switch(*((_DWORD *)v17 + 16))
                    {
                      case 6:
                        if (v1248 > 0xFF)
                          goto LABEL_3637;
                        v23 = 0;
                        if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v1248) & 8) == 0)
                          goto LABEL_3637;
                        continue;
                      case 7:
                        v23 = 0;
                        if (v1248 <= 0xFF)
                        {
                          v23 = 0;
                          if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v1248) & 8) != 0)
                            goto LABEL_3637;
                        }
                        continue;
                      case 8:
                        if (v1248 > 0xFF)
                          goto LABEL_3637;
                        v23 = 0;
                        if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v1248) & 1) == 0)
                          goto LABEL_3637;
                        continue;
                      case 9:
                        v23 = 0;
                        if (v1248 <= 0xFF)
                        {
                          v23 = 0;
                          if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v1248) & 1) != 0)
                            goto LABEL_3637;
                        }
                        continue;
                      case 0xA:
                        if (v1248 > 0xFF)
                          goto LABEL_3637;
                        v23 = 0;
                        if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v1248) & 0x10) == 0)
                          goto LABEL_3637;
                        continue;
                      case 0xB:
                        v23 = 0;
                        if (v1248 <= 0xFF)
                        {
                          v23 = 0;
                          if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + v1248) & 0x10) != 0)
                            goto LABEL_3637;
                        }
                        continue;
                      case 0xC:
                        v1396 = *v1424;
                        if (!*v1424
                          || (unint64_t)v1247 < *v18
                          || *(_DWORD *)(v1425 + 252)
                          || *v1413 != 2
                          || v1248 != *(unsigned __int8 *)(v1425 + 260))
                        {
                          goto LABEL_3636;
                        }
                        *v1419 = 1;
                        a7 = v1425;
                        if (v1396 > 1)
                          return 4294967294;
                        goto LABEL_3637;
                      case 0xD:
                      case 0xE:
                        goto LABEL_3637;
                      case 0x11:
                        v23 = 0;
                        if (v1248 > 132)
                        {
                          if ((v1248 - 8232) >= 2 && v1248 != 133)
                            continue;
LABEL_3313:
                          v23 = 0;
                          if (*(_WORD *)(a7 + 130) != 2)
                            goto LABEL_3637;
                          continue;
                        }
                        if ((v1248 - 11) < 2)
                          goto LABEL_3313;
                        if (v1248 == 10)
                          goto LABEL_3637;
                        if (v1248 == 13)
                        {
                          if ((unint64_t)v1247 < *v18 && *v1247 == 10)
                            v17[10] = v1247 + 1;
LABEL_3636:
                          a7 = v1425;
                          goto LABEL_3637;
                        }
                        break;
                      case 0x12:
                        v23 = 0;
                        if (v1248 < 0x2000)
                        {
                          if (v1248 <= 159)
                          {
                            if (v1248 != 9 && v1248 != 32)
                              goto LABEL_3637;
                          }
                          else if (v1248 != 160 && v1248 != 5760 && v1248 != 6158)
                          {
                            goto LABEL_3637;
                          }
                        }
                        else if (v1248 > 8238)
                        {
                          if (v1248 != 8239 && v1248 != 8287 && v1248 != 12288)
                            goto LABEL_3637;
                        }
                        else if ((v1248 - 0x2000) >= 0xB)
                        {
                          goto LABEL_3637;
                        }
                        continue;
                      case 0x13:
                        v23 = 0;
                        if (v1248 < 0x2000)
                        {
                          if (v1248 <= 159)
                          {
                            if (v1248 == 9 || v1248 == 32)
                              goto LABEL_3637;
                          }
                          else if (v1248 == 160 || v1248 == 5760 || v1248 == 6158)
                          {
                            goto LABEL_3637;
                          }
                        }
                        else if (v1248 > 8238)
                        {
                          if (v1248 == 8239 || v1248 == 8287 || v1248 == 12288)
                            goto LABEL_3637;
                        }
                        else if ((v1248 - 0x2000) < 0xB)
                        {
                          goto LABEL_3637;
                        }
                        continue;
                      case 0x14:
                        v23 = 0;
                        v1317 = (v1248 - 10) >= 4 && (v1248 - 8232) >= 2;
                        if (v1317 && v1248 != 133)
                          goto LABEL_3637;
                        continue;
                      case 0x15:
                        if ((v1248 - 10) < 4 || (v1248 - 8232) < 2)
                          goto LABEL_3637;
                        v23 = 0;
                        if (v1248 == 133)
                          goto LABEL_3637;
                        continue;
                      default:
                        return v22;
                    }
                  }
                  continue;
                case 0xDC:
                  if ((_DWORD)v23)
                    continue;
                  v1331 = v17[10];
                  v651 = v1331 - 1;
                  v17[10] = v1331 - 1;
                  v1332 = *(v1331 - 1);
                  if (!v16)
                    goto LABEL_3438;
                  if ((v1332 & 0xC0) == 0x80)
                  {
                    v1333 = v1331 - 2;
                    do
                    {
                      v17[10] = v1333;
                      v1334 = *v1333--;
                      v1332 = v1334;
                    }
                    while ((v1334 & 0xC0) == 0x80);
                    v651 = v1333 + 1;
                  }
                  if (v1332 < 0xC0)
                    goto LABEL_3438;
                  v1335 = v651[1] & 0x3F;
                  if ((v1332 & 0x20) == 0)
                  {
                    v1332 = v651[1] & 0x3F | ((v1332 & 0x1F) << 6);
                    goto LABEL_3438;
                  }
                  if ((v1332 & 0x10) != 0)
                  {
                    if ((v1332 & 8) != 0)
                    {
                      v1345 = v651[2] & 0x3F;
                      v1346 = v651[3] & 0x3F;
                      v1347 = v651[4] & 0x3F;
                      if ((v1332 & 4) == 0)
                      {
                        v1332 = ((v1332 & 3) << 24) | (v1335 << 18) | (v1345 << 12) | (v1346 << 6) | v1347;
                        goto LABEL_3438;
                      }
                      v1343 = ((v1332 & 1) << 30) | (v1335 << 24) | (v1345 << 18) | (v1346 << 12) | (v1347 << 6);
                      v1344 = v651[5];
                    }
                    else
                    {
                      v1343 = ((v1332 & 7) << 18) | (v1335 << 12) | ((v651[2] & 0x3F) << 6);
                      v1344 = v651[3];
                    }
                  }
                  else
                  {
                    v1343 = ((v1332 & 0xF) << 12) | (v1335 << 6);
                    v1344 = v651[2];
                  }
                  v1332 = v1343 & 0xFFFFFFC0 | v1344 & 0x3F;
LABEL_3438:
                  v791 = v17[1];
                  if (v651 <= v791)
                    goto LABEL_2581;
                  v1348 = _pcre2_ucd_records_8[12
                                             * _pcre2_ucd_stage2_8[v1332 & 0x7F | (_pcre2_ucd_stage1_8[v1332 >> 7] << 7)]
                                             + 2];
                  v1349 = v651;
                  break;
                case 0xDD:
                  if ((_DWORD)v23)
                    continue;
                  v1050 = v17[10] - 1;
                  do
                  {
                    v17[10] = v1050;
                    v1337 = *v1050--;
                    v1336 = v1337;
                  }
                  while ((v1337 & 0xC0) == 0x80);
                  if (*((_DWORD *)v17 + 16) == 17
                    && (v1336 == 10 ? (v1338 = v1050 + 1 > v17[1]) : (v1338 = 0), v1338 && *v1050 == 13))
                  {
                    v17[10] = v1050;
                  }
                  else
                  {
                    ++v1050;
                  }
                  goto LABEL_3412;
                case 0xDE:
                  if ((_DWORD)v23)
                    continue;
                  v1339 = v17[10];
                  v789 = v1339 - 1;
                  v17[10] = v1339 - 1;
                  if (v16 && (*v789 & 0xC0) == 0x80)
                  {
                    v1340 = v1339 - 2;
                    do
                    {
                      v17[10] = v1340;
                      v1341 = *v1340--;
                    }
                    while ((v1341 & 0xC0) == 0x80);
                    v789 = v1340 + 1;
                  }
                  goto LABEL_1770;
                case 0xDF:
                  if ((_DWORD)v23)
                    continue;
                  v1170 = *((_DWORD *)v17 + 14);
                  v1171 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1170 + 1;
                  if (v1170 >= v1171)
                    continue;
                  v1172 = v17[10];
                  if ((unint64_t)v1172 >= *v18)
                  {
                    v23 = 0;
                    v1207 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1172 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1207 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1172 + 1;
                    v1173 = *v1172;
                    if (v16 && v1173 >= 0xC0)
                    {
                      if ((v1173 & 0x20) != 0)
                      {
                        v1237 = v1172[1] & 0x3F;
                        if ((v1173 & 0x10) != 0)
                        {
                          if ((v1173 & 8) != 0)
                          {
                            v1286 = v1172[2] & 0x3F;
                            v1287 = v1172[3] & 0x3F;
                            v1288 = v1172[4] & 0x3F;
                            if ((v1173 & 4) != 0)
                            {
                              v1173 = ((v1173 & 1) << 30) | (v1237 << 24) | (v1286 << 18) | (v1287 << 12) | (v1288 << 6) | v1172[5] & 0x3F;
                              v1238 = v1172 + 6;
                            }
                            else
                            {
                              v1173 = ((v1173 & 3) << 24) | (v1237 << 18) | (v1286 << 12) | (v1287 << 6) | v1288;
                              v1238 = v1172 + 5;
                            }
                          }
                          else
                          {
                            v1173 = ((v1173 & 7) << 18) | (v1237 << 12) | ((v1172[2] & 0x3F) << 6) | v1172[3] & 0x3F;
                            v1238 = v1172 + 4;
                          }
                        }
                        else
                        {
                          v1173 = ((v1173 & 0xF) << 12) | (v1237 << 6) | v1172[2] & 0x3F;
                          v1238 = v1172 + 3;
                        }
                        v17[10] = v1238;
                      }
                      else
                      {
                        v17[10] = v1172 + 2;
                        v1173 = v1172[1] & 0x3F | ((v1173 & 0x1F) << 6);
                      }
                    }
                    v23 = 0;
                    if ((((*((_DWORD *)v17 + 16) != 15) ^ (*(_DWORD *)((char *)&_pcre2_ucd_BOOLprop_sets_8[*(_WORD *)&_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v1173 & 0x7F | (_pcre2_ucd_stage1_8[v1173 >> 7] << 7)] + 10] & 0xFFF]
                                                                      + (((unint64_t)*((unsigned int *)v17 + 17) >> 3) & 0x1FFFFFFC)) >> *((_DWORD *)v17 + 17))) & 1) == 0)
                    {
                      v7 = a6;
LABEL_3539:
                      v13 = 0;
                      a2 = *v17;
                      v1377 = -33;
                      goto LABEL_3461;
                    }
                  }
                  continue;
                case 0xE0:
                  if ((_DWORD)v23)
                    continue;
                  v1174 = *((_DWORD *)v17 + 14);
                  v1175 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1174 + 1;
                  if (v1174 >= v1175)
                    continue;
                  v1176 = v17[10];
                  if ((unint64_t)v1176 >= *v18)
                  {
                    v23 = 0;
                    v1208 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1176 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1208 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1176 + 1;
                    v1177 = *v1176;
                    if (v16 && v1177 >= 0xC0)
                    {
                      if ((v1177 & 0x20) != 0)
                      {
                        v1239 = v1176[1] & 0x3F;
                        if ((v1177 & 0x10) != 0)
                        {
                          if ((v1177 & 8) != 0)
                          {
                            v1289 = v1176[2] & 0x3F;
                            v1290 = v1176[3] & 0x3F;
                            v1291 = v1176[4] & 0x3F;
                            if ((v1177 & 4) != 0)
                            {
                              v1177 = ((v1177 & 1) << 30) | (v1239 << 24) | (v1289 << 18) | (v1290 << 12) | (v1291 << 6) | v1176[5] & 0x3F;
                              v1240 = v1176 + 6;
                            }
                            else
                            {
                              v1177 = ((v1177 & 3) << 24) | (v1239 << 18) | (v1289 << 12) | (v1290 << 6) | v1291;
                              v1240 = v1176 + 5;
                            }
                          }
                          else
                          {
                            v1177 = ((v1177 & 7) << 18) | (v1239 << 12) | ((v1176[2] & 0x3F) << 6) | v1176[3] & 0x3F;
                            v1240 = v1176 + 4;
                          }
                        }
                        else
                        {
                          v1177 = ((v1177 & 0xF) << 12) | (v1239 << 6) | v1176[2] & 0x3F;
                          v1240 = v1176 + 3;
                        }
                        v17[10] = v1240;
                      }
                      else
                      {
                        v17[10] = v1176 + 2;
                        v1177 = v1176[1] & 0x3F | ((v1177 & 0x1F) << 6);
                      }
                    }
                    v23 = 0;
                    if ((*((_DWORD *)v17 + 17) != *(unsigned __int16 *)&_pcre2_ucd_records_8[12
                                                                                            * _pcre2_ucd_stage2_8[v1177 & 0x7F | (_pcre2_ucd_stage1_8[v1177 >> 7] << 7)]
                                                                                            + 8] >> 11) == (*((_DWORD *)v17 + 16) == 15))
                    {
                      v7 = a6;
LABEL_3540:
                      v13 = 0;
                      a2 = *v17;
                      v1377 = -32;
                      goto LABEL_3461;
                    }
                  }
                  continue;
                case 0xE1:
                  if ((_DWORD)v23)
                    continue;
                  v1178 = *((_DWORD *)v17 + 14);
                  v1179 = *((_DWORD *)v17 + 15);
                  *((_DWORD *)v17 + 14) = v1178 + 1;
                  if (v1178 >= v1179)
                    continue;
                  v1180 = v17[10];
                  if ((unint64_t)v1180 >= *v18)
                  {
                    v23 = 0;
                    v1209 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v1180 > *v1421 || (v23 = 0, *v1418))
                      {
                        v23 = 0;
                        *v1419 = 1;
                        if (v1209 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v17[10] = v1180 + 1;
                    v1181 = *v1180;
                    if (v16 && v1181 >= 0xC0)
                    {
                      if ((v1181 & 0x20) != 0)
                      {
                        v1241 = v1180[1] & 0x3F;
                        if ((v1181 & 0x10) != 0)
                        {
                          if ((v1181 & 8) != 0)
                          {
                            v1292 = v1180[2] & 0x3F;
                            v1293 = v1180[3] & 0x3F;
                            v1294 = v1180[4] & 0x3F;
                            if ((v1181 & 4) != 0)
                            {
                              v1181 = ((v1181 & 1) << 30) | (v1241 << 24) | (v1292 << 18) | (v1293 << 12) | (v1294 << 6) | v1180[5] & 0x3F;
                              v1242 = v1180 + 6;
                            }
                            else
                            {
                              v1181 = ((v1181 & 3) << 24) | (v1241 << 18) | (v1292 << 12) | (v1293 << 6) | v1294;
                              v1242 = v1180 + 5;
                            }
                          }
                          else
                          {
                            v1181 = ((v1181 & 7) << 18) | (v1241 << 12) | ((v1180[2] & 0x3F) << 6) | v1180[3] & 0x3F;
                            v1242 = v1180 + 4;
                          }
                        }
                        else
                        {
                          v1181 = ((v1181 & 0xF) << 12) | (v1241 << 6) | v1180[2] & 0x3F;
                          v1242 = v1180 + 3;
                        }
                        v17[10] = v1242;
                      }
                      else
                      {
                        v17[10] = v1180 + 2;
                        v1181 = v1180[1] & 0x3F | ((v1181 & 0x1F) << 6);
                      }
                    }
                    v1314 = _pcre2_ucd_stage2_8[v1181 & 0x7F | (_pcre2_ucd_stage1_8[v1181 >> 7] << 7)];
                    v1315 = *((unsigned int *)v17 + 17);
                    if ((_DWORD)v1315 == _pcre2_ucd_records_8[12 * v1314])
                    {
                      v23 = 0;
                      if (*((_DWORD *)v17 + 16) != 15)
                        goto LABEL_3541;
                    }
                    else
                    {
                      v23 = 0;
                      if ((((*((_DWORD *)v17 + 16) != 15) ^ (*(_DWORD *)((char *)&_pcre2_ucd_script_sets_8[*(_WORD *)&_pcre2_ucd_records_8[12 * v1314 + 8] & 0x3FF]
                                                                        + ((v1315 >> 3) & 0x1FFFFFFC)) >> v1315)) & 1) == 0)
                      {
LABEL_3541:
                        v7 = a6;
LABEL_3542:
                        v13 = 0;
                        a2 = *v17;
                        v1377 = -31;
                        goto LABEL_3461;
                      }
                    }
                  }
                  continue;
                default:
                  if (v1059 == 100)
                  {
                    if (!(_DWORD)v23)
                    {
                      v1182 = *((_DWORD *)v17 + 14);
                      v1183 = *((_DWORD *)v17 + 15);
                      *((_DWORD *)v17 + 14) = v1182 + 1;
                      if (v1182 < v1183)
                      {
                        v1080 = v17[10];
                        if ((unint64_t)v1080 >= *v18)
                        {
LABEL_2895:
                          v23 = 0;
                          v1193 = *v1424;
                          if (*v1424)
                          {
                            if ((unint64_t)v1080 > *v1421 || (v23 = 0, *v1418))
                            {
                              v23 = 0;
                              *v1419 = 1;
                              if (v1193 > 1)
                                return 4294967294;
                            }
                          }
                        }
                        else
                        {
                          v17[10] = v1080 + 1;
                          v1184 = *v1080;
                          if (v16 && v1184 >= 0xC0)
                          {
                            if ((v1184 & 0x20) != 0)
                            {
                              v1243 = v1080[1] & 0x3F;
                              if ((v1184 & 0x10) != 0)
                              {
                                if ((v1184 & 8) != 0)
                                {
                                  v1295 = v1080[2] & 0x3F;
                                  v1296 = v1080[3] & 0x3F;
                                  v1297 = v1080[4] & 0x3F;
                                  if ((v1184 & 4) != 0)
                                  {
                                    v1184 = ((v1184 & 1) << 30) | (v1243 << 24) | (v1295 << 18) | (v1296 << 12) | (v1297 << 6) | v1080[5] & 0x3F;
                                    v1244 = v1080 + 6;
                                  }
                                  else
                                  {
                                    v1184 = ((v1184 & 3) << 24) | (v1243 << 18) | (v1295 << 12) | (v1296 << 6) | v1297;
                                    v1244 = v1080 + 5;
                                  }
                                }
                                else
                                {
                                  v1184 = ((v1184 & 7) << 18) | (v1243 << 12) | ((v1080[2] & 0x3F) << 6) | v1080[3] & 0x3F;
                                  v1244 = v1080 + 4;
                                }
                              }
                              else
                              {
                                v1184 = ((v1184 & 0xF) << 12) | (v1243 << 6) | v1080[2] & 0x3F;
                                v1244 = v1080 + 3;
                              }
                              v17[10] = v1244;
                            }
                            else
                            {
                              v17[10] = v1080 + 2;
                              v1184 = v1080[1] & 0x3F | ((v1184 & 0x1F) << 6);
                            }
                          }
                          v1316 = _pcre2_xclass_8(v1184, v17[2]);
                          v23 = 0;
                          a7 = v1425;
                          v16 = v1423;
                          v18 = v1422;
                          if (v1316)
                            goto LABEL_3603;
                        }
                      }
                    }
                  }
                  else
                  {
                    if (v1059 != 101)
                      return v22;
                    if (!(_DWORD)v23)
                    {
                      v1064 = v17[10];
                      v17[10] = v1064 - 1;
                      if (v1064 > v17[1])
                      {
                        if (v16 && (*(v1064 - 1) & 0xC0) == 0x80)
                        {
                          v1367 = v1064 - 2;
                          do
                          {
                            v17[10] = v1367;
                            v1368 = *v1367--;
                          }
                          while ((v1368 & 0xC0) == 0x80);
                        }
                        v223 = v12;
LABEL_3474:
                        v13 = 0;
                        a2 = *v17;
                        v1377 = 101;
                        v12 = v223;
                        goto LABEL_3460;
                      }
                    }
                  }
                  continue;
              }
              while (1)
              {
                if (v16)
                {
                  do
                  {
                    v1351 = *--v1349;
                    v1350 = v1351;
                  }
                  while ((v1351 & 0xC0) == 0x80);
                  if (v1350 < 0xC0)
                    goto LABEL_3446;
                  v1352 = v1349[1] & 0x3F;
                  if ((v1350 & 0x20) != 0)
                  {
                    if ((v1350 & 0x10) == 0)
                    {
                      v1354 = ((v1350 & 0xF) << 12) | (v1352 << 6);
                      v1355 = v1349[2];
LABEL_3456:
                      v1350 = v1354 & 0xFFFFFFC0 | v1355 & 0x3F;
                      goto LABEL_3446;
                    }
                    if ((v1350 & 8) == 0)
                    {
                      v1354 = ((v1350 & 7) << 18) | (v1352 << 12) | ((v1349[2] & 0x3F) << 6);
                      v1355 = v1349[3];
                      goto LABEL_3456;
                    }
                    v1356 = v1349[2] & 0x3F;
                    v1357 = v1349[3] & 0x3F;
                    v1358 = v1349[4] & 0x3F;
                    if ((v1350 & 4) != 0)
                    {
                      v1354 = ((v1350 & 1) << 30) | (v1352 << 24) | (v1356 << 18) | (v1357 << 12) | (v1358 << 6);
                      v1355 = v1349[5];
                      goto LABEL_3456;
                    }
                    v1350 = ((v1350 & 3) << 24) | (v1352 << 18) | (v1356 << 12) | (v1357 << 6) | v1358;
                  }
                  else
                  {
                    v1350 = v1349[1] & 0x3F | ((v1350 & 0x1F) << 6);
                  }
                }
                else
                {
                  v1349 = v651 - 1;
                  v1350 = *(v651 - 1);
                }
LABEL_3446:
                v1353 = _pcre2_ucd_records_8[12
                                           * _pcre2_ucd_stage2_8[v1350 & 0x7F | (_pcre2_ucd_stage1_8[v1350 >> 7] << 7)]
                                           + 2];
                if (((_pcre2_ucp_gbtable_8[v1353] >> v1348) & 1) == 0)
                  goto LABEL_2581;
                v17[10] = v1349;
                v1348 = v1353;
                v651 = v1349;
                if (v1349 <= v791)
                {
                  v651 = v1349;
LABEL_2581:
                  if (v651 > v791)
                  {
                    v13 = 0;
                    a2 = *v17;
                    v1377 = -36;
                    goto LABEL_3460;
                  }
                  goto LABEL_8;
                }
              }
            }
            return v23;
          }
        case 0x1Fu:
        case 0x20u:
          v53 = v17[10];
          if ((unint64_t)v53 >= *v18)
          {
LABEL_179:
            v119 = *v1424;
            if (*v1424)
            {
              if ((unint64_t)v53 <= *v1421)
                goto LABEL_1956;
              goto LABEL_1957;
            }
            goto LABEL_1958;
          }
          if (!v16)
          {
            if ((v1409 & 0x20000) == 0)
            {
              v311 = v20[1];
              v17[10] = v53 + 1;
              v312 = *v53;
              if ((_DWORD)v311 == v312 || v21 == 32 && *(unsigned __int8 *)(*(_QWORD *)(a7 + 96) + v311) == v312)
                goto LABEL_1958;
              goto LABEL_2001;
            }
            v17[10] = v53 + 1;
            v300 = *v53;
            v510 = v20[1];
            *v17 = v20 + 2;
            if (v510 == v300)
              goto LABEL_1958;
            if (v21 != 32)
              continue;
            if ((v510 & 0x80) != 0)
              v379 = *(_DWORD *)&_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v510 & 0x7F | 0x80] + 4] + v510;
            else
              v379 = *(unsigned __int8 *)(*(_QWORD *)(a7 + 96) + v510);
LABEL_776:
            v23 = 0;
            if (v379 != v300)
              continue;
            goto LABEL_2584;
          }
          *v17 = v20 + 2;
          v55 = v20[1];
          if (v55 >= 0xC0)
          {
            if ((v55 & 0x20) != 0)
            {
              v543 = v20[2] & 0x3F;
              if ((v55 & 0x10) != 0)
              {
                if ((v55 & 8) != 0)
                {
                  v864 = v20[3] & 0x3F;
                  v865 = v20[4] & 0x3F;
                  v866 = v20[5] & 0x3F;
                  if ((v55 & 4) != 0)
                  {
                    v55 = ((v55 & 1) << 30) | (v543 << 24) | (v864 << 18) | (v865 << 12) | (v866 << 6) | v20[6] & 0x3F;
                    v544 = v20 + 7;
                  }
                  else
                  {
                    v55 = ((v55 & 3) << 24) | (v543 << 18) | (v864 << 12) | (v865 << 6) | v866;
                    v544 = v20 + 6;
                  }
                }
                else
                {
                  v55 = ((v55 & 7) << 18) | (v543 << 12) | ((v20[3] & 0x3F) << 6) | v20[4] & 0x3F;
                  v544 = v20 + 5;
                }
              }
              else
              {
                v55 = ((v55 & 0xF) << 12) | (v543 << 6) | v20[3] & 0x3F;
                v544 = v20 + 4;
              }
              *v17 = v544;
            }
            else
            {
              *v17 = v20 + 3;
              v55 = v20[2] & 0x3F | ((v55 & 0x1F) << 6);
            }
          }
          v17[10] = v53 + 1;
          v1032 = *v53;
          if (v1032 >= 0xC0)
          {
            if ((v1032 & 0x20) != 0)
            {
              v1033 = v53[1] & 0x3F;
              if ((v1032 & 0x10) != 0)
              {
                if ((v1032 & 8) != 0)
                {
                  v1035 = v53[2] & 0x3F;
                  v1036 = v53[3] & 0x3F;
                  v1037 = v53[4] & 0x3F;
                  if ((v1032 & 4) != 0)
                  {
                    v1032 = ((v1032 & 1) << 30) | (v1033 << 24) | (v1035 << 18) | (v1036 << 12) | (v1037 << 6) | v53[5] & 0x3F;
                    v1034 = v53 + 6;
                  }
                  else
                  {
                    v1032 = ((v1032 & 3) << 24) | (v1033 << 18) | (v1035 << 12) | (v1036 << 6) | v1037;
                    v1034 = v53 + 5;
                  }
                }
                else
                {
                  v1032 = ((v1032 & 7) << 18) | (v1033 << 12) | ((v53[2] & 0x3F) << 6) | v53[3] & 0x3F;
                  v1034 = v53 + 4;
                }
              }
              else
              {
                v1032 = ((v1032 & 0xF) << 12) | (v1033 << 6) | v53[2] & 0x3F;
                v1034 = v53 + 3;
              }
              v17[10] = v1034;
            }
            else
            {
              v17[10] = v53 + 2;
              v1032 = v53[1] & 0x3F | ((v1032 & 0x1F) << 6);
            }
          }
          if (v55 == v1032)
            goto LABEL_1958;
          if (v21 == 32)
          {
            v1048 = v55 < 0x80
                  ? *(unsigned __int8 *)(*(_QWORD *)(a7 + 96) + v55)
                  : *(_DWORD *)&_pcre2_ucd_records_8[12
                                                   * _pcre2_ucd_stage2_8[v55 & 0x7F | (_pcre2_ucd_stage1_8[v55 >> 7] << 7)]
                                                   + 4]
                  + v55;
            v23 = 0;
            if (v1048 == v1032)
              goto LABEL_2584;
          }
          continue;
        case 0x21u:
        case 0x22u:
        case 0x23u:
        case 0x24u:
        case 0x25u:
        case 0x26u:
        case 0x2Eu:
        case 0x2Fu:
        case 0x30u:
        case 0x31u:
        case 0x32u:
        case 0x33u:
          v24 = v20 + 1;
          *v17 = v20 + 1;
          v25 = *v20;
          if (v21 >= 0x2E)
            v26 = -46;
          else
            v26 = -33;
          v27 = v26 + v25;
          v28 = dword_1A3ACE99C[v27];
          *((_DWORD *)v17 + 14) = v28;
          v29 = dword_1A3ACE9C8[v27];
          *((_DWORD *)v17 + 15) = v29;
          v30 = dword_1A3ACE9F4[v27];
          if (v16)
            goto LABEL_60;
          goto LABEL_58;
        case 0x27u:
        case 0x34u:
          v28 = 0;
          *((_DWORD *)v17 + 14) = 0;
          v29 = __rev16(*(unsigned __int16 *)(v20 + 1));
          *((_DWORD *)v17 + 15) = v29;
          v24 = v20 + 3;
          *v17 = v20 + 3;
          v30 = 1;
          if (v16)
            goto LABEL_60;
          goto LABEL_58;
        case 0x28u:
        case 0x35u:
          v28 = 0;
          v30 = 0;
          *((_DWORD *)v17 + 14) = 0;
          v29 = __rev16(*(unsigned __int16 *)(v20 + 1));
          *((_DWORD *)v17 + 15) = v29;
          v24 = v20 + 3;
          *v17 = v20 + 3;
          if (v16)
            goto LABEL_60;
          goto LABEL_58;
        case 0x29u:
        case 0x36u:
          v29 = __rev16(*(unsigned __int16 *)(v20 + 1));
          *((_DWORD *)v17 + 14) = v29;
          *((_DWORD *)v17 + 15) = v29;
          v24 = v20 + 3;
          *v17 = v20 + 3;
          v28 = v29;
          v30 = v12;
          if (v16)
            goto LABEL_60;
          goto LABEL_58;
        case 0x2Au:
        case 0x37u:
          v28 = 0;
          v17[7] = (unsigned __int8 *)0xFFFFFFFF00000000;
          v24 = v20 + 1;
          *v17 = v20 + 1;
          v30 = 2;
          goto LABEL_55;
        case 0x2Bu:
        case 0x38u:
          v17[7] = (unsigned __int8 *)0xFFFFFFFF00000001;
          v24 = v20 + 1;
          *v17 = v20 + 1;
          v30 = 2;
          v28 = 1;
LABEL_55:
          v29 = -1;
          if (v16)
            goto LABEL_60;
          goto LABEL_58;
        case 0x2Cu:
        case 0x39u:
          v28 = 0;
          v17[7] = (unsigned __int8 *)0x100000000;
          v24 = v20 + 1;
          *v17 = v20 + 1;
          v30 = 2;
          v29 = 1;
          if (!v16)
            goto LABEL_58;
          goto LABEL_60;
        case 0x2Du:
        case 0x3Au:
          v28 = 0;
          *((_DWORD *)v17 + 14) = 0;
          v29 = __rev16(*(unsigned __int16 *)(v20 + 1));
          *((_DWORD *)v17 + 15) = v29;
          v24 = v20 + 3;
          *v17 = v20 + 3;
          v30 = 2;
          if (!v16)
          {
LABEL_58:
            a2 = v24 + 1;
            *v17 = v24 + 1;
            v56 = *v24;
            goto LABEL_64;
          }
LABEL_60:
          v17[2] = v24;
          v17[3] = (unsigned __int8 *)1;
          v56 = *v24;
          if (v56 < 0xC0)
          {
            a2 = v24 + 1;
            *v17 = v24 + 1;
LABEL_64:
            *((_DWORD *)v17 + 16) = v56;
            if (v21 <= 0x2D)
            {
              if (v28)
              {
                v61 = 0;
                v62 = *v18;
                v63 = v17[10];
                while (1)
                {
                  v64 = &v63[v61];
                  if ((unint64_t)&v63[v61] >= v62)
                    break;
                  v17[10] = v64 + 1;
                  if (v56 != *v64)
                    goto LABEL_114;
                  if ((int)++v61 + 1 > v28)
                    goto LABEL_73;
                }
                v81 = *v1424;
                if (!*v1424)
                  goto LABEL_114;
                if ((unint64_t)v64 <= *v1421)
                  goto LABEL_112;
                goto LABEL_113;
              }
LABEL_73:
              v12 = v30;
              if (v29 == v28)
                continue;
              if (!(_DWORD)v30)
              {
                v12 = 0;
                v13 = 0;
LABEL_3522:
                v1377 = 27;
                goto LABEL_3460;
              }
              v65 = v17[10];
              v17[1] = v65;
              v66 = v65;
              v265 = v29 >= v28;
              v67 = v29 - v28;
              if (v67 != 0 && v265)
              {
                v68 = *v18;
                v66 = v65;
                while ((unint64_t)v66 < v68)
                {
                  if (v56 == *v66)
                  {
                    v17[10] = ++v66;
                    if (--v67)
                      continue;
                  }
                  goto LABEL_648;
                }
                v318 = *v1424;
                if (*v1424 && ((unint64_t)v66 > *v1421 || *v1418))
                {
                  *v1419 = 1;
                  if (v318 > 1)
                    return 4294967294;
                }
              }
LABEL_648:
              v12 = 2;
              if ((_DWORD)v30 == 2)
                continue;
LABEL_3362:
              v12 = v30;
              if (v66 > v65)
              {
                v13 = 0;
                a2 = *v17;
                v1377 = 28;
                goto LABEL_3520;
              }
            }
            else
            {
              if (v1417 == 0x20000 && v56 >= 0x80)
                v60 = *(_DWORD *)&_pcre2_ucd_records_8[12
                                                     * _pcre2_ucd_stage2_8[v56 & 0x7F | (_pcre2_ucd_stage1_8[v56 >> 7] << 7)]
                                                     + 4]
                    + v56;
              else
                v60 = *(unsigned __int8 *)(*(_QWORD *)(a7 + 96) + v56);
              *((_DWORD *)v17 + 17) = v60;
              if (v28)
              {
                v69 = 0;
                v70 = *v18;
                v71 = v17[10];
                while (1)
                {
                  v72 = &v71[v69];
                  if ((unint64_t)&v71[v69] >= v70)
                    break;
                  v73 = *v72;
                  v74 = v56 == v73 || v60 == v73;
                  if (!v74)
                    goto LABEL_114;
                  v17[10] = &v71[++v69];
                  if ((int)v69 + 1 > v28)
                    goto LABEL_92;
                }
                v81 = *v1424;
                if (!*v1424)
                  goto LABEL_114;
                if ((unint64_t)v72 <= *v1421)
                {
LABEL_112:
                  if (*v1418)
                    goto LABEL_113;
LABEL_114:
                  v23 = 0;
                  v12 = v30;
                  goto LABEL_2584;
                }
LABEL_113:
                *v1419 = 1;
                if (v81 > 1)
                  return 4294967294;
                goto LABEL_114;
              }
LABEL_92:
              v12 = v30;
              if (v29 == v28)
                continue;
              if (!(_DWORD)v30)
              {
                v12 = 0;
                v13 = 0;
LABEL_3506:
                v1377 = 25;
                goto LABEL_3460;
              }
              v75 = v17[10];
              v17[1] = v75;
              v76 = v75;
              v265 = v29 >= v28;
              v77 = v29 - v28;
              if (v77 != 0 && v265)
              {
                v78 = *v18;
                v76 = v75;
                while ((unint64_t)v76 < v78)
                {
                  v79 = *v76;
                  if (v56 == v79 || v60 == v79)
                  {
                    v17[10] = ++v76;
                    if (--v77)
                      continue;
                  }
                  goto LABEL_654;
                }
                v319 = *v1424;
                if (*v1424 && ((unint64_t)v76 > *v1421 || *v1418))
                {
                  *v1419 = 1;
                  if (v319 > 1)
                    return 4294967294;
                }
              }
LABEL_654:
              v12 = 2;
              if ((_DWORD)v30 == 2)
                continue;
LABEL_3360:
              v12 = v30;
              if (v76 != v75)
              {
                v13 = 0;
                a2 = *v17;
                v1377 = 26;
LABEL_3520:
                v12 = v30;
                goto LABEL_3460;
              }
            }
            continue;
          }
          v57 = v24[1] & 0x3F;
          v1406 = v30;
          if ((v56 & 0x20) != 0)
          {
            if ((v56 & 0x10) != 0)
            {
              if ((v56 & 8) != 0)
              {
                v236 = v24[2] & 0x3F;
                v237 = v24[3] & 0x3F;
                v238 = v24[4] & 0x3F;
                if ((v56 & 4) != 0)
                {
                  v58 = ((v56 & 1) << 30) | (v57 << 24) | (v236 << 18) | (v237 << 12) | (v238 << 6) | v24[5] & 0x3F;
                  v59 = 6;
                }
                else
                {
                  v58 = ((v56 & 3) << 24) | (v57 << 18) | (v236 << 12) | (v237 << 6) | v238;
                  v59 = 5;
                }
              }
              else
              {
                v58 = ((v56 & 7) << 18) | (v57 << 12) | ((v24[2] & 0x3F) << 6) | v24[3] & 0x3F;
                v59 = 4;
              }
            }
            else
            {
              v58 = ((v56 & 0xF) << 12) | (v57 << 6) | v24[2] & 0x3F;
              v59 = 3;
            }
          }
          else
          {
            v58 = v24[1] & 0x3F | ((v56 & 0x1F) << 6);
            v59 = 2;
          }
          v17[3] = (unsigned __int8 *)v59;
          *v17 = &v24[v59];
          v1407 = a4;
          v1408 = a5;
          if (v21 >= 0x2E
            && (v335 = *(_DWORD *)&_pcre2_ucd_records_8[12
                                                      * _pcre2_ucd_stage2_8[v58 & 0x7F | (_pcre2_ucd_stage1_8[v58 >> 7] << 7)]
                                                      + 4]) != 0)
          {
            v336 = _pcre2_ord2utf_8(v335 + v58, (uint64_t)v17 + 74);
            v17[5] = (unsigned __int8 *)v336;
            v28 = *((_DWORD *)v17 + 14);
            if (v28)
              goto LABEL_703;
          }
          else
          {
            v336 = 0;
            v17[5] = 0;
            if (v28)
            {
LABEL_703:
              v337 = *v1422;
              v338 = (size_t)v17[3];
              v339 = *v1422 - v338;
              v340 = v17[10];
              v341 = *v1422 - v336;
              v342 = 1;
              while (1)
              {
                if ((unint64_t)v340 > v339 || (v343 = memcmp(v340, v17[2], v338), v344 = v338, v343))
                {
                  if (!v336)
                    break;
                  if ((unint64_t)v340 > v341)
                    break;
                  v345 = memcmp(v340, (char *)v17 + 74, v336);
                  v344 = v336;
                  if (v345)
                    break;
                }
                v340 += v344;
                v17[10] = v340;
                if (++v342 > v28)
                  goto LABEL_710;
              }
              if ((unint64_t)v340 < v337)
              {
                v23 = 0;
                v12 = v1406;
                a4 = v1407;
                a5 = v1408;
                goto LABEL_724;
              }
              a7 = v1425;
              v119 = *v1424;
              a4 = v1407;
              a5 = v1408;
              v16 = v1423;
              v18 = v1422;
              v12 = v1406;
              if (*v1424)
              {
                if ((unint64_t)v340 > *v1421)
                  goto LABEL_1957;
LABEL_1956:
                if (*v1418)
                {
LABEL_1957:
                  *v1419 = 1;
                  if (v119 > 1)
                    return 4294967294;
                }
              }
              goto LABEL_1958;
            }
          }
LABEL_710:
          v346 = *((_DWORD *)v17 + 15);
          a4 = v1407;
          v12 = v1406;
          a5 = v1408;
          a7 = v1425;
          v16 = v1423;
          v18 = v1422;
          if (v346 == v28)
            continue;
          if (!v1406)
          {
            v12 = 0;
            goto LABEL_3517;
          }
          v347 = v17[10];
          v17[1] = v347;
          v348 = v347;
          v265 = v346 >= v28;
          v349 = v346 - v28;
          if (v349 != 0 && v265)
          {
            v350 = (size_t)v17[3];
            v351 = *v1422 - v350;
            v1405 = *v1422;
            v352 = *v1422 - v336;
            v348 = v347;
            while (1)
            {
              if ((unint64_t)v348 > v351 || (v353 = memcmp(v348, v17[2], v350), v354 = v350, v353))
              {
                if (!v336)
                  break;
                if ((unint64_t)v348 > v352)
                  break;
                v355 = memcmp(v348, (char *)v17 + 74, v336);
                v354 = v336;
                if (v355)
                  break;
              }
              v348 += v354;
              v17[10] = v348;
              if (!--v349)
                goto LABEL_733;
            }
            if ((unint64_t)v348 >= v1405)
            {
              v356 = *v1424;
              if (*v1424)
              {
                if ((unint64_t)v348 > *v1421 || *v1418)
                {
                  *v1419 = 1;
                  if (v356 > 1)
                    return 4294967294;
                }
              }
            }
          }
LABEL_733:
          v12 = 2;
          v37 = v1406;
          a4 = v1407;
          a5 = v1408;
          a7 = v1425;
          v16 = v1423;
          v18 = v1422;
          if (v1406 == 2)
            continue;
LABEL_3377:
          v12 = v37;
          if (v348 > v347)
          {
            v13 = 0;
            a2 = *v17;
            v1377 = -53;
            goto LABEL_3544;
          }
          continue;
        case 0x3Bu:
        case 0x3Cu:
        case 0x3Du:
        case 0x3Eu:
        case 0x3Fu:
        case 0x40u:
        case 0x48u:
        case 0x49u:
        case 0x4Au:
        case 0x4Bu:
        case 0x4Cu:
        case 0x4Du:
          v31 = v20 + 1;
          *v17 = v20 + 1;
          v32 = *v20;
          if (v21 <= 0x47)
            v33 = -59;
          else
            v33 = -72;
          v34 = v33 + v32;
          v35 = dword_1A3ACE99C[v34];
          *((_DWORD *)v17 + 14) = v35;
          v36 = dword_1A3ACE9C8[v34];
          *((_DWORD *)v17 + 15) = v36;
          v37 = dword_1A3ACE9F4[v34];
          goto LABEL_123;
        case 0x41u:
        case 0x4Eu:
          v35 = 0;
          *((_DWORD *)v17 + 14) = 0;
          v36 = __rev16(*(unsigned __int16 *)(v20 + 1));
          *((_DWORD *)v17 + 15) = v36;
          v31 = v20 + 3;
          *v17 = v20 + 3;
          v37 = 1;
          goto LABEL_123;
        case 0x42u:
        case 0x4Fu:
          v35 = 0;
          v37 = 0;
          *((_DWORD *)v17 + 14) = 0;
          v36 = __rev16(*(unsigned __int16 *)(v20 + 1));
          *((_DWORD *)v17 + 15) = v36;
          v31 = v20 + 3;
          *v17 = v20 + 3;
          goto LABEL_123;
        case 0x43u:
        case 0x50u:
          v36 = __rev16(*(unsigned __int16 *)(v20 + 1));
          *((_DWORD *)v17 + 14) = v36;
          *((_DWORD *)v17 + 15) = v36;
          v31 = v20 + 3;
          *v17 = v20 + 3;
          v35 = v36;
          v37 = v12;
          goto LABEL_123;
        case 0x44u:
        case 0x51u:
          v35 = 0;
          v17[7] = (unsigned __int8 *)0xFFFFFFFF00000000;
          v31 = v20 + 1;
          *v17 = v20 + 1;
          v37 = 2;
          goto LABEL_120;
        case 0x45u:
        case 0x52u:
          v17[7] = (unsigned __int8 *)0xFFFFFFFF00000001;
          v31 = v20 + 1;
          *v17 = v20 + 1;
          v37 = 2;
          v35 = 1;
LABEL_120:
          v36 = -1;
          goto LABEL_123;
        case 0x46u:
        case 0x53u:
          v35 = 0;
          v17[7] = (unsigned __int8 *)0x100000000;
          v31 = v20 + 1;
          *v17 = v20 + 1;
          v37 = 2;
          v36 = 1;
          goto LABEL_123;
        case 0x47u:
        case 0x54u:
          v35 = 0;
          *((_DWORD *)v17 + 14) = 0;
          v36 = __rev16(*(unsigned __int16 *)(v20 + 1));
          *((_DWORD *)v17 + 15) = v36;
          v31 = v20 + 3;
          *v17 = v20 + 3;
          v37 = 2;
LABEL_123:
          a2 = v31 + 1;
          *v17 = v31 + 1;
          v82 = *v31;
          *((_DWORD *)v17 + 16) = v82;
          if (v16 && v82 >= 0xC0)
          {
            if ((v82 & 0x20) != 0)
            {
              v84 = *a2 & 0x3F;
              if ((v82 & 0x10) != 0)
              {
                if ((v82 & 8) != 0)
                {
                  v120 = v31[2] & 0x3F;
                  v121 = v31[3] & 0x3F;
                  v122 = v31[4] & 0x3F;
                  if ((v82 & 4) != 0)
                  {
                    v82 = ((v82 & 1) << 30) | (v84 << 24) | (v120 << 18) | (v121 << 12) | (v122 << 6) | v31[5] & 0x3F;
                    *((_DWORD *)v17 + 16) = v82;
                    a2 = v31 + 6;
                  }
                  else
                  {
                    a2 = v31 + 5;
                    v82 = ((v82 & 3) << 24) | (v84 << 18) | (v120 << 12) | (v121 << 6) | v122;
                    *((_DWORD *)v17 + 16) = v82;
                  }
                }
                else
                {
                  v82 = ((v82 & 7) << 18) | (v84 << 12) | ((v31[2] & 0x3F) << 6) | v31[3] & 0x3F;
                  *((_DWORD *)v17 + 16) = v82;
                  a2 = v31 + 4;
                }
              }
              else
              {
                v82 = ((v82 & 0xF) << 12) | (v84 << 6) | v31[2] & 0x3F;
                *((_DWORD *)v17 + 16) = v82;
                a2 = v31 + 3;
              }
              *v17 = a2;
            }
            else
            {
              a2 = v31 + 2;
              *v17 = v31 + 2;
              v83 = v31[1] & 0x3F | ((v82 & 0x1F) << 6);
              *((_DWORD *)v17 + 16) = v83;
              v82 = v83;
            }
          }
          if (v21 < 0x48)
          {
            if (v16)
            {
              if (v35)
              {
                v240 = *v18;
                v241 = v17[10];
                v242 = 1;
                while ((unint64_t)v241 < v240)
                {
                  v17[10] = v241 + 1;
                  v243 = *v241;
                  if (v243 < 0xC0)
                  {
                    ++v241;
                  }
                  else if ((v243 & 0x20) != 0)
                  {
                    v245 = v241[1] & 0x3F;
                    if ((v243 & 0x10) != 0)
                    {
                      if ((v243 & 8) != 0)
                      {
                        v246 = v241[2] & 0x3F;
                        v247 = v241[3] & 0x3F;
                        v248 = v241[4] & 0x3F;
                        if ((v243 & 4) != 0)
                        {
                          v243 = ((v243 & 1) << 30) | (v245 << 24) | (v246 << 18) | (v247 << 12) | (v248 << 6) | v241[5] & 0x3F;
                          v241 += 6;
                        }
                        else
                        {
                          v243 = ((v243 & 3) << 24) | (v245 << 18) | (v246 << 12) | (v247 << 6) | v248;
                          v241 += 5;
                        }
                      }
                      else
                      {
                        v243 = ((v243 & 7) << 18) | (v245 << 12) | ((v241[2] & 0x3F) << 6) | v241[3] & 0x3F;
                        v241 += 4;
                      }
                    }
                    else
                    {
                      v243 = ((v243 & 0xF) << 12) | (v245 << 6) | v241[2] & 0x3F;
                      v241 += 3;
                    }
                    v17[10] = v241;
                  }
                  else
                  {
                    v17[10] = v241 + 2;
                    v244 = v241[1] & 0x3F | ((v243 & 0x1F) << 6);
                    v241 += 2;
                    v243 = v244;
                  }
                  if (v82 == v243)
                    goto LABEL_586;
                  if (++v242 > v35)
                    goto LABEL_503;
                }
                v296 = *v1424;
                if (!*v1424)
                  goto LABEL_586;
                if ((unint64_t)v241 <= *v1421)
                  goto LABEL_584;
                goto LABEL_585;
              }
            }
            else if (v35)
            {
              v259 = 0;
              v260 = *v18;
              v261 = v17[10];
              while (1)
              {
                v262 = &v261[v259];
                if ((unint64_t)&v261[v259] >= v260)
                  break;
                v17[10] = v262 + 1;
                if (v82 == *v262)
                  goto LABEL_586;
                if ((int)++v259 + 1 > v35)
                  goto LABEL_503;
              }
              v296 = *v1424;
              if (!*v1424)
                goto LABEL_586;
              if ((unint64_t)v262 <= *v1421)
                goto LABEL_584;
              goto LABEL_585;
            }
LABEL_503:
            v12 = v37;
            if (v36 == v35)
              continue;
            if (!(_DWORD)v37)
            {
              v12 = 0;
              v7 = a6;
              if (!v16)
              {
LABEL_3523:
                v13 = 0;
                v1377 = 31;
                goto LABEL_3461;
              }
              v1377 = -50;
              goto LABEL_3490;
            }
            v263 = v17[10];
            v17[1] = v263;
            v264 = v263;
            v265 = v36 >= v35;
            v266 = v36 - v35;
            if (v16)
            {
              if (v266 != 0 && v265)
              {
                v267 = *v18;
                v264 = v263;
                while ((unint64_t)v264 < v267)
                {
                  v268 = *v264;
                  if (v268 < 0xC0)
                  {
                    v270 = 1;
                  }
                  else
                  {
                    v269 = v264[1] & 0x3F;
                    if ((v268 & 0x20) != 0)
                    {
                      if ((v268 & 0x10) != 0)
                      {
                        if ((v268 & 8) != 0)
                        {
                          v271 = v264[2] & 0x3F;
                          v272 = v264[3] & 0x3F;
                          v273 = v264[4] & 0x3F;
                          if ((v268 & 4) != 0)
                          {
                            v268 = ((v268 & 1) << 30) | (v269 << 24) | (v271 << 18) | (v272 << 12) | (v273 << 6) | v264[5] & 0x3F;
                            v270 = 6;
                          }
                          else
                          {
                            v268 = ((v268 & 3) << 24) | (v269 << 18) | (v271 << 12) | (v272 << 6) | v273;
                            v270 = 5;
                          }
                        }
                        else
                        {
                          v268 = ((v268 & 7) << 18) | (v269 << 12) | ((v264[2] & 0x3F) << 6) | v264[3] & 0x3F;
                          v270 = 4;
                        }
                      }
                      else
                      {
                        v268 = ((v268 & 0xF) << 12) | (v269 << 6) | v264[2] & 0x3F;
                        v270 = 3;
                      }
                    }
                    else
                    {
                      v270 = 2;
                      v268 = v264[1] & 0x3F | ((v268 & 0x1F) << 6);
                    }
                  }
                  if (v82 != v268)
                  {
                    v264 += v270;
                    v17[10] = v264;
                    if (--v266)
                      continue;
                  }
                  goto LABEL_786;
                }
                v380 = *v1424;
                if (*v1424 && ((unint64_t)v264 > *v1421 || *v1418))
                {
                  *v1419 = 1;
                  if (v380 > 1)
                    return 4294967294;
                }
              }
LABEL_786:
              v12 = 2;
              if ((_DWORD)v37 == 2)
                continue;
LABEL_3385:
              v12 = v37;
              if (v264 > v263)
              {
                v13 = 0;
                a2 = *v17;
                v1377 = -49;
                goto LABEL_3544;
              }
            }
            else
            {
              if (v266 != 0 && v265)
              {
                v292 = *v18;
                v264 = v263;
                while ((unint64_t)v264 < v292)
                {
                  if (v82 != *v264)
                  {
                    v17[10] = ++v264;
                    if (--v266)
                      continue;
                  }
                  goto LABEL_798;
                }
                v382 = *v1424;
                if (*v1424 && ((unint64_t)v264 > *v1421 || *v1418))
                {
                  *v1419 = 1;
                  if (v382 > 1)
                    return 4294967294;
                }
              }
LABEL_798:
              v12 = 2;
              if ((_DWORD)v37 == 2)
                continue;
LABEL_3366:
              v12 = v37;
              if (v264 != v263)
              {
                v13 = 0;
                a2 = *v17;
                v1377 = 32;
                goto LABEL_3544;
              }
            }
          }
          else
          {
            if (v1417 && v82 >= 0x80)
              v239 = *(_DWORD *)&_pcre2_ucd_records_8[12
                                                    * _pcre2_ucd_stage2_8[v82 & 0x7F | (_pcre2_ucd_stage1_8[v82 >> 7] << 7)]
                                                    + 4]
                   + v82;
            else
              v239 = *(unsigned __int8 *)(*(_QWORD *)(a7 + 96) + v82);
            *((_DWORD *)v17 + 17) = v239;
            if (v16)
            {
              if (v35)
              {
                v249 = *v18;
                v250 = v17[10];
                v251 = 1;
                while ((unint64_t)v250 < v249)
                {
                  v17[10] = v250 + 1;
                  v252 = *v250;
                  if (v252 < 0xC0)
                  {
                    ++v250;
                  }
                  else if ((v252 & 0x20) != 0)
                  {
                    v254 = v250[1] & 0x3F;
                    if ((v252 & 0x10) != 0)
                    {
                      if ((v252 & 8) != 0)
                      {
                        v255 = v250[2] & 0x3F;
                        v256 = v250[3] & 0x3F;
                        v257 = v250[4] & 0x3F;
                        if ((v252 & 4) != 0)
                        {
                          v252 = ((v252 & 1) << 30) | (v254 << 24) | (v255 << 18) | (v256 << 12) | (v257 << 6) | v250[5] & 0x3F;
                          v250 += 6;
                        }
                        else
                        {
                          v252 = ((v252 & 3) << 24) | (v254 << 18) | (v255 << 12) | (v256 << 6) | v257;
                          v250 += 5;
                        }
                      }
                      else
                      {
                        v252 = ((v252 & 7) << 18) | (v254 << 12) | ((v250[2] & 0x3F) << 6) | v250[3] & 0x3F;
                        v250 += 4;
                      }
                    }
                    else
                    {
                      v252 = ((v252 & 0xF) << 12) | (v254 << 6) | v250[2] & 0x3F;
                      v250 += 3;
                    }
                    v17[10] = v250;
                  }
                  else
                  {
                    v17[10] = v250 + 2;
                    v253 = v250[1] & 0x3F | ((v252 & 0x1F) << 6);
                    v250 += 2;
                    v252 = v253;
                  }
                  if (v82 == v252 || v239 == v252)
                    goto LABEL_586;
                  if (++v251 > v35)
                    goto LABEL_532;
                }
                v296 = *v1424;
                if (!*v1424)
                  goto LABEL_586;
                if ((unint64_t)v250 <= *v1421)
                  goto LABEL_584;
                goto LABEL_585;
              }
            }
            else if (v35)
            {
              v274 = 0;
              v275 = *v18;
              v276 = v17[10];
              while (1)
              {
                v277 = &v276[v274];
                if ((unint64_t)&v276[v274] >= v275)
                  break;
                v278 = *v277;
                if (v82 == v278 || v239 == v278)
                  goto LABEL_586;
                v17[10] = &v276[++v274];
                if ((int)v274 + 1 > v35)
                  goto LABEL_532;
              }
              v296 = *v1424;
              if (!*v1424)
                goto LABEL_586;
              if ((unint64_t)v277 <= *v1421)
              {
LABEL_584:
                if (*v1418)
                  goto LABEL_585;
LABEL_586:
                v23 = 0;
                v12 = v37;
                goto LABEL_2584;
              }
LABEL_585:
              *v1419 = 1;
              if (v296 > 1)
                return 4294967294;
              goto LABEL_586;
            }
LABEL_532:
            v12 = v37;
            if (v36 == v35)
              continue;
            if (!(_DWORD)v37)
            {
              v12 = 0;
              v7 = a6;
              if (!v16)
              {
LABEL_3579:
                v13 = 0;
                v1377 = 29;
                goto LABEL_3461;
              }
              v1377 = -52;
LABEL_3490:
              v13 = 0;
              goto LABEL_3461;
            }
            v280 = v17[10];
            v17[1] = v280;
            v281 = v280;
            v282 = v36 >= v35;
            v283 = v36 - v35;
            if (v16)
            {
              if (v283 != 0 && v282)
              {
                v284 = *v18;
                v281 = v280;
                while ((unint64_t)v281 < v284)
                {
                  v285 = *v281;
                  if (v285 < 0xC0)
                  {
                    v287 = 1;
                  }
                  else
                  {
                    v286 = v281[1] & 0x3F;
                    if ((v285 & 0x20) != 0)
                    {
                      if ((v285 & 0x10) != 0)
                      {
                        if ((v285 & 8) != 0)
                        {
                          v288 = v281[2] & 0x3F;
                          v289 = v281[3] & 0x3F;
                          v290 = v281[4] & 0x3F;
                          if ((v285 & 4) != 0)
                          {
                            v285 = ((v285 & 1) << 30) | (v286 << 24) | (v288 << 18) | (v289 << 12) | (v290 << 6) | v281[5] & 0x3F;
                            v287 = 6;
                          }
                          else
                          {
                            v285 = ((v285 & 3) << 24) | (v286 << 18) | (v288 << 12) | (v289 << 6) | v290;
                            v287 = 5;
                          }
                        }
                        else
                        {
                          v285 = ((v285 & 7) << 18) | (v286 << 12) | ((v281[2] & 0x3F) << 6) | v281[3] & 0x3F;
                          v287 = 4;
                        }
                      }
                      else
                      {
                        v285 = ((v285 & 0xF) << 12) | (v286 << 6) | v281[2] & 0x3F;
                        v287 = 3;
                      }
                    }
                    else
                    {
                      v287 = 2;
                      v285 = v281[1] & 0x3F | ((v285 & 0x1F) << 6);
                    }
                  }
                  if (v82 != v285 && v239 != v285)
                  {
                    v281 += v287;
                    v17[10] = v281;
                    if (--v283)
                      continue;
                  }
                  goto LABEL_792;
                }
                v381 = *v1424;
                if (*v1424 && ((unint64_t)v281 > *v1421 || *v1418))
                {
                  *v1419 = 1;
                  if (v381 > 1)
                    return 4294967294;
                }
              }
LABEL_792:
              v12 = 2;
              if ((_DWORD)v37 == 2)
                continue;
LABEL_3381:
              v12 = v37;
              if (v281 > v280)
              {
                v13 = 0;
                a2 = *v17;
                v1377 = -51;
                goto LABEL_3544;
              }
            }
            else
            {
              if (v283 != 0 && v282)
              {
                v293 = *v18;
                v281 = v280;
                while ((unint64_t)v281 < v293)
                {
                  v294 = *v281;
                  if (v82 != v294 && v239 != v294)
                  {
                    v17[10] = ++v281;
                    if (--v283)
                      continue;
                  }
                  goto LABEL_804;
                }
                v383 = *v1424;
                if (*v1424 && ((unint64_t)v281 > *v1421 || *v1418))
                {
                  *v1419 = 1;
                  if (v383 > 1)
                    return 4294967294;
                }
              }
LABEL_804:
              v12 = 2;
              if ((_DWORD)v37 == 2)
                continue;
LABEL_3364:
              v12 = v37;
              if (v281 != v280)
              {
                v13 = 0;
                a2 = *v17;
                v1377 = 30;
LABEL_3544:
                v12 = v37;
                goto LABEL_3460;
              }
            }
          }
          continue;
        case 0x55u:
        case 0x56u:
        case 0x57u:
        case 0x58u:
        case 0x59u:
        case 0x5Au:
          v38 = v20 + 1;
          *v17 = v20 + 1;
          v39 = *v20 - 85;
          v40 = dword_1A3ACE99C[v39];
          *((_DWORD *)v17 + 14) = v40;
          *((_DWORD *)v17 + 15) = dword_1A3ACE9C8[v39];
          v12 = dword_1A3ACE9F4[v39];
          goto LABEL_331;
        case 0x5Bu:
        case 0x5Cu:
          v40 = 0;
          *((_DWORD *)v17 + 14) = 0;
          *((_DWORD *)v17 + 15) = __rev16(*(unsigned __int16 *)(v20 + 1));
          v12 = *v20 != 92;
          goto LABEL_323;
        case 0x5Du:
          v40 = __rev16(*(unsigned __int16 *)(v20 + 1));
          *((_DWORD *)v17 + 14) = v40;
          *((_DWORD *)v17 + 15) = v40;
LABEL_323:
          v38 = v20 + 3;
          *v17 = v20 + 3;
          goto LABEL_331;
        case 0x5Eu:
          v40 = 0;
          v179 = 0xFFFFFFFF00000000;
          goto LABEL_328;
        case 0x5Fu:
          v17[7] = (unsigned __int8 *)0xFFFFFFFF00000001;
          v180 = (unsigned int *)(v17 + 7);
          *v17 = v20 + 2;
          v181 = v20[1];
          *((_DWORD *)v17 + 16) = v181;
          v182 = v17 + 8;
          if ((v181 - 15) <= 1)
          {
            *v17 = v20 + 3;
            v183 = v20[2];
            *v17 = v20 + 4;
            v184 = v20[3];
            *((_DWORD *)v17 + 17) = v184;
            v12 = 2;
            v40 = 1;
            goto LABEL_333;
          }
          v12 = 2;
          v40 = 1;
          goto LABEL_372;
        case 0x60u:
          v40 = 0;
          v179 = 0x100000000;
LABEL_328:
          v17[7] = (unsigned __int8 *)v179;
          v38 = v20 + 1;
          goto LABEL_330;
        case 0x61u:
          v40 = 0;
          *((_DWORD *)v17 + 14) = 0;
          *((_DWORD *)v17 + 15) = __rev16(*(unsigned __int16 *)(v20 + 1));
          v38 = v20 + 3;
LABEL_330:
          *v17 = v38;
          v12 = 2;
LABEL_331:
          *v17 = v38 + 1;
          v181 = *v38;
          *((_DWORD *)v17 + 16) = v181;
          v182 = v17 + 8;
          if ((v181 - 15) < 2)
          {
            *v17 = v38 + 2;
            v183 = v38[1];
            *v17 = v38 + 3;
            v184 = v38[2];
            *((_DWORD *)v17 + 17) = v184;
            if (v40)
            {
LABEL_333:
              switch((int)v183)
              {
                case 0:
                  if (v181 == 15)
                    goto LABEL_2405;
                  v384 = *v18;
                  v385 = v17[10];
                  v386 = 1;
                  while ((unint64_t)v385 < v384)
                  {
                    v387 = v385 + 1;
                    v17[10] = v385 + 1;
                    if (v16)
                    {
                      v388 = *v385;
                      if (v388 >= 0xC0)
                      {
                        v389 = 2;
                        v390 = 3;
                        v391 = 4;
                        v392 = 5;
                        if ((v388 & 4) != 0)
                          v392 = 6;
                        if ((v388 & 8) != 0)
                          v391 = v392;
                        if ((v388 & 0x10) != 0)
                          v390 = v391;
                        if ((v388 & 0x20) != 0)
                          v389 = v390;
                        v387 = &v385[v389];
                        v17[10] = v387;
                      }
                    }
                    ++v386;
                    v385 = v387;
                    if (v386 > v40)
                      goto LABEL_1425;
                  }
                  v576 = *v1424;
                  if (!*v1424)
                    goto LABEL_2405;
                  if ((unint64_t)v385 <= *v1421)
                    goto LABEL_1357;
                  goto LABEL_1358;
                case 1:
                  v393 = *v18;
                  v394 = v17[10];
                  v395 = 1;
                  while (1)
                  {
                    if ((unint64_t)v394 >= v393)
                    {
                      v576 = *v1424;
                      if (*v1424)
                      {
                        if ((unint64_t)v394 > *v1421)
                          goto LABEL_1358;
                        goto LABEL_1357;
                      }
                      goto LABEL_2405;
                    }
                    v17[10] = v394 + 1;
                    v396 = *v394;
                    if (v16 && v396 >= 0xC0)
                    {
                      if ((v396 & 0x20) != 0)
                      {
                        v398 = v394[1] & 0x3F;
                        if ((v396 & 0x10) != 0)
                        {
                          if ((v396 & 8) != 0)
                          {
                            v399 = v394[2] & 0x3F;
                            v400 = v394[3] & 0x3F;
                            v401 = v394[4] & 0x3F;
                            if ((v396 & 4) != 0)
                            {
                              v396 = ((v396 & 1) << 30) | (v398 << 24) | (v399 << 18) | (v400 << 12) | (v401 << 6) | v394[5] & 0x3F;
                              v394 += 6;
                            }
                            else
                            {
                              v396 = ((v396 & 3) << 24) | (v398 << 18) | (v399 << 12) | (v400 << 6) | v401;
                              v394 += 5;
                            }
                            v17[10] = v394;
                            v18 = v1422;
                            goto LABEL_838;
                          }
                          v396 = ((v396 & 7) << 18) | (v398 << 12) | ((v394[2] & 0x3F) << 6) | v394[3] & 0x3F;
                          v394 += 4;
                        }
                        else
                        {
                          v396 = ((v396 & 0xF) << 12) | (v398 << 6) | v394[2] & 0x3F;
                          v394 += 3;
                        }
                        v17[10] = v394;
                      }
                      else
                      {
                        v17[10] = v394 + 2;
                        v397 = v394[1] & 0x3F | ((v396 & 0x1F) << 6);
                        v394 += 2;
                        v396 = v397;
                      }
                    }
                    else
                    {
                      ++v394;
                    }
LABEL_838:
                    v402 = _pcre2_ucd_records_8[12
                                              * _pcre2_ucd_stage2_8[v396 & 0x7F | (_pcre2_ucd_stage1_8[v396 >> 7] << 7)]
                                              + 1];
                    v110 = v402 > 9;
                    v403 = (1 << v402) & 0x320;
                    if (v110 || v403 == 0)
                    {
                      if (v181 != 15)
                        goto LABEL_2405;
                    }
                    else if (v181 == 15)
                    {
                      goto LABEL_2405;
                    }
                    if (++v395 > v40)
                      goto LABEL_1425;
                  }
                case 2:
                  v405 = *v18;
                  v406 = v17[10];
                  for (i = 1; i <= v40; ++i)
                  {
                    if ((unint64_t)v406 >= v405)
                    {
                      v576 = *v1424;
                      if (*v1424)
                      {
                        if ((unint64_t)v406 > *v1421)
                        {
LABEL_1358:
                          *v1419 = 1;
                          if (v576 > 1)
                            return 4294967294;
                          goto LABEL_2405;
                        }
LABEL_1357:
                        if (*v1418)
                          goto LABEL_1358;
                      }
LABEL_2405:
                      v23 = 0;
                      goto LABEL_2584;
                    }
                    v17[10] = v406 + 1;
                    v408 = *v406;
                    if (v16 && v408 >= 0xC0)
                    {
                      if ((v408 & 0x20) != 0)
                      {
                        v410 = v406[1] & 0x3F;
                        if ((v408 & 0x10) != 0)
                        {
                          if ((v408 & 8) != 0)
                          {
                            v411 = v406[2] & 0x3F;
                            v412 = v406[3] & 0x3F;
                            v413 = v406[4] & 0x3F;
                            if ((v408 & 4) != 0)
                            {
                              v408 = ((v408 & 1) << 30) | (v410 << 24) | (v411 << 18) | (v412 << 12) | (v413 << 6) | v406[5] & 0x3F;
                              v406 += 6;
                            }
                            else
                            {
                              v408 = ((v408 & 3) << 24) | (v410 << 18) | (v411 << 12) | (v412 << 6) | v413;
                              v406 += 5;
                            }
                          }
                          else
                          {
                            v408 = ((v408 & 7) << 18) | (v410 << 12) | ((v406[2] & 0x3F) << 6) | v406[3] & 0x3F;
                            v406 += 4;
                          }
                        }
                        else
                        {
                          v408 = ((v408 & 0xF) << 12) | (v410 << 6) | v406[2] & 0x3F;
                          v406 += 3;
                        }
                        v17[10] = v406;
                      }
                      else
                      {
                        v17[10] = v406 + 2;
                        v409 = v406[1] & 0x3F | ((v408 & 0x1F) << 6);
                        v406 += 2;
                        v408 = v409;
                      }
                    }
                    else
                    {
                      ++v406;
                    }
                    if ((v181 == 15) != (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                                  * _pcre2_ucd_stage2_8[v408 & 0x7F | (_pcre2_ucd_stage1_8[v408 >> 7] << 7)]
                                                                                  + 1]] != v184))
                      goto LABEL_1061;
                    v18 = v1422;
                  }
                  goto LABEL_1425;
                case 3:
                  v414 = *v18;
                  v186 = v17[10];
                  v415 = 1;
                  while (1)
                  {
                    if ((unint64_t)v186 >= v414)
                      goto LABEL_1040;
                    v17[10] = v186 + 1;
                    v416 = *v186;
                    if (v16 && v416 >= 0xC0)
                    {
                      if ((v416 & 0x20) != 0)
                      {
                        v418 = v186[1] & 0x3F;
                        if ((v416 & 0x10) != 0)
                        {
                          if ((v416 & 8) != 0)
                          {
                            v419 = v186[2] & 0x3F;
                            v420 = v186[3] & 0x3F;
                            v421 = v186[4] & 0x3F;
                            if ((v416 & 4) != 0)
                            {
                              v416 = ((v416 & 1) << 30) | (v418 << 24) | (v419 << 18) | (v420 << 12) | (v421 << 6) | v186[5] & 0x3F;
                              v186 += 6;
                            }
                            else
                            {
                              v416 = ((v416 & 3) << 24) | (v418 << 18) | (v419 << 12) | (v420 << 6) | v421;
                              v186 += 5;
                            }
                            v17[10] = v186;
                            v18 = v1422;
                            goto LABEL_881;
                          }
                          v416 = ((v416 & 7) << 18) | (v418 << 12) | ((v186[2] & 0x3F) << 6) | v186[3] & 0x3F;
                          v186 += 4;
                        }
                        else
                        {
                          v416 = ((v416 & 0xF) << 12) | (v418 << 6) | v186[2] & 0x3F;
                          v186 += 3;
                        }
                        v17[10] = v186;
                      }
                      else
                      {
                        v17[10] = v186 + 2;
                        v417 = v186[1] & 0x3F | ((v416 & 0x1F) << 6);
                        v186 += 2;
                        v416 = v417;
                      }
                    }
                    else
                    {
                      ++v186;
                    }
LABEL_881:
                    if ((v181 == 15) != (v184 != _pcre2_ucd_records_8[12
                                                                     * _pcre2_ucd_stage2_8[v416 & 0x7F | (_pcre2_ucd_stage1_8[v416 >> 7] << 7)]
                                                                     + 1]))
                      goto LABEL_1971;
                    if (++v415 > v40)
                      goto LABEL_1425;
                  }
                case 4:
                  v422 = *v18;
                  v186 = v17[10];
                  v423 = 1;
                  while (1)
                  {
                    if ((unint64_t)v186 >= v422)
                      goto LABEL_1040;
                    v17[10] = v186 + 1;
                    v424 = *v186;
                    if (v16 && v424 >= 0xC0)
                    {
                      if ((v424 & 0x20) != 0)
                      {
                        v426 = v186[1] & 0x3F;
                        if ((v424 & 0x10) != 0)
                        {
                          if ((v424 & 8) != 0)
                          {
                            v427 = v186[2] & 0x3F;
                            v428 = v186[3] & 0x3F;
                            v429 = v186[4] & 0x3F;
                            if ((v424 & 4) != 0)
                            {
                              v424 = ((v424 & 1) << 30) | (v426 << 24) | (v427 << 18) | (v428 << 12) | (v429 << 6) | v186[5] & 0x3F;
                              v186 += 6;
                            }
                            else
                            {
                              v424 = ((v424 & 3) << 24) | (v426 << 18) | (v427 << 12) | (v428 << 6) | v429;
                              v186 += 5;
                            }
                            v17[10] = v186;
                            v18 = v1422;
                            goto LABEL_900;
                          }
                          v424 = ((v424 & 7) << 18) | (v426 << 12) | ((v186[2] & 0x3F) << 6) | v186[3] & 0x3F;
                          v186 += 4;
                        }
                        else
                        {
                          v424 = ((v424 & 0xF) << 12) | (v426 << 6) | v186[2] & 0x3F;
                          v186 += 3;
                        }
                        v17[10] = v186;
                      }
                      else
                      {
                        v17[10] = v186 + 2;
                        v425 = v186[1] & 0x3F | ((v424 & 0x1F) << 6);
                        v186 += 2;
                        v424 = v425;
                      }
                    }
                    else
                    {
                      ++v186;
                    }
LABEL_900:
                    if ((v181 == 15) != (v184 != _pcre2_ucd_records_8[12
                                                                     * _pcre2_ucd_stage2_8[v424 & 0x7F | (_pcre2_ucd_stage1_8[v424 >> 7] << 7)]]))
                      goto LABEL_1971;
                    if (++v423 > v40)
                      goto LABEL_1425;
                  }
                case 5:
                  v430 = *v18;
                  v431 = v17[10];
                  for (j = 1; j <= v40; ++j)
                  {
                    if ((unint64_t)v431 >= v430)
                      goto LABEL_1147;
                    v17[10] = v431 + 1;
                    v433 = *v431;
                    if (v16 && v433 >= 0xC0)
                    {
                      if ((v433 & 0x20) != 0)
                      {
                        v435 = v431[1] & 0x3F;
                        if ((v433 & 0x10) != 0)
                        {
                          if ((v433 & 8) != 0)
                          {
                            v436 = v431[2] & 0x3F;
                            v437 = v431[3] & 0x3F;
                            v438 = v431[4] & 0x3F;
                            if ((v433 & 4) != 0)
                            {
                              v433 = ((v433 & 1) << 30) | (v435 << 24) | (v436 << 18) | (v437 << 12) | (v438 << 6) | v431[5] & 0x3F;
                              v431 += 6;
                            }
                            else
                            {
                              v433 = ((v433 & 3) << 24) | (v435 << 18) | (v436 << 12) | (v437 << 6) | v438;
                              v431 += 5;
                            }
                          }
                          else
                          {
                            v433 = ((v433 & 7) << 18) | (v435 << 12) | ((v431[2] & 0x3F) << 6) | v431[3] & 0x3F;
                            v431 += 4;
                          }
                        }
                        else
                        {
                          v433 = ((v433 & 0xF) << 12) | (v435 << 6) | v431[2] & 0x3F;
                          v431 += 3;
                        }
                        v17[10] = v431;
                      }
                      else
                      {
                        v17[10] = v431 + 2;
                        v434 = v431[1] & 0x3F | ((v433 & 0x1F) << 6);
                        v431 += 2;
                        v433 = v434;
                      }
                    }
                    else
                    {
                      ++v431;
                    }
                    v439 = _pcre2_ucd_stage2_8[v433 & 0x7F | (_pcre2_ucd_stage1_8[v433 >> 7] << 7)];
                    if (v184 == _pcre2_ucd_records_8[12 * v439])
                      v440 = v181 == 15;
                    else
                      v440 = (v181 == 15) == ((_pcre2_ucd_script_sets_8[(v184 >> 5)
                                                                      + (*(_WORD *)&_pcre2_ucd_records_8[12 * v439 + 8] & 0x3FF)] & (1 << v184)) != 0);
                    v18 = v1422;
                    if (v440)
                      goto LABEL_1971;
                  }
                  goto LABEL_1425;
                case 6:
                  v441 = *v18;
                  v186 = v17[10];
                  v442 = 1;
                  while (1)
                  {
                    if ((unint64_t)v186 >= v441)
                      goto LABEL_1040;
                    v17[10] = v186 + 1;
                    v443 = *v186;
                    if (v16 && v443 >= 0xC0)
                    {
                      if ((v443 & 0x20) != 0)
                      {
                        v445 = v186[1] & 0x3F;
                        if ((v443 & 0x10) != 0)
                        {
                          if ((v443 & 8) != 0)
                          {
                            v446 = v186[2] & 0x3F;
                            v447 = v186[3] & 0x3F;
                            v448 = v186[4] & 0x3F;
                            if ((v443 & 4) != 0)
                            {
                              v443 = ((v443 & 1) << 30) | (v445 << 24) | (v446 << 18) | (v447 << 12) | (v448 << 6) | v186[5] & 0x3F;
                              v186 += 6;
                            }
                            else
                            {
                              v443 = ((v443 & 3) << 24) | (v445 << 18) | (v446 << 12) | (v447 << 6) | v448;
                              v186 += 5;
                            }
                            v17[10] = v186;
                            v18 = v1422;
                            goto LABEL_940;
                          }
                          v443 = ((v443 & 7) << 18) | (v445 << 12) | ((v186[2] & 0x3F) << 6) | v186[3] & 0x3F;
                          v186 += 4;
                        }
                        else
                        {
                          v443 = ((v443 & 0xF) << 12) | (v445 << 6) | v186[2] & 0x3F;
                          v186 += 3;
                        }
                        v17[10] = v186;
                      }
                      else
                      {
                        v17[10] = v186 + 2;
                        v444 = v186[1] & 0x3F | ((v443 & 0x1F) << 6);
                        v186 += 2;
                        v443 = v444;
                      }
                    }
                    else
                    {
                      ++v186;
                    }
LABEL_940:
                    if ((v181 == 15) != ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                                   * _pcre2_ucd_stage2_8[v443 & 0x7F | (_pcre2_ucd_stage1_8[v443 >> 7] << 7)]
                                                                                   + 1]] & 0xFFFFFFFD) != 1))
                      goto LABEL_1971;
                    if (++v442 > v40)
                      goto LABEL_1425;
                  }
                case 7:
                case 8:
                  v185 = *v18;
                  v186 = v17[10];
                  v187 = 1;
                  while (1)
                  {
                    if ((unint64_t)v186 >= v185)
                      goto LABEL_1040;
                    v17[10] = v186 + 1;
                    v188 = *v186;
                    if (!v16 || v188 < 0xC0)
                    {
                      ++v186;
                      goto LABEL_350;
                    }
                    if ((v188 & 0x20) == 0)
                    {
                      v17[10] = v186 + 2;
                      v189 = v186[1] & 0x3F | ((v188 & 0x1F) << 6);
                      v186 += 2;
                      v188 = v189;
                      goto LABEL_350;
                    }
                    v190 = v186[1] & 0x3F;
                    if ((v188 & 0x10) == 0)
                      break;
                    if ((v188 & 8) == 0)
                    {
                      v188 = ((v188 & 7) << 18) | (v190 << 12) | ((v186[2] & 0x3F) << 6) | v186[3] & 0x3F;
                      v186 += 4;
                      goto LABEL_345;
                    }
                    v191 = v186[2] & 0x3F;
                    v192 = v186[3] & 0x3F;
                    v193 = v186[4] & 0x3F;
                    if ((v188 & 4) != 0)
                    {
                      v188 = ((v188 & 1) << 30) | (v190 << 24) | (v191 << 18) | (v192 << 12) | (v193 << 6) | v186[5] & 0x3F;
                      v186 += 6;
                    }
                    else
                    {
                      v188 = ((v188 & 3) << 24) | (v190 << 18) | (v191 << 12) | (v192 << 6) | v193;
                      v186 += 5;
                    }
                    v17[10] = v186;
                    v18 = v1422;
LABEL_350:
                    if (v188 < 0x2000)
                    {
                      if (v188 > 132)
                      {
                        if (v188 > 5759)
                        {
                          if (v188 != 5760 && v188 != 6158)
                            goto LABEL_368;
                        }
                        else if (v188 != 133 && v188 != 160)
                        {
                          goto LABEL_368;
                        }
                      }
                      else if (v188 > 0x20 || ((1 << v188) & 0x100003E00) == 0)
                      {
                        goto LABEL_368;
                      }
                    }
                    else if ((v188 - 0x2000) >= 0xB
                           && ((v188 - 8232) > 0x37
                            || ((1 << (v188 - 40)) & 0x80000000000083) == 0)
                           && v188 != 12288)
                    {
LABEL_368:
                      if ((v181 == 15) != (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                                    * _pcre2_ucd_stage2_8[v188 & 0x7F | (_pcre2_ucd_stage1_8[v188 >> 7] << 7)]
                                                                                    + 1]] != 6))
                        goto LABEL_1971;
                      goto LABEL_360;
                    }
                    if (v181 == 15)
                      goto LABEL_1971;
LABEL_360:
                    if (++v187 > v40)
                      goto LABEL_1425;
                  }
                  v188 = ((v188 & 0xF) << 12) | (v190 << 6) | v186[2] & 0x3F;
                  v186 += 3;
LABEL_345:
                  v17[10] = v186;
                  goto LABEL_350;
                case 9:
                  v449 = *v18;
                  v186 = v17[10];
                  v450 = 1;
                  while (1)
                  {
                    if ((unint64_t)v186 >= v449)
                      goto LABEL_1040;
                    v17[10] = v186 + 1;
                    v451 = *v186;
                    if (v16 && v451 >= 0xC0)
                    {
                      if ((v451 & 0x20) != 0)
                      {
                        v453 = v186[1] & 0x3F;
                        if ((v451 & 0x10) != 0)
                        {
                          if ((v451 & 8) != 0)
                          {
                            v454 = v186[2] & 0x3F;
                            v455 = v186[3] & 0x3F;
                            v456 = v186[4] & 0x3F;
                            if ((v451 & 4) != 0)
                            {
                              v451 = ((v451 & 1) << 30) | (v453 << 24) | (v454 << 18) | (v455 << 12) | (v456 << 6) | v186[5] & 0x3F;
                              v186 += 6;
                            }
                            else
                            {
                              v451 = ((v451 & 3) << 24) | (v453 << 18) | (v454 << 12) | (v455 << 6) | v456;
                              v186 += 5;
                            }
                            v17[10] = v186;
                            v18 = v1422;
                            goto LABEL_959;
                          }
                          v451 = ((v451 & 7) << 18) | (v453 << 12) | ((v186[2] & 0x3F) << 6) | v186[3] & 0x3F;
                          v186 += 4;
                        }
                        else
                        {
                          v451 = ((v451 & 0xF) << 12) | (v453 << 6) | v186[2] & 0x3F;
                          v186 += 3;
                        }
                        v17[10] = v186;
                      }
                      else
                      {
                        v17[10] = v186 + 2;
                        v452 = v186[1] & 0x3F | ((v451 & 0x1F) << 6);
                        v186 += 2;
                        v451 = v452;
                      }
                    }
                    else
                    {
                      ++v186;
                    }
LABEL_959:
                    v458 = v451 == 95
                        || (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                    * _pcre2_ucd_stage2_8[v451 & 0x7F | (_pcre2_ucd_stage1_8[v451 >> 7] << 7)]
                                                                    + 1]] & 0xFFFFFFFD) == 1;
                    if ((((v181 == 15) ^ v458) & 1) == 0)
                      goto LABEL_1971;
                    if (++v450 > v40)
                      goto LABEL_1425;
                  }
                case 10:
                  v459 = *v18;
                  v460 = v17[10];
                  v461 = &_pcre2_ucd_caseless_sets_8[v184];
                  for (k = 1; k <= v40; ++k)
                  {
                    if ((unint64_t)v460 >= v459)
                      goto LABEL_1869;
                    v17[10] = v460 + 1;
                    v463 = *v460;
                    if (v16 && v463 >= 0xC0)
                    {
                      if ((v463 & 0x20) != 0)
                      {
                        v465 = v460[1] & 0x3F;
                        if ((v463 & 0x10) != 0)
                        {
                          if ((v463 & 8) != 0)
                          {
                            v466 = v460[2] & 0x3F;
                            v467 = v460[3] & 0x3F;
                            v468 = v460[4] & 0x3F;
                            if ((v463 & 4) != 0)
                            {
                              v463 = ((v463 & 1) << 30) | (v465 << 24) | (v466 << 18) | (v467 << 12) | (v468 << 6) | v460[5] & 0x3F;
                              v460 += 6;
                            }
                            else
                            {
                              v463 = ((v463 & 3) << 24) | (v465 << 18) | (v466 << 12) | (v467 << 6) | v468;
                              v460 += 5;
                            }
                          }
                          else
                          {
                            v463 = ((v463 & 7) << 18) | (v465 << 12) | ((v460[2] & 0x3F) << 6) | v460[3] & 0x3F;
                            v460 += 4;
                          }
                        }
                        else
                        {
                          v463 = ((v463 & 0xF) << 12) | (v465 << 6) | v460[2] & 0x3F;
                          v460 += 3;
                        }
                        v17[10] = v460;
                      }
                      else
                      {
                        v17[10] = v460 + 2;
                        v464 = v460[1] & 0x3F | ((v463 & 0x1F) << 6);
                        v460 += 2;
                        v463 = v464;
                      }
                    }
                    else
                    {
                      ++v460;
                    }
                    v469 = v461;
                    while (1)
                    {
                      v470 = *v469;
                      if (v463 < *v469)
                        break;
                      ++v469;
                      if (v463 == v470)
                      {
                        if (v181 == 15)
                          goto LABEL_1971;
                        goto LABEL_989;
                      }
                    }
                    if (v181 != 15)
                      goto LABEL_1971;
LABEL_989:
                    ;
                  }
                  goto LABEL_1425;
                case 11:
                  v471 = *v18;
                  v217 = v17[10];
                  for (m = 1; m <= v40; ++m)
                  {
                    if ((unint64_t)v217 >= v471)
                      goto LABEL_1804;
                    v17[10] = v217 + 1;
                    v473 = *v217;
                    if (v16 && v473 >= 0xC0)
                    {
                      if ((v473 & 0x20) != 0)
                      {
                        v475 = v217[1] & 0x3F;
                        if ((v473 & 0x10) != 0)
                        {
                          if ((v473 & 8) != 0)
                          {
                            v476 = v217[2] & 0x3F;
                            v477 = v217[3] & 0x3F;
                            v478 = v217[4] & 0x3F;
                            if ((v473 & 4) != 0)
                            {
                              v473 = ((v473 & 1) << 30) | (v475 << 24) | (v476 << 18) | (v477 << 12) | (v478 << 6) | v217[5] & 0x3F;
                              v217 += 6;
                            }
                            else
                            {
                              v473 = ((v473 & 3) << 24) | (v475 << 18) | (v476 << 12) | (v477 << 6) | v478;
                              v217 += 5;
                            }
                          }
                          else
                          {
                            v473 = ((v473 & 7) << 18) | (v475 << 12) | ((v217[2] & 0x3F) << 6) | v217[3] & 0x3F;
                            v217 += 4;
                          }
                        }
                        else
                        {
                          v473 = ((v473 & 0xF) << 12) | (v475 << 6) | v217[2] & 0x3F;
                          v217 += 3;
                        }
                        v17[10] = v217;
                      }
                      else
                      {
                        v17[10] = v217 + 2;
                        v474 = v217[1] & 0x3F | ((v473 & 0x1F) << 6);
                        v217 += 2;
                        v473 = v474;
                      }
                    }
                    else
                    {
                      ++v217;
                    }
                    if (v473 - 36 > 0x3C || ((1 << (v473 - 36)) & 0x1000000010000001) == 0)
                    {
                      v481 = v473 >> 13 > 6 || (v473 - 160) >> 5 < 0x6BB;
                      if ((v181 == 15) == v481)
                        goto LABEL_1971;
                    }
                    else if (v181 == 15)
                    {
                      goto LABEL_1971;
                    }
                  }
                  goto LABEL_1425;
                case 12:
                  v482 = *v18;
                  v186 = v17[10];
                  v483 = 1;
                  break;
                case 13:
                  v490 = *v18;
                  v431 = v17[10];
                  v491 = &_pcre2_ucd_BOOLprop_sets_8[v184 >> 5];
                  v492 = 1;
                  v493 = 1 << v184;
                  while ((unint64_t)v431 < v490)
                  {
                    v17[10] = v431 + 1;
                    v494 = *v431;
                    if (v16 && v494 >= 0xC0)
                    {
                      if ((v494 & 0x20) != 0)
                      {
                        v496 = v431[1] & 0x3F;
                        if ((v494 & 0x10) != 0)
                        {
                          if ((v494 & 8) != 0)
                          {
                            v497 = v431[2] & 0x3F;
                            v498 = v431[3] & 0x3F;
                            v499 = v431[4] & 0x3F;
                            if ((v494 & 4) != 0)
                            {
                              v494 = ((v494 & 1) << 30) | (v496 << 24) | (v497 << 18) | (v498 << 12) | (v499 << 6) | v431[5] & 0x3F;
                              v431 += 6;
                            }
                            else
                            {
                              v494 = ((v494 & 3) << 24) | (v496 << 18) | (v497 << 12) | (v498 << 6) | v499;
                              v431 += 5;
                            }
                          }
                          else
                          {
                            v494 = ((v494 & 7) << 18) | (v496 << 12) | ((v431[2] & 0x3F) << 6) | v431[3] & 0x3F;
                            v431 += 4;
                          }
                        }
                        else
                        {
                          v494 = ((v494 & 0xF) << 12) | (v496 << 6) | v431[2] & 0x3F;
                          v431 += 3;
                        }
                        v17[10] = v431;
                      }
                      else
                      {
                        v17[10] = v431 + 2;
                        v495 = v431[1] & 0x3F | ((v494 & 0x1F) << 6);
                        v431 += 2;
                        v494 = v495;
                      }
                    }
                    else
                    {
                      ++v431;
                    }
                    if ((v181 == 15) != ((v493 & v491[*(_WORD *)&_pcre2_ucd_records_8[12
                                                                                     * _pcre2_ucd_stage2_8[v494 & 0x7F | (_pcre2_ucd_stage1_8[v494 >> 7] << 7)]
                                                                                     + 10] & 0xFFF]) == 0))
                      goto LABEL_1061;
                    ++v492;
                    v18 = v1422;
                    if (v492 > v40)
                      goto LABEL_1425;
                  }
LABEL_1147:
                  v234 = *v1424;
                  if (!*v1424)
                    goto LABEL_1971;
                  if ((unint64_t)v431 <= *v1421)
                    goto LABEL_1969;
                  goto LABEL_1970;
                default:
                  return 4294967252;
              }
              while (1)
              {
                if ((unint64_t)v186 >= v482)
                {
LABEL_1040:
                  v234 = *v1424;
                  if (*v1424)
                  {
                    if ((unint64_t)v186 > *v1421)
                      goto LABEL_1970;
LABEL_1969:
                    if (*v1418)
                      goto LABEL_1970;
                  }
LABEL_1971:
                  v23 = 0;
                  goto LABEL_2584;
                }
                v17[10] = v186 + 1;
                v484 = *v186;
                if (v16 && v484 >= 0xC0)
                {
                  if ((v484 & 0x20) != 0)
                  {
                    v486 = v186[1] & 0x3F;
                    if ((v484 & 0x10) != 0)
                    {
                      if ((v484 & 8) != 0)
                      {
                        v487 = v186[2] & 0x3F;
                        v488 = v186[3] & 0x3F;
                        v489 = v186[4] & 0x3F;
                        if ((v484 & 4) != 0)
                        {
                          v484 = ((v484 & 1) << 30) | (v486 << 24) | (v487 << 18) | (v488 << 12) | (v489 << 6) | v186[5] & 0x3F;
                          v186 += 6;
                        }
                        else
                        {
                          v484 = ((v484 & 3) << 24) | (v486 << 18) | (v487 << 12) | (v488 << 6) | v489;
                          v186 += 5;
                        }
                        v17[10] = v186;
                        v18 = v1422;
                        goto LABEL_1037;
                      }
                      v484 = ((v484 & 7) << 18) | (v486 << 12) | ((v186[2] & 0x3F) << 6) | v186[3] & 0x3F;
                      v186 += 4;
                    }
                    else
                    {
                      v484 = ((v484 & 0xF) << 12) | (v486 << 6) | v186[2] & 0x3F;
                      v186 += 3;
                    }
                    v17[10] = v186;
                  }
                  else
                  {
                    v17[10] = v186 + 2;
                    v485 = v186[1] & 0x3F | ((v484 & 0x1F) << 6);
                    v186 += 2;
                    v484 = v485;
                  }
                }
                else
                {
                  ++v186;
                }
LABEL_1037:
                if ((v181 == 15) != (v184 != *(unsigned __int16 *)&_pcre2_ucd_records_8[12
                                                                                       * _pcre2_ucd_stage2_8[v484 & 0x7F | (_pcre2_ucd_stage1_8[v484 >> 7] << 7)]
                                                                                       + 8] >> 11))
                  goto LABEL_1971;
                if (++v483 > v40)
                  goto LABEL_1425;
              }
            }
            goto LABEL_1425;
          }
          if (!v40)
          {
LABEL_1424:
            v183 = 0xFFFFFFFFLL;
LABEL_1425:
            v204 = v12;
LABEL_1426:
            v649 = *((_DWORD *)v17 + 14);
            v648 = *((_DWORD *)v17 + 15);
            v12 = v204;
            v650 = v648 - v649;
            if (v648 == v649)
              continue;
            if (!(_DWORD)v204)
            {
              if ((v183 & 0x80000000) == 0)
              {
                v7 = a6;
                v12 = 0;
                switch((int)v183)
                {
                  case 0:
                    goto LABEL_3524;
                  case 1:
                    goto LABEL_3527;
                  case 2:
                    goto LABEL_3528;
                  case 3:
                    goto LABEL_3529;
                  case 4:
                    goto LABEL_3530;
                  case 5:
                    goto LABEL_3542;
                  case 6:
                    goto LABEL_3531;
                  case 7:
                  case 8:
                    goto LABEL_3533;
                  case 9:
                    goto LABEL_3534;
                  case 10:
                    goto LABEL_3536;
                  case 11:
                    goto LABEL_3538;
                  case 12:
                    goto LABEL_3540;
                  case 13:
                    goto LABEL_3539;
                  default:
                    return 4294967252;
                }
              }
              if (*v182 == 22)
              {
                v12 = 0;
                v7 = a6;
LABEL_3627:
                v13 = 0;
                a2 = *v17;
                v1377 = -38;
                goto LABEL_3461;
              }
              v12 = 0;
              if (v16)
              {
LABEL_3637:
                v13 = 0;
                a2 = *v17;
                v1377 = -37;
                goto LABEL_3460;
              }
LABEL_3592:
              v13 = 0;
              a2 = *v17;
              v1377 = 33;
              goto LABEL_3460;
            }
            v651 = v17[10];
            v17[1] = v651;
            v652 = *((_DWORD *)v17 + 16);
            if ((v183 & 0x80000000) == 0)
            {
              switch((int)v183)
              {
                case 0:
                  v683 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_1768;
                  v684 = *v18;
                  while ((unint64_t)v651 < v684)
                  {
                    v685 = 1;
                    if (v16)
                    {
                      v686 = *v651;
                      if (v686 >= 0xC0)
                      {
                        v685 = 2;
                        v687 = 3;
                        v688 = 4;
                        v689 = 5;
                        if ((v686 & 4) != 0)
                          v689 = 6;
                        if ((v686 & 8) != 0)
                          v688 = v689;
                        if ((v686 & 0x10) != 0)
                          v687 = v688;
                        if ((v686 & 0x20) != 0)
                          v685 = v687;
                      }
                    }
                    if (v652 != 15)
                    {
                      v651 += v685;
                      v17[10] = v651;
                      if (--v683)
                        continue;
                    }
                    goto LABEL_1768;
                  }
                  goto LABEL_1764;
                case 1:
                  v690 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_1768;
                  v691 = *v18;
                  while ((unint64_t)v651 < v691)
                  {
                    v692 = *v651;
                    if (v16 && v692 >= 0xC0)
                    {
                      v693 = v651[1] & 0x3F;
                      if ((v692 & 0x20) != 0)
                      {
                        if ((v692 & 0x10) != 0)
                        {
                          if ((v692 & 8) != 0)
                          {
                            v697 = v651[2] & 0x3F;
                            v698 = v651[3] & 0x3F;
                            v699 = v651[4] & 0x3F;
                            if ((v692 & 4) != 0)
                            {
                              v692 = ((v692 & 1) << 30) | (v693 << 24) | (v697 << 18) | (v698 << 12) | (v699 << 6) | v651[5] & 0x3F;
                              v694 = 6;
                            }
                            else
                            {
                              v692 = ((v692 & 3) << 24) | (v693 << 18) | (v697 << 12) | (v698 << 6) | v699;
                              v694 = 5;
                            }
                          }
                          else
                          {
                            v692 = ((v692 & 7) << 18) | (v693 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v694 = 4;
                          }
                        }
                        else
                        {
                          v692 = ((v692 & 0xF) << 12) | (v693 << 6) | v651[2] & 0x3F;
                          v694 = 3;
                        }
                      }
                      else
                      {
                        v694 = 2;
                        v692 = v651[1] & 0x3F | ((v692 & 0x1F) << 6);
                      }
                    }
                    else
                    {
                      v694 = 1;
                    }
                    v695 = _pcre2_ucd_records_8[12
                                              * _pcre2_ucd_stage2_8[v692 & 0x7F | (_pcre2_ucd_stage1_8[v692 >> 7] << 7)]
                                              + 1];
                    if (v695 > 9 || ((1 << v695) & 0x320) == 0)
                    {
                      if (v652 != 15)
                        goto LABEL_1768;
                    }
                    else if (v652 == 15)
                    {
                      goto LABEL_1768;
                    }
                    v651 += v694;
                    v17[10] = v651;
                    if (!--v690)
                      goto LABEL_1768;
                  }
                  goto LABEL_1764;
                case 2:
                  v700 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_1768;
                  v701 = *v18;
                  while ((unint64_t)v651 < v701)
                  {
                    v702 = *v651;
                    v703 = 1;
                    if (v16 && v702 >= 0xC0)
                    {
                      v704 = v651[1] & 0x3F;
                      if ((v702 & 0x20) != 0)
                      {
                        if ((v702 & 0x10) != 0)
                        {
                          if ((v702 & 8) != 0)
                          {
                            v705 = v651[2] & 0x3F;
                            v706 = v651[3] & 0x3F;
                            v707 = v651[4] & 0x3F;
                            if ((v702 & 4) != 0)
                            {
                              v702 = ((v702 & 1) << 30) | (v704 << 24) | (v705 << 18) | (v706 << 12) | (v707 << 6) | v651[5] & 0x3F;
                              v703 = 6;
                            }
                            else
                            {
                              v702 = ((v702 & 3) << 24) | (v704 << 18) | (v705 << 12) | (v706 << 6) | v707;
                              v703 = 5;
                            }
                          }
                          else
                          {
                            v702 = ((v702 & 7) << 18) | (v704 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v703 = 4;
                          }
                        }
                        else
                        {
                          v702 = ((v702 & 0xF) << 12) | (v704 << 6) | v651[2] & 0x3F;
                          v703 = 3;
                        }
                      }
                      else
                      {
                        v703 = 2;
                        v702 = v651[1] & 0x3F | ((v702 & 0x1F) << 6);
                      }
                    }
                    if ((v652 == 15) == (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                                  * _pcre2_ucd_stage2_8[v702 & 0x7F | (_pcre2_ucd_stage1_8[v702 >> 7] << 7)]
                                                                                  + 1]] != *((_DWORD *)v17 + 17)))
                    {
                      v651 += v703;
                      v17[10] = v651;
                      if (--v700)
                        continue;
                    }
                    goto LABEL_1768;
                  }
                  goto LABEL_1764;
                case 3:
                  v708 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_1768;
                  v709 = *v18;
                  while ((unint64_t)v651 < v709)
                  {
                    v710 = *v651;
                    v711 = 1;
                    if (v16 && v710 >= 0xC0)
                    {
                      v712 = v651[1] & 0x3F;
                      if ((v710 & 0x20) != 0)
                      {
                        if ((v710 & 0x10) != 0)
                        {
                          if ((v710 & 8) != 0)
                          {
                            v713 = v651[2] & 0x3F;
                            v714 = v651[3] & 0x3F;
                            v715 = v651[4] & 0x3F;
                            if ((v710 & 4) != 0)
                            {
                              v710 = ((v710 & 1) << 30) | (v712 << 24) | (v713 << 18) | (v714 << 12) | (v715 << 6) | v651[5] & 0x3F;
                              v711 = 6;
                            }
                            else
                            {
                              v710 = ((v710 & 3) << 24) | (v712 << 18) | (v713 << 12) | (v714 << 6) | v715;
                              v711 = 5;
                            }
                          }
                          else
                          {
                            v710 = ((v710 & 7) << 18) | (v712 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v711 = 4;
                          }
                        }
                        else
                        {
                          v710 = ((v710 & 0xF) << 12) | (v712 << 6) | v651[2] & 0x3F;
                          v711 = 3;
                        }
                      }
                      else
                      {
                        v711 = 2;
                        v710 = v651[1] & 0x3F | ((v710 & 0x1F) << 6);
                      }
                    }
                    if ((v652 == 15) == (*((_DWORD *)v17 + 17) != _pcre2_ucd_records_8[12
                                                                                      * _pcre2_ucd_stage2_8[v710 & 0x7F | (_pcre2_ucd_stage1_8[v710 >> 7] << 7)]
                                                                                      + 1]))
                    {
                      v651 += v711;
                      v17[10] = v651;
                      if (--v708)
                        continue;
                    }
                    goto LABEL_1768;
                  }
                  goto LABEL_1764;
                case 4:
                  v716 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_1768;
                  v717 = *v18;
                  while ((unint64_t)v651 < v717)
                  {
                    v718 = *v651;
                    v719 = 1;
                    if (v16 && v718 >= 0xC0)
                    {
                      v720 = v651[1] & 0x3F;
                      if ((v718 & 0x20) != 0)
                      {
                        if ((v718 & 0x10) != 0)
                        {
                          if ((v718 & 8) != 0)
                          {
                            v721 = v651[2] & 0x3F;
                            v722 = v651[3] & 0x3F;
                            v723 = v651[4] & 0x3F;
                            if ((v718 & 4) != 0)
                            {
                              v718 = ((v718 & 1) << 30) | (v720 << 24) | (v721 << 18) | (v722 << 12) | (v723 << 6) | v651[5] & 0x3F;
                              v719 = 6;
                            }
                            else
                            {
                              v718 = ((v718 & 3) << 24) | (v720 << 18) | (v721 << 12) | (v722 << 6) | v723;
                              v719 = 5;
                            }
                          }
                          else
                          {
                            v718 = ((v718 & 7) << 18) | (v720 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v719 = 4;
                          }
                        }
                        else
                        {
                          v718 = ((v718 & 0xF) << 12) | (v720 << 6) | v651[2] & 0x3F;
                          v719 = 3;
                        }
                      }
                      else
                      {
                        v719 = 2;
                        v718 = v651[1] & 0x3F | ((v718 & 0x1F) << 6);
                      }
                    }
                    if ((v652 == 15) == (*((_DWORD *)v17 + 17) != _pcre2_ucd_records_8[12
                                                                                      * _pcre2_ucd_stage2_8[v718 & 0x7F | (_pcre2_ucd_stage1_8[v718 >> 7] << 7)]]))
                    {
                      v651 += v719;
                      v17[10] = v651;
                      if (--v716)
                        continue;
                    }
                    goto LABEL_1768;
                  }
                  goto LABEL_1764;
                case 5:
                  v724 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_1768;
                  v725 = *v18;
                  while ((unint64_t)v651 < v725)
                  {
                    v726 = *v651;
                    v727 = 1;
                    if (v16 && v726 >= 0xC0)
                    {
                      v728 = v651[1] & 0x3F;
                      if ((v726 & 0x20) != 0)
                      {
                        if ((v726 & 0x10) != 0)
                        {
                          if ((v726 & 8) != 0)
                          {
                            v729 = v651[2] & 0x3F;
                            v730 = v651[3] & 0x3F;
                            v731 = v651[4] & 0x3F;
                            if ((v726 & 4) != 0)
                            {
                              v726 = ((v726 & 1) << 30) | (v728 << 24) | (v729 << 18) | (v730 << 12) | (v731 << 6) | v651[5] & 0x3F;
                              v727 = 6;
                            }
                            else
                            {
                              v726 = ((v726 & 3) << 24) | (v728 << 18) | (v729 << 12) | (v730 << 6) | v731;
                              v727 = 5;
                            }
                          }
                          else
                          {
                            v726 = ((v726 & 7) << 18) | (v728 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v727 = 4;
                          }
                        }
                        else
                        {
                          v726 = ((v726 & 0xF) << 12) | (v728 << 6) | v651[2] & 0x3F;
                          v727 = 3;
                        }
                      }
                      else
                      {
                        v727 = 2;
                        v726 = v651[1] & 0x3F | ((v726 & 0x1F) << 6);
                      }
                    }
                    v732 = _pcre2_ucd_stage2_8[v726 & 0x7F | (_pcre2_ucd_stage1_8[v726 >> 7] << 7)];
                    v733 = *((unsigned int *)v17 + 17);
                    if ((_DWORD)v733 == _pcre2_ucd_records_8[12 * v732])
                    {
                      if (v652 == 15)
                        goto LABEL_1768;
                    }
                    else if ((v652 == 15) == ((*(_DWORD *)((char *)&_pcre2_ucd_script_sets_8[*(_WORD *)&_pcre2_ucd_records_8[12 * v732 + 8] & 0x3FF]
                                                          + ((v733 >> 3) & 0x1FFFFFFC)) >> v733) & 1))
                    {
                      goto LABEL_1768;
                    }
                    v651 += v727;
                    v17[10] = v651;
                    if (!--v724)
                      goto LABEL_1768;
                  }
                  goto LABEL_1764;
                case 6:
                  v734 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_1768;
                  v735 = *v18;
                  while ((unint64_t)v651 < v735)
                  {
                    v736 = *v651;
                    v737 = 1;
                    if (v16 && v736 >= 0xC0)
                    {
                      v738 = v651[1] & 0x3F;
                      if ((v736 & 0x20) != 0)
                      {
                        if ((v736 & 0x10) != 0)
                        {
                          if ((v736 & 8) != 0)
                          {
                            v739 = v651[2] & 0x3F;
                            v740 = v651[3] & 0x3F;
                            v741 = v651[4] & 0x3F;
                            if ((v736 & 4) != 0)
                            {
                              v736 = ((v736 & 1) << 30) | (v738 << 24) | (v739 << 18) | (v740 << 12) | (v741 << 6) | v651[5] & 0x3F;
                              v737 = 6;
                            }
                            else
                            {
                              v736 = ((v736 & 3) << 24) | (v738 << 18) | (v739 << 12) | (v740 << 6) | v741;
                              v737 = 5;
                            }
                          }
                          else
                          {
                            v736 = ((v736 & 7) << 18) | (v738 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v737 = 4;
                          }
                        }
                        else
                        {
                          v736 = ((v736 & 0xF) << 12) | (v738 << 6) | v651[2] & 0x3F;
                          v737 = 3;
                        }
                      }
                      else
                      {
                        v737 = 2;
                        v736 = v651[1] & 0x3F | ((v736 & 0x1F) << 6);
                      }
                    }
                    if ((v652 == 15) == ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                                   * _pcre2_ucd_stage2_8[v736 & 0x7F | (_pcre2_ucd_stage1_8[v736 >> 7] << 7)]
                                                                                   + 1]] & 0xFFFFFFFD) != 1))
                    {
                      v651 += v737;
                      v17[10] = v651;
                      if (--v734)
                        continue;
                    }
                    goto LABEL_1768;
                  }
                  goto LABEL_1764;
                case 7:
                case 8:
                  v653 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_1768;
                  v654 = *v18;
LABEL_1432:
                  if ((unint64_t)v651 >= v654)
                    goto LABEL_1764;
                  v655 = *v651;
                  v656 = 1;
                  if (v16 && v655 >= 0xC0)
                  {
                    v657 = v651[1] & 0x3F;
                    if ((v655 & 0x20) != 0)
                    {
                      if ((v655 & 0x10) != 0)
                      {
                        if ((v655 & 8) != 0)
                        {
                          v658 = v651[2] & 0x3F;
                          v659 = v651[3] & 0x3F;
                          v660 = v651[4] & 0x3F;
                          if ((v655 & 4) != 0)
                          {
                            v655 = ((v655 & 1) << 30) | (v657 << 24) | (v658 << 18) | (v659 << 12) | (v660 << 6) | v651[5] & 0x3F;
                            v656 = 6;
                          }
                          else
                          {
                            v655 = ((v655 & 3) << 24) | (v657 << 18) | (v658 << 12) | (v659 << 6) | v660;
                            v656 = 5;
                          }
                        }
                        else
                        {
                          v655 = ((v655 & 7) << 18) | (v657 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                          v656 = 4;
                        }
                      }
                      else
                      {
                        v655 = ((v655 & 0xF) << 12) | (v657 << 6) | v651[2] & 0x3F;
                        v656 = 3;
                      }
                    }
                    else
                    {
                      v656 = 2;
                      v655 = v651[1] & 0x3F | ((v655 & 0x1F) << 6);
                    }
                  }
                  if (v655 < 0x2000)
                  {
                    if (v655 > 132)
                    {
                      if (v655 > 5759)
                      {
                        if (v655 != 5760 && v655 != 6158)
                          goto LABEL_1462;
                      }
                      else if (v655 != 133 && v655 != 160)
                      {
                        goto LABEL_1462;
                      }
                    }
                    else if (v655 > 0x20 || ((1 << v655) & 0x100003E00) == 0)
                    {
                      goto LABEL_1462;
                    }
                  }
                  else if ((v655 - 0x2000) >= 0xB
                         && ((v655 - 8232) > 0x37
                          || ((1 << (v655 - 40)) & 0x80000000000083) == 0)
                         && v655 != 12288)
                  {
LABEL_1462:
                    if ((v652 == 15) != (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                                  * _pcre2_ucd_stage2_8[v655 & 0x7F | (_pcre2_ucd_stage1_8[v655 >> 7] << 7)]
                                                                                  + 1]] != 6))
                    {
LABEL_1768:
                      v12 = 2;
                      if ((_DWORD)v204 != 2)
                      {
                        v789 = v17[10];
                        v12 = v204;
LABEL_1770:
                        if (v789 > v17[1])
                        {
                          v13 = 0;
                          a2 = *v17;
                          v1377 = -34;
LABEL_3460:
                          v7 = a6;
                          goto LABEL_3461;
                        }
                      }
                      continue;
                    }
LABEL_1454:
                    v651 += v656;
                    v17[10] = v651;
                    if (!--v653)
                      goto LABEL_1768;
                    goto LABEL_1432;
                  }
                  if (v652 == 15)
                    goto LABEL_1768;
                  goto LABEL_1454;
                case 9:
                  v742 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_1768;
                  v743 = *v18;
                  while ((unint64_t)v651 < v743)
                  {
                    v744 = *v651;
                    v745 = 1;
                    if (v16 && v744 >= 0xC0)
                    {
                      v746 = v651[1] & 0x3F;
                      if ((v744 & 0x20) != 0)
                      {
                        if ((v744 & 0x10) != 0)
                        {
                          if ((v744 & 8) != 0)
                          {
                            v747 = v651[2] & 0x3F;
                            v748 = v651[3] & 0x3F;
                            v749 = v651[4] & 0x3F;
                            if ((v744 & 4) != 0)
                            {
                              v744 = ((v744 & 1) << 30) | (v746 << 24) | (v747 << 18) | (v748 << 12) | (v749 << 6) | v651[5] & 0x3F;
                              v745 = 6;
                            }
                            else
                            {
                              v744 = ((v744 & 3) << 24) | (v746 << 18) | (v747 << 12) | (v748 << 6) | v749;
                              v745 = 5;
                            }
                          }
                          else
                          {
                            v744 = ((v744 & 7) << 18) | (v746 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v745 = 4;
                          }
                        }
                        else
                        {
                          v744 = ((v744 & 0xF) << 12) | (v746 << 6) | v651[2] & 0x3F;
                          v745 = 3;
                        }
                      }
                      else
                      {
                        v745 = 2;
                        v744 = v651[1] & 0x3F | ((v744 & 0x1F) << 6);
                      }
                    }
                    v751 = v744 == 95
                        || (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                    * _pcre2_ucd_stage2_8[v744 & 0x7F | (_pcre2_ucd_stage1_8[v744 >> 7] << 7)]
                                                                    + 1]] & 0xFFFFFFFD) == 1;
                    if ((v652 == 15) != v751)
                    {
                      v651 += v745;
                      v17[10] = v651;
                      if (--v742)
                        continue;
                    }
                    goto LABEL_1768;
                  }
                  goto LABEL_1764;
                case 10:
                  if (v648 <= v649)
                    goto LABEL_1768;
                  v752 = *v18;
                  while ((unint64_t)v651 < v752)
                  {
                    v753 = *v651;
                    v754 = 1;
                    if (v16 && v753 >= 0xC0)
                    {
                      v755 = v651[1] & 0x3F;
                      if ((v753 & 0x20) != 0)
                      {
                        if ((v753 & 0x10) != 0)
                        {
                          if ((v753 & 8) != 0)
                          {
                            v756 = v651[2] & 0x3F;
                            v757 = v651[3] & 0x3F;
                            v758 = v651[4] & 0x3F;
                            if ((v753 & 4) != 0)
                            {
                              v753 = ((v753 & 1) << 30) | (v755 << 24) | (v756 << 18) | (v757 << 12) | (v758 << 6) | v651[5] & 0x3F;
                              v754 = 6;
                            }
                            else
                            {
                              v753 = ((v753 & 3) << 24) | (v755 << 18) | (v756 << 12) | (v757 << 6) | v758;
                              v754 = 5;
                            }
                          }
                          else
                          {
                            v753 = ((v753 & 7) << 18) | (v755 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v754 = 4;
                          }
                        }
                        else
                        {
                          v753 = ((v753 & 0xF) << 12) | (v755 << 6) | v651[2] & 0x3F;
                          v754 = 3;
                        }
                      }
                      else
                      {
                        v754 = 2;
                        v753 = v651[1] & 0x3F | ((v753 & 0x1F) << 6);
                      }
                    }
                    v759 = &_pcre2_ucd_caseless_sets_8[*((unsigned int *)v17 + 17)];
                    while (1)
                    {
                      v760 = *v759;
                      if (v753 < *v759)
                        break;
                      ++v759;
                      if (v753 == v760)
                      {
                        if (v652 == 15)
                          goto LABEL_1768;
                        goto LABEL_1699;
                      }
                    }
                    if (v652 != 15)
                      goto LABEL_1768;
LABEL_1699:
                    v651 += v754;
                    v17[10] = v651;
                    if (++v649 == v648)
                      goto LABEL_1768;
                  }
                  goto LABEL_1764;
                case 11:
                  v761 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_1768;
                  v762 = *v18;
                  while (2)
                  {
                    if ((unint64_t)v651 >= v762)
                      goto LABEL_1764;
                    v763 = *v651;
                    v764 = 1;
                    if (v16 && v763 >= 0xC0)
                    {
                      v765 = v651[1] & 0x3F;
                      if ((v763 & 0x20) != 0)
                      {
                        if ((v763 & 0x10) != 0)
                        {
                          if ((v763 & 8) != 0)
                          {
                            v766 = v651[2] & 0x3F;
                            v767 = v651[3] & 0x3F;
                            v768 = v651[4] & 0x3F;
                            if ((v763 & 4) != 0)
                            {
                              v763 = ((v763 & 1) << 30) | (v765 << 24) | (v766 << 18) | (v767 << 12) | (v768 << 6) | v651[5] & 0x3F;
                              v764 = 6;
                            }
                            else
                            {
                              v763 = ((v763 & 3) << 24) | (v765 << 18) | (v766 << 12) | (v767 << 6) | v768;
                              v764 = 5;
                            }
                          }
                          else
                          {
                            v763 = ((v763 & 7) << 18) | (v765 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v764 = 4;
                          }
                        }
                        else
                        {
                          v763 = ((v763 & 0xF) << 12) | (v765 << 6) | v651[2] & 0x3F;
                          v764 = 3;
                        }
                      }
                      else
                      {
                        v764 = 2;
                        v763 = v651[1] & 0x3F | ((v763 & 0x1F) << 6);
                      }
                    }
                    if (v763 - 36 > 0x3C || ((1 << (v763 - 36)) & 0x1000000010000001) == 0)
                    {
                      v771 = v763 >> 13 > 6 || (v763 - 160) >> 5 < 0x6BB;
                      if ((v652 == 15) == v771)
                        goto LABEL_1768;
                    }
                    else if (v652 == 15)
                    {
                      goto LABEL_1768;
                    }
                    v651 += v764;
                    v17[10] = v651;
                    if (!--v761)
                      goto LABEL_1768;
                    continue;
                  }
                case 12:
                  v772 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_1768;
                  v773 = *v18;
                  while ((unint64_t)v651 < v773)
                  {
                    v774 = *v651;
                    v775 = 1;
                    if (v16 && v774 >= 0xC0)
                    {
                      v776 = v651[1] & 0x3F;
                      if ((v774 & 0x20) != 0)
                      {
                        if ((v774 & 0x10) != 0)
                        {
                          if ((v774 & 8) != 0)
                          {
                            v777 = v651[2] & 0x3F;
                            v778 = v651[3] & 0x3F;
                            v779 = v651[4] & 0x3F;
                            if ((v774 & 4) != 0)
                            {
                              v774 = ((v774 & 1) << 30) | (v776 << 24) | (v777 << 18) | (v778 << 12) | (v779 << 6) | v651[5] & 0x3F;
                              v775 = 6;
                            }
                            else
                            {
                              v774 = ((v774 & 3) << 24) | (v776 << 18) | (v777 << 12) | (v778 << 6) | v779;
                              v775 = 5;
                            }
                          }
                          else
                          {
                            v774 = ((v774 & 7) << 18) | (v776 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v775 = 4;
                          }
                        }
                        else
                        {
                          v774 = ((v774 & 0xF) << 12) | (v776 << 6) | v651[2] & 0x3F;
                          v775 = 3;
                        }
                      }
                      else
                      {
                        v775 = 2;
                        v774 = v651[1] & 0x3F | ((v774 & 0x1F) << 6);
                      }
                    }
                    if ((v652 == 15) == (*((_DWORD *)v17 + 17) != *(unsigned __int16 *)&_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v774 & 0x7F | (_pcre2_ucd_stage1_8[v774 >> 7] << 7)] + 8] >> 11))
                    {
                      v651 += v775;
                      v17[10] = v651;
                      if (--v772)
                        continue;
                    }
                    goto LABEL_1768;
                  }
                  goto LABEL_1764;
                case 13:
                  v780 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_1768;
                  v781 = *v18;
                  while ((unint64_t)v651 < v781)
                  {
                    v782 = *v651;
                    v783 = 1;
                    if (v16 && v782 >= 0xC0)
                    {
                      v784 = v651[1] & 0x3F;
                      if ((v782 & 0x20) != 0)
                      {
                        if ((v782 & 0x10) != 0)
                        {
                          if ((v782 & 8) != 0)
                          {
                            v785 = v651[2] & 0x3F;
                            v786 = v651[3] & 0x3F;
                            v787 = v651[4] & 0x3F;
                            if ((v782 & 4) != 0)
                            {
                              v782 = ((v782 & 1) << 30) | (v784 << 24) | (v785 << 18) | (v786 << 12) | (v787 << 6) | v651[5] & 0x3F;
                              v783 = 6;
                            }
                            else
                            {
                              v782 = ((v782 & 3) << 24) | (v784 << 18) | (v785 << 12) | (v786 << 6) | v787;
                              v783 = 5;
                            }
                          }
                          else
                          {
                            v782 = ((v782 & 7) << 18) | (v784 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v783 = 4;
                          }
                        }
                        else
                        {
                          v782 = ((v782 & 0xF) << 12) | (v784 << 6) | v651[2] & 0x3F;
                          v783 = 3;
                        }
                      }
                      else
                      {
                        v783 = 2;
                        v782 = v651[1] & 0x3F | ((v782 & 0x1F) << 6);
                      }
                    }
                    if ((v652 == 15) == (((*(_DWORD *)((char *)&_pcre2_ucd_BOOLprop_sets_8[*(_WORD *)&_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v782 & 0x7F | (_pcre2_ucd_stage1_8[v782 >> 7] << 7)] + 10] & 0xFFF]
                                                      + (((unint64_t)*((unsigned int *)v17 + 17) >> 3) & 0x1FFFFFFC)) >> *((_DWORD *)v17 + 17)) & 1) == 0))
                    {
                      v651 += v783;
                      v17[10] = v651;
                      if (--v780)
                        continue;
                    }
                    goto LABEL_1768;
                  }
LABEL_1764:
                  v788 = *v1424;
                  if (*v1424 && ((unint64_t)v651 > *v1421 || *v1418))
                  {
                    *v1419 = 1;
                    if (v788 > 1)
                      return 4294967294;
                  }
                  goto LABEL_1768;
                default:
                  return 4294967252;
              }
            }
            if (v652 == 22)
            {
              if (v648 > v649)
              {
                v661 = *v18;
                while ((unint64_t)v651 < v661)
                {
                  v662 = v651 + 1;
                  v17[10] = v651 + 1;
                  v663 = *v651;
                  if (v16 && v663 >= 0xC0)
                  {
                    if ((v663 & 0x20) != 0)
                    {
                      v664 = *v662 & 0x3F;
                      if ((v663 & 0x10) != 0)
                      {
                        if ((v663 & 8) != 0)
                        {
                          v665 = v651[2] & 0x3F;
                          v666 = v651[3] & 0x3F;
                          v667 = v651[4] & 0x3F;
                          if ((v663 & 4) != 0)
                          {
                            v663 = ((v663 & 1) << 30) | (v664 << 24) | (v665 << 18) | (v666 << 12) | (v667 << 6) | v651[5] & 0x3F;
                            v662 = v651 + 6;
                          }
                          else
                          {
                            v663 = ((v663 & 3) << 24) | (v664 << 18) | (v665 << 12) | (v666 << 6) | v667;
                            v662 = v651 + 5;
                          }
                        }
                        else
                        {
                          v663 = ((v663 & 7) << 18) | (v664 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                          v662 = v651 + 4;
                        }
                      }
                      else
                      {
                        v663 = ((v663 & 0xF) << 12) | (v664 << 6) | v651[2] & 0x3F;
                        v662 = v651 + 3;
                      }
                      v17[10] = v662;
                    }
                    else
                    {
                      v662 = v651 + 2;
                      v17[10] = v651 + 2;
                      v663 = v651[1] & 0x3F | ((v663 & 0x1F) << 6);
                    }
                  }
                  v651 = _pcre2_extuni_8(v663, v662, *(_QWORD *)(a7 + 152), v661, v1420, 0);
                  a7 = v1425;
                  v17[10] = v651;
                  v661 = *(_QWORD *)(v1425 + 168);
                  if ((unint64_t)v651 >= v661)
                  {
                    v668 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v651 > *v1421 || *v1418)
                      {
                        *v1419 = 1;
                        if (v668 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  ++v649;
                  v16 = v1423;
                  if (v649 >= *((_DWORD *)v17 + 15))
                    goto LABEL_1776;
                }
                v790 = *v1424;
                if (*v1424 && ((unint64_t)v651 > *v1421 || *v1418))
                {
                  *v1419 = 1;
                  if (v790 > 1)
                    return 4294967294;
                }
              }
LABEL_1776:
              v12 = 2;
              v18 = v1422;
              if ((_DWORD)v204 != 2)
              {
                v791 = v17[1];
                v12 = v204;
                goto LABEL_2581;
              }
              continue;
            }
            v22 = 4294967252;
            if (v16)
            {
              switch(v652)
              {
                case 6:
                  v669 = a4;
                  v925 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_2555;
                  v926 = *v1422;
                  while (1)
                  {
                    if ((unint64_t)v651 >= v926)
                      goto LABEL_2279;
                    v927 = *v651;
                    if (v927 < 0xC0)
                      break;
                    v928 = v651[1] & 0x3F;
                    if ((v927 & 0x20) != 0)
                    {
                      if ((v927 & 0x10) != 0)
                      {
                        if ((v927 & 8) != 0)
                        {
                          v930 = v651[2] & 0x3F;
                          v931 = v651[3] & 0x3F;
                          v932 = v651[4] & 0x3F;
                          if ((v927 & 4) != 0)
                          {
                            v927 = ((v927 & 1) << 30) | (v928 << 24) | (v930 << 18) | (v931 << 12) | (v932 << 6) | v651[5] & 0x3F;
                            v929 = 6;
                          }
                          else
                          {
                            v927 = ((v927 & 3) << 24) | (v928 << 18) | (v930 << 12) | (v931 << 6) | v932;
                            v929 = 5;
                          }
                        }
                        else
                        {
                          v927 = ((v927 & 7) << 18) | (v928 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                          v929 = 4;
                        }
                      }
                      else
                      {
                        v927 = ((v927 & 0xF) << 12) | (v928 << 6) | v651[2] & 0x3F;
                        v929 = 3;
                      }
                    }
                    else
                    {
                      v929 = 2;
                      v927 = v651[1] & 0x3F | ((v927 & 0x1F) << 6);
                    }
                    if (v927 <= 0xFF)
                      goto LABEL_2125;
LABEL_2126:
                    v651 += v929;
                    v17[10] = v651;
                    if (!--v925)
                      goto LABEL_2555;
                  }
                  v929 = 1;
LABEL_2125:
                  if ((*(_BYTE *)(*(_QWORD *)(v1425 + 104) + v927) & 8) != 0)
                    goto LABEL_2555;
                  goto LABEL_2126;
                case 7:
                  v669 = a4;
                  v933 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_2555;
                  v934 = *v1422;
                  while ((unint64_t)v651 < v934)
                  {
                    v935 = *v651;
                    if (v935 < 0xC0)
                    {
                      v937 = 1;
                    }
                    else
                    {
                      v936 = v651[1] & 0x3F;
                      if ((v935 & 0x20) != 0)
                      {
                        if ((v935 & 0x10) != 0)
                        {
                          if ((v935 & 8) != 0)
                          {
                            v938 = v651[2] & 0x3F;
                            v939 = v651[3] & 0x3F;
                            v940 = v651[4] & 0x3F;
                            if ((v935 & 4) != 0)
                            {
                              v935 = ((v935 & 1) << 30) | (v936 << 24) | (v938 << 18) | (v939 << 12) | (v940 << 6) | v651[5] & 0x3F;
                              v937 = 6;
                            }
                            else
                            {
                              v935 = ((v935 & 3) << 24) | (v936 << 18) | (v938 << 12) | (v939 << 6) | v940;
                              v937 = 5;
                            }
                          }
                          else
                          {
                            v935 = ((v935 & 7) << 18) | (v936 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v937 = 4;
                          }
                        }
                        else
                        {
                          v935 = ((v935 & 0xF) << 12) | (v936 << 6) | v651[2] & 0x3F;
                          v937 = 3;
                        }
                      }
                      else
                      {
                        v937 = 2;
                        v935 = v651[1] & 0x3F | ((v935 & 0x1F) << 6);
                      }
                      if (v935 > 0xFF)
                        goto LABEL_2555;
                    }
                    if ((*(_BYTE *)(*(_QWORD *)(v1425 + 104) + v935) & 8) != 0)
                    {
                      v651 += v937;
                      v17[10] = v651;
                      if (--v933)
                        continue;
                    }
                    goto LABEL_2555;
                  }
                  goto LABEL_2279;
                case 8:
                  v669 = a4;
                  v941 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_2555;
                  v942 = *v1422;
                  while (1)
                  {
                    if ((unint64_t)v651 >= v942)
                      goto LABEL_2279;
                    v943 = *v651;
                    if (v943 < 0xC0)
                      break;
                    v944 = v651[1] & 0x3F;
                    if ((v943 & 0x20) != 0)
                    {
                      if ((v943 & 0x10) != 0)
                      {
                        if ((v943 & 8) != 0)
                        {
                          v946 = v651[2] & 0x3F;
                          v947 = v651[3] & 0x3F;
                          v948 = v651[4] & 0x3F;
                          if ((v943 & 4) != 0)
                          {
                            v943 = ((v943 & 1) << 30) | (v944 << 24) | (v946 << 18) | (v947 << 12) | (v948 << 6) | v651[5] & 0x3F;
                            v945 = 6;
                          }
                          else
                          {
                            v943 = ((v943 & 3) << 24) | (v944 << 18) | (v946 << 12) | (v947 << 6) | v948;
                            v945 = 5;
                          }
                        }
                        else
                        {
                          v943 = ((v943 & 7) << 18) | (v944 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                          v945 = 4;
                        }
                      }
                      else
                      {
                        v943 = ((v943 & 0xF) << 12) | (v944 << 6) | v651[2] & 0x3F;
                        v945 = 3;
                      }
                    }
                    else
                    {
                      v945 = 2;
                      v943 = v651[1] & 0x3F | ((v943 & 0x1F) << 6);
                    }
                    if (v943 <= 0xFF)
                      goto LABEL_2161;
LABEL_2162:
                    v651 += v945;
                    v17[10] = v651;
                    if (!--v941)
                      goto LABEL_2555;
                  }
                  v945 = 1;
LABEL_2161:
                  if ((*(_BYTE *)(*(_QWORD *)(v1425 + 104) + v943) & 1) != 0)
                    goto LABEL_2555;
                  goto LABEL_2162;
                case 9:
                  v669 = a4;
                  v949 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_2555;
                  v950 = *v1422;
                  while ((unint64_t)v651 < v950)
                  {
                    v951 = *v651;
                    if (v951 < 0xC0)
                    {
                      v953 = 1;
                    }
                    else
                    {
                      v952 = v651[1] & 0x3F;
                      if ((v951 & 0x20) != 0)
                      {
                        if ((v951 & 0x10) != 0)
                        {
                          if ((v951 & 8) != 0)
                          {
                            v954 = v651[2] & 0x3F;
                            v955 = v651[3] & 0x3F;
                            v956 = v651[4] & 0x3F;
                            if ((v951 & 4) != 0)
                            {
                              v951 = ((v951 & 1) << 30) | (v952 << 24) | (v954 << 18) | (v955 << 12) | (v956 << 6) | v651[5] & 0x3F;
                              v953 = 6;
                            }
                            else
                            {
                              v951 = ((v951 & 3) << 24) | (v952 << 18) | (v954 << 12) | (v955 << 6) | v956;
                              v953 = 5;
                            }
                          }
                          else
                          {
                            v951 = ((v951 & 7) << 18) | (v952 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v953 = 4;
                          }
                        }
                        else
                        {
                          v951 = ((v951 & 0xF) << 12) | (v952 << 6) | v651[2] & 0x3F;
                          v953 = 3;
                        }
                      }
                      else
                      {
                        v953 = 2;
                        v951 = v651[1] & 0x3F | ((v951 & 0x1F) << 6);
                      }
                      if (v951 > 0xFF)
                        goto LABEL_2555;
                    }
                    if ((*(_BYTE *)(*(_QWORD *)(v1425 + 104) + v951) & 1) != 0)
                    {
                      v651 += v953;
                      v17[10] = v651;
                      if (--v949)
                        continue;
                    }
                    goto LABEL_2555;
                  }
                  goto LABEL_2279;
                case 10:
                  v669 = a4;
                  v957 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_2555;
                  v958 = *v1422;
                  while (1)
                  {
                    if ((unint64_t)v651 >= v958)
                      goto LABEL_2279;
                    v959 = *v651;
                    if (v959 < 0xC0)
                      break;
                    v960 = v651[1] & 0x3F;
                    if ((v959 & 0x20) != 0)
                    {
                      if ((v959 & 0x10) != 0)
                      {
                        if ((v959 & 8) != 0)
                        {
                          v962 = v651[2] & 0x3F;
                          v963 = v651[3] & 0x3F;
                          v964 = v651[4] & 0x3F;
                          if ((v959 & 4) != 0)
                          {
                            v959 = ((v959 & 1) << 30) | (v960 << 24) | (v962 << 18) | (v963 << 12) | (v964 << 6) | v651[5] & 0x3F;
                            v961 = 6;
                          }
                          else
                          {
                            v959 = ((v959 & 3) << 24) | (v960 << 18) | (v962 << 12) | (v963 << 6) | v964;
                            v961 = 5;
                          }
                        }
                        else
                        {
                          v959 = ((v959 & 7) << 18) | (v960 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                          v961 = 4;
                        }
                      }
                      else
                      {
                        v959 = ((v959 & 0xF) << 12) | (v960 << 6) | v651[2] & 0x3F;
                        v961 = 3;
                      }
                    }
                    else
                    {
                      v961 = 2;
                      v959 = v651[1] & 0x3F | ((v959 & 0x1F) << 6);
                    }
                    if (v959 <= 0xFF)
                      goto LABEL_2197;
LABEL_2198:
                    v651 += v961;
                    v17[10] = v651;
                    if (!--v957)
                      goto LABEL_2555;
                  }
                  v961 = 1;
LABEL_2197:
                  if ((*(_BYTE *)(*(_QWORD *)(v1425 + 104) + v959) & 0x10) != 0)
                    goto LABEL_2555;
                  goto LABEL_2198;
                case 11:
                  v669 = a4;
                  v965 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_2555;
                  v966 = *v1422;
                  while ((unint64_t)v651 < v966)
                  {
                    v967 = *v651;
                    if (v967 < 0xC0)
                    {
                      v969 = 1;
                    }
                    else
                    {
                      v968 = v651[1] & 0x3F;
                      if ((v967 & 0x20) != 0)
                      {
                        if ((v967 & 0x10) != 0)
                        {
                          if ((v967 & 8) != 0)
                          {
                            v970 = v651[2] & 0x3F;
                            v971 = v651[3] & 0x3F;
                            v972 = v651[4] & 0x3F;
                            if ((v967 & 4) != 0)
                            {
                              v967 = ((v967 & 1) << 30) | (v968 << 24) | (v970 << 18) | (v971 << 12) | (v972 << 6) | v651[5] & 0x3F;
                              v969 = 6;
                            }
                            else
                            {
                              v967 = ((v967 & 3) << 24) | (v968 << 18) | (v970 << 12) | (v971 << 6) | v972;
                              v969 = 5;
                            }
                          }
                          else
                          {
                            v967 = ((v967 & 7) << 18) | (v968 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v969 = 4;
                          }
                        }
                        else
                        {
                          v967 = ((v967 & 0xF) << 12) | (v968 << 6) | v651[2] & 0x3F;
                          v969 = 3;
                        }
                      }
                      else
                      {
                        v969 = 2;
                        v967 = v651[1] & 0x3F | ((v967 & 0x1F) << 6);
                      }
                      if (v967 > 0xFF)
                        goto LABEL_2555;
                    }
                    if ((*(_BYTE *)(*(_QWORD *)(v1425 + 104) + v967) & 0x10) != 0)
                    {
                      v651 += v969;
                      v17[10] = v651;
                      if (--v965)
                        continue;
                    }
                    goto LABEL_2555;
                  }
                  goto LABEL_2279;
                case 12:
                  v669 = a4;
                  if (v648 <= v649)
                    goto LABEL_2555;
                  v973 = *v1422;
                  while ((unint64_t)v651 < v973)
                  {
                    v974 = *(_DWORD *)(v1425 + 252);
                    if (v974)
                    {
                      if (_pcre2_is_newline_8(v651, v974, v973, v1413, v1420))
                        goto LABEL_2555;
                      v651 = v17[10];
                      v973 = *v1422;
                    }
                    else
                    {
                      v975 = *v1413;
                      if ((unint64_t)v651 <= v973 - v975
                        && *v651 == *(unsigned __int8 *)(v1425 + 260)
                        && ((_DWORD)v975 == 1 || v651[1] == *(unsigned __int8 *)(v1425 + 261)))
                      {
                        goto LABEL_2555;
                      }
                    }
                    v976 = *v1424;
                    v977 = v651 + 1;
                    if (*v1424)
                    {
                      if ((unint64_t)v977 >= v973
                        && !*(_DWORD *)(v1425 + 252)
                        && *v1413 == 2
                        && *v651 == *(unsigned __int8 *)(v1425 + 260))
                      {
                        *v1419 = 1;
                        if (v976 > 1)
                          return 4294967294;
                      }
                    }
                    do
                    {
                      v651 = v977;
                      v17[10] = v977;
                      if ((unint64_t)v977 >= v973)
                        break;
                      ++v977;
                    }
                    while ((*v651 & 0xC0) == 0x80);
                    if (++v649 >= *((_DWORD *)v17 + 15))
                      goto LABEL_2555;
                  }
                  goto LABEL_2279;
                case 13:
                  v669 = a4;
                  if (v648 != -1)
                  {
                    if (v648 <= v649)
                      goto LABEL_2555;
                    v978 = *v1422;
                    do
                    {
                      if ((unint64_t)v651 >= v978)
                        goto LABEL_2279;
                      v979 = v651 + 1;
                      do
                      {
                        v651 = v979;
                        v17[10] = v979;
                        if ((unint64_t)v979 >= v978)
                          break;
                        ++v979;
                      }
                      while ((*v651 & 0xC0) == 0x80);
                      ++v649;
                    }
                    while (v649 != v648);
                    goto LABEL_2555;
                  }
                  v1049 = *v18;
                  v17[10] = (unsigned __int8 *)*v18;
                  v992 = *v1424;
                  if (!*v1424)
                    goto LABEL_2555;
                  if (v1049 > *v1421)
                    goto LABEL_2282;
                  goto LABEL_2281;
                case 14:
                  v669 = a4;
                  v980 = (unsigned __int8 *)*v18;
                  if (v650 <= *v18 - v651)
                  {
                    v17[10] = &v651[v650];
                  }
                  else
                  {
                    v17[10] = v980;
                    v981 = *v1424;
                    if (*v1424 && ((unint64_t)v980 > *v1421 || *v1418))
                    {
                      *v1419 = 1;
                      if (v981 > 1)
                        return 4294967294;
                    }
                  }
                  goto LABEL_2555;
                case 17:
                  v669 = a4;
                  v982 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_2555;
                  v983 = *v1422;
                  while (1)
                  {
                    if ((unint64_t)v651 >= v983)
                      goto LABEL_2279;
                    v984 = *v651;
                    if (v984 < 0xC0)
                    {
                      v987 = 1;
                      v986 = v1425;
                    }
                    else
                    {
                      v985 = v651[1] & 0x3F;
                      v986 = v1425;
                      if ((v984 & 0x20) != 0)
                      {
                        if ((v984 & 0x10) != 0)
                        {
                          if ((v984 & 8) != 0)
                          {
                            v988 = v651[2] & 0x3F;
                            v989 = v651[3] & 0x3F;
                            v990 = v651[4] & 0x3F;
                            if ((v984 & 4) != 0)
                            {
                              v984 = ((v984 & 1) << 30) | (v985 << 24) | (v988 << 18) | (v989 << 12) | (v990 << 6) | v651[5] & 0x3F;
                              v987 = 6;
                            }
                            else
                            {
                              v984 = ((v984 & 3) << 24) | (v985 << 18) | (v988 << 12) | (v989 << 6) | v990;
                              v987 = 5;
                            }
                          }
                          else
                          {
                            v984 = ((v984 & 7) << 18) | (v985 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v987 = 4;
                          }
                        }
                        else
                        {
                          v984 = ((v984 & 0xF) << 12) | (v985 << 6) | v651[2] & 0x3F;
                          v987 = 3;
                        }
                      }
                      else
                      {
                        v987 = 2;
                        v984 = v651[1] & 0x3F | ((v984 & 0x1F) << 6);
                      }
                    }
                    if (v984 != 10)
                    {
                      if (v984 == 13)
                      {
                        v991 = v651 + 1;
                        v17[10] = v651 + 1;
                        if ((unint64_t)(v651 + 1) >= v983)
                          goto LABEL_2555;
                        if (*v991 != 10)
                          goto LABEL_2277;
                        v987 = 2;
                      }
                      else if (*(_WORD *)(v986 + 130) == 2 || v984 - 11 >= 2 && v984 - 8232 >= 2 && v984 != 133)
                      {
                        goto LABEL_2555;
                      }
                    }
                    v991 = &v651[v987];
                    v17[10] = &v651[v987];
LABEL_2277:
                    v651 = v991;
                    if (!--v982)
                      goto LABEL_2555;
                  }
                case 18:
                case 19:
                  v669 = a4;
                  v670 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_2555;
                  v671 = *v1422;
                  v672 = v652 == 18;
                  break;
                case 20:
                case 21:
                  v669 = a4;
                  v844 = v648 - v649;
                  if (v648 <= v649)
                    goto LABEL_2555;
                  v845 = *v1422;
                  v846 = v652 == 20;
                  while ((unint64_t)v651 < v845)
                  {
                    v847 = *v651;
                    if (v847 < 0xC0)
                    {
                      v849 = 1;
                    }
                    else
                    {
                      v848 = v651[1] & 0x3F;
                      if ((v847 & 0x20) != 0)
                      {
                        if ((v847 & 0x10) != 0)
                        {
                          if ((v847 & 8) != 0)
                          {
                            v850 = v651[2] & 0x3F;
                            v851 = v651[3] & 0x3F;
                            v852 = v651[4] & 0x3F;
                            if ((v847 & 4) != 0)
                            {
                              v847 = ((v847 & 1) << 30) | (v848 << 24) | (v850 << 18) | (v851 << 12) | (v852 << 6) | v651[5] & 0x3F;
                              v849 = 6;
                            }
                            else
                            {
                              v847 = ((v847 & 3) << 24) | (v848 << 18) | (v850 << 12) | (v851 << 6) | v852;
                              v849 = 5;
                            }
                          }
                          else
                          {
                            v847 = ((v847 & 7) << 18) | (v848 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                            v849 = 4;
                          }
                        }
                        else
                        {
                          v847 = ((v847 & 0xF) << 12) | (v848 << 6) | v651[2] & 0x3F;
                          v849 = 3;
                        }
                      }
                      else
                      {
                        v849 = 2;
                        v847 = v651[1] & 0x3F | ((v847 & 0x1F) << 6);
                      }
                    }
                    v853 = v847 - 10;
                    v854 = v847 == 133;
                    v855 = v847 - 8232;
                    v857 = v853 < 4 || v855 < 2 || v854;
                    if (v857 != v846)
                    {
                      v651 += v849;
                      v17[10] = v651;
                      if (--v844)
                        continue;
                    }
                    goto LABEL_2555;
                  }
LABEL_2279:
                  v992 = *v1424;
                  if (!*v1424)
                    goto LABEL_2555;
                  if ((unint64_t)v651 > *v1421)
                    goto LABEL_2282;
LABEL_2281:
                  if (*v1418)
                  {
LABEL_2282:
                    *v1419 = 1;
                    if (v992 > 1)
                      return 4294967294;
                  }
LABEL_2555:
                  v12 = 2;
                  a4 = v669;
                  a7 = v1425;
                  v16 = v1423;
                  v18 = v1422;
                  if ((_DWORD)v204 != 2)
                  {
                    v1050 = v17[10];
                    v12 = v204;
LABEL_3412:
                    if (v1050 > v17[1])
                    {
                      v13 = 0;
                      a2 = *v17;
                      v1377 = -35;
                      goto LABEL_3460;
                    }
                  }
                  continue;
                default:
                  return v22;
              }
              while (1)
              {
                if ((unint64_t)v651 >= v671)
                  goto LABEL_2279;
                v673 = *v651;
                if (v673 < 0xC0)
                {
                  v675 = 1;
                }
                else
                {
                  v674 = v651[1] & 0x3F;
                  if ((v673 & 0x20) != 0)
                  {
                    if ((v673 & 0x10) != 0)
                    {
                      if ((v673 & 8) != 0)
                      {
                        v676 = v651[2] & 0x3F;
                        v677 = v651[3] & 0x3F;
                        v678 = v651[4] & 0x3F;
                        if ((v673 & 4) != 0)
                        {
                          v673 = ((v673 & 1) << 30) | (v674 << 24) | (v676 << 18) | (v677 << 12) | (v678 << 6) | v651[5] & 0x3F;
                          v675 = 6;
                        }
                        else
                        {
                          v673 = ((v673 & 3) << 24) | (v674 << 18) | (v676 << 12) | (v677 << 6) | v678;
                          v675 = 5;
                        }
                      }
                      else
                      {
                        v673 = ((v673 & 7) << 18) | (v674 << 12) | ((v651[2] & 0x3F) << 6) | v651[3] & 0x3F;
                        v675 = 4;
                      }
                    }
                    else
                    {
                      v673 = ((v673 & 0xF) << 12) | (v674 << 6) | v651[2] & 0x3F;
                      v675 = 3;
                    }
                  }
                  else
                  {
                    v675 = 2;
                    v673 = v651[1] & 0x3F | ((v673 & 0x1F) << 6);
                  }
                }
                v679 = 1;
                if (v673 < 0x2000)
                {
                  if (v673 <= 159)
                  {
                    if (v673 == 9 || v673 == 32)
                      goto LABEL_1506;
                  }
                  else if (v673 == 160 || v673 == 5760 || v673 == 6158)
                  {
                    goto LABEL_1506;
                  }
                }
                else if (v673 > 8238)
                {
                  if (v673 == 8239 || v673 == 8287 || v673 == 12288)
                    goto LABEL_1506;
                }
                else if ((v673 - 0x2000) < 0xB)
                {
                  goto LABEL_1506;
                }
                v679 = 0;
LABEL_1506:
                if (v679 != v672)
                {
                  v651 += v675;
                  v17[10] = v651;
                  if (--v670)
                    continue;
                }
                goto LABEL_2555;
              }
            }
            switch(v652)
            {
              case 6:
                v680 = a4;
                v993 = v648 - v649;
                if (v648 <= v649)
                  goto LABEL_2389;
                v994 = *v1422;
                while ((unint64_t)v651 < v994)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v1425 + 104) + *v651) & 8) == 0)
                  {
                    v17[10] = ++v651;
                    if (--v993)
                      continue;
                  }
                  goto LABEL_2389;
                }
                goto LABEL_2383;
              case 7:
                v680 = a4;
                v995 = v648 - v649;
                if (v648 <= v649)
                  goto LABEL_2389;
                v996 = *v1422;
                while ((unint64_t)v651 < v996)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v1425 + 104) + *v651) & 8) != 0)
                  {
                    v17[10] = ++v651;
                    if (--v995)
                      continue;
                  }
                  goto LABEL_2389;
                }
                goto LABEL_2383;
              case 8:
                v680 = a4;
                v997 = v648 - v649;
                if (v648 <= v649)
                  goto LABEL_2389;
                v998 = *v1422;
                while ((unint64_t)v651 < v998)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v1425 + 104) + *v651) & 1) == 0)
                  {
                    v17[10] = ++v651;
                    if (--v997)
                      continue;
                  }
                  goto LABEL_2389;
                }
                goto LABEL_2383;
              case 9:
                v680 = a4;
                v999 = v648 - v649;
                if (v648 <= v649)
                  goto LABEL_2389;
                v1000 = *v1422;
                while ((unint64_t)v651 < v1000)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v1425 + 104) + *v651) & 1) != 0)
                  {
                    v17[10] = ++v651;
                    if (--v999)
                      continue;
                  }
                  goto LABEL_2389;
                }
                goto LABEL_2383;
              case 10:
                v680 = a4;
                v1001 = v648 - v649;
                if (v648 <= v649)
                  goto LABEL_2389;
                v1002 = *v1422;
                while ((unint64_t)v651 < v1002)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v1425 + 104) + *v651) & 0x10) == 0)
                  {
                    v17[10] = ++v651;
                    if (--v1001)
                      continue;
                  }
                  goto LABEL_2389;
                }
                goto LABEL_2383;
              case 11:
                v680 = a4;
                v1003 = v648 - v649;
                if (v648 <= v649)
                  goto LABEL_2389;
                v1004 = *v1422;
                while ((unint64_t)v651 < v1004)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v1425 + 104) + *v651) & 0x10) != 0)
                  {
                    v17[10] = ++v651;
                    if (--v1003)
                      continue;
                  }
                  goto LABEL_2389;
                }
                goto LABEL_2383;
              case 12:
                v680 = a4;
                if (v648 <= v649)
                  goto LABEL_2389;
                while (1)
                {
                  v1005 = *v1422;
                  if ((unint64_t)v651 >= *v1422)
                    goto LABEL_2383;
                  v1006 = *(_DWORD *)(v1425 + 252);
                  if (v1006)
                  {
                    if (_pcre2_is_newline_8(v651, v1006, v1005, v1413, v1420))
                      goto LABEL_2389;
                    v651 = v17[10];
                  }
                  else
                  {
                    v1007 = *v1413;
                    if ((unint64_t)v651 <= v1005 - v1007
                      && *v651 == *(unsigned __int8 *)(v1425 + 260)
                      && ((_DWORD)v1007 == 1 || v651[1] == *(unsigned __int8 *)(v1425 + 261)))
                    {
                      goto LABEL_2389;
                    }
                  }
                  v1008 = *v1424;
                  if (*v1424)
                  {
                    if ((unint64_t)(v651 + 1) >= *v1422
                      && !*(_DWORD *)(v1425 + 252)
                      && *v1413 == 2
                      && *v651 == *(unsigned __int8 *)(v1425 + 260))
                    {
                      *v1419 = 1;
                      if (v1008 > 1)
                        return 4294967294;
                    }
                  }
                  v17[10] = ++v651;
                  if (++v649 >= *((_DWORD *)v17 + 15))
                    goto LABEL_2389;
                }
              case 13:
              case 14:
                v680 = a4;
                v681 = (unsigned __int8 *)*v18;
                if (v650 <= *v18 - v651)
                {
                  v17[10] = &v651[v650];
                }
                else
                {
                  v17[10] = v681;
                  v682 = *v1424;
                  if (*v1424 && ((unint64_t)v681 > *v1421 || *v1418))
                  {
                    *v1419 = 1;
                    if (v682 > 1)
                      return 4294967294;
                  }
                }
                goto LABEL_2389;
              case 17:
                v680 = a4;
                v1009 = v648 - v649;
                if (v648 <= v649)
                  goto LABEL_2389;
                v1010 = *v1422;
                break;
              case 18:
                v680 = a4;
                v1014 = v648 - v649;
                if (v648 <= v649)
                  goto LABEL_2389;
                v1015 = *v1422;
                while ((unint64_t)v651 < v1015)
                {
                  v1016 = *v651;
                  if (v1016 != 9 && v1016 != 32 && v1016 != 160)
                  {
                    v17[10] = ++v651;
                    if (--v1014)
                      continue;
                  }
                  goto LABEL_2389;
                }
                goto LABEL_2383;
              case 19:
                v680 = a4;
                v1017 = v648 - v649;
                if (v648 <= v649)
                  goto LABEL_2389;
                v1018 = *v1422;
                while ((unint64_t)v651 < v1018)
                {
                  v1019 = *v651;
                  if (v1019 == 9 || v1019 == 160 || v1019 == 32)
                  {
                    v17[10] = ++v651;
                    if (--v1017)
                      continue;
                  }
                  goto LABEL_2389;
                }
                goto LABEL_2383;
              case 20:
                v680 = a4;
                v1020 = v648 - v649;
                if (v648 <= v649)
                  goto LABEL_2389;
                v1021 = *v1422;
                while ((unint64_t)v651 < v1021)
                {
                  v1022 = *v651;
                  if ((v1022 - 10) >= 4 && v1022 != 133)
                  {
                    v17[10] = ++v651;
                    if (--v1020)
                      continue;
                  }
                  goto LABEL_2389;
                }
                goto LABEL_2383;
              case 21:
                v680 = a4;
                v1023 = v648 - v649;
                if (v648 <= v649)
                  goto LABEL_2389;
                v1024 = *v1422;
                while ((unint64_t)v651 < v1024)
                {
                  v1025 = *v651;
                  if ((v1025 - 10) < 4 || v1025 == 133)
                  {
                    v17[10] = ++v651;
                    if (--v1023)
                      continue;
                  }
                  goto LABEL_2389;
                }
LABEL_2383:
                v1026 = *v1424;
                if (*v1424 && ((unint64_t)v651 > *v1421 || *v1418))
                {
                  *v1419 = 1;
                  if (v1026 > 1)
                    return 4294967294;
                }
LABEL_2389:
                v12 = 2;
                a4 = v680;
                a7 = v1425;
                v16 = v1423;
                v18 = v1422;
                if ((_DWORD)v204 != 2)
                {
                  v1027 = v17[10];
                  v12 = v204;
LABEL_3373:
                  if (v1027 != v17[1])
                  {
                    v13 = 0;
                    a2 = *v17;
                    v1377 = 34;
                    goto LABEL_3460;
                  }
                }
                continue;
              default:
                return v22;
            }
            while (1)
            {
              if ((unint64_t)v651 >= v1010)
                goto LABEL_2383;
              v1011 = *v651;
              if (v1011 == 10)
              {
                v1013 = 1;
              }
              else if (v1011 == 13)
              {
                v1012 = v651 + 1;
                v17[10] = v651 + 1;
                if ((unint64_t)(v651 + 1) >= v1010)
                  goto LABEL_2389;
                if (*v1012 != 10)
                  goto LABEL_2350;
                v1013 = 2;
              }
              else
              {
                if (*(_WORD *)(v1425 + 130) == 2)
                  goto LABEL_2389;
                v1013 = 1;
                if ((v1011 - 11) >= 2 && v1011 != 133)
                  goto LABEL_2389;
              }
              v1012 = &v651[v1013];
              v17[10] = v1012;
LABEL_2350:
              v651 = v1012;
              if (!--v1009)
                goto LABEL_2389;
            }
          }
          v180 = (unsigned int *)(v17 + 7);
LABEL_372:
          if (v181 == 22)
          {
            v194 = v17[10];
            v195 = *v18;
            v196 = 1;
            while ((unint64_t)v194 < v195)
            {
              v197 = v194 + 1;
              v17[10] = v194 + 1;
              v198 = *v194;
              if (v16 && v198 >= 0xC0)
              {
                if ((v198 & 0x20) != 0)
                {
                  v199 = *v197 & 0x3F;
                  if ((v198 & 0x10) != 0)
                  {
                    if ((v198 & 8) != 0)
                    {
                      v200 = v194[2] & 0x3F;
                      v201 = v194[3] & 0x3F;
                      v202 = v194[4] & 0x3F;
                      if ((v198 & 4) != 0)
                      {
                        v198 = ((v198 & 1) << 30) | (v199 << 24) | (v200 << 18) | (v201 << 12) | (v202 << 6) | v194[5] & 0x3F;
                        v197 = v194 + 6;
                      }
                      else
                      {
                        v198 = ((v198 & 3) << 24) | (v199 << 18) | (v200 << 12) | (v201 << 6) | v202;
                        v197 = v194 + 5;
                      }
                    }
                    else
                    {
                      v198 = ((v198 & 7) << 18) | (v199 << 12) | ((v194[2] & 0x3F) << 6) | v194[3] & 0x3F;
                      v197 = v194 + 4;
                    }
                  }
                  else
                  {
                    v198 = ((v198 & 0xF) << 12) | (v199 << 6) | v194[2] & 0x3F;
                    v197 = v194 + 3;
                  }
                  v17[10] = v197;
                }
                else
                {
                  v197 = v194 + 2;
                  v17[10] = v194 + 2;
                  v198 = v194[1] & 0x3F | ((v198 & 0x1F) << 6);
                }
              }
              v194 = _pcre2_extuni_8(v198, v197, *(_QWORD *)(a7 + 152), v195, v1420, 0);
              a7 = v1425;
              v17[10] = v194;
              v195 = *(_QWORD *)(v1425 + 168);
              if ((unint64_t)v194 >= v195)
              {
                v203 = *v1424;
                if (*v1424)
                {
                  if ((unint64_t)v194 > *v1421 || *v1418)
                  {
                    *v1419 = 1;
                    if (v203 > 1)
                      return 4294967294;
                  }
                }
              }
              ++v196;
              v16 = v1423;
              if (v196 > *v180)
              {
                v183 = 0xFFFFFFFFLL;
                v204 = v12;
                v18 = v1422;
                goto LABEL_1426;
              }
            }
            v234 = *v1424;
            if (!*v1424)
            {
LABEL_1061:
              v23 = 0;
              v18 = v1422;
              goto LABEL_2584;
            }
            v235 = v1421;
            v18 = v1422;
LABEL_446:
            if ((unint64_t)v194 > *v235)
              goto LABEL_1970;
            goto LABEL_1969;
          }
          v22 = 4294967252;
          if (v16)
          {
            switch(v181)
            {
              case 6:
                v205 = *v18;
                v206 = v17[10];
                for (n = 1; n <= v40; ++n)
                {
                  if ((unint64_t)v206 >= v205)
                    goto LABEL_1916;
                  v17[10] = v206 + 1;
                  v208 = *v206;
                  if (v208 < 0xC0)
                  {
                    ++v206;
                  }
                  else if ((v208 & 0x20) != 0)
                  {
                    v210 = v206[1] & 0x3F;
                    if ((v208 & 0x10) != 0)
                    {
                      if ((v208 & 8) != 0)
                      {
                        v211 = v206[2] & 0x3F;
                        v212 = v206[3] & 0x3F;
                        v213 = v206[4] & 0x3F;
                        if ((v208 & 4) != 0)
                        {
                          v208 = ((v208 & 1) << 30) | (v210 << 24) | (v211 << 18) | (v212 << 12) | (v213 << 6) | v206[5] & 0x3F;
                          v206 += 6;
                        }
                        else
                        {
                          v208 = ((v208 & 3) << 24) | (v210 << 18) | (v211 << 12) | (v212 << 6) | v213;
                          v206 += 5;
                        }
                      }
                      else
                      {
                        v208 = ((v208 & 7) << 18) | (v210 << 12) | ((v206[2] & 0x3F) << 6) | v206[3] & 0x3F;
                        v206 += 4;
                      }
                    }
                    else
                    {
                      v208 = ((v208 & 0xF) << 12) | (v210 << 6) | v206[2] & 0x3F;
                      v206 += 3;
                    }
                    v17[10] = v206;
                  }
                  else
                  {
                    v17[10] = v206 + 2;
                    v209 = v206[1] & 0x3F | ((v208 & 0x1F) << 6);
                    v206 += 2;
                    v208 = v209;
                  }
                  if (v208 <= 0x7F && (*(_BYTE *)(*(_QWORD *)(a7 + 104) + v208) & 8) != 0)
                    goto LABEL_1971;
                  v183 = 0xFFFFFFFFLL;
                }
                goto LABEL_1425;
              case 7:
                v623 = 0;
                v624 = *v18;
                v625 = v17[10];
                do
                {
                  v217 = &v625[v623];
                  if ((unint64_t)&v625[v623] >= v624)
                    goto LABEL_1804;
                  if ((char)*v217 < 0 || (*(_BYTE *)(*(_QWORD *)(a7 + 104) + *v217) & 8) == 0)
                    goto LABEL_1971;
                  v17[10] = &v625[++v623];
                  v183 = 0xFFFFFFFFLL;
                }
                while ((int)v623 + 1 <= v40);
                goto LABEL_1425;
              case 8:
                v626 = *v18;
                v627 = v17[10];
                for (ii = 1; ii <= v40; ++ii)
                {
                  if ((unint64_t)v627 >= v626)
                    goto LABEL_1967;
                  if (((char)*v627 & 0x80000000) == 0 && (*(_BYTE *)(*(_QWORD *)(a7 + 104) + *v627) & 1) != 0)
                    goto LABEL_1971;
                  v629 = v627 + 1;
                  do
                  {
                    v627 = v629;
                    v17[10] = v629;
                    if ((unint64_t)v629 >= v626)
                      break;
                    ++v629;
                  }
                  while ((*v627 & 0xC0) == 0x80);
                  v183 = 0xFFFFFFFFLL;
                }
                goto LABEL_1425;
              case 9:
                v630 = 0;
                v631 = *v18;
                v632 = v17[10];
                do
                {
                  v217 = &v632[v630];
                  if ((unint64_t)&v632[v630] >= v631)
                    goto LABEL_1804;
                  if ((char)*v217 < 0 || (*(_BYTE *)(*(_QWORD *)(a7 + 104) + *v217) & 1) == 0)
                    goto LABEL_1971;
                  v17[10] = &v632[++v630];
                  v183 = 0xFFFFFFFFLL;
                }
                while ((int)v630 + 1 <= v40);
                goto LABEL_1425;
              case 10:
                v633 = *v18;
                v627 = v17[10];
                for (jj = 1; jj <= v40; ++jj)
                {
                  if ((unint64_t)v627 >= v633)
                  {
LABEL_1967:
                    v234 = *v1424;
                    if (*v1424)
                    {
                      if ((unint64_t)v627 > *v1421)
                        goto LABEL_1970;
                      goto LABEL_1969;
                    }
                    goto LABEL_1971;
                  }
                  if (((char)*v627 & 0x80000000) == 0 && (*(_BYTE *)(*(_QWORD *)(a7 + 104) + *v627) & 0x10) != 0)
                    goto LABEL_1971;
                  v635 = v627 + 1;
                  do
                  {
                    v627 = v635;
                    v17[10] = v635;
                    if ((unint64_t)v635 >= v633)
                      break;
                    ++v635;
                  }
                  while ((*v627 & 0xC0) == 0x80);
                  v183 = 0xFFFFFFFFLL;
                }
                goto LABEL_1425;
              case 11:
                v636 = 0;
                v637 = *v18;
                v638 = v17[10];
                do
                {
                  v217 = &v638[v636];
                  if ((unint64_t)&v638[v636] >= v637)
                    goto LABEL_1804;
                  if ((char)*v217 < 0 || (*(_BYTE *)(*(_QWORD *)(a7 + 104) + *v217) & 0x10) == 0)
                    goto LABEL_1971;
                  v17[10] = &v638[++v636];
                  v183 = 0xFFFFFFFFLL;
                }
                while ((int)v636 + 1 <= v40);
                goto LABEL_1425;
              case 12:
                v194 = v17[10];
                v639 = *v18;
                v640 = 1;
                while ((unint64_t)v194 < v639)
                {
                  v641 = *(_DWORD *)(a7 + 252);
                  if (v641)
                  {
                    if (_pcre2_is_newline_8(v194, v641, v639, v1413, v1420))
                      goto LABEL_2575;
                    v194 = v17[10];
                    v18 = v1422;
                    v639 = *v1422;
                    a7 = v1425;
                    v16 = v1423;
                  }
                  else
                  {
                    v642 = *v1413;
                    if ((unint64_t)v194 <= v639 - v642
                      && *v194 == *(unsigned __int8 *)(a7 + 260)
                      && ((_DWORD)v642 == 1 || v194[1] == *(unsigned __int8 *)(a7 + 261)))
                    {
                      goto LABEL_1971;
                    }
                  }
                  v643 = *v1424;
                  v644 = v194 + 1;
                  if (*v1424)
                  {
                    if ((unint64_t)v644 >= v639
                      && !*(_DWORD *)(a7 + 252)
                      && *v1413 == 2
                      && *v194 == *(unsigned __int8 *)(a7 + 260))
                    {
                      *v1419 = 1;
                      if (v643 > 1)
                        return 4294967294;
                    }
                  }
                  do
                  {
                    v194 = v644;
                    v17[10] = v644;
                    if ((unint64_t)v644 >= v639)
                      break;
                    ++v644;
                  }
                  while ((*v194 & 0xC0) == 0x80);
                  ++v640;
                  v183 = 0xFFFFFFFFLL;
                  if (v640 > *v180)
                    goto LABEL_1425;
                }
LABEL_1972:
                v234 = *v1424;
                if (!*v1424)
                  goto LABEL_1971;
                v235 = v1421;
                goto LABEL_446;
              case 13:
                v645 = *v18;
                v206 = v17[10];
                for (kk = 1; kk <= v40; ++kk)
                {
                  if ((unint64_t)v206 >= v645)
                    goto LABEL_1916;
                  v647 = v206 + 1;
                  do
                  {
                    v206 = v647;
                    v17[10] = v647;
                    if ((unint64_t)v647 >= v645)
                      break;
                    ++v647;
                  }
                  while ((*v206 & 0xC0) == 0x80);
                  v183 = 0xFFFFFFFFLL;
                }
                goto LABEL_1425;
              case 14:
                v601 = (unint64_t)v17[10];
                if (v601 <= *v18 - v40)
                  goto LABEL_1423;
                goto LABEL_1971;
              case 17:
                v792 = *v18;
                v217 = v17[10];
                v793 = 1;
                while (1)
                {
                  if ((unint64_t)v217 >= v792)
                  {
LABEL_1804:
                    v234 = *v1424;
                    if (!*v1424)
                      goto LABEL_1971;
                    if ((unint64_t)v217 <= *v1421)
                      goto LABEL_1969;
LABEL_1970:
                    *v1419 = 1;
                    if (v234 <= 1)
                      goto LABEL_1971;
                    return 4294967294;
                  }
                  v794 = v217 + 1;
                  v17[10] = v217 + 1;
                  v795 = *v217;
                  if (v795 >= 0xC0)
                  {
                    if ((v795 & 0x20) != 0)
                    {
                      v796 = *v794 & 0x3F;
                      if ((v795 & 0x10) != 0)
                      {
                        if ((v795 & 8) != 0)
                        {
                          v797 = v217[2] & 0x3F;
                          v798 = v217[3] & 0x3F;
                          v799 = v217[4] & 0x3F;
                          if ((v795 & 4) != 0)
                          {
                            v795 = ((v795 & 1) << 30) | (v796 << 24) | (v797 << 18) | (v798 << 12) | (v799 << 6) | v217[5] & 0x3F;
                            v794 = v217 + 6;
                          }
                          else
                          {
                            v795 = ((v795 & 3) << 24) | (v796 << 18) | (v797 << 12) | (v798 << 6) | v799;
                            v794 = v217 + 5;
                          }
                        }
                        else
                        {
                          v795 = ((v795 & 7) << 18) | (v796 << 12) | ((v217[2] & 0x3F) << 6) | v217[3] & 0x3F;
                          v794 = v217 + 4;
                        }
                      }
                      else
                      {
                        v795 = ((v795 & 0xF) << 12) | (v796 << 6) | v217[2] & 0x3F;
                        v794 = v217 + 3;
                      }
                      v17[10] = v794;
                    }
                    else
                    {
                      v794 = v217 + 2;
                      v17[10] = v217 + 2;
                      v795 = v217[1] & 0x3F | ((v795 & 0x1F) << 6);
                    }
                  }
                  if (v795 <= 12)
                    break;
                  if ((v795 - 8232) < 2 || v795 == 133)
                    goto LABEL_1799;
                  if (v795 != 13)
                    goto LABEL_3357;
                  if ((unint64_t)v794 < v792 && *v794 == 10)
                    v17[10] = ++v794;
LABEL_1800:
                  ++v793;
                  v183 = 0xFFFFFFFFLL;
                  v217 = v794;
                  if (v793 > v40)
                    goto LABEL_1425;
                }
                if ((v795 - 11) >= 2)
                {
                  if (v795 != 10)
                    goto LABEL_3357;
                  goto LABEL_1800;
                }
LABEL_1799:
                if (*(_WORD *)(a7 + 130) == 2)
                  goto LABEL_1971;
                goto LABEL_1800;
              case 18:
                v800 = *v18;
                v801 = v17[10];
                for (mm = 1; mm <= v40; ++mm)
                {
                  if ((unint64_t)v801 >= v800)
                  {
                    v1057 = *v1424;
                    if (!*v1424)
                      goto LABEL_1971;
                    if ((unint64_t)v801 <= *v1421 && !*v1418 || (*v1419 = 1, v1057 <= 1))
                    {
LABEL_2575:
                      v23 = 0;
                      a7 = v1425;
                      v16 = v1423;
                      v18 = v1422;
                      goto LABEL_2584;
                    }
                    return 4294967294;
                  }
                  v17[10] = v801 + 1;
                  v803 = *v801;
                  if (v803 < 0xC0)
                  {
                    ++v801;
                  }
                  else if ((v803 & 0x20) != 0)
                  {
                    v805 = v801[1] & 0x3F;
                    if ((v803 & 0x10) != 0)
                    {
                      if ((v803 & 8) != 0)
                      {
                        v806 = v801[2] & 0x3F;
                        v807 = v801[3] & 0x3F;
                        v808 = v801[4] & 0x3F;
                        if ((v803 & 4) != 0)
                        {
                          v803 = ((v803 & 1) << 30) | (v805 << 24) | (v806 << 18) | (v807 << 12) | (v808 << 6) | v801[5] & 0x3F;
                          v801 += 6;
                        }
                        else
                        {
                          v803 = ((v803 & 3) << 24) | (v805 << 18) | (v806 << 12) | (v807 << 6) | v808;
                          v801 += 5;
                        }
                      }
                      else
                      {
                        v803 = ((v803 & 7) << 18) | (v805 << 12) | ((v801[2] & 0x3F) << 6) | v801[3] & 0x3F;
                        v801 += 4;
                      }
                    }
                    else
                    {
                      v803 = ((v803 & 0xF) << 12) | (v805 << 6) | v801[2] & 0x3F;
                      v801 += 3;
                    }
                    v17[10] = v801;
                  }
                  else
                  {
                    v17[10] = v801 + 2;
                    v804 = v801[1] & 0x3F | ((v803 & 0x1F) << 6);
                    v801 += 2;
                    v803 = v804;
                  }
                  if (v803 < 0x2000)
                  {
                    if (v803 <= 159)
                    {
                      if (v803 == 9 || v803 == 32)
                        goto LABEL_1958;
                    }
                    else if (v803 == 160 || v803 == 5760 || v803 == 6158)
                    {
                      goto LABEL_1958;
                    }
                  }
                  else if (v803 > 8238)
                  {
                    if (v803 == 8239 || v803 == 8287 || v803 == 12288)
                      goto LABEL_1958;
                  }
                  else if ((v803 - 0x2000) < 0xB)
                  {
                    goto LABEL_1958;
                  }
                  v183 = 0xFFFFFFFFLL;
                }
                goto LABEL_1425;
              case 19:
                v809 = *v18;
                v460 = v17[10];
                v810 = 1;
                break;
              case 20:
                v818 = *v18;
                v206 = v17[10];
                for (nn = 1; nn <= v40; ++nn)
                {
                  if ((unint64_t)v206 >= v818)
                    goto LABEL_1916;
                  v17[10] = v206 + 1;
                  v820 = *v206;
                  if (v820 < 0xC0)
                  {
                    ++v206;
                  }
                  else if ((v820 & 0x20) != 0)
                  {
                    v822 = v206[1] & 0x3F;
                    if ((v820 & 0x10) != 0)
                    {
                      if ((v820 & 8) != 0)
                      {
                        v823 = v206[2] & 0x3F;
                        v824 = v206[3] & 0x3F;
                        v825 = v206[4] & 0x3F;
                        if ((v820 & 4) != 0)
                        {
                          v820 = ((v820 & 1) << 30) | (v822 << 24) | (v823 << 18) | (v824 << 12) | (v825 << 6) | v206[5] & 0x3F;
                          v206 += 6;
                        }
                        else
                        {
                          v820 = ((v820 & 3) << 24) | (v822 << 18) | (v823 << 12) | (v824 << 6) | v825;
                          v206 += 5;
                        }
                      }
                      else
                      {
                        v820 = ((v820 & 7) << 18) | (v822 << 12) | ((v206[2] & 0x3F) << 6) | v206[3] & 0x3F;
                        v206 += 4;
                      }
                    }
                    else
                    {
                      v820 = ((v820 & 0xF) << 12) | (v822 << 6) | v206[2] & 0x3F;
                      v206 += 3;
                    }
                    v17[10] = v206;
                  }
                  else
                  {
                    v17[10] = v206 + 2;
                    v821 = v206[1] & 0x3F | ((v820 & 0x1F) << 6);
                    v206 += 2;
                    v820 = v821;
                  }
                  v826 = v820 - 10 >= 4 && v820 - 8232 >= 2;
                  if (!v826 || v820 == 133)
                    goto LABEL_1958;
                  v183 = 0xFFFFFFFFLL;
                }
                goto LABEL_1425;
              case 21:
                v827 = *v18;
                v206 = v17[10];
                for (i1 = 1; i1 <= v40; ++i1)
                {
                  if ((unint64_t)v206 >= v827)
                  {
LABEL_1916:
                    v234 = *v1424;
                    if (!*v1424)
                      goto LABEL_1971;
                    if ((unint64_t)v206 <= *v1421)
                      goto LABEL_1969;
                    goto LABEL_1970;
                  }
                  v17[10] = v206 + 1;
                  v829 = *v206;
                  if (v829 < 0xC0)
                  {
                    ++v206;
                  }
                  else if ((v829 & 0x20) != 0)
                  {
                    v831 = v206[1] & 0x3F;
                    if ((v829 & 0x10) != 0)
                    {
                      if ((v829 & 8) != 0)
                      {
                        v832 = v206[2] & 0x3F;
                        v833 = v206[3] & 0x3F;
                        v834 = v206[4] & 0x3F;
                        if ((v829 & 4) != 0)
                        {
                          v829 = ((v829 & 1) << 30) | (v831 << 24) | (v832 << 18) | (v833 << 12) | (v834 << 6) | v206[5] & 0x3F;
                          v206 += 6;
                        }
                        else
                        {
                          v829 = ((v829 & 3) << 24) | (v831 << 18) | (v832 << 12) | (v833 << 6) | v834;
                          v206 += 5;
                        }
                      }
                      else
                      {
                        v829 = ((v829 & 7) << 18) | (v831 << 12) | ((v206[2] & 0x3F) << 6) | v206[3] & 0x3F;
                        v206 += 4;
                      }
                    }
                    else
                    {
                      v829 = ((v829 & 0xF) << 12) | (v831 << 6) | v206[2] & 0x3F;
                      v206 += 3;
                    }
                    v17[10] = v206;
                  }
                  else
                  {
                    v17[10] = v206 + 2;
                    v830 = v206[1] & 0x3F | ((v829 & 0x1F) << 6);
                    v206 += 2;
                    v829 = v830;
                  }
                  v835 = v829 - 10 >= 4 && v829 - 8232 >= 2;
                  if (v835 && v829 != 133)
                    goto LABEL_1958;
                  v183 = 0xFFFFFFFFLL;
                }
                goto LABEL_1425;
              default:
                return v22;
            }
            while (1)
            {
              if ((unint64_t)v460 >= v809)
              {
LABEL_1869:
                v234 = *v1424;
                if (!*v1424)
                  goto LABEL_1971;
                if ((unint64_t)v460 <= *v1421)
                  goto LABEL_1969;
                goto LABEL_1970;
              }
              v17[10] = v460 + 1;
              v811 = *v460;
              if (v811 < 0xC0)
              {
                ++v460;
              }
              else if ((v811 & 0x20) != 0)
              {
                v813 = v460[1] & 0x3F;
                if ((v811 & 0x10) != 0)
                {
                  if ((v811 & 8) != 0)
                  {
                    v814 = v460[2] & 0x3F;
                    v815 = v460[3] & 0x3F;
                    v816 = v460[4] & 0x3F;
                    if ((v811 & 4) != 0)
                    {
                      v811 = ((v811 & 1) << 30) | (v813 << 24) | (v814 << 18) | (v815 << 12) | (v816 << 6) | v460[5] & 0x3F;
                      v460 += 6;
                    }
                    else
                    {
                      v811 = ((v811 & 3) << 24) | (v813 << 18) | (v814 << 12) | (v815 << 6) | v816;
                      v460 += 5;
                    }
                  }
                  else
                  {
                    v811 = ((v811 & 7) << 18) | (v813 << 12) | ((v460[2] & 0x3F) << 6) | v460[3] & 0x3F;
                    v460 += 4;
                  }
                }
                else
                {
                  v811 = ((v811 & 0xF) << 12) | (v813 << 6) | v460[2] & 0x3F;
                  v460 += 3;
                }
                v17[10] = v460;
              }
              else
              {
                v17[10] = v460 + 2;
                v812 = v460[1] & 0x3F | ((v811 & 0x1F) << 6);
                v460 += 2;
                v811 = v812;
              }
              if (v811 < 0x2000)
              {
                if (v811 <= 159)
                {
                  if (v811 != 9 && v811 != 32)
                    goto LABEL_1958;
                  goto LABEL_1855;
                }
                if (v811 != 160 && v811 != 5760)
                {
                  v817 = 6158;
                  goto LABEL_1864;
                }
              }
              else if (v811 > 8238)
              {
                if (v811 != 8239 && v811 != 12288)
                {
                  v817 = 8287;
LABEL_1864:
                  if (v811 != v817)
                    goto LABEL_1958;
                }
              }
              else if ((v811 - 0x2000) >= 0xB)
              {
                goto LABEL_1958;
              }
LABEL_1855:
              ++v810;
              v183 = 0xFFFFFFFFLL;
              if (v810 > v40)
                goto LABEL_1425;
            }
          }
          switch(v181)
          {
            case 6:
              v214 = 0;
              v215 = *v18;
              v216 = v17[10];
              do
              {
                v217 = &v216[v214];
                if ((unint64_t)&v216[v214] >= v215)
                  goto LABEL_1804;
                if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + *v217) & 8) != 0)
                  goto LABEL_1971;
                v17[10] = &v216[++v214];
                v183 = 0xFFFFFFFFLL;
              }
              while ((int)v214 + 1 <= v40);
              goto LABEL_1425;
            case 7:
              v581 = 0;
              v582 = *v18;
              v583 = v17[10];
              do
              {
                v217 = &v583[v581];
                if ((unint64_t)&v583[v581] >= v582)
                  goto LABEL_1804;
                if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + *v217) & 8) == 0)
                  goto LABEL_1971;
                v17[10] = &v583[++v581];
                v183 = 0xFFFFFFFFLL;
              }
              while ((int)v581 + 1 <= v40);
              goto LABEL_1425;
            case 8:
              v584 = 0;
              v585 = *v18;
              v586 = v17[10];
              do
              {
                v217 = &v586[v584];
                if ((unint64_t)&v586[v584] >= v585)
                  goto LABEL_1804;
                if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + *v217) & 1) != 0)
                  goto LABEL_1971;
                v17[10] = &v586[++v584];
                v183 = 0xFFFFFFFFLL;
              }
              while ((int)v584 + 1 <= v40);
              goto LABEL_1425;
            case 9:
              v587 = 0;
              v588 = *v18;
              v589 = v17[10];
              do
              {
                v217 = &v589[v587];
                if ((unint64_t)&v589[v587] >= v588)
                  goto LABEL_1804;
                if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + *v217) & 1) == 0)
                  goto LABEL_1971;
                v17[10] = &v589[++v587];
                v183 = 0xFFFFFFFFLL;
              }
              while ((int)v587 + 1 <= v40);
              goto LABEL_1425;
            case 10:
              v590 = 0;
              v591 = *v18;
              v592 = v17[10];
              do
              {
                v217 = &v592[v590];
                if ((unint64_t)&v592[v590] >= v591)
                  goto LABEL_1804;
                if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + *v217) & 0x10) != 0)
                  goto LABEL_1971;
                v17[10] = &v592[++v590];
                v183 = 0xFFFFFFFFLL;
              }
              while ((int)v590 + 1 <= v40);
              goto LABEL_1425;
            case 11:
              v593 = 0;
              v594 = *v18;
              v595 = v17[10];
              do
              {
                v217 = &v595[v593];
                if ((unint64_t)&v595[v593] >= v594)
                  goto LABEL_1804;
                if ((*(_BYTE *)(*(_QWORD *)(a7 + 104) + *v217) & 0x10) == 0)
                  goto LABEL_1971;
                v17[10] = &v595[++v593];
                v183 = 0xFFFFFFFFLL;
              }
              while ((int)v593 + 1 <= v40);
              goto LABEL_1425;
            case 12:
              v194 = v17[10];
              v596 = 1;
              do
              {
                v597 = *v18;
                if ((unint64_t)v194 >= *v18)
                  goto LABEL_1972;
                v598 = *(_DWORD *)(a7 + 252);
                if (v598)
                {
                  if (_pcre2_is_newline_8(v194, v598, v597, v1413, v1420))
                    goto LABEL_2575;
                  v194 = v17[10];
                  a7 = v1425;
                  v16 = v1423;
                  v18 = v1422;
                }
                else
                {
                  v599 = *v1413;
                  if ((unint64_t)v194 <= v597 - v599
                    && *v194 == *(unsigned __int8 *)(a7 + 260)
                    && ((_DWORD)v599 == 1 || v194[1] == *(unsigned __int8 *)(a7 + 261)))
                  {
                    goto LABEL_1971;
                  }
                }
                v600 = *v1424;
                if (*v1424)
                {
                  if ((unint64_t)(v194 + 1) >= *v18
                    && !*(_DWORD *)(a7 + 252)
                    && *v1413 == 2
                    && *v194 == *(unsigned __int8 *)(a7 + 260))
                  {
                    *v1419 = 1;
                    if (v600 > 1)
                      return 4294967294;
                  }
                }
                v17[10] = ++v194;
                ++v596;
                v183 = 0xFFFFFFFFLL;
              }
              while (v596 <= *((_DWORD *)v17 + 14));
              goto LABEL_1425;
            case 13:
              v601 = (unint64_t)v17[10];
              if (v601 > *v18 - v40)
              {
                v602 = *v1424;
                if (!*v1424 || v601 <= *v1421 && !*v1418)
                  goto LABEL_1971;
                *v1419 = 1;
                if (v602 <= 1)
                  goto LABEL_1971;
                return 4294967294;
              }
LABEL_1423:
              v17[10] = (unsigned __int8 *)(v601 + v40);
              goto LABEL_1424;
            case 17:
              v603 = *v18;
              v217 = v17[10];
              v604 = 1;
              break;
            case 18:
              v607 = 0;
              v608 = *v18;
              v609 = v17[10];
              do
              {
                v217 = &v609[v607];
                if ((unint64_t)&v609[v607] >= v608)
                  goto LABEL_1804;
                v17[10] = v217 + 1;
                v610 = *v217;
                if (v610 == 9 || v610 == 32 || v610 == 160)
                  goto LABEL_1958;
                ++v607;
                v183 = 0xFFFFFFFFLL;
              }
              while ((int)v607 + 1 <= v40);
              goto LABEL_1425;
            case 19:
              v611 = 0;
              v612 = *v18;
              v613 = v17[10];
              do
              {
                v217 = &v613[v611];
                if ((unint64_t)&v613[v611] >= v612)
                  goto LABEL_1804;
                v17[10] = v217 + 1;
                v614 = *v217;
                if (v614 != 9 && v614 != 160 && v614 != 32)
                  goto LABEL_1958;
                ++v611;
                v183 = 0xFFFFFFFFLL;
              }
              while ((int)v611 + 1 <= v40);
              goto LABEL_1425;
            case 20:
              v615 = 0;
              v616 = *v18;
              v617 = v17[10];
              do
              {
                v217 = &v617[v615];
                if ((unint64_t)&v617[v615] >= v616)
                  goto LABEL_1804;
                v17[10] = v217 + 1;
                v618 = *v217;
                if ((v618 - 10) < 4 || v618 == 133)
                  goto LABEL_1958;
                ++v615;
                v183 = 0xFFFFFFFFLL;
              }
              while ((int)v615 + 1 <= v40);
              goto LABEL_1425;
            case 21:
              v619 = 0;
              v620 = *v18;
              v621 = v17[10];
              do
              {
                v217 = &v621[v619];
                if ((unint64_t)&v621[v619] >= v620)
                  goto LABEL_1804;
                v17[10] = v217 + 1;
                v622 = *v217;
                if ((v622 - 10) >= 4 && v622 != 133)
                  goto LABEL_1958;
                ++v619;
                v183 = 0xFFFFFFFFLL;
              }
              while ((int)v619 + 1 <= v40);
              goto LABEL_1425;
            default:
              return v22;
          }
          while (1)
          {
            if ((unint64_t)v217 >= v603)
              goto LABEL_1804;
            v605 = v217 + 1;
            v17[10] = v217 + 1;
            v606 = *v217;
            if (v606 > 0xC)
            {
              if (v606 == 133)
              {
LABEL_1322:
                if (*(_WORD *)(a7 + 130) == 2)
                  goto LABEL_1971;
                goto LABEL_1323;
              }
              if (v606 != 13)
                goto LABEL_3357;
              if ((unint64_t)v605 < v603 && *v605 == 10)
              {
                v605 = v217 + 2;
                v17[10] = v217 + 2;
              }
            }
            else
            {
              if (v606 - 11 < 2)
                goto LABEL_1322;
              if (v606 != 10)
                goto LABEL_3357;
            }
LABEL_1323:
            ++v604;
            v183 = 0xFFFFFFFFLL;
            v217 = v605;
            if (v604 > v40)
              goto LABEL_1425;
          }
        case 0x6Eu:
        case 0x6Fu:
          v85 = v20 + 1;
          v17[2] = v20 + 1;
          a2 = v20 + 33;
          *v17 = v20 + 33;
          v86 = v20[33] - 98;
          if (v86 > 0xB)
          {
            v17[7] = (unsigned __int8 *)0x100000001;
            v89 = 1;
            v88 = 1;
            if (v16)
              goto LABEL_137;
          }
          else
          {
            if (((1 << v86) & 0x73F) != 0)
            {
              a2 = v20 + 34;
              *v17 = v20 + 34;
              v87 = v20[33] - 98;
              v88 = dword_1A3ACE99C[v87];
              *((_DWORD *)v17 + 14) = v88;
              v89 = dword_1A3ACE9C8[v87];
              *((_DWORD *)v17 + 15) = v89;
              v90 = dword_1A3ACE9F4[v87];
              if (v16)
                goto LABEL_135;
            }
            else
            {
              v88 = __rev16(*((unsigned __int16 *)v20 + 17));
              *((_DWORD *)v17 + 14) = v88;
              v320 = __rev16(*((unsigned __int16 *)v20 + 18));
              if (v320)
                v89 = v320;
              else
                v89 = -1;
              *((_DWORD *)v17 + 15) = v89;
              v90 = dword_1A3ACE9F4[v20[33] - 98];
              a2 = v20 + 38;
              *v17 = v20 + 38;
              if (v16)
              {
LABEL_135:
                if (v88)
                {
                  v12 = v90;
LABEL_137:
                  v91 = *v18;
                  v92 = v17[10];
                  for (i2 = 1; i2 <= v88; ++i2)
                  {
                    if ((unint64_t)v92 >= v91)
                      goto LABEL_691;
                    v94 = v92 + 1;
                    v17[10] = v92 + 1;
                    v95 = *v92;
                    if (v95 < 0xC0)
                      goto LABEL_153;
                    if ((v95 & 0x20) != 0)
                    {
                      v96 = *v94 & 0x3F;
                      if ((v95 & 0x10) != 0)
                      {
                        if ((v95 & 8) != 0)
                        {
                          v97 = v92[2] & 0x3F;
                          v98 = v92[3] & 0x3F;
                          v99 = v92[4] & 0x3F;
                          if ((v95 & 4) != 0)
                          {
                            v95 = ((v95 & 1) << 30) | (v96 << 24) | (v97 << 18) | (v98 << 12) | (v99 << 6) | v92[5] & 0x3F;
                            v94 = v92 + 6;
                          }
                          else
                          {
                            v95 = ((v95 & 3) << 24) | (v96 << 18) | (v97 << 12) | (v98 << 6) | v99;
                            v94 = v92 + 5;
                          }
                        }
                        else
                        {
                          v95 = ((v95 & 7) << 18) | (v96 << 12) | ((v92[2] & 0x3F) << 6) | v92[3] & 0x3F;
                          v94 = v92 + 4;
                        }
                      }
                      else
                      {
                        v95 = ((v95 & 0xF) << 12) | (v96 << 6) | v92[2] & 0x3F;
                        v94 = v92 + 3;
                      }
                      v17[10] = v94;
                    }
                    else
                    {
                      v94 = v92 + 2;
                      v17[10] = v92 + 2;
                      v95 = v92[1] & 0x3F | ((v95 & 0x1F) << 6);
                    }
                    if (v95 < 0x100)
                    {
LABEL_153:
                      if (((v85[(unint64_t)v95 >> 3] >> (v95 & 7)) & 1) == 0)
                        goto LABEL_1958;
                    }
                    else if (v21 == 110)
                    {
                      goto LABEL_1958;
                    }
                    v92 = v94;
                  }
LABEL_666:
                  v90 = v12;
                }
LABEL_667:
                v12 = v90;
                if (v89 == v88)
                  continue;
                if (!(_DWORD)v90)
                {
                  v12 = 0;
                  v7 = a6;
                  if (!v16)
                  {
LABEL_3521:
                    v13 = 0;
                    v1377 = 23;
                    goto LABEL_3461;
                  }
                  v1377 = -56;
                  goto LABEL_3490;
                }
                v324 = v17[10];
                v17[1] = v324;
                if (!v16)
                {
                  v501 = v324;
                  v265 = v89 >= v88;
                  v502 = v89 - v88;
                  if (v502 != 0 && v265)
                  {
                    v503 = *v18;
                    v501 = v324;
                    while ((unint64_t)v501 < v503)
                    {
                      if (((v85[(unint64_t)*v501 >> 3] >> (*v501 & 7)) & 1) != 0)
                      {
                        v17[10] = ++v501;
                        if (--v502)
                          continue;
                      }
                      goto LABEL_2012;
                    }
                    v859 = *v1424;
                    if (*v1424 && ((unint64_t)v501 > *v1421 || *v1418))
                    {
                      *v1419 = 1;
                      if (v859 > 1)
                        return 4294967294;
                    }
                  }
LABEL_2012:
                  v12 = 2;
                  if ((_DWORD)v90 == 2)
                    continue;
LABEL_3358:
                  if (v501 < v324)
                  {
                    v23 = 0;
                    v12 = v90;
                    goto LABEL_2584;
                  }
                  v13 = 0;
                  a2 = *v17;
                  v1377 = 24;
                  goto LABEL_3459;
                }
                v265 = v89 >= v88;
                v325 = v89 - v88;
                if (v325 == 0 || !v265)
                  goto LABEL_2006;
                v326 = *v18;
                while (1)
                {
                  if ((unint64_t)v324 >= v326)
                  {
                    v858 = *v1424;
                    if (*v1424 && ((unint64_t)v324 > *v1421 || *v1418))
                    {
                      *v1419 = 1;
                      if (v858 > 1)
                        return 4294967294;
                    }
LABEL_2006:
                    v12 = 2;
                    if ((_DWORD)v90 == 2)
                      goto LABEL_8;
LABEL_3483:
                    v13 = 0;
                    a2 = *v17;
                    v1377 = -55;
LABEL_3459:
                    v12 = v90;
                    goto LABEL_3460;
                  }
                  v327 = *v324;
                  if (v327 < 0xC0)
                    break;
                  v328 = v324[1] & 0x3F;
                  if ((v327 & 0x20) != 0)
                  {
                    if ((v327 & 0x10) != 0)
                    {
                      if ((v327 & 8) != 0)
                      {
                        v330 = v324[2] & 0x3F;
                        v331 = v324[3] & 0x3F;
                        v332 = v324[4] & 0x3F;
                        if ((v327 & 4) != 0)
                        {
                          v327 = ((v327 & 1) << 30) | (v328 << 24) | (v330 << 18) | (v331 << 12) | (v332 << 6) | v324[5] & 0x3F;
                          v329 = 6;
                        }
                        else
                        {
                          v327 = ((v327 & 3) << 24) | (v328 << 18) | (v330 << 12) | (v331 << 6) | v332;
                          v329 = 5;
                        }
                      }
                      else
                      {
                        v327 = ((v327 & 7) << 18) | (v328 << 12) | ((v324[2] & 0x3F) << 6) | v324[3] & 0x3F;
                        v329 = 4;
                      }
                    }
                    else
                    {
                      v327 = ((v327 & 0xF) << 12) | (v328 << 6) | v324[2] & 0x3F;
                      v329 = 3;
                    }
                  }
                  else
                  {
                    v329 = 2;
                    v327 = v324[1] & 0x3F | ((v327 & 0x1F) << 6);
                  }
                  if (v327 < 0x100)
                    goto LABEL_688;
                  if (v21 == 110)
                    goto LABEL_2006;
LABEL_689:
                  v324 += v329;
                  v17[10] = v324;
                  if (!--v325)
                    goto LABEL_2006;
                }
                v329 = 1;
LABEL_688:
                if (((v85[(unint64_t)v327 >> 3] >> (v327 & 7)) & 1) == 0)
                  goto LABEL_2006;
                goto LABEL_689;
              }
            }
            if (!v88)
              goto LABEL_667;
            v12 = v90;
          }
          v321 = 0;
          v322 = *v18;
          v323 = v17[10];
          while (1)
          {
            v92 = &v323[v321];
            if ((unint64_t)&v323[v321] >= v322)
              break;
            v17[10] = v92 + 1;
            if (((v85[(unint64_t)*v92 >> 3] >> (*v92 & 7)) & 1) == 0)
              goto LABEL_1958;
            if ((int)++v321 + 1 > v88)
              goto LABEL_666;
          }
LABEL_691:
          v119 = *v1424;
          if (*v1424)
          {
            if ((unint64_t)v92 <= *v1421)
              goto LABEL_1956;
            goto LABEL_1957;
          }
          goto LABEL_1958;
        case 0x70u:
          v17[2] = v20 + 3;
          v218 = &v20[__rev16(*(unsigned __int16 *)(v20 + 1))];
          *v17 = v218;
          v219 = *v218 - 98;
          if (v219 > 0xB)
          {
            v17[7] = (unsigned __int8 *)0x100000001;
          }
          else
          {
            if (((1 << v219) & 0x73F) != 0)
            {
              *v17 = v218 + 1;
              v220 = *v218 - 98;
              v221 = dword_1A3ACE99C[v220];
              *((_DWORD *)v17 + 14) = v221;
              v222 = dword_1A3ACE9C8[v220];
              *((_DWORD *)v17 + 15) = v222;
              v223 = dword_1A3ACE9F4[v220];
            }
            else
            {
              v221 = __rev16(*(unsigned __int16 *)(v218 + 1));
              *((_DWORD *)v17 + 14) = v221;
              v222 = __rev16(*(unsigned __int16 *)(v218 + 3));
              if (!v222)
                v222 = -1;
              *((_DWORD *)v17 + 15) = v222;
              v223 = dword_1A3ACE9F4[*v218 - 98];
              *v17 = v218 + 5;
            }
            if (!v221)
            {
              v518 = 0;
              v12 = v223;
              goto LABEL_1117;
            }
            v12 = v223;
          }
          v511 = 1;
          do
          {
            v174 = v17[10];
            if ((unint64_t)v174 >= *v18)
            {
              v316 = v1424;
              a7 = v1425;
              goto LABEL_1136;
            }
            v17[10] = v174 + 1;
            v512 = *v174;
            if (v16 && v512 >= 0xC0)
            {
              if ((v512 & 0x20) != 0)
              {
                v513 = v174[1] & 0x3F;
                if ((v512 & 0x10) != 0)
                {
                  if ((v512 & 8) != 0)
                  {
                    v515 = v174[2] & 0x3F;
                    v516 = v174[3] & 0x3F;
                    v517 = v174[4] & 0x3F;
                    if ((v512 & 4) != 0)
                    {
                      v512 = ((v512 & 1) << 30) | (v513 << 24) | (v515 << 18) | (v516 << 12) | (v517 << 6) | v174[5] & 0x3F;
                      v514 = v174 + 6;
                    }
                    else
                    {
                      v512 = ((v512 & 3) << 24) | (v513 << 18) | (v515 << 12) | (v516 << 6) | v517;
                      v514 = v174 + 5;
                    }
                  }
                  else
                  {
                    v512 = ((v512 & 7) << 18) | (v513 << 12) | ((v174[2] & 0x3F) << 6) | v174[3] & 0x3F;
                    v514 = v174 + 4;
                  }
                }
                else
                {
                  v512 = ((v512 & 0xF) << 12) | (v513 << 6) | v174[2] & 0x3F;
                  v514 = v174 + 3;
                }
                v17[10] = v514;
              }
              else
              {
                v17[10] = v174 + 2;
                v512 = v174[1] & 0x3F | ((v512 & 0x1F) << 6);
              }
            }
            v23 = _pcre2_xclass_8(v512, v17[2]);
            if (!(_DWORD)v23)
              goto LABEL_724;
            ++v511;
            v518 = *((_DWORD *)v17 + 14);
            v16 = v1423;
            v18 = v1422;
          }
          while (v511 <= v518);
          v222 = *((_DWORD *)v17 + 15);
          v223 = v12;
          a7 = v1425;
LABEL_1117:
          if (v518 == v222)
            continue;
          if (!(_DWORD)v223)
          {
            v12 = 0;
LABEL_3603:
            v7 = a6;
            v13 = 0;
            a2 = *v17;
            v1377 = 100;
            goto LABEL_3461;
          }
          v519 = v17[10];
          v17[1] = v519;
          while (v518 < *((_DWORD *)v17 + 15))
          {
            if ((unint64_t)v519 >= *v18)
            {
              v860 = *v1424;
              if (*v1424 && ((unint64_t)v519 > *v1421 || *v1418))
              {
                *v1419 = 1;
                if (v860 > 1)
                  return 4294967294;
              }
              break;
            }
            v520 = *v519;
            v521 = 1;
            if (v16 && v520 >= 0xC0)
            {
              v522 = v519[1] & 0x3F;
              if ((v520 & 0x20) != 0)
              {
                if ((v520 & 0x10) != 0)
                {
                  if ((v520 & 8) != 0)
                  {
                    v523 = v519[2] & 0x3F;
                    v524 = v519[3] & 0x3F;
                    v525 = v519[4] & 0x3F;
                    if ((v520 & 4) != 0)
                    {
                      v520 = ((v520 & 1) << 30) | (v522 << 24) | (v523 << 18) | (v524 << 12) | (v525 << 6) | v519[5] & 0x3F;
                      v521 = 6;
                    }
                    else
                    {
                      v520 = ((v520 & 3) << 24) | (v522 << 18) | (v523 << 12) | (v524 << 6) | v525;
                      v521 = 5;
                    }
                  }
                  else
                  {
                    v520 = ((v520 & 7) << 18) | (v522 << 12) | ((v519[2] & 0x3F) << 6) | v519[3] & 0x3F;
                    v521 = 4;
                  }
                }
                else
                {
                  v520 = ((v520 & 0xF) << 12) | (v522 << 6) | v519[2] & 0x3F;
                  v521 = 3;
                }
              }
              else
              {
                v521 = 2;
                v520 = v519[1] & 0x3F | ((v520 & 0x1F) << 6);
              }
            }
            v526 = _pcre2_xclass_8(v520, v17[2]);
            a7 = v1425;
            v16 = v1423;
            v18 = v1422;
            if (!v526)
              break;
            v519 = &v17[10][v521];
            v17[10] = v519;
            ++v518;
          }
          v12 = 2;
          if ((_DWORD)v223 != 2)
            goto LABEL_3474;
          continue;
        case 0x71u:
        case 0x72u:
          v100 = v21 == 114;
          *((_DWORD *)v17 + 16) = v100;
          v17[5] = (unsigned __int8 *)(((v20[1] << 9) | (2 * v20[2])) - 2);
          v101 = v20 + 3;
          *v17 = v20 + 3;
          goto LABEL_167;
        case 0x73u:
        case 0x74u:
          v100 = v21 == 116;
          *((_DWORD *)v17 + 16) = v100;
          v102 = __rev16(*(unsigned __int16 *)(v20 + 3));
          v103 = *(_QWORD *)(a7 + 136);
          v104 = v20[1];
          v105 = v20[2];
          v106 = *(unsigned __int16 *)(a7 + 134);
          v101 = v20 + 5;
          *v17 = v20 + 5;
          if (!v102)
            goto LABEL_167;
          v107 = v17[15];
          v108 = (unsigned __int8 *)(v103 + (v105 | (v104 << 8)) * (unint64_t)v106 + 1);
          while (2)
          {
            v109 = (unsigned __int8 *)(((*(v108 - 1) << 9) | (2 * *v108)) - 2);
            v17[5] = v109;
            if (v109 >= v107)
            {
              if (v102 >= 2)
                goto LABEL_166;
            }
            else
            {
              v110 = v17[(_QWORD)v109 + 16] == (unsigned __int8 *)-1 && v102 > 1;
              if (v110)
              {
LABEL_166:
                v108 += v106;
                --v102;
                continue;
              }
            }
            break;
          }
LABEL_167:
          v111 = *v101;
          if ((v111 - 98) >= 6)
          {
            if ((v111 - 104) >= 2)
            {
              v333 = sub_1A3AAD9BC((unint64_t)v17[5], v100, (uint64_t)v17, a7, v1428);
              if (v333)
              {
                v16 = v1423;
                v18 = v1422;
                if (v333 < 1)
                {
                  v334 = v17[10];
                  a7 = v1425;
                  if ((unint64_t)v334 < *v1422)
                    goto LABEL_3357;
                }
                else
                {
                  v334 = (unsigned __int8 *)*v1422;
                  v17[10] = (unsigned __int8 *)*v1422;
                  a7 = v1425;
                }
                v577 = *v1424;
                if (*v1424 && ((unint64_t)v334 > *v1421 || *v1418))
                {
                  *v1419 = 1;
                  if (v577 > 1)
                    return 4294967294;
                }
LABEL_3357:
                v23 = 0;
                goto LABEL_2584;
              }
              v17[10] += (unint64_t)v1428[0];
LABEL_3424:
              a7 = v1425;
LABEL_3425:
              v16 = v1423;
              v18 = v1422;
              continue;
            }
            v113 = __rev16(*(unsigned __int16 *)(v101 + 1));
            *((_DWORD *)v17 + 14) = v113;
            v114 = __rev16(*(unsigned __int16 *)(v101 + 3));
            *((_DWORD *)v17 + 15) = v114;
            v124 = *v101;
            v123 = v101 + 5;
            v12 = dword_1A3ACE9F4[v124 - 98];
            if (!v114)
              v114 = -1;
            *((_DWORD *)v17 + 15) = v114;
            *v17 = v123;
          }
          else
          {
            *v17 = v101 + 1;
            v112 = *v101 - 98;
            v113 = dword_1A3ACE99C[v112];
            *((_DWORD *)v17 + 14) = v113;
            v114 = dword_1A3ACE9C8[v112];
            *((_DWORD *)v17 + 15) = v114;
            v12 = dword_1A3ACE9F4[v112];
          }
          v125 = (unint64_t)v17[5];
          if (v125 >= (unint64_t)v17[15]
            || (v126 = &v17[v125], v127 = v126[16], v127 == (unsigned __int8 *)-1))
          {
            if (!v113 || (*(_BYTE *)(a7 + 241) & 2) != 0)
              continue;
          }
          else
          {
            if (v127 == v126[17])
              continue;
            if (!v113)
            {
              v128 = 0;
              goto LABEL_201;
            }
          }
          v129 = 1;
          while (1)
          {
            v1427 = 0;
            v130 = sub_1A3AAD9BC((unint64_t)v17[5], *((_DWORD *)v17 + 16), (uint64_t)v17, a7, &v1427);
            if (v130)
              break;
            v17[10] = &v1427[(_QWORD)v17[10]];
            ++v129;
            v128 = *((_DWORD *)v17 + 14);
            a7 = v1425;
            if (v129 > v128)
            {
              v114 = *((_DWORD *)v17 + 15);
              v16 = v1423;
              v18 = v1422;
LABEL_201:
              if (v128 == v114)
                goto LABEL_8;
              if ((_DWORD)v12)
              {
                v17[1] = v17[10];
                v17[3] = (unsigned __int8 *)(v17[(_QWORD)v17[5] + 17] - v17[(_QWORD)v17[5] + 16]);
                v7 = a6;
                if (v128 < v114)
                {
                  v131 = 1;
                  while (1)
                  {
                    v1427 = 0;
                    v132 = sub_1A3AAD9BC((unint64_t)v17[5], *((_DWORD *)v17 + 16), (uint64_t)v17, a7, &v1427);
                    if (v132)
                      break;
                    if (v1427 != v17[3])
                      v131 = 0;
                    v17[10] = &v1427[(_QWORD)v17[10]];
                    ++v128;
                    a7 = v1425;
                    if (v128 >= *((_DWORD *)v17 + 15))
                      goto LABEL_1261;
                  }
                  if (v132 >= 1)
                  {
                    v579 = *v1424;
                    if (*v1424)
                    {
                      if (*v1422 > *v1421)
                      {
                        *v1419 = 1;
                        if (v579 >= 2)
                          return 4294967294;
                      }
                    }
                  }
                  a7 = v1425;
LABEL_1261:
                  v16 = v1423;
                  v18 = v1422;
                  if (!v131)
                  {
                    *((_DWORD *)v17 + 15) = v128;
LABEL_3500:
                    v13 = 0;
                    a2 = *v17;
                    v1377 = 22;
                    goto LABEL_3461;
                  }
                }
                v580 = v17[10];
LABEL_3356:
                if (v580 >= v17[1])
                {
                  v13 = 0;
                  a2 = *v17;
                  v1377 = 21;
                  goto LABEL_3460;
                }
                goto LABEL_3357;
              }
LABEL_3494:
              v7 = a6;
              v13 = 0;
              v1426 = 0;
              a2 = *v17;
              v1377 = 20;
              goto LABEL_3461;
            }
          }
          if (v130 < 1)
          {
            v301 = v17[10];
            v18 = v1422;
            a7 = v1425;
            v16 = v1423;
            if ((unint64_t)v301 < *v1422)
              goto LABEL_1958;
          }
          else
          {
            v18 = v1422;
            v301 = (unsigned __int8 *)*v1422;
            v17[10] = (unsigned __int8 *)*v1422;
            a7 = v1425;
            v16 = v1423;
          }
          v528 = *v1424;
          if (*v1424 && ((unint64_t)v301 > *v1421 || *v1418))
          {
            *v1419 = 1;
            if (v528 >= 2)
              return 4294967294;
          }
LABEL_1958:
          v23 = 0;
          goto LABEL_2584;
        case 0x75u:
          v1380 = __rev16(*(unsigned __int16 *)(v20 + 1));
          v1068 = (unsigned __int8 *)(*(_QWORD *)(a7 + 144) + v1380);
          if ((_DWORD)v1380)
            LODWORD(v1380) = __rev16(*(unsigned __int16 *)(v1068 + 3));
          v7 = a6;
          v13 = v1380 | 0x40000;
          if (*((_DWORD *)v17 + 26) == -1)
            goto LABEL_3560;
          v1381 = v17;
          do
          {
            v1382 = v1381[14];
            if (v1382 == (unsigned __int8 *)-1)
              goto LABEL_3560;
            v1383 = &v1382[*(_QWORD *)(a7 + 32)];
            v1381 = (unsigned __int8 **)&v1383[v1412];
          }
          while (*((_DWORD *)v1383 + 13) != v13);
          if (v17[10] == v1381[10])
            return 4294967244;
LABEL_3560:
          v17[1] = v1068;
          *((_DWORD *)v17 + 14) = v13;
          v1373 = *v1068;
          goto LABEL_3561;
        case 0x76u:
        case 0x77u:
          v23 = sub_1A3AADD64((uint64_t)v17, (_QWORD *)a7, (uint64_t *)v1428);
          if ((int)v23 > 0)
            goto LABEL_176;
          if ((v23 & 0x80000000) != 0)
            goto LABEL_177;
          v115 = &(*v17)[(unint64_t)v1428[0]];
          goto LABEL_3423;
        case 0x78u:
          do
          {
            v20 += __rev16(*(unsigned __int16 *)(v20 + 1));
            *v17 = v20;
          }
          while (*v20 == 120);
          continue;
        case 0x79u:
        case 0x7Au:
        case 0x7Bu:
        case 0x7Cu:
          v41 = 0;
          v42 = &v20[-__rev16(*(unsigned __int16 *)(v20 + 1))];
          v43 = *v42;
          if (v43 == 134 || v43 == 138)
            goto LABEL_593;
          v44 = &v17[14][*(_QWORD *)(a7 + 32)];
          v41 = &v44[v1412];
          v17[14] = *(unsigned __int8 **)&v44[v1412 + 112];
          v1414 = v44;
          if (*((unsigned __int16 *)v44 + 27) << 16 == 196608)
          {
            memcpy(v41 + 128, v17 + 16, 8 * (_QWORD)v17[15]);
            v18 = v1422;
            v16 = v1423;
            a7 = v1425;
            *((_QWORD *)v41 + 15) = v17[15];
            *((_QWORD *)v41 + 12) = v17[12];
            v17[4] = (unsigned __int8 *)((char *)v17 - (char *)v41);
            v23 = 1;
            goto LABEL_2584;
          }
          v43 = *v42;
LABEL_593:
          v23 = 1;
          switch(v43)
          {
            case 126:
            case 128:
              v302 = v17[10];
              if ((unint64_t)v302 > *(_QWORD *)(a7 + 192))
                *(_QWORD *)(a7 + 192) = v302;
              v17[10] = (unsigned __int8 *)*((_QWORD *)v41 + 10);
              goto LABEL_610;
            case 127:
            case 129:
              goto LABEL_2584;
            case 130:
            case 131:
              v304 = v17[10];
              if ((unint64_t)v304 > *(_QWORD *)(a7 + 192))
                *(_QWORD *)(a7 + 192) = v304;
              v17[10] = (unsigned __int8 *)*((_QWORD *)v41 + 10);
              goto LABEL_1074;
            case 132:
LABEL_610:
              v17[4] = (unsigned __int8 *)((char *)v17 - (char *)v41);
              for (i3 = *(_QWORD *)v41; ; *(_QWORD *)v41 = i3)
              {
                i3 += __rev16(*(unsigned __int16 *)(i3 + 1));
                if (*(_BYTE *)i3 != 120)
                  break;
              }
              goto LABEL_1074;
            case 133:
              v23 = _pcre2_script_run_8(*((unsigned __int8 **)v41 + 10), (unint64_t)v17[10], v1420);
              v18 = v1422;
              v16 = v1423;
              a7 = v1425;
              if ((_DWORD)v23)
                goto LABEL_1074;
              goto LABEL_2584;
            case 136:
            case 137:
            case 141:
            case 142:
              v299 = *(unsigned __int16 *)(v42 + 3);
              if (*((_DWORD *)v17 + 26) == bswap32(v299) >> 16)
              {
                memcpy(v17 + 16, &v1414[v1412 + 128], 8 * *(_QWORD *)&v1414[v1412 + 120]);
                v18 = v1422;
                v16 = v1423;
                a7 = v1425;
                v17[15] = *(unsigned __int8 **)&v1414[v1412 + 120];
                v17[13] = *(unsigned __int8 **)&v1414[v1412 + 104];
                v233 = *(unsigned __int8 **)&v1414[v1412];
              }
              else
              {
                v305 = __rev16(v299);
                v306 = 2 * v305 - 2;
                *((_DWORD *)v17 + 27) = v305;
                v307 = *(_QWORD *)(a7 + 152);
                v308 = (unsigned __int8 *)(*((_QWORD *)v41 + 10) - v307);
                v309 = &v17[v306];
                v310 = &v17[10][-v307];
                v309[16] = v308;
                v309[17] = v310;
                if ((unint64_t)v17[15] <= v306)
                  v17[15] = (unsigned __int8 *)(v306 + 2);
LABEL_1074:
                v233 = *v17;
                if (**v17 == 124)
                {
                  memcpy(v41 + 80, v17 + 10, __n);
                  v18 = v1422;
                  v16 = v1423;
                  a7 = v1425;
                  v23 = 4294966298;
                  goto LABEL_2584;
                }
                v504 = *((unsigned __int8 *)v17 + 73);
                if (v504 != 121 && (!v41 || v17[10] != *((unsigned __int8 **)v41 + 10)))
                {
                  v13 = 0;
                  v1378 = v233 + 3;
                  v1379 = v504 == 123;
                  if (v504 == 123)
                    v1377 = 6;
                  else
                    v1377 = 7;
                  if (v1379)
                    a2 = v1378;
                  else
                    a2 = v42;
                  goto LABEL_3460;
                }
              }
              break;
            default:
              goto LABEL_1074;
          }
          goto LABEL_3429;
        case 0x7Du:
          v224 = __rev16(*(unsigned __int16 *)(v20 + 1));
          if (v16)
          {
            if ((_DWORD)v224)
            {
              v225 = *(_QWORD *)(a7 + 160);
              v226 = v17[10];
              do
              {
                if ((unint64_t)v226 <= v225)
                  goto LABEL_3357;
                LODWORD(v224) = v224 - 1;
                v227 = v226 - 1;
                do
                {
                  v17[10] = v227;
                  v228 = *v227--;
                }
                while ((v228 & 0xC0) == 0x80);
                v226 = v227 + 1;
              }
              while ((_DWORD)v224);
            }
            else
            {
              v226 = v17[10];
            }
          }
          else
          {
            v317 = v17[10];
            if ((uint64_t)&v317[-*(_QWORD *)(a7 + 152)] < v224)
              goto LABEL_3357;
            v226 = &v317[-v224];
            v17[10] = v226;
          }
          if ((unint64_t)v226 < *v1421)
            *v1421 = (unint64_t)v226;
          goto LABEL_2583;
        case 0x7Eu:
        case 0x80u:
        case 0x82u:
        case 0x83u:
          v13 = v21 | 0x20000;
          *((_DWORD *)v17 + 14) = v21 | 0x20000;
          v1366 = *v20;
          goto LABEL_3485;
        case 0x7Fu:
        case 0x81u:
          v13 = v21 | 0x20000;
          *((_DWORD *)v17 + 14) = v21 | 0x20000;
          v1392 = *v20;
          goto LABEL_3508;
        case 0x84u:
        case 0x85u:
        case 0x8Bu:
          v13 = v21 | 0x20000;
          goto LABEL_3511;
        case 0x86u:
          if (!*(_DWORD *)(a7 + 80) && *((_DWORD *)v17 + 12))
          {
LABEL_3352:
            v1321 = __rev16(*(unsigned __int16 *)(v20 + 1));
            v17[1] = &v20[v1321];
            a2 = &v20[_pcre2_OP_lengths_8[*v20]];
            if (v20[v1321] == 120)
            {
              v13 = 0;
              v1377 = 1;
              goto LABEL_3460;
            }
            *v17 = a2;
            continue;
          }
          v13 = 0;
          *((_DWORD *)v17 + 14) = 0;
          goto LABEL_3519;
        case 0x87u:
        case 0x8Cu:
          *((_DWORD *)v17 + 16) = 0;
          v1376 = 0x20000;
          v1192 = v20;
          v7 = a6;
          goto LABEL_3515;
        case 0x88u:
        case 0x8Du:
          v13 = (bswap32(*(unsigned __int16 *)(v20 + 3)) >> 16) | 0x10000;
LABEL_3511:
          *((_DWORD *)v17 + 14) = v13;
          goto LABEL_3519;
        case 0x89u:
        case 0x8Eu:
          *((_DWORD *)v17 + 16) = 0;
          goto LABEL_3513;
        case 0x8Au:
        case 0x8Fu:
          v116 = __rev16(*(unsigned __int16 *)(v20 + 1));
          v17[3] = (unsigned __int8 *)v116;
          if (v20[v116] != 120)
          {
            v116 -= 3;
            v17[3] = (unsigned __int8 *)v116;
          }
          v7 = a6;
          v117 = v20 + 3;
          *v17 = v20 + 3;
          v118 = v20[3];
          if ((v118 & 0xFE) != 0x76)
            goto LABEL_737;
          v23 = sub_1A3AADD64((uint64_t)v17, (_QWORD *)a7, (uint64_t *)v1428);
          if ((int)v23 > 0)
          {
LABEL_176:
            v23 = 0;
LABEL_177:
            a7 = v1425;
LABEL_178:
            v16 = v1423;
            v18 = v1422;
            goto LABEL_2584;
          }
          a7 = v1425;
          if ((v23 & 0x80000000) != 0)
            goto LABEL_178;
          v357 = v1428[0];
          v117 = &(*v17)[(unint64_t)v1428[0]];
          *v17 = v117;
          v116 = v17[3] - v357;
          v17[3] = (unsigned __int8 *)v116;
          v118 = *v117;
LABEL_737:
          if (v118 <= 161)
          {
            v16 = v1423;
            v18 = v1422;
            switch(v118)
            {
              case 144:
                v358 = ((v117[1] << 9) | (2 * v117[2])) - 2;
                if (v358 >= (unint64_t)v17[15] || v17[v358 + 16] == (unsigned __int8 *)-1)
                  goto LABEL_3417;
                v118 = 0x90u;
                goto LABEL_3351;
              case 145:
                if (!(v117[4] | (v117[3] << 8)))
                  goto LABEL_3417;
                v532 = (v117[3] << 8) + v117[4] + 1;
                v533 = (unsigned __int8 *)(*(_QWORD *)(a7 + 136)
                                         + *(unsigned __int16 *)(a7 + 134)
                                         * (unint64_t)__rev16(*(unsigned __int16 *)(v117 + 1))
                                         + 1);
                while (1)
                {
                  v534 = ((*(v533 - 1) << 9) | (2 * *v533)) - 2;
                  if (v534 < (unint64_t)v17[15] && v17[v534 + 16] != (unsigned __int8 *)-1)
                    break;
                  v533 += *(unsigned __int16 *)(a7 + 134);
                  if (--v532 <= 1)
                    goto LABEL_3417;
                }
                v118 = 0x91u;
                goto LABEL_3351;
              case 146:
                v535 = *((_DWORD *)v17 + 26);
                if (v535 == -1)
                  goto LABEL_3417;
                v536 = __rev16(*(unsigned __int16 *)(v117 + 1));
                if (v536 != 0xFFFF && v536 != v535)
                  goto LABEL_3417;
                v118 = 0x92u;
                goto LABEL_3351;
              case 147:
                v538 = *((_DWORD *)v17 + 26);
                if (v538 == -1 || !(v117[4] | (v117[3] << 8)))
                  goto LABEL_3417;
                v539 = (v117[3] << 8) + v117[4] + 1;
                v540 = *(_QWORD *)(a7 + 136)
                     + *(unsigned __int16 *)(a7 + 134) * (unint64_t)__rev16(*(unsigned __int16 *)(v117 + 1))
                     + 1;
                break;
              case 148:
                goto LABEL_3417;
              case 149:
                goto LABEL_3351;
              default:
                if (v118 != 126 && v118 != 128)
                  goto LABEL_3610;
                v1391 = 1;
                goto LABEL_3611;
            }
            while (v538 != bswap32(*(unsigned __int16 *)(v540 - 1)) >> 16)
            {
              v540 += *(unsigned __int16 *)(a7 + 134);
              if (--v539 <= 1)
                goto LABEL_3417;
            }
            v118 = 0x93u;
            goto LABEL_3351;
          }
          v16 = v1423;
          v18 = v1422;
          if (v118 == 162)
            goto LABEL_3417;
LABEL_3610:
          v1391 = 0;
LABEL_3611:
          *((_DWORD *)v17 + 14) = v1391;
          v17[1] = v117;
          v1386 = *v117;
          v1387 = v1386;
          goto LABEL_3612;
        case 0x96u:
          v13 = 0;
          a2 = v20 + 1;
          v17[1] = v20 + 1;
          v1377 = 9;
          goto LABEL_3460;
        case 0x97u:
          v1384 = v20 + 1;
          v17[1] = v20 + 1;
          do
          {
            v1384 += __rev16(*(unsigned __int16 *)(v1384 + 1));
            v17[1] = v1384;
          }
          while (*v1384 == 120);
          v13 = 0;
          a2 = v1384 + 3;
          v1377 = 10;
          goto LABEL_3460;
        case 0x98u:
          *((_DWORD *)v17 + 16) = 1;
          v1192 = v20 + 1;
          *v17 = v20 + 1;
          v1385 = v20[1];
          if (v1385 == 137)
          {
            ++v20;
LABEL_3513:
            v7 = a6;
          }
          else
          {
            v7 = a6;
            if (v1385 != 142)
            {
              v1376 = 0x20000;
LABEL_3515:
              *((_DWORD *)v17 + 14) = v1376;
              *((_DWORD *)v17 + 15) = 0;
              v17[2] = v1192;
              goto LABEL_3608;
            }
            ++v20;
          }
          v1376 = (bswap32(*(unsigned __int16 *)(v20 + 3)) >> 16) | 0x10000;
          v1192 = v20;
          goto LABEL_3515;
        case 0x99u:
          v13 = 0;
          *(_QWORD *)(a7 + 208) = v20 + 2;
          v17[12] = v20 + 2;
          a2 = &v20[v20[1] + _pcre2_OP_lengths_8[*v20]];
          v1377 = 12;
          goto LABEL_3460;
        case 0x9Au:
          v13 = 0;
          a2 = &v20[_pcre2_OP_lengths_8[*v20]];
          v1377 = 14;
          goto LABEL_3460;
        case 0x9Bu:
          v13 = 0;
          *(_QWORD *)(a7 + 208) = v20 + 2;
          v17[12] = v20 + 2;
          a2 = &v20[v20[1] + _pcre2_OP_lengths_8[*v20]];
          v1377 = 15;
          goto LABEL_3460;
        case 0x9Cu:
          v13 = 0;
          a2 = &v20[_pcre2_OP_lengths_8[*v20]];
          v1377 = 16;
          goto LABEL_3460;
        case 0x9Du:
          v229 = *(_DWORD *)(a7 + 248);
          v230 = *(_DWORD *)(a7 + 244) + 1;
          *(_DWORD *)(a7 + 244) = v230;
          v231 = _pcre2_OP_lengths_8[*v20];
          if (v230 > v229)
          {
            v13 = 0;
            a2 = &v20[v231 + v20[1]];
            v1377 = 17;
            goto LABEL_3460;
          }
          *v17 = &v20[v20[1] + v231];
          continue;
        case 0x9Eu:
          v13 = 0;
          a2 = &v20[_pcre2_OP_lengths_8[*v20]];
          v1377 = 18;
          goto LABEL_3460;
        case 0x9Fu:
          v13 = 0;
          *(_QWORD *)(a7 + 208) = v20 + 2;
          v17[12] = v20 + 2;
          a2 = &v20[v20[1] + _pcre2_OP_lengths_8[*v20]];
          v1377 = 19;
          goto LABEL_3460;
        case 0xA0u:
          v13 = 0;
          a2 = &v20[_pcre2_OP_lengths_8[*v20]];
          v1377 = 13;
          goto LABEL_3460;
        case 0xA1u:
          v13 = 0;
          *(_QWORD *)(a7 + 208) = v20 + 2;
          v17[12] = v20 + 2;
          a2 = &v20[v20[1] + _pcre2_OP_lengths_8[*v20]];
          v1377 = 36;
          goto LABEL_3460;
        case 0xA2u:
          goto LABEL_2584;
        case 0xA4u:
          v232 = v17[10];
          if ((unint64_t)v232 > *(_QWORD *)(a7 + 192))
            *(_QWORD *)(a7 + 192) = v232;
          v23 = 4294966297;
          v1411 = v17;
          goto LABEL_2584;
        case 0xA5u:
          if (*((_DWORD *)v17 + 26) != -1)
            goto LABEL_440;
          v360 = *(unsigned __int16 *)(v20 + 1);
          v361 = __rev16(v360);
          v362 = (bswap32(v360) >> 16) | 0x10000;
          v363 = v17;
          do
          {
            v364 = v363[14];
            if (v364 == (unsigned __int8 *)-1)
              return 4294967252;
            v365 = &v364[*(_QWORD *)(a7 + 32)];
            v363 = (unsigned __int8 **)&v365[v1412];
          }
          while (*((_DWORD *)v365 + 13) != v362);
          v1414 = v365;
          v366 = 2 * v361 - 2;
          *((_DWORD *)v17 + 27) = v361;
          v367 = v363[10];
          v368 = *(_QWORD *)(a7 + 152);
          v369 = &v367[-v368];
          v370 = &v17[v366];
          v371 = &v17[10][-v368];
          v370[16] = v369;
          v370[17] = v371;
          if ((unint64_t)v17[15] <= v366)
            v17[15] = (unsigned __int8 *)(v366 + 2);
LABEL_440:
          *v17 = &v20[_pcre2_OP_lengths_8[*v20]];
          continue;
        case 0xA6u:
          v233 = v20 + 1;
          *v17 = v20 + 1;
          do
          {
            v233 += __rev16(*(unsigned __int16 *)(v233 + 1));
            *v17 = v233;
          }
          while (*v233 == 120);
          goto LABEL_3429;
        default:
          return v22;
      }
    }
  }
  return 4294967249;
}

uint64_t sub_1A3AAD9BC(unint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned int *v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t result;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  BOOL v36;
  uint64_t v37;
  unsigned __int8 *v38;

  if (*(_QWORD *)(a3 + 120) <= a1 || (v6 = a3 + 8 * a1, v7 = *(_QWORD *)(v6 + 128), v7 == -1))
  {
    if ((*(_BYTE *)(a4 + 241) & 2) != 0)
    {
      v33 = 0;
LABEL_59:
      result = 0;
      *a5 = v33;
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  v8 = *(_QWORD *)(a3 + 80);
  v9 = *(_QWORD *)(a4 + 152);
  v10 = (unsigned __int8 *)(v9 + v7);
  v11 = *(_QWORD *)(v6 + 136);
  v12 = v11 - v7;
  if (a2)
  {
    v13 = *(_DWORD *)(a4 + 240);
    if ((v13 & 0xA0000) != 0)
    {
      if (v7 < v11)
      {
        v14 = v9 + v11;
        v15 = *(_QWORD *)(a4 + 168);
        v16 = *(unsigned __int8 **)(a3 + 80);
        while ((unint64_t)v16 < v15)
        {
          v17 = *v16;
          if ((v13 & 0x80000) != 0)
          {
            if (v17 < 0xC0)
            {
              ++v16;
            }
            else if ((v17 & 0x20) != 0)
            {
              v24 = v16[1] & 0x3F;
              if ((v17 & 0x10) != 0)
              {
                if ((v17 & 8) != 0)
                {
                  v26 = v16[2] & 0x3F;
                  v27 = v16[3] & 0x3F;
                  v28 = v16[4] & 0x3F;
                  if ((v17 & 4) != 0)
                  {
                    v17 = ((v17 & 1) << 30) | (v24 << 24) | (v26 << 18) | (v27 << 12) | (v28 << 6) | v16[5] & 0x3F;
                    v16 += 6;
                  }
                  else
                  {
                    v17 = ((v17 & 3) << 24) | (v24 << 18) | (v26 << 12) | (v27 << 6) | v28;
                    v16 += 5;
                  }
                }
                else
                {
                  v17 = ((v17 & 7) << 18) | (v24 << 12) | ((v16[2] & 0x3F) << 6) | v16[3] & 0x3F;
                  v16 += 4;
                }
              }
              else
              {
                v17 = ((v17 & 0xF) << 12) | (v24 << 6) | v16[2] & 0x3F;
                v16 += 3;
              }
            }
            else
            {
              v20 = v16[1];
              v16 += 2;
              v17 = v20 & 0x3F | ((v17 & 0x1F) << 6);
            }
            v18 = *v10;
            if (v18 < 0xC0)
            {
              ++v10;
            }
            else if ((v18 & 0x20) != 0)
            {
              v25 = v10[1] & 0x3F;
              if ((v18 & 0x10) != 0)
              {
                if ((v18 & 8) != 0)
                {
                  v29 = v10[2] & 0x3F;
                  v30 = v10[3] & 0x3F;
                  v31 = v10[4] & 0x3F;
                  if ((v18 & 4) != 0)
                  {
                    v18 = ((v18 & 1) << 30) | (v25 << 24) | (v29 << 18) | (v30 << 12) | (v31 << 6) | v10[5] & 0x3F;
                    v10 += 6;
                  }
                  else
                  {
                    v18 = ((v18 & 3) << 24) | (v25 << 18) | (v29 << 12) | (v30 << 6) | v31;
                    v10 += 5;
                  }
                }
                else
                {
                  v18 = ((v18 & 7) << 18) | (v25 << 12) | ((v10[2] & 0x3F) << 6) | v10[3] & 0x3F;
                  v10 += 4;
                }
              }
              else
              {
                v18 = ((v18 & 0xF) << 12) | (v25 << 6) | v10[2] & 0x3F;
                v10 += 3;
              }
            }
            else
            {
              v21 = v10[1];
              v10 += 2;
              v18 = v21 & 0x3F | ((v18 & 0x1F) << 6);
            }
          }
          else
          {
            v19 = *v10++;
            v18 = v19;
            ++v16;
          }
          if (v17 != v18
            && v17 != *(_DWORD *)&_pcre2_ucd_records_8[12
                                                     * _pcre2_ucd_stage2_8[v18 & 0x7F | (_pcre2_ucd_stage1_8[v18 >> 7] << 7)]
                                                     + 4]
                    + v18)
          {
            v22 = &_pcre2_ucd_caseless_sets_8[_pcre2_ucd_records_8[12
                                                                 * _pcre2_ucd_stage2_8[v18 & 0x7F | (_pcre2_ucd_stage1_8[v18 >> 7] << 7)]
                                                                 + 3]];
            do
            {
              v23 = *v22;
              if (v17 < *v22)
                return 0xFFFFFFFFLL;
              ++v22;
            }
            while (v17 != v23);
          }
          if ((unint64_t)v10 >= v14)
            goto LABEL_58;
        }
        return 1;
      }
    }
    else if (v12)
    {
      v16 = (unsigned __int8 *)(v8 + v12);
      v37 = v7 - v11;
      v38 = *(unsigned __int8 **)(a3 + 80);
      while ((unint64_t)v38 < *(_QWORD *)(a4 + 168))
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(a4 + 88) + *v10) != *(unsigned __int8 *)(*(_QWORD *)(a4 + 88) + *v38))
          return 0xFFFFFFFFLL;
        ++v10;
        ++v38;
        v36 = __CFADD__(v37++, 1);
        if (v36)
          goto LABEL_58;
      }
      return 1;
    }
    goto LABEL_57;
  }
  if (*(_WORD *)(a4 + 128))
  {
    if (v12)
    {
      v16 = (unsigned __int8 *)(v8 + v12);
      v34 = v7 - v11;
      v35 = *(unsigned __int8 **)(a3 + 80);
      while ((unint64_t)v35 < *(_QWORD *)(a4 + 168))
      {
        if (*v10 != *v35)
          return 0xFFFFFFFFLL;
        ++v35;
        ++v10;
        v36 = __CFADD__(v34++, 1);
        if (v36)
          goto LABEL_58;
      }
      return 1;
    }
LABEL_57:
    v16 = *(unsigned __int8 **)(a3 + 80);
LABEL_58:
    v33 = &v16[-v8];
    goto LABEL_59;
  }
  if (*(_QWORD *)(a4 + 168) - v8 >= v12)
  {
    if (!memcmp(v10, *(const void **)(a3 + 80), v11 - v7))
    {
      v16 = (unsigned __int8 *)(v8 + v12);
      goto LABEL_58;
    }
    return 0xFFFFFFFFLL;
  }
  return 1;
}

uint64_t sub_1A3AADD64(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD);
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_BYTE **)a1;
  if (**(_BYTE **)a1 == 118)
    v5 = 6;
  else
    v5 = __rev16(*(unsigned __int16 *)(v4 + 5));
  *a3 = v5;
  v6 = (uint64_t (*)(uint64_t, _QWORD))a2[35];
  if (!v6)
    return 0;
  v7 = a2[33];
  v8 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v7 + 8) = (*(_DWORD *)(a1 + 120) >> 1) + 1;
  *(_DWORD *)(v7 + 12) = v8;
  v9 = a2[26];
  *(_QWORD *)(v7 + 16) = a1 + 112;
  *(_QWORD *)(v7 + 24) = v9;
  *(_QWORD *)(v7 + 56) = *(_QWORD *)(a1 + 80) - a2[19];
  *(_QWORD *)(v7 + 64) = __rev16(*(unsigned __int16 *)(v4 + 1));
  *(_QWORD *)(v7 + 72) = __rev16(*(unsigned __int16 *)(v4 + 3));
  if (*v4 == 118)
  {
    v10 = 0;
    v11 = 0;
    *(_DWORD *)(v7 + 4) = v4[5];
    *(_QWORD *)(v7 + 80) = 0;
  }
  else
  {
    *(_DWORD *)(v7 + 4) = 0;
    *(_QWORD *)(v7 + 80) = __rev16(*(unsigned __int16 *)(v4 + 7));
    v10 = v4 + 10;
    v11 = *a3 - 11;
  }
  *(_QWORD *)(v7 + 88) = v11;
  *(_QWORD *)(v7 + 96) = v10;
  v13 = *(_QWORD *)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = -1;
  *(_QWORD *)(a1 + 120) = -1;
  result = v6(v7, a2[34]);
  *(_QWORD *)(a1 + 112) = v13;
  *(_QWORD *)(a1 + 120) = v14;
  *(_DWORD *)(v7 + 104) = 0;
  return result;
}

_QWORD *pcre2_match_data_create_8(unsigned int a1, __int128 *a2)
{
  int v2;
  _QWORD *result;

  if (a1 <= 1)
    v2 = 1;
  else
    v2 = a1;
  result = _pcre2_memctl_malloc_8(8 * (2 * v2) + 80, a2);
  if (result)
  {
    *((_WORD *)result + 37) = v2;
    *((_BYTE *)result + 73) = 0;
  }
  return result;
}

_QWORD *pcre2_match_data_create_from_pattern_8(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  _QWORD *result;

  if (!a2)
    a2 = (__int128 *)a1;
  v2 = *(unsigned __int16 *)(a1 + 128) + 1;
  result = _pcre2_memctl_malloc_8(16 * v2 + 80, a2);
  if (result)
  {
    *((_WORD *)result + 37) = v2;
    *((_BYTE *)result + 73) = 0;
  }
  return result;
}

uint64_t pcre2_match_data_free_8(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if ((*(_BYTE *)(result + 73) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(result + 8))(*(_QWORD *)(result + 32), *(_QWORD *)(result + 16));
    return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v1, *(_QWORD *)(v1 + 16));
  }
  return result;
}

uint64_t pcre2_get_mark_8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t pcre2_get_ovector_pointer_8(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pcre2_get_ovector_count_8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 74);
}

uint64_t pcre2_get_startchar_8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t pcre2_get_match_data_size_8(uint64_t a1)
{
  return 16 * *(unsigned __int16 *)(a1 + 74) + 80;
}

uint64_t _pcre2_valid_utf_8(unsigned __int8 *a1, unint64_t a2, _QWORD *a3)
{
  unsigned __int8 *i;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  char v10;
  char v11;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  if (!a2)
    return 0;
  for (i = a1; ; ++i)
  {
    v4 = a2 - 1;
    if ((char)*i < 0)
      break;
    --a2;
LABEL_15:
    if (!a2)
      return 0;
  }
  v5 = *i;
  if (v5 <= 0xBF)
  {
    *a3 = i - a1;
    return 4294967274;
  }
  else if (v5 >= 0xFE)
  {
    *a3 = i - a1;
    return 4294967273;
  }
  else
  {
    v6 = _pcre2_utf8_table4[*i & 0x3F];
    a2 = v4 - v6;
    if (v4 < v6 && (*a3 = i - a1, v7 = ~v4 + v6, v7 < 5))
    {
      return (-3 - v7);
    }
    else
    {
      v9 = (_DWORD)i + 1;
      v8 = i[1];
      if ((v8 & 0xC0) == 0x80)
      {
        switch((int)v6)
        {
          case 1:
            if ((v5 & 0x3E) != 0)
              goto LABEL_14;
            *a3 = v9 + ~(_DWORD)a1;
            v16 = 4294967279;
            break;
          case 2:
            v10 = i[2];
            i += 2;
            if ((v10 & 0xC0) != 0x80)
            {
              v15 = (_DWORD)i - (_DWORD)a1;
              goto LABEL_54;
            }
            if (v5 == 224 && (v8 & 0x20) == 0)
            {
              *a3 = (int)i - (int)a1 - 2;
              v16 = 4294967278;
            }
            else
            {
              if (v5 != 237 || v8 < 0xA0)
                goto LABEL_15;
              *a3 = (int)i - (int)a1 - 2;
              v16 = 4294967280;
            }
            break;
          case 3:
            if ((i[2] & 0xC0) != 0x80)
            {
              v17 = (_DWORD)i - (_DWORD)a1;
              goto LABEL_56;
            }
            v11 = i[3];
            i += 3;
            if ((v11 & 0xC0) != 0x80)
            {
              v18 = (_DWORD)i - (_DWORD)a1;
              goto LABEL_61;
            }
            if (v5 == 240 && (v8 & 0x30) == 0)
            {
              *a3 = (int)i - (int)a1 - 3;
              v16 = 4294967277;
            }
            else
            {
              if (v5 <= 0xF4 && (v5 != 244 || v8 < 0x90))
                goto LABEL_15;
              *a3 = (int)i - (int)a1 - 3;
              v16 = 4294967281;
            }
            break;
          case 4:
            v13 = (_DWORD)i + 2;
            if ((i[2] & 0xC0) != 0x80)
              goto LABEL_50;
            v14 = (_DWORD)i + 3;
            if ((i[3] & 0xC0) != 0x80)
              goto LABEL_60;
            v9 = (_DWORD)i + 4;
            if ((i[4] & 0xC0) != 0x80)
            {
              v19 = v9 - (_DWORD)a1;
              goto LABEL_64;
            }
            v16 = 4294967283;
            if (v5 != 248 || (v8 & 0x38) != 0)
              goto LABEL_52;
            *a3 = v9 - (int)a1 - 4;
            v16 = 4294967276;
            break;
          case 5:
            v13 = (_DWORD)i + 2;
            if ((i[2] & 0xC0) == 0x80)
            {
              v14 = (_DWORD)i + 3;
              if ((i[3] & 0xC0) == 0x80)
              {
                if ((i[4] & 0xC0) == 0x80)
                {
                  v9 = (_DWORD)i + 5;
                  if ((i[5] & 0xC0) == 0x80)
                  {
                    v16 = 4294967282;
                    if (v5 != 252 || (v8 & 0x3C) != 0)
                      goto LABEL_52;
                    *a3 = v9 - (int)a1 - 5;
                    v16 = 4294967275;
                  }
                  else
                  {
                    *a3 = (int)i - (int)a1;
                    v16 = 4294967284;
                  }
                }
                else
                {
                  v19 = (_DWORD)i + 4 - (_DWORD)a1;
LABEL_64:
                  *a3 = v19 - 4;
                  v16 = 4294967285;
                }
              }
              else
              {
LABEL_60:
                v18 = v14 - (_DWORD)a1;
LABEL_61:
                *a3 = v18 - 3;
                v16 = 4294967286;
              }
            }
            else
            {
LABEL_50:
              v15 = v13 - (_DWORD)a1;
LABEL_54:
              v17 = v15 - 2;
LABEL_56:
              *a3 = v17;
              v16 = 4294967287;
            }
            break;
          default:
            if (v6 < 4)
            {
LABEL_14:
              ++i;
              goto LABEL_15;
            }
            v16 = 4294967282;
LABEL_52:
            *a3 = (v9 - (_DWORD)a1 - v6);
            break;
        }
      }
      else
      {
        *a3 = v9 + ~(_DWORD)a1;
        return 4294967288;
      }
    }
  }
  return v16;
}

uint64_t pcre2_jit_compile_8(uint64_t a1, int a2)
{
  int v2;

  if (!a1)
    return 4294967245;
  if ((a2 & 0xFFFFFFF8) == 0x100)
  {
    v2 = *(_DWORD *)(a1 + 88);
    if ((v2 & 0x4000000) == 0)
      *(_DWORD *)(a1 + 88) = v2 | 0x4000000;
  }
  return 4294967251;
}

uint64_t pcre2_jit_match_8()
{
  return 4294967251;
}

uint64_t pcre2_jit_stack_create_8()
{
  return 0;
}

const char *_pcre2_jit_get_target_8()
{
  return "JIT is not supported";
}

uint64_t _pcre2_jit_get_size_8()
{
  return 0;
}

_QWORD *_pcre2_memctl_malloc_8(size_t a1, __int128 *a2)
{
  _QWORD *result;
  __int128 v4;

  if (a2)
  {
    result = (_QWORD *)(*(uint64_t (**)(size_t, _QWORD))a2)(a1, *((_QWORD *)a2 + 2));
    if (result)
    {
      v4 = *a2;
      result[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)result = v4;
    }
  }
  else
  {
    result = malloc_type_malloc(a1, 0xCFC7CE29uLL);
    if (result)
    {
      *result = sub_1A3AAE3A8;
      result[1] = j__free;
      result[2] = 0;
    }
  }
  return result;
}

void *sub_1A3AAE3A8(size_t a1)
{
  return malloc_type_malloc(a1, 0xFD6459F8uLL);
}

void *(**pcre2_general_context_create_8(void *(*a1)(size_t a1), void (__cdecl *a2)(void *), void *(*a3)(size_t a1)))(size_t a1)
{
  void *(*v5)(size_t);
  void *(**result)(size_t);
  void (__cdecl *v7)(void *);

  if (a1)
  {
    v5 = a1;
    result = (void *(**)(size_t))((uint64_t (*)(uint64_t, void *(*)(size_t)))a1)(24, a3);
  }
  else
  {
    v5 = sub_1A3AAE3A8;
    result = (void *(**)(size_t))((uint64_t (*)(uint64_t, void *(*)(size_t)))sub_1A3AAE3A8)(24, a3);
  }
  if (result)
  {
    v7 = j__free;
    if (a2)
      v7 = a2;
    *result = v5;
    result[1] = (void *(*)(size_t))v7;
    result[2] = a3;
  }
  return result;
}

__n128 pcre2_compile_context_create_8(uint64_t a1)
{
  _QWORD *v2;
  __n128 result;

  v2 = _pcre2_memctl_malloc_8(0x48uLL, (__int128 *)a1);
  if (v2)
  {
    *((_OWORD *)v2 + 2) = xmmword_1E4A9F750;
    *((_OWORD *)v2 + 3) = unk_1E4A9F760;
    v2[8] = 0;
    result.n128_u64[0] = xmmword_1E4A9F740;
    *(_OWORD *)v2 = _pcre2_default_compile_context_8;
    *((_OWORD *)v2 + 1) = xmmword_1E4A9F740;
    if (a1)
    {
      result = *(__n128 *)a1;
      v2[2] = *(_QWORD *)(a1 + 16);
      *(__n128 *)v2 = result;
    }
  }
  return result;
}

__n128 pcre2_match_context_create_8(uint64_t a1)
{
  _OWORD *v2;
  __n128 result;

  v2 = _pcre2_memctl_malloc_8(0x50uLL, (__int128 *)a1);
  if (v2)
  {
    v2[2] = xmmword_1E4A9F7B8;
    v2[3] = unk_1E4A9F7C8;
    v2[4] = xmmword_1E4A9F7D8;
    result.n128_u64[0] = xmmword_1E4A9F7A8;
    *v2 = _pcre2_default_match_context_8;
    v2[1] = xmmword_1E4A9F7A8;
    if (a1)
    {
      result = *(__n128 *)a1;
      *((_QWORD *)v2 + 2) = *(_QWORD *)(a1 + 16);
      *v2 = result;
    }
  }
  return result;
}

__n128 pcre2_convert_context_create_8(uint64_t a1)
{
  _OWORD *v2;
  __n128 result;

  v2 = _pcre2_memctl_malloc_8(0x20uLL, (__int128 *)a1);
  if (v2)
  {
    result.n128_u64[0] = _pcre2_default_convert_context_8;
    *v2 = _pcre2_default_convert_context_8;
    v2[1] = *(_OWORD *)algn_1E4A9F788;
    if (a1)
    {
      result = *(__n128 *)a1;
      *((_QWORD *)v2 + 2) = *(_QWORD *)(a1 + 16);
      *v2 = result;
    }
  }
  return result;
}

__n128 pcre2_general_context_copy_8(uint64_t a1)
{
  __n128 *v2;
  __n128 result;

  v2 = (__n128 *)(*(uint64_t (**)(uint64_t, _QWORD))a1)(24, *(_QWORD *)(a1 + 16));
  if (v2)
  {
    result = *(__n128 *)a1;
    v2[1].n128_u64[0] = *(_QWORD *)(a1 + 16);
    *v2 = result;
  }
  return result;
}

__n128 pcre2_compile_context_copy_8(uint64_t a1)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = (*(uint64_t (**)(uint64_t, _QWORD))a1)(72, *(_QWORD *)(a1 + 16));
  if (v2)
  {
    *(_OWORD *)v2 = *(_OWORD *)a1;
    result = *(__n128 *)(a1 + 16);
    v4 = *(_OWORD *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v2 + 64) = *(_QWORD *)(a1 + 64);
    *(_OWORD *)(v2 + 32) = v4;
    *(_OWORD *)(v2 + 48) = v5;
    *(__n128 *)(v2 + 16) = result;
  }
  return result;
}

__n128 pcre2_match_context_copy_8(uint64_t a1)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = (*(uint64_t (**)(uint64_t, _QWORD))a1)(80, *(_QWORD *)(a1 + 16));
  if (v2)
  {
    *(_OWORD *)v2 = *(_OWORD *)a1;
    result = *(__n128 *)(a1 + 16);
    v4 = *(_OWORD *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v2 + 64) = v5;
    *(__n128 *)(v2 + 16) = result;
    *(_OWORD *)(v2 + 32) = v4;
  }
  return result;
}

__n128 pcre2_convert_context_copy_8(uint64_t a1)
{
  _OWORD *v2;
  __n128 result;
  __int128 v4;

  v2 = (_OWORD *)(*(uint64_t (**)(uint64_t, _QWORD))a1)(32, *(_QWORD *)(a1 + 16));
  if (v2)
  {
    result = *(__n128 *)a1;
    v4 = *(_OWORD *)(a1 + 16);
    *v2 = *(_OWORD *)a1;
    v2[1] = v4;
  }
  return result;
}

uint64_t pcre2_general_context_free_8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 8))(result, *(_QWORD *)(result + 16));
  return result;
}

uint64_t pcre2_compile_context_free_8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 8))(result, *(_QWORD *)(result + 16));
  return result;
}

uint64_t pcre2_match_context_free_8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 8))(result, *(_QWORD *)(result + 16));
  return result;
}

uint64_t pcre2_convert_context_free_8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 8))(result, *(_QWORD *)(result + 16));
  return result;
}

uint64_t pcre2_set_character_tables_8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 40) = a2;
  return 0;
}

uint64_t pcre2_set_bsr_8(uint64_t a1, int a2)
{
  uint64_t result;

  if ((a2 - 1) > 1)
    return 4294967267;
  result = 0;
  *(_WORD *)(a1 + 56) = a2;
  return result;
}

uint64_t pcre2_set_max_pattern_length_8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 48) = a2;
  return 0;
}

uint64_t pcre2_set_newline_8(uint64_t a1, int a2)
{
  uint64_t result;

  if ((a2 - 1) > 5)
    return 4294967267;
  result = 0;
  *(_WORD *)(a1 + 58) = a2;
  return result;
}

uint64_t pcre2_set_parens_nest_limit_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 60) = a2;
  return 0;
}

uint64_t pcre2_set_compile_extra_options_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 64) = a2;
  return 0;
}

uint64_t pcre2_set_compile_recursion_guard_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  return 0;
}

uint64_t pcre2_set_callout_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  return 0;
}

uint64_t pcre2_set_substitute_callout_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  return 0;
}

uint64_t pcre2_set_heap_limit_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 64) = a2;
  return 0;
}

uint64_t pcre2_set_match_limit_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 68) = a2;
  return 0;
}

uint64_t pcre2_set_depth_limit_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 72) = a2;
  return 0;
}

uint64_t pcre2_set_offset_limit_8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 56) = a2;
  return 0;
}

uint64_t pcre2_set_recursion_limit_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 72) = a2;
  return 0;
}

uint64_t pcre2_set_recursion_memory_management_8()
{
  return 0;
}

uint64_t pcre2_set_glob_separator_8(uint64_t a1, int a2)
{
  uint64_t result;

  result = 4294967267;
  if ((a2 - 46) <= 0x2E && ((1 << (a2 - 46)) & 0x400000000003) != 0)
  {
    result = 0;
    *(_DWORD *)(a1 + 24) = a2;
  }
  return result;
}

uint64_t pcre2_set_glob_escape_8(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 > 0xFF)
    return 4294967267;
  if (!a2)
    goto LABEL_6;
  if (a2 > 0x7F)
  {
    if (__maskrune(a2, 0x2000uLL))
      goto LABEL_6;
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a2 + 60) & 0x2000) != 0)
  {
LABEL_6:
    result = 0;
    *(_DWORD *)(a1 + 28) = a2;
    return result;
  }
  return 4294967267;
}

uint64_t _pcre2_ord2utf_8(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  unsigned int v4;

  v2 = 0;
  while (_pcre2_utf8_table1[v2] < (signed int)a1)
  {
    if (++v2 == 6)
    {
      LODWORD(v2) = 6;
      break;
    }
  }
  v3 = (_BYTE *)(a2 + v2);
  if ((int)v2 >= 1)
  {
    v4 = v2 + 1;
    do
    {
      *v3-- = a1 & 0x3F | 0x80;
      a1 >>= 6;
      --v4;
    }
    while (v4 > 1);
  }
  *v3 = _pcre2_utf8_table2[4 * v2] | a1;
  return (v2 + 1);
}

uint64_t pcre2_pattern_info_8(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t result;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;

  if (!a3 && a2 < 0x1B)
    return dword_1A3ACEA98[a2];
  if (!a1)
    return 4294967245;
  if (*(_DWORD *)(a1 + 80) != 1346589253)
    return 4294967265;
  v4 = *(_DWORD *)(a1 + 96);
  if ((v4 & 1) == 0)
    return 4294967264;
  switch(a2)
  {
    case 0u:
      v5 = *(_DWORD *)(a1 + 88);
      goto LABEL_49;
    case 1u:
      v5 = *(_DWORD *)(a1 + 84);
      goto LABEL_49;
    case 2u:
      v5 = *(unsigned __int16 *)(a1 + 130);
      goto LABEL_49;
    case 3u:
      v5 = *(unsigned __int16 *)(a1 + 120);
      goto LABEL_49;
    case 4u:
      v5 = *(unsigned __int16 *)(a1 + 128);
      goto LABEL_49;
    case 5u:
      if ((v4 & 0x10) == 0)
        goto LABEL_23;
      v5 = *(_DWORD *)(a1 + 112);
      goto LABEL_49;
    case 6u:
      if ((v4 & 0x10) != 0)
        v5 = 1;
      else
        v5 = (v4 >> 8) & 2;
      goto LABEL_49;
    case 7u:
      if ((v4 & 0x40) != 0)
        v6 = a1 + 40;
      else
        v6 = 0;
      goto LABEL_45;
    case 8u:
      v5 = (v4 >> 11) & 1;
      goto LABEL_49;
    case 9u:
      v5 = (v4 >> 10) & 1;
      goto LABEL_49;
    case 0xAu:
      *a3 = 0;
      goto LABEL_50;
    case 0xBu:
      if ((v4 & 0x80) != 0)
        v5 = *(_DWORD *)(a1 + 116);
      else
LABEL_23:
        v5 = 0;
      goto LABEL_49;
    case 0xCu:
      v5 = (v4 >> 7) & 1;
      goto LABEL_49;
    case 0xDu:
      v5 = (v4 >> 13) & 1;
      goto LABEL_49;
    case 0xEu:
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 104);
      v7 = *(_DWORD *)(a1 + 104);
      goto LABEL_42;
    case 0xFu:
      v5 = *(unsigned __int16 *)(a1 + 124);
      goto LABEL_49;
    case 0x10u:
      v5 = *(unsigned __int16 *)(a1 + 126);
      goto LABEL_49;
    case 0x11u:
      v5 = *(unsigned __int16 *)(a1 + 134);
      goto LABEL_49;
    case 0x12u:
      v5 = *(unsigned __int16 *)(a1 + 132);
      goto LABEL_49;
    case 0x13u:
      v6 = a1 + 136;
      goto LABEL_45;
    case 0x14u:
      v5 = *(unsigned __int16 *)(a1 + 122);
      goto LABEL_49;
    case 0x15u:
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 108);
      v7 = *(_DWORD *)(a1 + 108);
      goto LABEL_42;
    case 0x16u:
      v6 = *(_QWORD *)(a1 + 72);
      goto LABEL_45;
    case 0x17u:
      v5 = (v4 >> 22) & 1;
      goto LABEL_49;
    case 0x18u:
      v6 = 16 * *(unsigned __int16 *)(a1 + 128) + 128;
LABEL_45:
      *a3 = v6;
      goto LABEL_50;
    case 0x19u:
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 100);
      v7 = *(_DWORD *)(a1 + 100);
LABEL_42:
      if (v7 != -1)
        goto LABEL_50;
      result = 4294967241;
      break;
    case 0x1Au:
      v5 = *(_DWORD *)(a1 + 92);
LABEL_49:
      *(_DWORD *)a3 = v5;
LABEL_50:
      result = 0;
      break;
    default:
      result = 4294967262;
      break;
  }
  return result;
}

uint64_t pcre2_callout_enumerate_8(uint64_t a1, uint64_t (*a2)(__int128 *, uint64_t), uint64_t a3)
{
  uint64_t result;
  int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned __int8 *v16;

  if (!a1)
    return 4294967245;
  if (*(_DWORD *)(a1 + 80) != 1346589253)
    return 4294967265;
  if ((*(_BYTE *)(a1 + 96) & 1) != 0)
  {
    v6 = *(_DWORD *)(a1 + 88);
    v16 = 0;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    v7 = (unsigned __int8 *)(a1
                           + *(unsigned __int16 *)(a1 + 132) * (unint64_t)*(unsigned __int16 *)(a1 + 134)
                           + 136);
    while (1)
    {
      while (1)
      {
        result = *v7;
        if ((result - 29) >= 0x38)
          break;
        v7 += _pcre2_OP_lengths_8[result];
        if ((v6 & 0x80000) != 0)
        {
          v8 = *(v7 - 1);
          if (v8 >= 0xC0)
            v7 += _pcre2_utf8_table4[v8 & 0x3F];
        }
      }
      switch(*v7)
      {
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '[':
        case '\\':
        case ']':
        case '^':
        case '_':
        case 'a':
          v7 += 2 * (v7[_pcre2_OP_lengths_8[result] - 1] - 15 < 2) + _pcre2_OP_lengths_8[result];
          continue;
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'u':
          goto LABEL_27;
        case 'p':
          v10 = *(unsigned __int16 *)(v7 + 1);
          goto LABEL_25;
        case 'v':
          v11 = __rev16(*(unsigned __int16 *)(v7 + 3));
          *((_QWORD *)&v13 + 1) = __rev16(*(unsigned __int16 *)(v7 + 1));
          *(_QWORD *)&v14 = v11;
          DWORD2(v14) = v7[5];
          v16 = 0;
          v15 = 0uLL;
          result = a2(&v13, a3);
          if ((_DWORD)result)
            return result;
          v7 += _pcre2_OP_lengths_8[*v7];
          continue;
        case 'w':
          v12 = __rev16(*(unsigned __int16 *)(v7 + 3));
          *((_QWORD *)&v13 + 1) = __rev16(*(unsigned __int16 *)(v7 + 1));
          *(_QWORD *)&v14 = v12;
          DWORD2(v14) = 0;
          LODWORD(v12) = __rev16(*(unsigned __int16 *)(v7 + 5));
          *(_QWORD *)&v15 = __rev16(*(unsigned __int16 *)(v7 + 7));
          *((_QWORD *)&v15 + 1) = (v12 - 11);
          v16 = v7 + 10;
          result = a2(&v13, a3);
          if ((_DWORD)result)
            return result;
          v10 = *(unsigned __int16 *)(v7 + 5);
LABEL_25:
          v7 += __rev16(v10);
          continue;
        default:
          if ((result - 153) > 8 || ((1 << (result + 103)) & 0x155) == 0)
          {
            if (!*v7)
              return result;
LABEL_27:
            v7 += _pcre2_OP_lengths_8[result];
          }
          else
          {
            v7 += v7[1] + (unint64_t)_pcre2_OP_lengths_8[result];
          }
          break;
      }
    }
  }
  return 4294967264;
}

uint64_t _pcre2_strcmp_8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  do
  {
    v2 = *a1;
    v3 = *a2;
    if (!(v2 | v3))
      return 0;
    ++a1;
    ++a2;
  }
  while (v2 == v3);
  if (v2 > v3)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t _pcre2_strcmp_c8_8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  do
  {
    v2 = *a1;
    v3 = *a2;
    if (!(v2 | v3))
      return 0;
    ++a1;
    ++a2;
  }
  while (v2 == v3);
  if (v2 > v3)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t _pcre2_strncmp_8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;

  if (!a3)
    return 0;
  while (1)
  {
    v3 = *a1;
    v4 = *a2;
    if (v3 != v4)
      break;
    ++a2;
    ++a1;
    if (!--a3)
      return 0;
  }
  if (v3 > v4)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t _pcre2_strncmp_c8_8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;

  if (!a3)
    return 0;
  while (1)
  {
    v3 = *a1;
    v4 = *a2;
    if (v3 != v4)
      break;
    ++a2;
    ++a1;
    if (!--a3)
      return 0;
  }
  if (v3 > v4)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t _pcre2_strlen_8(_BYTE *a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t result;

  if (!*a1)
    return 0;
  v1 = 0;
  v2 = a1 + 1;
  do
    result = v1 + 1;
  while (v2[v1++]);
  return result;
}

_BYTE *_pcre2_strcpy_c8_8(_BYTE *a1, _BYTE *a2)
{
  char v2;
  _BYTE *v3;
  unsigned __int8 *v4;
  int v5;

  v2 = *a2;
  v3 = a1;
  if (*a2)
  {
    v4 = a2 + 1;
    v3 = a1;
    do
    {
      *v3++ = v2;
      v5 = *v4++;
      v2 = v5;
    }
    while (v5);
  }
  *v3 = 0;
  return (_BYTE *)(v3 - a1);
}

BOOL _pcre2_xclass_8(int a1, _BYTE *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  unint64_t v24;
  _BOOL4 v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;

  if (a1 <= 0xFF)
  {
    if ((*a2 & 4) == 0)
    {
      v2 = *a2 & 1;
      if ((*a2 & 2) != 0)
        return (a2[((unint64_t)a1 >> 3) + 1] >> (a1 & 7)) & 1;
      return v2;
    }
    if ((*a2 & 2) != 0 && ((a2[((unint64_t)a1 >> 3) + 1] >> (a1 & 7)) & 1) != 0)
      return !(*a2 & 1);
  }
  if ((*a2 & 2) != 0)
    v3 = a2 + 33;
  else
    v3 = a2 + 1;
  v4 = a1 + 127;
  if (a1 >= 0)
    v4 = a1;
  v5 = (uint64_t)v4 >> 7;
  v6 = a1 - (v4 & 0xFFFFFF80);
  v7 = a1 - 8232;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v8 = *v3;
        if (v8 != 1)
          break;
        v10 = v3 + 2;
        v11 = v3[1];
        if (v11 >= 0xC0)
        {
          if ((v11 & 0x20) != 0)
          {
            v14 = *v10 & 0x3F;
            if ((v11 & 0x10) != 0)
            {
              if ((v11 & 8) != 0)
              {
                v32 = v3[3] & 0x3F;
                v33 = v3[4] & 0x3F;
                v34 = v3[5] & 0x3F;
                if ((v11 & 4) != 0)
                {
                  v11 = ((v11 & 1) << 30) | (v14 << 24) | (v32 << 18) | (v33 << 12) | (v34 << 6) | v3[6] & 0x3F;
                  v10 = v3 + 7;
                }
                else
                {
                  v11 = ((v11 & 3) << 24) | (v14 << 18) | (v32 << 12) | (v33 << 6) | v34;
                  v10 = v3 + 6;
                }
              }
              else
              {
                v11 = ((v11 & 7) << 18) | (v14 << 12) | ((v3[3] & 0x3F) << 6) | v3[4] & 0x3F;
                v10 = v3 + 5;
              }
            }
            else
            {
              v11 = ((v11 & 0xF) << 12) | (v14 << 6) | v3[3] & 0x3F;
              v10 = v3 + 4;
            }
          }
          else
          {
            v10 = v3 + 3;
            v11 = v3[2] & 0x3F | ((v11 & 0x1F) << 6);
          }
        }
        v3 = v10;
        if (v11 == a1)
          return !(*a2 & 1);
      }
      if (v8 != 2)
        break;
      v12 = v3 + 2;
      v13 = v3[1];
      if (v13 >= 0xC0)
      {
        if ((v13 & 0x20) != 0)
        {
          v15 = *v12 & 0x3F;
          if ((v13 & 0x10) != 0)
          {
            if ((v13 & 8) != 0)
            {
              v35 = v3[3] & 0x3F;
              v36 = v3[4] & 0x3F;
              v37 = v3[5] & 0x3F;
              if ((v13 & 4) != 0)
              {
                v13 = ((v13 & 1) << 30) | (v15 << 24) | (v35 << 18) | (v36 << 12) | (v37 << 6) | v3[6] & 0x3F;
                v12 = v3 + 7;
              }
              else
              {
                v13 = ((v13 & 3) << 24) | (v15 << 18) | (v35 << 12) | (v36 << 6) | v37;
                v12 = v3 + 6;
              }
            }
            else
            {
              v13 = ((v13 & 7) << 18) | (v15 << 12) | ((v3[3] & 0x3F) << 6) | v3[4] & 0x3F;
              v12 = v3 + 5;
            }
          }
          else
          {
            v13 = ((v13 & 0xF) << 12) | (v15 << 6) | v3[3] & 0x3F;
            v12 = v3 + 4;
          }
        }
        else
        {
          v12 = v3 + 3;
          v13 = v3[2] & 0x3F | ((v13 & 0x1F) << 6);
        }
      }
      v3 = v12 + 1;
      v38 = *v12;
      if (v38 >= 0xC0)
      {
        if ((v38 & 0x20) != 0)
        {
          v39 = *v3 & 0x3F;
          if ((v38 & 0x10) != 0)
          {
            if ((v38 & 8) != 0)
            {
              v40 = v12[2] & 0x3F;
              v41 = v12[3] & 0x3F;
              v42 = v12[4] & 0x3F;
              if ((v38 & 4) != 0)
              {
                v38 = ((v38 & 1) << 30) | (v39 << 24) | (v40 << 18) | (v41 << 12) | (v42 << 6) | v12[5] & 0x3F;
                v3 = v12 + 6;
              }
              else
              {
                v38 = ((v38 & 3) << 24) | (v39 << 18) | (v40 << 12) | (v41 << 6) | v42;
                v3 = v12 + 5;
              }
            }
            else
            {
              v38 = ((v38 & 7) << 18) | (v39 << 12) | ((v12[2] & 0x3F) << 6) | v12[3] & 0x3F;
              v3 = v12 + 4;
            }
          }
          else
          {
            v38 = ((v38 & 0xF) << 12) | (v39 << 6) | v12[2] & 0x3F;
            v3 = v12 + 3;
          }
        }
        else
        {
          v3 = v12 + 2;
          v38 = v12[1] & 0x3F | ((v38 & 0x1F) << 6);
        }
      }
      if (v13 <= a1 && v38 >= a1)
        return !(*a2 & 1);
    }
    if (!*v3)
      return *a2 & 1;
    v2 = 0;
    v9 = &_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]];
    switch(v3[1])
    {
      case 0u:
        goto LABEL_120;
      case 1u:
        v16 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)] + 1];
        v17 = v16 > 9;
        v18 = (1 << v16) & 0x320;
        if (!v17 && v18 != 0)
          goto LABEL_120;
        goto LABEL_72;
      case 2u:
        v20 = v8 == 3;
        v21 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                      + 1]] == v3[2];
        goto LABEL_59;
      case 3u:
        v20 = v8 == 3;
        v22 = v3[2];
        v23 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)] + 1];
        goto LABEL_47;
      case 4u:
        v20 = v8 == 3;
        v22 = v3[2];
        v23 = *v9;
LABEL_47:
        v21 = v22 == v23;
        goto LABEL_59;
      case 5u:
        v24 = v3[2];
        if ((_DWORD)v24 == *v9)
          goto LABEL_120;
        v25 = v8 == 3;
        v26 = *(_DWORD *)((char *)&_pcre2_ucd_script_sets_8[*(_WORD *)&_pcre2_ucd_records_8[12
                                                                                          * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                                                          + 8] & 0x3FF]
                        + ((v24 >> 3) & 0x1C)) >> v24;
        goto LABEL_95;
      case 6u:
        if ((v8 == 3) == ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                    * _pcre2_ucd_stage2_8[v6
                                                                                        + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                                    + 1]] & 0xFFFFFFFD) == 1))
          return !(*a2 & 1);
        goto LABEL_121;
      case 7u:
      case 8u:
        if (a1 < 0x2000)
        {
          if (a1 > 132)
          {
            if (a1 > 5759)
            {
              if (a1 == 5760 || a1 == 6158)
                goto LABEL_120;
            }
            else if (a1 == 133 || a1 == 160)
            {
              goto LABEL_120;
            }
          }
          else if (a1 <= 0x20 && ((1 << a1) & 0x100003E00) != 0)
          {
            goto LABEL_120;
          }
        }
        else if ((a1 - 0x2000) < 0xB
               || v7 <= 0x37 && ((1 << v7) & 0x80000000000083) != 0
               || a1 == 12288)
        {
LABEL_120:
          if (v8 == 3)
            return !(*a2 & 1);
          goto LABEL_121;
        }
        v20 = v8 == 3;
        v21 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                      + 1]] == 6;
LABEL_59:
        v27 = !v21;
LABEL_62:
        if (v20 != v27)
          return !(*a2 & 1);
LABEL_121:
        v3 += 3;
        break;
      case 9u:
        if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                      + 1]] | 2) == 3)
          goto LABEL_120;
        v26 = v8 == 3;
        v25 = a1 == 95;
        goto LABEL_95;
      case 0xBu:
        if (a1 > 0x9F)
        {
          if (((a1 & 0xFFFFF800) == 55296) != (v8 == 3))
            return !(*a2 & 1);
        }
        else
        {
          if ((a1 - 36) <= 0x3C && ((1 << (a1 - 36)) & 0x1000000010000001) != 0)
            goto LABEL_120;
LABEL_72:
          if (v8 != 3)
            return !(*a2 & 1);
        }
        goto LABEL_121;
      case 0xCu:
        v20 = v8 == 3;
        v21 = v3[2] == *(unsigned __int16 *)&_pcre2_ucd_records_8[12
                                                                * _pcre2_ucd_stage2_8[v6
                                                                                    + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                                + 8] >> 11;
        goto LABEL_59;
      case 0xDu:
        v20 = v8 == 3;
        v27 = ((*(_DWORD *)((char *)&_pcre2_ucd_BOOLprop_sets_8[*(_WORD *)&_pcre2_ucd_records_8[12
                                                                                              * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                                                              + 10] & 0xFFF]
                          + ((v3[2] >> 3) & 0x1CLL)) >> v3[2]) & 1) == 0;
        goto LABEL_62;
      case 0xEu:
        v28 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                      + 1]];
        if (v28 == 6)
          goto LABEL_72;
        if (v28)
          goto LABEL_120;
        if (_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)] + 1] == 1
          && a1 != 1564
          && a1 != 6158)
        {
          goto LABEL_94;
        }
        goto LABEL_72;
      case 0xFu:
        v29 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)] + 1];
        if ((v29 - 27) < 2)
          goto LABEL_72;
        if (_pcre2_ucp_gentype_8[v29])
          goto LABEL_120;
        if (a1 == 1564 || (_DWORD)v29 != 1)
          goto LABEL_72;
LABEL_94:
        v26 = v8 == 3;
        v25 = (a1 - 8298) < 0xFFFFFFFC;
LABEL_95:
        if (((v25 ^ v26) & 1) == 0)
          return !(*a2 & 1);
        goto LABEL_121;
      case 0x10u:
        v30 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                      + 1]];
        if (v30 == 4)
          goto LABEL_120;
        v25 = v8 == 3;
        v26 = a1 < 0x80 && v30 == 5;
        goto LABEL_95;
      default:
        return v2;
    }
  }
}

void sub_1A3AAF4B4(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl(&dword_1A3940000, a2, OS_LOG_TYPE_ERROR, "Could not make regex %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_1A3AAF538()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D48();
  sub_1A3952D30(&dword_1A3940000, v0, v1, "TTSAQ: schedule while stopped", v2, v3, v4, v5, v6);
  sub_1A3952D40();
}

void sub_1A3AAF564()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D48();
  sub_1A3952D30(&dword_1A3940000, v0, v1, "TTSAQ: detected queue invalidation, rebuilding queue.", v2, v3, v4, v5, v6);
  sub_1A3952D40();
}

void sub_1A3AAF590(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(_QWORD *)(buf + 4) = a1;
  _os_log_error_impl(&dword_1A3940000, log, OS_LOG_TYPE_ERROR, "TTSAQ: Failed to enqueue buffer: %@", buf, 0xCu);

}

void sub_1A3AAF5E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], a2, a1, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952D24();
  sub_1A3952D10(&dword_1A3940000, v6, v7, "TTSAQ: detected queue invalidation during allocate, rebuilding. aqErr: %@", v8, v9, v10, v11, v12);

  sub_1A3952D04();
}

void sub_1A3AAF66C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D48();
  sub_1A3952D30(&dword_1A3940000, v0, v1, "TTSAQ: Calling stop", v2, v3, v4, v5, v6);
  sub_1A3952D40();
}

void sub_1A3AAF698(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t v17;

  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = objc_msgSend_aqRef(*(void **)(a1 + 32), a2, a3, a4, a5);
  objc_msgSend_numberWithLong_(v5, v7, v6, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952D24();
  sub_1A3952CF0(&dword_1A3940000, v11, v12, "TTSAQ: Calling reset on %@ to silence queue output.", v13, v14, v15, v16, v17);

  sub_1A3952D04();
}

void sub_1A3AAF728(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(_QWORD *)(buf + 4) = a1;
  _os_log_debug_impl(&dword_1A3940000, log, OS_LOG_TYPE_DEBUG, "TTSAQ: timed out, stopping after %@s of silence.", buf, 0xCu);

}

void sub_1A3AAF77C(uint8_t *a1, const char *a2, _QWORD *a3, NSObject *a4, uint64_t a5)
{
  void *v8;

  objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], a2, (uint64_t)a2, (uint64_t)a4, a5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)a1 = 138412290;
  *a3 = v8;
  _os_log_error_impl(&dword_1A3940000, a4, OS_LOG_TYPE_ERROR, "TTSAQ: Failed to start on attempt %@", a1, 0xCu);

}

void sub_1A3AAF7F8(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t v17;

  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = objc_msgSend_aqRef(a1, a2, a3, a4, a5);
  objc_msgSend_numberWithLong_(v5, v7, v6, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952D24();
  sub_1A3952CF0(&dword_1A3940000, v11, v12, "TTSAQ: Calling dispose on %@", v13, v14, v15, v16, v17);

  sub_1A3952D04();
}

void sub_1A3AAF888(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  objc_msgSend_numberWithLong_(MEMORY[0x1E0CB37E8], a2, a1, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952D24();
  sub_1A3952CF0(&dword_1A3940000, v6, v7, "TTSAQ: Audio Queue %@ stopped", v8, v9, v10, v11, v12);

  sub_1A3952D04();
}

void sub_1A3AAF90C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  objc_msgSend_numberWithLong_(MEMORY[0x1E0CB37E8], a2, a1, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952D24();
  sub_1A3952CF0(&dword_1A3940000, v6, v7, "TTSAQ: Audio Queue %@ started", v8, v9, v10, v11, v12);

  sub_1A3952D04();
}

void sub_1A3AAF990(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t v17;

  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = objc_msgSend_aqRef(a1, a2, a3, a4, a5);
  objc_msgSend_numberWithLong_(v5, v7, v6, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952D24();
  sub_1A3952CF0(&dword_1A3940000, v11, v12, "TTSAQ: New AQ: %@", v13, v14, v15, v16, v17);

  sub_1A3952D04();
}

void sub_1A3AAFA1C()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_1A3952D48();
  _os_log_error_impl(&dword_1A3940000, v0, OS_LOG_TYPE_ERROR, "TTSAQ: attempted to configure nil audio format for output.", v1, 2u);
  sub_1A3952D40();
}

void sub_1A3AAFA54(int a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = 136315394;
  v3 = "-[TTSWrappedAudioQueue _selectChannels:]";
  v4 = 1024;
  v5 = a1;
  _os_log_error_impl(&dword_1A3940000, a2, OS_LOG_TYPE_ERROR, "TTSAQ: %s: error %d adding kAudioQueueProperty_ChannelAssignments \n", (uint8_t *)&v2, 0x12u);
}

void sub_1A3AAFADC(uint64_t a1, const char *a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  uint64_t v7;
  uint8_t v8[12];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], a2, a1, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952D24();
  v9 = 2112;
  v10 = v7;
  _os_log_error_impl(&dword_1A3940000, a3, OS_LOG_TYPE_ERROR, "TTSAQ: Channels per frame and channel count did not match: %@ %@", v8, 0x16u);

}

void sub_1A3AAFB94(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], a2, a1, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952D24();
  sub_1A3952D10(&dword_1A3940000, v6, v7, "TTSAQ: Could not initialize AUDSPGraph with error: %@", v8, v9, v10, v11, v12);

  sub_1A3952D04();
}

void sub_1A3AAFC18(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], a2, a1, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952D24();
  sub_1A3952D10(&dword_1A3940000, v6, v7, "TTSAQ: Could not configure AUDSPGraph with error: %@", v8, v9, v10, v11, v12);

  sub_1A3952D04();
}

void sub_1A3AAFC9C()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_1A3940000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "AUBuffer throwing bad_alloc", v0, 2u);
  sub_1A3952D40();
}

void sub_1A3AAFCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A395356C(&dword_1A3940000, MEMORY[0x1E0C81028], a3, "throwing %d", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AAFD4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A395356C(&dword_1A3940000, MEMORY[0x1E0C81028], a3, "throwing %d", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AAFDBC(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend_error(a1, a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 138412290;
  v13 = v11;
  _os_log_error_impl(&dword_1A3940000, (os_log_t)a2, OS_LOG_TYPE_ERROR, "Could not parse SSML: %@", (uint8_t *)&v12, 0xCu);

}

void sub_1A3AAFE68(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl(&dword_1A3940000, a2, OS_LOG_TYPE_DEBUG, "Transformed to SSML: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1A3AAFEDC(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  objc_msgSend_error(a1, a2, a3, a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_location(a1, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_hint(a1, v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 138412802;
  v19 = v7;
  v20 = 2112;
  v21 = v12;
  v22 = 2112;
  v23 = v17;
  _os_log_error_impl(&dword_1A3940000, (os_log_t)a2, OS_LOG_TYPE_ERROR, "SSML was invalid! %@, Location: %@, Hint: %@", (uint8_t *)&v18, 0x20u);

}

void sub_1A3AAFFB8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_1A3940000, log, OS_LOG_TYPE_FAULT, "Attempting to use SSML initialization but framework isn't available", v1, 2u);
}

void sub_1A3AAFFF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569EC(&dword_1A3940000, v0, v1, "Unable to find updated identifier for nil legacy identifier using language code: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB0058()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569EC(&dword_1A3940000, v0, v1, "Voices left to migrate: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB00B8()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  sub_1A3952D24();
  v3 = 2112;
  v4 = v0;
  _os_log_fault_impl(&dword_1A3940000, v1, OS_LOG_TYPE_FAULT, "Unable to complete migration for resource: %@, remaining voices to migrate: %@", v2, 0x16u);
  sub_1A39569E4();
}

void sub_1A3AB0134()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "Error writing migration complete flag to preferences: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB0194()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "Error unarchiving flag for completed migration: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB01F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "Error writing voices to migrate to preferences: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB0254(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_1A3940000, log, OS_LOG_TYPE_ERROR, "Error, process other than axassetsd tried to write migration voice list to preferences", v1, 2u);
}

void sub_1A3AB0294()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "Error unarchiving voices to migrate: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB02F4(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"void *AssistantServicesLibrary(void)", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("TTSAXResourceMigrationUtilities.m"), 22, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1A3AB0370(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"Class getAFLocalizationClass(void)_block_invoke", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v10, (uint64_t)v9, (uint64_t)CFSTR("TTSAXResourceMigrationUtilities.m"), 23, CFSTR("Unable to find class %s"), "AFLocalization");

  __break(1u);
}

void sub_1A3AB03E8()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  sub_1A3952D24();
  v3 = 2112;
  v4 = v0;
  _os_log_debug_impl(&dword_1A3940000, v1, OS_LOG_TYPE_DEBUG, "Found installed voice resources for %@: %@", v2, 0x16u);
}

void sub_1A3AB0468(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  objc_msgSend_numberWithLong_(MEMORY[0x1E0CB37E8], a2, a1, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952D24();
  sub_1A3952D10(&dword_1A3940000, v6, v7, "Wrong voice type passed in %@", v8, v9, v10, v11, v12);

  sub_1A3952D04();
}

void sub_1A3AB04EC()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_1A3952D24();
  _os_log_fault_impl(&dword_1A3940000, v0, OS_LOG_TYPE_FAULT, "Malformed Siri Asset %@", v1, 0xCu);
}

void sub_1A3AB055C()
{
  __assert_rtn("populateParameterInfoTable", "SpeechEnhancerParametersV2.h", 187, "paramInfo.size() == kNumberOfParams");
}

void sub_1A3AB0584()
{
  __assert_rtn("setParameterLight", "SpeechEnhancerCoreV2.h", 191, "index >= 0 && index < mParameterInfoTable.size()");
}

void sub_1A3AB05AC()
{
  __assert_rtn("GetParameterList", "AUSpeechEnhancerV2.cpp", 326, "outNumParameters == mParameterInfoTable.size()");
}

void sub_1A3AB05D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1A39650BC("parameterValue", "SpeechEnhancerCoreV2.h", a3, "index >= 0 && index < mParameterInfoTable.size()");
}

void sub_1A3AB05F8()
{
  __assert_rtn("process", "SpeechEnhancerCoreV2.h", 330, "isFrequencyDomain ? (input[0].size() >= 2 * numFrames) : (input[0].size() >= numFrames)");
}

void sub_1A3AB0620()
{
  __assert_rtn("initSpeechSpectrum", "SpeechEnhancerCoreV2.h", 953, "mLoudspeakerCalibrationFactor > 0");
}

void sub_1A3AB0648()
{
  __assert_rtn("process", "SpeechEnhancerCoreV2.h", 329, "numFrames == mBlockSize");
}

void sub_1A3AB0670()
{
  __assert_rtn("process", "SpeechEnhancerCoreV2.h", 328, "output.size() == mNumInputChannels");
}

void sub_1A3AB0698()
{
  __assert_rtn("process", "SpeechEnhancerCoreV2.h", 327, "input.size() == mNumInputChannels");
}

void sub_1A3AB06C0()
{
  __assert_rtn("getParameter", "SpeechEnhancerCoreV2.h", 305, "index >= 0 && index < mParameterInfoTable.size()");
}

void sub_1A3AB06E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A395356C(&dword_1A3940000, MEMORY[0x1E0C81028], a3, "throwing %d", a5, a6, a7, a8, 0);
}

void sub_1A3AB075C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A395356C(&dword_1A3940000, MEMORY[0x1E0C81028], a3, "throwing %d", a5, a6, a7, a8, 0);
}

void sub_1A3AB07D0()
{
  __assert_rtn("process", "SPLMeter.h", 98, "a.size() == mWeightCurve.size()");
}

void sub_1A3AB07F8()
{
  __assert_rtn("getTabulatedSpeechSpectrum", "SpeechEnhancerCoreV2.h", 929, "mTmpVector1.size() >= kByrneSpectraSamples.size()");
}

void sub_1A3AB0820()
{
  __assert_rtn("getTabulatedSpeechSpectrum", "SpeechEnhancerCoreV2.h", 928, "kByrneCenterFrequency.size() == kByrneSpectraSamples.size()");
}

void sub_1A3AB0848(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  objc_msgSend_name(a1, a2, a3, a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_identifier(a1, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_primaryLanguages(a1, v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 138412802;
  v19 = v7;
  v20 = 2112;
  v21 = v12;
  v22 = 2112;
  v23 = v17;
  _os_log_error_impl(&dword_1A3940000, (os_log_t)a2, OS_LOG_TYPE_ERROR, "Malformed SSE voice (name: %@, identifier: %@, languages: %@)", (uint8_t *)&v18, 0x20u);

}

void sub_1A3AB0924(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_1A3940000, a2, OS_LOG_TYPE_ERROR, "Unable to find primary language for %@", (uint8_t *)&v2, 0xCu);
}

void sub_1A3AB0998(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"NSString *softAXLocalizedString(NSString *__strong)", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = dlerror();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v11, (uint64_t)v9, (uint64_t)CFSTR("TTSAXResource.m"), 20, CFSTR("%s"), v10);

  __break(1u);
}

void sub_1A3AB0A0C(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"void *AccessibilityUtilitiesLibrary(void)", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("TTSAXResource.m"), 19, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1A3AB0A88(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"NSString *getAXSpeechSourceKeySpeechFeatures(void)", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = dlerror();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v11, (uint64_t)v9, (uint64_t)CFSTR("AVSpeechSynthesisVoice.m"), 19, CFSTR("%s"), v10);

  __break(1u);
}

void sub_1A3AB0AFC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"BOOL get_AXIsInternalInstall(void)", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = dlerror();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v11, (uint64_t)v9, (uint64_t)CFSTR("AVSpeechSynthesisVoice.m"), 22, CFSTR("%s"), v10);

  __break(1u);
}

void sub_1A3AB0B70(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend_identifier(a1, a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 138412290;
  v8 = v6;
  _os_log_error_impl(&dword_1A3940000, (os_log_t)a2, OS_LOG_TYPE_ERROR, "Could not find any name for this voice: %@", (uint8_t *)&v7, 0xCu);

}

void sub_1A3AB0C04(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"Class getAXSettingsClass(void)_block_invoke", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v10, (uint64_t)v9, (uint64_t)CFSTR("AVSpeechSynthesisVoice.m"), 18, CFSTR("Unable to find class %s"), "AXSettings");

  __break(1u);
}

void sub_1A3AB0C7C(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"void *AccessibilityUtilitiesLibrary(void)", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("AVSpeechSynthesisVoice.m"), 17, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1A3AB0CF8(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  _DWORD v4[2];
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4[0] = 67109378;
  v4[1] = v3;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl(&dword_1A3940000, log, OS_LOG_TYPE_ERROR, "PCRE2 compilation failed at offset %d: %@", (uint8_t *)v4, 0x12u);
}

void sub_1A3AB0D80(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], a2, a1, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 138412290;
  v8 = v6;
  _os_log_error_impl(&dword_1A3940000, (os_log_t)a2, OS_LOG_TYPE_ERROR, "Encountered unexpected PCRE match error %@", (uint8_t *)&v7, 0xCu);

}

void sub_1A3AB0E20(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  objc_msgSend_zipPath(a1, a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952D24();
  sub_1A3952D10(&dword_1A3940000, v6, v7, "Path name was nil while unzipping: %@", v8, v9, v10, v11, v12);

  sub_1A3952D04();
}

void sub_1A3AB0E98(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t v16;

  objc_msgSend_zipPath(a1, a2, a3, a4, a5);
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  objc_msgSend_fileSystemRepresentation(v5, v6, v7, v8, v9);
  sub_1A3952D24();
  sub_1A3952D10(&dword_1A3940000, v10, v11, "TTSStreamingZipReader: Decompression failed. Could not open source: %s", v12, v13, v14, v15, v16);

  sub_1A3952D04();
}

void sub_1A3AB0F18(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t v16;

  objc_msgSend_zipPath(a1, a2, a3, a4, a5);
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  objc_msgSend_fileSystemRepresentation(v5, v6, v7, v8, v9);
  sub_1A3952D24();
  sub_1A3952D10(&dword_1A3940000, v10, v11, "TTSStreamingZipReader: Password failed. Could not open source: %s", v12, v13, v14, v15, v16);

  sub_1A3952D04();
}

void sub_1A3AB0F98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  archive_error_string();
  sub_1A3952D24();
  sub_1A3952D10(&dword_1A3940000, v0, v1, "TTSStreamingZipReader: archive_read unable to set supported formats: %s.", v2, v3, v4, v5, v6);
  sub_1A3952D04();
}

void sub_1A3AB1004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  archive_error_string();
  sub_1A3952D24();
  sub_1A3952D10(&dword_1A3940000, v0, v1, "TTSStreamingZipReader:Cant read: %s", v2, v3, v4, v5, v6);
  sub_1A3952D04();
}

void sub_1A3AB1074(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend_resourceList(a1, a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 138412290;
  v8 = v6;
  _os_log_debug_impl(&dword_1A3940000, (os_log_t)a2, OS_LOG_TYPE_DEBUG, "Loading resources: %@", (uint8_t *)&v7, 0xCu);

}

void sub_1A3AB1108(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], a2, a1, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952CF0(&dword_1A3940000, v6, v7, "Finished processing string at recursion depth %@", v8, v9, v10, v11, 2u);

  sub_1A3952D04();
}

void sub_1A3AB1190(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl(&dword_1A3940000, log, OS_LOG_TYPE_DEBUG, "VoiceProvider: Reloading all components due to nil bundle hash", v1, 2u);
}

void sub_1A3AB11D0(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = 138412290;
  v5 = v3;
  sub_1A3974824(&dword_1A3940000, a2, a3, "VoiceProvider: Recovered cache entry for SSE %@", (uint8_t *)&v4);
  sub_1A39569E4();
}

void sub_1A3AB123C(uint64_t *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], a2, 3, a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 138412546;
  v9 = v6;
  v10 = 2112;
  v11 = v7;
  _os_log_error_impl(&dword_1A3940000, (os_log_t)a2, OS_LOG_TYPE_ERROR, "VoiceProvider: voice load failed for component %@ after %@ attempts.", (uint8_t *)&v8, 0x16u);

  sub_1A3974814();
}

void sub_1A3AB12E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "VoiceProvider voice load timed out for record %@.", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB1348(void *a1, const char *a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint8_t v13[12];
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = (void *)MEMORY[0x1E0CB37E8];
  v8 = objc_msgSend_count(a1, a2, (uint64_t)a3, a4, a5);
  objc_msgSend_numberWithUnsignedInteger_(v7, v9, v8, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952D24();
  v14 = 2112;
  v15 = a2;
  _os_log_debug_impl(&dword_1A3940000, a3, OS_LOG_TYPE_DEBUG, "VoiceProvider loaded %@ voices for bundle identifier: %@", v13, 0x16u);

  sub_1A3974814();
}

void sub_1A3AB13F8(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  void *v8;
  uint64_t v9;
  uint8_t v10[24];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    objc_msgSend_componentDescription(v7, (const char *)a2, (uint64_t)a3, a4, a5);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
  }
  AXNSStringFromAudioUnitComponentDescription((unsigned int *)a2, (const char *)a2, (uint64_t)a3, a4, a5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952D24();
  sub_1A3974824(&dword_1A3940000, a3, v9, "VoiceProvider: Skipping voice load for %@ before first unlock", v10);

}

void sub_1A3AB14A4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A39569D4(&dword_1A3940000, a2, a3, "VoiceProvider voices returned nil for record %@", a5, a6, a7, a8, 2u);
  sub_1A39569E4();
}

void sub_1A3AB150C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "VoiceProvider audio component initialization error %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB156C()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_1A3952D24();
  _os_log_fault_impl(&dword_1A3940000, v0, OS_LOG_TYPE_FAULT, "Attempting to write over 500KB of data to the component cache. %@", v1, 0xCu);
  sub_1A39569E4();
}

void sub_1A3AB15D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "VoiceProvider: failed to set component cache preference %@.", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB1638()
{
  __assert_rtn("+[TTSSynthesisProviderVoiceManager setComponentCache:]", "TTSSynthesisProviderVoiceManager.m", 581, "AXProcessIsAXAssetsd()");
}

void sub_1A3AB1660()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "VoiceProvider: failed to decode component cache preference with exception: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB16C0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_1A3940000, log, OS_LOG_TYPE_ERROR, "VoiceProvider: failed to read component cache preference.", v1, 2u);
}

void sub_1A3AB1700()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D48();
  sub_1A397C150(&dword_1A3940000, v0, v1, "Tried to merge in installed assets before initial in-memory cache build.", v2, v3, v4, v5, v6);
  sub_1A3952D40();
}

void sub_1A3AB172C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D48();
  sub_1A397C150(&dword_1A3940000, v0, v1, "Failed to load maui/macintalk on-disk resources. Could not find maui framework!", v2, v3, v4, v5, v6);
  sub_1A3952D40();
}

void sub_1A3AB1758()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_1A3952D48();
  _os_log_debug_impl(&dword_1A3940000, v0, OS_LOG_TYPE_DEBUG, "Requested axassetsd to rebuild the preferences cache", v1, 2u);
  sub_1A3952D40();
}

void sub_1A3AB1790()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D48();
  sub_1A397C150(&dword_1A3940000, v0, v1, "No download resource in _stopDownloadSiriVoiceAssetWithResource:", v2, v3, v4, v5, v6);
  sub_1A3952D40();
}

void sub_1A3AB17BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "No asset for resource: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB181C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A397C160();
  sub_1A39569EC(&dword_1A3940000, v0, v1, "Stopped downloading %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB1880(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A39569D4(&dword_1A3940000, a1, a3, "No resource for download: %@", a5, a6, a7, a8, 2u);
  sub_1A39569E4();
}

void sub_1A3AB18E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "Resource already installed: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB1948()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A397C160();
  sub_1A39569EC(&dword_1A3940000, v0, v1, "Started downloading %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB19AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D48();
  sub_1A397C150(&dword_1A3940000, v0, v1, "No resource in _downloadSiriVoiceAssetWithResource:", v2, v3, v4, v5, v6);
  sub_1A3952D40();
}

void sub_1A3AB19D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "Cannot download Siri asset. No asset instance found for resource: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB1A38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D48();
  sub_1A397C150(&dword_1A3940000, v0, v1, "Speech sample DL: Could not find sample asset to download.", v2, v3, v4, v5, v6);
  sub_1A3952D40();
}

void sub_1A3AB1A64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D48();
  sub_1A397C150(&dword_1A3940000, v0, v1, "Error, attempted to delete asset that is not installed.", v2, v3, v4, v5, v6);
  sub_1A3952D40();
}

void sub_1A3AB1A90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "Error reading in local voices for language %@.", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB1AF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "Error creating language-code regex: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB1B50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D48();
  sub_1A397C150(&dword_1A3940000, v0, v1, "Error reading languages in for local resources.", v2, v3, v4, v5, v6);
  sub_1A3952D40();
}

void sub_1A3AB1B7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D48();
  sub_1A397C150(&dword_1A3940000, v0, v1, "Attempted to play a sample, but not sample assets were found", v2, v3, v4, v5, v6);
  sub_1A3952D40();
}

void sub_1A3AB1BA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A397C160();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "Siri sample URL was nil for %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB1C0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D48();
  sub_1A397C150(&dword_1A3940000, v0, v1, "Error: A process other than axassetsd attempted to write to the preferences cache.", v2, v3, v4, v5, v6);
  sub_1A3952D40();
}

void sub_1A3AB1C38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A397C160();
  sub_1A39569EC(&dword_1A3940000, v0, v1, "Did migrate uninformed siri voices: %s", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB1CB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569EC(&dword_1A3940000, v0, v1, "Read resource cache version from preferences: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB1D10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569EC(&dword_1A3940000, v0, v1, "Read catalog build number from preferences: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB1D70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D48();
  sub_1A397C150(&dword_1A3940000, v0, v1, "Error: A process other than axassetsd attempted to write the build version to user preferences.", v2, v3, v4, v5, v6);
  sub_1A3952D40();
}

void sub_1A3AB1D9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "Error unarchiving resources: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB1DFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569EC(&dword_1A3940000, v0, v1, "Read resources cache from preferences: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB1E5C(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_1A397C144(&dword_1A3940000, a3, (uint64_t)a3, "Error unarchiving resources: unexpected type %@", (uint8_t *)a2);
}

void sub_1A3AB1E98()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_1A3952D24();
  _os_log_fault_impl(&dword_1A3940000, v0, OS_LOG_TYPE_FAULT, "Attempting to write over 500KB of data to the resource cache. %@", v1, 0xCu);
  sub_1A39569E4();
}

void sub_1A3AB1F04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "Error writing resources to preferences: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB1F64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "No download resource %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB1FC4()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  sub_1A3952D24();
  v3 = 2112;
  v4 = v0;
  _os_log_error_impl(&dword_1A3940000, v1, OS_LOG_TYPE_ERROR, "Download failed: %@, %@", v2, 0x16u);
  sub_1A39569E4();
}

void sub_1A3AB2040(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_1A3940000, log, OS_LOG_TYPE_ERROR, "Error: TTSAsset was nil while refreshing siri resources", buf, 2u);
}

void sub_1A3AB207C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  uint64_t v7;
  uint8_t v8[24];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend_voiceId(*(void **)(a1 + 32), a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952D24();
  sub_1A397C144(&dword_1A3940000, a2, v7, "Cannot download voice for testing. No assset found for ID: %@", v8);

}

void sub_1A3AB2108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A397C150(&dword_1A3940000, MEMORY[0x1E0C81028], a3, "AudioUnitGetProperty: null size pointer", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AB213C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A397C150(&dword_1A3940000, MEMORY[0x1E0C81028], a3, "AudioUnitGetProperty: *ioDataSize == 0 on entry", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AB2170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A397C150(&dword_1A3940000, MEMORY[0x1E0C81028], a3, "AudioUnitSetProperty: inData == NULL", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AB21A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A397C150(&dword_1A3940000, MEMORY[0x1E0C81028], a3, "AudioUnitSetProperty: inDataSize == 0", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AB21D8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A397C150(&dword_1A3940000, a1, a3, "Error reading general language code data.", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AB2208(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A397C150(&dword_1A3940000, a1, a3, "Error reading sample string data.", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AB2238(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl(&dword_1A3940000, a2, OS_LOG_TYPE_DEBUG, "Multiple speech dones were sent for request:%@", (uint8_t *)&v2, 0xCu);
}

void sub_1A3AB22AC()
{
  uint64_t v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[12];
  __int16 v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sub_1A3952D24();
  v4 = 2112;
  v5 = v0;
  v6 = 2112;
  v7 = v1;
  _os_log_error_impl(&dword_1A3940000, v2, OS_LOG_TYPE_ERROR, "Service identifier for voice: %@ was nil. Resource: %@. Speech Servers: %@", v3, 0x20u);
}

void sub_1A3AB233C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "Could not find voice for identifier: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB239C(NSObject *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  uint8_t v7[24];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1A3952D24();
  _os_log_debug_impl(&dword_1A3940000, a1, OS_LOG_TYPE_DEBUG, "TextToSpeech first buffer latency: %@s", v7, 0xCu);

}

void sub_1A3AB2434(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_fault_impl(&dword_1A3940000, log, OS_LOG_TYPE_FAULT, "Channel should not be nil. Are we deallocating the TTSAudioSessionChannel but holding a reference to it, perhaps in our unit tests?", buf, 2u);
}

void sub_1A3AB2470(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"void *AccessibilityUtilitiesLibrary(void)", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("TTSSpeechSynthesizer.m"), 39, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1A3AB24EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"Class getAXSettingsClass(void)_block_invoke", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v10, (uint64_t)v9, (uint64_t)CFSTR("TTSSpeechSynthesizer.m"), 40, CFSTR("Unable to find class %s"), "AXSettings");

  __break(1u);
}

void sub_1A3AB2564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A3987848();
  sub_1A395356C(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "throwing %d", v1, v2, v3, v4, v5);
  sub_1A3952D40();
}

void sub_1A3AB25CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"CFStringRef getkAXPidKey(void)", v8, v9);
  objc_claimAutoreleasedReturnValue();
  v10 = sub_1A398B614();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v5, (uint64_t)CFSTR("AVSpeechSynthesizer.m"), 45, CFSTR("%s"), v10);

  __break(1u);
}

void sub_1A3AB263C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"CFStringRef getkAXNotificationDataKey(void)", v8, v9);
  objc_claimAutoreleasedReturnValue();
  v10 = sub_1A398B614();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v5, (uint64_t)CFSTR("AVSpeechSynthesizer.m"), 44, CFSTR("%s"), v10);

  __break(1u);
}

void sub_1A3AB26AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"AXError get_AXPushNotificationToSystemForBroadcast(AXNotification, AXUIElementRef, __strong id)", v8, v9);
  objc_claimAutoreleasedReturnValue();
  v10 = sub_1A398B614();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v5, (uint64_t)CFSTR("AVSpeechSynthesizer.m"), 42, CFSTR("%s"), v10);

  __break(1u);
}

void sub_1A3AB271C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"NSString *getAXSpeechSourceKeyVoiceOver(void)", v8, v9);
  objc_claimAutoreleasedReturnValue();
  v10 = sub_1A398B614();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v5, (uint64_t)CFSTR("AVSpeechSynthesizer.m"), 36, CFSTR("%s"), v10);

  __break(1u);
}

void sub_1A3AB278C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"NSString *getAXSpeechSourceKeySwitchControl(void)", v8, v9);
  objc_claimAutoreleasedReturnValue();
  v10 = sub_1A398B614();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v5, (uint64_t)CFSTR("AVSpeechSynthesizer.m"), 35, CFSTR("%s"), v10);

  __break(1u);
}

void sub_1A3AB27FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"NSString *getAXSpeechSourceKeySpeechFeatures(void)", v8, v9);
  objc_claimAutoreleasedReturnValue();
  v10 = sub_1A398B614();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v5, (uint64_t)CFSTR("AVSpeechSynthesizer.m"), 34, CFSTR("%s"), v10);

  __break(1u);
}

void sub_1A3AB286C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"NSString *getUIAccessibilityTokenBrailleDisplayOnly(void)", v8, v9);
  objc_claimAutoreleasedReturnValue();
  v10 = sub_1A398B614();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v5, (uint64_t)CFSTR("AVSpeechSynthesizer.m"), 43, CFSTR("%s"), v10);

  __break(1u);
}

void sub_1A3AB28DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A397C150(&dword_1A3940000, MEMORY[0x1E0C81028], a3, "Weak-linked TCC not available", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AB2910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A397C150(&dword_1A3940000, MEMORY[0x1E0C81028], a3, "Personal voice usage is not allowed in apps", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AB2944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A397C150(&dword_1A3940000, MEMORY[0x1E0C81028], a3, "Device does not support personal voice.", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AB2978(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"void *TextToSpeechVoiceBankingSupportLibrary(void)", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("AVSpeechSynthesizer.m"), 25, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1A3AB29F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"Class getTTSVBSettingsClass(void)_block_invoke", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v10, (uint64_t)v9, (uint64_t)CFSTR("AVSpeechSynthesizer.m"), 26, CFSTR("Unable to find class %s"), "TTSVBSettings");

  __break(1u);
}

void sub_1A3AB2A6C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"Class getAXSettingsClass(void)_block_invoke", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v10, (uint64_t)v9, (uint64_t)CFSTR("AVSpeechSynthesizer.m"), 32, CFSTR("Unable to find class %s"), "AXSettings");

  __break(1u);
}

void sub_1A3AB2AE4(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"void *AccessibilityUtilitiesLibrary(void)", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("AVSpeechSynthesizer.m"), 30, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1A3AB2B60(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"void *AXRuntimeLibrary(void)", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("AVSpeechSynthesizer.m"), 41, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1A3AB2BDC()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  sub_1A3952D24();
  v3 = 2112;
  v4 = v0;
  _os_log_debug_impl(&dword_1A3940000, v1, OS_LOG_TYPE_DEBUG, "Create action with SSMLRepresentation %@ ... shouldQueue: %@", v2, 0x16u);
  sub_1A39569E4();
}

void sub_1A3AB2C70(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_1A3940000, log, OS_LOG_TYPE_ERROR, "Cannot update aux session. Synth not ready", v1, 2u);
}

void sub_1A3AB2CB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "Could not update aux category: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB2D10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1A3952D24();
  sub_1A39569D4(&dword_1A3940000, v0, v1, "Error setting participates in now playing: %@", v2, v3, v4, v5, v6);
  sub_1A39569E4();
}

void sub_1A3AB2D70()
{
  __assert_rtn("-[TTSSpeechManager _updateAuxiliarySession]", "TTSSpeechManager.m", 408, "NSThread.currentThread == _runThread");
}

void sub_1A3AB2D98()
{
  __assert_rtn("-[TTSSpeechManager handleAudioSessionObservers:]", "TTSSpeechManager.m", 503, "NSThread.currentThread == _runThread");
}

void sub_1A3AB2DC0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_1A3940000, log, OS_LOG_TYPE_FAULT, "Audio session should have been disabled before deallocating", v1, 2u);
}

void sub_1A3AB2E00()
{
  __assert_rtn("-[TTSSpeechManager _enqueueSelectorOnSpeechThread:object:waitUntilDone:]", "TTSSpeechManager.m", 527, "![NSThread.currentThread isEqual:_runThread]");
}

void sub_1A3AB2E28()
{
  __assert_rtn("-[TTSSpeechManager _updateAudioSessionProperties]", "TTSSpeechManager.m", 678, "[NSThread.currentThread isEqual:_runThread]");
}

void sub_1A3AB2E50(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"NSString *AXVOLocalizedStringForCharacter_Soft(UTF32Char, NSString *__strong)", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = dlerror();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v11, (uint64_t)v9, (uint64_t)CFSTR("TTSSpeechManager.m"), 41, CFSTR("%s"), v10);

  __break(1u);
}

void sub_1A3AB2EC4()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_1A3952D24();
  _os_log_debug_impl(&dword_1A3940000, v0, OS_LOG_TYPE_DEBUG, "Creating AV from TTS for: %@", v1, 0xCu);
  sub_1A39569E4();
}

void sub_1A3AB2F30()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_1A3952D24();
  _os_log_fault_impl(&dword_1A3940000, v0, OS_LOG_TYPE_FAULT, "Arguments wrong format: %@", v1, 0xCu);
  sub_1A39569E4();
}

void sub_1A3AB2F9C()
{
  __assert_rtn("-[TTSSpeechManager clearSpeechQueue]", "TTSSpeechManager.m", 1428, "![_runThread isFinished]");
}

void sub_1A3AB2FC4()
{
  __assert_rtn("-[TTSSpeechManager dispatchSpeechAction:]", "TTSSpeechManager.m", 1443, "![_runThread isFinished]");
}

void sub_1A3AB2FEC()
{
  __assert_rtn("-[TTSSpeechManager pauseSpeaking:]", "TTSSpeechManager.m", 1466, "![_runThread isFinished]");
}

void sub_1A3AB3014()
{
  __assert_rtn("-[TTSSpeechManager continueSpeaking]", "TTSSpeechManager.m", 1489, "![_runThread isFinished]");
}

void sub_1A3AB303C()
{
  __assert_rtn("-[TTSSpeechManager isSpeaking]", "TTSSpeechManager.m", 1526, "![_runThread isFinished]");
}

void sub_1A3AB3064()
{
  __assert_rtn("-[TTSSpeechManager _processDidStartCallback:]", "TTSSpeechManager.m", 1600, "[NSThread.currentThread isEqual:_runThread]");
}

void sub_1A3AB308C(uint64_t a1, void *a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend_identifier(a2, (const char *)a2, (uint64_t)a3, a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 138412546;
  v9 = a1;
  v10 = 2112;
  v11 = v7;
  _os_log_error_impl(&dword_1A3940000, a3, OS_LOG_TYPE_ERROR, "Failed to speak request with error: %@. Attempting to speak again with fallback identifier: %@", (uint8_t *)&v8, 0x16u);

}

void sub_1A3AB313C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"Class getAXSettingsClass(void)_block_invoke", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v10, (uint64_t)v9, (uint64_t)CFSTR("TTSSpeechManager.m"), 45, CFSTR("Unable to find class %s"), "AXSettings");

  __break(1u);
}

void sub_1A3AB31B4(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"void *AccessibilityUtilitiesLibrary(void)", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("TTSSpeechManager.m"), 40, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1A3AB3230(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"Class getAXLanguageManagerClass(void)_block_invoke", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v10, (uint64_t)v9, (uint64_t)CFSTR("TTSSpeechManager.m"), 44, CFSTR("Unable to find class %s"), "AXLanguageManager");

  __break(1u);
}

void sub_1A3AB32A8(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 138412290;
  v2 = a1;
  _os_log_error_impl(&dword_1A3940000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Error creating regex %@", (uint8_t *)&v1, 0xCu);
}

void sub_1A3AB3324(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_fault_impl(&dword_1A3940000, log, OS_LOG_TYPE_FAULT, "Invalid language format was used to initialize TTS voice asset", buf, 2u);
}

void sub_1A3AB3360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C920(*MEMORY[0x1E0C80C00]);
  sub_1A399C94C();
  sub_1A399C8F4(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "  from %s, render err: %d", v1, v2, v3, v4, v5);
  sub_1A39569E4();
}

void sub_1A3AB33D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C920(*MEMORY[0x1E0C80C00]);
  sub_1A399C930();
  sub_1A399C8F4(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "  from %s, render err: %d", v1, v2, v3, v4, v5);
  sub_1A39569E4();
}

void sub_1A3AB3440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A399C980(&dword_1A3940000, MEMORY[0x1E0C81028], a3, "kAudioUnitErr_TooManyFramesToProcess : inFramesToProcess=%u, mMaxFramesPerSlice=%u", a5, a6, a7, a8, 0);
  sub_1A39569E4();
}

void sub_1A3AB34BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C920(*MEMORY[0x1E0C80C00]);
  sub_1A399C904();
  sub_1A399C8F4(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "  from %s, render err: %d", v1, v2, v3, v4, v5);
  sub_1A39569E4();
}

void sub_1A3AB352C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C9C0();
  sub_1A399C980(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "ioData.mNumberBuffers=%u, ASBD::NumberChannelStreams(output.GetStreamFormat())=%u; kAudio_ParamError",
    v1,
    v2,
    v3,
    v4,
    v5);
  sub_1A39569E4();
}

void sub_1A3AB3594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C920(*MEMORY[0x1E0C80C00]);
  sub_1A399C968();
  sub_1A399C8F4(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "  from %s, render err: %d", v1, v2, v3, v4, v5);
  sub_1A39569E4();
}

void sub_1A3AB3604(uint8_t *buf, _BYTE *a2)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_1A3940000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Unknown AUThreadSafeList event type", buf, 2u);
}

void sub_1A3AB3644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C920(*MEMORY[0x1E0C80C00]);
  sub_1A399C94C();
  sub_1A399C8F4(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "  from %s, process err: %d", v1, v2, v3, v4, v5);
  sub_1A39569E4();
}

void sub_1A3AB36B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C920(*MEMORY[0x1E0C80C00]);
  sub_1A399C930();
  sub_1A399C8F4(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "  from %s, process err: %d", v1, v2, v3, v4, v5);
  sub_1A39569E4();
}

void sub_1A3AB3724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C920(*MEMORY[0x1E0C80C00]);
  sub_1A399C904();
  sub_1A399C8F4(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "  from %s, process err: %d", v1, v2, v3, v4, v5);
  sub_1A39569E4();
}

void sub_1A3AB3794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C9C0();
  sub_1A399C980(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "ioData.mNumberBuffers=%u, ASBD::NumberChannelStreams(input->GetStreamFormat())=%u; kAudio_ParamError",
    v1,
    v2,
    v3,
    v4,
    v5);
  sub_1A39569E4();
}

void sub_1A3AB37FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C920(*MEMORY[0x1E0C80C00]);
  sub_1A399C968();
  sub_1A399C8F4(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "  from %s, process err: %d", v1, v2, v3, v4, v5);
  sub_1A39569E4();
}

void sub_1A3AB386C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C920(*MEMORY[0x1E0C80C00]);
  sub_1A399C94C();
  sub_1A399C8F4(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "  from %s, processmultiple err: %d", v1, v2, v3, v4, v5);
  sub_1A39569E4();
}

void sub_1A3AB38DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C920(*MEMORY[0x1E0C80C00]);
  sub_1A399C930();
  sub_1A399C8F4(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "  from %s, processmultiple err: %d", v1, v2, v3, v4, v5);
  sub_1A39569E4();
}

void sub_1A3AB394C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C920(*MEMORY[0x1E0C80C00]);
  sub_1A399C904();
  sub_1A399C8F4(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "  from %s, processmultiple err: %d", v1, v2, v3, v4, v5);
  sub_1A39569E4();
}

void sub_1A3AB39BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C990();
  sub_1A399C9B0(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "ioOutputBufferLists[%u]->mNumberBuffers=%u, ASBD::NumberChannelStreams(output.GetStreamFormat())=%u; kAudio_ParamError",
    v1,
    v2,
    v3,
    v4,
    v5);
  sub_1A39569E4();
}

void sub_1A3AB3A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C990();
  sub_1A399C9B0(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "inInputBufferLists[%u]->mNumberBuffers=%u, ASBD::NumberChannelStreams(input.GetStreamFormat())=%u; kAudio_ParamError",
    v1,
    v2,
    v3,
    v4,
    v5);
  sub_1A39569E4();
}

void sub_1A3AB3A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399C920(*MEMORY[0x1E0C80C00]);
  sub_1A399C968();
  sub_1A399C8F4(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "  from %s, processmultiple err: %d", v1, v2, v3, v4, v5);
  sub_1A39569E4();
}

void sub_1A3AB3AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A395356C(&dword_1A3940000, MEMORY[0x1E0C81028], a3, "throwing %d", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AB3B6C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"NSString *getAXSpeechSourceKeyVoiceOver(void)", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = dlerror();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v11, (uint64_t)v9, (uint64_t)CFSTR("TTSSharedUtilities.m"), 42, CFSTR("%s"), v10);

  __break(1u);
}

void sub_1A3AB3BE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"NSString *getAXSpeechSourceKeySwitchControl(void)", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = dlerror();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v11, (uint64_t)v9, (uint64_t)CFSTR("TTSSharedUtilities.m"), 43, CFSTR("%s"), v10);

  __break(1u);
}

void sub_1A3AB3C54(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_1A3940000, log, OS_LOG_TYPE_ERROR, "Cannot use AVSpeechSynthesizerBufferCallback with Personal Voices, defaulting to output channel.", v1, 2u);
  sub_1A3952D40();
}

void sub_1A3AB3C90(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A3952D30(&dword_1A3940000, a1, a3, "Successfully set the thread priority\n", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AB3CC0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A3952D30(&dword_1A3940000, a1, a3, "Could NOT set the thread priority\n", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AB3CF0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A399D930(&dword_1A3940000, a2, a3, "Setting importance to %d\n", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AB3D54(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A399D930(&dword_1A3940000, a1, a3, "Normal thread priority is %d\n", a5, a6, a7, a8, 0);
  sub_1A3952D40();
}

void sub_1A3AB3DC4(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"void *AssistantServicesLibrary(void)", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("TTSSharedUtilities.m"), 34, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1A3AB3E40(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"Class getAFPreferencesClass(void)_block_invoke", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v10, (uint64_t)v9, (uint64_t)CFSTR("TTSSharedUtilities.m"), 35, CFSTR("Unable to find class %s"), "AFPreferences");

  __break(1u);
}

void sub_1A3AB3EB8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"Class getAXSettingsClass(void)_block_invoke", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v10, (uint64_t)v9, (uint64_t)CFSTR("TTSSharedUtilities.m"), 39, CFSTR("Unable to find class %s"), "AXSettings");

  __break(1u);
}

void sub_1A3AB3F30(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;

  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"void *AccessibilityUtilitiesLibrary(void)", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("TTSSharedUtilities.m"), 38, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1A3AB3FB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1A399F258();
  sub_1A395356C(&dword_1A3940000, MEMORY[0x1E0C81028], v0, "throwing %d", v1, v2, v3, v4, v5);
  sub_1A3952D40();
}

void sub_1A3AB401C(ausdk::AUBase *a1, int a2)
{
  int v3;
  uint64_t LoggingString;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 136315394;
  LoggingString = ausdk::AUBase::GetLoggingString(a1);
  v5 = 1024;
  v6 = a2;
  _os_log_error_impl(&dword_1A3940000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Warning: %s SetParameter for undefined param ID %u while initialized. Ignoring.", (uint8_t *)&v3, 0x12u);
}

void sub_1A3AB40B4(uint64_t a1)
{
  uint64_t LoggingString;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  LoggingString = ausdk::AUBase::GetLoggingString(*(ausdk::AUBase **)(a1 + 8));
  v2 = 136315138;
  v3 = LoggingString;
  _os_log_error_impl(&dword_1A3940000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Warning: %s was passed a ramped parameter event but does not implement them. Ignoring.", (uint8_t *)&v2, 0xCu);
}

void sub_1A3AB4138(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A39569D4(&dword_1A3940000, a2, a3, "VoiceProvider: error creating ssml delimiter regex: %@", a5, a6, a7, a8, 2u);
}

void sub_1A3AB41A0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1A39569D4(&dword_1A3940000, a2, a3, "VoiceProvider: error creating ssml de-escaping regex: %@", a5, a6, a7, a8, 2u);
}

uint64_t sub_1A3AB4208()
{
  return MEMORY[0x1E0CADE58]();
}

uint64_t sub_1A3AB4214()
{
  return MEMORY[0x1E0CAE070]();
}

uint64_t sub_1A3AB4220()
{
  return MEMORY[0x1E0CAE0A8]();
}

uint64_t sub_1A3AB422C()
{
  return MEMORY[0x1E0CAE0B8]();
}

uint64_t sub_1A3AB4238()
{
  return MEMORY[0x1E0CAE1A0]();
}

uint64_t sub_1A3AB4244()
{
  return MEMORY[0x1E0CAE1D8]();
}

uint64_t sub_1A3AB4250()
{
  return MEMORY[0x1E0CAE1E8]();
}

uint64_t sub_1A3AB425C()
{
  return MEMORY[0x1E0CAE390]();
}

uint64_t sub_1A3AB4268()
{
  return MEMORY[0x1E0CAE4B8]();
}

uint64_t sub_1A3AB4274()
{
  return MEMORY[0x1E0CAE8A8]();
}

uint64_t sub_1A3AB4280()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t sub_1A3AB428C()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t sub_1A3AB4298()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t sub_1A3AB42A4()
{
  return MEMORY[0x1E0CAE910]();
}

uint64_t sub_1A3AB42B0()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_1A3AB42BC()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_1A3AB42C8()
{
  return MEMORY[0x1E0CAFDB0]();
}

uint64_t sub_1A3AB42D4()
{
  return MEMORY[0x1E0CAFDE0]();
}

uint64_t sub_1A3AB42E0()
{
  return MEMORY[0x1E0CAFE08]();
}

uint64_t sub_1A3AB42EC()
{
  return MEMORY[0x1E0CAFE38]();
}

uint64_t sub_1A3AB42F8()
{
  return MEMORY[0x1E0CAFF00]();
}

uint64_t sub_1A3AB4304()
{
  return MEMORY[0x1E0CAFF30]();
}

uint64_t sub_1A3AB4310()
{
  return MEMORY[0x1E0CAFF90]();
}

uint64_t sub_1A3AB431C()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t sub_1A3AB4328()
{
  return MEMORY[0x1E0CB0088]();
}

uint64_t sub_1A3AB4334()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_1A3AB4340()
{
  return MEMORY[0x1E0CB07C8]();
}

uint64_t sub_1A3AB434C()
{
  return MEMORY[0x1E0CB07F8]();
}

uint64_t sub_1A3AB4358()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t sub_1A3AB4364()
{
  return MEMORY[0x1E0CB0910]();
}

uint64_t sub_1A3AB4370()
{
  return MEMORY[0x1E0CB0948]();
}

uint64_t sub_1A3AB437C()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t sub_1A3AB4388()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t sub_1A3AB4394()
{
  return MEMORY[0x1E0CB0A08]();
}

uint64_t sub_1A3AB43A0()
{
  return MEMORY[0x1E0CB0A20]();
}

uint64_t sub_1A3AB43AC()
{
  return MEMORY[0x1E0CB0A60]();
}

uint64_t sub_1A3AB43B8()
{
  return MEMORY[0x1E0CB0A70]();
}

uint64_t sub_1A3AB43C4()
{
  return MEMORY[0x1E0CB0A80]();
}

uint64_t sub_1A3AB43D0()
{
  return MEMORY[0x1E0CB0A90]();
}

uint64_t sub_1A3AB43DC()
{
  return MEMORY[0x1E0CB0AA8]();
}

uint64_t sub_1A3AB43E8()
{
  return MEMORY[0x1E0CB0AB8]();
}

uint64_t sub_1A3AB43F4()
{
  return MEMORY[0x1E0CB0AC0]();
}

uint64_t sub_1A3AB4400()
{
  return MEMORY[0x1E0CB0AC8]();
}

uint64_t sub_1A3AB440C()
{
  return MEMORY[0x1E0CB0AD0]();
}

uint64_t sub_1A3AB4418()
{
  return MEMORY[0x1E0CB0AD8]();
}

uint64_t sub_1A3AB4424()
{
  return MEMORY[0x1E0CB0AE8]();
}

uint64_t sub_1A3AB4430()
{
  return MEMORY[0x1E0CB0B18]();
}

uint64_t sub_1A3AB443C()
{
  return MEMORY[0x1E0CF2DD8]();
}

uint64_t sub_1A3AB4448()
{
  return MEMORY[0x1E0CF2DE0]();
}

uint64_t sub_1A3AB4454()
{
  return MEMORY[0x1E0CB0BD8]();
}

uint64_t sub_1A3AB4460()
{
  return MEMORY[0x1E0CB0BE0]();
}

uint64_t sub_1A3AB446C()
{
  return MEMORY[0x1E0CB0C20]();
}

uint64_t sub_1A3AB4478()
{
  return MEMORY[0x1E0CB0C30]();
}

uint64_t sub_1A3AB4484()
{
  return MEMORY[0x1E0CB0C40]();
}

uint64_t sub_1A3AB4490()
{
  return MEMORY[0x1E0CB0C48]();
}

uint64_t sub_1A3AB449C()
{
  return MEMORY[0x1E0CB0C78]();
}

uint64_t sub_1A3AB44A8()
{
  return MEMORY[0x1E0CB0C88]();
}

uint64_t sub_1A3AB44B4()
{
  return MEMORY[0x1E0CB0CB0]();
}

uint64_t sub_1A3AB44C0()
{
  return MEMORY[0x1E0CB0D10]();
}

uint64_t sub_1A3AB44CC()
{
  return MEMORY[0x1E0CB0D20]();
}

uint64_t sub_1A3AB44D8()
{
  return MEMORY[0x1E0CB0D28]();
}

uint64_t sub_1A3AB44E4()
{
  return MEMORY[0x1E0CB0D30]();
}

uint64_t sub_1A3AB44F0()
{
  return MEMORY[0x1E0CB0D58]();
}

uint64_t sub_1A3AB44FC()
{
  return MEMORY[0x1E0CB0D80]();
}

uint64_t sub_1A3AB4508()
{
  return MEMORY[0x1E0CB0DA8]();
}

uint64_t sub_1A3AB4514()
{
  return MEMORY[0x1E0CB0DB0]();
}

uint64_t sub_1A3AB4520()
{
  return MEMORY[0x1E0CB0DB8]();
}

uint64_t sub_1A3AB452C()
{
  return MEMORY[0x1E0CB0DF0]();
}

uint64_t sub_1A3AB4538()
{
  return MEMORY[0x1E0CB0E38]();
}

uint64_t sub_1A3AB4544()
{
  return MEMORY[0x1E0DEFD58]();
}

uint64_t sub_1A3AB4550()
{
  return MEMORY[0x1E0DEFD60]();
}

uint64_t sub_1A3AB455C()
{
  return MEMORY[0x1E0DEFD68]();
}

uint64_t sub_1A3AB4568()
{
  return MEMORY[0x1E0DEFD70]();
}

uint64_t sub_1A3AB4574()
{
  return MEMORY[0x1E0DEFD78]();
}

uint64_t sub_1A3AB4580()
{
  return MEMORY[0x1E0DEFD80]();
}

uint64_t sub_1A3AB458C()
{
  return MEMORY[0x1E0D20F00]();
}

uint64_t sub_1A3AB4598()
{
  return MEMORY[0x1E0CF2E00]();
}

uint64_t sub_1A3AB45A4()
{
  return MEMORY[0x1E0CF2E10]();
}

uint64_t sub_1A3AB45B0()
{
  return MEMORY[0x1E0CF2E18]();
}

uint64_t sub_1A3AB45BC()
{
  return MEMORY[0x1E0CF2E20]();
}

uint64_t sub_1A3AB45C8()
{
  return MEMORY[0x1E0CF2E28]();
}

uint64_t sub_1A3AB45D4()
{
  return MEMORY[0x1E0CF2E58]();
}

uint64_t sub_1A3AB45E0()
{
  return MEMORY[0x1E0CF2E90]();
}

uint64_t sub_1A3AB45EC()
{
  return MEMORY[0x1E0CF2EB8]();
}

uint64_t sub_1A3AB45F8()
{
  return MEMORY[0x1E0CF2EC8]();
}

uint64_t sub_1A3AB4604()
{
  return MEMORY[0x1E0CF2F10]();
}

uint64_t sub_1A3AB4610()
{
  return MEMORY[0x1E0CF2F58]();
}

uint64_t sub_1A3AB461C()
{
  return MEMORY[0x1E0CF2F78]();
}

uint64_t sub_1A3AB4628()
{
  return MEMORY[0x1E0CF2F80]();
}

uint64_t sub_1A3AB4634()
{
  return MEMORY[0x1E0CF2F88]();
}

uint64_t sub_1A3AB4640()
{
  return MEMORY[0x1E0CF2F90]();
}

uint64_t sub_1A3AB464C()
{
  return MEMORY[0x1E0CF2F98]();
}

uint64_t sub_1A3AB4658()
{
  return MEMORY[0x1E0CF2FB8]();
}

uint64_t sub_1A3AB4664()
{
  return MEMORY[0x1E0CF2FC0]();
}

uint64_t sub_1A3AB4670()
{
  return MEMORY[0x1E0CF2FC8]();
}

uint64_t sub_1A3AB467C()
{
  return MEMORY[0x1E0CF2FD0]();
}

uint64_t sub_1A3AB4688()
{
  return MEMORY[0x1E0CF2FD8]();
}

uint64_t sub_1A3AB4694()
{
  return MEMORY[0x1E0DF1EB8]();
}

uint64_t sub_1A3AB46A0()
{
  return MEMORY[0x1E0DF1F18]();
}

uint64_t sub_1A3AB46AC()
{
  return MEMORY[0x1E0DF1F28]();
}

uint64_t sub_1A3AB46B8()
{
  return MEMORY[0x1E0D12D98]();
}

uint64_t sub_1A3AB46C4()
{
  return MEMORY[0x1E0D12DA0]();
}

uint64_t sub_1A3AB46D0()
{
  return MEMORY[0x1E0D12DD0]();
}

uint64_t sub_1A3AB46DC()
{
  return MEMORY[0x1E0D12DD8]();
}

uint64_t sub_1A3AB46E8()
{
  return MEMORY[0x1E0D12DF8]();
}

uint64_t sub_1A3AB46F4()
{
  return MEMORY[0x1E0DF2078]();
}

uint64_t sub_1A3AB4700()
{
  return MEMORY[0x1E0DF2080]();
}

uint64_t sub_1A3AB470C()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t sub_1A3AB4718()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t sub_1A3AB4724()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t sub_1A3AB4730()
{
  return MEMORY[0x1E0DF2268]();
}

uint64_t sub_1A3AB473C()
{
  return MEMORY[0x1E0DEF3B8]();
}

uint64_t sub_1A3AB4748()
{
  return MEMORY[0x1E0C95ED8]();
}

uint64_t sub_1A3AB4754()
{
  return MEMORY[0x1E0C95F70]();
}

uint64_t sub_1A3AB4760()
{
  return MEMORY[0x1E0C95F78]();
}

uint64_t sub_1A3AB476C()
{
  return MEMORY[0x1E0C95FA8]();
}

uint64_t sub_1A3AB4778()
{
  return MEMORY[0x1E0C96150]();
}

uint64_t sub_1A3AB4784()
{
  return MEMORY[0x1E0C96158]();
}

uint64_t sub_1A3AB4790()
{
  return MEMORY[0x1E0C96160]();
}

uint64_t sub_1A3AB479C()
{
  return MEMORY[0x1E0C96168]();
}

uint64_t sub_1A3AB47A8()
{
  return MEMORY[0x1E0C96170]();
}

uint64_t sub_1A3AB47B4()
{
  return MEMORY[0x1E0C96178]();
}

uint64_t sub_1A3AB47C0()
{
  return MEMORY[0x1E0C96198]();
}

uint64_t sub_1A3AB47CC()
{
  return MEMORY[0x1E0C96410]();
}

uint64_t sub_1A3AB47D8()
{
  return MEMORY[0x1E0DEF4A8]();
}

uint64_t sub_1A3AB47E4()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t sub_1A3AB47F0()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t sub_1A3AB47FC()
{
  return MEMORY[0x1E0DEF588]();
}

uint64_t sub_1A3AB4808()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t sub_1A3AB4814()
{
  return MEMORY[0x1E0DEF698]();
}

uint64_t sub_1A3AB4820()
{
  return MEMORY[0x1E0DEF6A0]();
}

uint64_t sub_1A3AB482C()
{
  return MEMORY[0x1E0DEF6B8]();
}

uint64_t sub_1A3AB4838()
{
  return MEMORY[0x1E0DEF708]();
}

uint64_t sub_1A3AB4844()
{
  return MEMORY[0x1E0DEF728]();
}

uint64_t sub_1A3AB4850()
{
  return MEMORY[0x1E0DE9D70]();
}

uint64_t sub_1A3AB485C()
{
  return MEMORY[0x1E0DE9D78]();
}

uint64_t sub_1A3AB4868()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1A3AB4874()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t sub_1A3AB4880()
{
  return MEMORY[0x1E0DE9E40]();
}

uint64_t sub_1A3AB488C()
{
  return MEMORY[0x1E0DE9E78]();
}

uint64_t sub_1A3AB4898()
{
  return MEMORY[0x1E0DE9F78]();
}

uint64_t sub_1A3AB48A4()
{
  return MEMORY[0x1E0DEA040]();
}

uint64_t sub_1A3AB48B0()
{
  return MEMORY[0x1E0DEA048]();
}

uint64_t sub_1A3AB48BC()
{
  return MEMORY[0x1E0DEA0A8]();
}

uint64_t sub_1A3AB48C8()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t sub_1A3AB48D4()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_1A3AB48E0()
{
  return MEMORY[0x1E0DF1F70]();
}

uint64_t sub_1A3AB48EC()
{
  return MEMORY[0x1E0DF1F80]();
}

uint64_t sub_1A3AB48F8()
{
  return MEMORY[0x1E0DF1FA8]();
}

uint64_t sub_1A3AB4904()
{
  return MEMORY[0x1E0DEA338]();
}

uint64_t sub_1A3AB4910()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t sub_1A3AB491C()
{
  return MEMORY[0x1E0DEA3B8]();
}

uint64_t sub_1A3AB4928()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t sub_1A3AB4934()
{
  return MEMORY[0x1E0DEA3C8]();
}

uint64_t sub_1A3AB4940()
{
  return MEMORY[0x1E0DEA3D0]();
}

uint64_t sub_1A3AB494C()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_1A3AB4958()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1A3AB4964()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t sub_1A3AB4970()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t sub_1A3AB497C()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1A3AB4988()
{
  return MEMORY[0x1E0CB1988]();
}

uint64_t sub_1A3AB4994()
{
  return MEMORY[0x1E0CB1990]();
}

uint64_t sub_1A3AB49A0()
{
  return MEMORY[0x1E0CB19B0]();
}

uint64_t sub_1A3AB49AC()
{
  return MEMORY[0x1E0CB19C0]();
}

uint64_t sub_1A3AB49B8()
{
  return MEMORY[0x1E0CB19D0]();
}

uint64_t sub_1A3AB49C4()
{
  return MEMORY[0x1E0CB19E8]();
}

uint64_t sub_1A3AB49D0()
{
  return MEMORY[0x1E0CB1A18]();
}

uint64_t sub_1A3AB49DC()
{
  return MEMORY[0x1E0CB1A58]();
}

uint64_t sub_1A3AB49E8()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_1A3AB49F4()
{
  return MEMORY[0x1E0DEA610]();
}

uint64_t sub_1A3AB4A00()
{
  return MEMORY[0x1E0DEA630]();
}

uint64_t sub_1A3AB4A0C()
{
  return MEMORY[0x1E0DEA658]();
}

uint64_t sub_1A3AB4A18()
{
  return MEMORY[0x1E0DEA688]();
}

uint64_t sub_1A3AB4A24()
{
  return MEMORY[0x1E0DEA6F8]();
}

uint64_t sub_1A3AB4A30()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1A3AB4A3C()
{
  return MEMORY[0x1E0DEA770]();
}

uint64_t sub_1A3AB4A48()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t sub_1A3AB4A54()
{
  return MEMORY[0x1E0DEA7C0]();
}

uint64_t sub_1A3AB4A60()
{
  return MEMORY[0x1E0DEA7D8]();
}

uint64_t sub_1A3AB4A6C()
{
  return MEMORY[0x1E0DEA7F0]();
}

uint64_t sub_1A3AB4A78()
{
  return MEMORY[0x1E0DEA7F8]();
}

uint64_t sub_1A3AB4A84()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1A3AB4A90()
{
  return MEMORY[0x1E0DEA828]();
}

uint64_t sub_1A3AB4A9C()
{
  return MEMORY[0x1E0DEA830]();
}

uint64_t sub_1A3AB4AA8()
{
  return MEMORY[0x1E0DEA840]();
}

uint64_t sub_1A3AB4AB4()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1A3AB4AC0()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t sub_1A3AB4ACC()
{
  return MEMORY[0x1E0DEA878]();
}

uint64_t sub_1A3AB4AD8()
{
  return MEMORY[0x1E0DEA8C0]();
}

uint64_t sub_1A3AB4AE4()
{
  return MEMORY[0x1E0DEA8F8]();
}

uint64_t sub_1A3AB4AF0()
{
  return MEMORY[0x1E0DEA908]();
}

uint64_t sub_1A3AB4AFC()
{
  return MEMORY[0x1E0DEA940]();
}

uint64_t sub_1A3AB4B08()
{
  return MEMORY[0x1E0DEA948]();
}

uint64_t sub_1A3AB4B14()
{
  return MEMORY[0x1E0DEA958]();
}

uint64_t sub_1A3AB4B20()
{
  return MEMORY[0x1E0DEAA08]();
}

uint64_t sub_1A3AB4B2C()
{
  return MEMORY[0x1E0DEAA38]();
}

uint64_t sub_1A3AB4B38()
{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t sub_1A3AB4B44()
{
  return MEMORY[0x1E0DEAA58]();
}

uint64_t sub_1A3AB4B50()
{
  return MEMORY[0x1E0DEAAB0]();
}

uint64_t sub_1A3AB4B5C()
{
  return MEMORY[0x1E0DEAB08]();
}

uint64_t sub_1A3AB4B68()
{
  return MEMORY[0x1E0DEAB40]();
}

uint64_t sub_1A3AB4B74()
{
  return MEMORY[0x1E0DEAC88]();
}

uint64_t sub_1A3AB4B80()
{
  return MEMORY[0x1E0DEACA0]();
}

uint64_t sub_1A3AB4B8C()
{
  return MEMORY[0x1E0DEAD18]();
}

uint64_t sub_1A3AB4B98()
{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t sub_1A3AB4BA4()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_1A3AB4BB0()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_1A3AB4BBC()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t sub_1A3AB4BC8()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_1A3AB4BD4()
{
  return MEMORY[0x1E0DEADC8]();
}

uint64_t sub_1A3AB4BE0()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t sub_1A3AB4BEC()
{
  return MEMORY[0x1E0DEAE10]();
}

uint64_t sub_1A3AB4BF8()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_1A3AB4C04()
{
  return MEMORY[0x1E0DEAE38]();
}

uint64_t sub_1A3AB4C10()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t sub_1A3AB4C1C()
{
  return MEMORY[0x1E0DEAE60]();
}

uint64_t sub_1A3AB4C28()
{
  return MEMORY[0x1E0DEAE80]();
}

uint64_t sub_1A3AB4C34()
{
  return MEMORY[0x1E0DEAE98]();
}

uint64_t sub_1A3AB4C40()
{
  return MEMORY[0x1E0DEAEA0]();
}

uint64_t sub_1A3AB4C4C()
{
  return MEMORY[0x1E0DEAEB8]();
}

uint64_t sub_1A3AB4C58()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t sub_1A3AB4C64()
{
  return MEMORY[0x1E0DEAEF0]();
}

uint64_t sub_1A3AB4C70()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t sub_1A3AB4C7C()
{
  return MEMORY[0x1E0DF05D0]();
}

uint64_t sub_1A3AB4C88()
{
  return MEMORY[0x1E0DF05E0]();
}

uint64_t sub_1A3AB4C94()
{
  return MEMORY[0x1E0DF05F0]();
}

uint64_t sub_1A3AB4CA0()
{
  return MEMORY[0x1E0DF0600]();
}

uint64_t sub_1A3AB4CAC()
{
  return MEMORY[0x1E0DF0688]();
}

uint64_t sub_1A3AB4CB8()
{
  return MEMORY[0x1E0DF06B8]();
}

uint64_t sub_1A3AB4CC4()
{
  return MEMORY[0x1E0DF06D0]();
}

uint64_t sub_1A3AB4CD0()
{
  return MEMORY[0x1E0DF06D8]();
}

uint64_t sub_1A3AB4CDC()
{
  return MEMORY[0x1E0DF06E0]();
}

uint64_t sub_1A3AB4CE8()
{
  return MEMORY[0x1E0DF0730]();
}

uint64_t sub_1A3AB4CF4()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t sub_1A3AB4D00()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t sub_1A3AB4D0C()
{
  return MEMORY[0x1E0DF0770]();
}

uint64_t sub_1A3AB4D18()
{
  return MEMORY[0x1E0DF0790]();
}

uint64_t sub_1A3AB4D24()
{
  return MEMORY[0x1E0DF07A0]();
}

uint64_t sub_1A3AB4D30()
{
  return MEMORY[0x1E0DF07C0]();
}

uint64_t sub_1A3AB4D3C()
{
  return MEMORY[0x1E0DF07D8]();
}

uint64_t sub_1A3AB4D48()
{
  return MEMORY[0x1E0DF07E0]();
}

uint64_t sub_1A3AB4D54()
{
  return MEMORY[0x1E0DF07E8]();
}

uint64_t sub_1A3AB4D60()
{
  return MEMORY[0x1E0CF3018]();
}

uint64_t sub_1A3AB4D6C()
{
  return MEMORY[0x1E0DF07F8]();
}

uint64_t sub_1A3AB4D78()
{
  return MEMORY[0x1E0DF0800]();
}

uint64_t sub_1A3AB4D84()
{
  return MEMORY[0x1E0DF0820]();
}

uint64_t sub_1A3AB4D90()
{
  return MEMORY[0x1E0DF0838]();
}

uint64_t sub_1A3AB4D9C()
{
  return MEMORY[0x1E0DF0840]();
}

uint64_t sub_1A3AB4DA8()
{
  return MEMORY[0x1E0DF0850]();
}

uint64_t sub_1A3AB4DB4()
{
  return MEMORY[0x1E0DF0870]();
}

uint64_t sub_1A3AB4DC0()
{
  return MEMORY[0x1E0DF0878]();
}

uint64_t sub_1A3AB4DCC()
{
  return MEMORY[0x1E0DF08B8]();
}

uint64_t sub_1A3AB4DD8()
{
  return MEMORY[0x1E0DF08C8]();
}

uint64_t sub_1A3AB4DE4()
{
  return MEMORY[0x1E0DF0918]();
}

uint64_t sub_1A3AB4DF0()
{
  return MEMORY[0x1E0DF0928]();
}

uint64_t sub_1A3AB4DFC()
{
  return MEMORY[0x1E0DF0930]();
}

uint64_t sub_1A3AB4E08()
{
  return MEMORY[0x1E0DF0938]();
}

uint64_t sub_1A3AB4E14()
{
  return MEMORY[0x1E0DF09D0]();
}

uint64_t sub_1A3AB4E20()
{
  return MEMORY[0x1E0DF09F8]();
}

uint64_t sub_1A3AB4E2C()
{
  return MEMORY[0x1E0DF0A28]();
}

uint64_t sub_1A3AB4E38()
{
  return MEMORY[0x1E0DF0A30]();
}

uint64_t sub_1A3AB4E44()
{
  return MEMORY[0x1E0DF0A58]();
}

uint64_t sub_1A3AB4E50()
{
  return MEMORY[0x1E0DF0A68]();
}

uint64_t sub_1A3AB4E5C()
{
  return MEMORY[0x1E0DF0A70]();
}

uint64_t sub_1A3AB4E68()
{
  return MEMORY[0x1E0DF0A78]();
}

uint64_t sub_1A3AB4E74()
{
  return MEMORY[0x1E0DF0A88]();
}

uint64_t sub_1A3AB4E80()
{
  return MEMORY[0x1E0DF0A90]();
}

uint64_t sub_1A3AB4E8C()
{
  return MEMORY[0x1E0DF0AD0]();
}

uint64_t sub_1A3AB4E98()
{
  return MEMORY[0x1E0DF0AD8]();
}

uint64_t sub_1A3AB4EA4()
{
  return MEMORY[0x1E0DEB030]();
}

uint64_t sub_1A3AB4EB0()
{
  return MEMORY[0x1E0DEB160]();
}

uint64_t sub_1A3AB4EBC()
{
  return MEMORY[0x1E0CB1BB0]();
}

uint64_t sub_1A3AB4EC8()
{
  return MEMORY[0x1E0DEB220]();
}

uint64_t sub_1A3AB4ED4()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t sub_1A3AB4EE0()
{
  return MEMORY[0x1E0DEB2E8]();
}

uint64_t sub_1A3AB4EEC()
{
  return MEMORY[0x1E0DEB2F0]();
}

uint64_t sub_1A3AB4EF8()
{
  return MEMORY[0x1E0DEB2F8]();
}

uint64_t sub_1A3AB4F04()
{
  return MEMORY[0x1E0DEB310]();
}

uint64_t sub_1A3AB4F10()
{
  return MEMORY[0x1E0DEB380]();
}

uint64_t sub_1A3AB4F1C()
{
  return MEMORY[0x1E0DEB388]();
}

uint64_t sub_1A3AB4F28()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t sub_1A3AB4F34()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t sub_1A3AB4F40()
{
  return MEMORY[0x1E0DEB590]();
}

uint64_t sub_1A3AB4F4C()
{
  return MEMORY[0x1E0DEB5A8]();
}

uint64_t sub_1A3AB4F58()
{
  return MEMORY[0x1E0DEB5B0]();
}

uint64_t sub_1A3AB4F64()
{
  return MEMORY[0x1E0DEB5C8]();
}

uint64_t sub_1A3AB4F70()
{
  return MEMORY[0x1E0DEB620]();
}

uint64_t sub_1A3AB4F7C()
{
  return MEMORY[0x1E0DEB660]();
}

uint64_t sub_1A3AB4F88()
{
  return MEMORY[0x1E0DEB6D0]();
}

uint64_t sub_1A3AB4F94()
{
  return MEMORY[0x1E0DEB808]();
}

uint64_t sub_1A3AB4FA0()
{
  return MEMORY[0x1E0CB1C58]();
}

uint64_t sub_1A3AB4FAC()
{
  return MEMORY[0x1E0DEFC38]();
}

uint64_t sub_1A3AB4FB8()
{
  return MEMORY[0x1E0DF2270]();
}

uint64_t sub_1A3AB4FC4()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t sub_1A3AB4FD0()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_1A3AB4FDC()
{
  return MEMORY[0x1E0DF2288]();
}

uint64_t sub_1A3AB4FE8()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t sub_1A3AB4FF4()
{
  return MEMORY[0x1E0DEF800]();
}

uint64_t sub_1A3AB5000()
{
  return MEMORY[0x1E0DEF810]();
}

uint64_t sub_1A3AB500C()
{
  return MEMORY[0x1E0DEF8E0]();
}

uint64_t sub_1A3AB5018()
{
  return MEMORY[0x1E0DEF8E8]();
}

uint64_t sub_1A3AB5024()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t sub_1A3AB5030()
{
  return MEMORY[0x1E0DEF910]();
}

uint64_t sub_1A3AB503C()
{
  return MEMORY[0x1E0DEF930]();
}

uint64_t sub_1A3AB5048()
{
  return MEMORY[0x1E0DEF938]();
}

uint64_t sub_1A3AB5054()
{
  return MEMORY[0x1E0DEF978]();
}

uint64_t sub_1A3AB5060()
{
  return MEMORY[0x1E0DEF9F8]();
}

uint64_t sub_1A3AB506C()
{
  return MEMORY[0x1E0DEFA18]();
}

uint64_t sub_1A3AB5078()
{
  return MEMORY[0x1E0DEFA20]();
}

uint64_t sub_1A3AB5084()
{
  return MEMORY[0x1E0DEFC58]();
}

uint64_t sub_1A3AB5090()
{
  return MEMORY[0x1E0DEFA68]();
}

uint64_t sub_1A3AB509C()
{
  return MEMORY[0x1E0DEFA70]();
}

uint64_t sub_1A3AB50A8()
{
  return MEMORY[0x1E0DEFAA8]();
}

uint64_t sub_1A3AB50B4()
{
  return MEMORY[0x1E0CB20D0]();
}

uint64_t sub_1A3AB50C0()
{
  return MEMORY[0x1E0DEFCD8]();
}

uint64_t sub_1A3AB50CC()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t sub_1A3AB50D8()
{
  return MEMORY[0x1E0DEFCE8]();
}

uint64_t sub_1A3AB50E4()
{
  return MEMORY[0x1E0CB2190]();
}

uint64_t sub_1A3AB50F0()
{
  return MEMORY[0x1E0DF22E0]();
}

uint64_t sub_1A3AB50FC()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_1A3AB5108()
{
  return MEMORY[0x1E0DEBAD8]();
}

uint64_t sub_1A3AB5114()
{
  return MEMORY[0x1E0DEBB58]();
}

uint64_t sub_1A3AB5120()
{
  return MEMORY[0x1E0DEBB60]();
}

uint64_t sub_1A3AB512C()
{
  return MEMORY[0x1E0DEBB68]();
}

uint64_t sub_1A3AB5138()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_1A3AB5144()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_1A3AB5150()
{
  return MEMORY[0x1E0CB2430]();
}

uint64_t sub_1A3AB515C()
{
  return MEMORY[0x1E0CB2458]();
}

uint64_t sub_1A3AB5168()
{
  return MEMORY[0x1E0CB2480]();
}

uint64_t sub_1A3AB5174()
{
  return MEMORY[0x1E0CB24A8]();
}

uint64_t sub_1A3AB5180()
{
  return MEMORY[0x1E0CB24D8]();
}

uint64_t sub_1A3AB518C()
{
  return MEMORY[0x1E0CB2578]();
}

uint64_t sub_1A3AB5198()
{
  return MEMORY[0x1E0CB2588]();
}

uint64_t sub_1A3AB51A4()
{
  return MEMORY[0x1E0DEBCE8]();
}

uint64_t sub_1A3AB51B0()
{
  return MEMORY[0x1E0DEBF30]();
}

uint64_t sub_1A3AB51BC()
{
  return MEMORY[0x1E0DEBF58]();
}

uint64_t sub_1A3AB51C8()
{
  return MEMORY[0x1E0DEBFC0]();
}

uint64_t sub_1A3AB51D4()
{
  return MEMORY[0x1E0DEBFC8]();
}

uint64_t sub_1A3AB51E0()
{
  return MEMORY[0x1E0DEBFD0]();
}

uint64_t sub_1A3AB51EC()
{
  return MEMORY[0x1E0DEBFF8]();
}

uint64_t sub_1A3AB51F8()
{
  return MEMORY[0x1E0DEC008]();
}

uint64_t sub_1A3AB5204()
{
  return MEMORY[0x1E0DEC010]();
}

uint64_t sub_1A3AB5210()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t sub_1A3AB521C()
{
  return MEMORY[0x1E0DEC058]();
}

uint64_t sub_1A3AB5228()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t sub_1A3AB5234()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t sub_1A3AB5240()
{
  return MEMORY[0x1E0DEC0B0]();
}

uint64_t sub_1A3AB524C()
{
  return MEMORY[0x1E0DEC0E0]();
}

uint64_t sub_1A3AB5258()
{
  return MEMORY[0x1E0DEC110]();
}

uint64_t sub_1A3AB5264()
{
  return MEMORY[0x1E0DEC168]();
}

uint64_t sub_1A3AB5270()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_1A3AB527C()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_1A3AB5288()
{
  return MEMORY[0x1E0DEC260]();
}

uint64_t sub_1A3AB5294()
{
  return MEMORY[0x1E0DEC268]();
}

uint64_t sub_1A3AB52A0()
{
  return MEMORY[0x1E0DEC280]();
}

uint64_t sub_1A3AB52AC()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_1A3AB52B8()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1A3AB52C4()
{
  return MEMORY[0x1E0DEC3D8]();
}

uint64_t sub_1A3AB52D0()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_1A3AB52DC()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t sub_1A3AB52E8()
{
  return MEMORY[0x1E0DEC470]();
}

uint64_t sub_1A3AB52F4()
{
  return MEMORY[0x1E0DEC498]();
}

uint64_t sub_1A3AB5300()
{
  return MEMORY[0x1E0DEC508]();
}

uint64_t sub_1A3AB530C()
{
  return MEMORY[0x1E0DEC530]();
}

uint64_t sub_1A3AB5318()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1A3AB5324()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t sub_1A3AB5330()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t sub_1A3AB533C()
{
  return MEMORY[0x1E0DEC680]();
}

uint64_t sub_1A3AB5348()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t sub_1A3AB5354()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t sub_1A3AB5360()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t sub_1A3AB536C()
{
  return MEMORY[0x1E0DEC6E0]();
}

uint64_t sub_1A3AB5378()
{
  return MEMORY[0x1E0DEC700]();
}

uint64_t sub_1A3AB5384()
{
  return MEMORY[0x1E0DEC708]();
}

uint64_t sub_1A3AB5390()
{
  return MEMORY[0x1E0DF0B60]();
}

uint64_t sub_1A3AB539C()
{
  return MEMORY[0x1E0DF0B98]();
}

uint64_t sub_1A3AB53A8()
{
  return MEMORY[0x1E0DF0BA0]();
}

uint64_t sub_1A3AB53B4()
{
  return MEMORY[0x1E0DEC7D0]();
}

uint64_t sub_1A3AB53C0()
{
  return MEMORY[0x1E0DEC888]();
}

uint64_t sub_1A3AB53CC()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t sub_1A3AB53D8()
{
  return MEMORY[0x1E0DEC950]();
}

uint64_t sub_1A3AB53E4()
{
  return MEMORY[0x1E0DEC958]();
}

uint64_t sub_1A3AB53F0()
{
  return MEMORY[0x1E0DEC960]();
}

uint64_t sub_1A3AB53FC()
{
  return MEMORY[0x1E0DEC968]();
}

uint64_t sub_1A3AB5408()
{
  return MEMORY[0x1E0DECB40]();
}

uint64_t sub_1A3AB5414()
{
  return MEMORY[0x1E0DECB80]();
}

uint64_t sub_1A3AB5420()
{
  return MEMORY[0x1E0DECBA8]();
}

uint64_t sub_1A3AB542C()
{
  return MEMORY[0x1E0DECBB8]();
}

uint64_t sub_1A3AB5438()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_1A3AB5444()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_1A3AB5450()
{
  return MEMORY[0x1E0DECC38]();
}

uint64_t sub_1A3AB545C()
{
  return MEMORY[0x1E0DECC40]();
}

uint64_t sub_1A3AB5468()
{
  return MEMORY[0x1E0DECC48]();
}

uint64_t sub_1A3AB5474()
{
  return MEMORY[0x1E0DECC58]();
}

uint64_t sub_1A3AB5480()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_1A3AB548C()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1A3AB5498()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1A3AB54A4()
{
  return MEMORY[0x1E0DECD48]();
}

uint64_t sub_1A3AB54B0()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1A3AB54BC()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_1A3AB54C8()
{
  return MEMORY[0x1E0DECD90]();
}

uint64_t sub_1A3AB54D4()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t sub_1A3AB54E0()
{
  return MEMORY[0x1E0DECF28]();
}

uint64_t sub_1A3AB54EC()
{
  return MEMORY[0x1E0DECF38]();
}

uint64_t sub_1A3AB54F8()
{
  return MEMORY[0x1E0DECF40]();
}

uint64_t sub_1A3AB5504()
{
  return MEMORY[0x1E0DECF58]();
}

uint64_t sub_1A3AB5510()
{
  return MEMORY[0x1E0DECF88]();
}

uint64_t sub_1A3AB551C()
{
  return MEMORY[0x1E0DECFC0]();
}

uint64_t sub_1A3AB5528()
{
  return MEMORY[0x1E0DECFC8]();
}

uint64_t sub_1A3AB5534()
{
  return MEMORY[0x1E0DECFD8]();
}

uint64_t sub_1A3AB5540()
{
  return MEMORY[0x1E0DECFE0]();
}

uint64_t sub_1A3AB554C()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t sub_1A3AB5558()
{
  return MEMORY[0x1E0DED008]();
}

uint64_t sub_1A3AB5564()
{
  return MEMORY[0x1E0DED028]();
}

uint64_t sub_1A3AB5570()
{
  return MEMORY[0x1E0DED038]();
}

uint64_t sub_1A3AB557C()
{
  return MEMORY[0x1E0DED048]();
}

uint64_t sub_1A3AB5588()
{
  return MEMORY[0x1E0DED070]();
}

uint64_t sub_1A3AB5594()
{
  return MEMORY[0x1E0DED090]();
}

uint64_t sub_1A3AB55A0()
{
  return MEMORY[0x1E0DED0C0]();
}

uint64_t sub_1A3AB55AC()
{
  return MEMORY[0x1E0DED0F0]();
}

uint64_t sub_1A3AB55B8()
{
  return MEMORY[0x1E0DED0F8]();
}

uint64_t sub_1A3AB55C4()
{
  return MEMORY[0x1E0DED108]();
}

uint64_t sub_1A3AB55D0()
{
  return MEMORY[0x1E0DED110]();
}

uint64_t sub_1A3AB55DC()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t sub_1A3AB55E8()
{
  return MEMORY[0x1E0DED138]();
}

uint64_t sub_1A3AB55F4()
{
  return MEMORY[0x1E0DED158]();
}

uint64_t sub_1A3AB5600()
{
  return MEMORY[0x1E0DED170]();
}

uint64_t sub_1A3AB560C()
{
  return MEMORY[0x1E0DED1A0]();
}

uint64_t sub_1A3AB5618()
{
  return MEMORY[0x1E0DED1B0]();
}

uint64_t sub_1A3AB5624()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1A3AB5630()
{
  return MEMORY[0x1E0DF0DD0]();
}

uint64_t sub_1A3AB563C()
{
  return MEMORY[0x1E0DED4A0]();
}

uint64_t sub_1A3AB5648()
{
  return MEMORY[0x1E0DED548]();
}

uint64_t sub_1A3AB5654()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1A3AB5660()
{
  return MEMORY[0x1E0DF0E78]();
}

uint64_t sub_1A3AB566C()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_1A3AB5678()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1A3AB5684()
{
  return MEMORY[0x1E0DF0EE8]();
}

uint64_t sub_1A3AB5690()
{
  return MEMORY[0x1E0DF0EF0]();
}

uint64_t sub_1A3AB569C()
{
  return MEMORY[0x1E0CB2650]();
}

uint64_t sub_1A3AB56A8()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_1A3AB56B4()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_1A3AB56C0()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_1A3AB56CC()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_1A3AB56D8()
{
  return MEMORY[0x1E0DEDED8]();
}

uint64_t sub_1A3AB56E4()
{
  return MEMORY[0x1E0DEDEE0]();
}

uint64_t sub_1A3AB56F0()
{
  return MEMORY[0x1E0DEDEF0]();
}

uint64_t sub_1A3AB56FC()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1A3AB5708()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1A3AB5714()
{
  return MEMORY[0x1E0DEDF18]();
}

uint64_t sub_1A3AB5720()
{
  return MEMORY[0x1E0DEDF28]();
}

uint64_t sub_1A3AB572C()
{
  return MEMORY[0x1E0DEDF30]();
}

uint64_t sub_1A3AB5738()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_1A3AB5744()
{
  return MEMORY[0x1E0DEDF80]();
}

uint64_t sub_1A3AB5750()
{
  return MEMORY[0x1E0DEDFF8]();
}

uint64_t sub_1A3AB575C()
{
  return MEMORY[0x1E0DEE000]();
}

uint64_t sub_1A3AB5768()
{
  return MEMORY[0x1E0DEE030]();
}

uint64_t sub_1A3AB5774()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t sub_1A3AB5780()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t sub_1A3AB578C()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t sub_1A3AB5798()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t sub_1A3AB57A4()
{
  return MEMORY[0x1E0DEE8F8]();
}

uint64_t ATAudioProcessingNodeDispose()
{
  return MEMORY[0x1E0C91E10]();
}

uint64_t ATAudioProcessingNodeInstantiate()
{
  return MEMORY[0x1E0C91E18]();
}

uint64_t ATAudioProcessingNodeSetParameter()
{
  return MEMORY[0x1E0C91E28]();
}

uint64_t ATAudioProcessingNodeSetProperty()
{
  return MEMORY[0x1E0C91E30]();
}

uint64_t AXCFormattedString()
{
  return MEMORY[0x1E0CF3058]();
}

uint64_t AXCLanguageCanonicalFormToGeneralLanguage()
{
  return MEMORY[0x1E0CF3060]();
}

uint64_t AXCLanguageConvertToCanonicalForm()
{
  return MEMORY[0x1E0CF3070]();
}

uint64_t AXCRemapLanguageCodeToFallbackIfNeccessary()
{
  return MEMORY[0x1E0CF3078]();
}

uint64_t AXCUProcessIsAXUIServer()
{
  return MEMORY[0x1E0CF3080]();
}

uint64_t AXCUProcessIsPreferences()
{
  return MEMORY[0x1E0CF3098]();
}

uint64_t AXDeviceIsJ42()
{
  return MEMORY[0x1E0CF30F8]();
}

uint64_t AXDeviceSupportsVoiceBankingSpeech()
{
  return MEMORY[0x1E0CF3148]();
}

uint64_t AXLogCommon()
{
  return MEMORY[0x1E0CF31F8]();
}

uint64_t AXLogSpeechAssetDownload()
{
  return MEMORY[0x1E0CF32B8]();
}

uint64_t AXLogSpeechSynthesis()
{
  return MEMORY[0x1E0CF32C0]();
}

uint64_t AXNSLocalizedStringForLocale()
{
  return MEMORY[0x1E0DDD478]();
}

uint64_t AXPerformBlockAsynchronouslyOnMainThread()
{
  return MEMORY[0x1E0CF33D8]();
}

uint64_t AXProcessIsAXAssetsd()
{
  return MEMORY[0x1E0CF3408]();
}

uint64_t AXProcessIsAxctl()
{
  return MEMORY[0x1E0CF3420]();
}

uint64_t AXProcessIsLiveSpeech()
{
  return MEMORY[0x1E0CF3440]();
}

uint64_t AXProcessIsVoicebankingd()
{
  return MEMORY[0x1E0CF3478]();
}

uint64_t AXProcessMacOSSettingsExtension()
{
  return MEMORY[0x1E0CF3480]();
}

uint64_t AXRuntimeCheck_MauiSSEOnly()
{
  return MEMORY[0x1E0CF3490]();
}

uint64_t AXRuntimeCheck_SiriSSEOnly()
{
  return MEMORY[0x1E0CF34A8]();
}

uint64_t AXRuntimeCheck_VoiceOverSupportsNeuralVoices()
{
  return MEMORY[0x1E0CF34D0]();
}

uint64_t AXSAccessibilityUtilitiesPath()
{
  return MEMORY[0x1E0DDD488]();
}

uint64_t AXSetThreadPriority()
{
  return MEMORY[0x1E0CF37C0]();
}

uint64_t AXSystemRootDirectory()
{
  return MEMORY[0x1E0CF37F8]();
}

uint64_t AXTTSLogCommon()
{
  return MEMORY[0x1E0CF3800]();
}

uint64_t AXTTSLogRange()
{
  return MEMORY[0x1E0CF3810]();
}

uint64_t AXTTSLogResourceManager()
{
  return MEMORY[0x1E0CF3818]();
}

uint64_t AXTTSLogResourceMigration()
{
  return MEMORY[0x1E0CF3820]();
}

uint64_t AX_PERFORM_WITH_LOCK()
{
  return MEMORY[0x1E0CF38E8]();
}

OSStatus AudioComponentGetDescription(AudioComponent inComponent, AudioComponentDescription *outDesc)
{
  return MEMORY[0x1E0CFF3F0](inComponent, outDesc);
}

AudioComponent AudioComponentInstanceGetComponent(AudioComponentInstance inInstance)
{
  return (AudioComponent)MEMORY[0x1E0CFF410](inInstance);
}

AudioComponent AudioComponentRegister(const AudioComponentDescription *inDesc, CFStringRef inName, UInt32 inVersion, AudioComponentFactoryFunction inFactory)
{
  return (AudioComponent)MEMORY[0x1E0CFF428](inDesc, inName, *(_QWORD *)&inVersion, inFactory);
}

OSStatus AudioQueueAddPropertyListener(AudioQueueRef inAQ, AudioQueuePropertyID inID, AudioQueuePropertyListenerProc inProc, void *inUserData)
{
  return MEMORY[0x1E0C91FF0](inAQ, *(_QWORD *)&inID, inProc, inUserData);
}

OSStatus AudioQueueAllocateBuffer(AudioQueueRef inAQ, UInt32 inBufferByteSize, AudioQueueBufferRef *outBuffer)
{
  return MEMORY[0x1E0C91FF8](inAQ, *(_QWORD *)&inBufferByteSize, outBuffer);
}

OSStatus AudioQueueDispose(AudioQueueRef inAQ, Boolean inImmediate)
{
  return MEMORY[0x1E0C92030](inAQ, inImmediate);
}

OSStatus AudioQueueEnqueueBuffer(AudioQueueRef inAQ, AudioQueueBufferRef inBuffer, UInt32 inNumPacketDescs, const AudioStreamPacketDescription *inPacketDescs)
{
  return MEMORY[0x1E0C92038](inAQ, inBuffer, *(_QWORD *)&inNumPacketDescs, inPacketDescs);
}

OSStatus AudioQueueEnqueueBufferWithParameters(AudioQueueRef inAQ, AudioQueueBufferRef inBuffer, UInt32 inNumPacketDescs, const AudioStreamPacketDescription *inPacketDescs, UInt32 inTrimFramesAtStart, UInt32 inTrimFramesAtEnd, UInt32 inNumParamValues, const AudioQueueParameterEvent *inParamValues, const AudioTimeStamp *inStartTime, AudioTimeStamp *outActualStartTime)
{
  return MEMORY[0x1E0C92040](inAQ, inBuffer, *(_QWORD *)&inNumPacketDescs, inPacketDescs, *(_QWORD *)&inTrimFramesAtStart, *(_QWORD *)&inTrimFramesAtEnd, *(_QWORD *)&inNumParamValues, inParamValues);
}

OSStatus AudioQueueFlush(AudioQueueRef inAQ)
{
  return MEMORY[0x1E0C92050](inAQ);
}

OSStatus AudioQueueFreeBuffer(AudioQueueRef inAQ, AudioQueueBufferRef inBuffer)
{
  return MEMORY[0x1E0C92058](inAQ, inBuffer);
}

OSStatus AudioQueueGetProperty(AudioQueueRef inAQ, AudioQueuePropertyID inID, void *outData, UInt32 *ioDataSize)
{
  return MEMORY[0x1E0C92070](inAQ, *(_QWORD *)&inID, outData, ioDataSize);
}

uint64_t AudioQueueNewOutputWithAudioSession()
{
  return MEMORY[0x1E0C920A0]();
}

OSStatus AudioQueuePause(AudioQueueRef inAQ)
{
  return MEMORY[0x1E0C920A8](inAQ);
}

OSStatus AudioQueueRemovePropertyListener(AudioQueueRef inAQ, AudioQueuePropertyID inID, AudioQueuePropertyListenerProc inProc, void *inUserData)
{
  return MEMORY[0x1E0C920E0](inAQ, *(_QWORD *)&inID, inProc, inUserData);
}

OSStatus AudioQueueReset(AudioQueueRef inAQ)
{
  return MEMORY[0x1E0C920E8](inAQ);
}

OSStatus AudioQueueSetProperty(AudioQueueRef inAQ, AudioQueuePropertyID inID, const void *inData, UInt32 inDataSize)
{
  return MEMORY[0x1E0C92100](inAQ, *(_QWORD *)&inID, inData, *(_QWORD *)&inDataSize);
}

OSStatus AudioQueueStart(AudioQueueRef inAQ, const AudioTimeStamp *inStartTime)
{
  return MEMORY[0x1E0C92108](inAQ, inStartTime);
}

OSStatus AudioQueueStop(AudioQueueRef inAQ, Boolean inImmediate)
{
  return MEMORY[0x1E0C92118](inAQ, inImmediate);
}

OSStatus AudioUnitGetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, void *outData, UInt32 *ioDataSize)
{
  return MEMORY[0x1E0CFF5A8](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, outData, ioDataSize);
}

OSStatus AudioUnitRender(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inOutputBusNumber, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  return MEMORY[0x1E0CFF5E0](inUnit, ioActionFlags, inTimeStamp, *(_QWORD *)&inOutputBusNumber, *(_QWORD *)&inNumberFrames, ioData);
}

OSStatus AudioUnitSetParameter(AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue inValue, UInt32 inBufferOffsetInFrames)
{
  return MEMORY[0x1E0CFF5F8](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, *(_QWORD *)&inBufferOffsetInFrames, inValue);
}

OSStatus AudioUnitSetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, const void *inData, UInt32 inDataSize)
{
  return MEMORY[0x1E0CFF600](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, inData, *(_QWORD *)&inDataSize);
}

uint64_t CEMCreateEmojiLocaleData()
{
  return MEMORY[0x1E0D15CE8]();
}

uint64_t CEMEmojiTokenCopyName()
{
  return MEMORY[0x1E0D15D28]();
}

uint64_t CEMEnumerateEmojiTokensInStringWithBlock()
{
  return MEMORY[0x1E0D15DA8]();
}

uint64_t CEMEnumerateEmojiTokensInStringWithLocaleAndBlock()
{
  return MEMORY[0x1E0D15DB0]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x1E0C98390](theData, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x1E0C98658](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
  MEMORY[0x1E0C988F0](center, observer);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopStop(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D00](rl);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

CFStringRef CFStringTokenizerCopyBestStringLanguage(CFStringRef string, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99210](string, range.location, range.length);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B28]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B48]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x1E0DE2B60]();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return MEMORY[0x1E0D4E4A0]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB2C58](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB3400](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

uint64_t TCCAccessPreflight()
{
  return MEMORY[0x1E0DB0FF8]();
}

uint64_t TCCAccessRequest()
{
  return MEMORY[0x1E0DB1010]();
}

uint64_t TCCAccessRestricted()
{
  return MEMORY[0x1E0DB1050]();
}

uint64_t VOTLogSpeech()
{
  return MEMORY[0x1E0CF3A30]();
}

uint64_t _AXSAssistiveTouchScannerEnabled()
{
  return MEMORY[0x1E0DDD590]();
}

uint64_t _AXSInUnitTestMode()
{
  return MEMORY[0x1E0DDD978]();
}

uint64_t _AXSSpeechSynthesisOptions()
{
  return MEMORY[0x1E0DDDD10]();
}

uint64_t _AXSVoiceOverTouchEnabled()
{
  return MEMORY[0x1E0DDDDE8]();
}

uint64_t _AXSVoiceOverTouchSpeakingRate()
{
  return MEMORY[0x1E0DDDE90]();
}

uint64_t _AXSVoiceOverTouchVolume()
{
  return MEMORY[0x1E0DDDEB8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4328](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x1E0DE4340](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
  MEMORY[0x1E0DE4820](this);
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
  MEMORY[0x1E0DE4828](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x1E0DE4838](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x1E0DE4DB0](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E4A95390();
}

void operator delete(void *__p)
{
  off_1E4A95398(__p);
}

uint64_t operator delete()
{
  return off_1E4A953A0();
}

uint64_t operator new[]()
{
  return off_1E4A953A8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E4A953B0(__sz);
}

uint64_t operator new()
{
  return off_1E4A953B8();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

float __exp10f(float a1)
{
  float result;

  MEMORY[0x1E0C80AD0](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

uint64_t __memmove_chk()
{
  return MEMORY[0x1E0C80B70]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x1E0DE7960]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x1E0DE7970]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1E0DEEA28]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return MEMORY[0x1E0DEEA58]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

uint64_t archive_entry_pathname()
{
  return MEMORY[0x1E0DE3DD8]();
}

uint64_t archive_error_string()
{
  return MEMORY[0x1E0DE3E60]();
}

uint64_t archive_read_add_passphrase()
{
  return MEMORY[0x1E0DE3E68]();
}

uint64_t archive_read_data_block()
{
  return MEMORY[0x1E0DE3E88]();
}

uint64_t archive_read_free()
{
  return MEMORY[0x1E0DE3EF8]();
}

uint64_t archive_read_new()
{
  return MEMORY[0x1E0DE3F00]();
}

uint64_t archive_read_next_header()
{
  return MEMORY[0x1E0DE3F08]();
}

uint64_t archive_read_open_filename()
{
  return MEMORY[0x1E0DE3F28]();
}

uint64_t archive_read_support_format_zip()
{
  return MEMORY[0x1E0DE3F90]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

float cbrtf(float a1)
{
  float result;

  MEMORY[0x1E0C81858](a1);
  return result;
}

float cosf(float a1)
{
  float result;

  MEMORY[0x1E0C82B48](a1);
  return result;
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
  MEMORY[0x1E0C82BD8](iterations, queue, block);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x1E0C83290](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

float log10f(float a1)
{
  float result;

  MEMORY[0x1E0C83BC8](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

mach_port_t mach_thread_self(void)
{
  return MEMORY[0x1E0C83DB0]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1E0C84400](name, out_token);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1E0C84428](*(_QWORD *)&token, state64);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)((uint64_t (*)(id, SEL))MEMORY[0x1E0DE7D20])(a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x1E0C849A8](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

objc_method_description *__cdecl protocol_copyMethodDescriptionList(Protocol *p, BOOL isRequiredMethod, BOOL isInstanceMethod, unsigned int *outCount)
{
  return (objc_method_description *)MEMORY[0x1E0DE8088](p, isRequiredMethod, isInstanceMethod, outCount);
}

int pthread_getschedparam(pthread_t a1, int *a2, sched_param *a3)
{
  return MEMORY[0x1E0C84DB8](a1, a2, a3);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return MEMORY[0x1E0C84E00](a1);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1E0C84E68](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_setschedparam(pthread_t a1, int a2, const sched_param *a3)
{
  return MEMORY[0x1E0C84F10](a1, *(_QWORD *)&a2, a3);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1E0DE85A0](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE85D8](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8650](a1);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8690](a1, *(_QWORD *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE86B8](a1, *(_QWORD *)&iCol);
}

int sqlite3_deserialize(sqlite3 *db, const char *zSchema, unsigned __int8 *pData, sqlite3_int64 szDb, sqlite3_int64 szBuf, unsigned int mFlags)
{
  return MEMORY[0x1E0DE8778](db, zSchema, pData, szDb, szBuf, *(_QWORD *)&mFlags);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE87C8](pStmt);
}

int sqlite3_open(const char *filename, sqlite3 **ppDb)
{
  return MEMORY[0x1E0DE8868](filename, ppDb);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1E0DE8880](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1E0DE89A8](a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1E0DF0F98]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1E0DF0FA8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_deallocUninitializedObject()
{
  return MEMORY[0x1E0DEEB70]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x1E0DF0FB0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1E0DF0FB8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1E0DF0FC0]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x1E0DEEB78]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1E0DEEB88]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1E0DEEC18]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1E0DEECB8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeLayout()
{
  return MEMORY[0x1E0DEED00]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1E0DEED08]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x1E0DEED18]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1E0DEED70]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_job_run_on_task_executor()
{
  return MEMORY[0x1E0DF0FE0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1E0DEEE88]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1E0DEEE90]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1E0DEEF20]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1E0DEEF80]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1E0DEEF98]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1E0DEEFA0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1E0DEEFA8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1E0DEEFC8]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

kern_return_t thread_info(thread_inspect_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt)
{
  return MEMORY[0x1E0C858F8](*(_QWORD *)&target_act, *(_QWORD *)&flavor, thread_info_out, thread_info_outCnt);
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return MEMORY[0x1E0C85908](*(_QWORD *)&thread, *(_QWORD *)&flavor, policy_info, *(_QWORD *)&policy_infoCnt);
}

int32_t uregex_end(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  return MEMORY[0x1E0DE6718](regexp, *(_QWORD *)&groupNum, status);
}

UBool uregex_find(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return MEMORY[0x1E0DE6728](regexp, *(_QWORD *)&startIndex, status);
}

URegularExpression *__cdecl uregex_open(const UChar *pattern, int32_t patternLength, uint32_t flags, UParseError *pe, UErrorCode *status)
{
  return (URegularExpression *)MEMORY[0x1E0DE6768](pattern, *(_QWORD *)&patternLength, *(_QWORD *)&flags, pe, status);
}

void uregex_setText(URegularExpression *regexp, const UChar *text, int32_t textLength, UErrorCode *status)
{
  MEMORY[0x1E0DE67B0](regexp, text, *(_QWORD *)&textLength, status);
}

int32_t uregex_start(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  return MEMORY[0x1E0DE67C8](regexp, *(_QWORD *)&groupNum, status);
}

void uregex_useAnchoringBounds(URegularExpression *regexp, UBool b, UErrorCode *status)
{
  MEMORY[0x1E0DE67D8](regexp, b, status);
}

uint64_t uscript_getScriptExtensions()
{
  return MEMORY[0x1E0DE68A0]();
}

uint64_t uscript_getShortName()
{
  return MEMORY[0x1E0DE68A8]();
}

void vDSP_DFT_DestroySetup(vDSP_DFT_Setup __Setup)
{
  MEMORY[0x1E0C8BF50](__Setup);
}

void vDSP_DFT_Execute(const vDSP_DFT_SetupStruct *__Setup, const float *__Ir, const float *__Ii, float *__Or, float *__Oi)
{
  MEMORY[0x1E0C8BF60](__Setup, __Ir, __Ii, __Or, __Oi);
}

vDSP_DFT_Setup vDSP_DFT_zop_CreateSetup(vDSP_DFT_Setup __Previous, vDSP_Length __Length, vDSP_DFT_Direction __Direction)
{
  return (vDSP_DFT_Setup)MEMORY[0x1E0C8BFA0](__Previous, __Length, *(_QWORD *)&__Direction);
}

vDSP_DFT_Setup vDSP_DFT_zrop_CreateSetup(vDSP_DFT_Setup __Previous, vDSP_Length __Length, vDSP_DFT_Direction __Direction)
{
  return (vDSP_DFT_Setup)MEMORY[0x1E0C8BFB0](__Previous, __Length, *(_QWORD *)&__Direction);
}

void vDSP_ctoz(const DSPComplex *__C, vDSP_Stride __IC, const DSPSplitComplex *__Z, vDSP_Stride __IZ, vDSP_Length __N)
{
  MEMORY[0x1E0C8C070](__C, __IC, __Z, __IZ, __N);
}

void vDSP_dotpr(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C0D0](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_maxv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C1B0](__A, __IA, __C, __N);
}

void vDSP_mmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
  MEMORY[0x1E0C8C250](__A, __IA, __B, __IB, __C, __IC, __M, __N);
}

void vDSP_nzcros(const float *__A, vDSP_Stride __IA, vDSP_Length __B, vDSP_Length *__C, vDSP_Length *__D, vDSP_Length __N)
{
  MEMORY[0x1E0C8C290](__A, __IA, __B, __C, __D, __N);
}

void vDSP_svdiv(const float *__A, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C2D8](__A, __B, __IB, __C, __IC, __N);
}

void vDSP_sve(const float *__A, vDSP_Stride __I, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C2E8](__A, __I, __C, __N);
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C368](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vclip(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C3D8](__A, __IA, __B, __C, __D, __ID, __N);
}

void vDSP_vclr(float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C400](__C, __IC, __N);
}

void vDSP_vdiv(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C448](__B, __IB, __A, __IA, __C, __IC, __N);
}

void vDSP_vfill(const float *__A, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C460](__A, __C, __IC, __N);
}

void vDSP_vma(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C6A0](__A, __IA, __B, __IB, __C, __IC, __D, __ID);
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C740](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vneg(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C768](__A, __IA, __C, __IC, __N);
}

void vDSP_vramp(const float *__A, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C7A0](__A, __B, __C, __IC, __N);
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C800](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C860](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsma(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C888](__A, __IA, __B, __C, __IC, __D, __ID, __N);
}

void vDSP_vsmsa(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C898](__A, __IA, __B, __C, __D, __ID, __N);
}

void vDSP_vsmsma(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, vDSP_Stride __IC, const float *__D, float *__E, vDSP_Stride __IE, vDSP_Length __N)
{
  MEMORY[0x1E0C8C8C0](__A, __IA, __B, __C, __IC, __D, __E, __IE);
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C8E0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C920](__A, __IA, __C, __IC, __N);
}

void vDSP_vsub(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C940](__B, __IB, __A, __IA, __C, __IC, __N);
}

void vDSP_vthr(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C9A8](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_ztoc(const DSPSplitComplex *__Z, vDSP_Stride __IZ, DSPComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CA50](__Z, __IZ, __C, __IC, __N);
}

void vDSP_zvmags(const DSPSplitComplex *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CAB8](__A, __IA, __C, __IC, __N);
}

void vDSP_zvmul(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N, int __Conjugate)
{
  MEMORY[0x1E0C8CAE8](__A, __IA, __B, __IB, __C, __IC, __N, *(_QWORD *)&__Conjugate);
}

uint64_t voucher_adopt()
{
  return MEMORY[0x1E0C85B10]();
}

uint64_t voucher_copy()
{
  return MEMORY[0x1E0C85B18]();
}

void vsyslog(int a1, const char *a2, __darwin_va_list a3)
{
  MEMORY[0x1E0C85BB8](*(_QWORD *)&a1, a2, a3);
}

void vvlogf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x1E0C8DA98](a1, a2, a3);
}

void vvpowf(float *a1, const float *a2, const float *a3, const int *a4)
{
  MEMORY[0x1E0C8DAC8](a1, a2, a3, a4);
}

void vvsqrtf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x1E0C8DB80](a1, a2, a3);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1E0C85F00](xBOOL);
}

uint64_t xpc_copy_entitlement_for_self()
{
  return MEMORY[0x1E0C86118]();
}

uint64_t xpc_copy_entitlement_for_token()
{
  return MEMORY[0x1E0C86120]();
}

