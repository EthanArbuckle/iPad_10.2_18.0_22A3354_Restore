uint64_t sub_23BDEE314(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC63E0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC63E8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v13 = sub_23BE5A7F8();
    v14 = sub_23BE5A918();
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC63F0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v9, a1, v15);
    v16 = &v9[*(int *)(v7 + 36)];
    *(_QWORD *)v16 = v13;
    v16[8] = v14;
  }
  else
  {
    v10 = sub_23BE5A90C();
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC63F0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, a1, v11);
    v12 = &v9[*(int *)(v7 + 36)];
    *(_QWORD *)v12 = 0;
    v12[8] = v10;
  }
  sub_23BDEE760((uint64_t)v9, (uint64_t)v6);
  swift_storeEnumTagMultiPayload();
  sub_23BDEE7A8();
  sub_23BE5A8D0();
  return sub_23BDEE8A4((uint64_t)v9);
}

uint64_t sub_23BDEE4B8()
{
  return sub_23BE5A7A4();
}

uint64_t sub_23BDEE4D0(uint64_t a1)
{
  char *v1;

  return sub_23BDEE314(a1, *v1);
}

uint64_t View.ignoreSafeArea(insetBehavior:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1 & 1;
  return MEMORY[0x24261246C](&v4, a2, &type metadata for BrowseInsetBehaviorModifier, a3);
}

uint64_t sub_23BDEE50C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_23BE5A7EC();
  v4[0] = v1;
  v4[1] = sub_23BDEE560();
  return MEMORY[0x242612B20](MEMORY[0x24BDED308], v2, v4);
}

unint64_t sub_23BDEE560()
{
  unint64_t result;

  result = qword_256AC63D8;
  if (!qword_256AC63D8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B24C, &type metadata for BrowseInsetBehaviorModifier);
    atomic_store(result, (unint64_t *)&qword_256AC63D8);
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BrowseInsetBehaviorModifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseInsetBehaviorModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BDEE690 + 4 * byte_23BE5B215[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BDEE6C4 + 4 * byte_23BE5B210[v4]))();
}

uint64_t sub_23BDEE6C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDEE6CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDEE6D4);
  return result;
}

uint64_t sub_23BDEE6E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDEE6E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BDEE6EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDEE6F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseInsetBehaviorModifier()
{
  return &type metadata for BrowseInsetBehaviorModifier;
}

uint64_t sub_23BDEE710()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x242612B08]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_23BDEE760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC63E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BDEE7A8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AC63F8;
  if (!qword_256AC63F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC63E8);
    v2[0] = sub_23BDEE858();
    v2[1] = MEMORY[0x24BDF1050];
    result = MEMORY[0x242612B20](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AC63F8);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x242612B14](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_23BDEE858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AC6400;
  if (!qword_256AC6400)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC63F0);
    result = MEMORY[0x242612B20](MEMORY[0x24BDEFB78], v1);
    atomic_store(result, (unint64_t *)&qword_256AC6400);
  }
  return result;
}

uint64_t sub_23BDEE8A4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC63E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23BDEE8E8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AC6408;
  if (!qword_256AC6408)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6410);
    v2[0] = sub_23BDEE7A8();
    v2[1] = v2[0];
    result = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AC6408);
  }
  return result;
}

uint64_t BrowseEditorialGroup.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BrowseEditorialGroup.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

FitnessBrowsing::BrowseEditorialGroup __swiftcall BrowseEditorialGroup.init(items:title:)(Swift::OpaquePointer items, Swift::String title)
{
  uint64_t v2;
  FitnessBrowsing::BrowseEditorialGroup result;

  *(Swift::OpaquePointer *)v2 = items;
  *(Swift::String *)(v2 + 8) = title;
  result.title = title;
  result.items = items;
  return result;
}

BOOL sub_23BDEE98C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23BDEE9A4()
{
  sub_23BE5AEB8();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

uint64_t sub_23BDEE9E8()
{
  return sub_23BE5AEC4();
}

uint64_t sub_23BDEEA10()
{
  sub_23BE5AEB8();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

uint64_t sub_23BDEEA50()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C746974;
  else
    return 0x736D657469;
}

uint64_t sub_23BDEEA7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDF2278(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BDEEAA0()
{
  return 0;
}

void sub_23BDEEAAC(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_23BDEEAB8()
{
  sub_23BDEEC90();
  return sub_23BE5AF0C();
}

uint64_t sub_23BDEEAE0()
{
  sub_23BDEEC90();
  return sub_23BE5AF18();
}

uint64_t BrowseEditorialGroup.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  char v13;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6418);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v11[1] = v1[2];
  v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDEEC90();
  sub_23BE5AF00();
  v14 = v9;
  v13 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6428);
  sub_23BDEEED8(&qword_256AC6430, &qword_256AC6438, (uint64_t)&protocol conformance descriptor for BrowseLazyItem, MEMORY[0x24BEE12A0]);
  sub_23BE5AE4C();
  if (!v2)
  {
    v12 = 1;
    sub_23BE5AE28();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_23BDEEC90()
{
  unint64_t result;

  result = qword_256AC6420;
  if (!qword_256AC6420)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B488, &type metadata for BrowseEditorialGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6420);
  }
  return result;
}

uint64_t BrowseEditorialGroup.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6440);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDEEC90();
  sub_23BE5AEF4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6428);
  v14[15] = 0;
  sub_23BDEEED8(&qword_256AC6448, &qword_256AC6450, (uint64_t)&protocol conformance descriptor for BrowseLazyItem, MEMORY[0x24BEE12D0]);
  sub_23BE5ADE0();
  v9 = v15;
  v14[14] = 1;
  swift_bridgeObjectRetain();
  v10 = sub_23BE5ADBC();
  v12 = v11;
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v12;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_23BDEEED8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6428);
    v10 = sub_23BDF23E4(a2, (uint64_t (*)(uint64_t))type metadata accessor for BrowseLazyItem, a3);
    result = MEMORY[0x242612B20](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BDEEF5C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return BrowseEditorialGroup.init(from:)(a1, a2);
}

uint64_t sub_23BDEEF70(_QWORD *a1)
{
  return BrowseEditorialGroup.encode(to:)(a1);
}

uint64_t BrowseEditorialGroup.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_23BDF1AA4(a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  return swift_bridgeObjectRelease();
}

uint64_t static BrowseEditorialGroup.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  if ((sub_23BDEFCC4(*a1, *a2) & 1) == 0)
    return 0;
  if (v2 == v4 && v3 == v5)
    return 1;
  else
    return sub_23BE5AE58();
}

uint64_t sub_23BDEF064(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  char v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v4 = type metadata accessor for BrowseItem();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6498);
  MEMORY[0x24BDAC7A8](v91);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BrowseLazyItem();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v62 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v62 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v21 = (char *)&v62 - v20;
  v22 = *(_QWORD *)(a1 + 16);
  if (v22 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v22 && a1 != a2)
  {
    v68 = v6;
    v73 = v19;
    v65 = v18;
    v23 = 0;
    v24 = a1 + 32;
    v25 = a2 + 32;
    v87 = v17;
    v64 = v22;
    v63 = a1 + 32;
    v62 = a2 + 32;
    v67 = v8;
    v66 = v16;
    v72 = v21;
    while (1)
    {
      v26 = (uint64_t *)(v24 + 24 * v23);
      v27 = (uint64_t *)(v25 + 24 * v23);
      v28 = *v27;
      v96 = *v26;
      v29 = *(_QWORD *)(v96 + 16);
      if (v29 != *(_QWORD *)(v28 + 16))
        return 0;
      v30 = v26[1];
      v31 = v26[2];
      v32 = v27[1];
      v76 = v27[2];
      v75 = v31;
      v69 = v23;
      v71 = v30;
      v70 = v32;
      if (v29)
      {
        v33 = *(unsigned __int8 *)(v65 + 80);
        v34 = v96;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v34 != v28)
        {
          v35 = (v33 + 32) & ~v33;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v36 = 0;
          v85 = *(_QWORD *)(v65 + 72);
          v74 = v28;
          v86 = v29;
          while (1)
          {
            sub_23BDF23A0(v96 + v35, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
            if (v36 >= *(_QWORD *)(v28 + 16))
            {
              __break(1u);
              JUMPOUT(0x23BDEFC7CLL);
            }
            v95 = v35;
            sub_23BDF23A0(v28 + v35, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
            v37 = (uint64_t)&v8[*(int *)(v91 + 48)];
            sub_23BDF23A0((uint64_t)v21, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
            sub_23BDF23A0((uint64_t)v16, v37, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
            if (swift_getEnumCaseMultiPayload() == 1)
              break;
            v52 = v16;
            v53 = (uint64_t)v13;
            v54 = v21;
            sub_23BDF23A0((uint64_t)v8, v53, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              sub_23BDF2468(v53, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
              v16 = v52;
              goto LABEL_55;
            }
            v55 = (uint64_t)v68;
            sub_23BDF2424(v37, (uint64_t)v68, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
            v56 = static BrowseItem.== infix(_:_:)(v53, v55);
            sub_23BDF2468(v53, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
            sub_23BDF2468(v55, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
            v21 = v54;
            v13 = (char *)v53;
            v16 = v52;
            v57 = v95;
            if (!v56)
              goto LABEL_63;
            ++v36;
            sub_23BDF2468((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
            sub_23BDF2468((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
            sub_23BDF2468((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
            v35 = v57 + v85;
            if (v86 == v36)
              goto LABEL_43;
          }
          v38 = v73;
          sub_23BDF23A0((uint64_t)v8, v73, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
          v39 = *(_QWORD *)(v38 + 8);
          v94 = *(_QWORD *)(v38 + 16);
          v40 = *(_QWORD *)(v38 + 24);
          v84 = *(_QWORD *)(v38 + 32);
          v42 = *(_QWORD *)(v38 + 40);
          v41 = *(_QWORD *)(v38 + 48);
          v82 = *(_QWORD *)(v38 + 56);
          v89 = *(_QWORD *)(v38 + 64);
          v90 = v41;
          v43 = *(unsigned __int8 *)(v38 + 72);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v21 = v72;
LABEL_55:
            sub_23BDF24A4((uint64_t)v8);
            goto LABEL_64;
          }
          v44 = *(_QWORD *)(v37 + 8);
          v45 = *(_QWORD *)(v37 + 16);
          v77 = *(_QWORD *)(v37 + 24);
          v78 = v44;
          v92 = *(_QWORD *)(v37 + 32);
          v93 = v45;
          v46 = *(_QWORD *)(v37 + 40);
          v88 = *(_QWORD *)(v37 + 48);
          v80 = *(_QWORD *)(v37 + 56);
          v81 = v46;
          v83 = *(_QWORD *)(v37 + 64);
          v79 = *(unsigned __int8 *)(v37 + 72);
          v47 = *(_BYTE *)v37;
          v48 = BrowseDisplayStyle.rawValue.getter(*(_BYTE *)v38);
          v50 = v49;
          if (v48 == BrowseDisplayStyle.rawValue.getter(v47) && v50 == v51)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_20;
          }
          v58 = sub_23BE5AE58();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v58 & 1) != 0)
          {
LABEL_20:
            if (v94)
            {
              v8 = v67;
              v16 = v66;
              if (!v93 || (v39 != v78 || v94 != v93) && (sub_23BE5AE58() & 1) == 0)
                goto LABEL_32;
            }
            else
            {
              v8 = v67;
              v16 = v66;
              if (v93)
                goto LABEL_32;
            }
            if (v84)
            {
              if (!v92 || (v40 != v77 || v84 != v92) && (sub_23BE5AE58() & 1) == 0)
                goto LABEL_32;
            }
            else if (v92)
            {
              goto LABEL_32;
            }
            if ((v42 == v81 && v90 == v88 || (sub_23BE5AE58() & 1) != 0)
              && (v82 == v80 && v89 == v83 || (sub_23BE5AE58() & 1) != 0))
            {
              __asm { BR              X8 }
            }
LABEL_32:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v8 = v67;
            v16 = v66;
          }
          v21 = v72;
LABEL_63:
          sub_23BDF2468((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
LABEL_64:
          sub_23BDF2468((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
          sub_23BDF2468((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_43:
      if (v71 == v70 && v75 == v76)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        v60 = sub_23BE5AE58();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v60 & 1) == 0)
          return 0;
      }
      v23 = v69 + 1;
      result = 1;
      v24 = v63;
      v25 = v62;
      if (v69 + 1 == v64)
        return result;
    }
  }
  return 1;
}

uint64_t sub_23BDEFCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60[8];
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68[8];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;

  v4 = type metadata accessor for BrowseItem();
  MEMORY[0x24BDAC7A8](v4);
  v52 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6498);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for BrowseLazyItem();
  v9 = MEMORY[0x24BDAC7A8](v57);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v47 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v19 = (char *)&v47 - v17;
  v58 = a1;
  v20 = *(_QWORD *)(a1 + 16);
  v59 = a2;
  if (v20 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v20 || v58 == v59)
    return 1;
  v50 = v18;
  v21 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v55 = *(_QWORD *)(v16 + 72);
  v56 = (char *)&v47 - v17;
  v49 = v6;
  v51 = v15;
  v48 = v8;
  while (1)
  {
    sub_23BDF23A0(v58 + v21, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
    sub_23BDF23A0(v59 + v21, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
    v22 = (uint64_t)&v8[*(int *)(v6 + 48)];
    sub_23BDF23A0((uint64_t)v19, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
    sub_23BDF23A0((uint64_t)v15, v22, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
    if (swift_getEnumCaseMultiPayload() != 1)
      break;
    sub_23BDF23A0((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
    v23 = *((_QWORD *)v11 + 2);
    v24 = v8;
    v25 = *((_QWORD *)v11 + 4);
    v26 = *((_QWORD *)v11 + 6);
    v27 = *((_QWORD *)v11 + 8);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = v24;
      v15 = v51;
      goto LABEL_16;
    }
    v28 = v11[72];
    v29 = *((_QWORD *)v11 + 7);
    v30 = *((_QWORD *)v11 + 5);
    v31 = *((_QWORD *)v11 + 3);
    v32 = *((_QWORD *)v11 + 1);
    v33 = *(_BYTE *)v22;
    v34 = *(_QWORD *)(v22 + 8);
    v36 = *(_QWORD *)(v22 + 48);
    v35 = *(_QWORD *)(v22 + 56);
    v37 = *(_QWORD *)(v22 + 64);
    v38 = *(_BYTE *)(v22 + 72);
    v68[0] = *v11;
    v69 = v32;
    v70 = v23;
    v71 = v31;
    v72 = v25;
    v73 = v30;
    v74 = v26;
    v75 = v29;
    v76 = v27;
    v77 = v28;
    v60[0] = v33;
    v61 = v34;
    v39 = *(_OWORD *)(v22 + 32);
    v53 = *(_OWORD *)(v22 + 16);
    v54 = v39;
    v62 = v53;
    v63 = v39;
    v64 = v36;
    v65 = v35;
    v66 = v37;
    v67 = v38;
    _s15FitnessBrowsing21BrowseItemPlaceholderV2eeoiySbAC_ACtFZ_0((uint64_t)v68, (uint64_t)v60);
    v41 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = v48;
    sub_23BDF2468((uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
    v6 = v49;
    v15 = v51;
    if ((v41 & 1) == 0)
      goto LABEL_17;
LABEL_5:
    sub_23BDF2468((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
    v19 = v56;
    sub_23BDF2468((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
    v21 += v55;
    if (!--v20)
      return 1;
  }
  v42 = v50;
  sub_23BDF23A0((uint64_t)v8, v50, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v43 = v22;
    v44 = v52;
    sub_23BDF2424(v43, v52, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
    v45 = _s15FitnessBrowsing10BrowseItemV2eeoiySbAC_ACtFZ_0(v42, v44);
    sub_23BDF2468(v44, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
    sub_23BDF2468(v42, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
    sub_23BDF2468((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
    if (!v45)
      goto LABEL_17;
    goto LABEL_5;
  }
  sub_23BDF2468(v42, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
LABEL_16:
  sub_23BDF24A4((uint64_t)v8);
LABEL_17:
  sub_23BDF2468((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
  sub_23BDF2468((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
  return 0;
}

uint64_t sub_23BDF0180(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for BrowseSectionDescriptor();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_23BDF23A0(a1 + v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
        sub_23BDF23A0(a2 + v12, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
        v15 = static BrowseSectionDescriptor.== infix(_:_:)(v10, v7);
        sub_23BDF2468((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
        sub_23BDF2468((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

BOOL sub_23BDF02BC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t BrowseEditorialGroup.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_23BE5AEB8();
  sub_23BDF1AA4((uint64_t)v3, v1);
  sub_23BE5AC9C();
  return sub_23BE5AEE8();
}

uint64_t sub_23BDF0388()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_23BE5AEB8();
  sub_23BDF1AA4((uint64_t)v3, v1);
  sub_23BE5AC9C();
  return sub_23BE5AEE8();
}

uint64_t sub_23BDF03E8(uint64_t a1)
{
  uint64_t *v1;

  sub_23BDF1AA4(a1, *v1);
  return sub_23BE5AC9C();
}

uint64_t sub_23BDF0424()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_23BE5AEB8();
  sub_23BDF1AA4((uint64_t)v3, v1);
  sub_23BE5AC9C();
  return sub_23BE5AEE8();
}

uint64_t sub_23BDF0480(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  if ((sub_23BDEFCC4(*a1, *a2) & 1) == 0)
    return 0;
  if (v2 == v4 && v3 == v5)
    return 1;
  else
    return sub_23BE5AE58();
}

uint64_t sub_23BDF04FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t result;
  char *v31;
  _QWORD v32[3];
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;

  v45 = type metadata accessor for BrowseGalleryDescriptor();
  MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for BrowseItem();
  MEMORY[0x24BDAC7A8](v4);
  v60 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BrowseLazyItem();
  v56 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v32 - v8;
  v46 = type metadata accessor for BrowseEditorialDescriptor();
  MEMORY[0x24BDAC7A8](v46);
  v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for BrowseDetailVideoLinkItem();
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_23BE5A678();
  v48 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v38 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v43 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v32[1] = (char *)v32 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v34 = (char *)v32 - v19;
  v36 = type metadata accessor for BrowseDetailTextItem();
  MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for BrowseDetailArtworkItem();
  MEMORY[0x24BDAC7A8](v33);
  v32[2] = (char *)v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for BrowseDetailContent();
  MEMORY[0x24BDAC7A8](v42);
  v41 = (char *)v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for BrowseDetailDescriptor();
  MEMORY[0x24BDAC7A8](v40);
  v49 = (char *)v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for BrowseSectionDescriptor();
  v24 = *(_QWORD *)(v55 - 8);
  v25 = MEMORY[0x24BDAC7A8](v55);
  v58 = (uint64_t)v32 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)v32 - v27;
  v29 = *(_QWORD *)(a2 + 16);
  result = sub_23BE5AEC4();
  v54 = v29;
  if (v29)
  {
    v52 = a2 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
    v51 = *(_QWORD *)(v24 + 72);
    v61 = v9;
    v47 = v11;
    v59 = v6;
    v53 = v28;
    v57 = 1;
    sub_23BDF23A0(v52, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
    sub_23BDF23A0((uint64_t)v28, v58, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
    v31 = (char *)&loc_23BDF092C + 4 * byte_23BE5B2A0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X9 }
  }
  return result;
}

uint64_t sub_23BDF1AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21[6];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = type metadata accessor for BrowseItem();
  MEMORY[0x24BDAC7A8](v4);
  v21[0] = (uint64_t)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for BrowseLazyItem();
  v6 = *(_QWORD *)(v25 - 8);
  v7 = MEMORY[0x24BDAC7A8](v25);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v21 - v10;
  v12 = *(_QWORD *)(a2 + 16);
  result = sub_23BE5AEC4();
  if (v12)
  {
    v14 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v24 = *(_QWORD *)(v6 + 72);
    do
    {
      sub_23BDF23A0(v14, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
      sub_23BDF23A0((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v16 = *((_QWORD *)v9 + 2);
        v17 = *((_QWORD *)v9 + 3);
        v18 = *((_QWORD *)v9 + 4);
        v21[1] = *((_QWORD *)v9 + 1);
        v21[2] = v17;
        v19 = *((_QWORD *)v9 + 5);
        v21[4] = *((_QWORD *)v9 + 6);
        v21[5] = v19;
        v21[3] = *((_QWORD *)v9 + 7);
        v22 = v9[72];
        v20 = *v9;
        sub_23BE5AEC4();
        BrowseDisplayStyle.rawValue.getter(v20);
        sub_23BE5AC9C();
        swift_bridgeObjectRelease();
        v23 = v16;
        sub_23BE5AED0();
        if (v16)
        {
          swift_bridgeObjectRetain();
          sub_23BE5AC9C();
          swift_bridgeObjectRelease();
        }
        sub_23BE5AED0();
        if (v18)
        {
          swift_bridgeObjectRetain();
          sub_23BE5AC9C();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain();
        sub_23BE5AC9C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_23BE5AC9C();
        swift_bridgeObjectRelease();
        __asm { BR              X8 }
      }
      v15 = v21[0];
      sub_23BDF2424((uint64_t)v9, v21[0], (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
      sub_23BE5AEC4();
      BrowseItem.hash(into:)(a1);
      sub_23BDF2468(v15, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
      result = sub_23BDF2468((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
      v14 += v24;
      --v12;
    }
    while (v12);
  }
  return result;
}

unint64_t sub_23BDF1EBC()
{
  unint64_t result;

  result = qword_256AC6458;
  if (!qword_256AC6458)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseEditorialGroup, &type metadata for BrowseEditorialGroup);
    atomic_store(result, (unint64_t *)&qword_256AC6458);
  }
  return result;
}

uint64_t destroy for BrowseEditorialGroup()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s15FitnessBrowsing20BrowseEditorialGroupVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for BrowseEditorialGroup(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for BrowseEditorialGroup(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseEditorialGroup(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseEditorialGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BrowseEditorialGroup()
{
  return &type metadata for BrowseEditorialGroup;
}

uint64_t storeEnumTagSinglePayload for BrowseEditorialGroup.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BDF2108 + 4 * byte_23BE5B2DF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BDF213C + 4 * byte_23BE5B2DA[v4]))();
}

uint64_t sub_23BDF213C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDF2144(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDF214CLL);
  return result;
}

uint64_t sub_23BDF2158(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDF2160);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BDF2164(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDF216C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDF2178(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_23BDF2184(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseEditorialGroup.CodingKeys()
{
  return &type metadata for BrowseEditorialGroup.CodingKeys;
}

unint64_t sub_23BDF21A4()
{
  unint64_t result;

  result = qword_256AC6460;
  if (!qword_256AC6460)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B460, &type metadata for BrowseEditorialGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6460);
  }
  return result;
}

unint64_t sub_23BDF21EC()
{
  unint64_t result;

  result = qword_256AC6468;
  if (!qword_256AC6468)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B3D0, &type metadata for BrowseEditorialGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6468);
  }
  return result;
}

unint64_t sub_23BDF2234()
{
  unint64_t result;

  result = qword_256AC6470;
  if (!qword_256AC6470)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B3F8, &type metadata for BrowseEditorialGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6470);
  }
  return result;
}

uint64_t sub_23BDF2278(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x736D657469 && a2 == 0xE500000000000000;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BDF2358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BDF23A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BDF23E4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x242612B20](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BDF2424(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BDF2468(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23BDF24A4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6498);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL static BrowseItemAssetLoadStatus.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_23BDF24F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BDF2530 + 4 * byte_23BE5B4E0[a1]))(0x4C676E69646E6570, 0xEB0000000064616FLL);
}

uint64_t sub_23BDF2530()
{
  return 0x676E6964616F6CLL;
}

uint64_t sub_23BDF2578()
{
  return 0x646573756170;
}

uint64_t sub_23BDF258C()
{
  return 0x6574656C706D6F63;
}

uint64_t sub_23BDF25A8()
{
  return 0x64656C696166;
}

unint64_t sub_23BDF25BC()
{
  return 0xD000000000000013;
}

uint64_t sub_23BDF25D8()
{
  return 0x696C6C65636E6163;
}

uint64_t sub_23BDF25F4()
{
  return 0;
}

void sub_23BDF2600(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_23BDF260C()
{
  sub_23BDF2FCC();
  return sub_23BE5AF0C();
}

uint64_t sub_23BDF2634()
{
  sub_23BDF2FCC();
  return sub_23BE5AF18();
}

BOOL sub_23BDF265C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BDF2678()
{
  unsigned __int8 *v0;

  return sub_23BDF24F4(*v0);
}

uint64_t sub_23BDF2680@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDF32EC(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BDF26A4(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_23BDF26B0()
{
  sub_23BDF2F88();
  return sub_23BE5AF0C();
}

uint64_t sub_23BDF26D8()
{
  sub_23BDF2F88();
  return sub_23BE5AF18();
}

uint64_t sub_23BDF2700()
{
  sub_23BDF3098();
  return sub_23BE5AF0C();
}

uint64_t sub_23BDF2728()
{
  sub_23BDF3098();
  return sub_23BE5AF18();
}

uint64_t sub_23BDF2750()
{
  sub_23BDF3054();
  return sub_23BE5AF0C();
}

uint64_t sub_23BDF2778()
{
  sub_23BDF3054();
  return sub_23BE5AF18();
}

uint64_t sub_23BDF27A0()
{
  sub_23BDF31A8();
  return sub_23BE5AF0C();
}

uint64_t sub_23BDF27C8()
{
  sub_23BDF31A8();
  return sub_23BE5AF18();
}

uint64_t sub_23BDF27F0()
{
  sub_23BDF30DC();
  return sub_23BE5AF0C();
}

uint64_t sub_23BDF2818()
{
  sub_23BDF30DC();
  return sub_23BE5AF18();
}

uint64_t sub_23BDF2840()
{
  sub_23BDF3120();
  return sub_23BE5AF0C();
}

uint64_t sub_23BDF2868()
{
  sub_23BDF3120();
  return sub_23BE5AF18();
}

uint64_t sub_23BDF2890()
{
  sub_23BDF3010();
  return sub_23BE5AF0C();
}

uint64_t sub_23BDF28B8()
{
  sub_23BDF3010();
  return sub_23BE5AF18();
}

uint64_t sub_23BDF28E0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_23BDF290C()
{
  sub_23BDF31EC();
  return sub_23BE5AF0C();
}

uint64_t sub_23BDF2934()
{
  sub_23BDF31EC();
  return sub_23BE5AF18();
}

uint64_t sub_23BDF295C()
{
  sub_23BDF3164();
  return sub_23BE5AF0C();
}

uint64_t sub_23BDF2984()
{
  sub_23BDF3164();
  return sub_23BE5AF18();
}

void BrowseItemAssetLoadStatus.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC64A0);
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v34 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC64A8);
  v32 = *(_QWORD *)(v5 - 8);
  v33 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v31 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC64B0);
  v29 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v28 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC64B8);
  v26 = *(_QWORD *)(v9 - 8);
  v27 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v25 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC64C0);
  v23 = *(_QWORD *)(v11 - 8);
  v24 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v22 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC64C8);
  v20 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v19 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC64D0);
  v17[2] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v17[1] = (char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC64D8);
  MEMORY[0x24BDAC7A8](v17[0]);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC64E0);
  MEMORY[0x24BDAC7A8](v15);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC64E8);
  v38 = *(_QWORD *)(v16 - 8);
  v39 = v16;
  MEMORY[0x24BDAC7A8](v16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDF2F88();
  sub_23BE5AF00();
  __asm { BR              X10 }
}

uint64_t sub_23BDF2CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 89) = 0;
  sub_23BDF31EC();
  v5 = *(_QWORD *)(v4 - 104);
  sub_23BE5ADF8();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 112) + 8))(v2, v5);
}

unint64_t sub_23BDF2F88()
{
  unint64_t result;

  result = qword_256AC64F0;
  if (!qword_256AC64F0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5BD70, &type metadata for BrowseItemAssetLoadStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC64F0);
  }
  return result;
}

unint64_t sub_23BDF2FCC()
{
  unint64_t result;

  result = qword_256AC64F8;
  if (!qword_256AC64F8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5BD20, &type metadata for BrowseItemAssetLoadStatus.CancellingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC64F8);
  }
  return result;
}

unint64_t sub_23BDF3010()
{
  unint64_t result;

  result = qword_256AC6500;
  if (!qword_256AC6500)
  {
    result = MEMORY[0x242612B20](&unk_23BE5BCD0, &type metadata for BrowseItemAssetLoadStatus.PendingCancellationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6500);
  }
  return result;
}

unint64_t sub_23BDF3054()
{
  unint64_t result;

  result = qword_256AC6508;
  if (!qword_256AC6508)
  {
    result = MEMORY[0x242612B20](&unk_23BE5BC80, &type metadata for BrowseItemAssetLoadStatus.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6508);
  }
  return result;
}

unint64_t sub_23BDF3098()
{
  unint64_t result;

  result = qword_256AC6510;
  if (!qword_256AC6510)
  {
    result = MEMORY[0x242612B20](&unk_23BE5BC30, &type metadata for BrowseItemAssetLoadStatus.CompletedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6510);
  }
  return result;
}

unint64_t sub_23BDF30DC()
{
  unint64_t result;

  result = qword_256AC6518;
  if (!qword_256AC6518)
  {
    result = MEMORY[0x242612B20](&unk_23BE5BBE0, &type metadata for BrowseItemAssetLoadStatus.PausedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6518);
  }
  return result;
}

unint64_t sub_23BDF3120()
{
  unint64_t result;

  result = qword_256AC6520;
  if (!qword_256AC6520)
  {
    result = MEMORY[0x242612B20](&unk_23BE5BB90, &type metadata for BrowseItemAssetLoadStatus.PausingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6520);
  }
  return result;
}

unint64_t sub_23BDF3164()
{
  unint64_t result;

  result = qword_256AC6528;
  if (!qword_256AC6528)
  {
    result = MEMORY[0x242612B20](&unk_23BE5BB40, &type metadata for BrowseItemAssetLoadStatus.PendingPauseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6528);
  }
  return result;
}

unint64_t sub_23BDF31A8()
{
  unint64_t result;

  result = qword_256AC6530;
  if (!qword_256AC6530)
  {
    result = MEMORY[0x242612B20](&unk_23BE5BAF0, &type metadata for BrowseItemAssetLoadStatus.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6530);
  }
  return result;
}

unint64_t sub_23BDF31EC()
{
  unint64_t result;

  result = qword_256AC6538;
  if (!qword_256AC6538)
  {
    result = MEMORY[0x242612B20](&unk_23BE5BAA0, &type metadata for BrowseItemAssetLoadStatus.PendingLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6538);
  }
  return result;
}

uint64_t BrowseItemAssetLoadStatus.init(from:)(_QWORD *a1)
{
  return sub_23BDF36C8(a1);
}

uint64_t sub_23BDF3244@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23BDF36C8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_23BDF326C(_QWORD *a1)
{
  unsigned __int8 *v1;

  BrowseItemAssetLoadStatus.encode(to:)(a1, *v1);
}

uint64_t BrowseItemAssetLoadStatus.hash(into:)()
{
  return sub_23BE5AEC4();
}

uint64_t BrowseItemAssetLoadStatus.hashValue.getter()
{
  sub_23BE5AEB8();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

uint64_t sub_23BDF32EC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4C676E69646E6570 && a2 == 0xEB0000000064616FLL;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E6964616F6CLL && a2 == 0xE700000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x50676E69646E6570 && a2 == 0xEC00000065737561 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x676E6973756170 && a2 == 0xE700000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x646573756170 && a2 == 0xE600000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6574656C706D6F63 && a2 == 0xE900000000000064 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x64656C696166 && a2 == 0xE600000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023BE66070 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x696C6C65636E6163 && a2 == 0xEA0000000000676ELL)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_23BDF36C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD v31[7];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC65F0);
  v45 = *(_QWORD *)(v2 - 8);
  v46 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v54 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC65F8);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v53 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6600);
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v52 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6608);
  v37 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v50 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6610);
  v38 = *(_QWORD *)(v9 - 8);
  v39 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v51 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6618);
  v35 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v49 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6620);
  v33 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v48 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6628);
  v31[6] = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v47 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6630);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6638);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1[3];
  v55 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  sub_23BDF2F88();
  v23 = v56;
  sub_23BE5AEF4();
  if (!v23)
  {
    v31[4] = v17;
    v31[2] = v15;
    v31[3] = v14;
    v56 = v19;
    v31[5] = 0;
    v24 = v21;
    v25 = sub_23BE5ADEC();
    if (*(_QWORD *)(v25 + 16) == 1)
    {
      v26 = (char *)&loc_23BDF3A54 + 4 * byte_23BE5B4F2[*(unsigned __int8 *)(v25 + 32)];
      v31[1] = *(unsigned __int8 *)(v25 + 32);
      __asm { BR              X9 }
    }
    v27 = sub_23BE5AD68();
    swift_allocError();
    v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v29 = &type metadata for BrowseItemAssetLoadStatus;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, *MEMORY[0x24BEE26D0], v27);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v24, v18);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
}

unint64_t sub_23BDF3E68()
{
  unint64_t result;

  result = qword_256AC6540;
  if (!qword_256AC6540)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseItemAssetLoadStatus, &type metadata for BrowseItemAssetLoadStatus);
    atomic_store(result, (unint64_t *)&qword_256AC6540);
  }
  return result;
}

ValueMetadata *type metadata accessor for BrowseItemAssetLoadStatus()
{
  return &type metadata for BrowseItemAssetLoadStatus;
}

uint64_t getEnumTagSinglePayload for BrowseItemReferenceType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s15FitnessBrowsing25BrowseItemAssetLoadStatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23BDF3FA0 + 4 * byte_23BE5B500[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23BDF3FD4 + 4 * byte_23BE5B4FB[v4]))();
}

uint64_t sub_23BDF3FD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDF3FDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDF3FE4);
  return result;
}

uint64_t sub_23BDF3FF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDF3FF8);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23BDF3FFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDF4004(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_23BDF4010(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for BrowseItemAssetLoadStatus.CodingKeys()
{
  return &type metadata for BrowseItemAssetLoadStatus.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowseItemAssetLoadStatus.PendingLoadCodingKeys()
{
  return &type metadata for BrowseItemAssetLoadStatus.PendingLoadCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseItemAssetLoadStatus.LoadingCodingKeys()
{
  return &type metadata for BrowseItemAssetLoadStatus.LoadingCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseItemAssetLoadStatus.PendingPauseCodingKeys()
{
  return &type metadata for BrowseItemAssetLoadStatus.PendingPauseCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseItemAssetLoadStatus.PausingCodingKeys()
{
  return &type metadata for BrowseItemAssetLoadStatus.PausingCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseItemAssetLoadStatus.PausedCodingKeys()
{
  return &type metadata for BrowseItemAssetLoadStatus.PausedCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseItemAssetLoadStatus.CompletedCodingKeys()
{
  return &type metadata for BrowseItemAssetLoadStatus.CompletedCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseItemAssetLoadStatus.FailedCodingKeys()
{
  return &type metadata for BrowseItemAssetLoadStatus.FailedCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseItemAssetLoadStatus.PendingCancellationCodingKeys()
{
  return &type metadata for BrowseItemAssetLoadStatus.PendingCancellationCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseItemAssetLoadStatus.CancellingCodingKeys()
{
  return &type metadata for BrowseItemAssetLoadStatus.CancellingCodingKeys;
}

unint64_t sub_23BDF40BC()
{
  unint64_t result;

  result = qword_256AC6548;
  if (!qword_256AC6548)
  {
    result = MEMORY[0x242612B20](&unk_23BE5BA78, &type metadata for BrowseItemAssetLoadStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6548);
  }
  return result;
}

unint64_t sub_23BDF4104()
{
  unint64_t result;

  result = qword_256AC6550;
  if (!qword_256AC6550)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B998, &type metadata for BrowseItemAssetLoadStatus.PendingLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6550);
  }
  return result;
}

unint64_t sub_23BDF414C()
{
  unint64_t result;

  result = qword_256AC6558;
  if (!qword_256AC6558)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B9C0, &type metadata for BrowseItemAssetLoadStatus.PendingLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6558);
  }
  return result;
}

unint64_t sub_23BDF4194()
{
  unint64_t result;

  result = qword_256AC6560;
  if (!qword_256AC6560)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B948, &type metadata for BrowseItemAssetLoadStatus.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6560);
  }
  return result;
}

unint64_t sub_23BDF41DC()
{
  unint64_t result;

  result = qword_256AC6568;
  if (!qword_256AC6568)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B970, &type metadata for BrowseItemAssetLoadStatus.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6568);
  }
  return result;
}

unint64_t sub_23BDF4224()
{
  unint64_t result;

  result = qword_256AC6570;
  if (!qword_256AC6570)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B8F8, &type metadata for BrowseItemAssetLoadStatus.PendingPauseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6570);
  }
  return result;
}

unint64_t sub_23BDF426C()
{
  unint64_t result;

  result = qword_256AC6578;
  if (!qword_256AC6578)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B920, &type metadata for BrowseItemAssetLoadStatus.PendingPauseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6578);
  }
  return result;
}

unint64_t sub_23BDF42B4()
{
  unint64_t result;

  result = qword_256AC6580;
  if (!qword_256AC6580)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B8A8, &type metadata for BrowseItemAssetLoadStatus.PausingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6580);
  }
  return result;
}

unint64_t sub_23BDF42FC()
{
  unint64_t result;

  result = qword_256AC6588;
  if (!qword_256AC6588)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B8D0, &type metadata for BrowseItemAssetLoadStatus.PausingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6588);
  }
  return result;
}

unint64_t sub_23BDF4344()
{
  unint64_t result;

  result = qword_256AC6590;
  if (!qword_256AC6590)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B858, &type metadata for BrowseItemAssetLoadStatus.PausedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6590);
  }
  return result;
}

unint64_t sub_23BDF438C()
{
  unint64_t result;

  result = qword_256AC6598;
  if (!qword_256AC6598)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B880, &type metadata for BrowseItemAssetLoadStatus.PausedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6598);
  }
  return result;
}

unint64_t sub_23BDF43D4()
{
  unint64_t result;

  result = qword_256AC65A0;
  if (!qword_256AC65A0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B808, &type metadata for BrowseItemAssetLoadStatus.CompletedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC65A0);
  }
  return result;
}

unint64_t sub_23BDF441C()
{
  unint64_t result;

  result = qword_256AC65A8;
  if (!qword_256AC65A8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B830, &type metadata for BrowseItemAssetLoadStatus.CompletedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC65A8);
  }
  return result;
}

unint64_t sub_23BDF4464()
{
  unint64_t result;

  result = qword_256AC65B0;
  if (!qword_256AC65B0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B7B8, &type metadata for BrowseItemAssetLoadStatus.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC65B0);
  }
  return result;
}

unint64_t sub_23BDF44AC()
{
  unint64_t result;

  result = qword_256AC65B8;
  if (!qword_256AC65B8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B7E0, &type metadata for BrowseItemAssetLoadStatus.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC65B8);
  }
  return result;
}

unint64_t sub_23BDF44F4()
{
  unint64_t result;

  result = qword_256AC65C0;
  if (!qword_256AC65C0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B768, &type metadata for BrowseItemAssetLoadStatus.PendingCancellationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC65C0);
  }
  return result;
}

unint64_t sub_23BDF453C()
{
  unint64_t result;

  result = qword_256AC65C8;
  if (!qword_256AC65C8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B790, &type metadata for BrowseItemAssetLoadStatus.PendingCancellationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC65C8);
  }
  return result;
}

unint64_t sub_23BDF4584()
{
  unint64_t result;

  result = qword_256AC65D0;
  if (!qword_256AC65D0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B718, &type metadata for BrowseItemAssetLoadStatus.CancellingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC65D0);
  }
  return result;
}

unint64_t sub_23BDF45CC()
{
  unint64_t result;

  result = qword_256AC65D8;
  if (!qword_256AC65D8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B740, &type metadata for BrowseItemAssetLoadStatus.CancellingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC65D8);
  }
  return result;
}

unint64_t sub_23BDF4614()
{
  unint64_t result;

  result = qword_256AC65E0;
  if (!qword_256AC65E0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5B9E8, &type metadata for BrowseItemAssetLoadStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC65E0);
  }
  return result;
}

unint64_t sub_23BDF465C()
{
  unint64_t result;

  result = qword_256AC65E8;
  if (!qword_256AC65E8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5BA10, &type metadata for BrowseItemAssetLoadStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC65E8);
  }
  return result;
}

uint64_t sub_23BDF46B4()
{
  return swift_deallocClassInstance();
}

id static NSBundle.browse.getter()
{
  uint64_t ObjCClassFromMetadata;

  type metadata accessor for BrowseBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  return objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
}

uint64_t type metadata accessor for BrowseBundle()
{
  return objc_opt_self();
}

void *static BrowseFontTextStyle.allCases.getter()
{
  return &unk_250CDD5E0;
}

uint64_t BrowseFontTextStyle.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BDF4770 + 4 * aN[a1]))(0x746954656772616CLL, 0xEA0000000000656CLL);
}

uint64_t sub_23BDF4770()
{
  return 0x72614C6172747865;
}

unint64_t sub_23BDF4794()
{
  return 0xD000000000000010;
}

uint64_t sub_23BDF47B0()
{
  return 0x31656C746974;
}

uint64_t sub_23BDF47C4()
{
  return 0x32656C746974;
}

uint64_t sub_23BDF47D8()
{
  return 0x33656C746974;
}

uint64_t sub_23BDF47EC()
{
  return 0x656E696C64616568;
}

uint64_t sub_23BDF4804()
{
  return 0x6C64616568627573;
}

uint64_t sub_23BDF4824()
{
  return 2036625250;
}

uint64_t sub_23BDF4834()
{
  return 0x74756F6C6C6163;
}

uint64_t sub_23BDF484C()
{
  return 0x65746F6E746F6F66;
}

uint64_t sub_23BDF4864()
{
  return 0x316E6F6974706163;
}

uint64_t sub_23BDF487C()
{
  return 0x326E6F6974706163;
}

uint64_t sub_23BDF4894()
{
  return 0x336E6F6974706163;
}

uint64_t sub_23BDF48AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = BrowseFontTextStyle.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == BrowseFontTextStyle.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_23BE5AE58();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23BDF4934@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s15FitnessBrowsing19BrowseFontTextStyleO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_23BDF4960@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = BrowseFontTextStyle.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_23BDF4988(_QWORD *a1@<X8>)
{
  *a1 = &unk_250CDD5E0;
}

uint64_t sub_23BDF4998()
{
  sub_23BDF4D78();
  return sub_23BE5ACB4();
}

uint64_t sub_23BDF49F4()
{
  sub_23BDF4D78();
  return sub_23BE5ACA8();
}

uint64_t sub_23BDF4A40()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23BE5AEB8();
  BrowseFontTextStyle.rawValue.getter(v1);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t sub_23BDF4AA0()
{
  unsigned __int8 *v0;

  BrowseFontTextStyle.rawValue.getter(*v0);
  sub_23BE5AC9C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BDF4AE0()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23BE5AEB8();
  BrowseFontTextStyle.rawValue.getter(v1);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing19BrowseFontTextStyleO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_23BE5AD74();
  swift_bridgeObjectRelease();
  if (v0 >= 0xE)
    return 14;
  else
    return v0;
}

unint64_t sub_23BDF4B88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AC66E0;
  if (!qword_256AC66E0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC66E8);
    result = MEMORY[0x242612B20](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256AC66E0);
  }
  return result;
}

unint64_t sub_23BDF4BD8()
{
  unint64_t result;

  result = qword_256AC66F0;
  if (!qword_256AC66F0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontTextStyle, &type metadata for BrowseFontTextStyle);
    atomic_store(result, (unint64_t *)&qword_256AC66F0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BrowseFontTextStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseFontTextStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_23BDF4CF8 + 4 * byte_23BE5BDE3[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_23BDF4D2C + 4 * byte_23BE5BDDE[v4]))();
}

uint64_t sub_23BDF4D2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDF4D34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDF4D3CLL);
  return result;
}

uint64_t sub_23BDF4D48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDF4D50);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_23BDF4D54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDF4D5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseFontTextStyle()
{
  return &type metadata for BrowseFontTextStyle;
}

unint64_t sub_23BDF4D78()
{
  unint64_t result;

  result = qword_256AC66F8;
  if (!qword_256AC66F8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontTextStyle, &type metadata for BrowseFontTextStyle);
    atomic_store(result, (unint64_t *)&qword_256AC66F8);
  }
  return result;
}

uint64_t EditorialCollection.footnote.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EditorialCollection.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EditorialCollection.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EditorialCollection.recencyTag.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EditorialCollection.sharingURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for EditorialCollection() + 32);
  v4 = sub_23BE5A690();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for EditorialCollection()
{
  uint64_t result;

  result = qword_256AC6788;
  if (!qword_256AC6788)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t EditorialCollection.init(footnote:identifier:name:recencyTag:sharingURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  char *v10;
  uint64_t v11;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  v10 = (char *)a9 + *(int *)(type metadata accessor for EditorialCollection() + 32);
  v11 = sub_23BE5A690();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a10, v11);
}

uint64_t sub_23BDF4F4C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BDF4F7C + 4 * byte_23BE5BF40[*v0]))(0x65746F6E746F6F66, 0xE800000000000000);
}

uint64_t sub_23BDF4F7C()
{
  return 0x696669746E656469;
}

uint64_t sub_23BDF4F9C()
{
  return 1701667182;
}

uint64_t sub_23BDF4FAC()
{
  return 0x5479636E65636572;
}

uint64_t sub_23BDF4FC8()
{
  return 0x55676E6972616873;
}

uint64_t sub_23BDF4FE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDF6174(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BDF5008(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_23BDF5014()
{
  sub_23BDF5230();
  return sub_23BE5AF0C();
}

uint64_t sub_23BDF503C()
{
  sub_23BDF5230();
  return sub_23BE5AF18();
}

uint64_t EditorialCollection.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6700);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDF5230();
  sub_23BE5AF00();
  v8[15] = 0;
  sub_23BE5AE04();
  if (!v1)
  {
    v8[14] = 1;
    sub_23BE5AE28();
    v8[13] = 2;
    sub_23BE5AE04();
    v8[12] = 3;
    sub_23BE5AE04();
    type metadata accessor for EditorialCollection();
    v8[11] = 4;
    sub_23BE5A690();
    sub_23BDF23E4(&qword_256AC6710, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_23BE5AE4C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BDF5230()
{
  unint64_t result;

  result = qword_256AC6708;
  if (!qword_256AC6708)
  {
    result = MEMORY[0x242612B20](&unk_23BE5C13C, &type metadata for EditorialCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6708);
  }
  return result;
}

uint64_t EditorialCollection.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v22 = a2;
  v23 = sub_23BE5A690();
  v21 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v24 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6718);
  v4 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for EditorialCollection();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (_QWORD *)((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDF5230();
  v10 = v26;
  sub_23BE5AEF4();
  if (v10)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v26 = v7;
  v11 = v4;
  v12 = v24;
  v31 = 0;
  *v9 = sub_23BE5AD98();
  v9[1] = v13;
  v30 = 1;
  v9[2] = sub_23BE5ADBC();
  v9[3] = v14;
  v29 = 2;
  v9[4] = sub_23BE5AD98();
  v9[5] = v15;
  v28 = 3;
  v16 = sub_23BE5AD98();
  v20[1] = 0;
  v9[6] = v16;
  v9[7] = v17;
  v27 = 4;
  sub_23BDF23E4(&qword_256AC6720, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  v18 = v23;
  sub_23BE5ADE0();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v6, v25);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))((char *)v9 + *(int *)(v26 + 32), v12, v18);
  sub_23BDF55D8((uint64_t)v9, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23BDF561C((uint64_t)v9);
}

uint64_t sub_23BDF55D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EditorialCollection();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BDF561C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EditorialCollection();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BDF5658@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return EditorialCollection.init(from:)(a1, a2);
}

uint64_t sub_23BDF566C(_QWORD *a1)
{
  return EditorialCollection.encode(to:)(a1);
}

uint64_t EditorialCollection.hash(into:)()
{
  _QWORD *v0;

  if (v0[1])
  {
    sub_23BE5AED0();
    swift_bridgeObjectRetain();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BE5AED0();
  }
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  if (!v0[5])
  {
    sub_23BE5AED0();
    if (v0[7])
      goto LABEL_6;
LABEL_8:
    sub_23BE5AED0();
    goto LABEL_9;
  }
  sub_23BE5AED0();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  if (!v0[7])
    goto LABEL_8;
LABEL_6:
  sub_23BE5AED0();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
LABEL_9:
  type metadata accessor for EditorialCollection();
  sub_23BE5A690();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  return sub_23BE5AC30();
}

uint64_t EditorialCollection.hashValue.getter()
{
  sub_23BE5AEB8();
  EditorialCollection.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BDF5838()
{
  sub_23BE5AEB8();
  EditorialCollection.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BDF5878()
{
  sub_23BE5AEB8();
  EditorialCollection.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing19EditorialCollectionV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1[1];
  v5 = a2[1];
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = *a1 == *a2 && v4 == v5;
    if (!v6 && (sub_23BE5AE58() & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = a1[2] == a2[2] && a1[3] == a2[3];
  if (v7 || (sub_23BE5AE58() & 1) != 0)
  {
    v8 = a1[5];
    v9 = a2[5];
    if (v8)
    {
      if (!v9 || (a1[4] != a2[4] || v8 != v9) && (sub_23BE5AE58() & 1) == 0)
        return 0;
    }
    else if (v9)
    {
      return 0;
    }
    v10 = a1[7];
    v11 = a2[7];
    if (v10)
    {
      if (!v11 || (a1[6] != a2[6] || v10 != v11) && (sub_23BE5AE58() & 1) == 0)
        return 0;
    }
    else if (v11)
    {
      return 0;
    }
    type metadata accessor for EditorialCollection();
    JUMPOUT(0x242612094);
  }
  return 0;
}

uint64_t sub_23BDF59C4()
{
  return sub_23BDF23E4(&qword_256AC6728, (uint64_t (*)(uint64_t))type metadata accessor for EditorialCollection, (uint64_t)&protocol conformance descriptor for EditorialCollection);
}

uint64_t *initializeBufferWithCopyOfBuffer for EditorialCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = a2[7];
    v9 = *(int *)(a3 + 32);
    v10 = (char *)a2 + v9;
    v11 = (char *)a1 + v9;
    a1[6] = a2[6];
    a1[7] = v8;
    v12 = sub_23BE5A690();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v11, v10, v12);
  }
  return v3;
}

uint64_t destroy for EditorialCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_23BE5A690();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for EditorialCollection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[7];
  v8 = *(int *)(a3 + 32);
  v9 = (char *)a2 + v8;
  v10 = (char *)a1 + v8;
  a1[6] = a2[6];
  a1[7] = v7;
  v11 = sub_23BE5A690();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v9, v11);
  return a1;
}

_QWORD *assignWithCopy for EditorialCollection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for EditorialCollection(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for EditorialCollection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for EditorialCollection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BDF5DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23BE5A690();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for EditorialCollection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BDF5E4C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_23BE5A690();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_23BDF5EC0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BE5A690();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BrowseTextAlignment(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EditorialCollection.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BDF601C + 4 * byte_23BE5BF4A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BDF6050 + 4 * byte_23BE5BF45[v4]))();
}

uint64_t sub_23BDF6050(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDF6058(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDF6060);
  return result;
}

uint64_t sub_23BDF606C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDF6074);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BDF6078(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDF6080(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EditorialCollection.CodingKeys()
{
  return &type metadata for EditorialCollection.CodingKeys;
}

unint64_t sub_23BDF60A0()
{
  unint64_t result;

  result = qword_256AC67D0;
  if (!qword_256AC67D0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5C114, &type metadata for EditorialCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC67D0);
  }
  return result;
}

unint64_t sub_23BDF60E8()
{
  unint64_t result;

  result = qword_256AC67D8;
  if (!qword_256AC67D8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5C084, &type metadata for EditorialCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC67D8);
  }
  return result;
}

unint64_t sub_23BDF6130()
{
  unint64_t result;

  result = qword_256AC67E0;
  if (!qword_256AC67E0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5C0AC, &type metadata for EditorialCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC67E0);
  }
  return result;
}

uint64_t sub_23BDF6174(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65746F6E746F6F66 && a2 == 0xE800000000000000;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5479636E65636572 && a2 == 0xEA00000000006761 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x55676E6972616873 && a2 == 0xEA00000000004C52)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23BDF639C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_23BDF63B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = sub_23BE5A8C4();
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return sub_23BE5A8D0();
}

uint64_t sub_23BDF6478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v5 = sub_23BE5A8C4();
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return sub_23BE5A8D0();
}

uint64_t sub_23BDF653C@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v4 = sub_23BE5AA98();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23BE5A960();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
  {
    if (*a1 == 1)
    {
      v12 = 0xD000000000000017;
      v13 = sub_23BE5A930();
      v14 = sub_23BE5AAD4();
      sub_23BE5A948();
      (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BDF17C8], v8);
      sub_23BE5A96C();
      swift_release();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v15 = sub_23BE5A93C();
      swift_release();
      v26 = xmmword_23BE5C1F0;
      v23 = xmmword_23BE5C200;
      v25 = xmmword_23BE5C210;
      v24 = xmmword_23BE5C220;
      v16 = 0x800000023BE66140;
      result = sub_23BE5AAC8();
      v19 = v23;
      v18 = v24;
      v21 = v25;
      v20 = v26;
      v22 = v23;
    }
    else
    {
      v13 = sub_23BE5A930();
      v14 = sub_23BE5AAD4();
      sub_23BE5A954();
      v15 = sub_23BE5A93C();
      swift_release();
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDF3C28], v4);
      result = MEMORY[0x2426124F0](v7, 0.650980392, 1.0, 0.0, 1.0);
      v20 = xmmword_23BE5C1A0;
      v22 = xmmword_23BE5C1B0;
      v19 = xmmword_23BE5C1C0;
      v21 = xmmword_23BE5C1D0;
      v18 = xmmword_23BE5C1E0;
      v12 = 0xD000000000000014;
      v16 = 0x800000023BE66120;
    }
  }
  else
  {
    v12 = 0xD000000000000017;
    v13 = sub_23BE5A924();
    v14 = sub_23BE5AAD4();
    sub_23BE5A954();
    v15 = sub_23BE5A93C();
    swift_release();
    v26 = xmmword_23BE5C230;
    v23 = xmmword_23BE5C240;
    v25 = xmmword_23BE5C250;
    v24 = xmmword_23BE5C260;
    v16 = 0x800000023BE66160;
    result = sub_23BE5AAC8();
    v22 = v23;
    v18 = v24;
    v21 = v25;
    v20 = v26;
    v19 = v24;
  }
  *(_OWORD *)a2 = v18;
  *(_OWORD *)(a2 + 16) = v21;
  *(_QWORD *)(a2 + 32) = v12;
  *(_QWORD *)(a2 + 40) = v16;
  *(_OWORD *)(a2 + 48) = v19;
  *(_OWORD *)(a2 + 64) = v22;
  *(_OWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 96) = v13;
  *(_QWORD *)(a2 + 104) = v14;
  *(_QWORD *)(a2 + 112) = v15;
  *(_QWORD *)(a2 + 120) = result;
  return result;
}

uint64_t sub_23BDF6810()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6A60);
  sub_23BE000F4(&qword_256AC6A68, &qword_256AC6A60, MEMORY[0x24BE2B5E8]);
  return sub_23BE5A774();
}

uint64_t CreatePlanBannerView.init(store:createWorkoutPlanButtonViewBuilder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  sub_23BE5AB40();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)a5 = v11;
  *(_QWORD *)(a5 + 8) = v12;
  *(_QWORD *)(a5 + 16) = sub_23BDF6944;
  *(_QWORD *)(a5 + 24) = result;
  *(_BYTE *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = a3;
  *(_QWORD *)(a5 + 48) = a4;
  return result;
}

uint64_t sub_23BDF6920()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BDF6944()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_23BDF6964@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6958);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6950);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v2[1];
  v27 = *v2;
  v28 = v12;
  v14 = *v2;
  v13 = v2[1];
  v29 = v2[2];
  v30 = *((_QWORD *)v2 + 6);
  v23 = v14;
  v24 = v13;
  v25 = v2[2];
  v26 = *((_QWORD *)v2 + 6);
  sub_23BDF6810();
  swift_getKeyPath();
  sub_23BE5AC0C();
  swift_release();
  swift_release();
  v15 = *((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v16 = v23;
    v17 = swift_allocObject();
    v22[1] = a2;
    v18 = v27;
    v19 = v28;
    *(_OWORD *)(v17 + 16) = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v17 + 32) = v18;
    v20 = v29;
    *(_OWORD *)(v17 + 48) = v19;
    *(_OWORD *)(v17 + 64) = v20;
    *(_QWORD *)(v17 + 80) = v30;
    MEMORY[0x24BDAC7A8](v17);
    v22[-2] = v16;
    v22[-1] = v15;
    sub_23BDFE758((uint64_t)&v27);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6960);
    sub_23BDFF5C8();
    sub_23BE5AB64();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v7, v11, v8);
    swift_storeEnumTagMultiPayload();
    sub_23BE000F4(&qword_256AC6948, &qword_256AC6950, MEMORY[0x24BDF43B0]);
    sub_23BE5A8D0();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    sub_23BE000F4(&qword_256AC6948, &qword_256AC6950, MEMORY[0x24BDF43B0]);
    return sub_23BE5A8D0();
  }
}

uint64_t sub_23BDF6C0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a1;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC69A8);
  MEMORY[0x24BDAC7A8](v33);
  v32 = (uint64_t *)((char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = sub_23BE5A978();
  v35 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v30 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_23BE5A888();
  MEMORY[0x24BDAC7A8](v3);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6978);
  MEMORY[0x24BDAC7A8](v29);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE5A87C();
  sub_23BE5A870();
  sub_23BE5A864();
  sub_23BE5A870();
  sub_23BE5AB10();
  sub_23BE5A858();
  swift_release();
  sub_23BE5A870();
  sub_23BE5A8A0();
  v6 = sub_23BE5A9A8();
  v8 = v7;
  v10 = v9 & 1;
  sub_23BE5A930();
  v11 = sub_23BE5A99C();
  v13 = v12;
  v15 = v14;
  v28 = v16;
  swift_release();
  v17 = v15 & 1;
  sub_23BDFF4C4(v6, v8, v10);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  v19 = v35;
  v21 = v30;
  v20 = v31;
  (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v30, *MEMORY[0x24BDF1CD8], v31);
  v22 = swift_getKeyPath();
  v23 = v32;
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))((char *)v32 + *(int *)(v33 + 28), v21, v20);
  *v23 = v22;
  sub_23BDFFFD8((uint64_t)v23, (uint64_t)&v5[*(int *)(v29 + 36)], &qword_256AC69A8);
  *(_QWORD *)v5 = v11;
  *((_QWORD *)v5 + 1) = v13;
  v5[16] = v17;
  *((_QWORD *)v5 + 3) = v28;
  *((_QWORD *)v5 + 4) = KeyPath;
  *((_QWORD *)v5 + 5) = 1;
  v5[48] = 0;
  sub_23BDFF580(v11, v13, v17);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23BE000B8((uint64_t)v23, &qword_256AC69A8);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v21, v20);
  sub_23BDFF4C4(v11, v13, v17);
  swift_release();
  swift_bridgeObjectRelease();
  v24 = MEMORY[0x2426124FC](objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD4B8]), sel_initWithRed_green_blue_alpha_, 0.650980392, 1.0, 0.0, 1.0));
  v25 = v34;
  sub_23BDFFFD8((uint64_t)v5, v34, &qword_256AC6978);
  *(_QWORD *)(v25 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6960) + 36)) = v24;
  return sub_23BE000B8((uint64_t)v5, &qword_256AC6978);
}

uint64_t sub_23BDF6FC8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v15 - v10;
  (*(void (**)(uint64_t))(v2 + 40))(v9);
  v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v12(v11, v8, v4);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  v12(a2, v11, v4);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
}

uint64_t sub_23BDF7090@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _BYTE *, uint64_t);
  void (*v18)(_BYTE *, uint64_t);
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  _QWORD v25[2];
  _OWORD v26[3];
  uint64_t v27;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = sub_23BE5A8DC();
  v7 = sub_23BE5AB04();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v13 = &v20[-v12];
  v14 = *(_OWORD *)(v2 + 16);
  v26[0] = *(_OWORD *)v2;
  v26[1] = v14;
  v26[2] = *(_OWORD *)(v2 + 32);
  v27 = *(_QWORD *)(v2 + 48);
  v15 = *(_QWORD *)(a1 + 24);
  v21 = v5;
  v22 = v15;
  v23 = v26;
  v25[0] = sub_23BDFF4FC();
  v25[1] = v15;
  v16 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v6, v25);
  sub_23BE5AAF8();
  v24 = v16;
  MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v7, &v24);
  v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16);
  v17(v13, v11, v7);
  v18 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v18(v11, v7);
  v17(a2, v13, v7);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v13, v7);
}

uint64_t sub_23BDF7210@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t PlanBannerView;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v33 = a4;
  v29 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v30 = (char *)&v28 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC67F0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23BE5A8DC();
  v31 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v28 - v15;
  v17 = a1[1];
  v35 = *a1;
  v36 = v17;
  v37 = a1[2];
  v38 = *((_QWORD *)a1 + 6);
  v32 = a3;
  PlanBannerView = type metadata accessor for CreatePlanBannerView(0, a2, a3, v18);
  sub_23BDF6810();
  swift_getKeyPath();
  sub_23BE5AC0C();
  swift_release();
  swift_release();
  if (v35 > 1u)
  {
    sub_23BDF6FC8(PlanBannerView, v9);
    v22 = v29;
    v23 = v30;
    v24 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    v24(v30, v9, a2);
    v25 = *(void (**)(char *, uint64_t))(v22 + 8);
    v25(v9, a2);
    v24(v9, v23, a2);
    sub_23BDFF4FC();
    v21 = v32;
    sub_23BDF6478((uint64_t)v9, v11, a2);
    v25(v9, a2);
    v25(v23, a2);
  }
  else
  {
    v20 = a1[1];
    v35 = *a1;
    v36 = v20;
    v37 = a1[2];
    v38 = *((_QWORD *)a1 + 6);
    sub_23BDF6964(PlanBannerView, (uint64_t)v13);
    sub_23BDFF4FC();
    v21 = v32;
    sub_23BDF63B4((uint64_t)v13, v11);
    sub_23BE000B8((uint64_t)v13, &qword_256AC67F0);
  }
  v34[0] = sub_23BDFF4FC();
  v34[1] = v21;
  MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v14, v34);
  v26 = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(v33, v16, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v16, v14);
}

uint64_t sub_23BDF74C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  _QWORD v31[2];
  _OWORD v32[3];
  uint64_t v33;

  v25 = a2;
  v26 = a3;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  v24 = *(_QWORD *)(a2 + 16);
  sub_23BE5A8DC();
  sub_23BE5AB04();
  swift_getTupleTypeMetadata3();
  v6 = sub_23BE5ABD0();
  MEMORY[0x242612B20](MEMORY[0x24BDF5428], v6);
  v7 = sub_23BE5AB94();
  v23 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v23 - v8;
  v10 = sub_23BE5A7EC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v23 - v15;
  v17 = *(_OWORD *)(v3 + 16);
  v32[0] = *(_OWORD *)v3;
  v32[1] = v17;
  v32[2] = *(_OWORD *)(v3 + 32);
  v33 = *(_QWORD *)(v3 + 48);
  sub_23BE5A8B8();
  v18 = *(_QWORD *)(v25 + 24);
  v27 = v24;
  v28 = v18;
  v29 = v32;
  v30 = a1;
  sub_23BE5AB88();
  v19 = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v7);
  sub_23BE5AA50();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
  v31[0] = v19;
  v31[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242612B20](MEMORY[0x24BDED308], v10, v31);
  v20 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v20(v16, v14, v10);
  v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v14, v10);
  v20(v26, v16, v10);
  return ((uint64_t (*)(char *, uint64_t))v21)(v16, v10);
}

uint64_t sub_23BDF774C(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v4 = a1;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    MEMORY[0x24BDAC7A8](a1);
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return sub_23BE5ABDC();
  }
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return sub_23BE5ABDC();
}

uint64_t sub_23BDF7900@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, uint64_t);
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  _QWORD v46[2];
  _OWORD v47[3];
  uint64_t v48;

  v4 = v3;
  v41 = a3;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  v38 = *(_QWORD *)(a2 + 16);
  sub_23BE5A8DC();
  sub_23BE5AB04();
  swift_getTupleTypeMetadata3();
  v34 = sub_23BE5ABD0();
  v33[1] = MEMORY[0x242612B20](MEMORY[0x24BDF5428], v34);
  v7 = sub_23BE5AB94();
  v35 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v33 - v8;
  v10 = sub_23BE5A7EC();
  v11 = *(_QWORD *)(v10 - 8);
  v36 = v10;
  v40 = v11;
  MEMORY[0x24BDAC7A8](v10);
  v33[0] = (char *)v33 - v12;
  v46[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v7);
  v46[1] = MEMORY[0x24BDECC60];
  v37 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v10, v46);
  *(_QWORD *)&v47[0] = v10;
  *((_QWORD *)&v47[0] + 1) = v37;
  v13 = MEMORY[0x242612AB4](0, v47, MEMORY[0x24BDF3110], 0);
  v39 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v33 - v17;
  v19 = *(_OWORD *)(v4 + 16);
  v47[0] = *(_OWORD *)v4;
  v47[1] = v19;
  v47[2] = *(_OWORD *)(v4 + 32);
  v48 = *(_QWORD *)(v4 + 48);
  sub_23BE5A8B8();
  v20 = *(_QWORD *)(a2 + 24);
  v21 = v38;
  v42 = v38;
  v43 = v20;
  v44 = v47;
  v45 = a1;
  sub_23BE5AB88();
  v22 = v33[0];
  sub_23BE5AA50();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v7);
  sub_23BE5A900();
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v21;
  *(_QWORD *)(v23 + 24) = v20;
  v24 = a1[5];
  *(_OWORD *)(v23 + 96) = a1[4];
  *(_OWORD *)(v23 + 112) = v24;
  v25 = a1[7];
  *(_OWORD *)(v23 + 128) = a1[6];
  *(_OWORD *)(v23 + 144) = v25;
  v26 = a1[1];
  *(_OWORD *)(v23 + 32) = *a1;
  *(_OWORD *)(v23 + 48) = v26;
  v27 = a1[3];
  *(_OWORD *)(v23 + 64) = a1[2];
  *(_OWORD *)(v23 + 80) = v27;
  sub_23BDFF880((uint64_t)a1);
  sub_23BE5ABA0();
  v28 = v36;
  sub_23BE5AA20();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v22, v28);
  v29 = v39;
  v30 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v30(v18, v16, v13);
  v31 = *(void (**)(char *, uint64_t))(v29 + 8);
  v31(v16, v13);
  v30(v41, v18, v13);
  return ((uint64_t (*)(char *, uint64_t))v31)(v18, v13);
}

uint64_t sub_23BDF7C7C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_BYTE *, uint64_t);
  _BYTE v55[12];
  int v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*PlanBannerView)(_BYTE *, uint64_t);
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[3];
  __int128 v75;
  char v76;
  uint64_t v77;
  uint64_t v78[3];
  uint64_t v79;
  _QWORD v80[3];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v63 = (void (*)(_BYTE *, _BYTE *, uint64_t))a4;
  v66 = a5;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  v64 = sub_23BE5A8DC();
  v70 = sub_23BE5AB04();
  v65 = *(_QWORD *)(v70 - 8);
  v9 = MEMORY[0x24BDAC7A8](v70);
  v68 = &v55[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v69 = &v55[-v11];
  v12 = a1[1];
  v81 = *a1;
  v82 = v12;
  v83 = a1[2];
  v84 = *((_QWORD *)a1 + 6);
  PlanBannerView = (void (*)(_BYTE *, uint64_t))type metadata accessor for CreatePlanBannerView(0, a3, a4, v13);
  sub_23BDF6810();
  swift_getKeyPath();
  sub_23BE5AC0C();
  swift_release();
  swift_release();
  v75 = v81;
  v58 = sub_23BDFF480();
  v14 = sub_23BE5A9B4();
  v16 = v15;
  v18 = v17 & 1;
  v19 = sub_23BE5A99C();
  v21 = v20;
  v23 = v22 & 1;
  sub_23BDFF4C4(v14, v16, v18);
  swift_bridgeObjectRelease();
  v86 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)&v81 = v86;
  swift_retain();
  v61 = sub_23BE5A984();
  v60 = v24;
  v62 = v25;
  v59 = v26 & 1;
  sub_23BDFF4C4(v19, v21, v23);
  swift_bridgeObjectRelease();
  sub_23BDFF4D4((uint64_t)&v86);
  v27 = a1[1];
  v81 = *a1;
  v82 = v27;
  v83 = a1[2];
  v84 = *((_QWORD *)a1 + 6);
  sub_23BDF6810();
  swift_getKeyPath();
  sub_23BE5AC0C();
  swift_release();
  swift_release();
  v75 = v81;
  v28 = sub_23BE5A9B4();
  v30 = v29;
  LOBYTE(v19) = v31 & 1;
  v32 = sub_23BE5A99C();
  v34 = v33;
  v36 = v35 & 1;
  sub_23BDFF4C4(v28, v30, v19);
  swift_bridgeObjectRelease();
  v85 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)&v81 = v85;
  swift_retain();
  v37 = sub_23BE5A984();
  v58 = v38;
  v57 = v39;
  v56 = v40 & 1;
  sub_23BDFF4C4(v32, v34, v36);
  swift_bridgeObjectRelease();
  sub_23BDFF4D4((uint64_t)&v85);
  v41 = v68;
  sub_23BDF7090((uint64_t)PlanBannerView, v68);
  v80[0] = sub_23BDFF4FC();
  v80[1] = v63;
  v79 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v64, v80);
  v42 = v70;
  v64 = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v70, &v79);
  v43 = v65;
  v63 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v65 + 16);
  v44 = v69;
  v45 = (uint64_t)v41;
  v63(v69, v41, v42);
  PlanBannerView = *(void (**)(_BYTE *, uint64_t))(v43 + 8);
  PlanBannerView(v41, v42);
  v46 = v61;
  v47 = v60;
  *(_QWORD *)&v81 = v61;
  *((_QWORD *)&v81 + 1) = v60;
  LOBYTE(v19) = v59;
  LOBYTE(v82) = v59;
  *((_QWORD *)&v82 + 1) = v62;
  *(_QWORD *)&v75 = v37;
  v48 = v58;
  *((_QWORD *)&v75 + 1) = v58;
  LOBYTE(v41) = v56;
  v76 = v56;
  v77 = v57;
  v78[0] = (uint64_t)&v81;
  v78[1] = (uint64_t)&v75;
  v49 = v44;
  v50 = v70;
  v63((_BYTE *)v45, v49, v70);
  v78[2] = v45;
  sub_23BDFF580(v46, v47, v19);
  swift_bridgeObjectRetain();
  sub_23BDFF580(v37, v48, (char)v41);
  swift_bridgeObjectRetain();
  v74[0] = MEMORY[0x24BDF1FA8];
  v74[1] = MEMORY[0x24BDF1FA8];
  v74[2] = v50;
  v71 = MEMORY[0x24BDF1F80];
  v72 = MEMORY[0x24BDF1F80];
  v73 = v64;
  sub_23BDF774C(v78, 3uLL, (uint64_t)v74);
  v51 = v50;
  v52 = v50;
  v53 = PlanBannerView;
  PlanBannerView(v69, v51);
  sub_23BDFF4C4(v37, v48, (char)v41);
  swift_bridgeObjectRelease();
  sub_23BDFF4C4(v46, v47, v19);
  swift_bridgeObjectRelease();
  v53(v68, v52);
  sub_23BDFF4C4(v75, *((uint64_t *)&v75 + 1), v76);
  swift_bridgeObjectRelease();
  sub_23BDFF4C4(v81, *((uint64_t *)&v81 + 1), v82);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BDF8294@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, uint64_t);
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  _QWORD v46[2];
  _OWORD v47[3];
  uint64_t v48;

  v4 = v3;
  v41 = a3;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  v39 = *(_QWORD *)(a2 + 16);
  sub_23BE5A8DC();
  sub_23BE5AB04();
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v34 = sub_23BE5ABD0();
  v33[1] = MEMORY[0x242612B20](MEMORY[0x24BDF5428], v34);
  v7 = sub_23BE5AB94();
  v35 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v33 - v8;
  v10 = sub_23BE5A7EC();
  v11 = *(_QWORD *)(v10 - 8);
  v36 = v10;
  v40 = v11;
  MEMORY[0x24BDAC7A8](v10);
  v33[0] = (char *)v33 - v12;
  v46[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v7);
  v46[1] = MEMORY[0x24BDECC60];
  v37 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v10, v46);
  *(_QWORD *)&v47[0] = v10;
  *((_QWORD *)&v47[0] + 1) = v37;
  v13 = MEMORY[0x242612AB4](0, v47, MEMORY[0x24BDF3110], 0);
  v38 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v33 - v17;
  v19 = *(_OWORD *)(v4 + 16);
  v47[0] = *(_OWORD *)v4;
  v47[1] = v19;
  v47[2] = *(_OWORD *)(v4 + 32);
  v48 = *(_QWORD *)(v4 + 48);
  sub_23BE5A8B8();
  v20 = *(_QWORD *)(a2 + 24);
  v21 = v39;
  v42 = v39;
  v43 = v20;
  v44 = v47;
  v45 = a1;
  sub_23BE5AB88();
  v22 = v33[0];
  sub_23BE5AA50();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v7);
  sub_23BE5A900();
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v21;
  *(_QWORD *)(v23 + 24) = v20;
  v24 = a1[5];
  *(_OWORD *)(v23 + 96) = a1[4];
  *(_OWORD *)(v23 + 112) = v24;
  v25 = a1[7];
  *(_OWORD *)(v23 + 128) = a1[6];
  *(_OWORD *)(v23 + 144) = v25;
  v26 = a1[1];
  *(_OWORD *)(v23 + 32) = *a1;
  *(_OWORD *)(v23 + 48) = v26;
  v27 = a1[3];
  *(_OWORD *)(v23 + 64) = a1[2];
  *(_OWORD *)(v23 + 80) = v27;
  sub_23BDFF880((uint64_t)a1);
  sub_23BE5ABA0();
  v28 = v36;
  sub_23BE5AA20();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v22, v28);
  v29 = v38;
  v30 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  v30(v18, v16, v13);
  v31 = *(void (**)(char *, uint64_t))(v29 + 8);
  v31(v16, v13);
  v30(v41, v18, v13);
  return ((uint64_t (*)(char *, uint64_t))v31)(v18, v13);
}

uint64_t sub_23BDF8630@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t PlanBannerView;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  void (*v32)(uint64_t, uint64_t);
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  _BYTE *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66[2];
  _QWORD v67[2];
  uint64_t v68;
  _QWORD v69[4];
  char v70;
  __int128 v71;
  char v72;
  uint64_t v73;
  __int128 v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  __int128 v79;
  uint64_t v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  _OWORD v87[15];
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v5 = a4;
  v35 = a4;
  v37 = a1;
  v46 = a5;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  v36 = a3;
  v41 = sub_23BE5A8DC();
  v9 = sub_23BE5AB04();
  v45 = *(_QWORD *)(v9 - 8);
  v40 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v38 = (char *)v34 - v10;
  v11 = sub_23BE5A7EC();
  v12 = *(_QWORD *)(v11 - 8);
  v43 = v11;
  v44 = v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v39 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v42 = (char *)v34 - v15;
  v16 = sub_23BE5A8B8();
  sub_23BDF8AB8(a1, a2, a3, v5, (uint64_t)&v89);
  v17 = v89;
  LOBYTE(a3) = v90;
  v18 = *((_QWORD *)&v92 + 1);
  v19 = v93;
  LOBYTE(v5) = BYTE8(v93);
  v34[0] = *((_QWORD *)&v94 + 1);
  v34[1] = v94;
  v86 = 0;
  v85 = v90;
  v84 = v92;
  v83 = BYTE8(v93);
  v82 = BYTE8(v95);
  v69[2] = v16;
  v69[3] = 0x4024000000000000;
  v70 = 0;
  v71 = v89;
  v72 = v90;
  v73 = *((_QWORD *)&v90 + 1);
  v74 = v91;
  v75 = v92;
  v76 = *((_QWORD *)&v92 + 1);
  v77 = v93;
  v78 = BYTE8(v93);
  v79 = v94;
  v80 = v95;
  v81 = BYTE8(v95);
  sub_23BE5ABA0();
  sub_23BDF8E50(0.0, 1, 0.0, 1, 760.0, 0, 0.0, 1, (uint64_t)v87, 0.0, 1, 0.0, 1);
  sub_23BDFF4C4(v17, *((uint64_t *)&v17 + 1), a3);
  swift_release();
  swift_bridgeObjectRelease();
  sub_23BDFF4C4(v18, v19, v5);
  swift_release();
  swift_bridgeObjectRelease();
  v20 = v35;
  PlanBannerView = type metadata accessor for CreatePlanBannerView(0, v36, v35, v21);
  v23 = v38;
  sub_23BDF7090(PlanBannerView, v38);
  sub_23BE5ABA0();
  v69[0] = sub_23BDFF4FC();
  v69[1] = v20;
  v68 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v41, v69);
  v24 = v40;
  v25 = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v40, &v68);
  v26 = (uint64_t)v39;
  sub_23BE5AA2C();
  (*(void (**)(_BYTE *, uint64_t))(v45 + 8))(v23, v24);
  v67[0] = v25;
  v67[1] = MEMORY[0x24BDEBEE0];
  v27 = v43;
  v28 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v43, v67);
  v29 = v44;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  v31 = v42;
  v30(v42, v26, v27);
  v32 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v32(v26, v27);
  v62 = v87[12];
  v63 = v87[13];
  v64 = v87[14];
  v65 = v88;
  v58 = v87[8];
  v59 = v87[9];
  v60 = v87[10];
  v61 = v87[11];
  v54 = v87[4];
  v55 = v87[5];
  v56 = v87[6];
  v57 = v87[7];
  v50 = v87[0];
  v51 = v87[1];
  v52 = v87[2];
  v53 = v87[3];
  v66[0] = (uint64_t)&v50;
  v30((char *)v26, (uint64_t)v31, v27);
  v66[1] = v26;
  sub_23BDFFA40((uint64_t)v87);
  v49[0] = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC67F8);
  v49[1] = v27;
  v47 = sub_23BDFF934();
  v48 = v28;
  sub_23BDF774C(v66, 2uLL, (uint64_t)v49);
  v32((uint64_t)v31, v27);
  sub_23BDFF9B8((uint64_t)v87);
  v32(v26, v27);
  v101 = v62;
  v102 = v63;
  v103 = v64;
  v104 = v65;
  v97 = v58;
  v98 = v59;
  v99 = v60;
  v100 = v61;
  v93 = v54;
  v94 = v55;
  v95 = v56;
  v96 = v57;
  v89 = v50;
  v90 = v51;
  v91 = v52;
  v92 = v53;
  return sub_23BDFF9B8((uint64_t)&v89);
}

uint64_t sub_23BDF8AB8@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 *v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t KeyPath;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v6 = a1;
  v8 = a1[1];
  v46 = *a1;
  v47 = v8;
  v48 = a1[2];
  v49 = *((_QWORD *)a1 + 6);
  type metadata accessor for CreatePlanBannerView(0, a3, a4, a4);
  sub_23BDF6810();
  swift_getKeyPath();
  sub_23BE5AC0C();
  swift_release();
  swift_release();
  sub_23BDFF480();
  v9 = sub_23BE5A9B4();
  v11 = v10;
  v13 = v12 & 1;
  v14 = sub_23BE5A99C();
  v16 = v15;
  v18 = v17 & 1;
  sub_23BDFF4C4(v9, v11, v13);
  swift_bridgeObjectRelease();
  v50 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)&v46 = v50;
  swift_retain();
  v19 = sub_23BE5A984();
  v43 = v20;
  v44 = v19;
  v45 = v21;
  v42 = v22 & 1;
  sub_23BDFF4C4(v14, v16, v18);
  swift_bridgeObjectRelease();
  sub_23BDFF4D4((uint64_t)&v50);
  KeyPath = swift_getKeyPath();
  v23 = v6[1];
  v46 = *v6;
  v47 = v23;
  v48 = v6[2];
  v49 = *((_QWORD *)v6 + 6);
  sub_23BDF6810();
  swift_getKeyPath();
  sub_23BE5AC0C();
  swift_release();
  swift_release();
  v24 = sub_23BE5A9B4();
  v26 = v25;
  v28 = v27 & 1;
  v29 = sub_23BE5A99C();
  v31 = v30;
  LOBYTE(v11) = v32 & 1;
  sub_23BDFF4C4(v24, v26, v28);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v46 = *(_QWORD *)(a2 + 104);
  swift_retain();
  v33 = sub_23BE5A984();
  v35 = v34;
  v37 = v36;
  LOBYTE(v6) = v38 & 1;
  sub_23BDFF4C4(v29, v31, v11);
  swift_bridgeObjectRelease();
  sub_23BDFF4D4((uint64_t)&v46);
  v39 = swift_getKeyPath();
  *(_QWORD *)a5 = v44;
  *(_QWORD *)(a5 + 8) = v43;
  *(_BYTE *)(a5 + 16) = v42;
  *(_QWORD *)(a5 + 24) = v45;
  *(_QWORD *)(a5 + 32) = KeyPath;
  *(_QWORD *)(a5 + 40) = 2;
  *(_BYTE *)(a5 + 48) = 0;
  *(_QWORD *)(a5 + 56) = v33;
  *(_QWORD *)(a5 + 64) = v35;
  *(_BYTE *)(a5 + 72) = (_BYTE)v6;
  *(_QWORD *)(a5 + 80) = v37;
  *(_QWORD *)(a5 + 88) = v39;
  *(_QWORD *)(a5 + 96) = 3;
  *(_BYTE *)(a5 + 104) = 0;
  sub_23BDFF580(v44, v43, v42);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23BDFF580(v33, v35, (char)v6);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23BDFF4C4(v33, v35, (char)v6);
  swift_release();
  swift_bridgeObjectRelease();
  sub_23BDFF4C4(v44, v43, v42);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BDF8E50@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  uint64_t v13;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BE5AD20();
    v23 = (void *)sub_23BE5A8F4();
    sub_23BE5A768();

  }
  sub_23BE5A810();
  v24 = *(_OWORD *)(v13 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(_OWORD *)(a9 + 112) = v24;
  v25 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v25;
  v26 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v26;
  v27 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v27;
  *(_OWORD *)(a9 + 184) = v32;
  *(_OWORD *)(a9 + 200) = v33;
  *(_OWORD *)(a9 + 216) = v34;
  *(_OWORD *)(a9 + 232) = v35;
  *(_OWORD *)(a9 + 136) = v29;
  *(_OWORD *)(a9 + 152) = v30;
  *(_BYTE *)(a9 + 128) = *(_BYTE *)(v13 + 128);
  *(_OWORD *)(a9 + 168) = v31;
  return sub_23BDFFA40(v13);
}

uint64_t sub_23BDF901C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  _QWORD v54[2];
  _OWORD v55[3];
  uint64_t v56;

  v5 = v4;
  v40 = a3;
  v39 = a2;
  v41 = a1;
  v42 = a4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  v38 = *(_QWORD *)(a3 + 16);
  sub_23BE5A8DC();
  sub_23BE5AB04();
  swift_getTupleTypeMetadata3();
  v7 = sub_23BE5ABD0();
  v8 = MEMORY[0x24BDF5428];
  MEMORY[0x242612B20](MEMORY[0x24BDF5428], v7);
  v9 = sub_23BE5AB94();
  v10 = sub_23BE5A7EC();
  v11 = MEMORY[0x24BDF4700];
  v54[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v9);
  v54[1] = MEMORY[0x24BDECC60];
  v12 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v10, v54);
  *(_QWORD *)&v55[0] = v10;
  *((_QWORD *)&v55[0] + 1) = v12;
  v13 = MEMORY[0x24BDF3110];
  MEMORY[0x242612AB4](255, v55, MEMORY[0x24BDF3110], 0);
  v37 = sub_23BE5A8DC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F8);
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v14 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v8, v14);
  v15 = sub_23BE5AB94();
  v16 = sub_23BE5A7EC();
  v53[0] = MEMORY[0x242612B20](v11, v15);
  v53[1] = MEMORY[0x24BDECC60];
  v17 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v16, v53);
  *(_QWORD *)&v55[0] = v16;
  *((_QWORD *)&v55[0] + 1) = v17;
  MEMORY[0x242612AB4](255, v55, v13, 0);
  v18 = sub_23BE5A8DC();
  v19 = sub_23BE5AB04();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v37 - v24;
  v26 = *v39;
  v27 = *(_OWORD *)(v5 + 16);
  v55[0] = *(_OWORD *)v5;
  v55[1] = v27;
  v55[2] = *(_OWORD *)(v5 + 32);
  v56 = *(_QWORD *)(v5 + 48);
  v28 = *(_QWORD *)(v40 + 24);
  v43 = v38;
  v44 = v28;
  v45 = v26;
  v46 = v55;
  v47 = v41;
  v51 = v10;
  v52 = v12;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v50[0] = v12;
  v50[1] = OpaqueTypeConformance2;
  v30 = MEMORY[0x24BDEF3E0];
  v31 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v37, v50);
  v51 = v16;
  v52 = v17;
  v32 = swift_getOpaqueTypeConformance2();
  v49[0] = v31;
  v49[1] = v32;
  v33 = MEMORY[0x242612B20](v30, v18, v49);
  sub_23BE5AAF8();
  v48 = v33;
  MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v19, &v48);
  v34 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v34(v25, v23, v19);
  v35 = *(void (**)(char *, uint64_t))(v20 + 8);
  v35(v23, v19);
  v34(v42, v25, v19);
  return ((uint64_t (*)(char *, uint64_t))v35)(v25, v19);
}

uint64_t sub_23BDF941C@<X0>(int a1@<W0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t PlanBannerView;
  uint64_t v43;
  uint64_t OpaqueTypeConformance2;
  void (*v45)(char *, char *, uint64_t);
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  void (*v55)(char *, uint64_t);
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[2];
  _QWORD v98[2];
  _QWORD v99[2];
  _QWORD v100[2];
  _QWORD v101[2];
  _QWORD v102[2];
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[2];

  v86 = a5;
  v87 = a3;
  v88 = a2;
  v84 = a1;
  v96 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  v85 = a4;
  sub_23BE5A8DC();
  sub_23BE5AB04();
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v7 = sub_23BE5ABD0();
  v8 = MEMORY[0x24BDF5428];
  MEMORY[0x242612B20](MEMORY[0x24BDF5428], v7);
  v9 = sub_23BE5AB94();
  v10 = sub_23BE5A7EC();
  v11 = MEMORY[0x24BDF4700];
  v12 = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v9);
  v13 = MEMORY[0x24BDECC60];
  v105[0] = v12;
  v105[1] = MEMORY[0x24BDECC60];
  v14 = MEMORY[0x24BDED308];
  v94 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v10, v105);
  v95 = v10;
  v103 = v10;
  v104 = v94;
  v15 = MEMORY[0x24BDF3110];
  v16 = MEMORY[0x242612AB4](0, &v103, MEMORY[0x24BDF3110], 0);
  v79 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v81 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v80 = (char *)&v78 - v19;
  swift_getTupleTypeMetadata3();
  v20 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v8, v20);
  v21 = sub_23BE5AB94();
  v22 = sub_23BE5A7EC();
  v102[0] = MEMORY[0x242612B20](v11, v21);
  v102[1] = v13;
  v23 = MEMORY[0x242612B20](v14, v22, v102);
  v103 = v22;
  v104 = v23;
  v92 = v23;
  v24 = MEMORY[0x242612AB4](0, &v103, v15, 0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v78 - v29;
  v31 = sub_23BE5A8DC();
  v83 = *(_QWORD *)(v31 - 8);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v82 = (char *)&v78 - v33;
  v34 = *(_QWORD *)(v22 - 8);
  v35 = MEMORY[0x24BDAC7A8](v32);
  v37 = (char *)&v78 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)&v78 - v38;
  v93 = v16;
  v91 = sub_23BE5A8DC();
  v90 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  v89 = (char *)&v78 - v41;
  if ((_BYTE)v84)
  {
    if (v84 == 1)
    {
      PlanBannerView = type metadata accessor for CreatePlanBannerView(0, v85, v86, v40);
      sub_23BDF7900(v87, PlanBannerView, v28);
      v43 = v92;
      v103 = v22;
      v104 = v92;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      v45 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
      v45(v30, v28, v24);
      v46 = *(void (**)(char *, uint64_t))(v25 + 8);
      v46(v28, v24);
      v45(v28, v30, v24);
      v88 = (uint64_t)v30;
      v47 = (uint64_t)v82;
      sub_23BDF6478((uint64_t)v28, v22, v24);
      v46(v28, v24);
      v98[0] = v43;
      v98[1] = OpaqueTypeConformance2;
      MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v31, v98);
      v49 = v94;
      v48 = v95;
      v103 = v95;
      v104 = v94;
      swift_getOpaqueTypeConformance2();
      v50 = v89;
      sub_23BDF63B4(v47, v31);
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v47, v31);
      v51 = v24;
      v52 = v50;
      v46((char *)v88, v51);
    }
    else
    {
      v62 = type metadata accessor for CreatePlanBannerView(0, v85, v86, v40);
      v63 = v81;
      sub_23BDF8294(v87, v62, v81);
      v49 = v94;
      v48 = v95;
      v103 = v95;
      v104 = v94;
      v88 = swift_getOpaqueTypeConformance2();
      v64 = v79;
      v65 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
      v66 = v80;
      v67 = v93;
      v65(v80, v63, v93);
      v68 = *(void (**)(char *, uint64_t))(v64 + 8);
      v68(v63, v67);
      v65(v63, v66, v67);
      v43 = v92;
      v103 = v22;
      v104 = v92;
      v69 = swift_getOpaqueTypeConformance2();
      v101[0] = v43;
      v101[1] = v69;
      MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v31, v101);
      v70 = v89;
      sub_23BDF6478((uint64_t)v63, v31, v67);
      v68(v63, v67);
      v68(v66, v67);
      v52 = v70;
    }
  }
  else
  {
    v53 = type metadata accessor for CreatePlanBannerView(0, v85, v86, v40);
    sub_23BDF74C4((uint64_t)v87, v53, v37);
    v54 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v54(v39, v37, v22);
    v55 = *(void (**)(char *, uint64_t))(v34 + 8);
    v55(v37, v22);
    v56 = v55;
    v54(v37, v39, v22);
    v57 = v92;
    v103 = v22;
    v104 = v92;
    v58 = swift_getOpaqueTypeConformance2();
    v59 = (uint64_t)v82;
    sub_23BDF63B4((uint64_t)v37, v22);
    v56(v37, v22);
    v60 = v56;
    v97[0] = v57;
    v97[1] = v58;
    MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v31, v97);
    v49 = v94;
    v48 = v95;
    v103 = v95;
    v104 = v94;
    swift_getOpaqueTypeConformance2();
    v52 = v89;
    sub_23BDF63B4(v59, v31);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v59, v31);
    v61 = v39;
    v43 = v57;
    v60(v61, v22);
  }
  v103 = v22;
  v104 = v43;
  v71 = swift_getOpaqueTypeConformance2();
  v100[0] = v43;
  v100[1] = v71;
  v72 = MEMORY[0x24BDEF3E0];
  v73 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v31, v100);
  v103 = v48;
  v104 = v49;
  v74 = swift_getOpaqueTypeConformance2();
  v99[0] = v73;
  v99[1] = v74;
  v75 = v91;
  MEMORY[0x242612B20](v72, v91, v99);
  v76 = v90;
  (*(void (**)(uint64_t, char *, uint64_t))(v90 + 16))(v96, v52, v75);
  return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v52, v75);
}

uint64_t sub_23BDF9C40@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, uint64_t);
  _QWORD v33[2];
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  char v42;
  _QWORD v43[2];
  _QWORD v44[2];
  _OWORD v45[3];
  uint64_t v46;

  v34 = a3;
  v35 = a2;
  v36 = a1;
  v37 = a4;
  v33[1] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6808);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  v33[0] = *(_QWORD *)(a3 + 16);
  sub_23BE5A8DC();
  sub_23BE5AB04();
  swift_getTupleTypeMetadata3();
  v6 = sub_23BE5ABD0();
  v7 = MEMORY[0x24BDF5428];
  MEMORY[0x242612B20](MEMORY[0x24BDF5428], v6);
  v8 = sub_23BE5AB94();
  v9 = sub_23BE5A7EC();
  v10 = MEMORY[0x24BDF4700];
  v11 = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v8);
  v12 = MEMORY[0x24BDECC60];
  v44[0] = v11;
  v44[1] = MEMORY[0x24BDECC60];
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v9, v44);
  *(_QWORD *)&v45[0] = v9;
  *((_QWORD *)&v45[0] + 1) = v14;
  v15 = MEMORY[0x24BDF3110];
  MEMORY[0x242612AB4](255, v45, MEMORY[0x24BDF3110], 0);
  sub_23BE5A8DC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F8);
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v16 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v7, v16);
  v17 = sub_23BE5AB94();
  v18 = sub_23BE5A7EC();
  v43[0] = MEMORY[0x242612B20](v10, v17);
  v43[1] = v12;
  v19 = MEMORY[0x242612B20](v13, v18, v43);
  *(_QWORD *)&v45[0] = v18;
  *((_QWORD *)&v45[0] + 1) = v19;
  MEMORY[0x242612AB4](255, v45, v15, 0);
  sub_23BE5A8DC();
  sub_23BE5AB04();
  sub_23BE5A7EC();
  sub_23BE5A7EC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6810);
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v20 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v7, v20);
  v21 = sub_23BE5AB7C();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v33 - v26;
  LOBYTE(v13) = *v35;
  v28 = *(_OWORD *)(v4 + 16);
  v45[0] = *(_OWORD *)v4;
  v45[1] = v28;
  v45[2] = *(_OWORD *)(v4 + 32);
  v46 = *(_QWORD *)(v4 + 48);
  sub_23BE5A84C();
  v29 = *(_QWORD *)(v34 + 24);
  v38 = v33[0];
  v39 = v29;
  v40 = v36;
  v41 = v45;
  v42 = v13;
  sub_23BE5AB70();
  MEMORY[0x242612B20](MEMORY[0x24BDF4498], v21);
  v30 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  v30(v27, v25, v21);
  v31 = *(void (**)(char *, uint64_t))(v22 + 8);
  v31(v25, v21);
  v30(v37, v27, v21);
  return ((uint64_t (*)(char *, uint64_t))v31)(v27, v21);
}

uint64_t sub_23BDFA038@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t ObjCClassFromMetadata;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  uint64_t OpaqueTypeConformance2;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t PlanBannerView;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD v118[2];
  _QWORD v119[2];
  _QWORD v120[2];
  _QWORD v121[2];
  uint64_t v122;
  _QWORD v123[2];
  _QWORD v124[2];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  _QWORD v130[2];
  _QWORD v131[3];
  char v132;
  uint64_t v133;
  char v134;
  __int128 v135;

  v111 = a5;
  v112 = a4;
  v105 = a3;
  v92 = a2;
  v108 = (uint64_t *)a1;
  v106 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  sub_23BE5A8DC();
  sub_23BE5AB04();
  swift_getTupleTypeMetadata3();
  v6 = sub_23BE5ABD0();
  v7 = MEMORY[0x24BDF5428];
  MEMORY[0x242612B20](MEMORY[0x24BDF5428], v6);
  v8 = sub_23BE5AB94();
  v9 = sub_23BE5A7EC();
  v10 = MEMORY[0x24BDF4700];
  v11 = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v8);
  v12 = MEMORY[0x24BDECC60];
  v131[0] = v11;
  v131[1] = MEMORY[0x24BDECC60];
  v13 = MEMORY[0x24BDED308];
  v100 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v9, v131);
  *(_QWORD *)&v125 = v9;
  *((_QWORD *)&v125 + 1) = v100;
  v97 = v9;
  v14 = MEMORY[0x24BDF3110];
  MEMORY[0x242612AB4](255, &v125, MEMORY[0x24BDF3110], 0);
  v86 = sub_23BE5A8DC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F8);
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v15 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v7, v15);
  v16 = sub_23BE5AB94();
  v17 = sub_23BE5A7EC();
  v130[0] = MEMORY[0x242612B20](v10, v16);
  v130[1] = v12;
  v91 = v17;
  v90 = MEMORY[0x242612B20](v13, v17, v130);
  *(_QWORD *)&v125 = v17;
  *((_QWORD *)&v125 + 1) = v90;
  MEMORY[0x242612AB4](255, &v125, v14, 0);
  v89 = sub_23BE5A8DC();
  v18 = sub_23BE5AB04();
  v19 = *(_QWORD *)(v18 - 8);
  v88 = v18;
  v95 = v19;
  MEMORY[0x24BDAC7A8](v18);
  v85 = (char *)&v81 - v20;
  v21 = sub_23BE5A7EC();
  v22 = *(_QWORD *)(v21 - 8);
  v94 = v21;
  v99 = v22;
  MEMORY[0x24BDAC7A8](v21);
  v87 = (char *)&v81 - v23;
  v24 = sub_23BE5A7EC();
  v103 = *(_QWORD *)(v24 - 8);
  v96 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v93 = (char *)&v81 - v25;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6810);
  v102 = sub_23BE5A7EC();
  v104 = *(_QWORD *)(v102 - 8);
  v26 = MEMORY[0x24BDAC7A8](v102);
  v98 = (char *)&v81 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v101 = (char *)&v81 - v28;
  v29 = sub_23BE5AB1C();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v81 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC69D8);
  v83 = *(_QWORD *)(v33 - 8);
  v84 = v33;
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)&v81 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6808);
  v36 = MEMORY[0x24BDAC7A8](v110);
  v107 = (uint64_t)&v81 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36);
  v109 = (uint64_t)&v81 - v38;
  v39 = v108;
  type metadata accessor for BrowseBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v41 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  v42 = objc_msgSend(v41, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23BE5AB34();
  (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v32, *MEMORY[0x24BDF3FD0], v29);
  v43 = sub_23BE5AB28();
  swift_release();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
  v44 = *v39;
  v45 = v92;
  v46 = *v92;
  v47 = v92[1];
  PlanBannerView = type metadata accessor for CreatePlanBannerView(0, v112, v111, v48);
  *(_QWORD *)&v125 = v46;
  *((_QWORD *)&v125 + 1) = v47;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6A38);
  sub_23BE5AB4C();
  sub_23BE5ABA0();
  sub_23BE5A7B0();
  *(_QWORD *)&v125 = v43;
  *((_QWORD *)&v125 + 1) = v44;
  LOWORD(v126) = 256;
  *((_QWORD *)&v126 + 1) = v131[2];
  LOBYTE(v127) = v132;
  *((_QWORD *)&v127 + 1) = v133;
  LOBYTE(v128) = v134;
  v129 = v135;
  sub_23BE5A900();
  sub_23BE5ABB8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC69E0);
  sub_23BDFFAE8();
  sub_23BE5AA20();
  swift_release();
  v50 = v83;
  v49 = v84;
  v51 = v107;
  (*(void (**)(uint64_t, char *, uint64_t))(v83 + 16))(v107, v35, v84);
  *(_WORD *)(v51 + *(int *)(v110 + 36)) = 0;
  (*(void (**)(char *, uint64_t))(v50 + 8))(v35, v49);
  sub_23BDFFB74(v51, v109);
  v52 = *((_OWORD *)v45 + 1);
  v125 = *(_OWORD *)v45;
  v126 = v52;
  v127 = *((_OWORD *)v45 + 2);
  v53 = v45;
  v128 = v45[6];
  LOBYTE(v118[0]) = v105;
  v54 = v85;
  sub_23BDF901C((uint64_t)v108, (char *)v118, PlanBannerView, v85);
  sub_23BE5ABA0();
  v55 = v100;
  *(_QWORD *)&v125 = v97;
  *((_QWORD *)&v125 + 1) = v100;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v124[0] = v55;
  v124[1] = OpaqueTypeConformance2;
  v57 = MEMORY[0x24BDEF3E0];
  v58 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v86, v124);
  *(_QWORD *)&v125 = v91;
  *((_QWORD *)&v125 + 1) = v90;
  v59 = swift_getOpaqueTypeConformance2();
  v123[0] = v58;
  v123[1] = v59;
  v122 = MEMORY[0x242612B20](v57, v89, v123);
  v60 = v88;
  v61 = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v88, &v122);
  v62 = v87;
  sub_23BE5AA38();
  (*(void (**)(char *, uint64_t))(v95 + 8))(v54, v60);
  sub_23BE5ABA0();
  v63 = MEMORY[0x24BDEDBB8];
  v121[0] = v61;
  v121[1] = MEMORY[0x24BDEDBB8];
  v64 = MEMORY[0x24BDED308];
  v79 = v94;
  v80 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v94, v121);
  v65 = v93;
  sub_23BE5AA38();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v62, v79);
  v113 = v112;
  v114 = v111;
  v115 = v53;
  sub_23BE5ABA0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC69F0);
  v120[0] = v80;
  v120[1] = v63;
  v66 = v96;
  v67 = MEMORY[0x242612B20](v64, v96, v120);
  sub_23BE000F4(&qword_256AC69F8, &qword_256AC69F0, MEMORY[0x24BDEC6F8]);
  v68 = v98;
  sub_23BE5A9E4();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v65, v66);
  v69 = sub_23BE000F4(&qword_256AC6A00, &qword_256AC6810, MEMORY[0x24BDEF370]);
  v119[0] = v67;
  v119[1] = v69;
  v70 = v102;
  v71 = MEMORY[0x242612B20](v64, v102, v119);
  v72 = v104;
  v73 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
  v74 = v101;
  v73(v101, v68, v70);
  v75 = *(void (**)(char *, uint64_t))(v72 + 8);
  v75(v68, v70);
  v76 = v109;
  v77 = v107;
  sub_23BDFFFD8(v109, v107, &qword_256AC6808);
  *(_QWORD *)&v125 = v77;
  v73(v68, v74, v70);
  *((_QWORD *)&v125 + 1) = v68;
  v118[0] = v110;
  v118[1] = v70;
  v116 = sub_23BDFFC28();
  v117 = v71;
  sub_23BDF774C((uint64_t *)&v125, 2uLL, (uint64_t)v118);
  v75(v74, v70);
  sub_23BE000B8(v76, &qword_256AC6808);
  v75(v68, v70);
  return sub_23BE000B8(v77, &qword_256AC6808);
}

double sub_23BDFAA28(double a1)
{
  return a1 * 0.5;
}

uint64_t sub_23BDFAA34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v21[4];
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21[1] = a5;
  v9 = sub_23BE5A7C8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23BE5AAA4();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a4;
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v15 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v15 + 48) = v16;
  *(_OWORD *)(v15 + 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v15 + 80) = *(_QWORD *)(a2 + 48);
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v14, v12, v9);
  v21[3] = v13;
  v22 = sub_23BDFFD6C;
  v24 = 0;
  v25 = 0;
  v23 = v15;
  sub_23BDFE758(a2);
  sub_23BE5A7BC();
  v21[2] = v17;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v18 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v18 + 48) = v19;
  *(_OWORD *)(v18 + 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v18 + 80) = *(_QWORD *)(a2 + 48);
  sub_23BDFE758(a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6A20);
  sub_23BDFFE44(&qword_256AC6A28, &qword_256AC6A20, MEMORY[0x24BDF3E20], MEMORY[0x24BDF0910]);
  sub_23BDFFEA4();
  sub_23BE5AA74();
  swift_release();
  swift_release();
  sub_23BDFE8F8((uint64_t)v22);
  return sub_23BDFE8F8(v24);
}

uint64_t sub_23BDFAC20(uint64_t a1)
{
  sub_23BDFE758(a1);
  sub_23BE5A7BC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6A38);
  sub_23BE5AB58();
  return sub_23BDFFEE8(a1);
}

uint64_t sub_23BDFAC94@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  void (*v32)(char *, uint64_t);
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  char v43;
  _QWORD v44[2];
  _QWORD v45[2];
  _OWORD v46[3];
  uint64_t v47;

  v36 = a3;
  v37 = a2;
  v35 = a1;
  v38 = a4;
  v34[1] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67E8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  v34[0] = *(_QWORD *)(a3 + 16);
  sub_23BE5A8DC();
  sub_23BE5AB04();
  swift_getTupleTypeMetadata3();
  v6 = sub_23BE5ABD0();
  v7 = MEMORY[0x24BDF5428];
  MEMORY[0x242612B20](MEMORY[0x24BDF5428], v6);
  v8 = sub_23BE5AB94();
  v9 = sub_23BE5A7EC();
  v10 = MEMORY[0x24BDF4700];
  v11 = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v8);
  v12 = MEMORY[0x24BDECC60];
  v45[0] = v11;
  v45[1] = MEMORY[0x24BDECC60];
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v9, v45);
  *(_QWORD *)&v46[0] = v9;
  *((_QWORD *)&v46[0] + 1) = v14;
  v15 = MEMORY[0x24BDF3110];
  MEMORY[0x242612AB4](255, v46, MEMORY[0x24BDF3110], 0);
  sub_23BE5A8DC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F8);
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v16 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v7, v16);
  v17 = sub_23BE5AB94();
  v18 = sub_23BE5A7EC();
  v44[0] = MEMORY[0x242612B20](v10, v17);
  v44[1] = v12;
  v19 = MEMORY[0x242612B20](v13, v18, v44);
  *(_QWORD *)&v46[0] = v18;
  *((_QWORD *)&v46[0] + 1) = v19;
  MEMORY[0x242612AB4](255, v46, v15, 0);
  sub_23BE5A8DC();
  sub_23BE5AB04();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6800);
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v20 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v7, v20);
  v21 = sub_23BE5AB94();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)v34 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v34 - v26;
  v28 = *v37;
  v29 = *(_OWORD *)(v4 + 16);
  v46[0] = *(_OWORD *)v4;
  v46[1] = v29;
  v46[2] = *(_OWORD *)(v4 + 32);
  v47 = *(_QWORD *)(v4 + 48);
  sub_23BE5A8B8();
  v30 = *(_QWORD *)(v36 + 24);
  v39 = v34[0];
  v40 = v30;
  v41 = v35;
  v42 = v46;
  v43 = v28;
  sub_23BE5AB88();
  MEMORY[0x242612B20](v10, v21);
  v31 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  v31(v27, v25, v21);
  v32 = *(void (**)(char *, uint64_t))(v22 + 8);
  v32(v25, v21);
  v31(v38, v27, v21);
  return ((uint64_t (*)(char *, uint64_t))v32)(v27, v21);
}

uint64_t sub_23BDFB064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t ObjCClassFromMetadata;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t PlanBannerView;
  char *v35;
  uint64_t v36;
  uint64_t OpaqueTypeConformance2;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72[2];
  _QWORD v73[2];
  uint64_t v74;
  _QWORD v75[2];
  _QWORD v76[2];
  _QWORD v77[2];
  _QWORD v78[2];

  v62 = a5;
  v60 = a4;
  v61 = a3;
  v63 = a2;
  v65 = a1;
  v64 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  sub_23BE5A8DC();
  sub_23BE5AB04();
  swift_getTupleTypeMetadata3();
  v6 = sub_23BE5ABD0();
  v7 = MEMORY[0x24BDF5428];
  MEMORY[0x242612B20](MEMORY[0x24BDF5428], v6);
  v8 = sub_23BE5AB94();
  v9 = sub_23BE5A7EC();
  v10 = MEMORY[0x24BDF4700];
  v11 = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v8);
  v12 = MEMORY[0x24BDECC60];
  v78[0] = v11;
  v78[1] = MEMORY[0x24BDECC60];
  v13 = MEMORY[0x24BDED308];
  v59 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v9, v78);
  v69 = v9;
  v70 = v59;
  v58 = v9;
  v14 = MEMORY[0x24BDF3110];
  MEMORY[0x242612AB4](255, &v69, MEMORY[0x24BDF3110], 0);
  v51 = sub_23BE5A8DC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F8);
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v15 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v7, v15);
  v16 = sub_23BE5AB94();
  v17 = sub_23BE5A7EC();
  v77[0] = MEMORY[0x242612B20](v10, v16);
  v77[1] = v12;
  v54 = v17;
  v53 = MEMORY[0x242612B20](v13, v17, v77);
  v69 = v17;
  v70 = v53;
  MEMORY[0x242612AB4](255, &v69, v14, 0);
  v52 = sub_23BE5A8DC();
  v18 = sub_23BE5AB04();
  v56 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v50 = (char *)&v49 - v19;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6800);
  v20 = sub_23BE5A7EC();
  v57 = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v55 = (char *)&v49 - v24;
  v25 = sub_23BE5AB1C();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v49 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BrowseBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v30 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  v31 = objc_msgSend(v30, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23BE5AB34();
  (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v28, *MEMORY[0x24BDF3FD0], v25);
  v32 = sub_23BE5AB28();
  swift_release();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  LOBYTE(v69) = v61;
  PlanBannerView = type metadata accessor for CreatePlanBannerView(0, v60, v62, v33);
  v35 = v50;
  sub_23BDF901C(v65, (char *)&v69, PlanBannerView, v50);
  v36 = v59;
  v69 = v58;
  v70 = v59;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v76[0] = v36;
  v76[1] = OpaqueTypeConformance2;
  v38 = MEMORY[0x24BDEF3E0];
  v39 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v51, v76);
  v69 = v54;
  v70 = v53;
  v40 = swift_getOpaqueTypeConformance2();
  v75[0] = v39;
  v75[1] = v40;
  v74 = MEMORY[0x242612B20](v38, v52, v75);
  v41 = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v18, &v74);
  sub_23BE5AA14();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v18);
  v42 = sub_23BE000F4(&qword_256AC6928, &qword_256AC6800, MEMORY[0x24BDEFB48]);
  v73[0] = v41;
  v73[1] = v42;
  v43 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v20, v73);
  v44 = v57;
  v45 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  v46 = v55;
  v45(v55, v23, v20);
  v47 = *(void (**)(char *, uint64_t))(v44 + 8);
  v47(v23, v20);
  v69 = v32;
  v70 = 0x4007878787878787;
  v71 = 256;
  v72[0] = (uint64_t)&v69;
  v45(v23, v46, v20);
  v72[1] = (uint64_t)v23;
  swift_retain();
  v68[0] = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC67E8);
  v68[1] = v20;
  v66 = sub_23BDFFE44(&qword_256AC6930, &qword_256AC67E8, MEMORY[0x24BDF40E8], MEMORY[0x24BDEEC40]);
  v67 = v43;
  sub_23BDF774C(v72, 2uLL, (uint64_t)v68);
  v47(v46, v20);
  swift_release();
  v47(v23, v20);
  return swift_release();
}

uint64_t sub_23BDFB6C4@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  void (*v75)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD v113[2];
  _QWORD v114[2];
  _QWORD v115[2];
  _QWORD v116[2];
  uint64_t v117;
  _QWORD v118[2];
  _QWORD v119[2];
  char v120;
  _BYTE v121[32];
  uint64_t v122;
  __int128 v123;
  _QWORD v124[2];
  _QWORD v125[2];

  v108 = a3;
  v92 = a2;
  v109 = a1;
  v107 = a4;
  v102 = sub_23BE5A804();
  MEMORY[0x24BDAC7A8](v102);
  v101 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6A40);
  MEMORY[0x24BDAC7A8](v104);
  v103 = (uint64_t)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6A48);
  MEMORY[0x24BDAC7A8](v106);
  v105 = (uint64_t)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_23BE5A7E0();
  v98 = *(_QWORD *)(v99 - 8);
  MEMORY[0x24BDAC7A8](v99);
  v97 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  v100 = *(_QWORD *)(a3 + 16);
  sub_23BE5A8DC();
  sub_23BE5AB04();
  swift_getTupleTypeMetadata3();
  v10 = sub_23BE5ABD0();
  v11 = MEMORY[0x24BDF5428];
  MEMORY[0x242612B20](MEMORY[0x24BDF5428], v10);
  v12 = sub_23BE5AB94();
  v13 = sub_23BE5A7EC();
  v14 = MEMORY[0x24BDF4700];
  v15 = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v12);
  v16 = MEMORY[0x24BDECC60];
  v125[0] = v15;
  v125[1] = MEMORY[0x24BDECC60];
  v17 = MEMORY[0x24BDED308];
  v86 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v13, v125);
  *(_QWORD *)v121 = v13;
  *(_QWORD *)&v121[8] = v86;
  v18 = MEMORY[0x24BDF3110];
  MEMORY[0x242612AB4](255, v121, MEMORY[0x24BDF3110], 0);
  v79 = sub_23BE5A8DC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F8);
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v19 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v11, v19);
  v20 = sub_23BE5AB94();
  v21 = sub_23BE5A7EC();
  v124[0] = MEMORY[0x242612B20](v14, v20);
  v124[1] = v16;
  v82 = v21;
  v81 = MEMORY[0x242612B20](v17, v21, v124);
  *(_QWORD *)v121 = v21;
  *(_QWORD *)&v121[8] = v81;
  MEMORY[0x242612AB4](255, v121, v18, 0);
  v80 = sub_23BE5A8DC();
  v22 = sub_23BE5AB04();
  v84 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v78 - v23;
  v25 = sub_23BE5A7EC();
  v87 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v78 - v26;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6818);
  v28 = sub_23BE5A7EC();
  v29 = *(_QWORD *)(v28 - 8);
  v85 = v28;
  v89 = v29;
  MEMORY[0x24BDAC7A8](v28);
  v83 = (char *)&v78 - v30;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6820);
  v31 = sub_23BE5A7EC();
  v96 = *(_QWORD *)(v31 - 8);
  v91 = v31;
  MEMORY[0x24BDAC7A8](v31);
  v88 = (char *)&v78 - v32;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6828);
  v94 = sub_23BE5A7EC();
  v95 = *(_QWORD *)(v94 - 8);
  v33 = MEMORY[0x24BDAC7A8](v94);
  v90 = (char *)&v78 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v93 = (char *)&v78 - v35;
  v36 = *v92;
  v37 = *(_QWORD *)(v4 + 24);
  v38 = *(_BYTE *)(v4 + 32);
  *(_QWORD *)v121 = *(_QWORD *)v4;
  *(_OWORD *)&v121[8] = *(_OWORD *)(v4 + 8);
  *(_QWORD *)&v121[24] = v37;
  LOBYTE(v122) = v38;
  v123 = *(_OWORD *)(v4 + 40);
  v120 = v36;
  sub_23BDF901C(v109, &v120, v108, v24);
  sub_23BE5ABAC();
  v39 = v86;
  *(_QWORD *)v121 = v13;
  *(_QWORD *)&v121[8] = v86;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v119[0] = v39;
  v119[1] = OpaqueTypeConformance2;
  v41 = MEMORY[0x24BDEF3E0];
  v42 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v79, v119);
  *(_QWORD *)v121 = v82;
  *(_QWORD *)&v121[8] = v81;
  v43 = swift_getOpaqueTypeConformance2();
  v118[0] = v42;
  v118[1] = v43;
  v117 = MEMORY[0x242612B20](v41, v80, v118);
  v77 = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v22, &v117);
  sub_23BE5AA38();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v24, v22);
  swift_getKeyPath();
  v44 = v98;
  v45 = v97;
  v46 = v99;
  (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v97, *MEMORY[0x24BDED100], v99);
  v116[0] = v77;
  v116[1] = MEMORY[0x24BDEDBB8];
  v47 = MEMORY[0x24BDED308];
  v48 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v25, v116);
  v49 = v83;
  sub_23BE5A9FC();
  swift_release();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v27, v25);
  sub_23BE5ABAC();
  v50 = *(_QWORD *)(v108 + 24);
  v110 = v100;
  v111 = v50;
  v51 = v109;
  v112 = v109;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC67E8);
  v52 = sub_23BE000F4(&qword_256AC6848, &qword_256AC6818, MEMORY[0x24BDF1028]);
  v115[0] = v48;
  v115[1] = v52;
  v53 = v85;
  v54 = MEMORY[0x242612B20](v47, v85, v115);
  sub_23BDFFE44(&qword_256AC6930, &qword_256AC67E8, MEMORY[0x24BDF40E8], MEMORY[0x24BDEEC40]);
  v55 = v88;
  sub_23BE5A9E4();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v49, v53);
  v56 = *(_QWORD *)(v51 + 88);
  v57 = v101;
  v58 = &v101[*(int *)(v102 + 20)];
  v59 = *MEMORY[0x24BDEEB68];
  v60 = sub_23BE5A8AC();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 104))(v58, v59, v60);
  *v57 = v56;
  v57[1] = v56;
  sub_23BE5A780();
  v61 = v103;
  sub_23BDFFF94((uint64_t)v57, v103);
  v62 = v61 + *(int *)(v104 + 36);
  v63 = *(_OWORD *)&v121[16];
  *(_OWORD *)v62 = *(_OWORD *)v121;
  *(_OWORD *)(v62 + 16) = v63;
  *(_QWORD *)(v62 + 32) = v122;
  sub_23BDFE95C((uint64_t)v57);
  sub_23BE5AAB0();
  v64 = sub_23BE5AABC();
  swift_release();
  v65 = v105;
  sub_23BDFFFD8(v61, v105, &qword_256AC6A40);
  *(_QWORD *)(v65 + *(int *)(v106 + 36)) = v64;
  sub_23BE000B8(v61, &qword_256AC6A40);
  sub_23BE5ABA0();
  v66 = sub_23BE000F4(&qword_256AC6850, &qword_256AC6820, MEMORY[0x24BDEF370]);
  v114[0] = v54;
  v114[1] = v66;
  v67 = v91;
  v68 = MEMORY[0x242612B20](v47, v91, v114);
  sub_23BE0001C();
  v69 = v90;
  sub_23BE5AA44();
  sub_23BE000B8(v65, &qword_256AC6A48);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v55, v67);
  v70 = sub_23BE000F4(&qword_256AC6858, &qword_256AC6828, MEMORY[0x24BDEDC10]);
  v113[0] = v68;
  v113[1] = v70;
  v71 = v94;
  MEMORY[0x242612B20](v47, v94, v113);
  v72 = v95;
  v73 = *(void (**)(char *, char *, uint64_t))(v95 + 16);
  v74 = v93;
  v73(v93, v69, v71);
  v75 = *(void (**)(char *, uint64_t))(v72 + 8);
  v75(v69, v71);
  v73(v107, v74, v71);
  return ((uint64_t (*)(char *, uint64_t))v75)(v74, v71);
}

uint64_t sub_23BDFC1B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t ObjCClassFromMetadata;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_23BE5AB1C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BrowseBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v9 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  v10 = objc_msgSend(v9, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23BE5AB34();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDF3FD0], v4);
  v11 = sub_23BE5AB28();
  swift_release();
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v13 = *a1;
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v13;
  *(_WORD *)(a2 + 16) = 256;
  return result;
}

uint64_t CreatePlanBannerView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t OpaqueTypeConformance2;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  void (*v99)(char *, uint64_t, uint64_t);
  void (*v100)(uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD v206[2];
  _QWORD v207[2];
  _QWORD v208[2];
  uint64_t v209;
  _QWORD v210[2];
  _QWORD v211[2];
  _QWORD v212[2];
  _QWORD v213[2];
  _QWORD v214[2];
  uint64_t v215;
  _QWORD v216[2];
  _QWORD v217[2];
  _QWORD v218[2];
  _QWORD v219[2];
  _QWORD v220[2];
  _QWORD v221[2];
  _QWORD v222[2];
  _QWORD v223[2];
  _QWORD v224[2];
  uint64_t v225;
  _QWORD v226[2];
  _QWORD v227[2];
  _QWORD v228[2];
  _QWORD v229[2];
  _QWORD v230[2];
  uint64_t v231;
  _QWORD v232[2];
  _QWORD v233[2];
  _QWORD v234[2];
  _QWORD v235[2];
  _QWORD v236[2];
  _QWORD v237[2];
  _QWORD v238[2];
  _QWORD v239[2];
  uint64_t v240;
  _QWORD v241[2];
  _QWORD v242[2];
  _QWORD v243[2];
  _QWORD v244[2];
  _QWORD v245[2];
  uint64_t v246;
  _QWORD v247[2];
  _QWORD v248[2];
  uint64_t v249;
  uint64_t v250;
  _QWORD v251[2];
  _QWORD v252[2];
  _QWORD v253[2];
  _QWORD v254[2];
  _QWORD v255[2];
  __int128 v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  uint64_t (*v260)();
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  uint64_t v269;
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  uint64_t v274;

  v184 = a2;
  v178 = sub_23BE5A804();
  MEMORY[0x24BDAC7A8](v178);
  v177 = (char *)&v168 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67E8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  v185 = *(_QWORD *)(a1 + 16);
  sub_23BE5A8DC();
  sub_23BE5AB04();
  swift_getTupleTypeMetadata3();
  v5 = sub_23BE5ABD0();
  MEMORY[0x242612B20](MEMORY[0x24BDF5428], v5);
  v6 = sub_23BE5AB94();
  v7 = sub_23BE5A7EC();
  v8 = MEMORY[0x24BDF4700];
  v255[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v6);
  v255[1] = MEMORY[0x24BDECC60];
  v9 = MEMORY[0x24BDED308];
  v10 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v7, v255);
  *(_QWORD *)&v256 = v7;
  v204 = v10;
  *((_QWORD *)&v256 + 1) = v10;
  v11 = MEMORY[0x24BDF3110];
  MEMORY[0x242612AB4](255, &v256, MEMORY[0x24BDF3110], 0);
  v205 = v7;
  v12 = sub_23BE5A8DC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F8);
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v13 = sub_23BE5ABD0();
  v14 = MEMORY[0x24BDF5428];
  MEMORY[0x242612B20](MEMORY[0x24BDF5428], v13);
  v15 = sub_23BE5AB94();
  v16 = sub_23BE5A7EC();
  v254[0] = MEMORY[0x242612B20](v8, v15);
  v254[1] = MEMORY[0x24BDECC60];
  v201 = MEMORY[0x242612B20](v9, v16, v254);
  v202 = v16;
  *(_QWORD *)&v256 = v16;
  *((_QWORD *)&v256 + 1) = v201;
  MEMORY[0x242612AB4](255, &v256, v11, 0);
  v203 = v12;
  v199 = sub_23BE5A8DC();
  v17 = sub_23BE5AB04();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6800);
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v18 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v14, v18);
  v191 = sub_23BE5AB94();
  v19 = sub_23BE5A7EC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6808);
  v200 = v17;
  v20 = sub_23BE5A7EC();
  sub_23BE5A7EC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6810);
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v21 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v14, v21);
  v188 = sub_23BE5AB7C();
  v22 = sub_23BE5A7EC();
  v192 = v19;
  v189 = v22;
  v23 = sub_23BE5A8DC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6818);
  v198 = v20;
  v24 = sub_23BE5A7EC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6820);
  v194 = v24;
  v25 = sub_23BE5A7EC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6828);
  v195 = v25;
  v26 = sub_23BE5A7EC();
  v190 = v23;
  v196 = v26;
  v197 = sub_23BE5A8DC();
  v27 = sub_23BE5AB04();
  v175 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v168 - v28;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6830);
  v186 = v27;
  v30 = sub_23BE5A7EC();
  v176 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v174 = (char *)&v168 - v31;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6838);
  v183 = v30;
  v32 = sub_23BE5A7EC();
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)&v168 - v34;
  v182 = v36;
  v37 = sub_23BE5A7EC();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = MEMORY[0x24BDAC7A8](v37);
  v41 = (char *)&v168 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v43 = (char *)&v168 - v42;
  v44 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6840);
  v187 = v37;
  v179 = v44;
  v45 = sub_23BE5A8DC();
  v180 = *(_QWORD *)(v45 - 8);
  v181 = v45;
  MEMORY[0x24BDAC7A8](v45);
  v193 = (char *)&v168 - v46;
  v47 = v2[1];
  v271 = *v2;
  v272 = v47;
  v49 = *v2;
  v48 = v2[1];
  v273 = v2[2];
  v274 = *((_QWORD *)v2 + 6);
  v256 = v49;
  v257 = v48;
  v258 = v2[2];
  v259 = *((_QWORD *)v2 + 6);
  sub_23BDF6810();
  swift_getKeyPath();
  sub_23BE5AC0C();
  swift_release();
  swift_release();
  if (v256 == 2)
  {
    v256 = v271;
    v257 = v272;
    v258 = v273;
    v259 = v274;
    sub_23BDF6810();
    swift_getKeyPath();
    v173 = v43;
    sub_23BE5AC0C();
    swift_release();
    swift_release();
    v50 = v256;
    LOBYTE(v265) = v256;
    v51 = *(_QWORD *)(a1 + 24);
    v171 = v51;
    v52 = sub_23BDF653C(&v265, (uint64_t)&v256);
    v168 = (uint64_t)&v168;
    MEMORY[0x24BDAC7A8](v52);
    *(&v168 - 6) = v185;
    *(&v168 - 5) = v51;
    *((_BYTE *)&v168 - 32) = v50;
    *(&v168 - 3) = (uint64_t)&v271;
    *(&v168 - 2) = (uint64_t)&v256;
    v220[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v191);
    v172 = v38;
    v53 = MEMORY[0x24BDEDBB8];
    v220[1] = MEMORY[0x24BDEDBB8];
    v54 = MEMORY[0x24BDED308];
    v55 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v192, v220);
    v219[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4498], v188);
    v219[1] = v53;
    v56 = v54;
    v57 = MEMORY[0x242612B20](v54, v189, v219);
    v218[0] = v55;
    v218[1] = v57;
    v169 = v35;
    v58 = MEMORY[0x24BDEF3E0];
    v59 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v190, v218);
    v60 = v204;
    v265 = v205;
    v266 = v204;
    v170 = v33;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v217[0] = v60;
    v217[1] = OpaqueTypeConformance2;
    v62 = MEMORY[0x242612B20](v58, v203, v217);
    v265 = v202;
    v266 = v201;
    v63 = swift_getOpaqueTypeConformance2();
    v216[0] = v62;
    v216[1] = v63;
    v215 = MEMORY[0x242612B20](v58, v199, v216);
    v214[0] = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v200, &v215);
    v214[1] = v53;
    v64 = v56;
    v65 = MEMORY[0x242612B20](v56, v198, v214);
    v66 = sub_23BE000F4(&qword_256AC6848, &qword_256AC6818, MEMORY[0x24BDF1028]);
    v213[0] = v65;
    v213[1] = v66;
    v67 = MEMORY[0x242612B20](v56, v194, v213);
    v68 = sub_23BE000F4(&qword_256AC6850, &qword_256AC6820, MEMORY[0x24BDEF370]);
    v212[0] = v67;
    v212[1] = v68;
    v69 = MEMORY[0x242612B20](v56, v195, v212);
    v70 = sub_23BE000F4(&qword_256AC6858, &qword_256AC6828, MEMORY[0x24BDEDC10]);
    v211[0] = v69;
    v211[1] = v70;
    v71 = MEMORY[0x242612B20](v56, v196, v211);
    v210[0] = v59;
    v210[1] = v71;
    v72 = MEMORY[0x242612B20](v58, v197, v210);
    v73 = v29;
    sub_23BE5AAF8();
    v265 = MEMORY[0x2426124FC](objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD4B8]), sel_initWithRed_green_blue_alpha_, 0.109803922, 0.109803922, 0.117647059, 1.0));
    sub_23BE5A90C();
    v209 = v72;
    v74 = (uint64_t)v41;
    v75 = v186;
    v76 = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v186, &v209);
    v77 = v174;
    sub_23BE5A9F0();
    swift_release();
    (*(void (**)(char *, uint64_t))(v175 + 8))(v73, v75);
    v78 = v264;
    v79 = v177;
    v80 = &v177[*(int *)(v178 + 20)];
    v81 = *MEMORY[0x24BDEEB68];
    v82 = sub_23BE5A8AC();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 104))(v80, v81, v82);
    *v79 = v78;
    v79[1] = v78;
    v83 = sub_23BE000F4(&qword_256AC6860, &qword_256AC6830, MEMORY[0x24BDF06D0]);
    v208[0] = v76;
    v208[1] = v83;
    v84 = v183;
    v85 = MEMORY[0x242612B20](v64, v183, v208);
    sub_23BDFE914();
    v86 = v169;
    sub_23BE5AA8C();
    sub_23BDFE95C((uint64_t)v79);
    (*(void (**)(char *, uint64_t))(v176 + 8))(v77, v84);
    v87 = swift_allocObject();
    v88 = v171;
    *(_QWORD *)(v87 + 16) = v185;
    *(_QWORD *)(v87 + 24) = v88;
    v89 = v272;
    *(_OWORD *)(v87 + 32) = v271;
    *(_OWORD *)(v87 + 48) = v89;
    *(_OWORD *)(v87 + 64) = v273;
    *(_QWORD *)(v87 + 80) = v274;
    sub_23BDFE758((uint64_t)&v271);
    v90 = sub_23BE000F4(&qword_256AC6868, &qword_256AC6838, MEMORY[0x24BDEB950]);
    v207[0] = v85;
    v207[1] = v90;
    v91 = MEMORY[0x24BDED308];
    v92 = v182;
    v93 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v182, v207);
    sub_23BE5AA68();
    swift_release();
    (*(void (**)(char *, uint64_t))(v170 + 8))(v86, v92);
    v206[0] = v93;
    v94 = MEMORY[0x24BDF0910];
    v206[1] = MEMORY[0x24BDF0910];
    v95 = v91;
    v96 = v187;
    MEMORY[0x242612B20](v95, v187, v206);
    v97 = v172;
    v98 = v173;
    v99 = *(void (**)(char *, uint64_t, uint64_t))(v172 + 16);
    v99(v173, v74, v96);
    v100 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
    v100(v74, v96);
    v99((char *)v74, (uint64_t)v98, v96);
    sub_23BDFE7E0(&qword_256AC6870, &qword_256AC6840, sub_23BDFE7BC, v94);
    sub_23BDF63B4(v74, v96);
    sub_23BDFE9BC((uint64_t)&v256);
    v101 = v74;
    v102 = v84;
    v100(v101, v96);
    v103 = v98;
    v104 = v186;
    v100((uint64_t)v103, v96);
  }
  else
  {
    v105 = sub_23BE5AAA4();
    sub_23BE5ABA0();
    sub_23BE5A7B0();
    v106 = v265;
    v107 = v266;
    v108 = v267;
    v109 = v268;
    v110 = v269;
    v111 = v270;
    v112 = swift_allocObject();
    v113 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v112 + 16) = v185;
    *(_QWORD *)(v112 + 24) = v113;
    v114 = v272;
    *(_OWORD *)(v112 + 32) = v271;
    *(_OWORD *)(v112 + 48) = v114;
    *(_OWORD *)(v112 + 64) = v273;
    *(_QWORD *)(v112 + 80) = v274;
    *(_QWORD *)&v256 = v105;
    *((_QWORD *)&v256 + 1) = v106;
    LOBYTE(v257) = v107;
    *((_QWORD *)&v257 + 1) = v108;
    LOBYTE(v258) = v109;
    *((_QWORD *)&v258 + 1) = v110;
    v259 = v111;
    v260 = sub_23BE00168;
    v261 = v112;
    v263 = 0;
    v262 = 0;
    sub_23BDFE758((uint64_t)&v271);
    v253[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v191);
    v115 = MEMORY[0x24BDEDBB8];
    v253[1] = MEMORY[0x24BDEDBB8];
    v116 = MEMORY[0x24BDED308];
    v117 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v192, v253);
    v252[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4498], v188);
    v252[1] = v115;
    v118 = MEMORY[0x242612B20](v116, v189, v252);
    v251[0] = v117;
    v251[1] = v118;
    v119 = MEMORY[0x24BDEF3E0];
    v120 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v190, v251);
    v121 = v204;
    v249 = v205;
    v250 = v204;
    v122 = swift_getOpaqueTypeConformance2();
    v248[0] = v121;
    v248[1] = v122;
    v123 = MEMORY[0x242612B20](v119, v203, v248);
    v249 = v202;
    v250 = v201;
    v124 = swift_getOpaqueTypeConformance2();
    v247[0] = v123;
    v247[1] = v124;
    v246 = MEMORY[0x242612B20](v119, v199, v247);
    v125 = MEMORY[0x24BDF3F50];
    v245[0] = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v200, &v246);
    v245[1] = v115;
    v126 = MEMORY[0x242612B20](v116, v198, v245);
    v127 = sub_23BE000F4(&qword_256AC6848, &qword_256AC6818, MEMORY[0x24BDF1028]);
    v244[0] = v126;
    v244[1] = v127;
    v128 = MEMORY[0x242612B20](v116, v194, v244);
    v129 = sub_23BE000F4(&qword_256AC6850, &qword_256AC6820, MEMORY[0x24BDEF370]);
    v243[0] = v128;
    v243[1] = v129;
    v130 = MEMORY[0x242612B20](v116, v195, v243);
    v131 = sub_23BE000F4(&qword_256AC6858, &qword_256AC6828, MEMORY[0x24BDEDC10]);
    v242[0] = v130;
    v242[1] = v131;
    v132 = MEMORY[0x242612B20](v116, v196, v242);
    v241[0] = v120;
    v241[1] = v132;
    v240 = MEMORY[0x242612B20](v119, v197, v241);
    v104 = v186;
    v133 = MEMORY[0x242612B20](v125, v186, &v240);
    v134 = sub_23BE000F4(&qword_256AC6860, &qword_256AC6830, MEMORY[0x24BDF06D0]);
    v239[0] = v133;
    v239[1] = v134;
    v102 = v183;
    v135 = MEMORY[0x242612B20](v116, v183, v239);
    v136 = sub_23BE000F4(&qword_256AC6868, &qword_256AC6838, MEMORY[0x24BDEB950]);
    v238[0] = v135;
    v238[1] = v136;
    v92 = v182;
    v237[0] = MEMORY[0x242612B20](v116, v182, v238);
    v137 = MEMORY[0x24BDF0910];
    v237[1] = MEMORY[0x24BDF0910];
    v138 = v187;
    MEMORY[0x242612B20](v116, v187, v237);
    sub_23BDFE7E0(&qword_256AC6870, &qword_256AC6840, sub_23BDFE7BC, v137);
    sub_23BDF6478((uint64_t)&v256, v138, v179);
    swift_release();
    sub_23BDFE8F8((uint64_t)sub_23BE00168);
    sub_23BDFE8F8(0);
  }
  v236[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v191);
  v139 = MEMORY[0x24BDEDBB8];
  v236[1] = MEMORY[0x24BDEDBB8];
  v140 = MEMORY[0x24BDED308];
  v141 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v192, v236);
  v235[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4498], v188);
  v235[1] = v139;
  v142 = MEMORY[0x242612B20](v140, v189, v235);
  v234[0] = v141;
  v234[1] = v142;
  v143 = MEMORY[0x24BDEF3E0];
  v144 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v190, v234);
  v145 = v204;
  v249 = v205;
  v250 = v204;
  v146 = swift_getOpaqueTypeConformance2();
  v233[0] = v145;
  v233[1] = v146;
  v147 = MEMORY[0x242612B20](v143, v203, v233);
  v249 = v202;
  v250 = v201;
  v148 = swift_getOpaqueTypeConformance2();
  v232[0] = v147;
  v232[1] = v148;
  v231 = MEMORY[0x242612B20](v143, v199, v232);
  v149 = MEMORY[0x24BDF3F50];
  v230[0] = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v200, &v231);
  v230[1] = v139;
  v150 = MEMORY[0x242612B20](v140, v198, v230);
  v151 = sub_23BE000F4(&qword_256AC6848, &qword_256AC6818, MEMORY[0x24BDF1028]);
  v229[0] = v150;
  v229[1] = v151;
  v152 = MEMORY[0x242612B20](v140, v194, v229);
  v153 = sub_23BE000F4(&qword_256AC6850, &qword_256AC6820, MEMORY[0x24BDEF370]);
  v228[0] = v152;
  v228[1] = v153;
  v154 = MEMORY[0x242612B20](v140, v195, v228);
  v155 = sub_23BE000F4(&qword_256AC6858, &qword_256AC6828, MEMORY[0x24BDEDC10]);
  v227[0] = v154;
  v227[1] = v155;
  v156 = MEMORY[0x242612B20](v140, v196, v227);
  v226[0] = v144;
  v226[1] = v156;
  v225 = MEMORY[0x242612B20](v143, v197, v226);
  v157 = MEMORY[0x242612B20](v149, v104, &v225);
  v158 = sub_23BE000F4(&qword_256AC6860, &qword_256AC6830, MEMORY[0x24BDF06D0]);
  v224[0] = v157;
  v224[1] = v158;
  v159 = MEMORY[0x242612B20](v140, v102, v224);
  v160 = sub_23BE000F4(&qword_256AC6868, &qword_256AC6838, MEMORY[0x24BDEB950]);
  v223[0] = v159;
  v223[1] = v160;
  v222[0] = MEMORY[0x242612B20](v140, v92, v223);
  v161 = MEMORY[0x24BDF0910];
  v222[1] = MEMORY[0x24BDF0910];
  v162 = MEMORY[0x242612B20](v140, v187, v222);
  v163 = sub_23BDFE7E0(&qword_256AC6870, &qword_256AC6840, sub_23BDFE7BC, v161);
  v221[0] = v162;
  v221[1] = v163;
  v164 = v181;
  MEMORY[0x242612B20](v143, v181, v221);
  v165 = v180;
  v166 = v193;
  (*(void (**)(uint64_t, char *, uint64_t))(v180 + 16))(v184, v193, v164);
  return (*(uint64_t (**)(char *, uint64_t))(v165 + 8))(v166, v164);
}

uint64_t sub_23BDFD604@<X0>(int a1@<W0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  void (*v68)(char *, uint64_t);
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t PlanBannerView;
  char *v119;
  uint64_t v120;
  uint64_t OpaqueTypeConformance2;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  void (*v134)(char *, char *, uint64_t);
  void (*v135)(char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(char *, uint64_t);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD v198[2];
  _QWORD v199[2];
  _QWORD v200[2];
  _QWORD v201[2];
  uint64_t v202;
  _QWORD v203[2];
  _QWORD v204[2];
  _QWORD v205[2];
  _QWORD v206[2];
  _QWORD v207[2];
  _QWORD v208[2];
  _QWORD v209[2];
  _QWORD v210[2];
  _QWORD v211[2];
  uint64_t v212;
  _QWORD v213[2];
  _QWORD v214[2];
  _QWORD v215[2];
  _QWORD v216[2];
  _QWORD v217[2];
  _QWORD v218[2];
  _QWORD v219[2];
  _QWORD v220[2];
  _QWORD v221[2];
  _QWORD v222[2];
  uint64_t v223;
  _QWORD v224[2];
  _QWORD v225[2];
  _QWORD v226[2];
  _QWORD v227[2];
  _QWORD v228[2];
  _QWORD v229[2];
  _QWORD v230[2];
  _QWORD v231[2];
  _QWORD v232[2];
  _QWORD v233[2];
  _QWORD v234[2];
  _QWORD v235[2];
  uint64_t v236;
  _QWORD v237[2];
  _QWORD v238[2];
  _QWORD v239[2];
  uint64_t v240;
  uint64_t v241;
  _QWORD v242[3];

  v174 = a5;
  v175 = a3;
  v176 = a2;
  v172 = a1;
  v184 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  v173 = a4;
  sub_23BE5A8DC();
  sub_23BE5AB04();
  swift_getTupleTypeMetadata3();
  v7 = sub_23BE5ABD0();
  v8 = MEMORY[0x24BDF5428];
  MEMORY[0x242612B20](MEMORY[0x24BDF5428], v7);
  v9 = sub_23BE5AB94();
  v10 = sub_23BE5A7EC();
  v11 = MEMORY[0x24BDF4700];
  v12 = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v9);
  v13 = MEMORY[0x24BDECC60];
  v242[0] = v12;
  v242[1] = MEMORY[0x24BDECC60];
  v14 = MEMORY[0x24BDED308];
  v240 = v10;
  v241 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v10, v242);
  v186 = v241;
  v15 = MEMORY[0x24BDF3110];
  MEMORY[0x242612AB4](255, &v240, MEMORY[0x24BDF3110], 0);
  v197 = v10;
  v16 = sub_23BE5A8DC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F8);
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v17 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v8, v17);
  v18 = sub_23BE5AB94();
  v19 = sub_23BE5A7EC();
  v239[0] = MEMORY[0x242612B20](v11, v18);
  v239[1] = v13;
  v20 = MEMORY[0x242612B20](v14, v19, v239);
  v195 = v19;
  v240 = v19;
  v241 = v20;
  v191 = v20;
  MEMORY[0x242612AB4](255, &v240, v15, 0);
  v196 = v16;
  v190 = sub_23BE5A8DC();
  v21 = sub_23BE5AB04();
  v22 = sub_23BE5A7EC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6818);
  v23 = sub_23BE5A7EC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6820);
  v193 = v23;
  v24 = sub_23BE5A7EC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6828);
  v194 = v24;
  v25 = sub_23BE5A7EC();
  v167 = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v169 = (char *)&v165 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v168 = (char *)&v165 - v28;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6808);
  v192 = v22;
  sub_23BE5A7EC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6810);
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v29 = sub_23BE5ABD0();
  v30 = MEMORY[0x24BDF5428];
  MEMORY[0x242612B20](MEMORY[0x24BDF5428], v29);
  v31 = sub_23BE5AB7C();
  v166 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v165 - v32;
  v188 = v34;
  v35 = sub_23BE5A7EC();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)&v165 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v37);
  v170 = (char *)&v165 - v40;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67E8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6800);
  v185 = v21;
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v41 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v30, v41);
  v42 = sub_23BE5AB94();
  v43 = sub_23BE5A7EC();
  v180 = v35;
  v44 = sub_23BE5A8DC();
  v171 = *(_QWORD *)(v44 - 8);
  v45 = MEMORY[0x24BDAC7A8](v44);
  v177 = (uint64_t)&v165 - v46;
  v187 = v42;
  v47 = *(_QWORD *)(v42 - 8);
  v48 = MEMORY[0x24BDAC7A8](v45);
  v50 = (char *)&v165 - v49;
  v178 = v43;
  v51 = *(_QWORD *)(v43 - 8);
  v52 = MEMORY[0x24BDAC7A8](v48);
  v54 = (char *)&v165 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v52);
  v56 = (char *)&v165 - v55;
  v179 = v57;
  v183 = v25;
  v58 = sub_23BE5A8DC();
  v181 = *(_QWORD *)(v58 - 8);
  v182 = v58;
  MEMORY[0x24BDAC7A8](v58);
  v189 = (char *)&v165 - v60;
  if ((_BYTE)v172)
  {
    v61 = MEMORY[0x24BDEDBB8];
    if (v172 != 1)
    {
      LOBYTE(v240) = 2;
      PlanBannerView = type metadata accessor for CreatePlanBannerView(0, v173, v174, v59);
      v119 = v169;
      sub_23BDFB6C4(v175, (char *)&v240, PlanBannerView, v169);
      v240 = v197;
      v241 = v186;
      v120 = v186;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      v238[0] = v120;
      v238[1] = OpaqueTypeConformance2;
      v122 = MEMORY[0x24BDEF3E0];
      v123 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v196, v238);
      v240 = v195;
      v241 = v191;
      v124 = swift_getOpaqueTypeConformance2();
      v237[0] = v123;
      v237[1] = v124;
      v236 = MEMORY[0x242612B20](v122, v190, v237);
      v235[0] = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v185, &v236);
      v235[1] = v61;
      v125 = MEMORY[0x24BDED308];
      v126 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v192, v235);
      v127 = sub_23BE000F4(&qword_256AC6848, &qword_256AC6818, MEMORY[0x24BDF1028]);
      v234[0] = v126;
      v234[1] = v127;
      v128 = MEMORY[0x242612B20](v125, v193, v234);
      v129 = sub_23BE000F4(&qword_256AC6850, &qword_256AC6820, MEMORY[0x24BDEF370]);
      v233[0] = v128;
      v233[1] = v129;
      v130 = MEMORY[0x242612B20](v125, v194, v233);
      v131 = sub_23BE000F4(&qword_256AC6858, &qword_256AC6828, MEMORY[0x24BDEDC10]);
      v232[0] = v130;
      v232[1] = v131;
      v89 = v183;
      MEMORY[0x242612B20](v125, v183, v232);
      v132 = v167;
      v133 = v168;
      v134 = *(void (**)(char *, char *, uint64_t))(v167 + 16);
      v134(v168, v119, v89);
      v135 = *(void (**)(char *, uint64_t))(v132 + 8);
      v135(v119, v89);
      v134(v119, v133, v89);
      v231[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v187);
      v231[1] = v61;
      v70 = v178;
      v136 = MEMORY[0x242612B20](v125, v178, v231);
      v230[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4498], v188);
      v230[1] = v61;
      v137 = v125;
      v91 = v180;
      v138 = MEMORY[0x242612B20](v137, v180, v230);
      v229[0] = v136;
      v229[1] = v138;
      v139 = v179;
      MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v179, v229);
      v87 = v139;
      sub_23BDF6478((uint64_t)v119, v139, v89);
      v140 = v119;
      v75 = v186;
      v135(v140, v89);
      v141 = v133;
      v79 = v185;
      v135(v141, v89);
      goto LABEL_7;
    }
    LOBYTE(v240) = 1;
    v62 = type metadata accessor for CreatePlanBannerView(0, v173, v174, v59);
    sub_23BDF9C40(v175, &v240, v62, v33);
    sub_23BE5ABA0();
    v161 = v188;
    v163 = MEMORY[0x242612B20](MEMORY[0x24BDF4498], v188);
    sub_23BE5AA38();
    (*(void (**)(char *, uint64_t))(v166 + 8))(v33, v161);
    v217[0] = v163;
    v217[1] = v61;
    v63 = MEMORY[0x24BDED308];
    v64 = v180;
    v65 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v180, v217);
    v66 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
    v67 = v170;
    v66(v170, v39, v64);
    v68 = *(void (**)(char *, uint64_t))(v36 + 8);
    v68(v39, v64);
    v69 = v68;
    v176 = v68;
    v66(v39, v67, v64);
    v216[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v187);
    v216[1] = v61;
    v70 = v178;
    v71 = MEMORY[0x242612B20](v63, v178, v216);
    v72 = v177;
    sub_23BDF6478((uint64_t)v39, v70, v64);
    v69(v39, v64);
    v215[0] = v71;
    v215[1] = v65;
    v73 = MEMORY[0x24BDEF3E0];
    v74 = v179;
    v175 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v179, v215);
    v75 = v186;
    v240 = v197;
    v241 = v186;
    v76 = swift_getOpaqueTypeConformance2();
    v214[0] = v75;
    v214[1] = v76;
    v77 = MEMORY[0x242612B20](v73, v196, v214);
    v240 = v195;
    v241 = v191;
    v78 = swift_getOpaqueTypeConformance2();
    v213[0] = v77;
    v213[1] = v78;
    v212 = MEMORY[0x242612B20](v73, v190, v213);
    v79 = v185;
    v211[0] = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v185, &v212);
    v61 = MEMORY[0x24BDEDBB8];
    v211[1] = MEMORY[0x24BDEDBB8];
    v80 = MEMORY[0x24BDED308];
    v81 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v192, v211);
    v82 = sub_23BE000F4(&qword_256AC6848, &qword_256AC6818, MEMORY[0x24BDF1028]);
    v210[0] = v81;
    v210[1] = v82;
    v83 = MEMORY[0x242612B20](v80, v193, v210);
    v84 = sub_23BE000F4(&qword_256AC6850, &qword_256AC6820, MEMORY[0x24BDEF370]);
    v209[0] = v83;
    v209[1] = v84;
    v85 = MEMORY[0x242612B20](v80, v194, v209);
    v86 = sub_23BE000F4(&qword_256AC6858, &qword_256AC6828, MEMORY[0x24BDEDC10]);
    v208[0] = v85;
    v208[1] = v86;
    v87 = v74;
    v88 = v80;
    v89 = v183;
    MEMORY[0x242612B20](v88, v183, v208);
    v90 = v74;
    v91 = v64;
    sub_23BDF63B4(v72, v90);
    (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v72, v87);
    v92 = v170;
    v93 = v64;
  }
  else
  {
    LOBYTE(v240) = 0;
    v94 = type metadata accessor for CreatePlanBannerView(0, v173, v174, v59);
    sub_23BDFAC94(v175, (char *)&v240, v94, v50);
    sub_23BE5ABA0();
    v162 = v187;
    v164 = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v187);
    sub_23BE5AA38();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v50, v162);
    v207[0] = v164;
    v95 = MEMORY[0x24BDEDBB8];
    v207[1] = MEMORY[0x24BDEDBB8];
    v96 = MEMORY[0x24BDED308];
    v97 = v178;
    v98 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v178, v207);
    v99 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
    v99(v56, v54, v97);
    v100 = *(void (**)(char *, uint64_t))(v51 + 8);
    v100(v54, v97);
    v176 = v100;
    v99(v54, v56, v97);
    v206[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4498], v188);
    v206[1] = v95;
    v101 = v180;
    v102 = MEMORY[0x242612B20](v96, v180, v206);
    sub_23BDF63B4((uint64_t)v54, v97);
    v100(v54, v97);
    v205[0] = v98;
    v205[1] = v102;
    v103 = MEMORY[0x24BDEF3E0];
    v104 = v179;
    v175 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v179, v205);
    v105 = v186;
    v240 = v197;
    v241 = v186;
    v106 = swift_getOpaqueTypeConformance2();
    v204[0] = v105;
    v204[1] = v106;
    v107 = MEMORY[0x242612B20](v103, v196, v204);
    v240 = v195;
    v241 = v191;
    v91 = v101;
    v108 = swift_getOpaqueTypeConformance2();
    v203[0] = v107;
    v203[1] = v108;
    v75 = v105;
    v70 = v97;
    v202 = MEMORY[0x242612B20](v103, v190, v203);
    v79 = v185;
    v201[0] = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v185, &v202);
    v61 = MEMORY[0x24BDEDBB8];
    v201[1] = MEMORY[0x24BDEDBB8];
    v109 = MEMORY[0x24BDED308];
    v110 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v192, v201);
    v111 = sub_23BE000F4(&qword_256AC6848, &qword_256AC6818, MEMORY[0x24BDF1028]);
    v200[0] = v110;
    v200[1] = v111;
    v112 = MEMORY[0x242612B20](v109, v193, v200);
    v113 = sub_23BE000F4(&qword_256AC6850, &qword_256AC6820, MEMORY[0x24BDEF370]);
    v199[0] = v112;
    v199[1] = v113;
    v114 = MEMORY[0x242612B20](v109, v194, v199);
    v115 = sub_23BE000F4(&qword_256AC6858, &qword_256AC6828, MEMORY[0x24BDEDC10]);
    v198[0] = v114;
    v198[1] = v115;
    v87 = v104;
    v116 = v183;
    MEMORY[0x242612B20](v109, v183, v198);
    v117 = v177;
    sub_23BDF63B4(v177, v87);
    (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v117, v87);
    v92 = v56;
    v89 = v116;
    v93 = v70;
  }
  v176(v92, v93);
LABEL_7:
  v228[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v187);
  v228[1] = v61;
  v142 = MEMORY[0x24BDED308];
  v143 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v70, v228);
  v227[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4498], v188);
  v227[1] = v61;
  v144 = MEMORY[0x242612B20](v142, v91, v227);
  v226[0] = v143;
  v226[1] = v144;
  v145 = MEMORY[0x24BDEF3E0];
  v146 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v87, v226);
  v240 = v197;
  v241 = v75;
  v147 = swift_getOpaqueTypeConformance2();
  v225[0] = v75;
  v225[1] = v147;
  v148 = MEMORY[0x242612B20](v145, v196, v225);
  v240 = v195;
  v241 = v191;
  v149 = swift_getOpaqueTypeConformance2();
  v224[0] = v148;
  v224[1] = v149;
  v223 = MEMORY[0x242612B20](v145, v190, v224);
  v222[0] = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v79, &v223);
  v222[1] = v61;
  v150 = MEMORY[0x242612B20](v142, v192, v222);
  v151 = sub_23BE000F4(&qword_256AC6848, &qword_256AC6818, MEMORY[0x24BDF1028]);
  v221[0] = v150;
  v221[1] = v151;
  v152 = MEMORY[0x242612B20](v142, v193, v221);
  v153 = sub_23BE000F4(&qword_256AC6850, &qword_256AC6820, MEMORY[0x24BDEF370]);
  v220[0] = v152;
  v220[1] = v153;
  v154 = MEMORY[0x242612B20](v142, v194, v220);
  v155 = sub_23BE000F4(&qword_256AC6858, &qword_256AC6828, MEMORY[0x24BDEDC10]);
  v219[0] = v154;
  v219[1] = v155;
  v156 = MEMORY[0x242612B20](v142, v89, v219);
  v218[0] = v146;
  v218[1] = v156;
  v157 = v182;
  MEMORY[0x242612B20](v145, v182, v218);
  v158 = v181;
  v159 = v189;
  (*(void (**)(uint64_t, char *, uint64_t))(v181 + 16))(v184, v189, v157);
  return (*(uint64_t (**)(char *, uint64_t))(v158 + 8))(v159, v157);
}

uint64_t sub_23BDFE6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for CreatePlanBannerView(0, a2, a3, a4);
  sub_23BDF6810();
  sub_23BE5AC18();
  return swift_release();
}

uint64_t sub_23BDFE750()
{
  return swift_release();
}

uint64_t sub_23BDFE758(uint64_t a1)
{
  swift_retain();
  sub_23BDFE7B4();
  swift_retain();
  return a1;
}

uint64_t sub_23BDFE7B4()
{
  return swift_retain();
}

uint64_t sub_23BDFE7BC()
{
  return sub_23BDFE7E0(&qword_256AC6878, &qword_256AC6880, (uint64_t (*)(void))sub_23BDFE848, MEMORY[0x24BDEBEE0]);
}

uint64_t sub_23BDFE7E0(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = a3();
    v9[1] = a4;
    result = MEMORY[0x242612B20](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BDFE848()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_256AC6888;
  if (!qword_256AC6888)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6890);
    v2 = sub_23BDFE8B4();
    v3[0] = MEMORY[0x24BDF3E20];
    v3[1] = v2;
    result = MEMORY[0x242612B20](MEMORY[0x24BDED308], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AC6888);
  }
  return result;
}

unint64_t sub_23BDFE8B4()
{
  unint64_t result;

  result = qword_256AC6898;
  if (!qword_256AC6898)
  {
    result = MEMORY[0x242612B20](MEMORY[0x24BDED590], MEMORY[0x24BDED5B8]);
    atomic_store(result, (unint64_t *)&qword_256AC6898);
  }
  return result;
}

uint64_t sub_23BDFE8F8(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_23BDFE908()
{
  return sub_23BDFF450((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BDFD604);
}

unint64_t sub_23BDFE914()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AC68A0[0];
  if (!qword_256AC68A0[0])
  {
    v1 = sub_23BE5A804();
    result = MEMORY[0x242612B20](MEMORY[0x24BDED990], v1);
    atomic_store(result, qword_256AC68A0);
  }
  return result;
}

uint64_t sub_23BDFE95C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23BE5A804();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BDFE99C()
{
  uint64_t v0;

  return sub_23BDFE6E8(v0 + 32, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 5);
}

uint64_t sub_23BDFE9BC(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23BDFEA1C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BDFEA58()
{
  return sub_23BE5AA08();
}

uint64_t sub_23BDFEA74()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for BrowseFontDescriptor(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_23BDFEAAC()
{
  swift_release();
  sub_23BDFE750();
  return swift_release();
}

uint64_t sub_23BDFEAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  swift_retain();
  sub_23BDFE7B4();
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_retain();
  return a1;
}

uint64_t sub_23BDFEB4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  sub_23BDFE7B4();
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  sub_23BDFE750();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_23BDFEC00(uint64_t a1, uint64_t a2)
{
  char v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = v4;
  sub_23BDFE750();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t sub_23BDFEC68(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_23BDFECB0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CreatePlanBannerView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CreatePlanBannerView);
}

uint64_t sub_23BDFED08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  _QWORD v49[2];
  _QWORD v50[2];
  _QWORD v51[2];
  uint64_t v52;
  _QWORD v53[2];
  _QWORD v54[2];
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  uint64_t v58;
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[2];
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[3];

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67E8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
  sub_23BE5A8DC();
  sub_23BE5AB04();
  swift_getTupleTypeMetadata3();
  v0 = sub_23BE5ABD0();
  v1 = MEMORY[0x24BDF5428];
  MEMORY[0x242612B20](MEMORY[0x24BDF5428], v0);
  v2 = sub_23BE5AB94();
  v3 = sub_23BE5A7EC();
  v4 = MEMORY[0x24BDF4700];
  v5 = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v2);
  v6 = MEMORY[0x24BDECC60];
  v67[0] = v5;
  v67[1] = MEMORY[0x24BDECC60];
  v7 = MEMORY[0x24BDED308];
  v46 = v3;
  v47 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v3, v67);
  v65 = v3;
  v66 = v47;
  v8 = MEMORY[0x24BDF3110];
  MEMORY[0x242612AB4](255, &v65, MEMORY[0x24BDF3110], 0);
  v42 = sub_23BE5A8DC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F8);
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v9 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v1, v9);
  v10 = sub_23BE5AB94();
  v11 = sub_23BE5A7EC();
  v64[0] = MEMORY[0x242612B20](v4, v10);
  v64[1] = v6;
  v45 = v11;
  v44 = MEMORY[0x242612B20](v7, v11, v64);
  v65 = v11;
  v66 = v44;
  MEMORY[0x242612AB4](255, &v65, v8, 0);
  v43 = sub_23BE5A8DC();
  v12 = sub_23BE5AB04();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6800);
  v41 = v12;
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v13 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v1, v13);
  v14 = sub_23BE5AB94();
  v15 = sub_23BE5A7EC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6808);
  v16 = sub_23BE5A7EC();
  sub_23BE5A7EC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6810);
  sub_23BE5A7EC();
  swift_getTupleTypeMetadata2();
  v17 = sub_23BE5ABD0();
  MEMORY[0x242612B20](v1, v17);
  v18 = sub_23BE5AB7C();
  v19 = sub_23BE5A7EC();
  v20 = sub_23BE5A8DC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6818);
  v21 = sub_23BE5A7EC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6820);
  v22 = sub_23BE5A7EC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6828);
  v23 = sub_23BE5A7EC();
  v36 = sub_23BE5A8DC();
  v35 = sub_23BE5AB04();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6830);
  v37 = sub_23BE5A7EC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6838);
  v39 = sub_23BE5A7EC();
  v38 = sub_23BE5A7EC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6840);
  v40 = sub_23BE5A8DC();
  v24 = MEMORY[0x242612B20](MEMORY[0x24BDF4700], v14);
  v25 = MEMORY[0x24BDEDBB8];
  v63[0] = v24;
  v63[1] = MEMORY[0x24BDEDBB8];
  v26 = MEMORY[0x24BDED308];
  v27 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v15, v63);
  v62[0] = MEMORY[0x242612B20](MEMORY[0x24BDF4498], v18);
  v62[1] = v25;
  v61[0] = v27;
  v61[1] = MEMORY[0x242612B20](v26, v19, v62);
  v28 = MEMORY[0x24BDEF3E0];
  v29 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v20, v61);
  v65 = v46;
  v66 = v47;
  v60[0] = v47;
  v60[1] = swift_getOpaqueTypeConformance2();
  v30 = MEMORY[0x242612B20](v28, v42, v60);
  v65 = v45;
  v66 = v44;
  v59[0] = v30;
  v59[1] = swift_getOpaqueTypeConformance2();
  v58 = MEMORY[0x242612B20](v28, v43, v59);
  v31 = MEMORY[0x24BDF3F50];
  v57[0] = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v41, &v58);
  v57[1] = v25;
  v56[0] = MEMORY[0x242612B20](v26, v16, v57);
  v56[1] = sub_23BE000F4(&qword_256AC6848, &qword_256AC6818, MEMORY[0x24BDF1028]);
  v55[0] = MEMORY[0x242612B20](v26, v21, v56);
  v55[1] = sub_23BE000F4(&qword_256AC6850, &qword_256AC6820, MEMORY[0x24BDEF370]);
  v54[0] = MEMORY[0x242612B20](v26, v22, v55);
  v54[1] = sub_23BE000F4(&qword_256AC6858, &qword_256AC6828, MEMORY[0x24BDEDC10]);
  v53[0] = v29;
  v53[1] = MEMORY[0x242612B20](v26, v23, v54);
  v52 = MEMORY[0x242612B20](v28, v36, v53);
  v51[0] = MEMORY[0x242612B20](v31, v35, &v52);
  v51[1] = sub_23BE000F4(&qword_256AC6860, &qword_256AC6830, MEMORY[0x24BDF06D0]);
  v50[0] = MEMORY[0x242612B20](v26, v37, v51);
  v50[1] = sub_23BE000F4(&qword_256AC6868, &qword_256AC6838, MEMORY[0x24BDEB950]);
  v32 = MEMORY[0x242612B20](v26, v39, v50);
  v33 = MEMORY[0x24BDF0910];
  v49[0] = v32;
  v49[1] = MEMORY[0x24BDF0910];
  v48[0] = MEMORY[0x242612B20](v26, v38, v49);
  v48[1] = sub_23BDFE7E0(&qword_256AC6870, &qword_256AC6840, sub_23BDFE7BC, v33);
  return MEMORY[0x242612B20](v28, v40, v48);
}

uint64_t sub_23BDFF438()
{
  return sub_23BDFFAD4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BDFB064);
}

uint64_t sub_23BDFF444()
{
  return sub_23BDFF450((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BDF941C);
}

uint64_t sub_23BDFF450(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23BDFF464@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BDF7C7C(*(__int128 **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_23BDFF480()
{
  unint64_t result;

  result = qword_256AC6938;
  if (!qword_256AC6938)
  {
    result = MEMORY[0x242612B20](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256AC6938);
  }
  return result;
}

uint64_t sub_23BDFF4C4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_23BDFF4D4(uint64_t a1)
{
  swift_release();
  return a1;
}

unint64_t sub_23BDFF4FC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AC6940;
  if (!qword_256AC6940)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F0);
    v2[0] = sub_23BE000F4(&qword_256AC6948, &qword_256AC6950, MEMORY[0x24BDF43B0]);
    v2[1] = MEMORY[0x24BDF5138];
    result = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AC6940);
  }
  return result;
}

uint64_t sub_23BDFF580(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t sub_23BDFF590@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BDF7210(*(__int128 **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23BDFF5A0()
{
  uint64_t v0;

  return sub_23BDFE6E8(v0 + 32, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 4);
}

uint64_t sub_23BDFF5C0@<X0>(uint64_t a1@<X8>)
{
  return sub_23BDF6C0C(a1);
}

unint64_t sub_23BDFF5C8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AC6968;
  if (!qword_256AC6968)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6960);
    v2[0] = sub_23BDFF64C();
    v2[1] = sub_23BE000F4(&qword_256AC69B0, &qword_256AC69B8, MEMORY[0x24BDF0710]);
    result = MEMORY[0x242612B20](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AC6968);
  }
  return result;
}

unint64_t sub_23BDFF64C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AC6970;
  if (!qword_256AC6970)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6978);
    v2[0] = sub_23BDFF6D0();
    v2[1] = sub_23BE000F4(&qword_256AC69A0, &qword_256AC69A8, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242612B20](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AC6970);
  }
  return result;
}

unint64_t sub_23BDFF6D0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AC6980;
  if (!qword_256AC6980)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6988);
    v2 = sub_23BE000F4(&qword_256AC6990, &qword_256AC6998, MEMORY[0x24BDF1028]);
    v3[0] = MEMORY[0x24BDF1F80];
    v3[1] = v2;
    result = MEMORY[0x242612B20](MEMORY[0x24BDED308], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AC6980);
  }
  return result;
}

uint64_t sub_23BDFF754@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_23BE5A834();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_23BDFF784()
{
  return sub_23BE5A840();
}

uint64_t sub_23BDFF7B0()
{
  return sub_23BE5A81C();
}

uint64_t sub_23BDFF7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_23BDFF84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23BDFF7D0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDF1CE0], MEMORY[0x24BDEDFF0]);
}

double sub_23BDFF874(double a1)
{
  uint64_t v1;

  return *(double *)(v1 + 56) * a1;
}

uint64_t sub_23BDFF880(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_23BDFF8E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BDF8630(*(__int128 **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t objectdestroy_26Tm()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_23BDFF934()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AC69C0;
  if (!qword_256AC69C0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC67F8);
    v2[0] = sub_23BE000F4(&qword_256AC69C8, &qword_256AC69D0, MEMORY[0x24BDF4700]);
    v2[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x242612B20](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AC69C0);
  }
  return result;
}

uint64_t sub_23BDFF9B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_BYTE *)(a1 + 96);
  sub_23BDFF4C4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release();
  swift_bridgeObjectRelease();
  sub_23BDFF4C4(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23BDFFA40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_BYTE *)(a1 + 96);
  sub_23BDFF580(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23BDFF580(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_23BDFFAC8()
{
  return sub_23BDFFAD4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BDFA038);
}

uint64_t sub_23BDFFAD4(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_23BDFFAE8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AC69E8;
  if (!qword_256AC69E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC69E0);
    v2[0] = sub_23BDFFE44(&qword_256AC6930, &qword_256AC67E8, MEMORY[0x24BDF40E8], MEMORY[0x24BDEEC40]);
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x242612B20](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AC69E8);
  }
  return result;
}

uint64_t sub_23BDFFB74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6808);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BDFFBBC@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *(_QWORD *)(v1 + 32);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v1 + 16);
  v5 = *(_OWORD *)v3;
  v6 = *(_OWORD *)(v3 + 16);
  v7 = *(_OWORD *)(v3 + 32);
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(v3 + 48);
  *(_OWORD *)(v4 + 48) = v6;
  *(_OWORD *)(v4 + 64) = v7;
  *(_OWORD *)(v4 + 32) = v5;
  *a1 = sub_23BDFFCD8;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v4;
  return sub_23BDFE758(v3);
}

unint64_t sub_23BDFFC28()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_256AC6A08;
  if (!qword_256AC6A08)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6808);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC69E0);
    v2[3] = sub_23BDFFAE8();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_23BE000F4(&qword_256AC6A10, &qword_256AC6A18, MEMORY[0x24BDEB950]);
    result = MEMORY[0x242612B20](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AC6A08);
  }
  return result;
}

uint64_t sub_23BDFFCD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23BDFAA34(a1, v2 + 32, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_23BDFFCE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_23BE5A7C8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  sub_23BDFE750();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_23BDFFD6C()
{
  uint64_t v0;

  sub_23BE5A7C8();
  return sub_23BDFAC20(v0 + 32);
}

uint64_t objectdestroy_2Tm()
{
  swift_release();
  sub_23BDFE750();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BDFFDF4()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6A38);
  return sub_23BE5AB58();
}

uint64_t sub_23BDFFE44(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = a3;
    v9[1] = a4;
    result = MEMORY[0x242612B20](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BDFFEA4()
{
  unint64_t result;

  result = qword_256AC6A30;
  if (!qword_256AC6A30)
  {
    result = MEMORY[0x242612B20](MEMORY[0x24BEE50E0], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&qword_256AC6A30);
  }
  return result;
}

uint64_t sub_23BDFFEE8(uint64_t a1)
{
  swift_release();
  sub_23BDFE750();
  swift_release();
  return a1;
}

uint64_t sub_23BDFFF44()
{
  return sub_23BE5A828();
}

uint64_t sub_23BDFFF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23BDFF7D0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDED130], MEMORY[0x24BDEE080]);
}

uint64_t sub_23BDFFF88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BDFC1B4(*(uint64_t **)(v1 + 32), a1);
}

uint64_t sub_23BDFFF94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23BE5A804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BDFFFD8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_23BE0001C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AC6A50;
  if (!qword_256AC6A50)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6A48);
    v2[0] = sub_23BE000F4(&qword_256AC6A58, &qword_256AC6A40, MEMORY[0x24BDEC4C0]);
    v2[1] = sub_23BE000F4(&qword_256AC69B0, &qword_256AC69B8, MEMORY[0x24BDF0710]);
    result = MEMORY[0x242612B20](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AC6A50);
  }
  return result;
}

uint64_t sub_23BE000B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23BE000F4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x242612B20](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x242612A84](a1, v6, a5);
}

BOOL static BrowseInsetBehavior.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_23BE00180()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F5465726F6E6769;
  else
    return 0x746C7561666564;
}

uint64_t sub_23BE001C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE00634(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE001E4()
{
  sub_23BE004A4();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE0020C()
{
  sub_23BE004A4();
  return sub_23BE5AF18();
}

uint64_t sub_23BE00234()
{
  sub_23BE0052C();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE0025C()
{
  sub_23BE0052C();
  return sub_23BE5AF18();
}

uint64_t sub_23BE00284()
{
  sub_23BE004E8();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE002AC()
{
  sub_23BE004E8();
  return sub_23BE5AF18();
}

uint64_t BrowseInsetBehavior.encode(to:)(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;

  v17 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6A70);
  v15 = *(_QWORD *)(v3 - 8);
  v16 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6A78);
  v6 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6A80);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE004A4();
  sub_23BE5AF00();
  if ((v17 & 1) != 0)
  {
    v19 = 1;
    sub_23BE004E8();
    sub_23BE5ADF8();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v16);
  }
  else
  {
    v18 = 0;
    sub_23BE0052C();
    sub_23BE5ADF8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_23BE004A4()
{
  unint64_t result;

  result = qword_256AC6A88;
  if (!qword_256AC6A88)
  {
    result = MEMORY[0x242612B20](&unk_23BE5C75C, &type metadata for BrowseInsetBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6A88);
  }
  return result;
}

unint64_t sub_23BE004E8()
{
  unint64_t result;

  result = qword_256AC6A90;
  if (!qword_256AC6A90)
  {
    result = MEMORY[0x242612B20](&unk_23BE5C70C, &type metadata for BrowseInsetBehavior.IgnoreTopCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6A90);
  }
  return result;
}

unint64_t sub_23BE0052C()
{
  unint64_t result;

  result = qword_256AC6A98;
  if (!qword_256AC6A98)
  {
    result = MEMORY[0x242612B20](&unk_23BE5C6BC, &type metadata for BrowseInsetBehavior.DefaultCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6A98);
  }
  return result;
}

uint64_t BrowseInsetBehavior.init(from:)(_QWORD *a1)
{
  return sub_23BE00730(a1) & 1;
}

uint64_t sub_23BE00588@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23BE00730(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t sub_23BE005B4(_QWORD *a1)
{
  unsigned __int8 *v1;

  return BrowseInsetBehavior.encode(to:)(a1, *v1);
}

uint64_t BrowseInsetBehavior.hash(into:)()
{
  return sub_23BE5AEC4();
}

uint64_t BrowseInsetBehavior.hashValue.getter()
{
  sub_23BE5AEB8();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE00634(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746C7561666564 && a2 == 0xE700000000000000;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F5465726F6E6769 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BE00730(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;

  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AE0);
  v22 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v25 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AE8);
  v3 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE004A4();
  v10 = v26;
  sub_23BE5AEF4();
  if (v10)
    goto LABEL_7;
  v11 = v5;
  v12 = v25;
  v21 = a1;
  v26 = v7;
  v13 = sub_23BE5ADEC();
  v14 = v6;
  if (*(_QWORD *)(v13 + 16) != 1)
  {
    v16 = sub_23BE5AD68();
    swift_allocError();
    v17 = v9;
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v19 = &type metadata for BrowseInsetBehavior;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v6);
    a1 = v21;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v6;
  }
  v6 = *(unsigned __int8 *)(v13 + 32);
  if ((v6 & 1) != 0)
  {
    v28 = 1;
    sub_23BE004E8();
    sub_23BE5AD80();
    v15 = v26;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v24);
  }
  else
  {
    v27 = 0;
    sub_23BE0052C();
    sub_23BE5AD80();
    v15 = v26;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v23);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return v6;
}

unint64_t sub_23BE00A60()
{
  unint64_t result;

  result = qword_256AC6AA0;
  if (!qword_256AC6AA0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseInsetBehavior, &type metadata for BrowseInsetBehavior);
    atomic_store(result, (unint64_t *)&qword_256AC6AA0);
  }
  return result;
}

ValueMetadata *type metadata accessor for BrowseInsetBehavior()
{
  return &type metadata for BrowseInsetBehavior;
}

uint64_t _s15FitnessBrowsing19BrowseInsetBehaviorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BE00B08 + 4 * byte_23BE5C445[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BE00B3C + 4 * byte_23BE5C440[v4]))();
}

uint64_t sub_23BE00B3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE00B44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE00B4CLL);
  return result;
}

uint64_t sub_23BE00B58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE00B60);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BE00B64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE00B6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseInsetBehavior.CodingKeys()
{
  return &type metadata for BrowseInsetBehavior.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowseInsetBehavior.DefaultCodingKeys()
{
  return &type metadata for BrowseInsetBehavior.DefaultCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseInsetBehavior.IgnoreTopCodingKeys()
{
  return &type metadata for BrowseInsetBehavior.IgnoreTopCodingKeys;
}

unint64_t sub_23BE00BAC()
{
  unint64_t result;

  result = qword_256AC6AA8;
  if (!qword_256AC6AA8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5C694, &type metadata for BrowseInsetBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6AA8);
  }
  return result;
}

unint64_t sub_23BE00BF4()
{
  unint64_t result;

  result = qword_256AC6AB0;
  if (!qword_256AC6AB0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5C5B4, &type metadata for BrowseInsetBehavior.DefaultCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6AB0);
  }
  return result;
}

unint64_t sub_23BE00C3C()
{
  unint64_t result;

  result = qword_256AC6AB8;
  if (!qword_256AC6AB8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5C5DC, &type metadata for BrowseInsetBehavior.DefaultCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6AB8);
  }
  return result;
}

unint64_t sub_23BE00C84()
{
  unint64_t result;

  result = qword_256AC6AC0;
  if (!qword_256AC6AC0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5C564, &type metadata for BrowseInsetBehavior.IgnoreTopCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6AC0);
  }
  return result;
}

unint64_t sub_23BE00CCC()
{
  unint64_t result;

  result = qword_256AC6AC8;
  if (!qword_256AC6AC8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5C58C, &type metadata for BrowseInsetBehavior.IgnoreTopCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6AC8);
  }
  return result;
}

unint64_t sub_23BE00D14()
{
  unint64_t result;

  result = qword_256AC6AD0;
  if (!qword_256AC6AD0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5C604, &type metadata for BrowseInsetBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6AD0);
  }
  return result;
}

unint64_t sub_23BE00D5C()
{
  unint64_t result;

  result = qword_256AC6AD8;
  if (!qword_256AC6AD8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5C62C, &type metadata for BrowseInsetBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6AD8);
  }
  return result;
}

uint64_t BrowseItem.actionTitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BDFFFD8(v1, a1, &qword_256AC6478);
}

uint64_t BrowseItem.artworkDescriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for BrowseItem();
  return sub_23BDFFFD8(v1 + *(int *)(v3 + 20), a1, &qword_256AC6490);
}

uint64_t type metadata accessor for BrowseItem()
{
  uint64_t result;

  result = qword_256AC6C58;
  if (!qword_256AC6C58)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BrowseItem.artworkOverlayTags.getter()
{
  type metadata accessor for BrowseItem();
  return swift_bridgeObjectRetain();
}

uint64_t BrowseItem.assetLoadStatus.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BrowseItem() + 28));
}

uint64_t BrowseItem.bookmarked.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BrowseItem() + 32));
}

uint64_t BrowseItem.caption.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for BrowseItem();
  return sub_23BDFFFD8(v1 + *(int *)(v3 + 36), a1, &qword_256AC6478);
}

uint64_t BrowseItem.displayStyle.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BrowseItem() + 40));
}

uint64_t BrowseItem.dynamicBrickDisplayStyle.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BrowseItem() + 44));
}

uint64_t BrowseItem.healthKitActivityTypes.getter()
{
  type metadata accessor for BrowseItem();
  return swift_bridgeObjectRetain();
}

uint64_t BrowseItem.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BrowseItem() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BrowseItem.link.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for BrowseItem();
  return sub_23BDFFFD8(v1 + *(int *)(v3 + 56), a1, &qword_256AC6AF8);
}

uint64_t BrowseItem.mediaType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BrowseItem() + 60));
}

uint64_t BrowseItem.referenceIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BrowseItem() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BrowseItem.referenceType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BrowseItem() + 68));
}

uint64_t BrowseItem.subtitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for BrowseItem();
  return sub_23BDFFFD8(v1 + *(int *)(v3 + 72), a1, &qword_256AC6478);
}

uint64_t BrowseItem.subtitleTextAttribute.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v1 + *(int *)(type metadata accessor for BrowseItem() + 76);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(v3 + 48);
  return sub_23BE010BC(v4, v5, v6, v7, v8, v9);
}

uint64_t sub_23BE010BC(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  if (a6 != 1)
  {
    sub_23BE010EC(result, a2, a3, a4);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23BE010EC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 0xFF)
    return sub_23BE01100(a1, a2, a3, a4);
  return a1;
}

uint64_t sub_23BE01100(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t BrowseItem.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for BrowseItem();
  return sub_23BDFFFD8(v1 + *(int *)(v3 + 80), a1, &qword_256AC6478);
}

uint64_t BrowseItem.titleTextAttribute.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v1 + *(int *)(type metadata accessor for BrowseItem() + 84);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(v3 + 48);
  return sub_23BE010BC(v4, v5, v6, v7, v8, v9);
}

__n128 BrowseItem.init(actionTitle:artworkDescriptor:artworkOverlayTags:assetLoadStatus:bookmarked:caption:displayStyle:dynamicBrickDisplayStyle:healthKitActivityTypes:identifier:link:mediaType:referenceIdentifier:referenceType:subtitle:subtitleTextAttribute:title:titleTextAttribute:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, __int128 *a19, uint64_t a20,__int128 *a21)
{
  int *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  __n128 result;
  char v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  __int128 v44;

  v38 = a19[1];
  v39 = *a19;
  v36 = *((_QWORD *)a19 + 5);
  v37 = *((_QWORD *)a19 + 4);
  v35 = *((_BYTE *)a19 + 48);
  v43 = (__n128)a21[1];
  v44 = *a21;
  v41 = *((_QWORD *)a21 + 5);
  v42 = *((_QWORD *)a21 + 4);
  v40 = *((_BYTE *)a21 + 48);
  sub_23BE013D8(a1, a9, &qword_256AC6478);
  v27 = (int *)type metadata accessor for BrowseItem();
  sub_23BE013D8(a2, a9 + v27[5], &qword_256AC6490);
  *(_QWORD *)(a9 + v27[6]) = a3;
  *(_BYTE *)(a9 + v27[7]) = a4;
  *(_BYTE *)(a9 + v27[8]) = a5;
  sub_23BE013D8(a6, a9 + v27[9], &qword_256AC6478);
  *(_BYTE *)(a9 + v27[10]) = a7;
  *(_BYTE *)(a9 + v27[11]) = a8;
  *(_QWORD *)(a9 + v27[12]) = a10;
  v28 = (_QWORD *)(a9 + v27[13]);
  *v28 = a11;
  v28[1] = a12;
  sub_23BE013D8(a13, a9 + v27[14], &qword_256AC6AF8);
  *(_BYTE *)(a9 + v27[15]) = a14;
  v29 = (_QWORD *)(a9 + v27[16]);
  *v29 = a15;
  v29[1] = a16;
  *(_BYTE *)(a9 + v27[17]) = a17;
  sub_23BE013D8(a18, a9 + v27[18], &qword_256AC6478);
  v30 = a9 + v27[19];
  *(_OWORD *)v30 = v39;
  *(_OWORD *)(v30 + 16) = v38;
  *(_QWORD *)(v30 + 32) = v37;
  *(_QWORD *)(v30 + 40) = v36;
  *(_BYTE *)(v30 + 48) = v35;
  sub_23BE013D8(a20, a9 + v27[20], &qword_256AC6478);
  v31 = a9 + v27[21];
  result = v43;
  *(_OWORD *)v31 = v44;
  *(__n128 *)(v31 + 16) = v43;
  *(_QWORD *)(v31 + 32) = v42;
  *(_QWORD *)(v31 + 40) = v41;
  *(_BYTE *)(v31 + 48) = v40;
  return result;
}

uint64_t sub_23BE013D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BE0141C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE01458 + 4 * byte_23BE5C7B0[a1]))(0x69546E6F69746361, 0xEB00000000656C74);
}

unint64_t sub_23BE01458()
{
  return 0xD000000000000011;
}

uint64_t sub_23BE015E4()
{
  return 0x656C746974;
}

uint64_t sub_23BE01614()
{
  unsigned __int8 *v0;

  return sub_23BE0141C(*v0);
}

uint64_t sub_23BE0161C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE07974(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BE01640(_BYTE *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_23BE0164C()
{
  sub_23BE01CA8();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE01674()
{
  sub_23BE01CA8();
  return sub_23BE5AF18();
}

uint64_t BrowseItem.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  __int128 *v10;
  char v11;
  __int128 v12;
  __int128 *v13;
  char v14;
  __int128 v15;
  uint64_t v17;
  int *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6B00);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE01CA8();
  sub_23BE5AF00();
  LOBYTE(v19) = 0;
  sub_23BE5A678();
  sub_23BDF23E4(&qword_256AC6B10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5B8]);
  sub_23BE5AE1C();
  if (!v2)
  {
    v18 = (int *)type metadata accessor for BrowseItem();
    LOBYTE(v19) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
    sub_23BE02A6C(&qword_256AC6B18, MEMORY[0x24BE35058]);
    sub_23BE5AE4C();
    v9 = v18;
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + v18[6]);
    v23 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6B20);
    sub_23BE02AB0(&qword_256AC6B28, (uint64_t (*)(void))sub_23BE01CEC, MEMORY[0x24BEE1700]);
    sub_23BE5AE4C();
    LOBYTE(v19) = *(_BYTE *)(v3 + v9[7]);
    v23 = 3;
    sub_23BE01D30();
    sub_23BE5AE1C();
    LOBYTE(v19) = 4;
    sub_23BE5AE10();
    LOBYTE(v19) = 5;
    sub_23BE5AE1C();
    LOBYTE(v19) = *(_BYTE *)(v3 + v9[10]);
    v23 = 6;
    sub_23BE01D74();
    sub_23BE5AE4C();
    LOBYTE(v19) = *(_BYTE *)(v3 + v9[11]);
    v23 = 7;
    sub_23BE01DB8();
    sub_23BE5AE1C();
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + v9[12]);
    v23 = 8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6B50);
    sub_23BE02C28(&qword_256AC6B58, MEMORY[0x24BEE1E90], MEMORY[0x24BEE12A0]);
    sub_23BE5AE4C();
    LOBYTE(v19) = 9;
    sub_23BE5AE28();
    LOBYTE(v19) = 10;
    type metadata accessor for EditorialLink();
    sub_23BDF23E4(&qword_256AC6B60, (uint64_t (*)(uint64_t))type metadata accessor for EditorialLink, (uint64_t)&protocol conformance descriptor for EditorialLink);
    sub_23BE5AE1C();
    LOBYTE(v19) = *(_BYTE *)(v3 + v18[15]);
    v23 = 11;
    sub_23BE01DFC();
    sub_23BE5AE1C();
    LOBYTE(v19) = 12;
    sub_23BE5AE28();
    LOBYTE(v19) = *(_BYTE *)(v3 + v18[17]);
    v23 = 13;
    sub_23BE01E40();
    sub_23BE5AE4C();
    LOBYTE(v19) = 14;
    sub_23BE5AE1C();
    v10 = (__int128 *)(v3 + v18[19]);
    v11 = *((_BYTE *)v10 + 48);
    v12 = v10[1];
    v19 = *v10;
    v20 = v12;
    v21 = v10[2];
    v22 = v11;
    v23 = 15;
    sub_23BE01E84();
    sub_23BE5AE1C();
    LOBYTE(v19) = 16;
    sub_23BE5AE1C();
    v13 = (__int128 *)(v3 + v18[21]);
    v14 = *((_BYTE *)v13 + 48);
    v15 = v13[1];
    v19 = *v13;
    v20 = v15;
    v21 = v13[2];
    v22 = v14;
    v23 = 17;
    sub_23BE5AE1C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23BE01CA8()
{
  unint64_t result;

  result = qword_256AC6B08;
  if (!qword_256AC6B08)
  {
    result = MEMORY[0x242612B20](&unk_23BE5CA9C, &type metadata for BrowseItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6B08);
  }
  return result;
}

unint64_t sub_23BE01CEC()
{
  unint64_t result;

  result = qword_256AC6B30;
  if (!qword_256AC6B30)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseArtworkOverlayTag, &type metadata for BrowseArtworkOverlayTag);
    atomic_store(result, (unint64_t *)&qword_256AC6B30);
  }
  return result;
}

unint64_t sub_23BE01D30()
{
  unint64_t result;

  result = qword_256AC6B38;
  if (!qword_256AC6B38)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseItemAssetLoadStatus, &type metadata for BrowseItemAssetLoadStatus);
    atomic_store(result, (unint64_t *)&qword_256AC6B38);
  }
  return result;
}

unint64_t sub_23BE01D74()
{
  unint64_t result;

  result = qword_256AC6B40;
  if (!qword_256AC6B40)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseDisplayStyle, &type metadata for BrowseDisplayStyle);
    atomic_store(result, (unint64_t *)&qword_256AC6B40);
  }
  return result;
}

unint64_t sub_23BE01DB8()
{
  unint64_t result;

  result = qword_256AC6B48;
  if (!qword_256AC6B48)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for DynamicBrickDisplayStyle, &type metadata for DynamicBrickDisplayStyle);
    atomic_store(result, (unint64_t *)&qword_256AC6B48);
  }
  return result;
}

unint64_t sub_23BE01DFC()
{
  unint64_t result;

  result = qword_256AC6B68;
  if (!qword_256AC6B68)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseItemMediaType, &type metadata for BrowseItemMediaType);
    atomic_store(result, (unint64_t *)&qword_256AC6B68);
  }
  return result;
}

unint64_t sub_23BE01E40()
{
  unint64_t result;

  result = qword_256AC6B70;
  if (!qword_256AC6B70)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseItemReferenceType, &type metadata for BrowseItemReferenceType);
    atomic_store(result, (unint64_t *)&qword_256AC6B70);
  }
  return result;
}

unint64_t sub_23BE01E84()
{
  unint64_t result;

  result = qword_256AC6B78;
  if (!qword_256AC6B78)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseTextAttributes, &type metadata for BrowseTextAttributes);
    atomic_store(result, (unint64_t *)&qword_256AC6B78);
  }
  return result;
}

uint64_t BrowseItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  int *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  char v57;

  v43 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF8);
  MEMORY[0x24BDAC7A8](v3);
  v44 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  MEMORY[0x24BDAC7A8](v45);
  v46 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v41 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v41 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v41 - v16;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6B80);
  MEMORY[0x24BDAC7A8](v47);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = (int *)type metadata accessor for BrowseItem();
  MEMORY[0x24BDAC7A8](v51);
  v52 = (uint64_t)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[3];
  v50 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v21);
  sub_23BE01CA8();
  v48 = v19;
  v22 = (uint64_t)v49;
  sub_23BE5AEF4();
  if (v22)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  v23 = (uint64_t)v46;
  v49 = v15;
  v41 = v9;
  v42 = v12;
  sub_23BE5A678();
  LOBYTE(v53) = 0;
  v24 = sub_23BDF23E4(&qword_256AC6B88, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5D0]);
  sub_23BE5ADB0();
  v25 = v52;
  sub_23BE013D8((uint64_t)v17, v52, &qword_256AC6478);
  LOBYTE(v53) = 1;
  sub_23BE02A6C(&qword_256AC6B90, MEMORY[0x24BE35060]);
  sub_23BE5ADE0();
  v45 = v24;
  v26 = v51;
  sub_23BE013D8(v23, v25 + v51[5], &qword_256AC6490);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6B20);
  v57 = 2;
  sub_23BE02AB0(&qword_256AC6B98, (uint64_t (*)(void))sub_23BE02B18, MEMORY[0x24BEE1720]);
  sub_23BE5ADE0();
  *(_QWORD *)(v25 + v26[6]) = v53;
  v57 = 3;
  sub_23BE02B5C();
  sub_23BE5ADB0();
  *(_BYTE *)(v25 + v26[7]) = v53;
  LOBYTE(v53) = 4;
  *(_BYTE *)(v25 + v26[8]) = sub_23BE5ADA4();
  LOBYTE(v53) = 5;
  sub_23BE5ADB0();
  sub_23BE013D8((uint64_t)v49, v25 + v26[9], &qword_256AC6478);
  v57 = 6;
  sub_23BE02BA0();
  sub_23BE5ADE0();
  *(_BYTE *)(v25 + v26[10]) = v53;
  v57 = 7;
  sub_23BE02BE4();
  sub_23BE5ADB0();
  *(_BYTE *)(v25 + v26[11]) = v53;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6B50);
  v57 = 8;
  sub_23BE02C28(&qword_256AC6BC0, MEMORY[0x24BEE1EB8], MEMORY[0x24BEE12D0]);
  sub_23BE5ADE0();
  *(_QWORD *)(v25 + v26[12]) = v53;
  LOBYTE(v53) = 9;
  v27 = sub_23BE5ADBC();
  v28 = (uint64_t *)(v52 + v51[13]);
  *v28 = v27;
  v28[1] = v29;
  type metadata accessor for EditorialLink();
  LOBYTE(v53) = 10;
  sub_23BDF23E4(&qword_256AC6BC8, (uint64_t (*)(uint64_t))type metadata accessor for EditorialLink, (uint64_t)&protocol conformance descriptor for EditorialLink);
  sub_23BE5ADB0();
  sub_23BE013D8(v44, v52 + v51[14], &qword_256AC6AF8);
  v57 = 11;
  sub_23BE02C88();
  sub_23BE5ADB0();
  *(_BYTE *)(v52 + v51[15]) = v53;
  LOBYTE(v53) = 12;
  v30 = sub_23BE5ADBC();
  v31 = (uint64_t *)(v52 + v51[16]);
  *v31 = v30;
  v31[1] = v32;
  v57 = 13;
  sub_23BE02CCC();
  sub_23BE5ADE0();
  *(_BYTE *)(v52 + v51[17]) = v53;
  LOBYTE(v53) = 14;
  sub_23BE5ADB0();
  sub_23BE013D8((uint64_t)v42, v52 + v51[18], &qword_256AC6478);
  v57 = 15;
  sub_23BE02D10();
  sub_23BE5ADB0();
  v33 = v56;
  v34 = v52 + v51[19];
  v35 = v54;
  *(_OWORD *)v34 = v53;
  *(_OWORD *)(v34 + 16) = v35;
  *(_OWORD *)(v34 + 32) = v55;
  *(_BYTE *)(v34 + 48) = v33;
  LOBYTE(v53) = 16;
  sub_23BE5ADB0();
  sub_23BE013D8((uint64_t)v41, v52 + v51[20], &qword_256AC6478);
  v57 = 17;
  sub_23BE5ADB0();
  MEMORY[8](v48, v47);
  v36 = v56;
  v37 = v52;
  v38 = v52 + v51[21];
  v39 = v54;
  *(_OWORD *)v38 = v53;
  *(_OWORD *)(v38 + 16) = v39;
  *(_OWORD *)(v38 + 32) = v55;
  *(_BYTE *)(v38 + 48) = v36;
  sub_23BE02D54(v37, v43);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  return sub_23BDF2468(v37, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
}

uint64_t sub_23BE02A08(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  if (a6 != 1)
  {
    sub_23BE02A38(result, a2, a3, a4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23BE02A38(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 0xFF)
    return sub_23BE02A4C(a1, a2, a3, a4);
  return a1;
}

uint64_t sub_23BE02A4C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23BE02A6C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6490);
    result = MEMORY[0x242612B20](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BE02AB0(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6B20);
    v8 = a2();
    result = MEMORY[0x242612B20](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BE02B18()
{
  unint64_t result;

  result = qword_256AC6BA0;
  if (!qword_256AC6BA0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseArtworkOverlayTag, &type metadata for BrowseArtworkOverlayTag);
    atomic_store(result, (unint64_t *)&qword_256AC6BA0);
  }
  return result;
}

unint64_t sub_23BE02B5C()
{
  unint64_t result;

  result = qword_256AC6BA8;
  if (!qword_256AC6BA8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseItemAssetLoadStatus, &type metadata for BrowseItemAssetLoadStatus);
    atomic_store(result, (unint64_t *)&qword_256AC6BA8);
  }
  return result;
}

unint64_t sub_23BE02BA0()
{
  unint64_t result;

  result = qword_256AC6BB0;
  if (!qword_256AC6BB0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseDisplayStyle, &type metadata for BrowseDisplayStyle);
    atomic_store(result, (unint64_t *)&qword_256AC6BB0);
  }
  return result;
}

unint64_t sub_23BE02BE4()
{
  unint64_t result;

  result = qword_256AC6BB8;
  if (!qword_256AC6BB8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for DynamicBrickDisplayStyle, &type metadata for DynamicBrickDisplayStyle);
    atomic_store(result, (unint64_t *)&qword_256AC6BB8);
  }
  return result;
}

uint64_t sub_23BE02C28(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6B50);
    v8 = a2;
    result = MEMORY[0x242612B20](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BE02C88()
{
  unint64_t result;

  result = qword_256AC6BD0;
  if (!qword_256AC6BD0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseItemMediaType, &type metadata for BrowseItemMediaType);
    atomic_store(result, (unint64_t *)&qword_256AC6BD0);
  }
  return result;
}

unint64_t sub_23BE02CCC()
{
  unint64_t result;

  result = qword_256AC6BD8;
  if (!qword_256AC6BD8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseItemReferenceType, &type metadata for BrowseItemReferenceType);
    atomic_store(result, (unint64_t *)&qword_256AC6BD8);
  }
  return result;
}

unint64_t sub_23BE02D10()
{
  unint64_t result;

  result = qword_256AC6BE0;
  if (!qword_256AC6BE0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseTextAttributes, &type metadata for BrowseTextAttributes);
    atomic_store(result, (unint64_t *)&qword_256AC6BE0);
  }
  return result;
}

uint64_t sub_23BE02D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BE02D98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseItem.init(from:)(a1, a2);
}

uint64_t sub_23BE02DAC(_QWORD *a1)
{
  return BrowseItem.encode(to:)(a1);
}

void BrowseItem.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);

  v2 = v1;
  v4 = type metadata accessor for EditorialLink();
  v31 = *(_QWORD *)(v4 - 8);
  v32 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v30 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23BE5A678();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v34 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v33 = (char *)&v30 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v30 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v30 - v21;
  sub_23BDFFFD8(v2, (uint64_t)&v30 - v21, &qword_256AC6478);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v35(v22, 1, v9) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v22, v9);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  v23 = (int *)type metadata accessor for BrowseItem();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  sub_23BE5A738();
  v24 = *(_QWORD *)(v2 + v23[6]);
  swift_bridgeObjectRetain();
  sub_23BE03B30(a1, v24);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v2 + v23[7]) == 9)
  {
    sub_23BE5AED0();
  }
  else
  {
    sub_23BE5AED0();
    sub_23BE5AEC4();
  }
  if (*(_BYTE *)(v2 + v23[8]) != 2)
    sub_23BE5AED0();
  sub_23BE5AED0();
  sub_23BDFFFD8(v2 + v23[9], (uint64_t)v20, &qword_256AC6478);
  if (v35(v20, 1, v9) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v20, v9);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  BrowseDisplayStyle.rawValue.getter(*(_BYTE *)(v2 + v23[10]));
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v2 + v23[11]) == 4)
  {
    sub_23BE5AED0();
  }
  else
  {
    sub_23BE5AED0();
    sub_23BE5AEC4();
  }
  v25 = *(_QWORD *)(v2 + v23[12]);
  sub_23BE5AEC4();
  v26 = *(_QWORD *)(v25 + 16);
  if (v26)
  {
    v27 = v25 + 32;
    do
    {
      v27 += 8;
      sub_23BE5AEC4();
      --v26;
    }
    while (v26);
  }
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  sub_23BDFFFD8(v2 + v23[14], (uint64_t)v8, &qword_256AC6AF8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v8, 1, v32) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    v28 = (uint64_t)v8;
    v29 = v30;
    sub_23BE03C98(v28, v30);
    sub_23BE5AED0();
    EditorialLink.hash(into:)();
    sub_23BDF2468(v29, (uint64_t (*)(_QWORD))type metadata accessor for EditorialLink);
  }
  if (*(_BYTE *)(v2 + v23[15]) == 4)
  {
    sub_23BE5AED0();
  }
  else
  {
    sub_23BE5AED0();
    sub_23BE5AEC4();
  }
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

void sub_23BE03304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v6 - 168);
  sub_23BDFFFD8(v1 + v4[18], v7, &qword_256AC6478);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 - 152))(v7, 1, v2) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v3, v7, v2);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
    sub_23BE5AC30();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v2);
  }
  v8 = v1 + v4[19];
  v9 = *(_QWORD *)(v8 + 40);
  if (v9 == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    v10 = *(_BYTE *)(v8 + 48);
    v12 = *(_QWORD *)(v8 + 24);
    v11 = *(_QWORD *)(v8 + 32);
    v13 = *(_QWORD *)(v8 + 16);
    *(_OWORD *)(v6 - 144) = *(_OWORD *)v8;
    *(_QWORD *)(v6 - 128) = v13;
    *(_BYTE *)(v6 - 120) = v12;
    *(_QWORD *)(v6 - 112) = v11;
    *(_QWORD *)(v6 - 104) = v9;
    *(_BYTE *)(v6 - 96) = v10;
    sub_23BE5AED0();
    BrowseTextAttributes.hash(into:)(v0);
  }
  v14 = *(_QWORD *)(v6 - 160);
  sub_23BDFFFD8(v1 + v4[20], v14, &qword_256AC6478);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 - 152))(v14, 1, v2) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v3, v14, v2);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
    sub_23BE5AC30();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v2);
  }
  v15 = v1 + v4[21];
  v16 = *(_QWORD *)(v15 + 40);
  if (v16 == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    v17 = *(_BYTE *)(v15 + 48);
    v19 = *(_QWORD *)(v15 + 24);
    v18 = *(_QWORD *)(v15 + 32);
    v20 = *(_QWORD *)(v15 + 16);
    *(_OWORD *)(v6 - 144) = *(_OWORD *)v15;
    *(_QWORD *)(v6 - 128) = v20;
    *(_BYTE *)(v6 - 120) = v19;
    *(_QWORD *)(v6 - 112) = v18;
    *(_QWORD *)(v6 - 104) = v16;
    *(_BYTE *)(v6 - 96) = v17;
    sub_23BE5AED0();
    BrowseTextAttributes.hash(into:)(v0);
  }
}

uint64_t BrowseItem.hashValue.getter()
{
  _BYTE v1[72];

  sub_23BE5AEB8();
  BrowseItem.hash(into:)((uint64_t)v1);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE03654()
{
  _BYTE v1[72];

  sub_23BE5AEB8();
  BrowseItem.hash(into:)((uint64_t)v1);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE03694()
{
  _BYTE v1[72];

  sub_23BE5AEB8();
  BrowseItem.hash(into:)((uint64_t)v1);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE036D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v12;
  int64_t v13;

  sub_23BE5AEE8();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_16;
    }
    if (__OFADD__(v10++, 1))
      goto LABEL_19;
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_23BE5AEC4();
    }
    v12 = *(_QWORD *)(v3 + 8 * v10);
    if (!v12)
      break;
LABEL_15:
    v6 = (v12 - 1) & v12;
LABEL_16:
    sub_23BE5AEB8();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
    result = sub_23BE5AEE8();
    v9 ^= result;
  }
  v13 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_17;
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    ++v10;
    goto LABEL_15;
  }
  while (1)
  {
    v10 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v10 >= v7)
      goto LABEL_17;
    v12 = *(_QWORD *)(v3 + 8 * v10);
    ++v13;
    if (v12)
      goto LABEL_15;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_23BE038A4(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t result;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t i;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v4 = sub_23BE5A714();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D08);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *((_QWORD *)a1 + 8);
  v12 = a1[1];
  v31 = *a1;
  v32 = v12;
  v13 = a1[2];
  v14 = a1[3];
  v29[1] = a1;
  v33 = v13;
  v34 = v14;
  v35 = v11;
  v29[2] = sub_23BE5AEE8();
  v30 = a2;
  v15 = a2 + 56;
  v16 = 1 << *(_BYTE *)(a2 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(a2 + 56);
  v19 = (unint64_t)(v16 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v21 = 0;
  v22 = 0;
  if (!v18)
    goto LABEL_5;
LABEL_4:
  v23 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v23 | (v22 << 6); ; i = __clz(__rbit64(v26)) + (v22 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, *(_QWORD *)(v30 + 48) + *(_QWORD *)(v5 + 72) * i, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
      goto LABEL_19;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    sub_23BDF23E4(&qword_256AC6D10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF690]);
    v28 = sub_23BE5AC24();
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v21 ^= v28;
    if (v18)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v22++, 1))
      goto LABEL_21;
    if (v22 >= v19)
      goto LABEL_18;
    v26 = *(_QWORD *)(v15 + 8 * v22);
    if (!v26)
      break;
LABEL_14:
    v18 = (v26 - 1) & v26;
  }
  v27 = v22 + 1;
  if (v22 + 1 >= v19)
  {
LABEL_18:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
LABEL_19:
    swift_release();
    return sub_23BE5AEC4();
  }
  v26 = *(_QWORD *)(v15 + 8 * v27);
  if (v26)
  {
    ++v22;
    goto LABEL_14;
  }
  while (1)
  {
    v22 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v22 >= v19)
      goto LABEL_18;
    v26 = *(_QWORD *)(v15 + 8 * v22);
    ++v27;
    if (v26)
      goto LABEL_14;
  }
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_23BE03B30(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v12;
  int64_t v13;

  result = sub_23BE5AEE8();
  v4 = 0;
  v5 = 0;
  v6 = a2 + 56;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v9 &= v9 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v5++, 1))
      goto LABEL_19;
    if (v5 >= v10)
      return sub_23BE5AEC4();
    v12 = *(_QWORD *)(v6 + 8 * v5);
    if (!v12)
      break;
LABEL_16:
    v9 = (v12 - 1) & v12;
LABEL_5:
    sub_23BE5AEB8();
    sub_23BE5AEC4();
    result = sub_23BE5AEE8();
    v4 ^= result;
  }
  v13 = v5 + 1;
  if (v5 + 1 >= v10)
    return sub_23BE5AEC4();
  v12 = *(_QWORD *)(v6 + 8 * v13);
  if (v12)
  {
    ++v5;
    goto LABEL_16;
  }
  while (1)
  {
    v5 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v5 >= v10)
      return sub_23BE5AEC4();
    v12 = *(_QWORD *)(v6 + 8 * v5);
    ++v13;
    if (v12)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_23BE03C98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EditorialLink();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL _s15FitnessBrowsing10BrowseItemV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  int *v62;
  uint64_t v63;
  int v64;
  int v65;
  int *v66;
  uint64_t v67;
  _BOOL8 result;
  uint64_t v69;
  int v70;
  int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  char v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  void (*v128)(uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int8 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 v149;
  uint64_t v150;
  char v151;
  char v152;
  int *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  void (*v164)(uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  unsigned __int8 v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int (*v189)(uint64_t, uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char v226;

  v205 = type metadata accessor for EditorialLink();
  v201 = *(_QWORD *)(v205 - 8);
  MEMORY[0x24BDAC7A8](v205);
  v198 = (uint64_t)&v186 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D18);
  MEMORY[0x24BDAC7A8](v200);
  v203 = (char *)&v186 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v199 = (uint64_t)&v186 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v202 = (uint64_t)&v186 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v204 = (uint64_t)&v186 - v11;
  v12 = sub_23BE5A678();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v211 = (uint64_t)&v186 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D20);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v191 = (uint64_t)&v186 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v197 = (uint64_t)&v186 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v208 = (uint64_t)&v186 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v186 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v190 = (uint64_t)&v186 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v192 = (uint64_t)&v186 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v193 = (uint64_t)&v186 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v194 = (uint64_t)&v186 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v195 = (uint64_t)&v186 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v196 = (uint64_t)&v186 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v206 = (uint64_t)&v186 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v209 = (int *)((char *)&v186 - v40);
  v41 = MEMORY[0x24BDAC7A8](v39);
  v210 = (uint64_t)&v186 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v45 = (char *)&v186 - v44;
  v46 = MEMORY[0x24BDAC7A8](v43);
  v48 = (char *)&v186 - v47;
  MEMORY[0x24BDAC7A8](v46);
  v50 = (char *)&v186 - v49;
  v212 = a1;
  v51 = a1;
  v52 = a2;
  sub_23BDFFFD8(v51, (uint64_t)&v186 - v49, &qword_256AC6478);
  sub_23BDFFFD8(a2, (uint64_t)v48, &qword_256AC6478);
  v207 = v15;
  v53 = (uint64_t)&v23[*(int *)(v15 + 48)];
  sub_23BDFFFD8((uint64_t)v50, (uint64_t)v23, &qword_256AC6478);
  sub_23BDFFFD8((uint64_t)v48, v53, &qword_256AC6478);
  v54 = v13;
  v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v55((uint64_t)v23, 1, v12) == 1)
  {
    sub_23BE000B8((uint64_t)v48, &qword_256AC6478);
    sub_23BE000B8((uint64_t)v50, &qword_256AC6478);
    if (v55(v53, 1, v12) == 1)
    {
      sub_23BE000B8((uint64_t)v23, &qword_256AC6478);
      v56 = v212;
      goto LABEL_10;
    }
LABEL_6:
    v57 = &qword_256AC6D20;
    goto LABEL_7;
  }
  sub_23BDFFFD8((uint64_t)v23, (uint64_t)v45, &qword_256AC6478);
  if (v55(v53, 1, v12) == 1)
  {
    sub_23BE000B8((uint64_t)v48, &qword_256AC6478);
    sub_23BE000B8((uint64_t)v50, &qword_256AC6478);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v45, v12);
    goto LABEL_6;
  }
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  v189 = v55;
  v60 = v211;
  v59(v211, v53, v12);
  sub_23BDF23E4(&qword_256AC6D28, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C8]);
  LODWORD(v188) = sub_23BE5AC3C();
  v61 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v61(v60, v12);
  sub_23BE000B8((uint64_t)v48, &qword_256AC6478);
  sub_23BE000B8((uint64_t)v50, &qword_256AC6478);
  v61((uint64_t)v45, v12);
  v56 = v212;
  v55 = v189;
  sub_23BE000B8((uint64_t)v23, &qword_256AC6478);
  if ((v188 & 1) == 0)
    return 0;
LABEL_10:
  v62 = (int *)type metadata accessor for BrowseItem();
  type metadata accessor for BrowseArtwork();
  sub_23BDF23E4(&qword_256AC6C78, (uint64_t (*)(uint64_t))type metadata accessor for BrowseArtwork, (uint64_t)&protocol conformance descriptor for BrowseArtwork);
  if ((sub_23BE5A72C() & 1) == 0 || (sub_23BE56568(*(_QWORD *)(v56 + v62[6]), *(_QWORD *)(v52 + v62[6])) & 1) == 0)
    return 0;
  v63 = v62[7];
  v64 = *(unsigned __int8 *)(v56 + v63);
  v65 = *(unsigned __int8 *)(v52 + v63);
  if (v64 == 9)
  {
    v66 = v209;
    v67 = v210;
    if (v65 != 9)
      return 0;
  }
  else
  {
    result = 0;
    v66 = v209;
    v67 = v210;
    if (v65 == 9 || v64 != v65)
      return result;
  }
  v69 = v62[8];
  v70 = *(unsigned __int8 *)(v56 + v69);
  v71 = *(unsigned __int8 *)(v52 + v69);
  if (v70 == 2)
  {
    if (v71 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v72 = (v70 & 1) == 0;
    if (v71 == 2 || ((v72 ^ v71) & 1) == 0)
      return result;
  }
  v187 = v54;
  sub_23BDFFFD8(v56 + v62[9], v67, &qword_256AC6478);
  sub_23BDFFFD8(v52 + v62[9], (uint64_t)v66, &qword_256AC6478);
  v73 = v208;
  v74 = v208 + *(int *)(v207 + 48);
  sub_23BDFFFD8(v67, v208, &qword_256AC6478);
  v188 = v74;
  sub_23BDFFFD8((uint64_t)v66, v74, &qword_256AC6478);
  if (v55(v73, 1, v12) == 1)
  {
    sub_23BE000B8((uint64_t)v66, &qword_256AC6478);
    v73 = v208;
    sub_23BE000B8(v67, &qword_256AC6478);
    if (v55(v188, 1, v12) == 1)
    {
      sub_23BE000B8(v73, &qword_256AC6478);
      goto LABEL_30;
    }
LABEL_28:
    v57 = &qword_256AC6D20;
    v58 = v73;
    goto LABEL_8;
  }
  v75 = v206;
  sub_23BDFFFD8(v73, v206, &qword_256AC6478);
  v76 = v188;
  v77 = v55(v188, 1, v12);
  v78 = v187;
  if (v77 == 1)
  {
    sub_23BE000B8((uint64_t)v209, &qword_256AC6478);
    sub_23BE000B8(v210, &qword_256AC6478);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v75, v12);
    goto LABEL_28;
  }
  v79 = v211;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v187 + 32))(v211, v76, v12);
  sub_23BDF23E4(&qword_256AC6D28, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C8]);
  v80 = v52;
  LODWORD(v188) = sub_23BE5AC3C();
  v81 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
  v81(v79, v12);
  sub_23BE000B8((uint64_t)v209, &qword_256AC6478);
  sub_23BE000B8(v210, &qword_256AC6478);
  v81(v75, v12);
  v52 = v80;
  sub_23BE000B8(v208, &qword_256AC6478);
  if ((v188 & 1) == 0)
    return 0;
LABEL_30:
  v82 = v62[10];
  v83 = *(_BYTE *)(v52 + v82);
  v84 = BrowseDisplayStyle.rawValue.getter(*(_BYTE *)(v56 + v82));
  v86 = v85;
  if (v84 == BrowseDisplayStyle.rawValue.getter(v83) && v86 == v87)
  {
    swift_bridgeObjectRelease_n();
    v88 = v204;
    v89 = v205;
  }
  else
  {
    v90 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    v88 = v204;
    v89 = v205;
    if ((v90 & 1) == 0)
      return result;
  }
  v91 = v62[11];
  v92 = *(unsigned __int8 *)(v56 + v91);
  v93 = *(unsigned __int8 *)(v52 + v91);
  if (v92 == 4)
  {
    if (v93 != 4)
      return 0;
  }
  else
  {
    result = 0;
    if (v93 == 4 || v92 != v93)
      return result;
  }
  if (!sub_23BDF02BC(*(_QWORD **)(v56 + v62[12]), *(_QWORD **)(v52 + v62[12])))
    return 0;
  v94 = v62[13];
  v95 = *(_QWORD *)(v56 + v94);
  v96 = *(_QWORD *)(v56 + v94 + 8);
  v97 = (_QWORD *)(v52 + v94);
  if (v95 == *v97 && v96 == v97[1] || (v98 = sub_23BE5AE58(), result = 0, (v98 & 1) != 0))
  {
    sub_23BDFFFD8(v56 + v62[14], v88, &qword_256AC6AF8);
    v99 = v89;
    v100 = v202;
    sub_23BDFFFD8(v52 + v62[14], v202, &qword_256AC6AF8);
    v101 = (uint64_t)v203;
    v102 = (uint64_t)&v203[*(int *)(v200 + 48)];
    sub_23BDFFFD8(v88, (uint64_t)v203, &qword_256AC6AF8);
    v210 = v102;
    sub_23BDFFFD8(v100, v102, &qword_256AC6AF8);
    v103 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v201 + 48);
    if (v103(v101, 1, v99) == 1)
    {
      sub_23BE000B8(v100, &qword_256AC6AF8);
      v23 = v203;
      sub_23BE000B8(v88, &qword_256AC6AF8);
      if (v103(v210, 1, v205) == 1)
      {
        sub_23BE000B8((uint64_t)v23, &qword_256AC6AF8);
LABEL_50:
        v108 = v62[15];
        v109 = *(unsigned __int8 *)(v56 + v108);
        v110 = *(unsigned __int8 *)(v52 + v108);
        if (v109 == 4)
        {
          if (v110 != 4)
            return 0;
        }
        else
        {
          result = 0;
          if (v110 == 4 || v109 != v110)
            return result;
        }
        v111 = v62[16];
        v112 = *(_QWORD *)(v56 + v111);
        v113 = *(_QWORD *)(v56 + v111 + 8);
        v114 = (_QWORD *)(v52 + v111);
        if (v112 == *v114 && v113 == v114[1] || (v115 = sub_23BE5AE58(), result = 0, (v115 & 1) != 0))
        {
          sub_23BE46F80(*(_BYTE *)(v56 + v62[17]));
          if ((v116 & 1) == 0)
            return 0;
          v117 = v196;
          sub_23BDFFFD8(v56 + v62[18], v196, &qword_256AC6478);
          v209 = v62;
          v210 = v52;
          v118 = v52 + v62[18];
          v119 = v195;
          sub_23BDFFFD8(v118, v195, &qword_256AC6478);
          v120 = v197;
          v121 = v197 + *(int *)(v207 + 48);
          sub_23BDFFFD8(v117, v197, &qword_256AC6478);
          sub_23BDFFFD8(v119, v121, &qword_256AC6478);
          v122 = v55(v120, 1, v12);
          v186 = v12;
          v189 = v55;
          if (v122 == 1)
          {
            sub_23BE000B8(v195, &qword_256AC6478);
            sub_23BE000B8(v196, &qword_256AC6478);
            if (v55(v121, 1, v12) == 1)
            {
              sub_23BE000B8(v197, &qword_256AC6478);
              goto LABEL_66;
            }
          }
          else
          {
            sub_23BDFFFD8(v197, v194, &qword_256AC6478);
            if (v55(v121, 1, v12) != 1)
            {
              v123 = v187;
              v124 = v211;
              v125 = v186;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v187 + 32))(v211, v121, v186);
              sub_23BDF23E4(&qword_256AC6D28, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C8]);
              v126 = v194;
              v127 = sub_23BE5AC3C();
              v128 = *(void (**)(uint64_t, uint64_t))(v123 + 8);
              v128(v124, v125);
              sub_23BE000B8(v195, &qword_256AC6478);
              sub_23BE000B8(v196, &qword_256AC6478);
              v128(v126, v125);
              sub_23BE000B8(v197, &qword_256AC6478);
              if ((v127 & 1) == 0)
                return 0;
LABEL_66:
              v129 = v209[19];
              v131 = *(_QWORD *)(v212 + v129);
              v130 = *(_QWORD *)(v212 + v129 + 8);
              v206 = *(_QWORD *)(v212 + v129 + 16);
              v208 = *(_QWORD *)(v212 + v129 + 24);
              v132 = *(_QWORD *)(v212 + v129 + 40);
              v204 = *(_QWORD *)(v212 + v129 + 32);
              LODWORD(v205) = *(unsigned __int8 *)(v212 + v129 + 48);
              v133 = v210 + v129;
              v135 = *(_QWORD *)v133;
              v134 = *(_QWORD *)(v133 + 8);
              v136 = *(_QWORD *)(v133 + 16);
              v137 = *(_QWORD *)(v133 + 24);
              v138 = *(_QWORD *)(v133 + 40);
              v202 = *(_QWORD *)(v133 + 32);
              LODWORD(v203) = *(unsigned __int8 *)(v133 + 48);
              if (v132 == 1)
              {
                if (v138 == 1)
                {
LABEL_74:
                  v153 = v209;
                  v154 = v193;
                  sub_23BDFFFD8(v212 + v209[20], v193, &qword_256AC6478);
                  v155 = v192;
                  sub_23BDFFFD8(v210 + v153[20], v192, &qword_256AC6478);
                  v156 = v191;
                  v157 = v191 + *(int *)(v207 + 48);
                  sub_23BDFFFD8(v154, v191, &qword_256AC6478);
                  sub_23BDFFFD8(v155, v157, &qword_256AC6478);
                  v158 = v156;
                  if (v189(v156, 1, v186) == 1)
                  {
                    sub_23BE000B8(v192, &qword_256AC6478);
                    sub_23BE000B8(v193, &qword_256AC6478);
                    if (v189(v157, 1, v186) == 1)
                    {
                      sub_23BE000B8(v156, &qword_256AC6478);
LABEL_81:
                      v165 = v209[21];
                      v166 = v212 + v165;
                      v168 = *(_QWORD *)(v212 + v165);
                      v167 = *(_QWORD *)(v212 + v165 + 8);
                      v169 = *(_QWORD *)(v212 + v165 + 24);
                      v211 = *(_QWORD *)(v212 + v165 + 16);
                      v212 = v169;
                      v170 = *(_QWORD *)(v166 + 32);
                      v171 = *(_QWORD *)(v166 + 40);
                      LODWORD(v209) = *(unsigned __int8 *)(v166 + 48);
                      v172 = v210 + v165;
                      v174 = *(_QWORD *)v172;
                      v173 = *(_QWORD *)(v172 + 8);
                      v175 = *(_QWORD *)(v172 + 16);
                      v207 = *(_QWORD *)(v172 + 24);
                      v208 = v170;
                      v177 = *(_QWORD *)(v172 + 32);
                      v176 = *(_QWORD *)(v172 + 40);
                      LODWORD(v210) = *(unsigned __int8 *)(v172 + 48);
                      if (v171 == 1)
                      {
                        if (v176 == 1)
                          return 1;
                      }
                      else
                      {
                        v220 = v168;
                        v221 = v167;
                        v222 = v211;
                        v223 = v212;
                        v224 = v208;
                        v225 = v171;
                        v226 = (char)v209;
                        if (v176 != 1)
                        {
                          v213 = v174;
                          v214 = v173;
                          v215 = v175;
                          v216 = v207;
                          v217 = v177;
                          v218 = v176;
                          v219 = v210;
                          v182 = v211;
                          v181 = v212;
                          v183 = v208;
                          sub_23BE010BC(v168, v167, v211, v212, v208, v171);
                          sub_23BE010EC(v168, v167, v182, v181);
                          swift_bridgeObjectRetain();
                          _s15FitnessBrowsing20BrowseTextAttributesV2eeoiySbAC_ACtFZ_0((uint64_t)&v220, (uint64_t)&v213);
                          v185 = v184;
                          sub_23BE02A38(v220, v221, v222, v223);
                          swift_bridgeObjectRelease();
                          sub_23BE02A08(v168, v167, v182, v181, v183, v171);
                          return (v185 & 1) != 0;
                        }
                        v178 = v211;
                        v179 = v212;
                        sub_23BE010EC(v168, v167, v211, v212);
                        swift_bridgeObjectRetain();
                        sub_23BE010EC(v168, v167, v178, v179);
                        swift_bridgeObjectRetain();
                        sub_23BE02A38(v168, v167, v178, v179);
                        swift_bridgeObjectRelease();
                      }
                      v180 = v207;
                      sub_23BE010BC(v174, v173, v175, v207, v177, v176);
                      sub_23BE02A08(v168, v167, v211, v212, v208, v171);
                      v142 = v174;
                      v143 = v173;
                      v144 = v175;
                      v145 = v180;
                      v146 = v177;
                      v147 = v176;
LABEL_72:
                      sub_23BE02A08(v142, v143, v144, v145, v146, v147);
                      return 0;
                    }
                  }
                  else
                  {
                    sub_23BDFFFD8(v156, v190, &qword_256AC6478);
                    if (v189(v157, 1, v186) != 1)
                    {
                      v159 = v187;
                      v160 = v211;
                      v161 = v186;
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(v187 + 32))(v211, v157, v186);
                      sub_23BDF23E4(&qword_256AC6D28, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C8]);
                      v162 = v190;
                      v163 = sub_23BE5AC3C();
                      v164 = *(void (**)(uint64_t, uint64_t))(v159 + 8);
                      v164(v160, v161);
                      sub_23BE000B8(v192, &qword_256AC6478);
                      sub_23BE000B8(v193, &qword_256AC6478);
                      v164(v162, v161);
                      sub_23BE000B8(v158, &qword_256AC6478);
                      if ((v163 & 1) == 0)
                        return 0;
                      goto LABEL_81;
                    }
                    sub_23BE000B8(v192, &qword_256AC6478);
                    sub_23BE000B8(v193, &qword_256AC6478);
                    (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v190, v186);
                  }
                  v57 = &qword_256AC6D20;
                  v58 = v156;
                  goto LABEL_8;
                }
              }
              else
              {
                v220 = v131;
                v221 = v130;
                v222 = v206;
                v223 = v208;
                v224 = v204;
                v225 = v132;
                v226 = v205;
                if (v138 != 1)
                {
                  v213 = v135;
                  v214 = v134;
                  v215 = v136;
                  v216 = v137;
                  v217 = v202;
                  v218 = v138;
                  v219 = (char)v203;
                  v148 = v206;
                  v149 = v208;
                  v150 = v204;
                  sub_23BE010BC(v131, v130, v206, v208, v204, v132);
                  sub_23BE010EC(v131, v130, v148, v149);
                  swift_bridgeObjectRetain();
                  _s15FitnessBrowsing20BrowseTextAttributesV2eeoiySbAC_ACtFZ_0((uint64_t)&v220, (uint64_t)&v213);
                  v152 = v151;
                  sub_23BE02A38(v220, v221, v222, v223);
                  swift_bridgeObjectRelease();
                  sub_23BE02A08(v131, v130, v148, v149, v150, v132);
                  if ((v152 & 1) == 0)
                    return 0;
                  goto LABEL_74;
                }
                v139 = v206;
                v140 = v208;
                sub_23BE010EC(v131, v130, v206, v208);
                swift_bridgeObjectRetain();
                sub_23BE010EC(v131, v130, v139, v140);
                swift_bridgeObjectRetain();
                sub_23BE02A38(v131, v130, v139, v140);
                swift_bridgeObjectRelease();
              }
              v141 = v202;
              sub_23BE010BC(v135, v134, v136, v137, v202, v138);
              sub_23BE02A08(v131, v130, v206, v208, v204, v132);
              v142 = v135;
              v143 = v134;
              v144 = v136;
              v145 = v137;
              v146 = v141;
              v147 = v138;
              goto LABEL_72;
            }
            sub_23BE000B8(v195, &qword_256AC6478);
            sub_23BE000B8(v196, &qword_256AC6478);
            (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v194, v186);
          }
          v57 = &qword_256AC6D20;
          v58 = v197;
LABEL_8:
          sub_23BE000B8(v58, v57);
          return 0;
        }
        return result;
      }
    }
    else
    {
      v104 = v199;
      sub_23BDFFFD8(v101, v199, &qword_256AC6AF8);
      v105 = v210;
      v23 = (char *)v101;
      if (v103(v210, 1, v205) != 1)
      {
        v106 = v198;
        sub_23BE03C98(v105, v198);
        v107 = _s15FitnessBrowsing13EditorialLinkO2eeoiySbAC_ACtFZ_0(v104, v106);
        sub_23BDF2468(v106, (uint64_t (*)(_QWORD))type metadata accessor for EditorialLink);
        sub_23BE000B8(v202, &qword_256AC6AF8);
        sub_23BE000B8(v204, &qword_256AC6AF8);
        sub_23BDF2468(v104, (uint64_t (*)(_QWORD))type metadata accessor for EditorialLink);
        sub_23BE000B8((uint64_t)v23, &qword_256AC6AF8);
        if (!v107)
          return 0;
        goto LABEL_50;
      }
      sub_23BE000B8(v202, &qword_256AC6AF8);
      sub_23BE000B8(v204, &qword_256AC6AF8);
      sub_23BDF2468(v104, (uint64_t (*)(_QWORD))type metadata accessor for EditorialLink);
    }
    v57 = &qword_256AC6D18;
LABEL_7:
    v58 = (uint64_t)v23;
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_23BE0520C()
{
  return sub_23BDF23E4(&qword_256AC6BE8, (uint64_t (*)(uint64_t))type metadata accessor for BrowseItem, (uint64_t)&protocol conformance descriptor for BrowseItem);
}

uint64_t *initializeBufferWithCopyOfBuffer for BrowseItem(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(_QWORD *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23BE5A678();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (v9((char *)a2, 1, v7))
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = a3[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
    if (swift_getEnumCaseMultiPayload() == 1)
      v15 = (uint64_t *)&unk_256AC6BF8;
    else
      v15 = (uint64_t *)&unk_256AC6BF0;
    v16 = __swift_instantiateConcreteTypeFromMangledName(v15);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    swift_storeEnumTagMultiPayload();
    v17 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *((_BYTE *)a1 + v17) = *((_BYTE *)a2 + v17);
    v18 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    swift_bridgeObjectRetain();
    v70 = v8;
    v71 = v7;
    v72 = v9;
    if (v9(v20, 1, v7))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v19, v20, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v19, 0, 1, v7);
    }
    v22 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *((_BYTE *)a1 + v22) = *((_BYTE *)a2 + v22);
    v23 = a3[13];
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = a3[14];
    v28 = (uint64_t *)((char *)a1 + v27);
    v29 = (uint64_t *)((char *)a2 + v27);
    v30 = type metadata accessor for EditorialLink();
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32(v29, 1, v30))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF8);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v28 = *(_OWORD *)v29;
      v28[2] = v29[2];
      v34 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
      v35 = (char *)v28 + v34;
      v69 = (char *)v29 + v34;
      v36 = sub_23BE5A690();
      v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
      swift_bridgeObjectRetain();
      v37(v35, v69, v36);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v38 = a3[16];
    *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
    v39 = (uint64_t *)((char *)a1 + v38);
    v40 = (uint64_t *)((char *)a2 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = a3[18];
    *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
    v43 = (char *)a1 + v42;
    v44 = (char *)a2 + v42;
    swift_bridgeObjectRetain();
    if (v72(v44, 1, v71))
    {
      v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v43, v44, v71);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v43, 0, 1, v71);
    }
    v46 = a3[19];
    v47 = (char *)a1 + v46;
    v48 = (char *)a2 + v46;
    v49 = *(uint64_t *)((char *)a2 + v46 + 40);
    if (v49 == 1)
    {
      v50 = *((_OWORD *)v48 + 1);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *((_OWORD *)v47 + 1) = v50;
      *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
      v47[48] = v48[48];
    }
    else
    {
      v51 = v48[24];
      if (v51 == 255)
      {
        *(_OWORD *)v47 = *(_OWORD *)v48;
        *(_OWORD *)(v47 + 9) = *(_OWORD *)(v48 + 9);
      }
      else
      {
        v52 = *(_QWORD *)v48;
        v53 = *((_QWORD *)v48 + 1);
        v54 = *((_QWORD *)v48 + 2);
        sub_23BE01100(*(_QWORD *)v48, v53, v54, v48[24]);
        *(_QWORD *)v47 = v52;
        *((_QWORD *)v47 + 1) = v53;
        *((_QWORD *)v47 + 2) = v54;
        v47[24] = v51;
        v49 = *((_QWORD *)v48 + 5);
      }
      *((_QWORD *)v47 + 4) = *((_QWORD *)v48 + 4);
      *((_QWORD *)v47 + 5) = v49;
      v47[48] = v48[48];
      swift_bridgeObjectRetain();
    }
    v55 = a3[20];
    v56 = (char *)a1 + v55;
    v57 = (char *)a2 + v55;
    if (v72((char *)a2 + v55, 1, v71))
    {
      v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v56, v57, v71);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v56, 0, 1, v71);
    }
    v59 = a3[21];
    v60 = (char *)a1 + v59;
    v61 = (char *)a2 + v59;
    v62 = *(uint64_t *)((char *)a2 + v59 + 40);
    if (v62 == 1)
    {
      v63 = *((_OWORD *)v61 + 1);
      *(_OWORD *)v60 = *(_OWORD *)v61;
      *((_OWORD *)v60 + 1) = v63;
      *((_OWORD *)v60 + 2) = *((_OWORD *)v61 + 2);
      v60[48] = v61[48];
    }
    else
    {
      v64 = v61[24];
      if (v64 == 255)
      {
        *(_OWORD *)v60 = *(_OWORD *)v61;
        *(_OWORD *)(v60 + 9) = *(_OWORD *)(v61 + 9);
      }
      else
      {
        v65 = *(_QWORD *)v61;
        v66 = *((_QWORD *)v61 + 1);
        v67 = *((_QWORD *)v61 + 2);
        sub_23BE01100(*(_QWORD *)v61, v66, v67, v61[24]);
        *(_QWORD *)v60 = v65;
        *((_QWORD *)v60 + 1) = v66;
        *((_QWORD *)v60 + 2) = v67;
        v60[24] = v64;
        v62 = *((_QWORD *)v61 + 5);
      }
      *((_QWORD *)v60 + 4) = *((_QWORD *)v61 + 4);
      *((_QWORD *)v60 + 5) = v62;
      v60[48] = v61[48];
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t destroy for BrowseItem(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int v21;

  v4 = sub_23BE5A678();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + a2[5];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  if (swift_getEnumCaseMultiPayload() == 1)
    v8 = (uint64_t *)&unk_256AC6BF8;
  else
    v8 = (uint64_t *)&unk_256AC6BF0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  swift_bridgeObjectRelease();
  v10 = a1 + a2[9];
  if (!v6(v10, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v10, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = a1 + a2[14];
  v12 = type metadata accessor for EditorialLink();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    swift_bridgeObjectRelease();
    v13 = v11 + *(int *)(type metadata accessor for EditorialVideoLink() + 24);
    v14 = sub_23BE5A690();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  swift_bridgeObjectRelease();
  v15 = a1 + a2[18];
  if (!v6(v15, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v15, v4);
  v16 = a1 + a2[19];
  if (*(_QWORD *)(v16 + 40) != 1)
  {
    v17 = *(unsigned __int8 *)(v16 + 24);
    if (v17 != 255)
      sub_23BE02A4C(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_QWORD *)(v16 + 16), v17);
    swift_bridgeObjectRelease();
  }
  v18 = a1 + a2[20];
  if (!v6(v18, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v18, v4);
  v19 = a1 + a2[21];
  result = *(_QWORD *)(v19 + 40);
  if (result != 1)
  {
    v21 = *(unsigned __int8 *)(v19 + 24);
    if (v21 != 255)
      sub_23BE02A4C(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_QWORD *)(v19 + 16), v21);
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for BrowseItem(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(char *, uint64_t, uint64_t);

  v6 = sub_23BE5A678();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  if (swift_getEnumCaseMultiPayload() == 1)
    v13 = (uint64_t *)&unk_256AC6BF8;
  else
    v13 = (uint64_t *)&unk_256AC6BF0;
  v14 = __swift_instantiateConcreteTypeFromMangledName(v13);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
  swift_storeEnumTagMultiPayload();
  v15 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  a1[v15] = a2[v15];
  v16 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v17 = &a1[v16];
  v18 = &a2[v16];
  swift_bridgeObjectRetain();
  v68 = v7;
  v69 = v6;
  v70 = v8;
  if (v8(v18, 1, v6))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v17, v18, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  }
  v20 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v20] = a2[v20];
  v21 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  v25 = a3[14];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = type metadata accessor for EditorialLink();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v30(v27, 1, v28))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF8);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
    v32 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
    v33 = &v26[v32];
    v67 = &v27[v32];
    v34 = sub_23BE5A690();
    v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
    swift_bridgeObjectRetain();
    v35(v33, v67, v34);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  v36 = a3[16];
  a1[a3[15]] = a2[a3[15]];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *((_QWORD *)v37 + 1) = v39;
  v40 = a3[18];
  a1[a3[17]] = a2[a3[17]];
  v41 = &a1[v40];
  v42 = &a2[v40];
  swift_bridgeObjectRetain();
  if (v70(v42, 1, v69))
  {
    v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v41, v42, v69);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v41, 0, 1, v69);
  }
  v44 = a3[19];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v47 = *(_QWORD *)&a2[v44 + 40];
  if (v47 == 1)
  {
    v48 = *((_OWORD *)v46 + 1);
    *(_OWORD *)v45 = *(_OWORD *)v46;
    *((_OWORD *)v45 + 1) = v48;
    *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
    v45[48] = v46[48];
  }
  else
  {
    v49 = v46[24];
    if (v49 == 255)
    {
      *(_OWORD *)v45 = *(_OWORD *)v46;
      *(_OWORD *)(v45 + 9) = *(_OWORD *)(v46 + 9);
    }
    else
    {
      v50 = *(_QWORD *)v46;
      v51 = *((_QWORD *)v46 + 1);
      v52 = *((_QWORD *)v46 + 2);
      sub_23BE01100(*(_QWORD *)v46, v51, v52, v46[24]);
      *(_QWORD *)v45 = v50;
      *((_QWORD *)v45 + 1) = v51;
      *((_QWORD *)v45 + 2) = v52;
      v45[24] = v49;
      v47 = *((_QWORD *)v46 + 5);
    }
    *((_QWORD *)v45 + 4) = *((_QWORD *)v46 + 4);
    *((_QWORD *)v45 + 5) = v47;
    v45[48] = v46[48];
    swift_bridgeObjectRetain();
  }
  v53 = a3[20];
  v54 = &a1[v53];
  v55 = &a2[v53];
  if (v70(&a2[v53], 1, v69))
  {
    v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v54, v55, v69);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v54, 0, 1, v69);
  }
  v57 = a3[21];
  v58 = &a1[v57];
  v59 = &a2[v57];
  v60 = *(_QWORD *)&a2[v57 + 40];
  if (v60 == 1)
  {
    v61 = *((_OWORD *)v59 + 1);
    *(_OWORD *)v58 = *(_OWORD *)v59;
    *((_OWORD *)v58 + 1) = v61;
    *((_OWORD *)v58 + 2) = *((_OWORD *)v59 + 2);
    v58[48] = v59[48];
  }
  else
  {
    v62 = v59[24];
    if (v62 == 255)
    {
      *(_OWORD *)v58 = *(_OWORD *)v59;
      *(_OWORD *)(v58 + 9) = *(_OWORD *)(v59 + 9);
    }
    else
    {
      v63 = *(_QWORD *)v59;
      v64 = *((_QWORD *)v59 + 1);
      v65 = *((_QWORD *)v59 + 2);
      sub_23BE01100(*(_QWORD *)v59, v64, v65, v59[24]);
      *(_QWORD *)v58 = v63;
      *((_QWORD *)v58 + 1) = v64;
      *((_QWORD *)v58 + 2) = v65;
      v58[24] = v62;
      v60 = *((_QWORD *)v59 + 5);
    }
    *((_QWORD *)v58 + 4) = *((_QWORD *)v59 + 4);
    *((_QWORD *)v58 + 5) = v60;
    v58[48] = v59[48];
    swift_bridgeObjectRetain();
  }
  return a1;
}

char *assignWithCopy for BrowseItem(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t (*v120)(char *, uint64_t, uint64_t);

  v6 = sub_23BE5A678();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v120 = v8;
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      if (a1 == a2)
        goto LABEL_12;
      goto LABEL_8;
    }
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      if (a1 == a2)
        goto LABEL_12;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  if (a1 == a2)
    goto LABEL_12;
LABEL_8:
  v12 = a3[5];
  v13 = &a2[v12];
  v14 = &a1[v12];
  sub_23BE000B8((uint64_t)&a1[v12], &qword_256AC6490);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  if (swift_getEnumCaseMultiPayload() == 1)
    v15 = (uint64_t *)&unk_256AC6BF8;
  else
    v15 = (uint64_t *)&unk_256AC6BF0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(v15);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v13, v16);
  swift_storeEnumTagMultiPayload();
LABEL_12:
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  v17 = a3[9];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = v120(&a1[v17], 1, v6);
  v21 = v120(v19, 1, v6);
  v119 = v7;
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v18, v19, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v18, 0, 1, v6);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
LABEL_17:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v18, v19, v6);
LABEL_18:
  a1[a3[10]] = a2[a3[10]];
  a1[a3[11]] = a2[a3[11]];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = a3[13];
  v24 = &a1[v23];
  v25 = &a2[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = a3[14];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = type metadata accessor for EditorialLink();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *((_QWORD *)v27 + 1) = *((_QWORD *)v28 + 1);
      *((_QWORD *)v27 + 2) = *((_QWORD *)v28 + 2);
      v34 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
      v117 = &v28[v34];
      v118 = &v27[v34];
      v35 = sub_23BE5A690();
      v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
      swift_bridgeObjectRetain();
      v36(v118, v117, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v33)
  {
    sub_23BDF2468((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for EditorialLink);
LABEL_23:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF8);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_24;
  }
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *((_QWORD *)v27 + 1) = *((_QWORD *)v28 + 1);
  *((_QWORD *)v27 + 2) = *((_QWORD *)v28 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v71 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
  v72 = &v27[v71];
  v73 = &v28[v71];
  v74 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 24))(v72, v73, v74);
LABEL_24:
  v38 = v119;
  a1[a3[15]] = a2[a3[15]];
  v39 = a3[16];
  v40 = &a1[v39];
  v41 = &a2[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[17]] = a2[a3[17]];
  v42 = a3[18];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v45 = v120(&a1[v42], 1, v6);
  v46 = v120(v44, 1, v6);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v43, v44, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v43, 0, 1, v6);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v119 + 8))(v43, v6);
LABEL_29:
    v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v119 + 24))(v43, v44, v6);
LABEL_30:
  v48 = a3[19];
  v49 = (uint64_t)&a1[v48];
  v50 = &a2[v48];
  v51 = *(_QWORD *)&a1[v48 + 40];
  v52 = *(_QWORD *)&a2[v48 + 40];
  if (v51 == 1)
  {
    if (v52 == 1)
    {
      v53 = *(_OWORD *)v50;
      v54 = *((_OWORD *)v50 + 1);
      v55 = *((_OWORD *)v50 + 2);
      *(_BYTE *)(v49 + 48) = v50[48];
      *(_OWORD *)(v49 + 16) = v54;
      *(_OWORD *)(v49 + 32) = v55;
      *(_OWORD *)v49 = v53;
    }
    else
    {
      v59 = v50[24];
      if (v59 == 255)
      {
        v75 = *(_OWORD *)v50;
        *(_OWORD *)(v49 + 9) = *(_OWORD *)(v50 + 9);
        *(_OWORD *)v49 = v75;
      }
      else
      {
        v60 = *(_QWORD *)v50;
        v61 = *((_QWORD *)v50 + 1);
        v62 = *((_QWORD *)v50 + 2);
        sub_23BE01100(*(_QWORD *)v50, v61, v62, v50[24]);
        *(_QWORD *)v49 = v60;
        *(_QWORD *)(v49 + 8) = v61;
        *(_QWORD *)(v49 + 16) = v62;
        v38 = v119;
        *(_BYTE *)(v49 + 24) = v59;
      }
      *(_QWORD *)(v49 + 32) = *((_QWORD *)v50 + 4);
      *(_QWORD *)(v49 + 40) = *((_QWORD *)v50 + 5);
      *(_BYTE *)(v49 + 48) = v50[48];
      swift_bridgeObjectRetain();
    }
  }
  else if (v52 == 1)
  {
    sub_23BE06884(v49);
    v57 = *((_OWORD *)v50 + 1);
    v56 = *((_OWORD *)v50 + 2);
    v58 = *(_OWORD *)v50;
    *(_BYTE *)(v49 + 48) = v50[48];
    *(_OWORD *)(v49 + 16) = v57;
    *(_OWORD *)(v49 + 32) = v56;
    *(_OWORD *)v49 = v58;
  }
  else
  {
    v63 = v50[24];
    if (*(unsigned __int8 *)(v49 + 24) == 255)
    {
      if (v63 == 255)
      {
        v80 = *(_OWORD *)v50;
        *(_OWORD *)(v49 + 9) = *(_OWORD *)(v50 + 9);
        *(_OWORD *)v49 = v80;
      }
      else
      {
        v76 = *(_QWORD *)v50;
        v77 = *((_QWORD *)v50 + 1);
        v78 = *((_QWORD *)v50 + 2);
        sub_23BE01100(*(_QWORD *)v50, v77, v78, v50[24]);
        *(_QWORD *)v49 = v76;
        *(_QWORD *)(v49 + 8) = v77;
        *(_QWORD *)(v49 + 16) = v78;
        v38 = v119;
        *(_BYTE *)(v49 + 24) = v63;
      }
    }
    else if (v63 == 255)
    {
      sub_23BE06850(v49);
      v79 = *(_OWORD *)(v50 + 9);
      *(_OWORD *)v49 = *(_OWORD *)v50;
      *(_OWORD *)(v49 + 9) = v79;
    }
    else
    {
      v64 = *(_QWORD *)v50;
      v65 = *((_QWORD *)v50 + 1);
      v66 = *((_QWORD *)v50 + 2);
      sub_23BE01100(*(_QWORD *)v50, v65, v66, v50[24]);
      v67 = *(_QWORD *)v49;
      v68 = *(_QWORD *)(v49 + 8);
      v69 = *(_QWORD *)(v49 + 16);
      *(_QWORD *)v49 = v64;
      *(_QWORD *)(v49 + 8) = v65;
      *(_QWORD *)(v49 + 16) = v66;
      v38 = v119;
      v70 = *(_BYTE *)(v49 + 24);
      *(_BYTE *)(v49 + 24) = v63;
      sub_23BE02A4C(v67, v68, v69, v70);
    }
    *(_QWORD *)(v49 + 32) = *((_QWORD *)v50 + 4);
    *(_QWORD *)(v49 + 40) = *((_QWORD *)v50 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v49 + 48) = v50[48];
  }
  v81 = a3[20];
  v82 = &a1[v81];
  v83 = &a2[v81];
  v84 = v120(&a1[v81], 1, v6);
  v85 = v120(v83, 1, v6);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v82, v83, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v82, 0, 1, v6);
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v82, v6);
LABEL_57:
    v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_58;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 24))(v82, v83, v6);
LABEL_58:
  v87 = a3[21];
  v88 = (uint64_t)&a1[v87];
  v89 = &a2[v87];
  v90 = *(_QWORD *)&a1[v87 + 40];
  v91 = *(_QWORD *)&a2[v87 + 40];
  if (v90 == 1)
  {
    if (v91 == 1)
    {
      v92 = *(_OWORD *)v89;
      v93 = *((_OWORD *)v89 + 1);
      v94 = *((_OWORD *)v89 + 2);
      *(_BYTE *)(v88 + 48) = v89[48];
      *(_OWORD *)(v88 + 16) = v93;
      *(_OWORD *)(v88 + 32) = v94;
      *(_OWORD *)v88 = v92;
    }
    else
    {
      v98 = v89[24];
      if (v98 == 255)
      {
        v110 = *(_OWORD *)v89;
        *(_OWORD *)(v88 + 9) = *(_OWORD *)(v89 + 9);
        *(_OWORD *)v88 = v110;
      }
      else
      {
        v99 = *(_QWORD *)v89;
        v100 = *((_QWORD *)v89 + 1);
        v101 = *((_QWORD *)v89 + 2);
        sub_23BE01100(*(_QWORD *)v89, v100, v101, v89[24]);
        *(_QWORD *)v88 = v99;
        *(_QWORD *)(v88 + 8) = v100;
        *(_QWORD *)(v88 + 16) = v101;
        *(_BYTE *)(v88 + 24) = v98;
      }
      *(_QWORD *)(v88 + 32) = *((_QWORD *)v89 + 4);
      *(_QWORD *)(v88 + 40) = *((_QWORD *)v89 + 5);
      *(_BYTE *)(v88 + 48) = v89[48];
      swift_bridgeObjectRetain();
    }
  }
  else if (v91 == 1)
  {
    sub_23BE06884(v88);
    v96 = *((_OWORD *)v89 + 1);
    v95 = *((_OWORD *)v89 + 2);
    v97 = *(_OWORD *)v89;
    *(_BYTE *)(v88 + 48) = v89[48];
    *(_OWORD *)(v88 + 16) = v96;
    *(_OWORD *)(v88 + 32) = v95;
    *(_OWORD *)v88 = v97;
  }
  else
  {
    v102 = v89[24];
    if (*(unsigned __int8 *)(v88 + 24) == 255)
    {
      if (v102 == 255)
      {
        v115 = *(_OWORD *)v89;
        *(_OWORD *)(v88 + 9) = *(_OWORD *)(v89 + 9);
        *(_OWORD *)v88 = v115;
      }
      else
      {
        v111 = *(_QWORD *)v89;
        v112 = *((_QWORD *)v89 + 1);
        v113 = *((_QWORD *)v89 + 2);
        sub_23BE01100(*(_QWORD *)v89, v112, v113, v89[24]);
        *(_QWORD *)v88 = v111;
        *(_QWORD *)(v88 + 8) = v112;
        *(_QWORD *)(v88 + 16) = v113;
        *(_BYTE *)(v88 + 24) = v102;
      }
    }
    else if (v102 == 255)
    {
      sub_23BE06850(v88);
      v114 = *(_OWORD *)(v89 + 9);
      *(_OWORD *)v88 = *(_OWORD *)v89;
      *(_OWORD *)(v88 + 9) = v114;
    }
    else
    {
      v103 = *(_QWORD *)v89;
      v104 = *((_QWORD *)v89 + 1);
      v105 = *((_QWORD *)v89 + 2);
      sub_23BE01100(*(_QWORD *)v89, v104, v105, v89[24]);
      v106 = *(_QWORD *)v88;
      v107 = *(_QWORD *)(v88 + 8);
      v108 = *(_QWORD *)(v88 + 16);
      *(_QWORD *)v88 = v103;
      *(_QWORD *)(v88 + 8) = v104;
      *(_QWORD *)(v88 + 16) = v105;
      v109 = *(_BYTE *)(v88 + 24);
      *(_BYTE *)(v88 + 24) = v102;
      sub_23BE02A4C(v106, v107, v108, v109);
    }
    *(_QWORD *)(v88 + 32) = *((_QWORD *)v89 + 4);
    *(_QWORD *)(v88 + 40) = *((_QWORD *)v89 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v88 + 48) = v89[48];
  }
  return a1;
}

uint64_t sub_23BE06850(uint64_t a1)
{
  destroy for BrowseFontDescriptor(a1);
  return a1;
}

uint64_t sub_23BE06884(uint64_t a1)
{
  destroy for BrowseTextAttributes(a1);
  return a1;
}

char *initializeWithTake for BrowseItem(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  uint64_t v50;

  v6 = sub_23BE5A678();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  if (swift_getEnumCaseMultiPayload() == 1)
    v13 = (uint64_t *)&unk_256AC6BF8;
  else
    v13 = (uint64_t *)&unk_256AC6BF0;
  v14 = __swift_instantiateConcreteTypeFromMangledName(v13);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
  swift_storeEnumTagMultiPayload();
  v15 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  a1[v15] = a2[v15];
  v16 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v50 = v7;
  if (v8(&a2[v16], 1, v6))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v17, v18, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  }
  v20 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v20] = a2[v20];
  v21 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  *(_OWORD *)&a1[v21] = *(_OWORD *)&a2[v21];
  v22 = a3[14];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = type metadata accessor for EditorialLink();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF8);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_OWORD *)(v23 + 8) = *(_OWORD *)(v24 + 8);
    v28 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
    v29 = &v23[v28];
    v30 = &v24[v28];
    v31 = sub_23BE5A690();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  v32 = a3[16];
  a1[a3[15]] = a2[a3[15]];
  *(_OWORD *)&a1[v32] = *(_OWORD *)&a2[v32];
  v33 = a3[18];
  a1[a3[17]] = a2[a3[17]];
  v34 = &a1[v33];
  v35 = &a2[v33];
  if (v8(&a2[v33], 1, v6))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v34, v35, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v34, 0, 1, v6);
  }
  v37 = a3[19];
  v38 = a3[20];
  v39 = &a1[v37];
  v40 = &a2[v37];
  v41 = *((_OWORD *)v40 + 1);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *((_OWORD *)v39 + 1) = v41;
  *((_OWORD *)v39 + 2) = *((_OWORD *)v40 + 2);
  v39[48] = v40[48];
  v42 = &a1[v38];
  v43 = &a2[v38];
  if (v8(&a2[v38], 1, v6))
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v42, v43, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v42, 0, 1, v6);
  }
  v45 = a3[21];
  v46 = &a1[v45];
  v47 = &a2[v45];
  v48 = *((_OWORD *)v47 + 1);
  *(_OWORD *)v46 = *(_OWORD *)v47;
  *((_OWORD *)v46 + 1) = v48;
  *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
  v46[48] = v47[48];
  return a1;
}

char *assignWithTake for BrowseItem(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  __int128 v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t (*v90)(char *, uint64_t, uint64_t);

  v6 = sub_23BE5A678();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      if (a1 == a2)
        goto LABEL_12;
      goto LABEL_8;
    }
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      if (a1 == a2)
        goto LABEL_12;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  if (a1 == a2)
    goto LABEL_12;
LABEL_8:
  v12 = a3[5];
  v13 = &a2[v12];
  v14 = &a1[v12];
  sub_23BE000B8((uint64_t)&a1[v12], &qword_256AC6490);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  if (swift_getEnumCaseMultiPayload() == 1)
    v15 = (uint64_t *)&unk_256AC6BF8;
  else
    v15 = (uint64_t *)&unk_256AC6BF0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(v15);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v13, v16);
  swift_storeEnumTagMultiPayload();
LABEL_12:
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRelease();
  v17 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v17] = a2[v17];
  v18 = a3[9];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = v8(&a1[v18], 1, v6);
  v22 = v8(v20, 1, v6);
  v89 = v7;
  v90 = v8;
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v19, v20, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
LABEL_17:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v19, v20, v6);
LABEL_18:
  v24 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v24] = a2[v24];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  swift_bridgeObjectRelease();
  v25 = a3[13];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v29 = *(_QWORD *)v27;
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = v29;
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  v30 = a3[14];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = type metadata accessor for EditorialLink();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (v36)
  {
    v38 = v90;
    if (!v37)
    {
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *(_OWORD *)(v31 + 8) = *(_OWORD *)(v32 + 8);
      v39 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
      v40 = &v31[v39];
      v41 = &v32[v39];
      v42 = sub_23BE5A690();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  v38 = v90;
  if (v37)
  {
    sub_23BDF2468((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for EditorialLink);
LABEL_23:
    v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF8);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_24;
  }
  *(_QWORD *)v31 = *(_QWORD *)v32;
  v65 = *((_QWORD *)v32 + 2);
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  *((_QWORD *)v31 + 2) = v65;
  swift_bridgeObjectRelease();
  v66 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
  v67 = &v31[v66];
  v68 = &v32[v66];
  v69 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 40))(v67, v68, v69);
LABEL_24:
  v44 = a3[16];
  a1[a3[15]] = a2[a3[15]];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v48 = *(_QWORD *)v46;
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = v48;
  *((_QWORD *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  v49 = a3[18];
  a1[a3[17]] = a2[a3[17]];
  v50 = &a1[v49];
  v51 = &a2[v49];
  v52 = v38(&a1[v49], 1, v6);
  v53 = v38(v51, 1, v6);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v50, v51, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v50, 0, 1, v6);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v89 + 8))(v50, v6);
LABEL_29:
    v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v89 + 40))(v50, v51, v6);
LABEL_30:
  v55 = a3[19];
  v56 = (uint64_t)&a1[v55];
  v57 = &a2[v55];
  if (*(_QWORD *)&a1[v55 + 40] == 1)
  {
LABEL_33:
    v58 = *((_OWORD *)v57 + 1);
    *(_OWORD *)v56 = *(_OWORD *)v57;
    *(_OWORD *)(v56 + 16) = v58;
    *(_OWORD *)(v56 + 32) = *((_OWORD *)v57 + 2);
    goto LABEL_45;
  }
  if (*((_QWORD *)v57 + 5) == 1)
  {
    sub_23BE06884(v56);
    goto LABEL_33;
  }
  v59 = *(unsigned __int8 *)(v56 + 24);
  if (v59 == 255)
    goto LABEL_43;
  v60 = v57[24];
  if (v60 == 255)
  {
    sub_23BE06850(v56);
LABEL_43:
    *(_OWORD *)v56 = *(_OWORD *)v57;
    *(_OWORD *)(v56 + 9) = *(_OWORD *)(v57 + 9);
    goto LABEL_44;
  }
  v61 = *((_QWORD *)v57 + 2);
  v62 = *(_QWORD *)v56;
  v63 = *(_QWORD *)(v56 + 8);
  v64 = *(_QWORD *)(v56 + 16);
  *(_OWORD *)v56 = *(_OWORD *)v57;
  *(_QWORD *)(v56 + 16) = v61;
  *(_BYTE *)(v56 + 24) = v60;
  sub_23BE02A4C(v62, v63, v64, v59);
LABEL_44:
  v70 = *((_QWORD *)v57 + 5);
  *(_QWORD *)(v56 + 32) = *((_QWORD *)v57 + 4);
  *(_QWORD *)(v56 + 40) = v70;
  swift_bridgeObjectRelease();
LABEL_45:
  *(_BYTE *)(v56 + 48) = v57[48];
  v71 = a3[20];
  v72 = &a1[v71];
  v73 = &a2[v71];
  v74 = v38(&a1[v71], 1, v6);
  v75 = v38(v73, 1, v6);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v72, v73, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v72, 0, 1, v6);
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v89 + 8))(v72, v6);
LABEL_50:
    v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_51;
  }
  (*(void (**)(char *, char *, uint64_t))(v89 + 40))(v72, v73, v6);
LABEL_51:
  v77 = a3[21];
  v78 = (uint64_t)&a1[v77];
  v79 = &a2[v77];
  if (*(_QWORD *)&a1[v77 + 40] != 1)
  {
    if (*((_QWORD *)v79 + 5) == 1)
    {
      sub_23BE06884(v78);
      goto LABEL_54;
    }
    v81 = *(unsigned __int8 *)(v78 + 24);
    if (v81 != 255)
    {
      v82 = v79[24];
      if (v82 != 255)
      {
        v83 = *((_QWORD *)v79 + 2);
        v84 = *(_QWORD *)v78;
        v85 = *(_QWORD *)(v78 + 8);
        v86 = *(_QWORD *)(v78 + 16);
        *(_OWORD *)v78 = *(_OWORD *)v79;
        *(_QWORD *)(v78 + 16) = v83;
        *(_BYTE *)(v78 + 24) = v82;
        sub_23BE02A4C(v84, v85, v86, v81);
LABEL_61:
        v87 = *((_QWORD *)v79 + 5);
        *(_QWORD *)(v78 + 32) = *((_QWORD *)v79 + 4);
        *(_QWORD *)(v78 + 40) = v87;
        swift_bridgeObjectRelease();
        goto LABEL_62;
      }
      sub_23BE06850(v78);
    }
    *(_OWORD *)v78 = *(_OWORD *)v79;
    *(_OWORD *)(v78 + 9) = *(_OWORD *)(v79 + 9);
    goto LABEL_61;
  }
LABEL_54:
  v80 = *((_OWORD *)v79 + 1);
  *(_OWORD *)v78 = *(_OWORD *)v79;
  *(_OWORD *)(v78 + 16) = v80;
  *(_OWORD *)(v78 + 32) = *((_OWORD *)v79 + 2);
LABEL_62:
  *(_BYTE *)(v78 + 48) = v79[48];
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseItem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE0739C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF8);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[14];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[6]);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseItem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE07480(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
        return result;
      }
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF8);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[14];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23BE07554()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_23BE076F4(319, (unint64_t *)&qword_256AC6C68, (void (*)(uint64_t))MEMORY[0x24BDCC5A8]);
  if (v0 <= 0x3F)
  {
    sub_23BE0767C();
    if (v1 <= 0x3F)
    {
      sub_23BE076F4(319, qword_256AC6C80, (void (*)(uint64_t))type metadata accessor for EditorialLink);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void sub_23BE0767C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256AC6C70)
  {
    type metadata accessor for BrowseArtwork();
    sub_23BDF23E4(&qword_256AC6C78, (uint64_t (*)(uint64_t))type metadata accessor for BrowseArtwork, (uint64_t)&protocol conformance descriptor for BrowseArtwork);
    v0 = sub_23BE5A744();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256AC6C70);
  }
}

void sub_23BE076F4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23BE5AD2C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t getEnumTagSinglePayload for BrowseItem.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_23BE0781C + 4 * byte_23BE5C7D0[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_23BE07850 + 4 * byte_23BE5C7CB[v4]))();
}

uint64_t sub_23BE07850(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE07858(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE07860);
  return result;
}

uint64_t sub_23BE0786C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE07874);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_23BE07878(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE07880(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseItem.CodingKeys()
{
  return &type metadata for BrowseItem.CodingKeys;
}

unint64_t sub_23BE078A0()
{
  unint64_t result;

  result = qword_256AC6CF0;
  if (!qword_256AC6CF0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5CA74, &type metadata for BrowseItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6CF0);
  }
  return result;
}

unint64_t sub_23BE078E8()
{
  unint64_t result;

  result = qword_256AC6CF8;
  if (!qword_256AC6CF8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5C9E4, &type metadata for BrowseItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6CF8);
  }
  return result;
}

unint64_t sub_23BE07930()
{
  unint64_t result;

  result = qword_256AC6D00;
  if (!qword_256AC6D00)
  {
    result = MEMORY[0x242612B20](&unk_23BE5CA0C, &type metadata for BrowseItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6D00);
  }
  return result;
}

uint64_t sub_23BE07974(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x69546E6F69746361 && a2 == 0xEB00000000656C74;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023BE66180 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023BE661A0 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x616F4C7465737361 && a2 == 0xEF73757461745364 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6B72616D6B6F6F62 && a2 == 0xEA00000000006465 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E6F6974706163 && a2 == 0xE700000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x5379616C70736964 && a2 == 0xEC000000656C7974 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000023BE661C0 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023BE661E0 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 1802398060 && a2 == 0xE400000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x707954616964656DLL && a2 == 0xE900000000000065 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023BE66200 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x636E657265666572 && a2 == 0xED00006570795465 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023BE66220 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023BE66240)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 17;
    else
      return 18;
  }
}

uint64_t BrowseState.activeStorefrontLocale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23BE5A6FC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t BrowseState.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for BrowseState();
  return sub_23BDF23A0(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseIdentifier);
}

uint64_t type metadata accessor for BrowseState()
{
  uint64_t result;

  result = qword_256AC6E08;
  if (!qword_256AC6E08)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BrowseState.identifier.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for BrowseState();
  return sub_23BE083B8(a1, v1 + *(int *)(v3 + 20), (uint64_t (*)(_QWORD))type metadata accessor for BrowseIdentifier);
}

uint64_t (*BrowseState.identifier.modify())()
{
  type metadata accessor for BrowseState();
  return nullsub_1;
}

uint64_t BrowseState.isInternalBuild.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BrowseState() + 24));
}

uint64_t BrowseState.isInternalBuild.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for BrowseState();
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*BrowseState.isInternalBuild.modify())()
{
  type metadata accessor for BrowseState();
  return nullsub_1;
}

uint64_t BrowseState.isShowingCreatePlanAlert.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BrowseState() + 28));
}

uint64_t BrowseState.isShowingCreatePlanAlert.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for BrowseState();
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*BrowseState.isShowingCreatePlanAlert.modify())()
{
  type metadata accessor for BrowseState();
  return nullsub_1;
}

uint64_t BrowseState.isSubscribed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BrowseState() + 32));
}

uint64_t BrowseState.isSubscribed.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for BrowseState();
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*BrowseState.isSubscribed.modify())()
{
  type metadata accessor for BrowseState();
  return nullsub_1;
}

uint64_t BrowseState.loadState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for BrowseState();
  return sub_23BDF23A0(v1 + *(int *)(v3 + 36), a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLoadState);
}

uint64_t BrowseState.loadState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for BrowseState();
  return sub_23BE083B8(a1, v1 + *(int *)(v3 + 36), (uint64_t (*)(_QWORD))type metadata accessor for BrowseLoadState);
}

uint64_t sub_23BE083B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t (*BrowseState.loadState.modify())()
{
  type metadata accessor for BrowseState();
  return nullsub_1;
}

uint64_t BrowseState.platform.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BrowseState() + 40));
}

uint64_t BrowseState.platform.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for BrowseState();
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*BrowseState.platform.modify())()
{
  type metadata accessor for BrowseState();
  return nullsub_1;
}

uint64_t BrowseState.init(activeStorefrontLocale:identifier:isInternalBuild:isShowingCreatePlanAlert:isSubscribed:loadState:platform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  int *v17;
  uint64_t result;

  v16 = sub_23BE5A6FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a8, a1, v16);
  v17 = (int *)type metadata accessor for BrowseState();
  sub_23BDF2424(a2, a8 + v17[5], (uint64_t (*)(_QWORD))type metadata accessor for BrowseIdentifier);
  *(_BYTE *)(a8 + v17[6]) = a3;
  *(_BYTE *)(a8 + v17[7]) = a4;
  *(_BYTE *)(a8 + v17[8]) = a5;
  result = sub_23BDF2424(a6, a8 + v17[9], (uint64_t (*)(_QWORD))type metadata accessor for BrowseLoadState);
  *(_BYTE *)(a8 + v17[10]) = a7;
  return result;
}

uint64_t sub_23BE08564(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BE0859C + 4 * byte_23BE5CAF0[a1]))(0xD000000000000016, 0x800000023BE66260);
}

uint64_t sub_23BE0859C()
{
  return 0x696669746E656469;
}

uint64_t sub_23BE085B8()
{
  return 0x6E7265746E497369;
}

uint64_t sub_23BE085DC(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_23BE085F4()
{
  return 0x7263736275537369;
}

uint64_t sub_23BE08614()
{
  return 0x7461745364616F6CLL;
}

uint64_t sub_23BE08630()
{
  return 0x6D726F6674616C70;
}

uint64_t sub_23BE08648()
{
  unsigned __int8 *v0;

  return sub_23BE08564(*v0);
}

uint64_t sub_23BE08650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE0AEB8(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BE08674(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_23BE08680()
{
  sub_23BE08980();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE086A8()
{
  sub_23BE08980();
  return sub_23BE5AF18();
}

uint64_t BrowseState.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D30);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE08980();
  sub_23BE5AF00();
  v11[15] = 0;
  sub_23BE5A6FC();
  sub_23BDF23E4(&qword_256AC6D40, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEC8]);
  sub_23BE5AE4C();
  if (!v2)
  {
    v9 = type metadata accessor for BrowseState();
    v11[14] = 1;
    type metadata accessor for BrowseIdentifier();
    sub_23BDF23E4(&qword_256AC6D48, (uint64_t (*)(uint64_t))type metadata accessor for BrowseIdentifier, (uint64_t)&protocol conformance descriptor for BrowseIdentifier);
    sub_23BE5AE4C();
    v11[13] = 2;
    sub_23BE5AE34();
    v11[12] = 3;
    sub_23BE5AE34();
    v11[11] = 4;
    sub_23BE5AE34();
    v11[10] = 5;
    type metadata accessor for BrowseLoadState();
    sub_23BDF23E4(&qword_256AC6D50, (uint64_t (*)(uint64_t))type metadata accessor for BrowseLoadState, (uint64_t)&protocol conformance descriptor for BrowseLoadState);
    sub_23BE5AE4C();
    v11[9] = *(_BYTE *)(v3 + *(int *)(v9 + 40));
    v11[8] = 6;
    sub_23BE089C4();
    sub_23BE5AE4C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23BE08980()
{
  unint64_t result;

  result = qword_256AC6D38;
  if (!qword_256AC6D38)
  {
    result = MEMORY[0x242612B20](&unk_23BE5CCB4, &type metadata for BrowseState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6D38);
  }
  return result;
}

unint64_t sub_23BE089C4()
{
  unint64_t result;

  result = qword_256AC6D58;
  if (!qword_256AC6D58)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowsePlatform, &type metadata for BrowsePlatform);
    atomic_store(result, (unint64_t *)&qword_256AC6D58);
  }
  return result;
}

uint64_t BrowseState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t State;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v21 = a2;
  State = type metadata accessor for BrowseLoadState();
  MEMORY[0x24BDAC7A8](State);
  v23 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for BrowseIdentifier();
  MEMORY[0x24BDAC7A8](v24);
  v25 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_23BE5A6FC();
  v5 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v27 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D60);
  v7 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for BrowseState();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE08980();
  v28 = v9;
  v13 = v30;
  sub_23BE5AEF4();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v14 = (uint64_t)v25;
  v30 = v7;
  v15 = (uint64_t)v12;
  v38 = 0;
  sub_23BDF23E4(&qword_256AC6D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE8]);
  v16 = v26;
  sub_23BE5ADE0();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v15, v27, v16);
  v37 = 1;
  sub_23BDF23E4(&qword_256AC6D70, (uint64_t (*)(uint64_t))type metadata accessor for BrowseIdentifier, (uint64_t)&protocol conformance descriptor for BrowseIdentifier);
  sub_23BE5ADE0();
  sub_23BDF2424(v14, v15 + v10[5], (uint64_t (*)(_QWORD))type metadata accessor for BrowseIdentifier);
  v36 = 2;
  *(_BYTE *)(v15 + v10[6]) = sub_23BE5ADC8() & 1;
  v35 = 3;
  *(_BYTE *)(v15 + v10[7]) = sub_23BE5ADC8() & 1;
  v34 = 4;
  v18 = sub_23BE5ADC8();
  v19 = v30;
  *(_BYTE *)(v15 + v10[8]) = v18 & 1;
  v33 = 5;
  sub_23BDF23E4(&qword_256AC6D78, (uint64_t (*)(uint64_t))type metadata accessor for BrowseLoadState, (uint64_t)&protocol conformance descriptor for BrowseLoadState);
  v20 = (uint64_t)v23;
  sub_23BE5ADE0();
  sub_23BDF2424(v20, v15 + v10[9], (uint64_t (*)(_QWORD))type metadata accessor for BrowseLoadState);
  v31 = 6;
  sub_23BE08EEC();
  sub_23BE5ADE0();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v28, v29);
  *(_BYTE *)(v15 + v10[10]) = v32;
  sub_23BDF23A0(v15, v21, (uint64_t (*)(_QWORD))type metadata accessor for BrowseState);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23BDF2468(v15, (uint64_t (*)(_QWORD))type metadata accessor for BrowseState);
}

unint64_t sub_23BE08EEC()
{
  unint64_t result;

  result = qword_256AC6D80;
  if (!qword_256AC6D80)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowsePlatform, &type metadata for BrowsePlatform);
    atomic_store(result, (unint64_t *)&qword_256AC6D80);
  }
  return result;
}

uint64_t sub_23BE08F30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseState.init(from:)(a1, a2);
}

uint64_t sub_23BE08F44(_QWORD *a1)
{
  return BrowseState.encode(to:)(a1);
}

BOOL _s15FitnessBrowsing11BrowseStateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  char v5;

  if ((MEMORY[0x242612100]() & 1) != 0
    && (v4 = (int *)type metadata accessor for BrowseState(),
        (_s15FitnessBrowsing16BrowseIdentifierO2eeoiySbAC_ACtFZ_0(a1 + v4[5], a2 + v4[5]) & 1) != 0)
    && *(unsigned __int8 *)(a1 + v4[6]) == *(unsigned __int8 *)(a2 + v4[6])
    && *(unsigned __int8 *)(a1 + v4[7]) == *(unsigned __int8 *)(a2 + v4[7])
    && *(unsigned __int8 *)(a1 + v4[8]) == *(unsigned __int8 *)(a2 + v4[8])
    && (_s15FitnessBrowsing15BrowseLoadStateO2eeoiySbAC_ACtFZ_0(a1 + v4[9], a2 + v4[9]), (v5 & 1) != 0))
  {
    return *(unsigned __int8 *)(a1 + v4[10]) == *(unsigned __int8 *)(a2 + v4[10]);
  }
  else
  {
    return 0;
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for BrowseState(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t State;
  int EnumCaseMultiPayload;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = sub_23BE5A6FC();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    type metadata accessor for BrowseIdentifier();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = *((_QWORD *)v10 + 1);
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *((_QWORD *)v9 + 1) = v11;
      v9[16] = v10[16];
      swift_bridgeObjectRetain();
      v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88) + 64);
      v13 = &v9[v12];
      v14 = &v10[v12];
      v15 = sub_23BE5A678();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      v17 = *((_QWORD *)v10 + 1);
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *((_QWORD *)v9 + 1) = v17;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    v18 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
    v19 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v20 = (_QWORD *)((char *)a1 + v19);
    v21 = (_QWORD *)((char *)a2 + v19);
    State = type metadata accessor for BrowseLoadState();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for BrowseContent();
      v25 = swift_getEnumCaseMultiPayload();
      if (v25 == 2)
      {
        *v20 = *v21;
        swift_bridgeObjectRetain();
      }
      else if (v25 == 1)
      {
        *(_BYTE *)v20 = *(_BYTE *)v21;
        v26 = v21[2];
        v20[1] = v21[1];
        v20[2] = v26;
        v20[3] = v21[3];
        *((_BYTE *)v20 + 32) = *((_BYTE *)v21 + 32);
        v27 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
        v57 = (char *)v21 + v27;
        v58 = (char *)v20 + v27;
        v28 = sub_23BE5A678();
        v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v29(v58, v57, v28);
      }
      else
      {
        v30 = type metadata accessor for BrowseArtwork();
        v31 = *(_QWORD *)(v30 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v31 + 48))(v21, 1, v30))
        {
          v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
          memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        else
        {
          v33 = sub_23BE5A720();
          v34 = *(_QWORD *)(v33 - 8);
          v56 = v31;
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v34 + 48))(v21, 1, v33))
          {
            v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
            memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
          }
          else
          {
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v34 + 16))(v20, v21, v33);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v20, 0, 1, v33);
          }
          v36 = *(int *)(v30 + 20);
          v59 = (char *)v20 + v36;
          v37 = (char *)v21 + v36;
          v38 = sub_23BE5A690();
          v39 = *(_QWORD *)(v38 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
          {
            v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
            memcpy(v59, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v59, v37, v38);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v59, 0, 1, v38);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v20, 0, 1, v30);
        }
        v41 = type metadata accessor for EditorialCollectionDetail();
        v42 = *(int *)(v41 + 20);
        v43 = (_QWORD *)((char *)v20 + v42);
        v44 = (char *)v21 + v42;
        v45 = *(_QWORD *)((char *)v21 + v42 + 8);
        *v43 = *(_QWORD *)((char *)v21 + v42);
        v43[1] = v45;
        v46 = *(_QWORD *)((char *)v21 + v42 + 24);
        v60 = v41;
        v43[2] = *(_QWORD *)((char *)v21 + v42 + 16);
        v43[3] = v46;
        v47 = *(_QWORD *)((char *)v21 + v42 + 40);
        v43[4] = *(_QWORD *)((char *)v21 + v42 + 32);
        v43[5] = v47;
        v48 = *(_QWORD *)((char *)v21 + v42 + 56);
        v43[6] = *(_QWORD *)((char *)v21 + v42 + 48);
        v43[7] = v48;
        v49 = *(int *)(type metadata accessor for EditorialCollection() + 32);
        v54 = &v44[v49];
        v55 = (char *)v43 + v49;
        v50 = sub_23BE5A690();
        v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v51(v55, v54, v50);
        *(_QWORD *)((char *)v20 + *(int *)(v60 + 24)) = *(_QWORD *)((char *)v21 + *(int *)(v60 + 24));
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA8);
      *((_BYTE *)v20 + *(int *)(v52 + 48)) = *((_BYTE *)v21 + *(int *)(v52 + 48));
      *(_QWORD *)((char *)v20 + *(int *)(v52 + 64)) = *(_QWORD *)((char *)v21 + *(int *)(v52 + 64));
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
LABEL_26:
        *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
        return a1;
      }
      v24 = v21[1];
      *v20 = *v21;
      v20[1] = v24;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_26;
  }
  v16 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t destroy for BrowseState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = sub_23BE5A6FC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  type metadata accessor for BrowseIdentifier();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_4:
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload)
      goto LABEL_6;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  v7 = v5 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88) + 64);
  v8 = sub_23BE5A678();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
LABEL_6:
  v9 = a1 + *(int *)(a2 + 36);
  type metadata accessor for BrowseLoadState();
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    type metadata accessor for BrowseContent();
    v11 = swift_getEnumCaseMultiPayload();
    if (v11 != 2)
    {
      if (v11 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v21 = v9 + *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
        v22 = sub_23BE5A678();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
        goto LABEL_21;
      }
      if (v11)
      {
LABEL_21:
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA8);
        return swift_bridgeObjectRelease();
      }
      v12 = type metadata accessor for BrowseArtwork();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v9, 1, v12))
      {
        v13 = sub_23BE5A720();
        v14 = *(_QWORD *)(v13 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13))
          (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v9, v13);
        v15 = v9 + *(int *)(v12 + 20);
        v16 = sub_23BE5A690();
        v17 = *(_QWORD *)(v16 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
          (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
      }
      v18 = v9 + *(int *)(type metadata accessor for EditorialCollectionDetail() + 20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = v18 + *(int *)(type metadata accessor for EditorialCollection() + 32);
      v20 = sub_23BE5A690();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
    }
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  if (!(_DWORD)result)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for BrowseState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t State;
  int EnumCaseMultiPayload;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;

  v6 = sub_23BE5A6FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  type metadata accessor for BrowseIdentifier();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)v8 = *(_QWORD *)v9;
    *(_QWORD *)(v8 + 8) = v10;
    *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
    swift_bridgeObjectRetain();
    v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88) + 64);
    v12 = v8 + v11;
    v13 = v9 + v11;
    v14 = sub_23BE5A678();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  else
  {
    v15 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)v8 = *(_QWORD *)v9;
    *(_QWORD *)(v8 + 8) = v15;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  v16 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v17 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  State = type metadata accessor for BrowseLoadState();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for BrowseContent();
    v23 = swift_getEnumCaseMultiPayload();
    if (v23 == 2)
    {
      *v18 = *v19;
      swift_bridgeObjectRetain();
    }
    else if (v23 == 1)
    {
      *(_BYTE *)v18 = *(_BYTE *)v19;
      v24 = v19[2];
      v18[1] = v19[1];
      v18[2] = v24;
      v18[3] = v19[3];
      *((_BYTE *)v18 + 32) = *((_BYTE *)v19 + 32);
      v25 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
      v55 = (char *)v19 + v25;
      v56 = (char *)v18 + v25;
      v26 = sub_23BE5A678();
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27(v56, v55, v26);
    }
    else
    {
      v28 = type metadata accessor for BrowseArtwork();
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v29 + 48))(v19, 1, v28))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        v31 = sub_23BE5A720();
        v32 = *(_QWORD *)(v31 - 8);
        v54 = v29;
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v32 + 48))(v19, 1, v31))
        {
          v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
          memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v32 + 16))(v18, v19, v31);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v18, 0, 1, v31);
        }
        v34 = *(int *)(v28 + 20);
        v57 = (char *)v18 + v34;
        v35 = (char *)v19 + v34;
        v36 = sub_23BE5A690();
        v37 = *(_QWORD *)(v36 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
        {
          v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
          memcpy(v57, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v57, v35, v36);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v57, 0, 1, v36);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v18, 0, 1, v28);
      }
      v39 = type metadata accessor for EditorialCollectionDetail();
      v40 = *(int *)(v39 + 20);
      v41 = (_QWORD *)((char *)v18 + v40);
      v42 = (char *)v19 + v40;
      v43 = *(_QWORD *)((char *)v19 + v40 + 8);
      *v41 = *(_QWORD *)((char *)v19 + v40);
      v41[1] = v43;
      v44 = *(_QWORD *)((char *)v19 + v40 + 24);
      v58 = v39;
      v41[2] = *(_QWORD *)((char *)v19 + v40 + 16);
      v41[3] = v44;
      v45 = *(_QWORD *)((char *)v19 + v40 + 40);
      v41[4] = *(_QWORD *)((char *)v19 + v40 + 32);
      v41[5] = v45;
      v46 = *(_QWORD *)((char *)v19 + v40 + 56);
      v41[6] = *(_QWORD *)((char *)v19 + v40 + 48);
      v41[7] = v46;
      v47 = *(int *)(type metadata accessor for EditorialCollection() + 32);
      v52 = &v42[v47];
      v53 = (char *)v41 + v47;
      v48 = sub_23BE5A690();
      v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v49(v53, v52, v48);
      *(_QWORD *)((char *)v18 + *(int *)(v58 + 24)) = *(_QWORD *)((char *)v19 + *(int *)(v58 + 24));
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA8);
    *((_BYTE *)v18 + *(int *)(v50 + 48)) = *((_BYTE *)v19 + *(int *)(v50 + 48));
    *(_QWORD *)((char *)v18 + *(int *)(v50 + 64)) = *(_QWORD *)((char *)v19 + *(int *)(v50 + 64));
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  if (!EnumCaseMultiPayload)
  {
    v22 = v19[1];
    *v18 = *v19;
    v18[1] = v22;
    swift_bridgeObjectRetain();
LABEL_23:
    swift_storeEnumTagMultiPayload();
    goto LABEL_24;
  }
  memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
LABEL_24:
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t assignWithCopy for BrowseState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t State;
  int EnumCaseMultiPayload;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;

  v6 = sub_23BE5A6FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = a1 + v7;
    v9 = a2 + v7;
    sub_23BDF2468(a1 + v7, (uint64_t (*)(_QWORD))type metadata accessor for BrowseIdentifier);
    type metadata accessor for BrowseIdentifier();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
      *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
      swift_bridgeObjectRetain();
      v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88) + 64);
      v11 = v8 + v10;
      v12 = v9 + v10;
      v13 = sub_23BE5A678();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  if (a1 != a2)
  {
    v14 = a3[9];
    v15 = (_QWORD *)(a1 + v14);
    v16 = (_QWORD *)(a2 + v14);
    sub_23BDF2468(a1 + v14, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLoadState);
    State = type metadata accessor for BrowseLoadState();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for BrowseContent();
      v19 = swift_getEnumCaseMultiPayload();
      if (v19 == 2)
      {
        *v15 = *v16;
        swift_bridgeObjectRetain();
      }
      else if (v19 == 1)
      {
        *(_BYTE *)v15 = *(_BYTE *)v16;
        v15[1] = v16[1];
        v15[2] = v16[2];
        v15[3] = v16[3];
        *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
        v20 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
        v46 = (char *)v16 + v20;
        v47 = (char *)v15 + v20;
        v21 = sub_23BE5A678();
        v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v22(v47, v46, v21);
      }
      else
      {
        v23 = type metadata accessor for BrowseArtwork();
        v24 = *(_QWORD *)(v23 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v24 + 48))(v16, 1, v23))
        {
          v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
          memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          v26 = sub_23BE5A720();
          v27 = *(_QWORD *)(v26 - 8);
          v45 = v24;
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v16, 1, v26))
          {
            v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
            memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
          }
          else
          {
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v27 + 16))(v15, v16, v26);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v15, 0, 1, v26);
          }
          v29 = *(int *)(v23 + 20);
          v48 = (char *)v15 + v29;
          v30 = (char *)v16 + v29;
          v31 = sub_23BE5A690();
          v32 = *(_QWORD *)(v31 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
          {
            v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
            memcpy(v48, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v48, v30, v31);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v48, 0, 1, v31);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v15, 0, 1, v23);
        }
        v34 = type metadata accessor for EditorialCollectionDetail();
        v35 = *(int *)(v34 + 20);
        v36 = (_QWORD *)((char *)v15 + v35);
        v37 = (char *)v16 + v35;
        *v36 = *(_QWORD *)((char *)v16 + v35);
        v36[1] = *(_QWORD *)((char *)v16 + v35 + 8);
        v36[2] = *(_QWORD *)((char *)v16 + v35 + 16);
        v49 = v34;
        v36[3] = *(_QWORD *)((char *)v16 + v35 + 24);
        v36[4] = *(_QWORD *)((char *)v16 + v35 + 32);
        v36[5] = *(_QWORD *)((char *)v16 + v35 + 40);
        v36[6] = *(_QWORD *)((char *)v16 + v35 + 48);
        v36[7] = *(_QWORD *)((char *)v16 + v35 + 56);
        v38 = *(int *)(type metadata accessor for EditorialCollection() + 32);
        v43 = &v37[v38];
        v44 = (char *)v36 + v38;
        v39 = sub_23BE5A690();
        v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v40(v44, v43, v39);
        *(_QWORD *)((char *)v15 + *(int *)(v49 + 24)) = *(_QWORD *)((char *)v16 + *(int *)(v49 + 24));
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA8);
      *((_BYTE *)v15 + *(int *)(v41 + 48)) = *((_BYTE *)v16 + *(int *)(v41 + 48));
      *(_QWORD *)((char *)v15 + *(int *)(v41 + 64)) = *(_QWORD *)((char *)v16 + *(int *)(v41 + 64));
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
    if (!EnumCaseMultiPayload)
    {
      *v15 = *v16;
      v15[1] = v16[1];
      swift_bridgeObjectRetain();
LABEL_26:
      swift_storeEnumTagMultiPayload();
      goto LABEL_27;
    }
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
  }
LABEL_27:
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t initializeWithTake for BrowseState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t State;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char *__dst;

  v6 = sub_23BE5A6FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for BrowseIdentifier();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
    v8[16] = v9[16];
    v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88) + 64);
    v12 = &v8[v11];
    v13 = &v9[v11];
    v14 = sub_23BE5A678();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v15 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v17 = (char *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  State = type metadata accessor for BrowseLoadState();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = type metadata accessor for BrowseContent();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *v17 = *v18;
      *(_OWORD *)(v17 + 8) = *(_OWORD *)(v18 + 8);
      *((_QWORD *)v17 + 3) = *((_QWORD *)v18 + 3);
      v17[32] = v18[32];
      v25 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
      v26 = &v17[v25];
      v27 = &v18[v25];
      v28 = sub_23BE5A678();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
LABEL_21:
        v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA8);
        v17[*(int *)(v46 + 48)] = v18[*(int *)(v46 + 48)];
        *(_QWORD *)&v17[*(int *)(v46 + 64)] = *(_QWORD *)&v18[*(int *)(v46 + 64)];
        swift_storeEnumTagMultiPayload();
        goto LABEL_22;
      }
      v22 = type metadata accessor for BrowseArtwork();
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        v49 = v23;
        v29 = sub_23BE5A720();
        v30 = *(_QWORD *)(v29 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v18, 1, v29))
        {
          v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v17, v18, v29);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v17, 0, 1, v29);
        }
        v32 = *(int *)(v22 + 20);
        __dst = &v17[v32];
        v33 = &v18[v32];
        v34 = sub_23BE5A690();
        v48 = *(_QWORD *)(v34 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v33, 1, v34))
        {
          v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
          memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v48 + 32))(__dst, v33, v34);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(__dst, 0, 1, v34);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v17, 0, 1, v22);
      }
      v36 = type metadata accessor for EditorialCollectionDetail();
      v37 = *(int *)(v36 + 20);
      v38 = &v17[v37];
      v39 = &v18[v37];
      v40 = *(_OWORD *)&v18[v37 + 16];
      *(_OWORD *)v38 = *(_OWORD *)&v18[v37];
      *((_OWORD *)v38 + 1) = v40;
      v41 = *(_OWORD *)&v18[v37 + 48];
      *((_OWORD *)v38 + 2) = *(_OWORD *)&v18[v37 + 32];
      *((_OWORD *)v38 + 3) = v41;
      v42 = *(int *)(type metadata accessor for EditorialCollection() + 32);
      v43 = &v38[v42];
      v44 = &v39[v42];
      v45 = sub_23BE5A690();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
      *(_QWORD *)&v17[*(int *)(v36 + 24)] = *(_QWORD *)&v18[*(int *)(v36 + 24)];
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_21;
  }
  memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
LABEL_22:
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t assignWithTake for BrowseState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t State;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char *__dst;

  v6 = sub_23BE5A6FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (char *)(a1 + v7);
    v9 = (char *)(a2 + v7);
    sub_23BDF2468(a1 + v7, (uint64_t (*)(_QWORD))type metadata accessor for BrowseIdentifier);
    v10 = type metadata accessor for BrowseIdentifier();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v8[16] = v9[16];
      v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88) + 64);
      v12 = &v8[v11];
      v13 = &v9[v11];
      v14 = sub_23BE5A678();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v15 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  if (a1 != a2)
  {
    v16 = a3[9];
    v17 = (char *)(a1 + v16);
    v18 = (char *)(a2 + v16);
    sub_23BDF2468(a1 + v16, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLoadState);
    State = type metadata accessor for BrowseLoadState();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v20 = type metadata accessor for BrowseContent();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        *v17 = *v18;
        *(_OWORD *)(v17 + 8) = *(_OWORD *)(v18 + 8);
        *((_QWORD *)v17 + 3) = *((_QWORD *)v18 + 3);
        v17[32] = v18[32];
        v25 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
        v26 = &v17[v25];
        v27 = &v18[v25];
        v28 = sub_23BE5A678();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
LABEL_23:
          v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA8);
          v17[*(int *)(v46 + 48)] = v18[*(int *)(v46 + 48)];
          *(_QWORD *)&v17[*(int *)(v46 + 64)] = *(_QWORD *)&v18[*(int *)(v46 + 64)];
          swift_storeEnumTagMultiPayload();
          goto LABEL_24;
        }
        v22 = type metadata accessor for BrowseArtwork();
        v23 = *(_QWORD *)(v22 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v22))
        {
          v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          v49 = v23;
          v29 = sub_23BE5A720();
          v30 = *(_QWORD *)(v29 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v18, 1, v29))
          {
            v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
            memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v17, v18, v29);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v17, 0, 1, v29);
          }
          v32 = *(int *)(v22 + 20);
          __dst = &v17[v32];
          v33 = &v18[v32];
          v34 = sub_23BE5A690();
          v48 = *(_QWORD *)(v34 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v33, 1, v34))
          {
            v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
            memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v48 + 32))(__dst, v33, v34);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(__dst, 0, 1, v34);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v17, 0, 1, v22);
        }
        v36 = type metadata accessor for EditorialCollectionDetail();
        v37 = *(int *)(v36 + 20);
        v38 = &v17[v37];
        v39 = &v18[v37];
        v40 = *(_OWORD *)&v18[v37 + 16];
        *(_OWORD *)v38 = *(_OWORD *)&v18[v37];
        *((_OWORD *)v38 + 1) = v40;
        v41 = *(_OWORD *)&v18[v37 + 48];
        *((_OWORD *)v38 + 2) = *(_OWORD *)&v18[v37 + 32];
        *((_OWORD *)v38 + 3) = v41;
        v42 = *(int *)(type metadata accessor for EditorialCollection() + 32);
        v43 = &v38[v42];
        v44 = &v39[v42];
        v45 = sub_23BE5A690();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
        *(_QWORD *)&v17[*(int *)(v36 + 24)] = *(_QWORD *)&v18[*(int *)(v36 + 24)];
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_23;
    }
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
  }
LABEL_24:
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE0AA28(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t State;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v6 = sub_23BE5A6FC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    State = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, State);
  }
  v11 = type metadata accessor for BrowseIdentifier();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    State = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, State);
  }
  if ((_DWORD)a2 != 254)
  {
    State = type metadata accessor for BrowseLoadState();
    v12 = *(_QWORD *)(State - 8);
    v13 = a3[9];
    goto LABEL_9;
  }
  v14 = *(unsigned __int8 *)(a1 + a3[6]);
  if (v14 >= 2)
    return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BrowseState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE0AB0C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t State;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_23BE5A6FC();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    State = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for BrowseIdentifier();
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      State = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 254)
      {
        *(_BYTE *)(a1 + a4[6]) = a2 + 1;
        return result;
      }
      State = type metadata accessor for BrowseLoadState();
      v14 = *(_QWORD *)(State - 8);
      v15 = a4[9];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, State);
}

uint64_t sub_23BE0ABD0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_23BE5A6FC();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for BrowseIdentifier();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for BrowseLoadState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BrowseState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23BE0AD60 + 4 * byte_23BE5CAFC[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23BE0AD94 + 4 * byte_23BE5CAF7[v4]))();
}

uint64_t sub_23BE0AD94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE0AD9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE0ADA4);
  return result;
}

uint64_t sub_23BE0ADB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE0ADB8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23BE0ADBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE0ADC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseState.CodingKeys()
{
  return &type metadata for BrowseState.CodingKeys;
}

unint64_t sub_23BE0ADE4()
{
  unint64_t result;

  result = qword_256AC6E58;
  if (!qword_256AC6E58)
  {
    result = MEMORY[0x242612B20](&unk_23BE5CC8C, &type metadata for BrowseState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6E58);
  }
  return result;
}

unint64_t sub_23BE0AE2C()
{
  unint64_t result;

  result = qword_256AC6E60;
  if (!qword_256AC6E60)
  {
    result = MEMORY[0x242612B20](&unk_23BE5CBFC, &type metadata for BrowseState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6E60);
  }
  return result;
}

unint64_t sub_23BE0AE74()
{
  unint64_t result;

  result = qword_256AC6E68;
  if (!qword_256AC6E68)
  {
    result = MEMORY[0x242612B20](&unk_23BE5CC24, &type metadata for BrowseState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6E68);
  }
  return result;
}

uint64_t sub_23BE0AEB8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000016 && a2 == 0x800000023BE66260 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E7265746E497369 && a2 == 0xEF646C6975426C61 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000023BE66280 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7263736275537369 && a2 == 0xEC00000064656269 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7461745364616F6CLL && a2 == 0xE900000000000065 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6D726F6674616C70 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v5 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_23BE0B1E8()
{
  return 1;
}

uint64_t sub_23BE0B1F4()
{
  return sub_23BE5AEC4();
}

uint64_t sub_23BE0B21C()
{
  return 0x6F65646976;
}

uint64_t sub_23BE0B230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6F65646976 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23BE5AE58();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23BE0B2BC()
{
  sub_23BE0B6E8();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE0B2E4()
{
  sub_23BE0B6E8();
  return sub_23BE5AF18();
}

uint64_t sub_23BE0B30C()
{
  sub_23BE5AEB8();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE0B34C()
{
  sub_23BE5AEB8();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE0B388()
{
  return 0x6E694C6F65646976;
}

uint64_t sub_23BE0B3A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E694C6F65646976 && a2 == 0xE90000000000006BLL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23BE5AE58();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23BE0B444()
{
  sub_23BE0B770();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE0B46C()
{
  sub_23BE0B770();
  return sub_23BE5AF18();
}

uint64_t EditorialLink.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6E70);
  v3 = *(_QWORD *)(v2 - 8);
  v19 = v2;
  v20 = v3;
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for EditorialVideoLink();
  MEMORY[0x24BDAC7A8](v18);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for EditorialLink();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6E78);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE0B6E8();
  sub_23BE5AF00();
  sub_23BE0B72C(v17, (uint64_t)v10);
  sub_23BDF2424((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for EditorialVideoLink);
  sub_23BE0B770();
  sub_23BE5ADF8();
  sub_23BDF23E4(&qword_256AC6E90, (uint64_t (*)(uint64_t))type metadata accessor for EditorialVideoLink, (uint64_t)&protocol conformance descriptor for EditorialVideoLink);
  v15 = v19;
  sub_23BE5AE4C();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v15);
  sub_23BE0B7B4((uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t type metadata accessor for EditorialLink()
{
  uint64_t result;

  result = qword_256AC6F30;
  if (!qword_256AC6F30)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BE0B6E8()
{
  unint64_t result;

  result = qword_256AC6E80;
  if (!qword_256AC6E80)
  {
    result = MEMORY[0x242612B20](&unk_23BE5CFB8, &type metadata for EditorialLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6E80);
  }
  return result;
}

uint64_t sub_23BE0B72C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EditorialLink();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BE0B770()
{
  unint64_t result;

  result = qword_256AC6E88;
  if (!qword_256AC6E88)
  {
    result = MEMORY[0x242612B20](&unk_23BE5CF68, &type metadata for EditorialLink.VideoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6E88);
  }
  return result;
}

uint64_t sub_23BE0B7B4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EditorialVideoLink();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t EditorialLink.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;

  v23 = a2;
  v24 = type metadata accessor for EditorialLink();
  MEMORY[0x24BDAC7A8](v24);
  v25 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6E98);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6EA0);
  v8 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE0B6E8();
  v28 = v10;
  v11 = v27;
  sub_23BE5AEF4();
  if (!v11)
  {
    v12 = v7;
    v22 = v5;
    v13 = v4;
    v27 = v8;
    v15 = (uint64_t)v25;
    v14 = v26;
    if (*(_QWORD *)(sub_23BE5ADEC() + 16) == 1)
    {
      sub_23BE0B770();
      sub_23BE5AD80();
      v16 = v27;
      type metadata accessor for EditorialVideoLink();
      sub_23BDF23E4(&qword_256AC6EA8, (uint64_t (*)(uint64_t))type metadata accessor for EditorialVideoLink, (uint64_t)&protocol conformance descriptor for EditorialVideoLink);
      sub_23BE5ADE0();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v13);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v28, v14);
      sub_23BDF2424(v15, v23, (uint64_t (*)(_QWORD))type metadata accessor for EditorialLink);
    }
    else
    {
      v17 = sub_23BE5AD68();
      swift_allocError();
      v19 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
      *v19 = v24;
      sub_23BE5AD8C();
      sub_23BE5AD5C();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v17);
      swift_willThrow();
      v20 = v27;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v28, v14);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23BE0BAF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return EditorialLink.init(from:)(a1, a2);
}

uint64_t sub_23BE0BB08(_QWORD *a1)
{
  return EditorialLink.encode(to:)(a1);
}

uint64_t EditorialLink.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v1 = type metadata accessor for EditorialVideoLink();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for EditorialLink();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE0B72C(v0, (uint64_t)v6);
  sub_23BDF2424((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for EditorialVideoLink);
  sub_23BE5AEC4();
  sub_23BE5AEDC();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  sub_23BE5A690();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23BE5AC30();
  return sub_23BE0B7B4((uint64_t)v3);
}

uint64_t EditorialLink.hashValue.getter()
{
  sub_23BE5AEB8();
  EditorialLink.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE0BCAC()
{
  sub_23BE5AEB8();
  EditorialLink.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE0BCEC()
{
  sub_23BE5AEB8();
  EditorialLink.hash(into:)();
  return sub_23BE5AEE8();
}

BOOL _s15FitnessBrowsing13EditorialLinkO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  _BOOL8 v16;
  uint64_t v18;

  v4 = type metadata accessor for EditorialVideoLink();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v18 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6F70);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_23BE0B72C(a1, (uint64_t)v13);
  sub_23BE0B72C(a2, v14);
  sub_23BDF2424((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for EditorialVideoLink);
  sub_23BDF2424(v14, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for EditorialVideoLink);
  v16 = 0;
  if (*(double *)v9 == *(double *)v7)
  {
    v15 = *((_QWORD *)v9 + 1) == *((_QWORD *)v7 + 1) && *((_QWORD *)v9 + 2) == *((_QWORD *)v7 + 2);
    if ((v15 || (sub_23BE5AE58() & 1) != 0)
      && (MEMORY[0x242612094](&v9[*(int *)(v4 + 24)], &v7[*(int *)(v4 + 24)]) & 1) != 0)
    {
      v16 = 1;
    }
  }
  sub_23BE0B7B4((uint64_t)v7);
  sub_23BE0B7B4((uint64_t)v9);
  return v16;
}

uint64_t sub_23BE0BE9C()
{
  return sub_23BDF23E4(&qword_256AC6EB0, (uint64_t (*)(uint64_t))type metadata accessor for EditorialLink, (uint64_t)&protocol conformance descriptor for EditorialLink);
}

uint64_t *initializeBufferWithCopyOfBuffer for EditorialLink(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v6 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
    v7 = (char *)v4 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_23BE5A690();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v4;
}

uint64_t destroy for EditorialLink(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(type metadata accessor for EditorialVideoLink() + 24);
  v3 = sub_23BE5A690();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for EditorialLink(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23BE5A690();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for EditorialLink(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for EditorialLink(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23BE5A690();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for EditorialLink(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  v5 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for EditorialLink(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6EB8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for EditorialLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6EB8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a3, v6);
}

uint64_t sub_23BE0C248()
{
  return 0;
}

uint64_t sub_23BE0C250(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for EditorialVideoLink();
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase();
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

ValueMetadata *type metadata accessor for EditorialLink.CodingKeys()
{
  return &type metadata for EditorialLink.CodingKeys;
}

uint64_t getEnumTagSinglePayload for BrowseError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s15FitnessBrowsing13EditorialLinkO10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BE0C358 + 4 * byte_23BE5CD04[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BE0C378 + 4 * byte_23BE5CD09[v4]))();
}

_BYTE *sub_23BE0C358(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BE0C378(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE0C380(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE0C388(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE0C390(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE0C398(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for EditorialLink.VideoCodingKeys()
{
  return &type metadata for EditorialLink.VideoCodingKeys;
}

unint64_t sub_23BE0C3B8()
{
  unint64_t result;

  result = qword_256AC6F40;
  if (!qword_256AC6F40)
  {
    result = MEMORY[0x242612B20](&unk_23BE5CE88, &type metadata for EditorialLink.VideoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6F40);
  }
  return result;
}

unint64_t sub_23BE0C400()
{
  unint64_t result;

  result = qword_256AC6F48;
  if (!qword_256AC6F48)
  {
    result = MEMORY[0x242612B20](&unk_23BE5CF40, &type metadata for EditorialLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6F48);
  }
  return result;
}

unint64_t sub_23BE0C448()
{
  unint64_t result;

  result = qword_256AC6F50;
  if (!qword_256AC6F50)
  {
    result = MEMORY[0x242612B20](&unk_23BE5CDF8, &type metadata for EditorialLink.VideoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6F50);
  }
  return result;
}

unint64_t sub_23BE0C490()
{
  unint64_t result;

  result = qword_256AC6F58;
  if (!qword_256AC6F58)
  {
    result = MEMORY[0x242612B20](&unk_23BE5CE20, &type metadata for EditorialLink.VideoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6F58);
  }
  return result;
}

unint64_t sub_23BE0C4D8()
{
  unint64_t result;

  result = qword_256AC6F60;
  if (!qword_256AC6F60)
  {
    result = MEMORY[0x242612B20](&unk_23BE5CEB0, &type metadata for EditorialLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6F60);
  }
  return result;
}

unint64_t sub_23BE0C520()
{
  unint64_t result;

  result = qword_256AC6F68;
  if (!qword_256AC6F68)
  {
    result = MEMORY[0x242612B20](&unk_23BE5CED8, &type metadata for EditorialLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6F68);
  }
  return result;
}

uint64_t CreatePlanBannerState.actionTitle.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void CreatePlanBannerState.sizeClass.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t CreatePlanBannerState.subtitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CreatePlanBannerState.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

void CreatePlanBannerState.visibility.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 56);
}

_BYTE *CreatePlanBannerState.visibility.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = *result;
  return result;
}

uint64_t (*CreatePlanBannerState.visibility.modify())()
{
  return nullsub_1;
}

void __swiftcall CreatePlanBannerState.init(actionTitle:sizeClass:subtitle:title:visibility:)(FitnessBrowsing::CreatePlanBannerState *__return_ptr retstr, Swift::String_optional actionTitle, FitnessBrowsing::BrowseSizeClass sizeClass, Swift::String subtitle, Swift::String title, FitnessBrowsing::CreatePlanBannerVisibility visibility)
{
  FitnessBrowsing::BrowseSizeClass v6;
  FitnessBrowsing::CreatePlanBannerVisibility v7;

  v6 = *(_BYTE *)sizeClass;
  v7 = *(_BYTE *)visibility;
  retstr->actionTitle = actionTitle;
  retstr->sizeClass = v6;
  retstr->subtitle = subtitle;
  retstr->title = title;
  retstr->visibility = v7;
}

uint64_t sub_23BE0C640()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE0C678 + 4 * byte_23BE5D010[*v0]))(0x69546E6F69746361, 0xEB00000000656C74);
}

uint64_t sub_23BE0C678()
{
  return 0x73616C43657A6973;
}

uint64_t sub_23BE0C694()
{
  return 0x656C746974627573;
}

uint64_t sub_23BE0C6AC()
{
  return 0x656C746974;
}

uint64_t sub_23BE0C6C0()
{
  return 0x696C696269736976;
}

uint64_t sub_23BE0C6DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE0D650(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE0C700()
{
  sub_23BE0C950();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE0C728()
{
  sub_23BE0C950();
  return sub_23BE5AF18();
}

uint64_t CreatePlanBannerState.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6F78);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(unsigned __int8 *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v15 = *(_QWORD *)(v1 + 32);
  v16 = v7;
  v8 = *(_QWORD *)(v1 + 40);
  v13 = *(_QWORD *)(v1 + 48);
  v14 = v8;
  v12 = *(unsigned __int8 *)(v1 + 56);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE0C950();
  sub_23BE5AF00();
  v25 = 0;
  v9 = v18;
  sub_23BE5AE04();
  if (!v9)
  {
    v24 = v17;
    v23 = 1;
    sub_23BE0C994();
    sub_23BE5AE4C();
    v22 = 2;
    sub_23BE5AE28();
    v21 = 3;
    sub_23BE5AE28();
    v20 = v12;
    v19 = 4;
    sub_23BE0C9D8();
    sub_23BE5AE4C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BE0C950()
{
  unint64_t result;

  result = qword_256AC6F80;
  if (!qword_256AC6F80)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D1CC, &type metadata for CreatePlanBannerState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6F80);
  }
  return result;
}

unint64_t sub_23BE0C994()
{
  unint64_t result;

  result = qword_256AC6F88;
  if (!qword_256AC6F88)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseSizeClass, &type metadata for BrowseSizeClass);
    atomic_store(result, (unint64_t *)&qword_256AC6F88);
  }
  return result;
}

unint64_t sub_23BE0C9D8()
{
  unint64_t result;

  result = qword_256AC6F90;
  if (!qword_256AC6F90)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for CreatePlanBannerVisibility, &type metadata for CreatePlanBannerVisibility);
    atomic_store(result, (unint64_t *)&qword_256AC6F90);
  }
  return result;
}

uint64_t CreatePlanBannerState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  unsigned __int8 v30;
  char v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6F98);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE0C950();
  sub_23BE5AEF4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v31 = 0;
  v9 = sub_23BE5AD98();
  v11 = v10;
  v29 = 1;
  sub_23BE0CD30();
  swift_bridgeObjectRetain();
  sub_23BE5ADE0();
  v23 = v30;
  v28 = 2;
  v22 = sub_23BE5ADBC();
  v27 = 3;
  v24 = v13;
  swift_bridgeObjectRetain();
  v20 = sub_23BE5ADBC();
  v25 = 4;
  v15 = v14;
  sub_23BE0CD74();
  v21 = v15;
  swift_bridgeObjectRetain();
  sub_23BE5ADE0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = v26;
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = v23;
  v17 = v21;
  v18 = v24;
  *(_QWORD *)(a2 + 24) = v22;
  *(_QWORD *)(a2 + 32) = v18;
  *(_QWORD *)(a2 + 40) = v20;
  *(_QWORD *)(a2 + 48) = v17;
  *(_BYTE *)(a2 + 56) = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_23BE0CD30()
{
  unint64_t result;

  result = qword_256AC6FA0;
  if (!qword_256AC6FA0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseSizeClass, &type metadata for BrowseSizeClass);
    atomic_store(result, (unint64_t *)&qword_256AC6FA0);
  }
  return result;
}

unint64_t sub_23BE0CD74()
{
  unint64_t result;

  result = qword_256AC6FA8;
  if (!qword_256AC6FA8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for CreatePlanBannerVisibility, &type metadata for CreatePlanBannerVisibility);
    atomic_store(result, (unint64_t *)&qword_256AC6FA8);
  }
  return result;
}

uint64_t sub_23BE0CDB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CreatePlanBannerState.init(from:)(a1, a2);
}

uint64_t sub_23BE0CDCC(_QWORD *a1)
{
  return CreatePlanBannerState.encode(to:)(a1);
}

uint64_t CreatePlanBannerState.hash(into:)()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    sub_23BE5AED0();
    swift_bridgeObjectRetain();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BE5AED0();
  }
  sub_23BE5AEC4();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE5AEC4();
}

uint64_t CreatePlanBannerState.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_23BE5AEB8();
  sub_23BE5AED0();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
  }
  sub_23BE5AEC4();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE0CFD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_23BE5AEB8();
  sub_23BE5AED0();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
  }
  sub_23BE5AEC4();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

BOOL _s15FitnessBrowsing21CreatePlanBannerStateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 result;
  char v17;
  char v18;
  char v19;
  int v20;
  int v21;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(unsigned __int8 *)(a1 + 56);
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(unsigned __int8 *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  if (!v3)
  {
    result = 0;
    if (v10)
      return result;
    v20 = *(unsigned __int8 *)(a2 + 56);
    v21 = v9;
    goto LABEL_10;
  }
  if (!v10)
    return 0;
  v20 = *(unsigned __int8 *)(a2 + 56);
  v21 = *(unsigned __int8 *)(a1 + 56);
  if (*(_QWORD *)a1 != *(_QWORD *)a2 || v3 != v10)
  {
    v17 = sub_23BE5AE58();
    result = 0;
    if ((v17 & 1) == 0)
      return result;
LABEL_10:
    if (v4 != v11)
      return result;
    goto LABEL_11;
  }
  if (v4 != v11)
    return 0;
LABEL_11:
  if (v5 == v12 && v6 == v13 || (v18 = sub_23BE5AE58(), result = 0, (v18 & 1) != 0))
  {
    if (v7 == v14 && v8 == v15)
      return v21 == v20;
    v19 = sub_23BE5AE58();
    result = 0;
    if ((v19 & 1) != 0)
      return v21 == v20;
  }
  return result;
}

unint64_t sub_23BE0D210()
{
  unint64_t result;

  result = qword_256AC6FB0;
  if (!qword_256AC6FB0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for CreatePlanBannerState, &type metadata for CreatePlanBannerState);
    atomic_store(result, (unint64_t *)&qword_256AC6FB0);
  }
  return result;
}

uint64_t destroy for CreatePlanBannerState()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CreatePlanBannerState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CreatePlanBannerState(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CreatePlanBannerState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for CreatePlanBannerState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CreatePlanBannerState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CreatePlanBannerState()
{
  return &type metadata for CreatePlanBannerState;
}

uint64_t storeEnumTagSinglePayload for CreatePlanBannerState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BE0D4F8 + 4 * byte_23BE5D01A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BE0D52C + 4 * byte_23BE5D015[v4]))();
}

uint64_t sub_23BE0D52C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE0D534(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE0D53CLL);
  return result;
}

uint64_t sub_23BE0D548(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE0D550);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BE0D554(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE0D55C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CreatePlanBannerState.CodingKeys()
{
  return &type metadata for CreatePlanBannerState.CodingKeys;
}

unint64_t sub_23BE0D57C()
{
  unint64_t result;

  result = qword_256AC6FB8;
  if (!qword_256AC6FB8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D1A4, &type metadata for CreatePlanBannerState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6FB8);
  }
  return result;
}

unint64_t sub_23BE0D5C4()
{
  unint64_t result;

  result = qword_256AC6FC0;
  if (!qword_256AC6FC0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D114, &type metadata for CreatePlanBannerState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6FC0);
  }
  return result;
}

unint64_t sub_23BE0D60C()
{
  unint64_t result;

  result = qword_256AC6FC8;
  if (!qword_256AC6FC8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D13C, &type metadata for CreatePlanBannerState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6FC8);
  }
  return result;
}

uint64_t sub_23BE0D650(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x69546E6F69746361 && a2 == 0xEB00000000656C74;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73616C43657A6973 && a2 == 0xE900000000000073 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x696C696269736976 && a2 == 0xEA00000000007974)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t VideoAsset.contentRating.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VideoAsset.streamingProgramIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VideoAsset.streamingURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for VideoAsset() + 24);
  v4 = sub_23BE5A690();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for VideoAsset()
{
  uint64_t result;

  result = qword_256AC7048;
  if (!qword_256AC7048)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t VideoAsset.init(contentRating:streamingURL:streamingProgramIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  char *v10;
  uint64_t v11;
  uint64_t result;

  *a6 = a1;
  a6[1] = a2;
  v10 = (char *)a6 + *(int *)(type metadata accessor for VideoAsset() + 24);
  v11 = sub_23BE5A690();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a3, v11);
  a6[2] = a4;
  a6[3] = a5;
  return result;
}

uint64_t sub_23BE0D9E0()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD00000000000001ALL;
  if (*v0 != 1)
    v1 = 0x6E696D6165727473;
  if (*v0)
    return v1;
  else
    return 0x52746E65746E6F63;
}

uint64_t sub_23BE0DA54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE0EAC8(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BE0DA78(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_23BE0DA84()
{
  sub_23BE0DC50();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE0DAAC()
{
  sub_23BE0DC50();
  return sub_23BE5AF18();
}

uint64_t VideoAsset.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6FD0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE0DC50();
  sub_23BE5AF00();
  v8[15] = 0;
  sub_23BE5AE28();
  if (!v1)
  {
    v8[14] = 1;
    sub_23BE5AE04();
    type metadata accessor for VideoAsset();
    v8[13] = 2;
    sub_23BE5A690();
    sub_23BDF23E4(&qword_256AC6710, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_23BE5AE4C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BE0DC50()
{
  unint64_t result;

  result = qword_256AC6FD8;
  if (!qword_256AC6FD8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D3FC, &type metadata for VideoAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC6FD8);
  }
  return result;
}

uint64_t VideoAsset.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  char v27;
  char v28;

  v22 = a2;
  v23 = sub_23BE5A690();
  v21 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6FE0);
  v6 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for VideoAsset();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = a1[3];
  v25 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_23BE0DC50();
  sub_23BE5AEF4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  v20 = v9;
  v13 = v6;
  v14 = v5;
  v16 = v23;
  v15 = v24;
  v28 = 0;
  *v11 = sub_23BE5ADBC();
  v11[1] = v17;
  v27 = 1;
  v11[2] = sub_23BE5AD98();
  v11[3] = v18;
  v26 = 2;
  sub_23BDF23E4(&qword_256AC6720, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  sub_23BE5ADE0();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v15);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))((char *)v11 + *(int *)(v20 + 24), v14, v16);
  sub_23BE0DF34((uint64_t)v11, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return sub_23BE0DF78((uint64_t)v11);
}

uint64_t sub_23BE0DF34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for VideoAsset();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BE0DF78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for VideoAsset();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BE0DFB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return VideoAsset.init(from:)(a1, a2);
}

uint64_t sub_23BE0DFC8(_QWORD *a1)
{
  return VideoAsset.encode(to:)(a1);
}

uint64_t VideoAsset.hash(into:)()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 24))
  {
    sub_23BE5AED0();
    swift_bridgeObjectRetain();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BE5AED0();
  }
  type metadata accessor for VideoAsset();
  sub_23BE5A690();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  return sub_23BE5AC30();
}

uint64_t VideoAsset.hashValue.getter()
{
  uint64_t v0;

  sub_23BE5AEB8();
  sub_23BE5AC9C();
  if (*(_QWORD *)(v0 + 24))
  {
    sub_23BE5AED0();
    swift_bridgeObjectRetain();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BE5AED0();
  }
  type metadata accessor for VideoAsset();
  sub_23BE5A690();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23BE5AC30();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE0E1A4()
{
  uint64_t v0;

  sub_23BE5AC9C();
  if (*(_QWORD *)(v0 + 24))
  {
    sub_23BE5AED0();
    swift_bridgeObjectRetain();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BE5AED0();
  }
  sub_23BE5A690();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  return sub_23BE5AC30();
}

uint64_t sub_23BE0E268()
{
  uint64_t v0;

  sub_23BE5AEB8();
  sub_23BE5AC9C();
  if (*(_QWORD *)(v0 + 24))
  {
    sub_23BE5AED0();
    swift_bridgeObjectRetain();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BE5AED0();
  }
  sub_23BE5A690();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23BE5AC30();
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing10VideoAssetV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (sub_23BE5AE58() & 1) != 0)
  {
    v5 = a1[3];
    v6 = a2[3];
    if (v5)
    {
      if (v6)
      {
        v7 = a1[2] == a2[2] && v5 == v6;
        if (v7 || (sub_23BE5AE58() & 1) != 0)
        {
LABEL_13:
          type metadata accessor for VideoAsset();
          JUMPOUT(0x242612094);
        }
      }
    }
    else if (!v6)
    {
      goto LABEL_13;
    }
  }
  return 0;
}

uint64_t sub_23BE0E3E4()
{
  return sub_23BDF23E4(&qword_256AC6FE8, (uint64_t (*)(uint64_t))type metadata accessor for VideoAsset, (uint64_t)&protocol conformance descriptor for VideoAsset);
}

uint64_t *initializeBufferWithCopyOfBuffer for VideoAsset(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_23BE5A690();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for VideoAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_23BE5A690();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for VideoAsset(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23BE5A690();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for VideoAsset(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for VideoAsset(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for VideoAsset(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoAsset()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE0E71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23BE5A690();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for VideoAsset()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE0E7A4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_23BE5A690();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_23BE0E818()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BE5A690();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BrowseFontSymbolicTrait(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoAsset.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE0E970 + 4 * byte_23BE5D225[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE0E9A4 + 4 * byte_23BE5D220[v4]))();
}

uint64_t sub_23BE0E9A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE0E9AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE0E9B4);
  return result;
}

uint64_t sub_23BE0E9C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE0E9C8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE0E9CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE0E9D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VideoAsset.CodingKeys()
{
  return &type metadata for VideoAsset.CodingKeys;
}

unint64_t sub_23BE0E9F4()
{
  unint64_t result;

  result = qword_256AC7088;
  if (!qword_256AC7088)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D3D4, &type metadata for VideoAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7088);
  }
  return result;
}

unint64_t sub_23BE0EA3C()
{
  unint64_t result;

  result = qword_256AC7090;
  if (!qword_256AC7090)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D344, &type metadata for VideoAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7090);
  }
  return result;
}

unint64_t sub_23BE0EA84()
{
  unint64_t result;

  result = qword_256AC7098;
  if (!qword_256AC7098)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D36C, &type metadata for VideoAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7098);
  }
  return result;
}

uint64_t sub_23BE0EAC8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x52746E65746E6F63 && a2 == 0xED0000676E697461;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000023BE662A0 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E696D6165727473 && a2 == 0xEC0000004C525567)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

BOOL static BrowseArtworkOverlayTag.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_23BE0EC60()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE0EC94 + 4 * byte_23BE5D450[*v0]))(0x6574656C706D6F63, 0xE900000000000064);
}

uint64_t sub_23BE0EC94()
{
  return 0x79636E65636572;
}

uint64_t sub_23BE0ECAC()
{
  return 0x656C756465686373;
}

uint64_t sub_23BE0ECC0()
{
  return 0x6B63617473;
}

uint64_t sub_23BE0ECD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE0F390(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BE0ECF8(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_23BE0ED04()
{
  sub_23BE0F180();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE0ED2C()
{
  sub_23BE0F180();
  return sub_23BE5AF18();
}

uint64_t sub_23BE0ED54()
{
  sub_23BE0F290();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE0ED7C()
{
  sub_23BE0F290();
  return sub_23BE5AF18();
}

uint64_t sub_23BE0EDA4()
{
  sub_23BE0F24C();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE0EDCC()
{
  sub_23BE0F24C();
  return sub_23BE5AF18();
}

uint64_t sub_23BE0EDF4()
{
  sub_23BE0F208();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE0EE1C()
{
  sub_23BE0F208();
  return sub_23BE5AF18();
}

uint64_t sub_23BE0EE44()
{
  sub_23BE0F1C4();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE0EE6C()
{
  sub_23BE0F1C4();
  return sub_23BE5AF18();
}

void BrowseArtworkOverlayTag.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[10];
  uint64_t v11;

  v11 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC70A0);
  v10[7] = *(_QWORD *)(v3 - 8);
  v10[8] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v10[6] = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC70A8);
  v10[4] = *(_QWORD *)(v5 - 8);
  v10[5] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v10[3] = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC70B0);
  v10[1] = *(_QWORD *)(v7 - 8);
  v10[2] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC70B8);
  MEMORY[0x24BDAC7A8](v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC70C0);
  v10[9] = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE0F180();
  sub_23BE5AF00();
  __asm { BR              X10 }
}

uint64_t sub_23BE0F04C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 - 68) = 0;
  sub_23BE0F290();
  sub_23BE5ADF8();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 104) + 8))(v1, v0);
}

unint64_t sub_23BE0F180()
{
  unint64_t result;

  result = qword_256AC70C8;
  if (!qword_256AC70C8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D8FC, &type metadata for BrowseArtworkOverlayTag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC70C8);
  }
  return result;
}

unint64_t sub_23BE0F1C4()
{
  unint64_t result;

  result = qword_256AC70D0;
  if (!qword_256AC70D0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D8AC, &type metadata for BrowseArtworkOverlayTag.StackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC70D0);
  }
  return result;
}

unint64_t sub_23BE0F208()
{
  unint64_t result;

  result = qword_256AC70D8;
  if (!qword_256AC70D8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D85C, &type metadata for BrowseArtworkOverlayTag.ScheduledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC70D8);
  }
  return result;
}

unint64_t sub_23BE0F24C()
{
  unint64_t result;

  result = qword_256AC70E0;
  if (!qword_256AC70E0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D80C, &type metadata for BrowseArtworkOverlayTag.RecencyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC70E0);
  }
  return result;
}

unint64_t sub_23BE0F290()
{
  unint64_t result;

  result = qword_256AC70E8;
  if (!qword_256AC70E8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D7BC, &type metadata for BrowseArtworkOverlayTag.CompletedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC70E8);
  }
  return result;
}

uint64_t BrowseArtworkOverlayTag.init(from:)(_QWORD *a1)
{
  return sub_23BE0F558(a1);
}

uint64_t sub_23BE0F2E8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23BE0F558(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_23BE0F310(_QWORD *a1)
{
  unsigned __int8 *v1;

  BrowseArtworkOverlayTag.encode(to:)(a1, *v1);
}

uint64_t BrowseArtworkOverlayTag.hash(into:)()
{
  return sub_23BE5AEC4();
}

uint64_t BrowseArtworkOverlayTag.hashValue.getter()
{
  sub_23BE5AEB8();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE0F390(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6574656C706D6F63 && a2 == 0xE900000000000064;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79636E65636572 && a2 == 0xE700000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C756465686373 && a2 == 0xE900000000000064 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6B63617473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23BE0F558(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v23[12];
  _QWORD *v24;
  uint64_t v25;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7150);
  v23[10] = *(_QWORD *)(v2 - 8);
  v23[11] = v2;
  MEMORY[0x24BDAC7A8](v2);
  v23[9] = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7158);
  v23[5] = *(_QWORD *)(v4 - 8);
  v23[6] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v23[8] = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7160);
  v23[3] = *(_QWORD *)(v6 - 8);
  v23[4] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v23[7] = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7168);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7170);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v24 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_23BE0F180();
  v17 = v25;
  sub_23BE5AEF4();
  if (!v17)
  {
    v23[1] = v8;
    v23[2] = v11;
    v23[0] = v9;
    v25 = v13;
    v18 = sub_23BE5ADEC();
    if (*(_QWORD *)(v18 + 16) == 1)
      __asm { BR              X9 }
    v19 = sub_23BE5AD68();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v21 = &type metadata for BrowseArtworkOverlayTag;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v12);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return v12;
}

void sub_23BE0F87C()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 67) = 1;
  sub_23BE0F24C();
  sub_23BE5AD80();
  if (!v0)
    JUMPOUT(0x23BE0F950);
  JUMPOUT(0x23BE0F830);
}

void sub_23BE0F8C0()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 66) = 2;
  sub_23BE0F208();
  sub_23BE5AD80();
  if (!v0)
    JUMPOUT(0x23BE0F900);
  JUMPOUT(0x23BE0F830);
}

void sub_23BE0F90C()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 65) = 3;
  sub_23BE0F1C4();
  sub_23BE5AD80();
  if (!v0)
    JUMPOUT(0x23BE0F950);
  JUMPOUT(0x23BE0F830);
}

unint64_t sub_23BE0F980()
{
  unint64_t result;

  result = qword_256AC70F0;
  if (!qword_256AC70F0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseArtworkOverlayTag, &type metadata for BrowseArtworkOverlayTag);
    atomic_store(result, (unint64_t *)&qword_256AC70F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for BrowseArtworkOverlayTag()
{
  return &type metadata for BrowseArtworkOverlayTag;
}

uint64_t getEnumTagSinglePayload for BrowseSectionDescriptor.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s15FitnessBrowsing23BrowseArtworkOverlayTagOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BE0FAB8 + 4 * byte_23BE5D461[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BE0FAEC + 4 * byte_23BE5D45C[v4]))();
}

uint64_t sub_23BE0FAEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE0FAF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE0FAFCLL);
  return result;
}

uint64_t sub_23BE0FB08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE0FB10);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BE0FB14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE0FB1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseArtworkOverlayTag.CodingKeys()
{
  return &type metadata for BrowseArtworkOverlayTag.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowseArtworkOverlayTag.CompletedCodingKeys()
{
  return &type metadata for BrowseArtworkOverlayTag.CompletedCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseArtworkOverlayTag.RecencyCodingKeys()
{
  return &type metadata for BrowseArtworkOverlayTag.RecencyCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseArtworkOverlayTag.ScheduledCodingKeys()
{
  return &type metadata for BrowseArtworkOverlayTag.ScheduledCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseArtworkOverlayTag.StackCodingKeys()
{
  return &type metadata for BrowseArtworkOverlayTag.StackCodingKeys;
}

unint64_t sub_23BE0FB7C()
{
  unint64_t result;

  result = qword_256AC70F8;
  if (!qword_256AC70F8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D794, &type metadata for BrowseArtworkOverlayTag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC70F8);
  }
  return result;
}

unint64_t sub_23BE0FBC4()
{
  unint64_t result;

  result = qword_256AC7100;
  if (!qword_256AC7100)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D6B4, &type metadata for BrowseArtworkOverlayTag.CompletedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7100);
  }
  return result;
}

unint64_t sub_23BE0FC0C()
{
  unint64_t result;

  result = qword_256AC7108;
  if (!qword_256AC7108)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D6DC, &type metadata for BrowseArtworkOverlayTag.CompletedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7108);
  }
  return result;
}

unint64_t sub_23BE0FC54()
{
  unint64_t result;

  result = qword_256AC7110;
  if (!qword_256AC7110)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D664, &type metadata for BrowseArtworkOverlayTag.RecencyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7110);
  }
  return result;
}

unint64_t sub_23BE0FC9C()
{
  unint64_t result;

  result = qword_256AC7118;
  if (!qword_256AC7118)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D68C, &type metadata for BrowseArtworkOverlayTag.RecencyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7118);
  }
  return result;
}

unint64_t sub_23BE0FCE4()
{
  unint64_t result;

  result = qword_256AC7120;
  if (!qword_256AC7120)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D614, &type metadata for BrowseArtworkOverlayTag.ScheduledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7120);
  }
  return result;
}

unint64_t sub_23BE0FD2C()
{
  unint64_t result;

  result = qword_256AC7128;
  if (!qword_256AC7128)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D63C, &type metadata for BrowseArtworkOverlayTag.ScheduledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7128);
  }
  return result;
}

unint64_t sub_23BE0FD74()
{
  unint64_t result;

  result = qword_256AC7130;
  if (!qword_256AC7130)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D5C4, &type metadata for BrowseArtworkOverlayTag.StackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7130);
  }
  return result;
}

unint64_t sub_23BE0FDBC()
{
  unint64_t result;

  result = qword_256AC7138;
  if (!qword_256AC7138)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D5EC, &type metadata for BrowseArtworkOverlayTag.StackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7138);
  }
  return result;
}

unint64_t sub_23BE0FE04()
{
  unint64_t result;

  result = qword_256AC7140;
  if (!qword_256AC7140)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D704, &type metadata for BrowseArtworkOverlayTag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7140);
  }
  return result;
}

unint64_t sub_23BE0FE4C()
{
  unint64_t result;

  result = qword_256AC7148;
  if (!qword_256AC7148)
  {
    result = MEMORY[0x242612B20](&unk_23BE5D72C, &type metadata for BrowseArtworkOverlayTag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7148);
  }
  return result;
}

uint64_t BrowseDisplayStyle.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE0FED0 + 4 * byte_23BE5D950[a1]))(0x72426E6F69746361, 0xEB000000006B6369);
}

uint64_t sub_23BE0FEE4()
{
  return 0x6972427472616863;
}

uint64_t sub_23BE1019C()
{
  return 0x6972426F65646976;
}

unint64_t sub_23BE101DC()
{
  return 0xD000000000000013;
}

unint64_t sub_23BE101F4()
{
  return 0xD000000000000018;
}

unint64_t sub_23BE1020C()
{
  return 0xD000000000000019;
}

unint64_t sub_23BE10228()
{
  return 0xD000000000000016;
}

void sub_23BE10240()
{
  JUMPOUT(0x23BE10254);
}

uint64_t sub_23BE10260(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = BrowseDisplayStyle.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == BrowseDisplayStyle.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_23BE5AE58();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23BE102E8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s15FitnessBrowsing18BrowseDisplayStyleO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_23BE10314@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = BrowseDisplayStyle.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_23BE1033C()
{
  sub_23BE106D4();
  return sub_23BE5ACB4();
}

uint64_t sub_23BE10398()
{
  sub_23BE106D4();
  return sub_23BE5ACA8();
}

uint64_t sub_23BE103E4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23BE5AEB8();
  BrowseDisplayStyle.rawValue.getter(v1);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE10444()
{
  unsigned __int8 *v0;

  BrowseDisplayStyle.rawValue.getter(*v0);
  sub_23BE5AC9C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BE10484()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23BE5AEB8();
  BrowseDisplayStyle.rawValue.getter(v1);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing18BrowseDisplayStyleO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_23BE5AE64();
  swift_bridgeObjectRelease();
  if (v0 >= 0x24)
    return 36;
  else
    return v0;
}

unint64_t sub_23BE10534()
{
  unint64_t result;

  result = qword_256AC7178;
  if (!qword_256AC7178)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseDisplayStyle, &type metadata for BrowseDisplayStyle);
    atomic_store(result, (unint64_t *)&qword_256AC7178);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BrowseDisplayStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xDD)
    goto LABEL_17;
  if (a2 + 35 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 35) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 35;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 35;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 35;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x24;
  v8 = v6 - 36;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseDisplayStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 35 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 35) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDC)
    return ((uint64_t (*)(void))((char *)&loc_23BE10654 + 4 * byte_23BE5D979[v4]))();
  *a1 = a2 + 35;
  return ((uint64_t (*)(void))((char *)sub_23BE10688 + 4 * byte_23BE5D974[v4]))();
}

uint64_t sub_23BE10688(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE10690(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE10698);
  return result;
}

uint64_t sub_23BE106A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE106ACLL);
  *(_BYTE *)result = a2 + 35;
  return result;
}

uint64_t sub_23BE106B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE106B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseDisplayStyle()
{
  return &type metadata for BrowseDisplayStyle;
}

unint64_t sub_23BE106D4()
{
  unint64_t result;

  result = qword_256AC7180;
  if (!qword_256AC7180)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseDisplayStyle, &type metadata for BrowseDisplayStyle);
    atomic_store(result, (unint64_t *)&qword_256AC7180);
  }
  return result;
}

void *static BrowseFontWeight.allCases.getter()
{
  return &unk_250CDDA88;
}

uint64_t BrowseFontWeight.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE10760
                                                            + 4 * asc_23BE5DAA0[a1]))(0x67694C6172746C75, 0xEA00000000007468);
}

uint64_t sub_23BE10760()
{
  return 1852401780;
}

uint64_t sub_23BE10770()
{
  return 0x746867696CLL;
}

uint64_t sub_23BE10784()
{
  return 0x72616C75676572;
}

uint64_t sub_23BE1079C()
{
  return 0x6D756964656DLL;
}

uint64_t sub_23BE107B0()
{
  return 0x646C6F62696D6573;
}

uint64_t sub_23BE107C8()
{
  return 1684828002;
}

uint64_t sub_23BE107D8()
{
  return 0x7976616568;
}

uint64_t sub_23BE107EC()
{
  return 0x6B63616C62;
}

uint64_t sub_23BE10800(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = BrowseFontWeight.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == BrowseFontWeight.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_23BE5AE58();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23BE10888()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23BE5AEB8();
  BrowseFontWeight.rawValue.getter(v1);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE108E8()
{
  unsigned __int8 *v0;

  BrowseFontWeight.rawValue.getter(*v0);
  sub_23BE5AC9C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BE10928()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23BE5AEB8();
  BrowseFontWeight.rawValue.getter(v1);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE10984@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s15FitnessBrowsing16BrowseFontWeightO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_23BE109B0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = BrowseFontWeight.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_23BE109D8(_QWORD *a1@<X8>)
{
  *a1 = &unk_250CDDA88;
}

uint64_t sub_23BE109E8()
{
  sub_23BE10C3C();
  return sub_23BE5ACB4();
}

uint64_t sub_23BE10A44()
{
  sub_23BE10C3C();
  return sub_23BE5ACA8();
}

uint64_t _s15FitnessBrowsing16BrowseFontWeightO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_23BE5AD74();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

unint64_t sub_23BE10ADC()
{
  unint64_t result;

  result = qword_256AC7188;
  if (!qword_256AC7188)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontWeight, &type metadata for BrowseFontWeight);
    atomic_store(result, (unint64_t *)&qword_256AC7188);
  }
  return result;
}

unint64_t sub_23BE10B24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AC7190;
  if (!qword_256AC7190)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC7198);
    result = MEMORY[0x242612B20](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256AC7190);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrowseFontWeight(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23BE10BBC + 4 * byte_23BE5DAAE[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23BE10BF0 + 4 * byte_23BE5DAA9[v4]))();
}

uint64_t sub_23BE10BF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE10BF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE10C00);
  return result;
}

uint64_t sub_23BE10C0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE10C14);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23BE10C18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE10C20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseFontWeight()
{
  return &type metadata for BrowseFontWeight;
}

unint64_t sub_23BE10C3C()
{
  unint64_t result;

  result = qword_256AC71A0;
  if (!qword_256AC71A0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontWeight, &type metadata for BrowseFontWeight);
    atomic_store(result, (unint64_t *)&qword_256AC71A0);
  }
  return result;
}

double EditorialVideoLink.duration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t EditorialVideoLink.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EditorialVideoLink.streamingURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for EditorialVideoLink() + 24);
  v4 = sub_23BE5A690();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t EditorialVideoLink.init(duration:identifier:streamingURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v6;
  uint64_t v7;

  *(double *)a4 = a5;
  *(_QWORD *)(a4 + 8) = a1;
  *(_QWORD *)(a4 + 16) = a2;
  v6 = a4 + *(int *)(type metadata accessor for EditorialVideoLink() + 24);
  v7 = sub_23BE5A690();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a3, v7);
}

uint64_t sub_23BE10D54()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x696669746E656469;
  if (*v0 != 1)
    v1 = 0x6E696D6165727473;
  if (*v0)
    return v1;
  else
    return 0x6E6F697461727564;
}

uint64_t sub_23BE10DBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE11C68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE10DE0()
{
  sub_23BE115C8();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE10E08()
{
  sub_23BE115C8();
  return sub_23BE5AF18();
}

uint64_t EditorialVideoLink.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC71A8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE115C8();
  sub_23BE5AF00();
  v8[15] = 0;
  sub_23BE5AE40();
  if (!v1)
  {
    v8[14] = 1;
    sub_23BE5AE28();
    type metadata accessor for EditorialVideoLink();
    v8[13] = 2;
    sub_23BE5A690();
    sub_23BDF23E4(&qword_256AC6710, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_23BE5AE4C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t EditorialVideoLink.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v20 = a2;
  v21 = sub_23BE5A690();
  v19 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC71B8);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for EditorialVideoLink();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE115C8();
  v23 = v7;
  v11 = v24;
  sub_23BE5AEF4();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v12 = v5;
  v27 = 0;
  v13 = v22;
  sub_23BE5ADD4();
  *(_QWORD *)v10 = v14;
  v26 = 1;
  *((_QWORD *)v10 + 1) = sub_23BE5ADBC();
  *((_QWORD *)v10 + 2) = v15;
  v25 = 2;
  sub_23BDF23E4(&qword_256AC6720, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  v16 = v21;
  v17 = v23;
  sub_23BE5ADE0();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v13);
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v10[*(int *)(v8 + 24)], v4, v16);
  sub_23BE1160C((uint64_t)v10, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23BE0B7B4((uint64_t)v10);
}

uint64_t sub_23BE11210@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return EditorialVideoLink.init(from:)(a1, a2);
}

uint64_t sub_23BE11224(_QWORD *a1)
{
  return EditorialVideoLink.encode(to:)(a1);
}

uint64_t EditorialVideoLink.hash(into:)()
{
  sub_23BE5AEDC();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  type metadata accessor for EditorialVideoLink();
  sub_23BE5A690();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  return sub_23BE5AC30();
}

uint64_t EditorialVideoLink.hashValue.getter()
{
  sub_23BE5AEB8();
  sub_23BE5AEDC();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  type metadata accessor for EditorialVideoLink();
  sub_23BE5A690();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23BE5AC30();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE113AC()
{
  sub_23BE5AEDC();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  sub_23BE5A690();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  return sub_23BE5AC30();
}

uint64_t sub_23BE11458()
{
  sub_23BE5AEB8();
  sub_23BE5AEDC();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  sub_23BE5A690();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23BE5AC30();
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing18EditorialVideoLinkV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(double *)a1 == *(double *)a2)
  {
    v2 = *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
    if (v2 || (sub_23BE5AE58() & 1) != 0)
    {
      type metadata accessor for EditorialVideoLink();
      JUMPOUT(0x242612094);
    }
  }
  return 0;
}

uint64_t type metadata accessor for EditorialVideoLink()
{
  uint64_t result;

  result = qword_256AC7220;
  if (!qword_256AC7220)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BE115C8()
{
  unint64_t result;

  result = qword_256AC71B0;
  if (!qword_256AC71B0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5DDD4, &type metadata for EditorialVideoLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC71B0);
  }
  return result;
}

uint64_t sub_23BE1160C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EditorialVideoLink();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BE11650()
{
  return sub_23BDF23E4(&qword_256AC71C0, (uint64_t (*)(uint64_t))type metadata accessor for EditorialVideoLink, (uint64_t)&protocol conformance descriptor for EditorialVideoLink);
}

uint64_t *initializeBufferWithCopyOfBuffer for EditorialVideoLink(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_23BE5A690();
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for EditorialVideoLink(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_23BE5A690();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for EditorialVideoLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23BE5A690();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for EditorialVideoLink(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for EditorialVideoLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23BE5A690();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for EditorialVideoLink(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for EditorialVideoLink()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE11948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23BE5A690();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for EditorialVideoLink()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE119D0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_23BE5A690();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_23BE11A44()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BE5A690();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for EditorialVideoLink.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE11B10 + 4 * byte_23BE5DC05[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE11B44 + 4 * asc_23BE5DC00[v4]))();
}

uint64_t sub_23BE11B44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE11B4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE11B54);
  return result;
}

uint64_t sub_23BE11B60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE11B68);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE11B6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE11B74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EditorialVideoLink.CodingKeys()
{
  return &type metadata for EditorialVideoLink.CodingKeys;
}

unint64_t sub_23BE11B94()
{
  unint64_t result;

  result = qword_256AC7260;
  if (!qword_256AC7260)
  {
    result = MEMORY[0x242612B20](&unk_23BE5DDAC, &type metadata for EditorialVideoLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7260);
  }
  return result;
}

unint64_t sub_23BE11BDC()
{
  unint64_t result;

  result = qword_256AC7268;
  if (!qword_256AC7268)
  {
    result = MEMORY[0x242612B20](&unk_23BE5DD1C, &type metadata for EditorialVideoLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7268);
  }
  return result;
}

unint64_t sub_23BE11C24()
{
  unint64_t result;

  result = qword_256AC7270;
  if (!qword_256AC7270)
  {
    result = MEMORY[0x242612B20](&unk_23BE5DD44, &type metadata for EditorialVideoLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7270);
  }
  return result;
}

uint64_t sub_23BE11C68(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E696D6165727473 && a2 == 0xEC0000004C525567)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

BOOL BrowseEditorialContent.isEmpty.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) == 0;
}

uint64_t sub_23BE11DF0()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D657449797A616CLL;
  else
    return 0x49646570756F7267;
}

uint64_t sub_23BE11E38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE12658(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE11E5C()
{
  sub_23BE12270();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE11E84()
{
  sub_23BE12270();
  return sub_23BE5AF18();
}

uint64_t sub_23BE11EAC()
{
  return 12383;
}

uint64_t sub_23BE11EBC()
{
  sub_23BE122F8();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE11EE4()
{
  sub_23BE122F8();
  return sub_23BE5AF18();
}

uint64_t sub_23BE11F0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23BE5AE58();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23BE11F88()
{
  sub_23BE122B4();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE11FB0()
{
  sub_23BE122B4();
  return sub_23BE5AF18();
}

uint64_t BrowseEditorialContent.encode(to:)(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v19 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7278);
  v17 = *(_QWORD *)(v5 - 8);
  v18 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7280);
  v16 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7288);
  v20 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE12270();
  sub_23BE5AF00();
  if ((a3 & 1) != 0)
  {
    LOBYTE(v21) = 1;
    sub_23BE122B4();
    sub_23BE5ADF8();
    v21 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6428);
    sub_23BE1317C(&qword_256AC6430, &qword_256AC6438, (uint64_t)&protocol conformance descriptor for BrowseLazyItem, MEMORY[0x24BEE12A0]);
    v14 = v18;
    sub_23BE5AE4C();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v14);
  }
  else
  {
    LOBYTE(v21) = 0;
    sub_23BE122F8();
    sub_23BE5ADF8();
    v21 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC72A8);
    sub_23BE1233C(&qword_256AC72B0, (uint64_t (*)(void))sub_23BE123A4, MEMORY[0x24BEE12A0]);
    sub_23BE5AE4C();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v13, v11);
}

unint64_t sub_23BE12270()
{
  unint64_t result;

  result = qword_256AC7290;
  if (!qword_256AC7290)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E25C, &type metadata for BrowseEditorialContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7290);
  }
  return result;
}

unint64_t sub_23BE122B4()
{
  unint64_t result;

  result = qword_256AC7298;
  if (!qword_256AC7298)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E20C, &type metadata for BrowseEditorialContent.LazyItemsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7298);
  }
  return result;
}

unint64_t sub_23BE122F8()
{
  unint64_t result;

  result = qword_256AC72A0;
  if (!qword_256AC72A0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E1BC, &type metadata for BrowseEditorialContent.GroupedItemsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC72A0);
  }
  return result;
}

uint64_t sub_23BE1233C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC72A8);
    v8 = a2();
    result = MEMORY[0x242612B20](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BE123A4()
{
  unint64_t result;

  result = qword_256AC72B8;
  if (!qword_256AC72B8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseEditorialGroup, &type metadata for BrowseEditorialGroup);
    atomic_store(result, (unint64_t *)&qword_256AC72B8);
  }
  return result;
}

_QWORD *BrowseEditorialContent.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;

  result = sub_23BE1276C(a1);
  if (v1)
    return (_QWORD *)v3;
  return result;
}

_QWORD *sub_23BE12408@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  char v5;

  result = sub_23BE1276C(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t sub_23BE12438(_QWORD *a1)
{
  uint64_t v1;

  return BrowseEditorialContent.encode(to:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t BrowseEditorialContent.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if ((a3 & 1) != 0)
  {
    sub_23BE5AEC4();
    return sub_23BDF1AA4(a1, a2);
  }
  else
  {
    sub_23BE5AEC4();
    v5 = *(_QWORD *)(a2 + 16);
    result = sub_23BE5AEC4();
    if (v5)
    {
      v7 = a2 + 48;
      do
      {
        v8 = *(_QWORD *)(v7 - 16);
        v7 += 24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_23BDF1AA4(a1, v8);
        sub_23BE5AC9C();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t static BrowseEditorialContent.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) == 0)
  {
    if ((a4 & 1) == 0)
      return sub_23BDEF064(a1, a3);
    return 0;
  }
  if ((a4 & 1) == 0)
    return 0;
  return sub_23BDEFCC4(a1, a3);
}

uint64_t BrowseEditorialContent.hashValue.getter(uint64_t a1, char a2)
{
  char v3;
  _BYTE v5[72];

  v3 = a2 & 1;
  sub_23BE5AEB8();
  BrowseEditorialContent.hash(into:)((uint64_t)v5, a1, v3);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE12584()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  sub_23BE5AEB8();
  BrowseEditorialContent.hash(into:)((uint64_t)v4, v1, v2);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE125D0(uint64_t a1)
{
  uint64_t v1;

  return BrowseEditorialContent.hash(into:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t sub_23BE125DC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  sub_23BE5AEB8();
  BrowseEditorialContent.hash(into:)((uint64_t)v4, v1, v2);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE12624(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((v6 & 1) != 0)
      return sub_23BDEFCC4(v4, v5);
    return 0;
  }
  if ((v6 & 1) != 0)
    return 0;
  return sub_23BDEF064(v4, v5);
}

uint64_t sub_23BE12658(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x49646570756F7267 && a2 == 0xEC000000736D6574;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D657449797A616CLL && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *sub_23BE1276C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;

  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7310);
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v27 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7318);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7320);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v29 = a1;
  v12 = __swift_project_boxed_opaque_existential_1(a1, v11);
  sub_23BE12270();
  v13 = v30;
  sub_23BE5AEF4();
  if (v13)
    goto LABEL_6;
  v25 = v4;
  v14 = v3;
  v15 = v27;
  v16 = v28;
  v30 = v8;
  v17 = sub_23BE5ADEC();
  v18 = v7;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v19 = sub_23BE5AD68();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v21 = &type metadata for BrowseEditorialContent;
    v22 = v18;
    v12 = v10;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v22);
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    return v12;
  }
  if ((*(_BYTE *)(v17 + 32) & 1) != 0)
  {
    LOBYTE(v31) = 1;
    sub_23BE122B4();
    sub_23BE5AD80();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6428);
    sub_23BE1317C(&qword_256AC6448, &qword_256AC6450, (uint64_t)&protocol conformance descriptor for BrowseLazyItem, MEMORY[0x24BEE12D0]);
    sub_23BE5ADE0();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v16);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v7);
  }
  else
  {
    LOBYTE(v31) = 0;
    sub_23BE122F8();
    sub_23BE5AD80();
    v28 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC72A8);
    sub_23BE1233C(&qword_256AC7328, (uint64_t (*)(void))sub_23BE13238, MEMORY[0x24BEE12D0]);
    sub_23BE5ADE0();
    v24 = v30;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v14);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v28);
  }
  v12 = v31;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return v12;
}

unint64_t sub_23BE12BBC()
{
  unint64_t result;

  result = qword_256AC72C0;
  if (!qword_256AC72C0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseEditorialContent, &type metadata for BrowseEditorialContent);
    atomic_store(result, (unint64_t *)&qword_256AC72C0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for BrowseEditorialContent(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for BrowseEditorialContent()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for BrowseEditorialContent(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for BrowseEditorialContent(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseEditorialContent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseEditorialContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_23BE12D54(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_23BE12D5C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseEditorialContent()
{
  return &type metadata for BrowseEditorialContent;
}

uint64_t storeEnumTagSinglePayload for BrowseEditorialContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BE12DC4 + 4 * byte_23BE5DE65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BE12DF8 + 4 * asc_23BE5DE60[v4]))();
}

uint64_t sub_23BE12DF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE12E00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE12E08);
  return result;
}

uint64_t sub_23BE12E14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE12E1CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BE12E20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE12E28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseEditorialContent.CodingKeys()
{
  return &type metadata for BrowseEditorialContent.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowseEditorialContent.GroupedItemsCodingKeys()
{
  return &type metadata for BrowseEditorialContent.GroupedItemsCodingKeys;
}

uint64_t _s15FitnessBrowsing22BrowseEditorialContentO22GroupedItemsCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BE12E98 + 4 * byte_23BE5DE6A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BE12EB8 + 4 * byte_23BE5DE6F[v4]))();
}

_BYTE *sub_23BE12E98(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BE12EB8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE12EC0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE12EC8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE12ED0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE12ED8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BrowseEditorialContent.LazyItemsCodingKeys()
{
  return &type metadata for BrowseEditorialContent.LazyItemsCodingKeys;
}

unint64_t sub_23BE12EF8()
{
  unint64_t result;

  result = qword_256AC72C8;
  if (!qword_256AC72C8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E024, &type metadata for BrowseEditorialContent.LazyItemsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC72C8);
  }
  return result;
}

unint64_t sub_23BE12F40()
{
  unint64_t result;

  result = qword_256AC72D0;
  if (!qword_256AC72D0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E0DC, &type metadata for BrowseEditorialContent.GroupedItemsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC72D0);
  }
  return result;
}

unint64_t sub_23BE12F88()
{
  unint64_t result;

  result = qword_256AC72D8;
  if (!qword_256AC72D8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E194, &type metadata for BrowseEditorialContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC72D8);
  }
  return result;
}

unint64_t sub_23BE12FD0()
{
  unint64_t result;

  result = qword_256AC72E0;
  if (!qword_256AC72E0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E04C, &type metadata for BrowseEditorialContent.GroupedItemsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC72E0);
  }
  return result;
}

unint64_t sub_23BE13018()
{
  unint64_t result;

  result = qword_256AC72E8;
  if (!qword_256AC72E8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E074, &type metadata for BrowseEditorialContent.GroupedItemsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC72E8);
  }
  return result;
}

unint64_t sub_23BE13060()
{
  unint64_t result;

  result = qword_256AC72F0;
  if (!qword_256AC72F0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5DF94, &type metadata for BrowseEditorialContent.LazyItemsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC72F0);
  }
  return result;
}

unint64_t sub_23BE130A8()
{
  unint64_t result;

  result = qword_256AC72F8;
  if (!qword_256AC72F8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5DFBC, &type metadata for BrowseEditorialContent.LazyItemsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC72F8);
  }
  return result;
}

unint64_t sub_23BE130F0()
{
  unint64_t result;

  result = qword_256AC7300;
  if (!qword_256AC7300)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E104, &type metadata for BrowseEditorialContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7300);
  }
  return result;
}

unint64_t sub_23BE13138()
{
  unint64_t result;

  result = qword_256AC7308;
  if (!qword_256AC7308)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E12C, &type metadata for BrowseEditorialContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7308);
  }
  return result;
}

uint64_t sub_23BE1317C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC6428);
    v10 = sub_23BE131F8(a2, a3);
    result = MEMORY[0x242612B20](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BE131F8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for BrowseLazyItem();
    result = MEMORY[0x242612B20](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BE13238()
{
  unint64_t result;

  result = qword_256AC7330;
  if (!qword_256AC7330)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseEditorialGroup, &type metadata for BrowseEditorialGroup);
    atomic_store(result, (unint64_t *)&qword_256AC7330);
  }
  return result;
}

uint64_t BrowseDetailArtworkItem.artworkDescriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BE1328C(v1, a1);
}

uint64_t sub_23BE1328C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t BrowseDetailArtworkItem.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for BrowseDetailArtworkItem()
{
  uint64_t result;

  result = qword_256AC73B0;
  if (!qword_256AC73B0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BrowseDetailArtworkItem.init(artworkDescriptor:identifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v8;

  sub_23BE13394(a1, a4);
  result = type metadata accessor for BrowseDetailArtworkItem();
  v8 = (_QWORD *)(a4 + *(int *)(result + 20));
  *v8 = a2;
  v8[1] = a3;
  return result;
}

uint64_t sub_23BE13394(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BE133DC()
{
  _BYTE *v0;

  if (*v0)
    return 0x696669746E656469;
  else
    return 0xD000000000000011;
}

uint64_t sub_23BE13420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE14448(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE13444()
{
  sub_23BE135E4();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE1346C()
{
  sub_23BE135E4();
  return sub_23BE5AF18();
}

uint64_t BrowseDetailArtworkItem.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7338);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE135E4();
  sub_23BE5AF00();
  v8[15] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  sub_23BE02A6C(&qword_256AC6B18, MEMORY[0x24BE35058]);
  sub_23BE5AE4C();
  if (!v1)
  {
    type metadata accessor for BrowseDetailArtworkItem();
    v8[14] = 1;
    sub_23BE5AE28();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BE135E4()
{
  unint64_t result;

  result = qword_256AC7340;
  if (!qword_256AC7340)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E484, &type metadata for BrowseDetailArtworkItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7340);
  }
  return result;
}

uint64_t BrowseDetailArtworkItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  char v25;

  v20 = a2;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  MEMORY[0x24BDAC7A8](v21);
  v22 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7348);
  v5 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BrowseDetailArtworkItem();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE135E4();
  sub_23BE5AEF4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v11 = v5;
  v12 = (uint64_t)v10;
  v25 = 0;
  sub_23BE02A6C(&qword_256AC6B90, MEMORY[0x24BE35060]);
  v13 = (uint64_t)v22;
  v14 = v23;
  sub_23BE5ADE0();
  sub_23BE13394(v13, v12);
  v24 = 1;
  v15 = sub_23BE5ADBC();
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v14);
  v18 = (uint64_t *)(v12 + *(int *)(v8 + 20));
  *v18 = v15;
  v18[1] = v17;
  sub_23BE138B0(v12, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23BE138F4(v12);
}

uint64_t sub_23BE13870(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BE138B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseDetailArtworkItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BE138F4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BrowseDetailArtworkItem();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BE13930@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseDetailArtworkItem.init(from:)(a1, a2);
}

uint64_t sub_23BE13944(_QWORD *a1)
{
  return BrowseDetailArtworkItem.encode(to:)(a1);
}

uint64_t BrowseDetailArtworkItem.hash(into:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  sub_23BE5A738();
  type metadata accessor for BrowseDetailArtworkItem();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  return swift_bridgeObjectRelease();
}

uint64_t static BrowseDetailArtworkItem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  type metadata accessor for BrowseArtwork();
  sub_23BDF23E4(&qword_256AC6C78, (uint64_t (*)(uint64_t))type metadata accessor for BrowseArtwork, (uint64_t)&protocol conformance descriptor for BrowseArtwork);
  if ((sub_23BE5A72C() & 1) == 0)
    return 0;
  v4 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
  v5 = *(_QWORD *)(a1 + v4);
  v6 = *(_QWORD *)(a1 + v4 + 8);
  v7 = (_QWORD *)(a2 + v4);
  if (v5 == *v7 && v6 == v7[1])
    return 1;
  else
    return sub_23BE5AE58();
}

uint64_t BrowseDetailArtworkItem.hashValue.getter()
{
  sub_23BE5AEB8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  sub_23BE5A738();
  type metadata accessor for BrowseDetailArtworkItem();
  sub_23BE5AC9C();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE13ADC()
{
  sub_23BE5AEB8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  sub_23BE5A738();
  sub_23BE5AC9C();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE13B40()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  sub_23BE5A738();
  return sub_23BE5AC9C();
}

uint64_t sub_23BE13B90()
{
  sub_23BE5AEB8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  sub_23BE5A738();
  sub_23BE5AC9C();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE13BF0()
{
  return sub_23BDF23E4(&qword_256AC7350, (uint64_t (*)(uint64_t))type metadata accessor for BrowseDetailArtworkItem, (uint64_t)&protocol conformance descriptor for BrowseDetailArtworkItem);
}

uint64_t sub_23BE13C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  type metadata accessor for BrowseArtwork();
  sub_23BDF23E4(&qword_256AC6C78, (uint64_t (*)(uint64_t))type metadata accessor for BrowseArtwork, (uint64_t)&protocol conformance descriptor for BrowseArtwork);
  if ((sub_23BE5A72C() & 1) == 0)
    return 0;
  v6 = *(int *)(a3 + 20);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  if (v7 == *v9 && v8 == v9[1])
    return 1;
  else
    return sub_23BE5AE58();
}

uint64_t *initializeBufferWithCopyOfBuffer for BrowseDetailArtworkItem(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
    if (swift_getEnumCaseMultiPayload() == 1)
      v7 = (uint64_t *)&unk_256AC6BF8;
    else
      v7 = (uint64_t *)&unk_256AC6BF0;
    v8 = __swift_instantiateConcreteTypeFromMangledName(v7);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for BrowseDetailArtworkItem(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  if (swift_getEnumCaseMultiPayload() == 1)
    v2 = (uint64_t *)&unk_256AC6BF8;
  else
    v2 = (uint64_t *)&unk_256AC6BF0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BrowseDetailArtworkItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  if (swift_getEnumCaseMultiPayload() == 1)
    v6 = (uint64_t *)&unk_256AC6BF8;
  else
    v6 = (uint64_t *)&unk_256AC6BF0;
  v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  swift_storeEnumTagMultiPayload();
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BrowseDetailArtworkItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  if (a1 != a2)
  {
    sub_23BE13870(a1);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
    if (swift_getEnumCaseMultiPayload() == 1)
      v6 = (uint64_t *)&unk_256AC6BF8;
    else
      v6 = (uint64_t *)&unk_256AC6BF0;
    v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for BrowseDetailArtworkItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  if (swift_getEnumCaseMultiPayload() == 1)
    v6 = (uint64_t *)&unk_256AC6BF8;
  else
    v6 = (uint64_t *)&unk_256AC6BF0;
  v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  swift_storeEnumTagMultiPayload();
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for BrowseDetailArtworkItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_23BE13870(a1);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
    if (swift_getEnumCaseMultiPayload() == 1)
      v6 = (uint64_t *)&unk_256AC6BF8;
    else
      v6 = (uint64_t *)&unk_256AC6BF0;
    v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseDetailArtworkItem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE14124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseDetailArtworkItem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE141B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void sub_23BE14234()
{
  unint64_t v0;

  sub_23BE0767C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for BrowseDetailArtworkItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BE142F0 + 4 * byte_23BE5E2B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BE14324 + 4 * byte_23BE5E2B0[v4]))();
}

uint64_t sub_23BE14324(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE1432C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE14334);
  return result;
}

uint64_t sub_23BE14340(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE14348);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BE1434C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE14354(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseDetailArtworkItem.CodingKeys()
{
  return &type metadata for BrowseDetailArtworkItem.CodingKeys;
}

unint64_t sub_23BE14374()
{
  unint64_t result;

  result = qword_256AC73E8;
  if (!qword_256AC73E8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E45C, &type metadata for BrowseDetailArtworkItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC73E8);
  }
  return result;
}

unint64_t sub_23BE143BC()
{
  unint64_t result;

  result = qword_256AC73F0;
  if (!qword_256AC73F0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E3CC, &type metadata for BrowseDetailArtworkItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC73F0);
  }
  return result;
}

unint64_t sub_23BE14404()
{
  unint64_t result;

  result = qword_256AC73F8;
  if (!qword_256AC73F8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E3F4, &type metadata for BrowseDetailArtworkItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC73F8);
  }
  return result;
}

uint64_t sub_23BE14448(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x800000023BE66180 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BE14540()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F436C6961746564;
  else
    return 0x5379616C70736964;
}

uint64_t sub_23BE14590@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE16BAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE145B4()
{
  sub_23BE149E4();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE145DC()
{
  sub_23BE149E4();
  return sub_23BE5AF18();
}

uint64_t sub_23BE14604()
{
  sub_23BE14A6C();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE1462C()
{
  sub_23BE14A6C();
  return sub_23BE5AF18();
}

uint64_t sub_23BE14654()
{
  sub_23BE14AB0();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE1467C()
{
  sub_23BE14AB0();
  return sub_23BE5AF18();
}

uint64_t BrowseInsetBehaviorProviderType.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7400);
  v25 = *(_QWORD *)(v2 - 8);
  v26 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v24 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for BrowseDetailContent();
  MEMORY[0x24BDAC7A8](v23);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7408);
  v21 = *(_QWORD *)(v6 - 8);
  v22 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BrowseInsetBehaviorProviderType();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7410);
  v27 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE149E4();
  sub_23BE5AF00();
  sub_23BE14A28(v28, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23BDF2424((uint64_t)v11, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
    v31 = 1;
    sub_23BE14A6C();
    v15 = v24;
    sub_23BE5ADF8();
    sub_23BDF23E4(&qword_256AC7428, (uint64_t (*)(uint64_t))type metadata accessor for BrowseDetailContent, (uint64_t)&protocol conformance descriptor for BrowseDetailContent);
    v16 = v26;
    sub_23BE5AE4C();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v16);
    sub_23BDF2468((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
  }
  else
  {
    v17 = *v11;
    v30 = 0;
    sub_23BE14AB0();
    sub_23BE5ADF8();
    v29 = v17;
    sub_23BE01D74();
    v18 = v22;
    sub_23BE5AE4C();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v14, v12);
}

uint64_t type metadata accessor for BrowseInsetBehaviorProviderType()
{
  uint64_t result;

  result = qword_256AC74D0;
  if (!qword_256AC74D0)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BE149E4()
{
  unint64_t result;

  result = qword_256AC7418;
  if (!qword_256AC7418)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E900, &type metadata for BrowseInsetBehaviorProviderType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7418);
  }
  return result;
}

uint64_t sub_23BE14A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseInsetBehaviorProviderType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BE14A6C()
{
  unint64_t result;

  result = qword_256AC7420;
  if (!qword_256AC7420)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E8B0, &type metadata for BrowseInsetBehaviorProviderType.DetailContentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7420);
  }
  return result;
}

unint64_t sub_23BE14AB0()
{
  unint64_t result;

  result = qword_256AC7430;
  if (!qword_256AC7430)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E860, &type metadata for BrowseInsetBehaviorProviderType.DisplayStyleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7430);
  }
  return result;
}

uint64_t BrowseInsetBehaviorProviderType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;

  v40 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7438);
  v4 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  v44 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v47 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7440);
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v46 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7448);
  v45 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BrowseInsetBehaviorProviderType();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v36 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v36 - v18;
  v20 = a1[3];
  v48 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  sub_23BE149E4();
  v21 = v49;
  sub_23BE5AEF4();
  if (v21)
    goto LABEL_10;
  v37 = v17;
  v38 = v19;
  v39 = v14;
  v22 = v46;
  v23 = v47;
  v49 = v11;
  v24 = sub_23BE5ADEC();
  if (*(_QWORD *)(v24 + 16) != 1)
  {
    v29 = sub_23BE5AD68();
    swift_allocError();
    v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v31 = v49;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, *MEMORY[0x24BEE26D0], v29);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v8);
LABEL_10:
    v27 = (uint64_t)v48;
    return __swift_destroy_boxed_opaque_existential_1(v27);
  }
  if ((*(_BYTE *)(v24 + 32) & 1) != 0)
  {
    v52 = 1;
    sub_23BE14A6C();
    sub_23BE5AD80();
    type metadata accessor for BrowseDetailContent();
    sub_23BDF23E4(&qword_256AC7450, (uint64_t (*)(uint64_t))type metadata accessor for BrowseDetailContent, (uint64_t)&protocol conformance descriptor for BrowseDetailContent);
    v25 = (uint64_t)v39;
    v26 = v43;
    sub_23BE5ADE0();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v23, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v8);
    v27 = (uint64_t)v48;
    swift_storeEnumTagMultiPayload();
    v28 = v25;
  }
  else
  {
    v51 = 0;
    sub_23BE14AB0();
    sub_23BE5AD80();
    sub_23BE02BA0();
    v33 = v42;
    sub_23BE5ADE0();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v22, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v8);
    v27 = (uint64_t)v48;
    v34 = v37;
    *v37 = v50;
    swift_storeEnumTagMultiPayload();
    v28 = (uint64_t)v34;
  }
  v35 = (uint64_t)v38;
  sub_23BDF2424(v28, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for BrowseInsetBehaviorProviderType);
  sub_23BDF2424(v35, v40, (uint64_t (*)(_QWORD))type metadata accessor for BrowseInsetBehaviorProviderType);
  return __swift_destroy_boxed_opaque_existential_1(v27);
}

uint64_t sub_23BE14F94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseInsetBehaviorProviderType.init(from:)(a1, a2);
}

uint64_t sub_23BE14FA8(_QWORD *a1)
{
  return BrowseInsetBehaviorProviderType.encode(to:)(a1);
}

uint64_t BrowseInsetBehaviorProviderType.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 v8;
  uint64_t v9;

  v1 = type metadata accessor for BrowseDetailContent();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for BrowseInsetBehaviorProviderType();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (unsigned __int8 *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE14A28(v0, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23BDF2424((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
    sub_23BE5AEC4();
    BrowseDetailContent.hash(into:)();
    return sub_23BDF2468((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
  }
  else
  {
    v8 = *v6;
    sub_23BE5AEC4();
    BrowseDisplayStyle.rawValue.getter(v8);
    sub_23BE5AC9C();
    return swift_bridgeObjectRelease();
  }
}

uint64_t BrowseInsetBehaviorProviderType.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for BrowseDetailContent();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BrowseInsetBehaviorProviderType();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (unsigned __int8 *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE5AEB8();
  sub_23BE14A28(v1, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23BDF2424((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
    sub_23BE5AEC4();
    BrowseDetailContent.hash(into:)();
    sub_23BDF2468((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
  }
  else
  {
    v8 = *v7;
    sub_23BE5AEC4();
    BrowseDisplayStyle.rawValue.getter(v8);
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
  }
  return sub_23BE5AEE8();
}

uint64_t sub_23BE1523C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for BrowseDetailContent();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (unsigned __int8 *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE5AEB8();
  sub_23BE14A28(v1, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23BDF2424((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
    sub_23BE5AEC4();
    BrowseDetailContent.hash(into:)();
    sub_23BDF2468((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
  }
  else
  {
    v8 = *v7;
    sub_23BE5AEC4();
    BrowseDisplayStyle.rawValue.getter(v8);
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
  }
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing31BrowseInsetBehaviorProviderTypeO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int8 *v17;
  char v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v27;

  v4 = type metadata accessor for BrowseDetailContent();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BrowseInsetBehaviorProviderType();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (unsigned __int8 *)&v27 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7550);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (unsigned __int8 *)&v16[*(int *)(v14 + 48)];
  sub_23BE14A28(a1, (uint64_t)v16);
  sub_23BE14A28(a2, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_23BE14A28((uint64_t)v16, (uint64_t)v12);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v19 = *v17;
      v20 = BrowseDisplayStyle.rawValue.getter(*v12);
      v22 = v21;
      if (v20 == BrowseDisplayStyle.rawValue.getter(v19) && v22 == v23)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v25 = sub_23BE5AE58();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v25 & 1) == 0)
        {
          sub_23BDF2468((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for BrowseInsetBehaviorProviderType);
LABEL_13:
          v18 = 0;
          return v18 & 1;
        }
      }
      sub_23BDF2468((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for BrowseInsetBehaviorProviderType);
      v18 = 1;
      return v18 & 1;
    }
LABEL_12:
    sub_23BE16CD8((uint64_t)v16);
    goto LABEL_13;
  }
  sub_23BE14A28((uint64_t)v16, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_23BDF2468((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
    goto LABEL_12;
  }
  sub_23BDF2424((uint64_t)v17, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
  v18 = static BrowseDetailContent.== infix(_:_:)(v10, v6);
  sub_23BDF2468((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
  sub_23BDF2468((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
  sub_23BDF2468((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for BrowseInsetBehaviorProviderType);
  return v18 & 1;
}

uint64_t sub_23BE15600()
{
  return sub_23BDF23E4(&qword_256AC7458, (uint64_t (*)(uint64_t))type metadata accessor for BrowseInsetBehaviorProviderType, (uint64_t)&protocol conformance descriptor for BrowseInsetBehaviorProviderType);
}

uint64_t *initializeBufferWithCopyOfBuffer for BrowseInsetBehaviorProviderType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for BrowseDetailContent();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v13 = sub_23BE5A678();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v14 = type metadata accessor for BrowseDetailVideoLinkItem();
      v15 = *(int *)(v14 + 20);
      v16 = (uint64_t *)((char *)a1 + v15);
      v17 = (uint64_t *)((char *)a2 + v15);
      v18 = v17[1];
      *v16 = *v17;
      v16[1] = v18;
      v19 = *(int *)(v14 + 24);
      v20 = (uint64_t *)((char *)a1 + v19);
      v21 = (uint64_t *)((char *)a2 + v19);
      v22 = *(uint64_t *)((char *)a2 + v19);
      v23 = v21[1];
      *v20 = v22;
      v20[1] = v23;
      v24 = v21[3];
      v20[2] = v21[2];
      v20[3] = v24;
      v25 = *(int *)(type metadata accessor for VideoAsset() + 24);
      v26 = (char *)v20 + v25;
      v27 = (char *)v21 + v25;
      v28 = sub_23BE5A690();
      v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29(v26, v27, v28);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v8 = sub_23BE5A678();
        v9 = *(_QWORD *)(v8 - 8);
        v10 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48);
        if (v10(a2, 1, v8))
        {
          v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
        }
        v33 = type metadata accessor for BrowseDetailTextItem();
        v34 = *(int *)(v33 + 20);
        v35 = (char *)a1 + v34;
        v36 = (char *)a2 + v34;
        if (v10((uint64_t *)((char *)a2 + v34), 1, v8))
        {
          v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v35, v36, v8);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v35, 0, 1, v8);
        }
        v32 = *(int *)(v33 + 24);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
        if (swift_getEnumCaseMultiPayload() == 1)
          v30 = (uint64_t *)&unk_256AC6BF8;
        else
          v30 = (uint64_t *)&unk_256AC6BF0;
        v31 = __swift_instantiateConcreteTypeFromMangledName(v30);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(a1, a2, v31);
        swift_storeEnumTagMultiPayload();
        v32 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
      }
      v38 = (uint64_t *)((char *)a1 + v32);
      v39 = (uint64_t *)((char *)a2 + v32);
      v40 = v39[1];
      *v38 = *v39;
      v38[1] = v40;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for BrowseInsetBehaviorProviderType(uint64_t a1)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    type metadata accessor for BrowseDetailContent();
    result = swift_getEnumCaseMultiPayload();
    switch((_DWORD)result)
    {
      case 2:
        v5 = sub_23BE5A678();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
        v6 = type metadata accessor for BrowseDetailVideoLinkItem();
        swift_bridgeObjectRelease();
        v7 = a1 + *(int *)(v6 + 24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v8 = v7 + *(int *)(type metadata accessor for VideoAsset() + 24);
        v9 = sub_23BE5A690();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
      case 1:
        v10 = sub_23BE5A678();
        v11 = *(_QWORD *)(v10 - 8);
        v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
        if (!v12(a1, 1, v10))
          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
        v13 = a1 + *(int *)(type metadata accessor for BrowseDetailTextItem() + 20);
        if (!v12(v13, 1, v10))
          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
        return swift_bridgeObjectRelease();
      case 0:
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
        if (swift_getEnumCaseMultiPayload() == 1)
          v3 = (uint64_t *)&unk_256AC6BF8;
        else
          v3 = (uint64_t *)&unk_256AC6BF0;
        v4 = __swift_instantiateConcreteTypeFromMangledName(v3);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
        type metadata accessor for BrowseDetailArtworkItem();
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

char *initializeWithCopy for BrowseInsetBehaviorProviderType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for BrowseDetailContent();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = sub_23BE5A678();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = type metadata accessor for BrowseDetailVideoLinkItem();
      v13 = *(int *)(v12 + 20);
      v14 = &a1[v13];
      v15 = &a2[v13];
      v16 = *((_QWORD *)v15 + 1);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *((_QWORD *)v14 + 1) = v16;
      v17 = *(int *)(v12 + 24);
      v18 = &a1[v17];
      v19 = &a2[v17];
      v20 = *(_QWORD *)&a2[v17];
      v21 = *((_QWORD *)v19 + 1);
      *(_QWORD *)v18 = v20;
      *((_QWORD *)v18 + 1) = v21;
      v22 = *((_QWORD *)v19 + 3);
      *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
      *((_QWORD *)v18 + 3) = v22;
      v23 = *(int *)(type metadata accessor for VideoAsset() + 24);
      v24 = &v18[v23];
      v25 = &v19[v23];
      v26 = sub_23BE5A690();
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27(v24, v25, v26);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v7 = sub_23BE5A678();
        v8 = *(_QWORD *)(v7 - 8);
        v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
        if (v9(a2, 1, v7))
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
        }
        v31 = type metadata accessor for BrowseDetailTextItem();
        v32 = *(int *)(v31 + 20);
        v33 = &a1[v32];
        v34 = &a2[v32];
        if (v9(&a2[v32], 1, v7))
        {
          v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v33, v34, v7);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v33, 0, 1, v7);
        }
        v30 = *(int *)(v31 + 24);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
        if (swift_getEnumCaseMultiPayload() == 1)
          v28 = (uint64_t *)&unk_256AC6BF8;
        else
          v28 = (uint64_t *)&unk_256AC6BF0;
        v29 = __swift_instantiateConcreteTypeFromMangledName(v28);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(a1, a2, v29);
        swift_storeEnumTagMultiPayload();
        v30 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
      }
      v36 = &a1[v30];
      v37 = &a2[v30];
      v38 = *((_QWORD *)v37 + 1);
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *((_QWORD *)v36 + 1) = v38;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithCopy for BrowseInsetBehaviorProviderType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;

  if (a1 != a2)
  {
    sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseInsetBehaviorProviderType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for BrowseDetailContent();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        v11 = sub_23BE5A678();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v12 = type metadata accessor for BrowseDetailVideoLinkItem();
        v13 = *(int *)(v12 + 20);
        v14 = &a1[v13];
        v15 = &a2[v13];
        *(_QWORD *)v14 = *(_QWORD *)v15;
        *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
        v16 = *(int *)(v12 + 24);
        v17 = &a1[v16];
        v18 = &a2[v16];
        *(_QWORD *)v17 = *(_QWORD *)&a2[v16];
        *((_QWORD *)v17 + 1) = *(_QWORD *)&a2[v16 + 8];
        *((_QWORD *)v17 + 2) = *(_QWORD *)&a2[v16 + 16];
        *((_QWORD *)v17 + 3) = *(_QWORD *)&a2[v16 + 24];
        v19 = *(int *)(type metadata accessor for VideoAsset() + 24);
        v20 = &v17[v19];
        v21 = &v18[v19];
        v22 = sub_23BE5A690();
        v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v23(v20, v21, v22);
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          v7 = sub_23BE5A678();
          v8 = *(_QWORD *)(v7 - 8);
          v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
          if (v9(a2, 1, v7))
          {
            v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
          }
          v27 = type metadata accessor for BrowseDetailTextItem();
          v28 = *(int *)(v27 + 20);
          v29 = &a1[v28];
          v30 = &a2[v28];
          if (v9(&a2[v28], 1, v7))
          {
            v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
            memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v29, v30, v7);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v7);
          }
          v26 = *(int *)(v27 + 24);
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
          if (swift_getEnumCaseMultiPayload() == 1)
            v24 = (uint64_t *)&unk_256AC6BF8;
          else
            v24 = (uint64_t *)&unk_256AC6BF0;
          v25 = __swift_instantiateConcreteTypeFromMangledName(v24);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(a1, a2, v25);
          swift_storeEnumTagMultiPayload();
          v26 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
        }
        v32 = &a1[v26];
        v33 = &a2[v26];
        *(_QWORD *)v32 = *(_QWORD *)v33;
        *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

char *initializeWithTake for BrowseInsetBehaviorProviderType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unsigned int (*v29)(char *, uint64_t, uint64_t);

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for BrowseDetailContent();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v10 = sub_23BE5A678();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v11 = type metadata accessor for BrowseDetailVideoLinkItem();
      *(_OWORD *)&a1[*(int *)(v11 + 20)] = *(_OWORD *)&a2[*(int *)(v11 + 20)];
      v12 = *(int *)(v11 + 24);
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = *(_OWORD *)&a2[v12 + 16];
      *(_OWORD *)v13 = *(_OWORD *)&a2[v12];
      *((_OWORD *)v13 + 1) = v15;
      v16 = *(int *)(type metadata accessor for VideoAsset() + 24);
      v17 = &v13[v16];
      v18 = &v14[v16];
      v19 = sub_23BE5A690();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v7 = sub_23BE5A678();
        v8 = *(_QWORD *)(v7 - 8);
        v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
        if (v29(a2, 1, v7))
        {
          v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
        }
        v23 = type metadata accessor for BrowseDetailTextItem();
        v24 = *(int *)(v23 + 20);
        v25 = &a1[v24];
        v26 = &a2[v24];
        if (v29(&a2[v24], 1, v7))
        {
          v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v25, v26, v7);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
        }
        v22 = *(int *)(v23 + 24);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
        if (swift_getEnumCaseMultiPayload() == 1)
          v20 = (uint64_t *)&unk_256AC6BF8;
        else
          v20 = (uint64_t *)&unk_256AC6BF0;
        v21 = __swift_instantiateConcreteTypeFromMangledName(v20);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a1, a2, v21);
        swift_storeEnumTagMultiPayload();
        v22 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
      }
      *(_OWORD *)&a1[v22] = *(_OWORD *)&a2[v22];
    }
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for BrowseInsetBehaviorProviderType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unsigned int (*v29)(char *, uint64_t, uint64_t);

  if (a1 != a2)
  {
    sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseInsetBehaviorProviderType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for BrowseDetailContent();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        v10 = sub_23BE5A678();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v11 = type metadata accessor for BrowseDetailVideoLinkItem();
        *(_OWORD *)&a1[*(int *)(v11 + 20)] = *(_OWORD *)&a2[*(int *)(v11 + 20)];
        v12 = *(int *)(v11 + 24);
        v13 = &a1[v12];
        v14 = &a2[v12];
        v15 = *(_OWORD *)&a2[v12 + 16];
        *(_OWORD *)v13 = *(_OWORD *)&a2[v12];
        *((_OWORD *)v13 + 1) = v15;
        v16 = *(int *)(type metadata accessor for VideoAsset() + 24);
        v17 = &v13[v16];
        v18 = &v14[v16];
        v19 = sub_23BE5A690();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          v7 = sub_23BE5A678();
          v8 = *(_QWORD *)(v7 - 8);
          v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
          if (v29(a2, 1, v7))
          {
            v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
          }
          v23 = type metadata accessor for BrowseDetailTextItem();
          v24 = *(int *)(v23 + 20);
          v25 = &a1[v24];
          v26 = &a2[v24];
          if (v29(&a2[v24], 1, v7))
          {
            v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
            memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v25, v26, v7);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
          }
          v22 = *(int *)(v23 + 24);
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
          if (swift_getEnumCaseMultiPayload() == 1)
            v20 = (uint64_t *)&unk_256AC6BF8;
          else
            v20 = (uint64_t *)&unk_256AC6BF0;
          v21 = __swift_instantiateConcreteTypeFromMangledName(v20);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a1, a2, v21);
          swift_storeEnumTagMultiPayload();
          v22 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
        }
        *(_OWORD *)&a1[v22] = *(_OWORD *)&a2[v22];
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseLazyItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for BrowseLazyItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_23BE16728()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23BE16738()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BrowseDetailContent();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrowseInsetBehaviorProviderType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BE167F4 + 4 * byte_23BE5E4E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BE16828 + 4 * byte_23BE5E4E0[v4]))();
}

uint64_t sub_23BE16828(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE16830(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE16838);
  return result;
}

uint64_t sub_23BE16844(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE1684CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BE16850(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE16858(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseInsetBehaviorProviderType.CodingKeys()
{
  return &type metadata for BrowseInsetBehaviorProviderType.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowseInsetBehaviorProviderType.DisplayStyleCodingKeys()
{
  return &type metadata for BrowseInsetBehaviorProviderType.DisplayStyleCodingKeys;
}

uint64_t _s15FitnessBrowsing31BrowseInsetBehaviorProviderTypeO22DisplayStyleCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BE168C8 + 4 * byte_23BE5E4EA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BE168E8 + 4 * byte_23BE5E4EF[v4]))();
}

_BYTE *sub_23BE168C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BE168E8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE168F0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE168F8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE16900(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE16908(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BrowseInsetBehaviorProviderType.DetailContentCodingKeys()
{
  return &type metadata for BrowseInsetBehaviorProviderType.DetailContentCodingKeys;
}

unint64_t sub_23BE16928()
{
  unint64_t result;

  result = qword_256AC7508;
  if (!qword_256AC7508)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E6C8, &type metadata for BrowseInsetBehaviorProviderType.DetailContentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7508);
  }
  return result;
}

unint64_t sub_23BE16970()
{
  unint64_t result;

  result = qword_256AC7510;
  if (!qword_256AC7510)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E780, &type metadata for BrowseInsetBehaviorProviderType.DisplayStyleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7510);
  }
  return result;
}

unint64_t sub_23BE169B8()
{
  unint64_t result;

  result = qword_256AC7518;
  if (!qword_256AC7518)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E838, &type metadata for BrowseInsetBehaviorProviderType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7518);
  }
  return result;
}

unint64_t sub_23BE16A00()
{
  unint64_t result;

  result = qword_256AC7520;
  if (!qword_256AC7520)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E6F0, &type metadata for BrowseInsetBehaviorProviderType.DisplayStyleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7520);
  }
  return result;
}

unint64_t sub_23BE16A48()
{
  unint64_t result;

  result = qword_256AC7528;
  if (!qword_256AC7528)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E718, &type metadata for BrowseInsetBehaviorProviderType.DisplayStyleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7528);
  }
  return result;
}

unint64_t sub_23BE16A90()
{
  unint64_t result;

  result = qword_256AC7530;
  if (!qword_256AC7530)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E638, &type metadata for BrowseInsetBehaviorProviderType.DetailContentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7530);
  }
  return result;
}

unint64_t sub_23BE16AD8()
{
  unint64_t result;

  result = qword_256AC7538;
  if (!qword_256AC7538)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E660, &type metadata for BrowseInsetBehaviorProviderType.DetailContentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7538);
  }
  return result;
}

unint64_t sub_23BE16B20()
{
  unint64_t result;

  result = qword_256AC7540;
  if (!qword_256AC7540)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E7A8, &type metadata for BrowseInsetBehaviorProviderType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7540);
  }
  return result;
}

unint64_t sub_23BE16B68()
{
  unint64_t result;

  result = qword_256AC7548;
  if (!qword_256AC7548)
  {
    result = MEMORY[0x242612B20](&unk_23BE5E7D0, &type metadata for BrowseInsetBehaviorProviderType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7548);
  }
  return result;
}

uint64_t sub_23BE16BAC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x5379616C70736964 && a2 == 0xEC000000656C7974;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F436C6961746564 && a2 == 0xED0000746E65746ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BE16CD8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7550);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t EditorialCollectionDetail.backgroundArtwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BDFFFD8(v1, a1, &qword_256AC6DA0);
}

uint64_t EditorialCollectionDetail.editorialCollection.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for EditorialCollectionDetail();
  return sub_23BDF23A0(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollection);
}

uint64_t type metadata accessor for EditorialCollectionDetail()
{
  uint64_t result;

  result = qword_256AC7618;
  if (!qword_256AC7618)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t EditorialCollectionDetail.sectionDescriptors.getter()
{
  type metadata accessor for EditorialCollectionDetail();
  return swift_bridgeObjectRetain();
}

uint64_t EditorialCollectionDetail.init(backgroundArtwork:editorialCollection:sectionDescriptors:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t result;

  sub_23BE16E34(a1, a4);
  v7 = type metadata accessor for EditorialCollectionDetail();
  result = sub_23BDF2424(a2, a4 + *(int *)(v7 + 20), (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollection);
  *(_QWORD *)(a4 + *(int *)(v7 + 24)) = a3;
  return result;
}

uint64_t sub_23BE16E34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BE16E7C(char a1)
{
  unint64_t result;

  result = 0xD000000000000011;
  if (a1)
  {
    if (a1 == 1)
      return 0xD000000000000013;
    else
      return 0xD000000000000012;
  }
  return result;
}

unint64_t sub_23BE16ED8()
{
  char *v0;

  return sub_23BE16E7C(*v0);
}

uint64_t sub_23BE16EE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE192B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE16F04()
{
  sub_23BE1714C();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE16F2C()
{
  sub_23BE1714C();
  return sub_23BE5AF18();
}

uint64_t EditorialCollectionDetail.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  char v13;
  char v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7558);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE1714C();
  sub_23BE5AF00();
  v14 = 0;
  type metadata accessor for BrowseArtwork();
  sub_23BDF23E4(&qword_256AC7568, (uint64_t (*)(uint64_t))type metadata accessor for BrowseArtwork, (uint64_t)&protocol conformance descriptor for BrowseArtwork);
  sub_23BE5AE1C();
  if (!v2)
  {
    v9 = type metadata accessor for EditorialCollectionDetail();
    v13 = 1;
    type metadata accessor for EditorialCollection();
    sub_23BDF23E4(&qword_256AC7570, (uint64_t (*)(uint64_t))type metadata accessor for EditorialCollection, (uint64_t)&protocol conformance descriptor for EditorialCollection);
    sub_23BE5AE4C();
    v12 = *(_QWORD *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7578);
    sub_23BE17508(&qword_256AC7580, &qword_256AC7588, (uint64_t)&protocol conformance descriptor for BrowseSectionDescriptor, MEMORY[0x24BEE12A0]);
    sub_23BE5AE4C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23BE1714C()
{
  unint64_t result;

  result = qword_256AC7560;
  if (!qword_256AC7560)
  {
    result = MEMORY[0x242612B20](&unk_23BE5EB10, &type metadata for EditorialCollectionDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7560);
  }
  return result;
}

uint64_t EditorialCollectionDetail.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;

  v21 = a2;
  v3 = type metadata accessor for EditorialCollection();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
  MEMORY[0x24BDAC7A8](v6);
  v22 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7590);
  v8 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for EditorialCollectionDetail();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v25 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_23BE1714C();
  v23 = v10;
  v15 = v26;
  sub_23BE5AEF4();
  if (v15)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  v16 = v8;
  type metadata accessor for BrowseArtwork();
  v30 = 0;
  sub_23BDF23E4(&qword_256AC7598, (uint64_t (*)(uint64_t))type metadata accessor for BrowseArtwork, (uint64_t)&protocol conformance descriptor for BrowseArtwork);
  v17 = (uint64_t)v22;
  sub_23BE5ADB0();
  sub_23BE16E34(v17, (uint64_t)v13);
  v29 = 1;
  sub_23BDF23E4(&qword_256AC75A0, (uint64_t (*)(uint64_t))type metadata accessor for EditorialCollection, (uint64_t)&protocol conformance descriptor for EditorialCollection);
  sub_23BE5ADE0();
  sub_23BDF2424((uint64_t)v5, (uint64_t)&v13[*(int *)(v11 + 20)], (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollection);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7578);
  v28 = 2;
  sub_23BE17508(&qword_256AC75A8, &qword_256AC75B0, (uint64_t)&protocol conformance descriptor for BrowseSectionDescriptor, MEMORY[0x24BEE12D0]);
  v18 = v23;
  sub_23BE5ADE0();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v24);
  *(_QWORD *)&v13[*(int *)(v11 + 24)] = v27;
  sub_23BDF23A0((uint64_t)v13, v21, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollectionDetail);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return sub_23BDF2468((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollectionDetail);
}

uint64_t sub_23BE17508(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC7578);
    v10 = sub_23BDF23E4(a2, (uint64_t (*)(uint64_t))type metadata accessor for BrowseSectionDescriptor, a3);
    result = MEMORY[0x242612B20](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BE1758C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return EditorialCollectionDetail.init(from:)(a1, a2);
}

uint64_t sub_23BE175A0(_QWORD *a1)
{
  return EditorialCollectionDetail.encode(to:)(a1);
}

uint64_t EditorialCollectionDetail.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_23BE17808(a1);
  v3 = type metadata accessor for EditorialCollectionDetail();
  EditorialCollection.hash(into:)();
  v4 = *(_QWORD *)(v1 + *(int *)(v3 + 24));
  swift_bridgeObjectRetain();
  sub_23BDF04FC(a1, v4);
  return swift_bridgeObjectRelease();
}

uint64_t EditorialCollectionDetail.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  sub_23BE5AEB8();
  sub_23BE17808((uint64_t)v4);
  v1 = type metadata accessor for EditorialCollectionDetail();
  EditorialCollection.hash(into:)();
  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 24));
  swift_bridgeObjectRetain();
  sub_23BDF04FC((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE176A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[72];

  sub_23BE5AEB8();
  sub_23BE17808((uint64_t)v5);
  EditorialCollection.hash(into:)();
  v3 = *(_QWORD *)(v1 + *(int *)(a1 + 24));
  swift_bridgeObjectRetain();
  sub_23BDF04FC((uint64_t)v5, v3);
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE17728(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  sub_23BE17808(a1);
  EditorialCollection.hash(into:)();
  v5 = *(_QWORD *)(v2 + *(int *)(a2 + 24));
  swift_bridgeObjectRetain();
  sub_23BDF04FC(a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BE17788(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE v6[72];

  sub_23BE5AEB8();
  sub_23BE17808((uint64_t)v6);
  EditorialCollection.hash(into:)();
  v4 = *(_QWORD *)(v2 + *(int *)(a2 + 24));
  swift_bridgeObjectRetain();
  sub_23BDF04FC((uint64_t)v6, v4);
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE17808(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a1;
  v2 = sub_23BE5A690();
  v28 = *(_QWORD *)(v2 - 8);
  v29 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v26 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
  MEMORY[0x24BDAC7A8](v4);
  v27 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23BE5A720();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BrowseArtwork();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BDFFFD8(v1, (uint64_t)v19, &qword_256AC6DA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v19, 1, v13) == 1)
    return sub_23BE5AED0();
  sub_23BDF2424((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for BrowseArtwork);
  sub_23BE5AED0();
  sub_23BDFFFD8((uint64_t)v16, (uint64_t)v12, &qword_256AC6D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC7680, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v21 = v27;
  v22 = v28;
  sub_23BDFFFD8((uint64_t)&v16[*(int *)(v13 + 20)], v27, &qword_256AC6D98);
  v23 = v29;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v21, 1, v29) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    v24 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v26, v21, v23);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v23);
  }
  return sub_23BDF2468((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for BrowseArtwork);
}

uint64_t _s15FitnessBrowsing25EditorialCollectionDetailV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = type metadata accessor for BrowseArtwork();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v29 = (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7678);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v28 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v28 - v17;
  v30 = a1;
  sub_23BDFFFD8(a1, (uint64_t)&v28 - v17, &qword_256AC6DA0);
  v31 = a2;
  sub_23BDFFFD8(a2, (uint64_t)v16, &qword_256AC6DA0);
  v19 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_23BDFFFD8((uint64_t)v18, (uint64_t)v9, &qword_256AC6DA0);
  sub_23BDFFFD8((uint64_t)v16, v19, &qword_256AC6DA0);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v20((uint64_t)v9, 1, v4) == 1)
  {
    sub_23BE000B8((uint64_t)v16, &qword_256AC6DA0);
    sub_23BE000B8((uint64_t)v18, &qword_256AC6DA0);
    if (v20(v19, 1, v4) == 1)
    {
      sub_23BE000B8((uint64_t)v9, &qword_256AC6DA0);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_23BDFFFD8((uint64_t)v9, (uint64_t)v13, &qword_256AC6DA0);
  if (v20(v19, 1, v4) == 1)
  {
    sub_23BE000B8((uint64_t)v16, &qword_256AC6DA0);
    sub_23BE000B8((uint64_t)v18, &qword_256AC6DA0);
    sub_23BDF2468((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for BrowseArtwork);
LABEL_6:
    sub_23BE000B8((uint64_t)v9, &qword_256AC7678);
LABEL_10:
    v26 = 0;
    return v26 & 1;
  }
  v21 = v29;
  sub_23BDF2424(v19, v29, (uint64_t (*)(_QWORD))type metadata accessor for BrowseArtwork);
  v22 = _s15FitnessBrowsing13BrowseArtworkV2eeoiySbAC_ACtFZ_0((uint64_t)v13, v21);
  sub_23BDF2468(v21, (uint64_t (*)(_QWORD))type metadata accessor for BrowseArtwork);
  sub_23BE000B8((uint64_t)v16, &qword_256AC6DA0);
  sub_23BE000B8((uint64_t)v18, &qword_256AC6DA0);
  sub_23BDF2468((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for BrowseArtwork);
  sub_23BE000B8((uint64_t)v9, &qword_256AC6DA0);
  if (!v22)
    goto LABEL_10;
LABEL_8:
  v23 = type metadata accessor for EditorialCollectionDetail();
  v25 = v30;
  v24 = v31;
  if ((_s15FitnessBrowsing19EditorialCollectionV2eeoiySbAC_ACtFZ_0((_QWORD *)(v30 + *(int *)(v23 + 20)), (_QWORD *)(v31 + *(int *)(v23 + 20))) & 1) == 0)goto LABEL_10;
  v26 = sub_23BDF0180(*(_QWORD *)(v25 + *(int *)(v23 + 24)), *(_QWORD *)(v24 + *(int *)(v23 + 24)));
  return v26 & 1;
}

uint64_t sub_23BE17E78()
{
  return sub_23BDF23E4(&qword_256AC75B8, (uint64_t (*)(uint64_t))type metadata accessor for EditorialCollectionDetail, (uint64_t)&protocol conformance descriptor for EditorialCollectionDetail);
}

uint64_t *initializeBufferWithCopyOfBuffer for EditorialCollectionDetail(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v35;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    v11 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for BrowseArtwork();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v12 = sub_23BE5A720();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(a1, a2, v12);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
      }
      v15 = *(int *)(v7 + 20);
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = sub_23BE5A690();
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v21 = *(int *)(a3 + 20);
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (char *)a2 + v21;
    v24 = *(uint64_t *)((char *)a2 + v21 + 8);
    *v22 = *(uint64_t *)((char *)a2 + v21);
    v22[1] = v24;
    v25 = *(uint64_t *)((char *)a2 + v21 + 24);
    v22[2] = *(uint64_t *)((char *)a2 + v21 + 16);
    v22[3] = v25;
    v26 = *(uint64_t *)((char *)a2 + v21 + 40);
    v22[4] = *(uint64_t *)((char *)a2 + v21 + 32);
    v22[5] = v26;
    v27 = *(uint64_t *)((char *)a2 + v21 + 56);
    v22[6] = *(uint64_t *)((char *)a2 + v21 + 48);
    v22[7] = v27;
    v28 = *(int *)(type metadata accessor for EditorialCollection() + 32);
    v35 = (char *)v22 + v28;
    v29 = &v23[v28];
    v30 = sub_23BE5A690();
    v11 = a1;
    v31 = a2;
    v32 = a3;
    v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33(v35, v29, v30);
    *(uint64_t *)((char *)v11 + *(int *)(v32 + 24)) = *(uint64_t *)((char *)v31 + *(int *)(v32 + 24));
    swift_bridgeObjectRetain();
  }
  return v11;
}

uint64_t destroy for EditorialCollectionDetail(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for BrowseArtwork();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    v5 = sub_23BE5A720();
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v7 = a1 + *(int *)(v4 + 20);
    v8 = sub_23BE5A690();
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  v10 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v10 + *(int *)(type metadata accessor for EditorialCollection() + 32);
  v12 = sub_23BE5A690();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for EditorialCollectionDetail(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v32;

  v6 = type metadata accessor for BrowseArtwork();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = sub_23BE5A720();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(a1, a2, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    }
    v12 = *(int *)(v6 + 20);
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = sub_23BE5A690();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v18 = *(int *)(a3 + 20);
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *(_QWORD *)&a2[v18 + 8];
  *(_QWORD *)v19 = *(_QWORD *)&a2[v18];
  *((_QWORD *)v19 + 1) = v21;
  v22 = *(_QWORD *)&a2[v18 + 24];
  *((_QWORD *)v19 + 2) = *(_QWORD *)&a2[v18 + 16];
  *((_QWORD *)v19 + 3) = v22;
  v23 = *(_QWORD *)&a2[v18 + 40];
  *((_QWORD *)v19 + 4) = *(_QWORD *)&a2[v18 + 32];
  *((_QWORD *)v19 + 5) = v23;
  v24 = *(_QWORD *)&a2[v18 + 56];
  *((_QWORD *)v19 + 6) = *(_QWORD *)&a2[v18 + 48];
  *((_QWORD *)v19 + 7) = v24;
  v25 = *(int *)(type metadata accessor for EditorialCollection() + 32);
  v32 = &v19[v25];
  v26 = &v20[v25];
  v27 = sub_23BE5A690();
  v28 = a2;
  v29 = a3;
  v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30(v32, v26, v27);
  *(_QWORD *)&a1[*(int *)(v29 + 24)] = *(_QWORD *)&v28[*(int *)(v29 + 24)];
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for EditorialCollectionDetail(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  int v44;

  v6 = type metadata accessor for BrowseArtwork();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseArtwork);
      goto LABEL_7;
    }
    v17 = sub_23BE5A720();
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
    v20 = v19(a1, 1, v17);
    v21 = v19(a2, 1, v17);
    if (v20)
    {
      if (!v21)
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(a1, a2, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(a1, 0, 1, v17);
LABEL_21:
        v37 = *(int *)(v6 + 20);
        v38 = &a1[v37];
        v39 = &a2[v37];
        v40 = sub_23BE5A690();
        v41 = *(_QWORD *)(v40 - 8);
        v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
        v43 = v42(v38, 1, v40);
        v44 = v42(v39, 1, v40);
        if (v43)
        {
          if (!v44)
          {
            (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
            goto LABEL_17;
          }
        }
        else
        {
          if (!v44)
          {
            (*(void (**)(char *, char *, uint64_t))(v41 + 24))(v38, v39, v40);
            goto LABEL_17;
          }
          (*(void (**)(char *, uint64_t))(v41 + 8))(v38, v40);
        }
        v14 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98) - 8) + 64);
        v15 = v38;
        v16 = v39;
        goto LABEL_8;
      }
    }
    else
    {
      if (!v21)
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 24))(a1, a2, v17);
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v18 + 8))(a1, v17);
    }
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_21;
  }
  if (v10)
  {
LABEL_7:
    v14 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0) - 8) + 64);
    v15 = a1;
    v16 = a2;
LABEL_8:
    memcpy(v15, v16, v14);
    goto LABEL_17;
  }
  v11 = sub_23BE5A720();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(a1, a2, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
  }
  v22 = *(int *)(v6 + 20);
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = sub_23BE5A690();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_17:
  v28 = *(int *)(a3 + 20);
  v29 = &a1[v28];
  v30 = &a2[v28];
  *(_QWORD *)v29 = *(_QWORD *)&a2[v28];
  *((_QWORD *)v29 + 1) = *(_QWORD *)&a2[v28 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v29 + 2) = *((_QWORD *)v30 + 2);
  *((_QWORD *)v29 + 3) = *((_QWORD *)v30 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v29 + 4) = *((_QWORD *)v30 + 4);
  *((_QWORD *)v29 + 5) = *((_QWORD *)v30 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v29 + 6) = *((_QWORD *)v30 + 6);
  *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = *(int *)(type metadata accessor for EditorialCollection() + 32);
  v32 = &v29[v31];
  v33 = &v30[v31];
  v34 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for EditorialCollectionDetail(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = type metadata accessor for BrowseArtwork();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = sub_23BE5A720();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(a1, a2, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    }
    v12 = *(int *)(v6 + 20);
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = sub_23BE5A690();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v18 = *(int *)(a3 + 20);
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *(_OWORD *)&a2[v18 + 16];
  *(_OWORD *)v19 = *(_OWORD *)&a2[v18];
  *((_OWORD *)v19 + 1) = v21;
  v22 = *(_OWORD *)&a2[v18 + 48];
  *((_OWORD *)v19 + 2) = *(_OWORD *)&a2[v18 + 32];
  *((_OWORD *)v19 + 3) = v22;
  v23 = *(int *)(type metadata accessor for EditorialCollection() + 32);
  v24 = &v19[v23];
  v25 = &v20[v23];
  v26 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *assignWithTake for EditorialCollectionDetail(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  int v48;

  v6 = type metadata accessor for BrowseArtwork();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseArtwork);
      goto LABEL_7;
    }
    v17 = sub_23BE5A720();
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
    v20 = v19(a1, 1, v17);
    v21 = v19(a2, 1, v17);
    if (v20)
    {
      if (!v21)
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(a1, a2, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(a1, 0, 1, v17);
LABEL_21:
        v41 = *(int *)(v6 + 20);
        v42 = &a1[v41];
        v43 = &a2[v41];
        v44 = sub_23BE5A690();
        v45 = *(_QWORD *)(v44 - 8);
        v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
        v47 = v46(v42, 1, v44);
        v48 = v46(v43, 1, v44);
        if (v47)
        {
          if (!v48)
          {
            (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v42, v43, v44);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
            goto LABEL_17;
          }
        }
        else
        {
          if (!v48)
          {
            (*(void (**)(char *, char *, uint64_t))(v45 + 40))(v42, v43, v44);
            goto LABEL_17;
          }
          (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
        }
        v14 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98) - 8) + 64);
        v15 = v42;
        v16 = v43;
        goto LABEL_8;
      }
    }
    else
    {
      if (!v21)
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 40))(a1, a2, v17);
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v18 + 8))(a1, v17);
    }
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_21;
  }
  if (v10)
  {
LABEL_7:
    v14 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0) - 8) + 64);
    v15 = a1;
    v16 = a2;
LABEL_8:
    memcpy(v15, v16, v14);
    goto LABEL_17;
  }
  v11 = sub_23BE5A720();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(a1, a2, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
  }
  v22 = *(int *)(v6 + 20);
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = sub_23BE5A690();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_17:
  v28 = *(int *)(a3 + 20);
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = *(_QWORD *)&a2[v28 + 8];
  *(_QWORD *)v29 = *(_QWORD *)&a2[v28];
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  v32 = *((_QWORD *)v30 + 3);
  *((_QWORD *)v29 + 2) = *((_QWORD *)v30 + 2);
  *((_QWORD *)v29 + 3) = v32;
  swift_bridgeObjectRelease();
  v33 = *((_QWORD *)v30 + 5);
  *((_QWORD *)v29 + 4) = *((_QWORD *)v30 + 4);
  *((_QWORD *)v29 + 5) = v33;
  swift_bridgeObjectRelease();
  v34 = *((_QWORD *)v30 + 7);
  *((_QWORD *)v29 + 6) = *((_QWORD *)v30 + 6);
  *((_QWORD *)v29 + 7) = v34;
  swift_bridgeObjectRelease();
  v35 = *(int *)(type metadata accessor for EditorialCollection() + 32);
  v36 = &v29[v35];
  v37 = &v30[v35];
  v38 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EditorialCollectionDetail()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE18EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for EditorialCollection();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for EditorialCollectionDetail()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE18F80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for EditorialCollection();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void sub_23BE19028()
{
  unint64_t v0;
  unint64_t v1;

  sub_23BE190B8();
  if (v0 <= 0x3F)
  {
    type metadata accessor for EditorialCollection();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_23BE190B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256AC7628[0])
  {
    type metadata accessor for BrowseArtwork();
    v0 = sub_23BE5AD2C();
    if (!v1)
      atomic_store(v0, qword_256AC7628);
  }
}

uint64_t storeEnumTagSinglePayload for EditorialCollectionDetail.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE19158 + 4 * byte_23BE5E955[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE1918C + 4 * byte_23BE5E950[v4]))();
}

uint64_t sub_23BE1918C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE19194(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE1919CLL);
  return result;
}

uint64_t sub_23BE191A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE191B0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE191B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE191BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EditorialCollectionDetail.CodingKeys()
{
  return &type metadata for EditorialCollectionDetail.CodingKeys;
}

unint64_t sub_23BE191DC()
{
  unint64_t result;

  result = qword_256AC7660;
  if (!qword_256AC7660)
  {
    result = MEMORY[0x242612B20](&unk_23BE5EAE8, &type metadata for EditorialCollectionDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7660);
  }
  return result;
}

unint64_t sub_23BE19224()
{
  unint64_t result;

  result = qword_256AC7668;
  if (!qword_256AC7668)
  {
    result = MEMORY[0x242612B20](&unk_23BE5EA58, &type metadata for EditorialCollectionDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7668);
  }
  return result;
}

unint64_t sub_23BE1926C()
{
  unint64_t result;

  result = qword_256AC7670;
  if (!qword_256AC7670)
  {
    result = MEMORY[0x242612B20](&unk_23BE5EA80, &type metadata for EditorialCollectionDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7670);
  }
  return result;
}

uint64_t sub_23BE192B0(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x800000023BE662C0 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023BE662E0 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023BE66300)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BE193F0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BE19424 + 4 * byte_23BE5EB60[*v0]))(0xD000000000000010, 0x800000023BE66320);
}

uint64_t sub_23BE19424()
{
  return 0x6C6961746564;
}

uint64_t sub_23BE19438()
{
  return 0x6169726F74696465;
}

uint64_t sub_23BE19454()
{
  return 0x7972656C6C6167;
}

uint64_t sub_23BE1946C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE1D1C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE19490()
{
  sub_23BE19C38();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE194B8()
{
  sub_23BE19C38();
  return sub_23BE5AF18();
}

uint64_t sub_23BE194E0()
{
  sub_23BE19D8C();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE19508()
{
  sub_23BE19D8C();
  return sub_23BE5AF18();
}

uint64_t sub_23BE19530()
{
  sub_23BE19D48();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE19558()
{
  sub_23BE19D48();
  return sub_23BE5AF18();
}

uint64_t sub_23BE19580()
{
  sub_23BE19D04();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE195A8()
{
  sub_23BE19D04();
  return sub_23BE5AF18();
}

uint64_t sub_23BE195D0()
{
  sub_23BE19CC0();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE195F8()
{
  sub_23BE19CC0();
  return sub_23BE5AF18();
}

void BrowseSectionDescriptor.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD v16[2];
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7688);
  v29 = *(_QWORD *)(v2 - 8);
  v30 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v28 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for BrowseGalleryDescriptor();
  MEMORY[0x24BDAC7A8](v26);
  v27 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7690);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v23 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for BrowseEditorialDescriptor();
  MEMORY[0x24BDAC7A8](v21);
  v22 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7698);
  v19 = *(_QWORD *)(v8 - 8);
  v20 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v18 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for BrowseDetailDescriptor();
  MEMORY[0x24BDAC7A8](v17);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC76A0);
  v16[1] = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v11 = type metadata accessor for BrowseSectionDescriptor();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC76A8);
  v31 = *(_QWORD *)(v14 - 8);
  v32 = v14;
  MEMORY[0x24BDAC7A8](v14);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE19C38();
  sub_23BE5AF00();
  sub_23BE19C7C(v33, (uint64_t)v13);
  v15 = (char *)sub_23BE198E8 + 4 * byte_23BE5EB64[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BE198E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = v3[1];
  *(_QWORD *)(v4 - 72) = *v3;
  v6 = v3[3];
  *(_QWORD *)(v4 - 168) = v3[2];
  v8 = v3[4];
  v7 = v3[5];
  *(_BYTE *)(v4 - 136) = 0;
  sub_23BE19D8C();
  v9 = *(_QWORD *)(v4 - 152);
  sub_23BE5ADF8();
  *(_QWORD *)(v4 - 136) = *(_QWORD *)(v4 - 72);
  *(_QWORD *)(v4 - 128) = v5;
  *(_QWORD *)(v4 - 120) = *(_QWORD *)(v4 - 168);
  *(_QWORD *)(v4 - 112) = v6;
  *(_QWORD *)(v4 - 104) = v8;
  *(_QWORD *)(v4 - 96) = v7;
  sub_23BE19DD0();
  sub_23BE5AE4C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 280) + 8))(v0, v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 160) + 8))(v2, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for BrowseSectionDescriptor()
{
  uint64_t result;

  result = qword_256AC77B8;
  if (!qword_256AC77B8)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BE19C38()
{
  unint64_t result;

  result = qword_256AC76B0;
  if (!qword_256AC76B0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F1EC, &type metadata for BrowseSectionDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC76B0);
  }
  return result;
}

uint64_t sub_23BE19C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseSectionDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BE19CC0()
{
  unint64_t result;

  result = qword_256AC76B8;
  if (!qword_256AC76B8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F19C, &type metadata for BrowseSectionDescriptor.GalleryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC76B8);
  }
  return result;
}

unint64_t sub_23BE19D04()
{
  unint64_t result;

  result = qword_256AC76C8;
  if (!qword_256AC76C8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F14C, &type metadata for BrowseSectionDescriptor.EditorialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC76C8);
  }
  return result;
}

unint64_t sub_23BE19D48()
{
  unint64_t result;

  result = qword_256AC76D8;
  if (!qword_256AC76D8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F0FC, &type metadata for BrowseSectionDescriptor.DetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC76D8);
  }
  return result;
}

unint64_t sub_23BE19D8C()
{
  unint64_t result;

  result = qword_256AC76E8;
  if (!qword_256AC76E8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F0AC, &type metadata for BrowseSectionDescriptor.CreatePlanBannerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC76E8);
  }
  return result;
}

unint64_t sub_23BE19DD0()
{
  unint64_t result;

  result = qword_256AC76F0;
  if (!qword_256AC76F0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for CreatePlanBannerDescriptor, &type metadata for CreatePlanBannerDescriptor);
    atomic_store(result, (unint64_t *)&qword_256AC76F0);
  }
  return result;
}

uint64_t BrowseSectionDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD v32[8];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;

  v46 = a2;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC76F8);
  v37 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7700);
  v36 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v44 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7708);
  v32[7] = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v40 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7710);
  v32[6] = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v38 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7718);
  v42 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for BrowseSectionDescriptor();
  v9 = MEMORY[0x24BDAC7A8](v41);
  v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)v32 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)v32 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v32 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)v32 - v21;
  v23 = a1[3];
  v48 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v23);
  sub_23BE19C38();
  v45 = v8;
  v24 = v49;
  sub_23BE5AEF4();
  if (!v24)
  {
    v32[1] = v20;
    v32[2] = v17;
    v32[3] = v14;
    v32[4] = v11;
    v49 = 0;
    v32[5] = v22;
    v25 = v47;
    v26 = v45;
    v27 = sub_23BE5ADEC();
    if (*(_QWORD *)(v27 + 16) == 1)
      __asm { BR              X10 }
    v28 = sub_23BE5AD68();
    swift_allocError();
    v30 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v30 = v41;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, *MEMORY[0x24BEE26D0], v28);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v25);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
}

unint64_t sub_23BE1A6C8()
{
  unint64_t result;

  result = qword_256AC7738;
  if (!qword_256AC7738)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for CreatePlanBannerDescriptor, &type metadata for CreatePlanBannerDescriptor);
    atomic_store(result, (unint64_t *)&qword_256AC7738);
  }
  return result;
}

uint64_t sub_23BE1A70C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseSectionDescriptor.init(from:)(a1, a2);
}

void sub_23BE1A720(_QWORD *a1)
{
  BrowseSectionDescriptor.encode(to:)(a1);
}

void BrowseSectionDescriptor.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v1 = type metadata accessor for BrowseGalleryDescriptor();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for BrowseEditorialDescriptor();
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for BrowseDetailDescriptor();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for BrowseSectionDescriptor();
  MEMORY[0x24BDAC7A8](v4);
  sub_23BE19C7C(v0, (uint64_t)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = (char *)sub_23BE1A868 + 4 * byte_23BE5EB6C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BE1A868()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v0;
  v2 = v0[1];
  v5 = v0[2];
  v4 = v0[3];
  v7 = v0[4];
  v6 = v0[5];
  sub_23BE5AEC4();
  *(_QWORD *)(v1 - 128) = v3;
  *(_QWORD *)(v1 - 120) = v2;
  *(_QWORD *)(v1 - 112) = v5;
  *(_QWORD *)(v1 - 104) = v4;
  *(_QWORD *)(v1 - 96) = v7;
  *(_QWORD *)(v1 - 88) = v6;
  CreatePlanBannerDescriptor.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t BrowseSectionDescriptor.hashValue.getter()
{
  sub_23BE5AEB8();
  BrowseSectionDescriptor.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE1AAC0()
{
  sub_23BE5AEB8();
  BrowseSectionDescriptor.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE1AB00()
{
  sub_23BE5AEB8();
  BrowseSectionDescriptor.hash(into:)();
  return sub_23BE5AEE8();
}

void _s15FitnessBrowsing23BrowseSectionDescriptorO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v4 = type metadata accessor for BrowseGalleryDescriptor();
  MEMORY[0x24BDAC7A8](v4);
  v19 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BrowseEditorialDescriptor();
  MEMORY[0x24BDAC7A8](v6);
  v18 = type metadata accessor for BrowseDetailDescriptor();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BrowseSectionDescriptor();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7868);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v17 + *(int *)(v13 + 48) - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE19C7C(a1, (uint64_t)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23BE19C7C(a2, (uint64_t)v15);
  v16 = (char *)sub_23BE1AD18 + 4 * byte_23BE5EB70[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BE1AD18()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char PlanBannerDescriptorV2eeoiySbAC_ACtFZ_0;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  sub_23BE19C7C(v0, (uint64_t)v1);
  v4 = v1[1];
  v5 = v1[3];
  v6 = v1[5];
  if (swift_getEnumCaseMultiPayload())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23BE1D378(v0);
    PlanBannerDescriptorV2eeoiySbAC_ACtFZ_0 = 0;
  }
  else
  {
    v8 = v1[4];
    v9 = v1[2];
    v10 = *v1;
    v11 = *v2;
    v12 = v2[5];
    *(_QWORD *)(v3 - 128) = v10;
    *(_QWORD *)(v3 - 120) = v4;
    *(_QWORD *)(v3 - 112) = v9;
    *(_QWORD *)(v3 - 104) = v5;
    *(_QWORD *)(v3 - 96) = v8;
    *(_QWORD *)(v3 - 88) = v6;
    *(_QWORD *)(v3 - 176) = v11;
    v13 = *(_OWORD *)(v2 + 1);
    *(_OWORD *)(v3 - 208) = v13;
    *(_OWORD *)(v3 - 168) = v13;
    v14 = *(_OWORD *)(v2 + 3);
    *(_OWORD *)(v3 - 192) = v14;
    *(_OWORD *)(v3 - 152) = v14;
    *(_QWORD *)(v3 - 136) = v12;
    PlanBannerDescriptorV2eeoiySbAC_ACtFZ_0 = _s15FitnessBrowsing26CreatePlanBannerDescriptorV2eeoiySbAC_ACtFZ_0((_QWORD *)(v3 - 128), (_QWORD *)(v3 - 176));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23BDF2468(v0, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
  }
  return PlanBannerDescriptorV2eeoiySbAC_ACtFZ_0 & 1;
}

uint64_t sub_23BE1B03C()
{
  return sub_23BDF23E4(&qword_256AC7740, (uint64_t (*)(uint64_t))type metadata accessor for BrowseSectionDescriptor, (uint64_t)&protocol conformance descriptor for BrowseSectionDescriptor);
}

uint64_t initializeBufferWithCopyOfBuffer for BrowseSectionDescriptor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_23BE1B0C8 + 4 * byte_23BE5EB74[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for BrowseSectionDescriptor(uint64_t a1)
{
  uint64_t result;
  int EnumCaseMultiPayload;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 1:
      type metadata accessor for BrowseDetailContent();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        v15 = sub_23BE5A678();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
        v16 = type metadata accessor for BrowseDetailVideoLinkItem();
        swift_bridgeObjectRelease();
        v17 = a1 + *(int *)(v16 + 24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v18 = v17 + *(int *)(type metadata accessor for VideoAsset() + 24);
        v19 = sub_23BE5A690();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          v20 = sub_23BE5A678();
          v21 = *(_QWORD *)(v20 - 8);
          v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
          if (!v22(a1, 1, v20))
            (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a1, v20);
          v23 = a1 + *(int *)(type metadata accessor for BrowseDetailTextItem() + 20);
          if (!v22(v23, 1, v20))
            (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v20);
        }
        else
        {
          if (EnumCaseMultiPayload)
            goto LABEL_21;
          __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
          if (swift_getEnumCaseMultiPayload() == 1)
            v4 = (uint64_t *)&unk_256AC6BF8;
          else
            v4 = (uint64_t *)&unk_256AC6BF0;
          v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
          type metadata accessor for BrowseDetailArtworkItem();
        }
        swift_bridgeObjectRelease();
      }
LABEL_21:
      type metadata accessor for BrowseDetailDescriptor();
      return swift_bridgeObjectRelease();
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = type metadata accessor for BrowseEditorialDescriptor();
      v7 = a1 + *(int *)(v6 + 40);
      v8 = sub_23BE5A678();
      v9 = *(_QWORD *)(v8 - 8);
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
      v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      if (!v10)
      {
        v24 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
        v11(v7, v8);
        v11 = v24;
      }
      v12 = a1 + *(int *)(v6 + 44);
      v13 = v8;
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v12, v13);
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = a1 + *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
      v13 = sub_23BE5A678();
      v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
      v12 = v14;
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v12, v13);
    default:
      return result;
  }
}

void initializeWithCopy for BrowseSectionDescriptor()
{
  char *v0;

  v0 = (char *)sub_23BE1B8C0 + 4 * byte_23BE5EB7C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_23BE1B8C0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v3 = v1[3];
  v0[2] = v1[2];
  v0[3] = v3;
  v4 = v1[4];
  v5 = v1[5];
  v0[4] = v4;
  v0[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for BrowseSectionDescriptor(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_23BDF2468(result, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
    v2 = (char *)&loc_23BE1BDCC + 4 * byte_23BE5EB80[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

char *initializeWithTake for BrowseSectionDescriptor(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v43)(char *, uint64_t, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      *a1 = *a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      a1[32] = a2[32];
      v11 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = sub_23BE5A678();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
LABEL_26:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 2:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      a1[32] = a2[32];
      v15 = type metadata accessor for BrowseEditorialDescriptor();
      v16 = *(int *)(v15 + 40);
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = sub_23BE5A678();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&a1[*(int *)(v15 + 44)], &a2[*(int *)(v15 + 44)], v19);
      }
      else
      {
        v22 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
        v22(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
        v22(&a1[*(int *)(v15 + 44)], &a2[*(int *)(v15 + 44)], v19);
      }
      goto LABEL_26;
    case 1:
      type metadata accessor for BrowseDetailContent();
      v7 = swift_getEnumCaseMultiPayload();
      if (v7 == 2)
      {
        v23 = sub_23BE5A678();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(a1, a2, v23);
        v24 = type metadata accessor for BrowseDetailVideoLinkItem();
        *(_OWORD *)&a1[*(int *)(v24 + 20)] = *(_OWORD *)&a2[*(int *)(v24 + 20)];
        v25 = *(int *)(v24 + 24);
        v26 = &a1[v25];
        v27 = &a2[v25];
        v28 = *(_OWORD *)&a2[v25 + 16];
        *(_OWORD *)v26 = *(_OWORD *)&a2[v25];
        *((_OWORD *)v26 + 1) = v28;
        v29 = *(int *)(type metadata accessor for VideoAsset() + 24);
        v30 = &v26[v29];
        v31 = &v27[v29];
        v32 = sub_23BE5A690();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
      }
      else
      {
        if (v7 == 1)
        {
          v8 = sub_23BE5A678();
          v9 = *(_QWORD *)(v8 - 8);
          v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
          if (v43(a2, 1, v8))
          {
            v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v9 + 32))(a1, a2, v8);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
          }
          v36 = type metadata accessor for BrowseDetailTextItem();
          v37 = *(int *)(v36 + 20);
          v38 = &a1[v37];
          v39 = &a2[v37];
          if (v43(&a2[v37], 1, v8))
          {
            v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
            memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v38, 0, 1, v8);
          }
          v35 = *(int *)(v36 + 24);
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
          if (swift_getEnumCaseMultiPayload() == 1)
            v33 = (uint64_t *)&unk_256AC6BF8;
          else
            v33 = (uint64_t *)&unk_256AC6BF0;
          v34 = __swift_instantiateConcreteTypeFromMangledName(v33);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(a1, a2, v34);
          swift_storeEnumTagMultiPayload();
          v35 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
        }
        *(_OWORD *)&a1[v35] = *(_OWORD *)&a2[v35];
      }
      swift_storeEnumTagMultiPayload();
      v41 = type metadata accessor for BrowseDetailDescriptor();
      *(_OWORD *)&a1[*(int *)(v41 + 20)] = *(_OWORD *)&a2[*(int *)(v41 + 20)];
      a1[*(int *)(v41 + 24)] = a2[*(int *)(v41 + 24)];
      goto LABEL_26;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for BrowseSectionDescriptor(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  if (a1 == a2)
    return a1;
  sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      *a1 = *a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      a1[32] = a2[32];
      v12 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = sub_23BE5A678();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
LABEL_27:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 2:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      a1[32] = a2[32];
      v16 = type metadata accessor for BrowseEditorialDescriptor();
      v17 = *(int *)(v16 + 40);
      v18 = &a1[v17];
      v19 = &a2[v17];
      v20 = sub_23BE5A678();
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(&a1[*(int *)(v16 + 44)], &a2[*(int *)(v16 + 44)], v20);
      }
      else
      {
        v23 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
        v23(v18, v19, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        v23(&a1[*(int *)(v16 + 44)], &a2[*(int *)(v16 + 44)], v20);
      }
      goto LABEL_27;
    case 1:
      type metadata accessor for BrowseDetailContent();
      v7 = swift_getEnumCaseMultiPayload();
      if (v7 == 2)
      {
        v24 = sub_23BE5A678();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(a1, a2, v24);
        v25 = type metadata accessor for BrowseDetailVideoLinkItem();
        *(_OWORD *)&a1[*(int *)(v25 + 20)] = *(_OWORD *)&a2[*(int *)(v25 + 20)];
        v26 = *(int *)(v25 + 24);
        v27 = &a1[v26];
        v28 = &a2[v26];
        v29 = *(_OWORD *)&a2[v26 + 16];
        *(_OWORD *)v27 = *(_OWORD *)&a2[v26];
        *((_OWORD *)v27 + 1) = v29;
        v30 = *(int *)(type metadata accessor for VideoAsset() + 24);
        v31 = &v27[v30];
        v32 = &v28[v30];
        v33 = sub_23BE5A690();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      }
      else
      {
        if (v7 == 1)
        {
          v8 = sub_23BE5A678();
          v9 = *(_QWORD *)(v8 - 8);
          v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
          v44 = v9;
          if (v10(a2, 1, v8))
          {
            v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v9 + 32))(a1, a2, v8);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
          }
          v37 = type metadata accessor for BrowseDetailTextItem();
          v38 = *(int *)(v37 + 20);
          v39 = &a1[v38];
          v40 = &a2[v38];
          if (v10(&a2[v38], 1, v8))
          {
            v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
            memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v39, v40, v8);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v39, 0, 1, v8);
          }
          v36 = *(int *)(v37 + 24);
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
          if (swift_getEnumCaseMultiPayload() == 1)
            v34 = (uint64_t *)&unk_256AC6BF8;
          else
            v34 = (uint64_t *)&unk_256AC6BF0;
          v35 = __swift_instantiateConcreteTypeFromMangledName(v34);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(a1, a2, v35);
          swift_storeEnumTagMultiPayload();
          v36 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
        }
        *(_OWORD *)&a1[v36] = *(_OWORD *)&a2[v36];
      }
      swift_storeEnumTagMultiPayload();
      v42 = type metadata accessor for BrowseDetailDescriptor();
      *(_OWORD *)&a1[*(int *)(v42 + 20)] = *(_OWORD *)&a2[*(int *)(v42 + 20)];
      a1[*(int *)(v42 + 24)] = a2[*(int *)(v42 + 24)];
      goto LABEL_27;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

uint64_t sub_23BE1CB44()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for BrowseDetailDescriptor();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for BrowseEditorialDescriptor();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for BrowseGalleryDescriptor();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrowseSectionDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BE1CC38 + 4 * byte_23BE5EB89[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BE1CC6C + 4 * byte_23BE5EB84[v4]))();
}

uint64_t sub_23BE1CC6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE1CC74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE1CC7CLL);
  return result;
}

uint64_t sub_23BE1CC88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE1CC90);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BE1CC94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE1CC9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseSectionDescriptor.CodingKeys()
{
  return &type metadata for BrowseSectionDescriptor.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowseSectionDescriptor.CreatePlanBannerCodingKeys()
{
  return &type metadata for BrowseSectionDescriptor.CreatePlanBannerCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseSectionDescriptor.DetailCodingKeys()
{
  return &type metadata for BrowseSectionDescriptor.DetailCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseSectionDescriptor.EditorialCodingKeys()
{
  return &type metadata for BrowseSectionDescriptor.EditorialCodingKeys;
}

uint64_t _s15FitnessBrowsing23BrowseSectionDescriptorO26CreatePlanBannerCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BE1CD2C + 4 * byte_23BE5EB8E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BE1CD4C + 4 * byte_23BE5EB93[v4]))();
}

_BYTE *sub_23BE1CD2C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BE1CD4C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE1CD54(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE1CD5C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE1CD64(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE1CD6C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BrowseSectionDescriptor.GalleryCodingKeys()
{
  return &type metadata for BrowseSectionDescriptor.GalleryCodingKeys;
}

unint64_t sub_23BE1CD8C()
{
  unint64_t result;

  result = qword_256AC77F0;
  if (!qword_256AC77F0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5EDA4, &type metadata for BrowseSectionDescriptor.GalleryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC77F0);
  }
  return result;
}

unint64_t sub_23BE1CDD4()
{
  unint64_t result;

  result = qword_256AC77F8;
  if (!qword_256AC77F8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5EE5C, &type metadata for BrowseSectionDescriptor.EditorialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC77F8);
  }
  return result;
}

unint64_t sub_23BE1CE1C()
{
  unint64_t result;

  result = qword_256AC7800;
  if (!qword_256AC7800)
  {
    result = MEMORY[0x242612B20](&unk_23BE5EF14, &type metadata for BrowseSectionDescriptor.DetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7800);
  }
  return result;
}

unint64_t sub_23BE1CE64()
{
  unint64_t result;

  result = qword_256AC7808;
  if (!qword_256AC7808)
  {
    result = MEMORY[0x242612B20](&unk_23BE5EFCC, &type metadata for BrowseSectionDescriptor.CreatePlanBannerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7808);
  }
  return result;
}

unint64_t sub_23BE1CEAC()
{
  unint64_t result;

  result = qword_256AC7810;
  if (!qword_256AC7810)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F084, &type metadata for BrowseSectionDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7810);
  }
  return result;
}

unint64_t sub_23BE1CEF4()
{
  unint64_t result;

  result = qword_256AC7818;
  if (!qword_256AC7818)
  {
    result = MEMORY[0x242612B20](&unk_23BE5EF3C, &type metadata for BrowseSectionDescriptor.CreatePlanBannerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7818);
  }
  return result;
}

unint64_t sub_23BE1CF3C()
{
  unint64_t result;

  result = qword_256AC7820;
  if (!qword_256AC7820)
  {
    result = MEMORY[0x242612B20](&unk_23BE5EF64, &type metadata for BrowseSectionDescriptor.CreatePlanBannerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7820);
  }
  return result;
}

unint64_t sub_23BE1CF84()
{
  unint64_t result;

  result = qword_256AC7828;
  if (!qword_256AC7828)
  {
    result = MEMORY[0x242612B20](&unk_23BE5EE84, &type metadata for BrowseSectionDescriptor.DetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7828);
  }
  return result;
}

unint64_t sub_23BE1CFCC()
{
  unint64_t result;

  result = qword_256AC7830;
  if (!qword_256AC7830)
  {
    result = MEMORY[0x242612B20](&unk_23BE5EEAC, &type metadata for BrowseSectionDescriptor.DetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7830);
  }
  return result;
}

unint64_t sub_23BE1D014()
{
  unint64_t result;

  result = qword_256AC7838;
  if (!qword_256AC7838)
  {
    result = MEMORY[0x242612B20](&unk_23BE5EDCC, &type metadata for BrowseSectionDescriptor.EditorialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7838);
  }
  return result;
}

unint64_t sub_23BE1D05C()
{
  unint64_t result;

  result = qword_256AC7840;
  if (!qword_256AC7840)
  {
    result = MEMORY[0x242612B20](&unk_23BE5EDF4, &type metadata for BrowseSectionDescriptor.EditorialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7840);
  }
  return result;
}

unint64_t sub_23BE1D0A4()
{
  unint64_t result;

  result = qword_256AC7848;
  if (!qword_256AC7848)
  {
    result = MEMORY[0x242612B20](&unk_23BE5ED14, &type metadata for BrowseSectionDescriptor.GalleryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7848);
  }
  return result;
}

unint64_t sub_23BE1D0EC()
{
  unint64_t result;

  result = qword_256AC7850;
  if (!qword_256AC7850)
  {
    result = MEMORY[0x242612B20](&unk_23BE5ED3C, &type metadata for BrowseSectionDescriptor.GalleryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7850);
  }
  return result;
}

unint64_t sub_23BE1D134()
{
  unint64_t result;

  result = qword_256AC7858;
  if (!qword_256AC7858)
  {
    result = MEMORY[0x242612B20](&unk_23BE5EFF4, &type metadata for BrowseSectionDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7858);
  }
  return result;
}

unint64_t sub_23BE1D17C()
{
  unint64_t result;

  result = qword_256AC7860;
  if (!qword_256AC7860)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F01C, &type metadata for BrowseSectionDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7860);
  }
  return result;
}

uint64_t sub_23BE1D1C0(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x800000023BE66320 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6961746564 && a2 == 0xE600000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6169726F74696465 && a2 == 0xE90000000000006CLL || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7972656C6C6167 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23BE1D378(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7868);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CreatePlanBannerEnvironment.init(makeWorkoutPlanUpdatedStream:onBannerTapped:queryBannerVisibility:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t destroy for CreatePlanBannerEnvironment()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for CreatePlanBannerEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for CreatePlanBannerEnvironment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_OWORD *assignWithTake for CreatePlanBannerEnvironment(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CreatePlanBannerEnvironment(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CreatePlanBannerEnvironment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CreatePlanBannerEnvironment()
{
  return &type metadata for CreatePlanBannerEnvironment;
}

BOOL static CreatePlanBannerVisibility.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BE1D5F4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E776F6E6B6E75;
  if (*v0 != 1)
    v1 = 0x656C6269736976;
  if (*v0)
    return v1;
  else
    return 0x6E6564646968;
}

uint64_t sub_23BE1D64C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE1E3E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE1D670()
{
  sub_23BE1DA14();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE1D698()
{
  sub_23BE1DA14();
  return sub_23BE5AF18();
}

uint64_t sub_23BE1D6C0()
{
  sub_23BE1DAE0();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE1D6E8()
{
  sub_23BE1DAE0();
  return sub_23BE5AF18();
}

uint64_t sub_23BE1D710()
{
  sub_23BE1DA9C();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE1D738()
{
  sub_23BE1DA9C();
  return sub_23BE5AF18();
}

uint64_t sub_23BE1D760()
{
  sub_23BE1DA58();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE1D788()
{
  sub_23BE1DA58();
  return sub_23BE5AF18();
}

uint64_t CreatePlanBannerVisibility.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7870);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7878);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7880);
  v9 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7888);
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE1DA14();
  sub_23BE5AF00();
  if (v15)
  {
    if (v15 == 1)
    {
      v26 = 1;
      sub_23BE1DA9C();
      sub_23BE5ADF8();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {
      v27 = 2;
      sub_23BE1DA58();
      v16 = v21;
      sub_23BE5ADF8();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }
  else
  {
    v25 = 0;
    sub_23BE1DAE0();
    sub_23BE5ADF8();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

unint64_t sub_23BE1DA14()
{
  unint64_t result;

  result = qword_256AC7890;
  if (!qword_256AC7890)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F69C, &type metadata for CreatePlanBannerVisibility.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7890);
  }
  return result;
}

unint64_t sub_23BE1DA58()
{
  unint64_t result;

  result = qword_256AC7898;
  if (!qword_256AC7898)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F64C, &type metadata for CreatePlanBannerVisibility.VisibleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7898);
  }
  return result;
}

unint64_t sub_23BE1DA9C()
{
  unint64_t result;

  result = qword_256AC78A0;
  if (!qword_256AC78A0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F5FC, &type metadata for CreatePlanBannerVisibility.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC78A0);
  }
  return result;
}

unint64_t sub_23BE1DAE0()
{
  unint64_t result;

  result = qword_256AC78A8;
  if (!qword_256AC78A8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F5AC, &type metadata for CreatePlanBannerVisibility.HiddenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC78A8);
  }
  return result;
}

uint64_t CreatePlanBannerVisibility.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC78B0);
  v34 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC78B8);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC78C0);
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC78C8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE1DA14();
  v13 = v41;
  sub_23BE5AEF4();
  if (v13)
    goto LABEL_7;
  v31 = v6;
  v32 = v10;
  v14 = v39;
  v15 = v40;
  v41 = a1;
  v16 = v12;
  v17 = sub_23BE5ADEC();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = sub_23BE5AD68();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v25 = &type metadata for CreatePlanBannerVisibility;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      v43 = 1;
      sub_23BE1DA9C();
      v20 = v9;
      sub_23BE5AD80();
      v21 = v38;
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }
    else
    {
      v44 = 2;
      sub_23BE1DA58();
      v28 = v15;
      sub_23BE5AD80();
      v21 = v38;
      v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }
  else
  {
    v42 = 0;
    sub_23BE1DAE0();
    sub_23BE5AD80();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    v21 = v38;
  }
  *v21 = v19;
  v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t sub_23BE1DF68@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return CreatePlanBannerVisibility.init(from:)(a1, a2);
}

uint64_t sub_23BE1DF7C(_QWORD *a1)
{
  return CreatePlanBannerVisibility.encode(to:)(a1);
}

uint64_t CreatePlanBannerVisibility.hash(into:)()
{
  return sub_23BE5AEC4();
}

uint64_t CreatePlanBannerVisibility.hashValue.getter()
{
  sub_23BE5AEB8();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

unint64_t sub_23BE1E000()
{
  unint64_t result;

  result = qword_256AC78D0;
  if (!qword_256AC78D0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for CreatePlanBannerVisibility, &type metadata for CreatePlanBannerVisibility);
    atomic_store(result, (unint64_t *)&qword_256AC78D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for CreatePlanBannerVisibility()
{
  return &type metadata for CreatePlanBannerVisibility;
}

uint64_t _s15FitnessBrowsing26CreatePlanBannerVisibilityOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE1E0A8 + 4 * byte_23BE5F2A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE1E0DC + 4 * byte_23BE5F2A0[v4]))();
}

uint64_t sub_23BE1E0DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE1E0E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE1E0ECLL);
  return result;
}

uint64_t sub_23BE1E0F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE1E100);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE1E104(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE1E10C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CreatePlanBannerVisibility.CodingKeys()
{
  return &type metadata for CreatePlanBannerVisibility.CodingKeys;
}

ValueMetadata *type metadata accessor for CreatePlanBannerVisibility.HiddenCodingKeys()
{
  return &type metadata for CreatePlanBannerVisibility.HiddenCodingKeys;
}

ValueMetadata *type metadata accessor for CreatePlanBannerVisibility.UnknownCodingKeys()
{
  return &type metadata for CreatePlanBannerVisibility.UnknownCodingKeys;
}

ValueMetadata *type metadata accessor for CreatePlanBannerVisibility.VisibleCodingKeys()
{
  return &type metadata for CreatePlanBannerVisibility.VisibleCodingKeys;
}

unint64_t sub_23BE1E15C()
{
  unint64_t result;

  result = qword_256AC78D8;
  if (!qword_256AC78D8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F584, &type metadata for CreatePlanBannerVisibility.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC78D8);
  }
  return result;
}

unint64_t sub_23BE1E1A4()
{
  unint64_t result;

  result = qword_256AC78E0;
  if (!qword_256AC78E0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F4A4, &type metadata for CreatePlanBannerVisibility.HiddenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC78E0);
  }
  return result;
}

unint64_t sub_23BE1E1EC()
{
  unint64_t result;

  result = qword_256AC78E8;
  if (!qword_256AC78E8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F4CC, &type metadata for CreatePlanBannerVisibility.HiddenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC78E8);
  }
  return result;
}

unint64_t sub_23BE1E234()
{
  unint64_t result;

  result = qword_256AC78F0;
  if (!qword_256AC78F0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F454, &type metadata for CreatePlanBannerVisibility.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC78F0);
  }
  return result;
}

unint64_t sub_23BE1E27C()
{
  unint64_t result;

  result = qword_256AC78F8;
  if (!qword_256AC78F8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F47C, &type metadata for CreatePlanBannerVisibility.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC78F8);
  }
  return result;
}

unint64_t sub_23BE1E2C4()
{
  unint64_t result;

  result = qword_256AC7900;
  if (!qword_256AC7900)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F404, &type metadata for CreatePlanBannerVisibility.VisibleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7900);
  }
  return result;
}

unint64_t sub_23BE1E30C()
{
  unint64_t result;

  result = qword_256AC7908;
  if (!qword_256AC7908)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F42C, &type metadata for CreatePlanBannerVisibility.VisibleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7908);
  }
  return result;
}

unint64_t sub_23BE1E354()
{
  unint64_t result;

  result = qword_256AC7910;
  if (!qword_256AC7910)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F4F4, &type metadata for CreatePlanBannerVisibility.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7910);
  }
  return result;
}

unint64_t sub_23BE1E39C()
{
  unint64_t result;

  result = qword_256AC7918;
  if (!qword_256AC7918)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F51C, &type metadata for CreatePlanBannerVisibility.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7918);
  }
  return result;
}

uint64_t sub_23BE1E3E0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6564646968 && a2 == 0xE600000000000000;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C6269736976 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BE1E52C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC79B8);
  sub_23BE000F4(&qword_256AC79C0, &qword_256AC79B8, MEMORY[0x24BE2B5E8]);
  return sub_23BE5A774();
}

uint64_t BrowseView.init(store:artworkViewBuilder:canvasViewBuilder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)a7 = sub_23BDF6944;
  *(_QWORD *)(a7 + 8) = result;
  *(_BYTE *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 24) = a3;
  *(_QWORD *)(a7 + 32) = a4;
  *(_QWORD *)(a7 + 40) = a5;
  *(_QWORD *)(a7 + 48) = a6;
  return result;
}

uint64_t sub_23BE1E618()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t BrowseView.body.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t State;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _QWORD v74[2];
  _QWORD v75[2];
  uint64_t v76;
  _QWORD v77[2];
  _QWORD v78[2];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  v62 = a2;
  State = type metadata accessor for BrowseLoadState();
  MEMORY[0x24BDAC7A8](State);
  v60 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC7920);
  v51 = a1[3];
  v6 = sub_23BE5A8DC();
  sub_23BE5A75C();
  v7 = sub_23BE5A8DC();
  v47[1] = v7;
  v8 = sub_23BE5AB04();
  v53 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v47 - v9;
  v11 = sub_23BE5A7EC();
  v59 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v50 = (char *)v47 - v12;
  v49 = v11;
  v13 = sub_23BE5A7EC();
  v61 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v54 = (char *)v47 - v14;
  v15 = sub_23BE000F4(&qword_256AC7928, &qword_256AC7920, MEMORY[0x24BDEFC28]);
  v63 = a1[5];
  v78[0] = v15;
  v78[1] = v63;
  v16 = MEMORY[0x24BDEF3E0];
  v17 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v6, v78);
  v18 = sub_23BE1EBD0();
  v77[0] = v17;
  v77[1] = v18;
  v76 = MEMORY[0x242612B20](v16, v7, v77);
  v75[0] = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v8, &v76);
  v75[1] = MEMORY[0x24BDF0910];
  v19 = MEMORY[0x24BDED308];
  v20 = MEMORY[0x242612B20](MEMORY[0x24BDED308], v11, v75);
  v48 = v20;
  v21 = sub_23BDEE560();
  v74[0] = v20;
  v74[1] = v21;
  v56 = v13;
  v55 = MEMORY[0x242612B20](v19, v13, v74);
  *(_QWORD *)&v79 = v13;
  *((_QWORD *)&v79 + 1) = MEMORY[0x24BEE1328];
  *(_QWORD *)&v80 = v55;
  *((_QWORD *)&v80 + 1) = MEMORY[0x24BEE1340];
  v22 = MEMORY[0x242612AB4](0, &v79, MEMORY[0x24BDF3908], 0);
  v23 = *(_QWORD *)(v22 - 8);
  v57 = v22;
  v58 = v23;
  MEMORY[0x24BDAC7A8](v22);
  v52 = (char *)v47 - v24;
  v25 = v2[1];
  v79 = *v2;
  v80 = v25;
  v81 = v2[2];
  v82 = *((_QWORD *)v2 + 6);
  v47[0] = a1;
  v27 = v51;
  v64 = a1[2];
  v26 = v64;
  v65 = v51;
  v28 = a1[4];
  v29 = v63;
  v66 = v28;
  v67 = v63;
  v68 = &v79;
  sub_23BE5AAF8();
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = v26;
  *(_QWORD *)(v30 + 24) = v27;
  v31 = v27;
  *(_QWORD *)(v30 + 32) = v28;
  *(_QWORD *)(v30 + 40) = v29;
  v32 = v80;
  *(_OWORD *)(v30 + 48) = v79;
  *(_OWORD *)(v30 + 64) = v32;
  *(_OWORD *)(v30 + 80) = v81;
  *(_QWORD *)(v30 + 96) = v82;
  sub_23BE1F7DC((uint64_t)&v79);
  v33 = v50;
  sub_23BE5AA68();
  swift_release();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v10, v8);
  v70 = v79;
  v71 = v80;
  v72 = v81;
  v73 = v82;
  sub_23BE1E52C();
  swift_getKeyPath();
  v34 = (uint64_t)v60;
  sub_23BE5AC0C();
  swift_release();
  swift_release();
  LOBYTE(v27) = BrowseLoadState.preferredInsetBehavior.getter() & 1;
  sub_23BDF2468(v34, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLoadState);
  v35 = v54;
  v36 = v49;
  View.ignoreSafeArea(insetBehavior:)(v27, v49, v48);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v33, v36);
  v70 = v79;
  v71 = v80;
  v72 = v81;
  v73 = v82;
  sub_23BE1E52C();
  swift_getKeyPath();
  sub_23BE5AC0C();
  swift_release();
  swift_release();
  v69 = v70;
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = v26;
  *(_QWORD *)(v37 + 24) = v31;
  v38 = v63;
  *(_QWORD *)(v37 + 32) = v28;
  *(_QWORD *)(v37 + 40) = v38;
  v39 = v80;
  *(_OWORD *)(v37 + 48) = v79;
  *(_OWORD *)(v37 + 64) = v39;
  *(_OWORD *)(v37 + 80) = v81;
  *(_QWORD *)(v37 + 96) = v82;
  sub_23BE1F7DC((uint64_t)&v79);
  v40 = v52;
  v41 = v55;
  v42 = v56;
  v43 = MEMORY[0x24BEE1328];
  v44 = MEMORY[0x24BEE1340];
  sub_23BE5AA80();
  swift_release();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v35, v42);
  *(_QWORD *)&v70 = v42;
  *((_QWORD *)&v70 + 1) = v43;
  *(_QWORD *)&v71 = v41;
  *((_QWORD *)&v71 + 1) = v44;
  swift_getOpaqueTypeConformance2();
  v45 = v57;
  sub_23BE5A9C0();
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v40, v45);
}

unint64_t sub_23BE1EBD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AC7930[0];
  if (!qword_256AC7930[0])
  {
    v1 = sub_23BE5A75C();
    result = MEMORY[0x242612B20](MEMORY[0x24BE35068], v1);
    atomic_store(result, qword_256AC7930);
  }
  return result;
}

void sub_23BE1EC18(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t State;
  __int128 v23;
  _QWORD v24[14];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v26 = a6;
  v11 = sub_23BE5A75C();
  v24[9] = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v24[8] = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v24[4] = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v24[7] = (char *)v24 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC7920);
  v18 = sub_23BE5A8DC();
  v24[12] = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v24[11] = (char *)v24 - v20;
  v24[10] = v17;
  v24[6] = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v24[5] = (char *)v24 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for BrowseLoadState();
  MEMORY[0x24BDAC7A8](State);
  v25 = sub_23BE5A8DC();
  v24[13] = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v23 = a1[1];
  v31 = *a1;
  v32 = v23;
  v33 = a1[2];
  v34 = *((_QWORD *)a1 + 6);
  v24[2] = a2;
  v27 = a2;
  v28 = a3;
  v24[3] = a4;
  v29 = a4;
  v30 = a5;
  type metadata accessor for BrowseView();
}

uint64_t sub_23BE1EE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_23BE1E52C();
  swift_getKeyPath();
  sub_23BE5AC0C();
  swift_release();
  swift_release();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 2) >= 2)
  {
    v10 = v2;
    *(_QWORD *)(v7 - 312) = v0;
    if ((_DWORD)EnumCaseMultiPayload)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA8);
      swift_bridgeObjectRelease();
      v15 = sub_23BDF2468(v6, (uint64_t (*)(_QWORD))type metadata accessor for BrowseContent);
      v16 = *(_QWORD *)(v7 - 352);
      (*(void (**)(uint64_t))(v5 + 40))(v15);
      v17 = *(_QWORD *)(v7 - 328);
      sub_23BE00160(v16, v4, v17);
      v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 376) + 8);
      v18(v16, v4);
      sub_23BDF639C(v17, v4, v16);
      v19 = sub_23BE000F4(&qword_256AC7928, &qword_256AC7920, MEMORY[0x24BDEFC28]);
      v20 = *(_QWORD *)(v7 - 296);
      sub_23BDF6478(v16, *(_QWORD *)(v7 - 304), v4);
      v18(v16, v4);
      *(_QWORD *)(v7 - 240) = v19;
      *(_QWORD *)(v7 - 232) = v3;
      MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v10, v7 - 240);
      sub_23BE1EBD0();
      sub_23BDF63B4(v20, v10);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 288) + 8))(v20, v10);
      v18(v17, v4);
    }
    else
    {
      MEMORY[0x24BDAC7A8](EnumCaseMultiPayload);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC79C8);
      sub_23BE1FE94();
      v11 = *(_QWORD *)(v7 - 344);
      sub_23BE5A8E8();
      swift_bridgeObjectRelease();
      v12 = sub_23BE000F4(&qword_256AC7928, &qword_256AC7920, MEMORY[0x24BDEFC28]);
      v13 = *(_QWORD *)(v7 - 296);
      v14 = *(_QWORD *)(v7 - 304);
      sub_23BDF63B4(v11, v14);
      *(_QWORD *)(v7 - 256) = v12;
      *(_QWORD *)(v7 - 248) = v3;
      MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v2, v7 - 256);
      sub_23BE1EBD0();
      sub_23BDF63B4(v13, v2);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 288) + 8))(v13, v2);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 336) + 8))(v11, v14);
    }
  }
  else
  {
    v9 = *(_QWORD *)(v7 - 320);
    sub_23BE5A750();
    *(_QWORD *)(v7 - 192) = sub_23BE000F4(&qword_256AC7928, &qword_256AC7920, MEMORY[0x24BDEFC28]);
    *(_QWORD *)(v7 - 184) = v3;
    MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v2, v7 - 192);
    sub_23BE1EBD0();
    sub_23BDF6478(v9, v2, v0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 312) + 8))(v9, v0);
    v10 = v2;
  }
  *(_QWORD *)(v7 - 208) = sub_23BE000F4(&qword_256AC7928, &qword_256AC7920, MEMORY[0x24BDEFC28]);
  *(_QWORD *)(v7 - 200) = v3;
  v21 = MEMORY[0x24BDEF3E0];
  v22 = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v10, v7 - 208);
  v23 = sub_23BE1EBD0();
  *(_QWORD *)(v7 - 224) = v22;
  *(_QWORD *)(v7 - 216) = v23;
  v24 = v21;
  v25 = *(_QWORD *)(v7 - 272);
  MEMORY[0x242612B20](v24, v25, v7 - 224);
  sub_23BDF639C(v1, v25, *(_QWORD *)(v7 - 264));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 280) + 8))(v1, v25);
}

void sub_23BE1F2D0(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23BE1EC18(*(__int128 **)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_23BE1F2E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  sub_23BE5A894();
  result = sub_23BE5A9A8();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  *(_QWORD *)(a1 + 24) = v5;
  return result;
}

void sub_23BE1F354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23BE5A6FC();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_23BE5AC90();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23BE5AC78();
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for BrowseView();
}

__n128 sub_23BE1F45C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  id v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  __int128 v16;
  char v17;

  sub_23BE1E52C();
  swift_getKeyPath();
  sub_23BE5AC0C();
  swift_release();
  swift_release();
  if (*(_BYTE *)(v2 - 144) == 1)
  {
    sub_23BE5AC6C();
    sub_23BE5AC60();
    sub_23BE5AC54();
    sub_23BE5AC60();
    sub_23BE5AC84();
    if (qword_256AC63C0 != -1)
      swift_once();
    v3 = (void *)qword_256ADEB20;
    v4 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v2 - 144) = *(_OWORD *)v1;
    *(_OWORD *)(v2 - 128) = v4;
    *(_OWORD *)(v2 - 112) = *(_OWORD *)(v1 + 32);
    *(_QWORD *)(v2 - 96) = *(_QWORD *)(v1 + 48);
    v5 = v3;
    sub_23BE1E52C();
    swift_getKeyPath();
    sub_23BE5AC0C();
    swift_release();
    swift_release();
    *(_QWORD *)(v2 - 184) = sub_23BE5A990();
    *(_QWORD *)(v2 - 176) = v6;
    *(_QWORD *)(v2 - 168) = v7 & 1;
    *(_QWORD *)(v2 - 160) = v8;
    *(_BYTE *)(v2 - 152) = 0;
  }
  else
  {
    sub_23BE5AC48();
    if (qword_256AC63C0 != -1)
      swift_once();
    v9 = (void *)qword_256ADEB20;
    v10 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v2 - 144) = *(_OWORD *)v1;
    *(_OWORD *)(v2 - 128) = v10;
    *(_OWORD *)(v2 - 112) = *(_OWORD *)(v1 + 32);
    *(_QWORD *)(v2 - 96) = *(_QWORD *)(v1 + 48);
    v11 = v9;
    sub_23BE1E52C();
    swift_getKeyPath();
    sub_23BE5AC0C();
    swift_release();
    swift_release();
    *(_QWORD *)(v2 - 184) = sub_23BE5A990();
    *(_QWORD *)(v2 - 176) = v13;
    *(_QWORD *)(v2 - 168) = v12 & 1;
    *(_QWORD *)(v2 - 160) = v14;
    *(_BYTE *)(v2 - 152) = 1;
  }
  sub_23BE5A8D0();
  result = *(__n128 *)(v2 - 144);
  v16 = *(_OWORD *)(v2 - 128);
  v17 = *(_BYTE *)(v2 - 112);
  *(__n128 *)v0 = result;
  *(_OWORD *)(v0 + 16) = v16;
  *(_BYTE *)(v0 + 32) = v17;
  return result;
}

void sub_23BE1F6DC()
{
  uint64_t v0;

  v0 = type metadata accessor for BrowseAction();
  MEMORY[0x24BDAC7A8](v0);
  type metadata accessor for BrowseView();
}

uint64_t sub_23BE1F778()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_23BE1E52C();
  swift_storeEnumTagMultiPayload();
  sub_23BE5AC18();
  swift_release();
  return sub_23BDF2468(v1, v0);
}

uint64_t sub_23BE1F7D0()
{
  return sub_23BE1F8F4((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BE1F6DC);
}

uint64_t sub_23BE1F7DC(uint64_t a1)
{
  sub_23BDFE7B4();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_23BE1F82C()
{
  sub_23BE5ABC4();
  sub_23BE5A7D4();
  return swift_release();
}

uint64_t objectdestroy_2Tm_0()
{
  sub_23BDFE750();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BE1F8E8()
{
  return sub_23BE1F8F4((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BE1F82C);
}

uint64_t sub_23BE1F8F4(uint64_t (*a1)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1 + 6, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_23BE1F908()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BE1F93C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BE1F944()
{
  sub_23BDFE750();
  swift_release();
  return swift_release();
}

uint64_t sub_23BE1F97C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  sub_23BDFE7B4();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = a2[3];
  v7 = a2[6];
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_QWORD *)(a1 + 48) = v7;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_23BE1F9F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  sub_23BDFE7B4();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_23BDFE750();
  v7 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v7;
  swift_retain();
  swift_release();
  v8 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23BE1FA88(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_23BDFE750();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t sub_23BE1FAEC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_23BE1FB34(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for BrowseView()
{
  JUMPOUT(0x242612A84);
}

uint64_t sub_23BE1FB8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t OpaqueTypeConformance2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t v21;
  _QWORD v22[2];
  _QWORD v23[2];

  v1 = *(_QWORD *)(a1 + 24);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC7920);
  v2 = sub_23BE5A8DC();
  sub_23BE5A75C();
  v3 = sub_23BE5A8DC();
  v4 = sub_23BE5AB04();
  v5 = sub_23BE5A7EC();
  v6 = sub_23BE5A7EC();
  v23[0] = sub_23BE000F4(&qword_256AC7928, &qword_256AC7920, MEMORY[0x24BDEFC28]);
  v23[1] = v1;
  v7 = MEMORY[0x24BDEF3E0];
  v22[0] = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v2, v23);
  v22[1] = sub_23BE1EBD0();
  v21 = MEMORY[0x242612B20](v7, v3, v22);
  v20[0] = MEMORY[0x242612B20](MEMORY[0x24BDF3F50], v4, &v21);
  v20[1] = MEMORY[0x24BDF0910];
  v8 = MEMORY[0x24BDED308];
  v19[0] = MEMORY[0x242612B20](MEMORY[0x24BDED308], v5, v20);
  v19[1] = sub_23BDEE560();
  v9 = MEMORY[0x242612B20](v8, v6, v19);
  v10 = MEMORY[0x24BEE1328];
  v15 = v6;
  v16 = MEMORY[0x24BEE1328];
  v11 = MEMORY[0x24BEE1340];
  v17 = v9;
  v18 = MEMORY[0x24BEE1340];
  v12 = MEMORY[0x242612AB4](255, &v15, MEMORY[0x24BDF3908], 0);
  v15 = v6;
  v16 = v10;
  v17 = v9;
  v18 = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v15 = v12;
  v16 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2();
}

void sub_23BE1FD60()
{
  uint64_t v0;

  v0 = type metadata accessor for BrowseAction();
  MEMORY[0x24BDAC7A8](v0);
  type metadata accessor for BrowseView();
}

uint64_t sub_23BE1FE04()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_23BE1E52C();
  swift_storeEnumTagMultiPayload();
  sub_23BE5AC18();
  swift_release();
  return sub_23BDF2468(v1, v0);
}

void sub_23BE1FE60()
{
  sub_23BE1FD60();
}

void sub_23BE1FE80()
{
  sub_23BE1F354();
}

unint64_t sub_23BE1FE94()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AC79D0;
  if (!qword_256AC79D0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC79C8);
    v2[0] = MEMORY[0x24BDF1F80];
    v2[1] = MEMORY[0x24BDF1F80];
    result = MEMORY[0x242612B20](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AC79D0);
  }
  return result;
}

__n128 CreatePlanBannerFeature.init(environment:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t CreatePlanBannerFeature.dispose(localState:sharedState:)(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t CreatePlanBannerFeature.reduce(localState:sharedState:sideEffects:action:)(uint64_t a1, uint64_t a2, char **a3, unsigned __int8 *a4)
{
  __int128 *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  char *v21;
  int v22;
  __int128 v23;
  int *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  int *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, _QWORD, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  char *v51;
  char *v52;
  _OWORD *v53;
  __int128 v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  int *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  unint64_t v72;
  void (*v73)(char *, _QWORD, uint64_t);
  uint64_t v74;
  unsigned int v75;
  char *v76;
  unsigned int v77;
  unint64_t v78;
  char v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC79D8);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v70 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v70 - v17;
  result = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v70 - v20;
  v22 = *a4;
  v23 = v4[1];
  v80 = *v4;
  v81 = v23;
  v82 = v4[2];
  switch(v22)
  {
    case 5:
      if (*(_BYTE *)(a2 + 56) == 1)
      {
        v37 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AC79E0);
        v38 = &v15[v37[16]];
        v76 = &v15[v37[20]];
        v39 = &v15[v37[24]];
        v79 = 3;
        v78 = sub_23BE206A0();
        sub_23BE5AD38();
        v40 = *MEMORY[0x24BE2B580];
        v41 = sub_23BE5AC00();
        v42 = *(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v41 - 8) + 104);
        v77 = v40;
        v73 = v42;
        v74 = v41;
        ((void (*)(char *, uint64_t))v42)(v38, v40);
        *(_QWORD *)v39 = &unk_256AC79F0;
        *((_QWORD *)v39 + 1) = 0;
        sub_23BE5ACF0();
        v43 = *MEMORY[0x24BE2B558];
        v44 = sub_23BE5ABF4();
        v70 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 104);
        v70(v76, v43, v44);
        v45 = *(char **)(v9 + 104);
        v75 = *MEMORY[0x24BE2B438];
        v76 = v45;
        ((void (*)(char *))v45)(v15);
        v46 = *a3;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v46 = (char *)sub_23BE213E4(0, *((_QWORD *)v46 + 2) + 1, 1, v46, &qword_256AC7A70, &qword_256AC79D8);
        v48 = *((_QWORD *)v46 + 2);
        v47 = *((_QWORD *)v46 + 3);
        if (v48 >= v47 >> 1)
          v46 = (char *)sub_23BE213E4(v47 > 1, v48 + 1, 1, v46, &qword_256AC7A70, &qword_256AC79D8);
        *((_QWORD *)v46 + 2) = v48 + 1;
        v72 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
        v71 = *(_QWORD *)(v9 + 72);
        v49 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v49(&v46[v72 + v71 * v48], v15, v8);
        *a3 = v46;
        v50 = &v12[v37[16]];
        v51 = &v12[v37[20]];
        v52 = &v12[v37[24]];
        v79 = 1;
        sub_23BE5AD38();
        sub_23BE5ACF0();
        v73(v50, v77, v74);
        v70(v51, *MEMORY[0x24BE2B550], v44);
        v53 = (_OWORD *)swift_allocObject();
        v54 = v81;
        v53[1] = v80;
        v53[2] = v54;
        v53[3] = v82;
        *(_QWORD *)v52 = &unk_256AC7A00;
        *((_QWORD *)v52 + 1) = v53;
        ((void (*)(char *, _QWORD, uint64_t))v76)(v12, v75, v8);
        v55 = *a3;
        sub_23BE21048((uint64_t)&v80);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v55 = (char *)sub_23BE213E4(0, *((_QWORD *)v55 + 2) + 1, 1, v55, &qword_256AC7A70, &qword_256AC79D8);
        v57 = *((_QWORD *)v55 + 2);
        v56 = *((_QWORD *)v55 + 3);
        if (v57 >= v56 >> 1)
          v55 = (char *)sub_23BE213E4(v56 > 1, v57 + 1, 1, v55, &qword_256AC7A70, &qword_256AC79D8);
        *((_QWORD *)v55 + 2) = v57 + 1;
        result = ((uint64_t (*)(char *, char *, uint64_t))v49)(&v55[v72 + v57 * v71], v12, v8);
        *a3 = v55;
      }
      break;
    case 4:
      v58 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AC79E0);
      v59 = &v18[v58[16]];
      v60 = &v18[v58[20]];
      v61 = &v18[v58[24]];
      v79 = 0;
      sub_23BE206A0();
      sub_23BE5AD38();
      v62 = *MEMORY[0x24BE2B570];
      v63 = sub_23BE5AC00();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 104))(v59, v62, v63);
      v64 = (_OWORD *)swift_allocObject();
      v65 = v81;
      v64[1] = v80;
      v64[2] = v65;
      v64[3] = v82;
      *(_QWORD *)v61 = &unk_256AC7A10;
      *((_QWORD *)v61 + 1) = v64;
      sub_23BE21048((uint64_t)&v80);
      sub_23BE5ACF0();
      v66 = *MEMORY[0x24BE2B558];
      v67 = sub_23BE5ABF4();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 104))(v60, v66, v67);
      (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v18, *MEMORY[0x24BE2B438], v8);
      v34 = *a3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v34 = (char *)sub_23BE213E4(0, *((_QWORD *)v34 + 2) + 1, 1, v34, &qword_256AC7A70, &qword_256AC79D8);
      v69 = *((_QWORD *)v34 + 2);
      v68 = *((_QWORD *)v34 + 3);
      if (v69 >= v68 >> 1)
        v34 = (char *)sub_23BE213E4(v68 > 1, v69 + 1, 1, v34, &qword_256AC7A70, &qword_256AC79D8);
      *((_QWORD *)v34 + 2) = v69 + 1;
      result = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(&v34[((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v69], v18, v8);
      goto LABEL_24;
    case 3:
      v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AC79E0);
      v25 = &v21[v24[16]];
      v26 = &v21[v24[20]];
      v27 = &v21[v24[24]];
      v79 = 2;
      sub_23BE206A0();
      sub_23BE5AD38();
      v28 = *MEMORY[0x24BE2B580];
      v29 = sub_23BE5AC00();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v25, v28, v29);
      v30 = (_OWORD *)swift_allocObject();
      v31 = v81;
      v30[1] = v80;
      v30[2] = v31;
      v30[3] = v82;
      *(_QWORD *)v27 = &unk_256AC7A20;
      *((_QWORD *)v27 + 1) = v30;
      sub_23BE21048((uint64_t)&v80);
      sub_23BE5ACF0();
      v32 = *MEMORY[0x24BE2B558];
      v33 = sub_23BE5ABF4();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v26, v32, v33);
      (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v21, *MEMORY[0x24BE2B438], v8);
      v34 = *a3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v34 = (char *)sub_23BE213E4(0, *((_QWORD *)v34 + 2) + 1, 1, v34, &qword_256AC7A70, &qword_256AC79D8);
      v36 = *((_QWORD *)v34 + 2);
      v35 = *((_QWORD *)v34 + 3);
      if (v36 >= v35 >> 1)
        v34 = (char *)sub_23BE213E4(v35 > 1, v36 + 1, 1, v34, &qword_256AC7A70, &qword_256AC79D8);
      *((_QWORD *)v34 + 2) = v36 + 1;
      result = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(&v34[((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v36], v21, v8);
LABEL_24:
      *a3 = v34;
      return result;
    default:
      *(_BYTE *)(a2 + 56) = v22;
      break;
  }
  return result;
}

unint64_t sub_23BE206A0()
{
  unint64_t result;

  result = qword_256AC79E8;
  if (!qword_256AC79E8)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F8D0, &type metadata for CreatePlanBannerFeature.TaskIdentifier);
    atomic_store(result, (unint64_t *)&qword_256AC79E8);
  }
  return result;
}

uint64_t sub_23BE206E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *);

  v2[2] = a1;
  v2[3] = sub_23BE5ACE4();
  v2[4] = sub_23BE5ACD8();
  v6 = (uint64_t (*)(_QWORD *))(**(int **)(a2 + 32) + *(_QWORD *)(a2 + 32));
  v4 = (_QWORD *)swift_task_alloc();
  v2[5] = v4;
  *v4 = v2;
  v4[1] = sub_23BE2076C;
  return v6(v2 + 10);
}

uint64_t sub_23BE2076C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc();
  *(_QWORD *)(v2 + 56) = sub_23BE5ACC0();
  *(_QWORD *)(v2 + 64) = v3;
  return swift_task_switch();
}

uint64_t sub_23BE207F8()
{
  uint64_t v0;
  _QWORD *v1;

  *(_BYTE *)(v0 + 81) = *(_BYTE *)(v0 + 80);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7A68);
  *v1 = v0;
  v1[1] = sub_23BE20870;
  return sub_23BE5ABE8();
}

uint64_t sub_23BE20870()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BE208BC()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BE208F0()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BE20924(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v2[2] = sub_23BE5ACE4();
  v2[3] = sub_23BE5ACD8();
  v6 = (uint64_t (*)(void))(**(int **)(a2 + 16) + *(_QWORD *)(a2 + 16));
  v4 = (_QWORD *)swift_task_alloc();
  v2[4] = v4;
  *v4 = v2;
  v4[1] = sub_23BE20998;
  return v6();
}

uint64_t sub_23BE20998()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  sub_23BE5ACC0();
  return swift_task_switch();
}

uint64_t sub_23BE20A20()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BE20A54()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BE20A88()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = sub_23BE5ACE4();
  *(_QWORD *)(v0 + 24) = sub_23BE5ACD8();
  *(_BYTE *)(v0 + 40) = 3;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7A68);
  *v1 = v0;
  v1[1] = sub_23BE20B1C;
  return sub_23BE5ABE8();
}

uint64_t sub_23BE20B1C()
{
  swift_task_dealloc();
  sub_23BE5ACC0();
  return swift_task_switch();
}

uint64_t sub_23BE20B8C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *);

  v2[12] = a1;
  v2[13] = sub_23BE5ACE4();
  v2[14] = sub_23BE5ACD8();
  v6 = (uint64_t (*)(_QWORD *))(*(int *)*a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  v2[15] = v4;
  *v4 = v2;
  v4[1] = sub_23BE20C14;
  return v6(v2 + 7);
}

uint64_t sub_23BE20C14()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_task_dealloc();
  *(_QWORD *)(v1 + 128) = sub_23BE5ACC0();
  *(_QWORD *)(v1 + 136) = v2;
  return swift_task_switch();
}

uint64_t sub_23BE20C88()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[10];
  v2 = __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = swift_task_alloc();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 16))(v4, v2, v1);
  v0[5] = swift_getAssociatedTypeWitness();
  v0[6] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  sub_23BE5AD08();
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  v0[18] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v5 = (_QWORD *)swift_task_alloc();
  v0[19] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23BE20DE8;
  return sub_23BE5ACCC();
}

uint64_t sub_23BE20DE8()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23BE20E3C()
{
  uint64_t v0;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 168) == 1)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_BYTE *)(v0 + 169) = 3;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7A68);
    *v2 = v0;
    v2[1] = sub_23BE20EF0;
    return sub_23BE5ABE8();
  }
}

uint64_t sub_23BE20EF0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BE20F3C()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[18] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[19] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_23BE20DE8;
  return sub_23BE5ACCC();
}

void sub_23BE20FE0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 56) = 1;
}

uint64_t sub_23BE20FF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BE2174C;
  return sub_23BE20B8C(a1, (_QWORD *)(v1 + 16));
}

uint64_t sub_23BE21048(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_23BE21094(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BE210E8;
  return sub_23BE20924(a1, v1 + 16);
}

uint64_t sub_23BE210E8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BE21168(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BE2174C;
  return sub_23BE206E4(a1, v1 + 16);
}

unint64_t sub_23BE211C0()
{
  unint64_t result;

  result = qword_256AC7A28;
  if (!qword_256AC7A28)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for CreatePlanBannerAction, &type metadata for CreatePlanBannerAction);
    atomic_store(result, (unint64_t *)&qword_256AC7A28);
  }
  return result;
}

unint64_t sub_23BE21208()
{
  unint64_t result;

  result = qword_256AC7A30;
  if (!qword_256AC7A30)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for CreatePlanBannerAction, &type metadata for CreatePlanBannerAction);
    atomic_store(result, (unint64_t *)&qword_256AC7A30);
  }
  return result;
}

unint64_t sub_23BE21250()
{
  unint64_t result;

  result = qword_256AC7A38;
  if (!qword_256AC7A38)
  {
    result = MEMORY[0x242612B20](MEMORY[0x24BE2B430], MEMORY[0x24BE2B428]);
    atomic_store(result, (unint64_t *)&qword_256AC7A38);
  }
  return result;
}

ValueMetadata *type metadata accessor for CreatePlanBannerFeature()
{
  return &type metadata for CreatePlanBannerFeature;
}

uint64_t storeEnumTagSinglePayload for CreatePlanBannerFeature.TaskIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BE212F4 + 4 * byte_23BE5F805[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BE21328 + 4 * byte_23BE5F800[v4]))();
}

uint64_t sub_23BE21328(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE21330(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE21338);
  return result;
}

uint64_t sub_23BE21344(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE2134CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BE21350(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE21358(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CreatePlanBannerFeature.TaskIdentifier()
{
  return &type metadata for CreatePlanBannerFeature.TaskIdentifier;
}

unint64_t sub_23BE21378()
{
  unint64_t result;

  result = qword_256AC7A40;
  if (!qword_256AC7A40)
  {
    result = MEMORY[0x242612B20](&unk_23BE5F8A8, &type metadata for CreatePlanBannerFeature.TaskIdentifier);
    atomic_store(result, (unint64_t *)&qword_256AC7A40);
  }
  return result;
}

size_t sub_23BE213BC(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_23BE2156C(a1, a2, a3, a4, &qword_256AC7A50, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
}

size_t sub_23BE213D0(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_23BE213E4(a1, a2, a3, a4, &qword_256AC7A58, &qword_256AC7A60);
}

size_t sub_23BE213E4(size_t result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_29;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  v18 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  if ((v8 & 1) != 0)
  {
    if (v16 < a4
      || (v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(_QWORD *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v16;
}

size_t sub_23BE21558(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_23BE2156C(a1, a2, a3, a4, &qword_256AC7A48, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
}

size_t sub_23BE2156C(size_t result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_29;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  v18 = *(_QWORD *)(a6(0) - 8);
  if ((v8 & 1) != 0)
  {
    if (v16 < a4
      || (v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(_QWORD *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v16;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void *static BrowseFontSymbolicTrait.allCases.getter()
{
  return &unk_250CDDB50;
}

uint64_t BrowseFontSymbolicTrait.rawValue.getter(char a1)
{
  if (a1)
    return 0xD000000000000011;
  else
    return 0x6C6F427469617274;
}

uint64_t sub_23BE217C4(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v2 = *a1;
  v3 = 0x800000023BE65FA0;
  if (v2 == 1)
    v4 = 0x800000023BE65FA0;
  else
    v4 = 0x800000023BE65FC0;
  if (*a1)
    v5 = 0xD000000000000011;
  else
    v5 = 0x6C6F427469617274;
  if (v2)
    v6 = v4;
  else
    v6 = 0xE900000000000064;
  if (*a2 != 1)
    v3 = 0x800000023BE65FC0;
  if (*a2)
    v7 = 0xD000000000000011;
  else
    v7 = 0x6C6F427469617274;
  if (*a2)
    v8 = v3;
  else
    v8 = 0xE900000000000064;
  if (v5 == v7 && v6 == v8)
    v9 = 1;
  else
    v9 = sub_23BE5AE58();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_23BE21898@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s15FitnessBrowsing23BrowseFontSymbolicTraitO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

void sub_23BE218C4(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;

  v2 = *v1;
  v3 = 0xE900000000000064;
  v4 = 0x800000023BE65FA0;
  if (v2 != 1)
    v4 = 0x800000023BE65FC0;
  v5 = v2 == 0;
  if (*v1)
    v6 = 0xD000000000000011;
  else
    v6 = 0x6C6F427469617274;
  if (!v5)
    v3 = v4;
  *a1 = v6;
  a1[1] = v3;
}

void sub_23BE21930(_QWORD *a1@<X8>)
{
  *a1 = &unk_250CDDB78;
}

uint64_t sub_23BE21940()
{
  sub_23BE21D70();
  return sub_23BE5ACB4();
}

uint64_t sub_23BE2199C()
{
  sub_23BE21D70();
  return sub_23BE5ACA8();
}

uint64_t sub_23BE219E8()
{
  sub_23BE5AEB8();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE21A94()
{
  sub_23BE5AC9C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BE21B1C()
{
  sub_23BE5AEB8();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing23BrowseFontSymbolicTraitO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_23BE5AD74();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

unint64_t sub_23BE21C10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AC7A78;
  if (!qword_256AC7A78)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC7A80);
    result = MEMORY[0x242612B20](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256AC7A78);
  }
  return result;
}

unint64_t sub_23BE21C60()
{
  unint64_t result;

  result = qword_256AC7A88;
  if (!qword_256AC7A88)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontSymbolicTrait, &type metadata for BrowseFontSymbolicTrait);
    atomic_store(result, (unint64_t *)&qword_256AC7A88);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrowseFontSymbolicTrait(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE21CF0 + 4 * byte_23BE5F915[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE21D24 + 4 * byte_23BE5F910[v4]))();
}

uint64_t sub_23BE21D24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE21D2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE21D34);
  return result;
}

uint64_t sub_23BE21D40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE21D48);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE21D4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE21D54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseFontSymbolicTrait()
{
  return &type metadata for BrowseFontSymbolicTrait;
}

unint64_t sub_23BE21D70()
{
  unint64_t result;

  result = qword_256AC7A90;
  if (!qword_256AC7A90)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontSymbolicTrait, &type metadata for BrowseFontSymbolicTrait);
    atomic_store(result, (unint64_t *)&qword_256AC7A90);
  }
  return result;
}

uint64_t BrowseEditorialDescriptor.content.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BrowseEditorialDescriptor.displayStyle.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t BrowseEditorialDescriptor.galleryDestination.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 10);
}

uint64_t BrowseEditorialDescriptor.galleryDisplayStyle.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 11);
}

uint64_t BrowseEditorialDescriptor.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BrowseEditorialDescriptor.preferredInsetBehavior.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t BrowseEditorialDescriptor.subtitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for BrowseEditorialDescriptor() + 40);
  return sub_23BDF2358(v3, a1);
}

uint64_t BrowseEditorialDescriptor.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrowseEditorialDescriptor() + 44);
  v4 = sub_23BE5A678();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t BrowseEditorialDescriptor.init(content:displayStyle:galleryDestination:galleryDisplayStyle:identifier:preferredInsetBehavior:subtitle:title:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a9 = a1;
  *(_BYTE *)(a9 + 8) = a2 & 1;
  *(_BYTE *)(a9 + 9) = a3;
  *(_BYTE *)(a9 + 10) = a4;
  *(_BYTE *)(a9 + 11) = a5;
  *(_QWORD *)(a9 + 16) = a6;
  *(_QWORD *)(a9 + 24) = a7;
  *(_BYTE *)(a9 + 32) = a8;
  v12 = type metadata accessor for BrowseEditorialDescriptor();
  sub_23BE23118(a10, a9 + *(int *)(v12 + 40));
  v13 = a9 + *(int *)(v12 + 44);
  v14 = sub_23BE5A678();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a11, v14);
}

uint64_t sub_23BE21F2C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE21F60
                                                            + 4 * asc_23BE5FA70[a1]))(0x746E65746E6F63, 0xE700000000000000);
}

uint64_t sub_23BE21F60()
{
  return 0x5379616C70736964;
}

unint64_t sub_23BE21F80()
{
  return 0xD000000000000012;
}

unint64_t sub_23BE21F9C()
{
  return 0xD000000000000013;
}

uint64_t sub_23BE21FF0()
{
  return 0x656C746974627573;
}

uint64_t sub_23BE22008()
{
  return 0x656C746974;
}

uint64_t sub_23BE2201C()
{
  unsigned __int8 *v0;

  return sub_23BE21F2C(*v0);
}

uint64_t sub_23BE22024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE23F78(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BE22048(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_23BE22054()
{
  sub_23BE23160();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE2207C()
{
  sub_23BE23160();
  return sub_23BE5AF18();
}

uint64_t BrowseEditorialDescriptor.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;
  char v12;
  char v13;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7A98);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE23160();
  sub_23BE5AF00();
  v9 = *((_BYTE *)v3 + 8);
  v11 = *v3;
  v12 = v9;
  v13 = 0;
  sub_23BE231A4();
  sub_23BE5AE4C();
  if (!v2)
  {
    LOBYTE(v11) = *((_BYTE *)v3 + 9);
    v13 = 1;
    sub_23BE01D74();
    sub_23BE5AE4C();
    LOBYTE(v11) = *((_BYTE *)v3 + 10);
    v13 = 2;
    sub_23BE231E8();
    sub_23BE5AE1C();
    LOBYTE(v11) = *((_BYTE *)v3 + 11);
    v13 = 3;
    sub_23BE5AE4C();
    LOBYTE(v11) = 4;
    sub_23BE5AE28();
    LOBYTE(v11) = *((_BYTE *)v3 + 32);
    v13 = 5;
    sub_23BE2322C();
    sub_23BE5AE1C();
    type metadata accessor for BrowseEditorialDescriptor();
    LOBYTE(v11) = 6;
    sub_23BE5A678();
    sub_23BDF23E4(&qword_256AC6B10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5B8]);
    sub_23BE5AE1C();
    LOBYTE(v11) = 7;
    sub_23BE5AE4C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t BrowseEditorialDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  char v34;
  char v35;

  v27 = a2;
  v29 = sub_23BE5A678();
  v26 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v28 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7AC0);
  v7 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BrowseEditorialDescriptor();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v31 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_23BE23160();
  v14 = v32;
  sub_23BE5AEF4();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  v32 = v6;
  v15 = v7;
  v16 = v29;
  v17 = (uint64_t)v12;
  v35 = 0;
  sub_23BE23270();
  v18 = v30;
  sub_23BE5ADE0();
  v19 = v34;
  *(_QWORD *)v17 = v33;
  *(_BYTE *)(v17 + 8) = v19;
  v35 = 1;
  v20 = sub_23BE02BA0();
  sub_23BE5ADE0();
  v25 = v20;
  *(_BYTE *)(v17 + 9) = v33;
  v35 = 2;
  sub_23BE232B4();
  sub_23BE5ADB0();
  *(_BYTE *)(v17 + 10) = v33;
  v35 = 3;
  sub_23BE5ADE0();
  *(_BYTE *)(v17 + 11) = v33;
  LOBYTE(v33) = 4;
  *(_QWORD *)(v17 + 16) = sub_23BE5ADBC();
  *(_QWORD *)(v17 + 24) = v21;
  v35 = 5;
  sub_23BE232F8();
  sub_23BE5ADB0();
  *(_BYTE *)(v17 + 32) = v33;
  LOBYTE(v33) = 6;
  sub_23BDF23E4(&qword_256AC6B88, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5D0]);
  v22 = (uint64_t)v32;
  sub_23BE5ADB0();
  sub_23BE23118(v22, v17 + *(int *)(v10 + 40));
  LOBYTE(v33) = 7;
  v23 = v28;
  sub_23BE5ADE0();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v17 + *(int *)(v10 + 44), v23, v16);
  sub_23BE2333C(v17, v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  return sub_23BE23380(v17);
}

uint64_t sub_23BE22814@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseEditorialDescriptor.init(from:)(a1, a2);
}

uint64_t sub_23BE22828(_QWORD *a1)
{
  return BrowseEditorialDescriptor.encode(to:)(a1);
}

uint64_t BrowseEditorialDescriptor.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;

  v2 = v1;
  v4 = sub_23BE5A678();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)v1;
  if ((v1[8] & 1) != 0)
  {
    sub_23BE5AEC4();
    swift_bridgeObjectRetain();
    sub_23BDF1AA4(a1, v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BE5AEC4();
    sub_23BE5AEC4();
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v17 = v7;
      v18 = v5;
      swift_bridgeObjectRetain();
      v13 = v11 + 48;
      do
      {
        v14 = *(_QWORD *)(v13 - 16);
        v13 += 24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_23BDF1AA4(a1, v14);
        sub_23BE5AC9C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      v7 = v17;
      v5 = v18;
    }
  }
  BrowseDisplayStyle.rawValue.getter(v2[9]);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  if (v2[10] == 2)
  {
    sub_23BE5AED0();
  }
  else
  {
    sub_23BE5AED0();
    sub_23BE5AEC4();
  }
  BrowseDisplayStyle.rawValue.getter(v2[11]);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  if (v2[32] == 2)
  {
    sub_23BE5AED0();
  }
  else
  {
    sub_23BE5AED0();
    sub_23BE5AEC4();
  }
  v15 = type metadata accessor for BrowseEditorialDescriptor();
  sub_23BDF2358((uint64_t)&v2[*(int *)(v15 + 40)], (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
  return sub_23BE5AC30();
}

uint64_t BrowseEditorialDescriptor.hashValue.getter()
{
  _BYTE v1[72];

  sub_23BE5AEB8();
  BrowseEditorialDescriptor.hash(into:)((uint64_t)v1);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE22BA4()
{
  _BYTE v1[72];

  sub_23BE5AEB8();
  BrowseEditorialDescriptor.hash(into:)((uint64_t)v1);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE22BE4()
{
  _BYTE v1[72];

  sub_23BE5AEB8();
  BrowseEditorialDescriptor.hash(into:)((uint64_t)v1);
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing25BrowseEditorialDescriptorV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  int v29;
  int v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  void (*v47)(_BYTE *, uint64_t);
  _BYTE v48[12];
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;

  v4 = sub_23BE5A678();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v48[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D20);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v48[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = &v48[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = &v48[-v16];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v48[-v18];
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD *)a2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0 || (sub_23BDEFCC4(v20, v21) & 1) == 0)
      goto LABEL_34;
  }
  else if ((*(_BYTE *)(a2 + 8) & 1) != 0 || (sub_23BDEF064(v20, v21) & 1) == 0)
  {
    goto LABEL_34;
  }
  v52 = v5;
  v53 = v10;
  v51 = v4;
  v22 = *(_BYTE *)(a2 + 9);
  v23 = BrowseDisplayStyle.rawValue.getter(*(_BYTE *)(a1 + 9));
  v25 = v24;
  if (v23 == BrowseDisplayStyle.rawValue.getter(v22) && v25 == v26)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v27 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = 0;
    if ((v27 & 1) == 0)
      return v28 & 1;
  }
  v29 = *(unsigned __int8 *)(a1 + 10);
  v30 = *(unsigned __int8 *)(a2 + 10);
  if (v29 == 2)
  {
    if (v30 != 2)
      goto LABEL_34;
  }
  else
  {
    v28 = 0;
    if (v30 == 2 || ((v30 ^ v29) & 1) != 0)
      return v28 & 1;
  }
  v31 = *(_BYTE *)(a2 + 11);
  v32 = BrowseDisplayStyle.rawValue.getter(*(_BYTE *)(a1 + 11));
  v34 = v33;
  if (v32 == BrowseDisplayStyle.rawValue.getter(v31) && v34 == v35)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v36 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = 0;
    if ((v36 & 1) == 0)
      return v28 & 1;
  }
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
    || (v37 = sub_23BE5AE58(), v28 = 0, (v37 & 1) != 0))
  {
    v38 = *(unsigned __int8 *)(a1 + 32);
    v39 = *(unsigned __int8 *)(a2 + 32);
    if (v38 == 2)
    {
      if (v39 != 2)
        goto LABEL_34;
LABEL_28:
      v40 = type metadata accessor for BrowseEditorialDescriptor();
      sub_23BDF2358(a1 + *(int *)(v40 + 40), (uint64_t)v19);
      v50 = v40;
      sub_23BDF2358(a2 + *(int *)(v40 + 40), (uint64_t)v17);
      v41 = (uint64_t)v53;
      v42 = (uint64_t)&v53[*(int *)(v8 + 48)];
      sub_23BDF2358((uint64_t)v19, (uint64_t)v53);
      sub_23BDF2358((uint64_t)v17, v42);
      v43 = v51;
      v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
      if (v44(v41, 1, v51) == 1)
      {
        sub_23BE000B8((uint64_t)v17, &qword_256AC6478);
        sub_23BE000B8((uint64_t)v19, &qword_256AC6478);
        if (v44(v42, 1, v43) == 1)
        {
          sub_23BE000B8((uint64_t)v53, &qword_256AC6478);
LABEL_37:
          v28 = sub_23BE5A66C();
          return v28 & 1;
        }
      }
      else
      {
        sub_23BDF2358(v41, (uint64_t)v14);
        if (v44(v42, 1, v43) != 1)
        {
          v46 = v52;
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v52 + 32))(v7, v42, v43);
          sub_23BDF23E4(&qword_256AC6D28, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C8]);
          v49 = sub_23BE5AC3C();
          v47 = *(void (**)(_BYTE *, uint64_t))(v46 + 8);
          v47(v7, v43);
          sub_23BE000B8((uint64_t)v17, &qword_256AC6478);
          sub_23BE000B8((uint64_t)v19, &qword_256AC6478);
          v47(v14, v43);
          sub_23BE000B8(v41, &qword_256AC6478);
          if ((v49 & 1) != 0)
            goto LABEL_37;
LABEL_34:
          v28 = 0;
          return v28 & 1;
        }
        sub_23BE000B8((uint64_t)v17, &qword_256AC6478);
        sub_23BE000B8((uint64_t)v19, &qword_256AC6478);
        (*(void (**)(_BYTE *, uint64_t))(v52 + 8))(v14, v43);
      }
      sub_23BE000B8((uint64_t)v53, &qword_256AC6D20);
      goto LABEL_34;
    }
    v28 = 0;
    if (v39 != 2 && ((v39 ^ v38) & 1) == 0)
      goto LABEL_28;
  }
  return v28 & 1;
}

uint64_t type metadata accessor for BrowseEditorialDescriptor()
{
  uint64_t result;

  result = qword_256AC7B40;
  if (!qword_256AC7B40)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23BE23118(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BE23160()
{
  unint64_t result;

  result = qword_256AC7AA0;
  if (!qword_256AC7AA0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5FCB4, &type metadata for BrowseEditorialDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7AA0);
  }
  return result;
}

unint64_t sub_23BE231A4()
{
  unint64_t result;

  result = qword_256AC7AA8;
  if (!qword_256AC7AA8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseEditorialContent, &type metadata for BrowseEditorialContent);
    atomic_store(result, (unint64_t *)&qword_256AC7AA8);
  }
  return result;
}

unint64_t sub_23BE231E8()
{
  unint64_t result;

  result = qword_256AC7AB0;
  if (!qword_256AC7AB0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseGalleryDestination, &type metadata for BrowseGalleryDestination);
    atomic_store(result, (unint64_t *)&qword_256AC7AB0);
  }
  return result;
}

unint64_t sub_23BE2322C()
{
  unint64_t result;

  result = qword_256AC7AB8;
  if (!qword_256AC7AB8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseInsetBehavior, &type metadata for BrowseInsetBehavior);
    atomic_store(result, (unint64_t *)&qword_256AC7AB8);
  }
  return result;
}

unint64_t sub_23BE23270()
{
  unint64_t result;

  result = qword_256AC7AC8;
  if (!qword_256AC7AC8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseEditorialContent, &type metadata for BrowseEditorialContent);
    atomic_store(result, (unint64_t *)&qword_256AC7AC8);
  }
  return result;
}

unint64_t sub_23BE232B4()
{
  unint64_t result;

  result = qword_256AC7AD0;
  if (!qword_256AC7AD0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseGalleryDestination, &type metadata for BrowseGalleryDestination);
    atomic_store(result, (unint64_t *)&qword_256AC7AD0);
  }
  return result;
}

unint64_t sub_23BE232F8()
{
  unint64_t result;

  result = qword_256AC7AD8;
  if (!qword_256AC7AD8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseInsetBehavior, &type metadata for BrowseInsetBehavior);
    atomic_store(result, (unint64_t *)&qword_256AC7AD8);
  }
  return result;
}

uint64_t sub_23BE2333C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseEditorialDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BE23380(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BrowseEditorialDescriptor();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BE233BC()
{
  return sub_23BDF23E4(&qword_256AC7AE0, (uint64_t (*)(uint64_t))type metadata accessor for BrowseEditorialDescriptor, (uint64_t)&protocol conformance descriptor for BrowseEditorialDescriptor);
}

char *initializeBufferWithCopyOfBuffer for BrowseEditorialDescriptor(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *v4;
  int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void *, char *, uint64_t);

  v4 = (char *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
    *(_WORD *)(a1 + 10) = *((_WORD *)a2 + 5);
    v8 = a2[2];
    v9 = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v10 = *(int *)(a3 + 40);
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    v13 = sub_23BE5A678();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(&v4[*(int *)(a3 + 44)], (uint64_t)a2 + *(int *)(a3 + 44), v13);
    }
    else
    {
      v18 = *(void (**)(void *, char *, uint64_t))(v14 + 16);
      v18(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      v18(&v4[*(int *)(a3 + 44)], (char *)a2 + *(int *)(a3 + 44), v13);
    }
  }
  return v4;
}

uint64_t destroy for BrowseEditorialDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = sub_23BE5A678();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  if (!v7)
  {
    v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v8(v4, v5);
    v8 = v10;
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v8)(a1 + *(int *)(a2 + 44), v5);
}

uint64_t initializeWithCopy for BrowseEditorialDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(void *, const void *, uint64_t);

  v6 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v9 = *(int *)(a3 + 40);
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  v12 = sub_23BE5A678();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14(v11, 1, v12))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v12);
  }
  else
  {
    v16 = *(void (**)(void *, const void *, uint64_t))(v13 + 16);
    v16(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    v16((void *)(a1 + *(int *)(a3 + 44)), (const void *)(a2 + *(int *)(a3 + 44)), v12);
  }
  return a1;
}

uint64_t assignWithCopy for BrowseEditorialDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(int *)(a3 + 40);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = sub_23BE5A678();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24))(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v10);
  return a1;
}

uint64_t initializeWithTake for BrowseEditorialDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(int *)(a3 + 40);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_23BE5A678();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v9);
  }
  else
  {
    v12 = *(void (**)(void *, const void *, uint64_t))(v10 + 32);
    v12(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    v12((void *)(a1 + *(int *)(a3 + 44)), (const void *)(a2 + *(int *)(a3 + 44)), v9);
  }
  return a1;
}

uint64_t assignWithTake for BrowseEditorialDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v6 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(int *)(a3 + 40);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = sub_23BE5A678();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseEditorialDescriptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE23AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 40);
    }
    else
    {
      v10 = sub_23BE5A678();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for BrowseEditorialDescriptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE23BA0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 40);
    }
    else
    {
      v10 = sub_23BE5A678();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_23BE23C40()
{
  unint64_t v0;
  unint64_t v1;

  sub_23BE23CF0();
  if (v0 <= 0x3F)
  {
    sub_23BE5A678();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_23BE23CF0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256AC6C68)
  {
    sub_23BE5A678();
    v0 = sub_23BE5AD2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256AC6C68);
  }
}

uint64_t getEnumTagSinglePayload for BrowseEditorialDescriptor.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseEditorialDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_23BE23E20 + 4 * byte_23BE5FA7D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_23BE23E54 + 4 * byte_23BE5FA78[v4]))();
}

uint64_t sub_23BE23E54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE23E5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE23E64);
  return result;
}

uint64_t sub_23BE23E70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE23E78);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_23BE23E7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE23E84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseEditorialDescriptor.CodingKeys()
{
  return &type metadata for BrowseEditorialDescriptor.CodingKeys;
}

unint64_t sub_23BE23EA4()
{
  unint64_t result;

  result = qword_256AC7B90;
  if (!qword_256AC7B90)
  {
    result = MEMORY[0x242612B20](&unk_23BE5FC8C, &type metadata for BrowseEditorialDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7B90);
  }
  return result;
}

unint64_t sub_23BE23EEC()
{
  unint64_t result;

  result = qword_256AC7B98;
  if (!qword_256AC7B98)
  {
    result = MEMORY[0x242612B20](&unk_23BE5FBFC, &type metadata for BrowseEditorialDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7B98);
  }
  return result;
}

unint64_t sub_23BE23F34()
{
  unint64_t result;

  result = qword_256AC7BA0;
  if (!qword_256AC7BA0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5FC24, &type metadata for BrowseEditorialDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7BA0);
  }
  return result;
}

uint64_t sub_23BE23F78(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5379616C70736964 && a2 == 0xEC000000656C7974 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023BE663E0 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023BE66400 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023BE66420 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t BrowseArtwork.backgroundColor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BDFFFD8(v1, a1, &qword_256AC6D90);
}

uint64_t BrowseArtwork.templateURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for BrowseArtwork();
  return sub_23BDFFFD8(v1 + *(int *)(v3 + 20), a1, &qword_256AC6D98);
}

uint64_t type metadata accessor for BrowseArtwork()
{
  uint64_t result;

  result = qword_256AC7C38;
  if (!qword_256AC7C38)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BrowseArtwork.init(backgroundColor:templateURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  sub_23BE013D8(a1, a3, &qword_256AC6D90);
  v5 = type metadata accessor for BrowseArtwork();
  return sub_23BE013D8(a2, a3 + *(int *)(v5 + 20), &qword_256AC6D98);
}

uint64_t sub_23BE243B0()
{
  _BYTE *v0;

  if (*v0)
    return 0x6574616C706D6574;
  else
    return 0x756F72676B636162;
}

uint64_t sub_23BE24400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE26614(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE24424()
{
  sub_23BE24644();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE2444C()
{
  sub_23BE24644();
  return sub_23BE5AF18();
}

uint64_t sub_23BE24474@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BDFFFD8(v1, a1, &qword_256AC6D90);
}

uint64_t sub_23BE24498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23BDFFFD8(v2 + *(int *)(a1 + 20), a2, &qword_256AC6D98);
}

uint64_t BrowseArtwork.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7BA8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE24644();
  sub_23BE5AF00();
  v8[15] = 0;
  sub_23BE5A720();
  sub_23BDF23E4(&qword_256AC7BB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB0]);
  sub_23BE5AE1C();
  if (!v1)
  {
    type metadata accessor for BrowseArtwork();
    v8[14] = 1;
    sub_23BE5A690();
    sub_23BDF23E4(&qword_256AC6710, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_23BE5AE1C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BE24644()
{
  unint64_t result;

  result = qword_256AC7BB0;
  if (!qword_256AC7BB0)
  {
    result = MEMORY[0x242612B20](&unk_23BE5FEF8, &type metadata for BrowseArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7BB0);
  }
  return result;
}

uint64_t BrowseArtwork.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  char v27;

  v22 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
  MEMORY[0x24BDAC7A8](v4);
  v23 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
  MEMORY[0x24BDAC7A8](v6);
  v24 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7BC0);
  v8 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BrowseArtwork();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE24644();
  sub_23BE5AEF4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v21 = a1;
  v14 = v8;
  v15 = (uint64_t)v13;
  v16 = (uint64_t)v23;
  sub_23BE5A720();
  v27 = 0;
  sub_23BDF23E4(&qword_256AC7BC8, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FC8]);
  v18 = (uint64_t)v24;
  v17 = v25;
  sub_23BE5ADB0();
  sub_23BE013D8(v18, v15, &qword_256AC6D90);
  sub_23BE5A690();
  v26 = 1;
  sub_23BDF23E4(&qword_256AC6720, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  sub_23BE5ADB0();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v17);
  sub_23BE013D8(v16, v15 + *(int *)(v11 + 20), &qword_256AC6D98);
  sub_23BE24964(v15, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return sub_23BE249A8(v15);
}

uint64_t sub_23BE24964(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseArtwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BE249A8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BrowseArtwork();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BE249E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseArtwork.init(from:)(a1, a2);
}

uint64_t sub_23BE249F8(_QWORD *a1)
{
  return BrowseArtwork.encode(to:)(a1);
}

uint64_t BrowseArtwork.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;
  char *v19;

  v1 = v0;
  v2 = sub_23BE5A690();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v19 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23BE5A720();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BDFFFD8(v1, (uint64_t)v14, &qword_256AC6D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC7680, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v15 = type metadata accessor for BrowseArtwork();
  sub_23BDFFFD8(v1 + *(int *)(v15 + 20), (uint64_t)v7, &qword_256AC6D98);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1)
    return sub_23BE5AED0();
  v17 = v19;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v19, v7, v2);
  sub_23BE5AED0();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23BE5AC30();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v17, v2);
}

uint64_t BrowseArtwork.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v1 = v0;
  v2 = sub_23BE5A690();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23BE5A720();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE5AEB8();
  sub_23BDFFFD8(v1, (uint64_t)v15, &qword_256AC6D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC7680, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  v16 = type metadata accessor for BrowseArtwork();
  sub_23BDFFFD8(v1 + *(int *)(v16 + 20), (uint64_t)v8, &qword_256AC6D98);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return sub_23BE5AEE8();
}

uint64_t sub_23BE24F14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  uint64_t v20;

  v20 = a2;
  v3 = v2;
  v4 = sub_23BE5A690();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v19 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23BE5A720();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BDFFFD8(v3, (uint64_t)v16, &qword_256AC6D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, v10);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC7680, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  sub_23BDFFFD8(v3 + *(int *)(v20 + 20), (uint64_t)v9, &qword_256AC6D98);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4) == 1)
    return sub_23BE5AED0();
  v18 = v19;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v19, v9, v4);
  sub_23BE5AED0();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23BE5AC30();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v18, v4);
}

uint64_t sub_23BE25190(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v20 = a2;
  v3 = sub_23BE5A690();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v19 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23BE5A720();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE5AEB8();
  sub_23BDFFFD8(v2, (uint64_t)v15, &qword_256AC6D90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC7680, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  sub_23BDFFFD8(v2 + *(int *)(v20 + 20), (uint64_t)v8, &qword_256AC6D98);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    v16 = v19;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v19, v8, v3);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v16, v3);
  }
  return sub_23BE5AEE8();
}

BOOL _s15FitnessBrowsing13BrowseArtworkV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v44;
  char v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = sub_23BE5A690();
  v56 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v48 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7C98);
  MEMORY[0x24BDAC7A8](v51);
  v57 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v49 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v53 = (uint64_t)&v47 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v55 = (uint64_t)&v47 - v11;
  v12 = sub_23BE5A720();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v50 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7CA0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v47 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v47 - v25;
  v52 = a1;
  sub_23BDFFFD8(a1, (uint64_t)&v47 - v25, &qword_256AC6D90);
  v54 = a2;
  sub_23BDFFFD8(a2, (uint64_t)v24, &qword_256AC6D90);
  v27 = (uint64_t)&v17[*(int *)(v15 + 48)];
  sub_23BDFFFD8((uint64_t)v26, (uint64_t)v17, &qword_256AC6D90);
  sub_23BDFFFD8((uint64_t)v24, v27, &qword_256AC6D90);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v28((uint64_t)v17, 1, v12) != 1)
  {
    sub_23BDFFFD8((uint64_t)v17, (uint64_t)v21, &qword_256AC6D90);
    if (v28(v27, 1, v12) != 1)
    {
      v31 = v50;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v50, v27, v12);
      sub_23BDF23E4(&qword_256AC7CB0, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FC0]);
      v32 = sub_23BE5AC3C();
      v33 = *(void (**)(char *, uint64_t))(v13 + 8);
      v33(v31, v12);
      sub_23BE000B8((uint64_t)v24, &qword_256AC6D90);
      sub_23BE000B8((uint64_t)v26, &qword_256AC6D90);
      v33(v21, v12);
      sub_23BE000B8((uint64_t)v17, &qword_256AC6D90);
      if ((v32 & 1) == 0)
        return 0;
      goto LABEL_8;
    }
    sub_23BE000B8((uint64_t)v24, &qword_256AC6D90);
    sub_23BE000B8((uint64_t)v26, &qword_256AC6D90);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
LABEL_6:
    v29 = &qword_256AC7CA0;
    v30 = (uint64_t)v17;
LABEL_14:
    sub_23BE000B8(v30, v29);
    return 0;
  }
  sub_23BE000B8((uint64_t)v24, &qword_256AC6D90);
  sub_23BE000B8((uint64_t)v26, &qword_256AC6D90);
  if (v28(v27, 1, v12) != 1)
    goto LABEL_6;
  sub_23BE000B8((uint64_t)v17, &qword_256AC6D90);
LABEL_8:
  v34 = type metadata accessor for BrowseArtwork();
  v35 = v55;
  sub_23BDFFFD8(v52 + *(int *)(v34 + 20), v55, &qword_256AC6D98);
  v36 = v53;
  sub_23BDFFFD8(v54 + *(int *)(v34 + 20), v53, &qword_256AC6D98);
  v37 = v57;
  v38 = v57 + *(int *)(v51 + 48);
  sub_23BDFFFD8(v35, v57, &qword_256AC6D98);
  sub_23BDFFFD8(v36, v38, &qword_256AC6D98);
  v39 = v56;
  v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
  v41 = v58;
  if (v40(v37, 1, v58) == 1)
  {
    sub_23BE000B8(v36, &qword_256AC6D98);
    sub_23BE000B8(v35, &qword_256AC6D98);
    if (v40(v38, 1, v41) == 1)
    {
      sub_23BE000B8(v37, &qword_256AC6D98);
      return 1;
    }
    goto LABEL_13;
  }
  v42 = v49;
  sub_23BDFFFD8(v37, v49, &qword_256AC6D98);
  if (v40(v38, 1, v41) == 1)
  {
    sub_23BE000B8(v36, &qword_256AC6D98);
    sub_23BE000B8(v35, &qword_256AC6D98);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v42, v41);
LABEL_13:
    v29 = &qword_256AC7C98;
    v30 = v37;
    goto LABEL_14;
  }
  v44 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v48, v38, v41);
  sub_23BDF23E4(&qword_256AC7CA8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
  v45 = sub_23BE5AC3C();
  v46 = *(void (**)(char *, uint64_t))(v39 + 8);
  v46(v44, v41);
  sub_23BE000B8(v36, &qword_256AC6D98);
  sub_23BE000B8(v35, &qword_256AC6D98);
  v46((char *)v42, v41);
  sub_23BE000B8(v37, &qword_256AC6D98);
  return (v45 & 1) != 0;
}

uint64_t sub_23BE25A08()
{
  return sub_23BDF23E4(&qword_256AC7598, (uint64_t (*)(uint64_t))type metadata accessor for BrowseArtwork, (uint64_t)&protocol conformance descriptor for BrowseArtwork);
}

uint64_t sub_23BE25A34()
{
  return sub_23BDF23E4(&qword_256AC7568, (uint64_t (*)(uint64_t))type metadata accessor for BrowseArtwork, (uint64_t)&protocol conformance descriptor for BrowseArtwork);
}

uint64_t sub_23BE25A60()
{
  return sub_23BDF23E4(&qword_256AC7BD0, (uint64_t (*)(uint64_t))type metadata accessor for BrowseArtwork, (uint64_t)&protocol conformance descriptor for BrowseArtwork);
}

uint64_t sub_23BE25A8C()
{
  return sub_23BDF23E4(&qword_256AC7BD8, (uint64_t (*)(uint64_t))type metadata accessor for BrowseArtwork, (uint64_t)&protocol conformance descriptor for BrowseArtwork);
}

uint64_t *initializeBufferWithCopyOfBuffer for BrowseArtwork(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23BE5A720();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_23BE5A690();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  return a1;
}

uint64_t destroy for BrowseArtwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = sub_23BE5A720();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = sub_23BE5A690();
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

char *initializeWithCopy for BrowseArtwork(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_23BE5A720();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_23BE5A690();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithCopy for BrowseArtwork(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  v6 = sub_23BE5A720();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = sub_23BE5A690();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

char *initializeWithTake for BrowseArtwork(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_23BE5A720();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_23BE5A690();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithTake for BrowseArtwork(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  v6 = sub_23BE5A720();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = sub_23BE5A690();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseArtwork()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE262C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for BrowseArtwork()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE26348(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23BE263CC()
{
  unint64_t v0;
  unint64_t v1;

  sub_23BE076F4(319, &qword_256AC7C48, (void (*)(uint64_t))MEMORY[0x24BE34FA0]);
  if (v0 <= 0x3F)
  {
    sub_23BE076F4(319, qword_256AC7C50, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for BrowseArtwork.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BE264BC + 4 * byte_23BE5FD09[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BE264F0 + 4 * byte_23BE5FD04[v4]))();
}

uint64_t sub_23BE264F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE264F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE26500);
  return result;
}

uint64_t sub_23BE2650C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE26514);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BE26518(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE26520(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseArtwork.CodingKeys()
{
  return &type metadata for BrowseArtwork.CodingKeys;
}

unint64_t sub_23BE26540()
{
  unint64_t result;

  result = qword_256AC7C80;
  if (!qword_256AC7C80)
  {
    result = MEMORY[0x242612B20](&unk_23BE5FED0, &type metadata for BrowseArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7C80);
  }
  return result;
}

unint64_t sub_23BE26588()
{
  unint64_t result;

  result = qword_256AC7C88;
  if (!qword_256AC7C88)
  {
    result = MEMORY[0x242612B20](&unk_23BE5FE40, &type metadata for BrowseArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7C88);
  }
  return result;
}

unint64_t sub_23BE265D0()
{
  unint64_t result;

  result = qword_256AC7C90;
  if (!qword_256AC7C90)
  {
    result = MEMORY[0x242612B20](&unk_23BE5FE68, &type metadata for BrowseArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7C90);
  }
  return result;
}

uint64_t sub_23BE26614(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x756F72676B636162 && a2 == 0xEF726F6C6F43646ELL;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574616C706D6574 && a2 == 0xEB000000004C5255)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BOOL static DynamicBrickDisplayStyle.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_23BE26750()
{
  sub_23BE26D80();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE26778()
{
  sub_23BE26D80();
  return sub_23BE5AF18();
}

uint64_t sub_23BE267A0()
{
  sub_23BE26D3C();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE267C8()
{
  sub_23BE26D3C();
  return sub_23BE5AF18();
}

uint64_t sub_23BE267F0()
{
  sub_23BE26CF8();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE26818()
{
  sub_23BE26CF8();
  return sub_23BE5AF18();
}

uint64_t sub_23BE26840()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE2687C + 4 * byte_23BE5FF50[*v0]))(0x654C6D6F74746F62, 0xED0000676E696461);
}

uint64_t sub_23BE2687C()
{
  return 0x7265746E6563;
}

uint64_t sub_23BE26890()
{
  return 0x654C7265746E6563;
}

uint64_t sub_23BE268A4()
{
  return 0x696461654C706F74;
}

uint64_t sub_23BE268C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE26E80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE268E4()
{
  sub_23BE26C70();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE2690C()
{
  sub_23BE26C70();
  return sub_23BE5AF18();
}

uint64_t sub_23BE26934()
{
  sub_23BE26CB4();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE2695C()
{
  sub_23BE26CB4();
  return sub_23BE5AF18();
}

void DynamicBrickDisplayStyle.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[10];
  uint64_t v11;

  v11 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7CB8);
  v10[7] = *(_QWORD *)(v3 - 8);
  v10[8] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v10[6] = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7CC0);
  v10[4] = *(_QWORD *)(v5 - 8);
  v10[5] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v10[3] = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7CC8);
  v10[1] = *(_QWORD *)(v7 - 8);
  v10[2] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7CD0);
  MEMORY[0x24BDAC7A8](v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7CD8);
  v10[9] = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE26C70();
  sub_23BE5AF00();
  __asm { BR              X10 }
}

uint64_t sub_23BE26B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 - 68) = 0;
  sub_23BE26D80();
  sub_23BE5ADF8();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 104) + 8))(v1, v0);
}

unint64_t sub_23BE26C70()
{
  unint64_t result;

  result = qword_256AC7CE0;
  if (!qword_256AC7CE0)
  {
    result = MEMORY[0x242612B20](&unk_23BE60410, &type metadata for DynamicBrickDisplayStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7CE0);
  }
  return result;
}

unint64_t sub_23BE26CB4()
{
  unint64_t result;

  result = qword_256AC7CE8;
  if (!qword_256AC7CE8)
  {
    result = MEMORY[0x242612B20](&unk_23BE603C0, &type metadata for DynamicBrickDisplayStyle.TopLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7CE8);
  }
  return result;
}

unint64_t sub_23BE26CF8()
{
  unint64_t result;

  result = qword_256AC7CF0;
  if (!qword_256AC7CF0)
  {
    result = MEMORY[0x242612B20](&unk_23BE60370, &type metadata for DynamicBrickDisplayStyle.CenterLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7CF0);
  }
  return result;
}

unint64_t sub_23BE26D3C()
{
  unint64_t result;

  result = qword_256AC7CF8;
  if (!qword_256AC7CF8)
  {
    result = MEMORY[0x242612B20](&unk_23BE60320, &type metadata for DynamicBrickDisplayStyle.CenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7CF8);
  }
  return result;
}

unint64_t sub_23BE26D80()
{
  unint64_t result;

  result = qword_256AC7D00;
  if (!qword_256AC7D00)
  {
    result = MEMORY[0x242612B20](&unk_23BE602D0, &type metadata for DynamicBrickDisplayStyle.BottomLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7D00);
  }
  return result;
}

uint64_t DynamicBrickDisplayStyle.init(from:)(_QWORD *a1)
{
  return sub_23BE2707C(a1);
}

uint64_t sub_23BE26DD8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23BE2707C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_23BE26E00(_QWORD *a1)
{
  unsigned __int8 *v1;

  DynamicBrickDisplayStyle.encode(to:)(a1, *v1);
}

uint64_t DynamicBrickDisplayStyle.hash(into:)()
{
  return sub_23BE5AEC4();
}

uint64_t DynamicBrickDisplayStyle.hashValue.getter()
{
  sub_23BE5AEB8();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE26E80(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x654C6D6F74746F62 && a2 == 0xED0000676E696461;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7265746E6563 && a2 == 0xE600000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x654C7265746E6563 && a2 == 0xED0000676E696461 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x696461654C706F74 && a2 == 0xEA0000000000676ELL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23BE2707C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v23[12];
  _QWORD *v24;
  uint64_t v25;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7D68);
  v23[10] = *(_QWORD *)(v2 - 8);
  v23[11] = v2;
  MEMORY[0x24BDAC7A8](v2);
  v23[9] = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7D70);
  v23[5] = *(_QWORD *)(v4 - 8);
  v23[6] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v23[8] = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7D78);
  v23[3] = *(_QWORD *)(v6 - 8);
  v23[4] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v23[7] = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7D80);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7D88);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v24 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_23BE26C70();
  v17 = v25;
  sub_23BE5AEF4();
  if (!v17)
  {
    v23[1] = v8;
    v23[2] = v11;
    v23[0] = v9;
    v25 = v13;
    v18 = sub_23BE5ADEC();
    if (*(_QWORD *)(v18 + 16) == 1)
      __asm { BR              X9 }
    v19 = sub_23BE5AD68();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v21 = &type metadata for DynamicBrickDisplayStyle;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v12);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return v12;
}

void sub_23BE273A0()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 67) = 1;
  sub_23BE26D3C();
  sub_23BE5AD80();
  if (!v0)
    JUMPOUT(0x23BE27474);
  JUMPOUT(0x23BE27354);
}

void sub_23BE273E4()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 66) = 2;
  sub_23BE26CF8();
  sub_23BE5AD80();
  if (!v0)
    JUMPOUT(0x23BE27424);
  JUMPOUT(0x23BE27354);
}

void sub_23BE27430()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 65) = 3;
  sub_23BE26CB4();
  sub_23BE5AD80();
  if (!v0)
    JUMPOUT(0x23BE27474);
  JUMPOUT(0x23BE27354);
}

unint64_t sub_23BE274A4()
{
  unint64_t result;

  result = qword_256AC7D08;
  if (!qword_256AC7D08)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for DynamicBrickDisplayStyle, &type metadata for DynamicBrickDisplayStyle);
    atomic_store(result, (unint64_t *)&qword_256AC7D08);
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicBrickDisplayStyle()
{
  return &type metadata for DynamicBrickDisplayStyle;
}

uint64_t _s15FitnessBrowsing24DynamicBrickDisplayStyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BE27548 + 4 * byte_23BE5FF61[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BE2757C + 4 * byte_23BE5FF5C[v4]))();
}

uint64_t sub_23BE2757C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE27584(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE2758CLL);
  return result;
}

uint64_t sub_23BE27598(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE275A0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BE275A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE275AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicBrickDisplayStyle.CodingKeys()
{
  return &type metadata for DynamicBrickDisplayStyle.CodingKeys;
}

ValueMetadata *type metadata accessor for DynamicBrickDisplayStyle.BottomLeadingCodingKeys()
{
  return &type metadata for DynamicBrickDisplayStyle.BottomLeadingCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicBrickDisplayStyle.CenterCodingKeys()
{
  return &type metadata for DynamicBrickDisplayStyle.CenterCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicBrickDisplayStyle.CenterLeadingCodingKeys()
{
  return &type metadata for DynamicBrickDisplayStyle.CenterLeadingCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicBrickDisplayStyle.TopLeadingCodingKeys()
{
  return &type metadata for DynamicBrickDisplayStyle.TopLeadingCodingKeys;
}

unint64_t sub_23BE2760C()
{
  unint64_t result;

  result = qword_256AC7D10;
  if (!qword_256AC7D10)
  {
    result = MEMORY[0x242612B20](&unk_23BE602A8, &type metadata for DynamicBrickDisplayStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7D10);
  }
  return result;
}

unint64_t sub_23BE27654()
{
  unint64_t result;

  result = qword_256AC7D18;
  if (!qword_256AC7D18)
  {
    result = MEMORY[0x242612B20](&unk_23BE601C8, &type metadata for DynamicBrickDisplayStyle.BottomLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7D18);
  }
  return result;
}

unint64_t sub_23BE2769C()
{
  unint64_t result;

  result = qword_256AC7D20;
  if (!qword_256AC7D20)
  {
    result = MEMORY[0x242612B20](&unk_23BE601F0, &type metadata for DynamicBrickDisplayStyle.BottomLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7D20);
  }
  return result;
}

unint64_t sub_23BE276E4()
{
  unint64_t result;

  result = qword_256AC7D28;
  if (!qword_256AC7D28)
  {
    result = MEMORY[0x242612B20](&unk_23BE60178, &type metadata for DynamicBrickDisplayStyle.CenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7D28);
  }
  return result;
}

unint64_t sub_23BE2772C()
{
  unint64_t result;

  result = qword_256AC7D30;
  if (!qword_256AC7D30)
  {
    result = MEMORY[0x242612B20](&unk_23BE601A0, &type metadata for DynamicBrickDisplayStyle.CenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7D30);
  }
  return result;
}

unint64_t sub_23BE27774()
{
  unint64_t result;

  result = qword_256AC7D38;
  if (!qword_256AC7D38)
  {
    result = MEMORY[0x242612B20](&unk_23BE60128, &type metadata for DynamicBrickDisplayStyle.CenterLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7D38);
  }
  return result;
}

unint64_t sub_23BE277BC()
{
  unint64_t result;

  result = qword_256AC7D40;
  if (!qword_256AC7D40)
  {
    result = MEMORY[0x242612B20](&unk_23BE60150, &type metadata for DynamicBrickDisplayStyle.CenterLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7D40);
  }
  return result;
}

unint64_t sub_23BE27804()
{
  unint64_t result;

  result = qword_256AC7D48;
  if (!qword_256AC7D48)
  {
    result = MEMORY[0x242612B20](&unk_23BE600D8, &type metadata for DynamicBrickDisplayStyle.TopLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7D48);
  }
  return result;
}

unint64_t sub_23BE2784C()
{
  unint64_t result;

  result = qword_256AC7D50;
  if (!qword_256AC7D50)
  {
    result = MEMORY[0x242612B20](&unk_23BE60100, &type metadata for DynamicBrickDisplayStyle.TopLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7D50);
  }
  return result;
}

unint64_t sub_23BE27894()
{
  unint64_t result;

  result = qword_256AC7D58;
  if (!qword_256AC7D58)
  {
    result = MEMORY[0x242612B20](&unk_23BE60218, &type metadata for DynamicBrickDisplayStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7D58);
  }
  return result;
}

unint64_t sub_23BE278DC()
{
  unint64_t result;

  result = qword_256AC7D60;
  if (!qword_256AC7D60)
  {
    result = MEMORY[0x242612B20](&unk_23BE60240, &type metadata for DynamicBrickDisplayStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7D60);
  }
  return result;
}

uint64_t BrowseItemPlaceholder.displayStyle.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t BrowseItemPlaceholder.editorialCardIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BrowseItemPlaceholder.groupTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BrowseItemPlaceholder.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BrowseItemPlaceholder.referenceIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BrowseItemPlaceholder.referenceType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

void __swiftcall BrowseItemPlaceholder.init(displayStyle:editorialCardIdentifier:groupTitle:identifier:referenceIdentifier:referenceType:)(FitnessBrowsing::BrowseItemPlaceholder *__return_ptr retstr, FitnessBrowsing::BrowseDisplayStyle displayStyle, Swift::String_optional editorialCardIdentifier, Swift::String_optional groupTitle, Swift::String identifier, Swift::String referenceIdentifier, FitnessBrowsing::BrowseItemReferenceType referenceType)
{
  retstr->displayStyle = displayStyle;
  retstr->editorialCardIdentifier = editorialCardIdentifier;
  retstr->groupTitle = groupTitle;
  retstr->identifier = identifier;
  retstr->referenceIdentifier = referenceIdentifier;
  retstr->referenceType = referenceType;
}

uint64_t sub_23BE27A04(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE27A40 + 4 * byte_23BE60460[a1]))(0x5379616C70736964, 0xEC000000656C7974);
}

unint64_t sub_23BE27A40()
{
  return 0xD000000000000017;
}

uint64_t sub_23BE27A60()
{
  return 0x74695470756F7267;
}

uint64_t sub_23BE27A7C()
{
  return 0x696669746E656469;
}

unint64_t sub_23BE27A9C()
{
  return 0xD000000000000013;
}

uint64_t sub_23BE27AB8()
{
  return 0x636E657265666572;
}

uint64_t sub_23BE27ADC()
{
  unsigned __int8 *v0;

  return sub_23BE27A04(*v0);
}

uint64_t sub_23BE27AE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE28C80(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BE27B08(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_23BE27B14()
{
  sub_23BE27D94();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE27B3C()
{
  sub_23BE27D94();
  return sub_23BE5AF18();
}

uint64_t BrowseItemPlaceholder.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7D90);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v22 = *((_QWORD *)v1 + 2);
  v23 = v9;
  v10 = *((_QWORD *)v1 + 3);
  v20 = *((_QWORD *)v1 + 4);
  v21 = v10;
  v11 = *((_QWORD *)v1 + 5);
  v18 = *((_QWORD *)v1 + 6);
  v19 = v11;
  v12 = *((_QWORD *)v1 + 8);
  v16 = *((_QWORD *)v1 + 7);
  v17 = v12;
  v15 = v1[72];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE27D94();
  sub_23BE5AF00();
  v31 = v8;
  v30 = 0;
  sub_23BE01D74();
  sub_23BE5AE4C();
  if (!v2)
  {
    v29 = 1;
    sub_23BE5AE04();
    v28 = 2;
    sub_23BE5AE04();
    v27 = 3;
    sub_23BE5AE28();
    v26 = 4;
    sub_23BE5AE28();
    v25 = v15;
    v24 = 5;
    sub_23BE01E40();
    sub_23BE5AE4C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23BE27D94()
{
  unint64_t result;

  result = qword_256AC7D98;
  if (!qword_256AC7D98)
  {
    result = MEMORY[0x242612B20](&unk_23BE6062C, &type metadata for BrowseItemPlaceholder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7D98);
  }
  return result;
}

uint64_t BrowseItemPlaceholder.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  unsigned __int8 v38;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7DA0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE27D94();
  sub_23BE5AEF4();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v6;
  }
  else
  {
    v37 = 0;
    sub_23BE02BA0();
    sub_23BE5ADE0();
    v9 = v38;
    v36 = 1;
    v10 = sub_23BE5AD98();
    v13 = v12;
    v30 = v10;
    v35 = 2;
    swift_bridgeObjectRetain();
    v28 = sub_23BE5AD98();
    v29 = v14;
    v34 = 3;
    swift_bridgeObjectRetain();
    v25 = sub_23BE5ADBC();
    v26 = v9;
    v15 = v29;
    v33 = 4;
    v27 = v16;
    swift_bridgeObjectRetain();
    v17 = sub_23BE5ADBC();
    v19 = v18;
    v23 = v17;
    v31 = 5;
    sub_23BE02CCC();
    v24 = v19;
    swift_bridgeObjectRetain();
    sub_23BE5ADE0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v20 = v32;
    *(_BYTE *)a2 = v26;
    *(_QWORD *)(a2 + 8) = v30;
    *(_QWORD *)(a2 + 16) = v13;
    v21 = v27;
    *(_QWORD *)(a2 + 24) = v28;
    *(_QWORD *)(a2 + 32) = v15;
    v22 = v24;
    *(_QWORD *)(a2 + 40) = v25;
    *(_QWORD *)(a2 + 48) = v21;
    *(_QWORD *)(a2 + 56) = v23;
    *(_QWORD *)(a2 + 64) = v22;
    *(_BYTE *)(a2 + 72) = v20;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_23BE2817C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseItemPlaceholder.init(from:)(a1, a2);
}

uint64_t sub_23BE28190(_QWORD *a1)
{
  return BrowseItemPlaceholder.encode(to:)(a1);
}

void BrowseItemPlaceholder.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(unsigned __int8 *)(v0 + 72);
  BrowseDisplayStyle.rawValue.getter(*(_BYTE *)v0);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_23BE5AED0();
    swift_bridgeObjectRetain();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
    if (v2)
    {
LABEL_3:
      sub_23BE5AED0();
      swift_bridgeObjectRetain();
      sub_23BE5AC9C();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_23BE5AED0();
    if (v2)
      goto LABEL_3;
  }
  sub_23BE5AED0();
LABEL_6:
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  __asm { BR              X9 }
}

uint64_t sub_23BE28304()
{
  sub_23BE5AC9C();
  return swift_bridgeObjectRelease();
}

uint64_t BrowseItemPlaceholder.hashValue.getter()
{
  sub_23BE5AEB8();
  BrowseItemPlaceholder.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE28474()
{
  sub_23BE5AEB8();
  BrowseItemPlaceholder.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE284E8()
{
  sub_23BE5AEB8();
  BrowseItemPlaceholder.hash(into:)();
  return sub_23BE5AEE8();
}

void _s15FitnessBrowsing21BrowseItemPlaceholderV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 48);
  v22 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 72);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v23 = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a2 + 48);
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 64);
  v9 = *(_BYTE *)a2;
  v10 = BrowseDisplayStyle.rawValue.getter(*(_BYTE *)a1);
  v12 = v11;
  if (v10 == BrowseDisplayStyle.rawValue.getter(v9) && v12 == v13)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v14 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
      return;
  }
  if (v3)
  {
    if (!v6 || (v2 != v5 || v3 != v6) && (sub_23BE5AE58() & 1) == 0)
      return;
  }
  else if (v6)
  {
    return;
  }
  if (v4)
  {
    if (!v8 || (v22 != v7 || v4 != v8) && (sub_23BE5AE58() & 1) == 0)
      return;
  }
  else if (v8)
  {
    return;
  }
  if ((v24 == v23 && v21 == v20 || (sub_23BE5AE58() & 1) != 0)
    && (v19 == v18 && v17 == v16 || (sub_23BE5AE58() & 1) != 0))
  {
    sub_23BE46F80(v15);
  }
}

unint64_t sub_23BE2875C()
{
  unint64_t result;

  result = qword_256AC7DA8;
  if (!qword_256AC7DA8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseItemPlaceholder, &type metadata for BrowseItemPlaceholder);
    atomic_store(result, (unint64_t *)&qword_256AC7DA8);
  }
  return result;
}

uint64_t destroy for BrowseItemPlaceholder()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BrowseItemPlaceholder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BrowseItemPlaceholder(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for BrowseItemPlaceholder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseItemPlaceholder(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseItemPlaceholder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BrowseItemPlaceholder()
{
  return &type metadata for BrowseItemPlaceholder;
}

uint64_t getEnumTagSinglePayload for BrowseItemPlaceholder.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseItemPlaceholder.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23BE28B28 + 4 * byte_23BE60474[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23BE28B5C + 4 * byte_23BE6046F[v4]))();
}

uint64_t sub_23BE28B5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE28B64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE28B6CLL);
  return result;
}

uint64_t sub_23BE28B78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE28B80);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23BE28B84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE28B8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseItemPlaceholder.CodingKeys()
{
  return &type metadata for BrowseItemPlaceholder.CodingKeys;
}

unint64_t sub_23BE28BAC()
{
  unint64_t result;

  result = qword_256AC7DB0;
  if (!qword_256AC7DB0)
  {
    result = MEMORY[0x242612B20](&unk_23BE60604, &type metadata for BrowseItemPlaceholder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7DB0);
  }
  return result;
}

unint64_t sub_23BE28BF4()
{
  unint64_t result;

  result = qword_256AC7DB8;
  if (!qword_256AC7DB8)
  {
    result = MEMORY[0x242612B20](&unk_23BE60574, &type metadata for BrowseItemPlaceholder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7DB8);
  }
  return result;
}

unint64_t sub_23BE28C3C()
{
  unint64_t result;

  result = qword_256AC7DC0;
  if (!qword_256AC7DC0)
  {
    result = MEMORY[0x242612B20](&unk_23BE6059C, &type metadata for BrowseItemPlaceholder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7DC0);
  }
  return result;
}

uint64_t sub_23BE28C80(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x5379616C70736964 && a2 == 0xEC000000656C7974;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023BE66440 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74695470756F7267 && a2 == 0xEA0000000000656CLL || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023BE66200 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x636E657265666572 && a2 == 0xED00006570795465)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

FitnessBrowsing::BrowseFontDesign_optional __swiftcall BrowseFontDesign.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  FitnessBrowsing::BrowseFontDesign_optional v2;

  v1 = sub_23BE5AD74();
  swift_bridgeObjectRelease();
  if (v1 == 1)
    v2.value = FitnessBrowsing_BrowseFontDesign_rounded;
  else
    v2.value = FitnessBrowsing_BrowseFontDesign_unknownDefault;
  if (v1)
    return v2;
  else
    return 0;
}

void *static BrowseFontDesign.allCases.getter()
{
  return &unk_250CDDBF0;
}

uint64_t BrowseFontDesign.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6465646E756F72;
  else
    return 0x746C7561666564;
}

uint64_t sub_23BE28FC0(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (*a1)
    v2 = 0x6465646E756F72;
  else
    v2 = 0x746C7561666564;
  if (*a2)
    v3 = 0x6465646E756F72;
  else
    v3 = 0x746C7561666564;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_23BE5AE58();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_23BE29044@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_23BE5AD74();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_23BE290A0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x746C7561666564;
  if (*v1)
    v2 = 0x6465646E756F72;
  *a1 = v2;
  a1[1] = 0xE700000000000000;
}

unint64_t sub_23BE290DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AC7DC8;
  if (!qword_256AC7DC8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC7DD0);
    result = MEMORY[0x242612B20](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256AC7DC8);
  }
  return result;
}

void sub_23BE29128(_QWORD *a1@<X8>)
{
  *a1 = &unk_250CDDC18;
}

uint64_t sub_23BE29138()
{
  sub_23BE29420();
  return sub_23BE5ACB4();
}

uint64_t sub_23BE29194()
{
  sub_23BE29420();
  return sub_23BE5ACA8();
}

unint64_t sub_23BE291E4()
{
  unint64_t result;

  result = qword_256AC7DD8;
  if (!qword_256AC7DD8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontDesign, &type metadata for BrowseFontDesign);
    atomic_store(result, (unint64_t *)&qword_256AC7DD8);
  }
  return result;
}

uint64_t sub_23BE29228()
{
  sub_23BE5AEB8();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE2929C()
{
  sub_23BE5AC9C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BE292E4()
{
  sub_23BE5AEB8();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t storeEnumTagSinglePayload for BrowseFontDesign(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BE293A0 + 4 * byte_23BE60685[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BE293D4 + 4 * byte_23BE60680[v4]))();
}

uint64_t sub_23BE293D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE293DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE293E4);
  return result;
}

uint64_t sub_23BE293F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE293F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BE293FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE29404(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseFontDesign()
{
  return &type metadata for BrowseFontDesign;
}

unint64_t sub_23BE29420()
{
  unint64_t result;

  result = qword_256AC7DE0;
  if (!qword_256AC7DE0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontDesign, &type metadata for BrowseFontDesign);
    atomic_store(result, (unint64_t *)&qword_256AC7DE0);
  }
  return result;
}

uint64_t BrowseDetailVideoLinkItem.attributedTitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23BE5A678();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t BrowseDetailVideoLinkItem.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BrowseDetailVideoLinkItem() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for BrowseDetailVideoLinkItem()
{
  uint64_t result;

  result = qword_256AC7E70;
  if (!qword_256AC7E70)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BrowseDetailVideoLinkItem.videoAsset.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for BrowseDetailVideoLinkItem();
  return sub_23BDF23A0(v1 + *(int *)(v3 + 24), a1, (uint64_t (*)(_QWORD))type metadata accessor for VideoAsset);
}

uint64_t BrowseDetailVideoLinkItem.init(attributedTitle:identifier:videoAsset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v10 = sub_23BE5A678();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  v11 = type metadata accessor for BrowseDetailVideoLinkItem();
  v12 = (_QWORD *)(a5 + *(int *)(v11 + 20));
  *v12 = a2;
  v12[1] = a3;
  return sub_23BE295CC(a4, a5 + *(int *)(v11 + 24));
}

uint64_t sub_23BE295CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for VideoAsset();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BE29610()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x696669746E656469;
  if (*v0 != 1)
    v1 = 0x7373416F65646976;
  if (*v0)
    return v1;
  else
    return 0x7475626972747461;
}

uint64_t sub_23BE2967C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE2AAEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE296A0()
{
  sub_23BE298A8();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE296C8()
{
  sub_23BE298A8();
  return sub_23BE5AF18();
}

uint64_t BrowseDetailVideoLinkItem.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7DE8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE298A8();
  sub_23BE5AF00();
  v8[15] = 0;
  sub_23BE5A678();
  sub_23BDF23E4(&qword_256AC6B10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5B8]);
  sub_23BE5AE4C();
  if (!v1)
  {
    type metadata accessor for BrowseDetailVideoLinkItem();
    v8[14] = 1;
    sub_23BE5AE28();
    v8[13] = 2;
    type metadata accessor for VideoAsset();
    sub_23BDF23E4(&qword_256AC7DF8, (uint64_t (*)(uint64_t))type metadata accessor for VideoAsset, (uint64_t)&protocol conformance descriptor for VideoAsset);
    sub_23BE5AE4C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BE298A8()
{
  unint64_t result;

  result = qword_256AC7DF0;
  if (!qword_256AC7DF0)
  {
    result = MEMORY[0x242612B20](&unk_23BE609BC, &type metadata for BrowseDetailVideoLinkItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7DF0);
  }
  return result;
}

uint64_t BrowseDetailVideoLinkItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;

  v19 = a2;
  v20 = type metadata accessor for VideoAsset();
  MEMORY[0x24BDAC7A8](v20);
  v21 = (uint64_t)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_23BE5A678();
  v4 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v22 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7E00);
  v6 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BrowseDetailVideoLinkItem();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE298A8();
  v25 = v8;
  v12 = v26;
  sub_23BE5AEF4();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v13 = v6;
  v29 = 0;
  sub_23BDF23E4(&qword_256AC6B88, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5D0]);
  v14 = v22;
  sub_23BE5ADE0();
  v26 = v4;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v11, v14, v24);
  v28 = 1;
  v15 = sub_23BE5ADBC();
  v16 = (uint64_t *)&v11[*(int *)(v9 + 20)];
  *v16 = v15;
  v16[1] = v17;
  v27 = 2;
  sub_23BDF23E4(&qword_256AC7E08, (uint64_t (*)(uint64_t))type metadata accessor for VideoAsset, (uint64_t)&protocol conformance descriptor for VideoAsset);
  sub_23BE5ADE0();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v25, v23);
  sub_23BE295CC(v21, (uint64_t)&v11[*(int *)(v9 + 24)]);
  sub_23BDF23A0((uint64_t)v11, v19, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailVideoLinkItem);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23BE29C18((uint64_t)v11);
}

uint64_t sub_23BE29C18(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BrowseDetailVideoLinkItem();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BE29C54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseDetailVideoLinkItem.init(from:)(a1, a2);
}

uint64_t sub_23BE29C68(_QWORD *a1)
{
  return BrowseDetailVideoLinkItem.encode(to:)(a1);
}

uint64_t BrowseDetailVideoLinkItem.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23BE5A678();
  sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
  sub_23BE5AC30();
  v1 = type metadata accessor for BrowseDetailVideoLinkItem();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  v2 = v0 + *(int *)(v1 + 24);
  sub_23BE5AC9C();
  if (*(_QWORD *)(v2 + 24))
  {
    sub_23BE5AED0();
    swift_bridgeObjectRetain();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BE5AED0();
  }
  type metadata accessor for VideoAsset();
  sub_23BE5A690();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  return sub_23BE5AC30();
}

uint64_t static BrowseDetailVideoLinkItem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;

  if ((sub_23BE5A66C() & 1) != 0
    && ((v4 = type metadata accessor for BrowseDetailVideoLinkItem(),
         v5 = *(int *)(v4 + 20),
         v6 = *(_QWORD *)(a1 + v5),
         v7 = *(_QWORD *)(a1 + v5 + 8),
         v8 = (_QWORD *)(a2 + v5),
         v6 == *v8)
      ? (v9 = v7 == v8[1])
      : (v9 = 0),
        v9 || (sub_23BE5AE58() & 1) != 0))
  {
    return _s15FitnessBrowsing10VideoAssetV2eeoiySbAC_ACtFZ_0((_QWORD *)(a1 + *(int *)(v4 + 24)), (_QWORD *)(a2 + *(int *)(v4 + 24)));
  }
  else
  {
    return 0;
  }
}

uint64_t BrowseDetailVideoLinkItem.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23BE5AEB8();
  sub_23BE5A678();
  sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
  sub_23BE5AC30();
  v1 = type metadata accessor for BrowseDetailVideoLinkItem();
  sub_23BE5AC9C();
  v2 = v0 + *(int *)(v1 + 24);
  sub_23BE5AC9C();
  if (*(_QWORD *)(v2 + 24))
  {
    sub_23BE5AED0();
    swift_bridgeObjectRetain();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BE5AED0();
  }
  type metadata accessor for VideoAsset();
  sub_23BE5A690();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23BE5AC30();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE29F80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  sub_23BE5A678();
  sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
  sub_23BE5AC30();
  sub_23BE5AC9C();
  v4 = v2 + *(int *)(a2 + 24);
  sub_23BE5AC9C();
  if (*(_QWORD *)(v4 + 24))
  {
    sub_23BE5AED0();
    swift_bridgeObjectRetain();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BE5AED0();
  }
  type metadata accessor for VideoAsset();
  sub_23BE5A690();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  return sub_23BE5AC30();
}

uint64_t sub_23BE2A0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  sub_23BE5AEB8();
  sub_23BE5A678();
  sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
  sub_23BE5AC30();
  sub_23BE5AC9C();
  v4 = v2 + *(int *)(a2 + 24);
  sub_23BE5AC9C();
  if (*(_QWORD *)(v4 + 24))
  {
    sub_23BE5AED0();
    swift_bridgeObjectRetain();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BE5AED0();
  }
  type metadata accessor for VideoAsset();
  sub_23BE5A690();
  sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23BE5AC30();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE2A1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  BOOL v10;

  if ((sub_23BE5A66C() & 1) != 0
    && ((v6 = *(int *)(a3 + 20),
         v7 = *(_QWORD *)(a1 + v6),
         v8 = *(_QWORD *)(a1 + v6 + 8),
         v9 = (_QWORD *)(a2 + v6),
         v7 == *v9)
      ? (v10 = v8 == v9[1])
      : (v10 = 0),
        v10 || (sub_23BE5AE58() & 1) != 0))
  {
    return _s15FitnessBrowsing10VideoAssetV2eeoiySbAC_ACtFZ_0((_QWORD *)(a1 + *(int *)(a3 + 24)), (_QWORD *)(a2 + *(int *)(a3 + 24)));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_23BE2A24C()
{
  return sub_23BDF23E4(&qword_256AC7E10, (uint64_t (*)(uint64_t))type metadata accessor for BrowseDetailVideoLinkItem, (uint64_t)&protocol conformance descriptor for BrowseDetailVideoLinkItem);
}

uint64_t *initializeBufferWithCopyOfBuffer for BrowseDetailVideoLinkItem(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23BE5A678();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (char *)a2 + v9;
    v15 = *(uint64_t *)((char *)a2 + v9);
    v16 = *(uint64_t *)((char *)a2 + v9 + 8);
    *v13 = v15;
    v13[1] = v16;
    v17 = *((_QWORD *)v14 + 3);
    v13[2] = *((_QWORD *)v14 + 2);
    v13[3] = v17;
    v18 = *(int *)(type metadata accessor for VideoAsset() + 24);
    v19 = (char *)v13 + v18;
    v20 = &v14[v18];
    v21 = sub_23BE5A690();
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22(v19, v20, v21);
  }
  return a1;
}

uint64_t destroy for BrowseDetailVideoLinkItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_23BE5A678();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v5 + *(int *)(type metadata accessor for VideoAsset() + 24);
  v7 = sub_23BE5A690();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for BrowseDetailVideoLinkItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);

  v6 = sub_23BE5A678();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = a2 + v8;
  v14 = *(_QWORD *)(a2 + v8);
  v15 = *(_QWORD *)(a2 + v8 + 8);
  *v12 = v14;
  v12[1] = v15;
  v16 = *(_QWORD *)(v13 + 24);
  v12[2] = *(_QWORD *)(v13 + 16);
  v12[3] = v16;
  v17 = *(int *)(type metadata accessor for VideoAsset() + 24);
  v18 = (char *)v12 + v17;
  v19 = v13 + v17;
  v20 = sub_23BE5A690();
  v21 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v18, v19, v20);
  return a1;
}

uint64_t assignWithCopy for BrowseDetailVideoLinkItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = sub_23BE5A678();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[2] = v12[2];
  v11[3] = v12[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(int *)(type metadata accessor for VideoAsset() + 24);
  v14 = (char *)v11 + v13;
  v15 = (char *)v12 + v13;
  v16 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

uint64_t initializeWithTake for BrowseDetailVideoLinkItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = sub_23BE5A678();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = *(int *)(type metadata accessor for VideoAsset() + 24);
  v12 = (char *)v8 + v11;
  v13 = (char *)v9 + v11;
  v14 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for BrowseDetailVideoLinkItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = sub_23BE5A678();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v16 = v14[3];
  v13[2] = v14[2];
  v13[3] = v16;
  swift_bridgeObjectRelease();
  v17 = *(int *)(type metadata accessor for VideoAsset() + 24);
  v18 = (char *)v13 + v17;
  v19 = (char *)v14 + v17;
  v20 = sub_23BE5A690();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseDetailVideoLinkItem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE2A75C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_23BE5A678();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for VideoAsset();
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseDetailVideoLinkItem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE2A814(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_23BE5A678();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for VideoAsset();
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_23BE2A8BC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23BE5A678();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for VideoAsset();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrowseDetailVideoLinkItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE2A994 + 4 * byte_23BE607E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE2A9C8 + 4 * asc_23BE607E0[v4]))();
}

uint64_t sub_23BE2A9C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE2A9D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE2A9D8);
  return result;
}

uint64_t sub_23BE2A9E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE2A9ECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE2A9F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE2A9F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseDetailVideoLinkItem.CodingKeys()
{
  return &type metadata for BrowseDetailVideoLinkItem.CodingKeys;
}

unint64_t sub_23BE2AA18()
{
  unint64_t result;

  result = qword_256AC7EB0;
  if (!qword_256AC7EB0)
  {
    result = MEMORY[0x242612B20](&unk_23BE60994, &type metadata for BrowseDetailVideoLinkItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7EB0);
  }
  return result;
}

unint64_t sub_23BE2AA60()
{
  unint64_t result;

  result = qword_256AC7EB8;
  if (!qword_256AC7EB8)
  {
    result = MEMORY[0x242612B20](&unk_23BE60904, &type metadata for BrowseDetailVideoLinkItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7EB8);
  }
  return result;
}

unint64_t sub_23BE2AAA8()
{
  unint64_t result;

  result = qword_256AC7EC0;
  if (!qword_256AC7EC0)
  {
    result = MEMORY[0x242612B20](&unk_23BE6092C, &type metadata for BrowseDetailVideoLinkItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7EC0);
  }
  return result;
}

uint64_t sub_23BE2AAEC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7475626972747461 && a2 == 0xEF656C7469546465;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7373416F65646976 && a2 == 0xEA00000000007465)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t static BrowseError.== infix(_:_:)()
{
  return 1;
}

uint64_t BrowseError.hash(into:)()
{
  return sub_23BE5AEC4();
}

uint64_t BrowseError.hashValue.getter()
{
  sub_23BE5AEB8();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

unint64_t sub_23BE2ACE4()
{
  unint64_t result;

  result = qword_256AC7EC8;
  if (!qword_256AC7EC8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseError, &type metadata for BrowseError);
    atomic_store(result, (unint64_t *)&qword_256AC7EC8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrowseError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BE2AD78 + 4 * byte_23BE60A0C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BE2AD98 + 4 * byte_23BE60A11[v4]))();
}

_BYTE *sub_23BE2AD78(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BE2AD98(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE2ADA0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE2ADA8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE2ADB0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE2ADB8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BrowseError()
{
  return &type metadata for BrowseError;
}

__n128 BrowseEnvironment.init(fetchEditorialCollectionDetail:fetchEditorialGalleryItems:fetchSectionDescriptors:makeAllowedContentRatingsUpdatedStream:makeAppDidEnterBackgroundStream:makeBrowsingIdentityUpdatedStream:makeCatalogUpdatedStream:makeSignificantTimeChangeStream:makeStorefrontLanguageUpdatedStream:makeWheelchairStatusUpdatedStream:refreshCanvas:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __n128 a15, uint64_t a16, uint64_t a17)
{
  __n128 result;

  result = a15;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(_OWORD *)(a9 + 80) = a11;
  *(_OWORD *)(a9 + 96) = a12;
  *(_OWORD *)(a9 + 112) = a13;
  *(_OWORD *)(a9 + 128) = a14;
  *(__n128 *)(a9 + 144) = a15;
  *(_QWORD *)(a9 + 160) = a16;
  *(_QWORD *)(a9 + 168) = a17;
  return result;
}

uint64_t destroy for BrowseEnvironment()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for BrowseEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v3 = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for BrowseEnvironment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_retain();
  swift_release();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_retain();
  swift_release();
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_retain();
  swift_release();
  v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_retain();
  swift_release();
  v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  swift_retain();
  swift_release();
  v12 = a2[17];
  a1[16] = a2[16];
  a1[17] = v12;
  swift_retain();
  swift_release();
  v13 = a2[19];
  a1[18] = a2[18];
  a1[19] = v13;
  swift_retain();
  swift_release();
  v14 = a2[21];
  a1[20] = a2[20];
  a1[21] = v14;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy176_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

_OWORD *assignWithTake for BrowseEnvironment(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  a1[4] = a2[4];
  swift_release();
  a1[5] = a2[5];
  swift_release();
  a1[6] = a2[6];
  swift_release();
  a1[7] = a2[7];
  swift_release();
  a1[8] = a2[8];
  swift_release();
  a1[9] = a2[9];
  swift_release();
  a1[10] = a2[10];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseEnvironment(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 176))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseEnvironment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 176) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BrowseEnvironment()
{
  return &type metadata for BrowseEnvironment;
}

uint64_t BrowseGalleryDescriptor.copyWith(displayStyle:identifier:items:preferredInsetBehavior:title:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;

  v8 = v7;
  v48 = a6;
  v47 = a5;
  v50 = a2;
  v51 = a1;
  LODWORD(v46) = a1;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_23BE5A678();
  v49 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for BrowseGalleryDescriptor();
  v16 = MEMORY[0x24BDAC7A8](v43);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v42 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v42 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v42 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (unsigned __int8 *)&v42 - v28;
  sub_23BE2B5A8(v8, (uint64_t)&v42 - v28);
  if ((_DWORD)v46 == 36)
    v51 = *v29;
  sub_23BE2B5EC((uint64_t)v29);
  sub_23BE2B5A8(v8, (uint64_t)v27);
  if (a3)
  {
    v46 = a3;
  }
  else
  {
    v30 = *((_QWORD *)v27 + 2);
    v50 = *((_QWORD *)v27 + 1);
    v46 = v30;
    swift_bridgeObjectRetain();
  }
  v31 = v47;
  swift_bridgeObjectRetain();
  sub_23BE2B5EC((uint64_t)v27);
  sub_23BE2B5A8(v8, (uint64_t)v24);
  if (a4)
  {
    v32 = a4;
  }
  else
  {
    v32 = *((_QWORD *)v24 + 3);
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  sub_23BE2B5EC((uint64_t)v24);
  sub_23BE2B5A8(v8, (uint64_t)v21);
  if (v31 == 2)
    v33 = v21[32];
  else
    v33 = v31 & 1;
  v35 = v44;
  v34 = v45;
  v36 = v43;
  sub_23BE2B5EC((uint64_t)v21);
  sub_23BDF2358(v48, (uint64_t)v14);
  sub_23BE2B5A8(v8, (uint64_t)v18);
  v37 = v49;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v14, 1, v34) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v35, &v18[*(int *)(v36 + 32)], v34);
    sub_23BE2B5EC((uint64_t)v18);
    sub_23BE2B628((uint64_t)v14);
    v38 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
  }
  else
  {
    sub_23BE2B5EC((uint64_t)v18);
    v38 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    v38(v35, v14, v34);
  }
  v39 = v50;
  v40 = v46;
  *(_BYTE *)a7 = v51;
  *(_QWORD *)(a7 + 8) = v39;
  *(_QWORD *)(a7 + 16) = v40;
  *(_QWORD *)(a7 + 24) = v32;
  *(_BYTE *)(a7 + 32) = v33;
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v38)(a7 + *(int *)(v36 + 32), v35, v34);
}

uint64_t sub_23BE2B5A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseGalleryDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BE2B5EC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BrowseGalleryDescriptor();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BE2B628(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CreatePlanBannerDescriptor.actionTitle.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CreatePlanBannerDescriptor.subtitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CreatePlanBannerDescriptor.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void __swiftcall CreatePlanBannerDescriptor.init(actionTitle:subtitle:title:)(FitnessBrowsing::CreatePlanBannerDescriptor *__return_ptr retstr, Swift::String_optional actionTitle, Swift::String_optional subtitle, Swift::String_optional title)
{
  retstr->actionTitle = actionTitle;
  retstr->subtitle = subtitle;
  retstr->title = title;
}

uint64_t sub_23BE2B700()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C746974627573;
  if (*v0 != 1)
    v1 = 0x656C746974;
  if (*v0)
    return v1;
  else
    return 0x69546E6F69746361;
}

uint64_t sub_23BE2B760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE2C2F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE2B784()
{
  sub_23BE2BE94();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE2B7AC()
{
  sub_23BE2BE94();
  return sub_23BE5AF18();
}

uint64_t CreatePlanBannerDescriptor.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];
  char v12;
  char v13;
  char v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7ED0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v11[3] = v1[3];
  v11[4] = v7;
  v8 = v1[4];
  v11[1] = v1[5];
  v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE2BE94();
  sub_23BE5AF00();
  v14 = 0;
  v9 = v11[5];
  sub_23BE5AE04();
  if (!v9)
  {
    v13 = 1;
    sub_23BE5AE04();
    v12 = 2;
    sub_23BE5AE04();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t CreatePlanBannerDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7EE0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE2BE94();
  sub_23BE5AEF4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v27 = 0;
  v9 = sub_23BE5AD98();
  v11 = v10;
  v24 = v9;
  v26 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_23BE5AD98();
  v14 = v13;
  v22 = v12;
  v25 = 2;
  swift_bridgeObjectRetain();
  v23 = v14;
  v15 = sub_23BE5AD98();
  v17 = v16;
  v18 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  v19 = v23;
  *a2 = v24;
  a2[1] = v11;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v18;
  a2[5] = v17;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BE2BB68@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return CreatePlanBannerDescriptor.init(from:)(a1, a2);
}

uint64_t sub_23BE2BB7C(_QWORD *a1)
{
  return CreatePlanBannerDescriptor.encode(to:)(a1);
}

uint64_t CreatePlanBannerDescriptor.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[5];
  if (v0[1])
  {
    sub_23BE5AED0();
    swift_bridgeObjectRetain();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
    if (v1)
      goto LABEL_3;
LABEL_6:
    sub_23BE5AED0();
    if (v2)
      goto LABEL_4;
    return sub_23BE5AED0();
  }
  sub_23BE5AED0();
  if (!v1)
    goto LABEL_6;
LABEL_3:
  sub_23BE5AED0();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  if (v2)
  {
LABEL_4:
    sub_23BE5AED0();
    swift_bridgeObjectRetain();
    sub_23BE5AC9C();
    return swift_bridgeObjectRelease();
  }
  return sub_23BE5AED0();
}

uint64_t CreatePlanBannerDescriptor.hashValue.getter()
{
  sub_23BE5AEB8();
  CreatePlanBannerDescriptor.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE2BCE0()
{
  sub_23BE5AEB8();
  CreatePlanBannerDescriptor.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE2BD34()
{
  sub_23BE5AEB8();
  CreatePlanBannerDescriptor.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing26CreatePlanBannerDescriptorV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  char v15;

  v3 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v5 = a1[4];
  v7 = a1[5];
  v8 = a2[1];
  v9 = a2[2];
  v11 = a2[3];
  v10 = a2[4];
  v12 = a2[5];
  if (!v3)
  {
    if (v8)
      return 0;
    goto LABEL_8;
  }
  if (!v8)
    return 0;
  if (*a1 == *a2 && v3 == v8 || (v13 = sub_23BE5AE58(), result = 0, (v13 & 1) != 0))
  {
LABEL_8:
    if (v6)
    {
      if (!v11)
        return 0;
      if (v4 != v9 || v6 != v11)
      {
        v15 = sub_23BE5AE58();
        result = 0;
        if ((v15 & 1) == 0)
          return result;
      }
    }
    else if (v11)
    {
      return 0;
    }
    if (v7)
    {
      if (v12 && (v5 == v10 && v7 == v12 || (sub_23BE5AE58() & 1) != 0))
        return 1;
    }
    else if (!v12)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_23BE2BE94()
{
  unint64_t result;

  result = qword_256AC7ED8;
  if (!qword_256AC7ED8)
  {
    result = MEMORY[0x242612B20](&unk_23BE60CC0, &type metadata for CreatePlanBannerDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7ED8);
  }
  return result;
}

unint64_t sub_23BE2BEDC()
{
  unint64_t result;

  result = qword_256AC7EE8;
  if (!qword_256AC7EE8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for CreatePlanBannerDescriptor, &type metadata for CreatePlanBannerDescriptor);
    atomic_store(result, (unint64_t *)&qword_256AC7EE8);
  }
  return result;
}

uint64_t destroy for CreatePlanBannerDescriptor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for CreatePlanBannerDescriptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CreatePlanBannerDescriptor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for CreatePlanBannerDescriptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CreatePlanBannerDescriptor(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CreatePlanBannerDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CreatePlanBannerDescriptor()
{
  return &type metadata for CreatePlanBannerDescriptor;
}

uint64_t storeEnumTagSinglePayload for CreatePlanBannerDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE2C19C + 4 * byte_23BE60B05[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE2C1D0 + 4 * asc_23BE60B00[v4]))();
}

uint64_t sub_23BE2C1D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE2C1D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE2C1E0);
  return result;
}

uint64_t sub_23BE2C1EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE2C1F4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE2C1F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE2C200(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CreatePlanBannerDescriptor.CodingKeys()
{
  return &type metadata for CreatePlanBannerDescriptor.CodingKeys;
}

unint64_t sub_23BE2C220()
{
  unint64_t result;

  result = qword_256AC7EF0;
  if (!qword_256AC7EF0)
  {
    result = MEMORY[0x242612B20](&unk_23BE60C98, &type metadata for CreatePlanBannerDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7EF0);
  }
  return result;
}

unint64_t sub_23BE2C268()
{
  unint64_t result;

  result = qword_256AC7EF8;
  if (!qword_256AC7EF8)
  {
    result = MEMORY[0x242612B20](&unk_23BE60C08, &type metadata for CreatePlanBannerDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7EF8);
  }
  return result;
}

unint64_t sub_23BE2C2B0()
{
  unint64_t result;

  result = qword_256AC7F00;
  if (!qword_256AC7F00)
  {
    result = MEMORY[0x242612B20](&unk_23BE60C30, &type metadata for CreatePlanBannerDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7F00);
  }
  return result;
}

uint64_t sub_23BE2C2F4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x69546E6F69746361 && a2 == 0xEB00000000656C74;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BE2C458()
{
  sub_23BE2CB0C();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE2C480()
{
  sub_23BE2CB0C();
  return sub_23BE5AF18();
}

uint64_t sub_23BE2C4A8()
{
  sub_23BE2CAC8();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE2C4D0()
{
  sub_23BE2CAC8();
  return sub_23BE5AF18();
}

uint64_t sub_23BE2C4F8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BE2C52C + 4 * byte_23BE60D10[*v0]))(0xD000000000000011, 0x800000023BE66460);
}

uint64_t sub_23BE2C52C()
{
  return 0x615472656E6E6162;
}

uint64_t sub_23BE2C54C()
{
  return 0x6570704177656976;
}

uint64_t sub_23BE2C584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE2DA64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE2C5A8()
{
  sub_23BE2C9FC();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE2C5D0()
{
  sub_23BE2C9FC();
  return sub_23BE5AF18();
}

uint64_t sub_23BE2C5F8()
{
  sub_23BE2CA84();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE2C620()
{
  sub_23BE2CA84();
  return sub_23BE5AF18();
}

uint64_t sub_23BE2C648()
{
  sub_23BE2CA40();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE2C670()
{
  sub_23BE2CA40();
  return sub_23BE5AF18();
}

uint64_t CreatePlanBannerAction.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7F08);
  v33 = *(_QWORD *)(v4 - 8);
  v34 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v32 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7F10);
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v29 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7F18);
  v27 = *(_QWORD *)(v8 - 8);
  v28 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7F20);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7F28);
  v35 = *(_QWORD *)(v15 - 8);
  v36 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE2C9FC();
  sub_23BE5AF00();
  switch(v18)
  {
    case 5:
      v39 = 2;
      sub_23BE2CA84();
      v20 = v29;
      v19 = v36;
      sub_23BE5ADF8();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v31);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v17, v19);
    case 4:
      v38 = 1;
      sub_23BE2CAC8();
      v22 = v36;
      sub_23BE5ADF8();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v17, v22);
    case 3:
      v37 = 0;
      sub_23BE2CB0C();
      v19 = v36;
      sub_23BE5ADF8();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v17, v19);
    default:
      v41 = 3;
      sub_23BE2CA40();
      v23 = v32;
      v24 = v36;
      sub_23BE5ADF8();
      v40 = v18;
      sub_23BE0C9D8();
      v25 = v34;
      sub_23BE5AE4C();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v17, v24);
  }
}

unint64_t sub_23BE2C9FC()
{
  unint64_t result;

  result = qword_256AC7F30;
  if (!qword_256AC7F30)
  {
    result = MEMORY[0x242612B20](&unk_23BE6124C, &type metadata for CreatePlanBannerAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7F30);
  }
  return result;
}

unint64_t sub_23BE2CA40()
{
  unint64_t result;

  result = qword_256AC7F38;
  if (!qword_256AC7F38)
  {
    result = MEMORY[0x242612B20](&unk_23BE611FC, &type metadata for CreatePlanBannerAction.VisibilityChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7F38);
  }
  return result;
}

unint64_t sub_23BE2CA84()
{
  unint64_t result;

  result = qword_256AC7F40;
  if (!qword_256AC7F40)
  {
    result = MEMORY[0x242612B20](&unk_23BE611AC, &type metadata for CreatePlanBannerAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7F40);
  }
  return result;
}

unint64_t sub_23BE2CAC8()
{
  unint64_t result;

  result = qword_256AC7F48;
  if (!qword_256AC7F48)
  {
    result = MEMORY[0x242612B20](&unk_23BE6115C, &type metadata for CreatePlanBannerAction.BannerTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7F48);
  }
  return result;
}

unint64_t sub_23BE2CB0C()
{
  unint64_t result;

  result = qword_256AC7F50;
  if (!qword_256AC7F50)
  {
    result = MEMORY[0x242612B20](&unk_23BE6110C, &type metadata for CreatePlanBannerAction.ActivePlanChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7F50);
  }
  return result;
}

uint64_t CreatePlanBannerAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v24[7];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v31 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7F58);
  v4 = *(_QWORD *)(v3 - 8);
  v26 = v3;
  v27 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7F60);
  v24[4] = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7F68);
  v24[5] = *(_QWORD *)(v7 - 8);
  v24[6] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v28 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7F70);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7F78);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v32 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  sub_23BE2C9FC();
  v18 = v33;
  sub_23BE5AEF4();
  if (!v18)
  {
    v24[2] = v9;
    v24[3] = v12;
    v24[1] = v10;
    v33 = v14;
    v19 = sub_23BE5ADEC();
    if (*(_QWORD *)(v19 + 16) == 1)
      __asm { BR              X10 }
    v20 = sub_23BE5AD68();
    swift_allocError();
    v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v22 = &type metadata for CreatePlanBannerAction;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v13);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
}

uint64_t sub_23BE2D0E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CreatePlanBannerAction.init(from:)(a1, a2);
}

uint64_t sub_23BE2D0F4(_QWORD *a1)
{
  return CreatePlanBannerAction.encode(to:)(a1);
}

uint64_t CreatePlanBannerAction.hash(into:)()
{
  unsigned __int8 *v0;

  if (*v0 - 3 >= 3)
    sub_23BE5AEC4();
  return sub_23BE5AEC4();
}

BOOL static CreatePlanBannerAction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  switch(v2)
  {
    case 5:
      return v3 == 5;
    case 4:
      return v3 == 4;
    case 3:
      return v3 == 3;
  }
  if ((v3 - 3) < 3)
    return 0;
  return v2 == v3;
}

uint64_t CreatePlanBannerAction.hashValue.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  sub_23BE5AEB8();
  if ((v1 - 3) >= 3)
    sub_23BE5AEC4();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE2D21C()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  sub_23BE5AEB8();
  if ((v1 - 3) >= 3)
    sub_23BE5AEC4();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE2D27C()
{
  unsigned __int8 *v0;

  if (*v0 - 3 >= 3)
    sub_23BE5AEC4();
  return sub_23BE5AEC4();
}

uint64_t sub_23BE2D2C0()
{
  unsigned __int8 *v0;

  sub_23BE5AEB8();
  if (*v0 - 3 >= 3)
    sub_23BE5AEC4();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

unint64_t sub_23BE2D320()
{
  unint64_t result;

  result = qword_256AC7F80;
  if (!qword_256AC7F80)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for CreatePlanBannerAction, &type metadata for CreatePlanBannerAction);
    atomic_store(result, (unint64_t *)&qword_256AC7F80);
  }
  return result;
}

BOOL sub_23BE2D364(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  switch(v2)
  {
    case 5:
      return v3 == 5;
    case 4:
      return v3 == 4;
    case 3:
      return v3 == 3;
  }
  if ((v3 - 3) < 3)
    return 0;
  return v2 == v3;
}

uint64_t getEnumTagSinglePayload for CreatePlanBannerAction(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
  {
    v6 = *a1;
    if (v6 >= 3)
      v7 = v6 - 2;
    else
      v7 = 0;
    if (v7 >= 4)
      return v7 - 3;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23BE2D41C + 4 * byte_23BE60D18[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for CreatePlanBannerAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFB)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23BE2D4C8 + 4 * byte_23BE60D22[v5]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23BE2D4FC + 4 * byte_23BE60D1D[v5]))();
}

uint64_t sub_23BE2D4FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE2D504(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE2D50CLL);
  return result;
}

uint64_t sub_23BE2D518(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE2D520);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23BE2D524(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE2D52C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE2D538(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 3)
    return v1 - 2;
  else
    return 0;
}

_BYTE *sub_23BE2D54C(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 2;
  return result;
}

ValueMetadata *type metadata accessor for CreatePlanBannerAction()
{
  return &type metadata for CreatePlanBannerAction;
}

uint64_t storeEnumTagSinglePayload for CreatePlanBannerAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BE2D5B8 + 4 * byte_23BE60D2C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BE2D5EC + 4 * byte_23BE60D27[v4]))();
}

uint64_t sub_23BE2D5EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE2D5F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE2D5FCLL);
  return result;
}

uint64_t sub_23BE2D608(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE2D610);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BE2D614(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE2D61C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CreatePlanBannerAction.CodingKeys()
{
  return &type metadata for CreatePlanBannerAction.CodingKeys;
}

ValueMetadata *type metadata accessor for CreatePlanBannerAction.ActivePlanChangedCodingKeys()
{
  return &type metadata for CreatePlanBannerAction.ActivePlanChangedCodingKeys;
}

ValueMetadata *type metadata accessor for CreatePlanBannerAction.BannerTappedCodingKeys()
{
  return &type metadata for CreatePlanBannerAction.BannerTappedCodingKeys;
}

ValueMetadata *type metadata accessor for CreatePlanBannerAction.ViewAppearedCodingKeys()
{
  return &type metadata for CreatePlanBannerAction.ViewAppearedCodingKeys;
}

uint64_t storeEnumTagSinglePayload for CreatePlanBannerAction.VisibilityChangedCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BE2D6A8 + 4 * byte_23BE60D31[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BE2D6C8 + 4 * byte_23BE60D36[v4]))();
}

_BYTE *sub_23BE2D6A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BE2D6C8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE2D6D0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE2D6D8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE2D6E0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE2D6E8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CreatePlanBannerAction.VisibilityChangedCodingKeys()
{
  return &type metadata for CreatePlanBannerAction.VisibilityChangedCodingKeys;
}

unint64_t sub_23BE2D708()
{
  unint64_t result;

  result = qword_256AC7F88;
  if (!qword_256AC7F88)
  {
    result = MEMORY[0x242612B20](&unk_23BE60F3C, &type metadata for CreatePlanBannerAction.VisibilityChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7F88);
  }
  return result;
}

unint64_t sub_23BE2D750()
{
  unint64_t result;

  result = qword_256AC7F90;
  if (!qword_256AC7F90)
  {
    result = MEMORY[0x242612B20](&unk_23BE610E4, &type metadata for CreatePlanBannerAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7F90);
  }
  return result;
}

unint64_t sub_23BE2D798()
{
  unint64_t result;

  result = qword_256AC7F98;
  if (!qword_256AC7F98)
  {
    result = MEMORY[0x242612B20](&unk_23BE61004, &type metadata for CreatePlanBannerAction.ActivePlanChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7F98);
  }
  return result;
}

unint64_t sub_23BE2D7E0()
{
  unint64_t result;

  result = qword_256AC7FA0;
  if (!qword_256AC7FA0)
  {
    result = MEMORY[0x242612B20](&unk_23BE6102C, &type metadata for CreatePlanBannerAction.ActivePlanChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7FA0);
  }
  return result;
}

unint64_t sub_23BE2D828()
{
  unint64_t result;

  result = qword_256AC7FA8;
  if (!qword_256AC7FA8)
  {
    result = MEMORY[0x242612B20](&unk_23BE60FB4, &type metadata for CreatePlanBannerAction.BannerTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7FA8);
  }
  return result;
}

unint64_t sub_23BE2D870()
{
  unint64_t result;

  result = qword_256AC7FB0;
  if (!qword_256AC7FB0)
  {
    result = MEMORY[0x242612B20](&unk_23BE60FDC, &type metadata for CreatePlanBannerAction.BannerTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7FB0);
  }
  return result;
}

unint64_t sub_23BE2D8B8()
{
  unint64_t result;

  result = qword_256AC7FB8;
  if (!qword_256AC7FB8)
  {
    result = MEMORY[0x242612B20](&unk_23BE60F64, &type metadata for CreatePlanBannerAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7FB8);
  }
  return result;
}

unint64_t sub_23BE2D900()
{
  unint64_t result;

  result = qword_256AC7FC0;
  if (!qword_256AC7FC0)
  {
    result = MEMORY[0x242612B20](&unk_23BE60F8C, &type metadata for CreatePlanBannerAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7FC0);
  }
  return result;
}

unint64_t sub_23BE2D948()
{
  unint64_t result;

  result = qword_256AC7FC8;
  if (!qword_256AC7FC8)
  {
    result = MEMORY[0x242612B20](&unk_23BE60EAC, &type metadata for CreatePlanBannerAction.VisibilityChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7FC8);
  }
  return result;
}

unint64_t sub_23BE2D990()
{
  unint64_t result;

  result = qword_256AC7FD0;
  if (!qword_256AC7FD0)
  {
    result = MEMORY[0x242612B20](&unk_23BE60ED4, &type metadata for CreatePlanBannerAction.VisibilityChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7FD0);
  }
  return result;
}

unint64_t sub_23BE2D9D8()
{
  unint64_t result;

  result = qword_256AC7FD8;
  if (!qword_256AC7FD8)
  {
    result = MEMORY[0x242612B20](&unk_23BE61054, &type metadata for CreatePlanBannerAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7FD8);
  }
  return result;
}

unint64_t sub_23BE2DA20()
{
  unint64_t result;

  result = qword_256AC7FE0;
  if (!qword_256AC7FE0)
  {
    result = MEMORY[0x242612B20](&unk_23BE6107C, &type metadata for CreatePlanBannerAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7FE0);
  }
  return result;
}

uint64_t sub_23BE2DA64(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x800000023BE66460 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x615472656E6E6162 && a2 == 0xEC00000064657070 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6570704177656976 && a2 == 0xEC00000064657261 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023BE66480)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t BrowseLocalState.lastBackgroundTimeStamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BE2DC34(v1, a1);
}

uint64_t sub_23BE2DC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7FE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t BrowseLocalState.lastBackgroundTimeStamp.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23BE2DC84(a1, v1);
}

uint64_t sub_23BE2DC84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7FE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*BrowseLocalState.lastBackgroundTimeStamp.modify())()
{
  return nullsub_1;
}

uint64_t BrowseLocalState.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_23BE5A6C0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

unint64_t sub_23BE2DD18()
{
  return 0xD000000000000017;
}

uint64_t sub_23BE2DD34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE2ECB4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BE2DD5C()
{
  sub_23BE2DEB4();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE2DD84()
{
  sub_23BE2DEB4();
  return sub_23BE5AF18();
}

uint64_t BrowseLocalState.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7FF0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE2DEB4();
  sub_23BE5AF00();
  sub_23BE5A6C0();
  sub_23BE2ED38(&qword_256AC8000, MEMORY[0x24BDCE920]);
  sub_23BE5AE1C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_23BE2DEB4()
{
  unint64_t result;

  result = qword_256AC7FF8;
  if (!qword_256AC7FF8)
  {
    result = MEMORY[0x242612B20](&unk_23BE61404, &type metadata for BrowseLocalState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC7FF8);
  }
  return result;
}

uint64_t BrowseLocalState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7FE8);
  MEMORY[0x24BDAC7A8](v4);
  v16 = (uint64_t)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8008);
  v15 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BrowseLocalState();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23BE5A6C0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE2DEB4();
  sub_23BE5AEF4();
  if (!v2)
  {
    sub_23BE2ED38(&qword_256AC8010, MEMORY[0x24BDCE960]);
    sub_23BE5ADB0();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v6);
    sub_23BE2DC84(v16, (uint64_t)v11);
    sub_23BE2E154((uint64_t)v11, v14);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23BE2E118((uint64_t)v11);
}

uint64_t type metadata accessor for BrowseLocalState()
{
  uint64_t result;

  result = qword_256AC8070;
  if (!qword_256AC8070)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23BE2E118(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BrowseLocalState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BE2E154(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseLocalState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BE2E198@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseLocalState.init(from:)(a1, a2);
}

uint64_t sub_23BE2E1AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7FF0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE2DEB4();
  sub_23BE5AF00();
  sub_23BE5A6C0();
  sub_23BE2ED38(&qword_256AC8000, MEMORY[0x24BDCE920]);
  sub_23BE5AE1C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

BOOL _s15FitnessBrowsing16BrowseLocalStateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v4 = sub_23BE5A6C0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC80C8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7FE8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v25 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v25 - v18;
  sub_23BE2DC34(a1, (uint64_t)&v25 - v18);
  sub_23BE2DC34(a2, (uint64_t)v17);
  v20 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_23BE2DC34((uint64_t)v19, (uint64_t)v10);
  sub_23BE2DC34((uint64_t)v17, v20);
  v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v10, 1, v4) == 1)
  {
    sub_23BE000B8((uint64_t)v17, &qword_256AC7FE8);
    sub_23BE000B8((uint64_t)v19, &qword_256AC7FE8);
    if (v21(v20, 1, v4) == 1)
    {
      sub_23BE000B8((uint64_t)v10, &qword_256AC7FE8);
      return 1;
    }
    goto LABEL_6;
  }
  sub_23BE2DC34((uint64_t)v10, (uint64_t)v14);
  if (v21(v20, 1, v4) == 1)
  {
    sub_23BE000B8((uint64_t)v17, &qword_256AC7FE8);
    sub_23BE000B8((uint64_t)v19, &qword_256AC7FE8);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
LABEL_6:
    sub_23BE000B8((uint64_t)v10, &qword_256AC80C8);
    return 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v20, v4);
  sub_23BE2ED38(&qword_256AC80D0, MEMORY[0x24BDCE958]);
  v22 = sub_23BE5AC3C();
  v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v7, v4);
  sub_23BE000B8((uint64_t)v17, &qword_256AC7FE8);
  sub_23BE000B8((uint64_t)v19, &qword_256AC7FE8);
  v23(v14, v4);
  sub_23BE000B8((uint64_t)v10, &qword_256AC7FE8);
  return (v22 & 1) != 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for BrowseLocalState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC7FE8) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = sub_23BE5A6C0();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
  }
  return a1;
}

uint64_t destroy for BrowseLocalState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_23BE5A6C0();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for BrowseLocalState(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_23BE5A6C0();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7FE8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for BrowseLocalState(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = sub_23BE5A6C0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7FE8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for BrowseLocalState(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_23BE5A6C0();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7FE8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for BrowseLocalState(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = sub_23BE5A6C0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7FE8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseLocalState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE2E9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7FE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for BrowseLocalState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE2EA40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7FE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_23BE2EA84()
{
  unint64_t v0;

  sub_23BE2EAEC();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_23BE2EAEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256AC8080)
  {
    sub_23BE5A6C0();
    v0 = sub_23BE5AD2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256AC8080);
  }
}

uint64_t storeEnumTagSinglePayload for BrowseLocalState.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BE2EB80 + 4 * byte_23BE612A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BE2EBA0 + 4 * byte_23BE612A5[v4]))();
}

_BYTE *sub_23BE2EB80(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BE2EBA0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE2EBA8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE2EBB0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE2EBB8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE2EBC0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BrowseLocalState.CodingKeys()
{
  return &type metadata for BrowseLocalState.CodingKeys;
}

unint64_t sub_23BE2EBE0()
{
  unint64_t result;

  result = qword_256AC80B0;
  if (!qword_256AC80B0)
  {
    result = MEMORY[0x242612B20](&unk_23BE613DC, &type metadata for BrowseLocalState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC80B0);
  }
  return result;
}

unint64_t sub_23BE2EC28()
{
  unint64_t result;

  result = qword_256AC80B8;
  if (!qword_256AC80B8)
  {
    result = MEMORY[0x242612B20](&unk_23BE6134C, &type metadata for BrowseLocalState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC80B8);
  }
  return result;
}

unint64_t sub_23BE2EC70()
{
  unint64_t result;

  result = qword_256AC80C0;
  if (!qword_256AC80C0)
  {
    result = MEMORY[0x242612B20](&unk_23BE61374, &type metadata for BrowseLocalState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC80C0);
  }
  return result;
}

uint64_t sub_23BE2ECB4(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000017 && a2 == 0x800000023BE664A0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_23BE2ED38(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23BE5A6C0();
    result = MEMORY[0x242612B20](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BE2ED78(char a1)
{
  if (!a1)
    return 0xD000000000000019;
  if (a1 == 1)
    return 0xD000000000000010;
  return 0xD000000000000012;
}

unint64_t sub_23BE2EDD8()
{
  char *v0;

  return sub_23BE2ED78(*v0);
}

uint64_t sub_23BE2EDE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE31B00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE2EE04()
{
  sub_23BE2F6B4();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE2EE2C()
{
  sub_23BE2F6B4();
  return sub_23BE5AF18();
}

uint64_t sub_23BE2EE54()
{
  sub_23BE2F780();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE2EE7C()
{
  sub_23BE2F780();
  return sub_23BE5AF18();
}

uint64_t sub_23BE2EEA4()
{
  return 0x7470697263736564;
}

uint64_t sub_23BE2EEC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7470697263736564 && a2 == 0xEA0000000000726FLL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23BE5AE58();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23BE2EF60()
{
  sub_23BE2F73C();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE2EF88()
{
  sub_23BE2F73C();
  return sub_23BE5AF18();
}

uint64_t sub_23BE2EFB0()
{
  sub_23BE2F6F8();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE2EFD8()
{
  sub_23BE2F6F8();
  return sub_23BE5AF18();
}

uint64_t BrowseContent.sectionDescriptors.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for BrowseGalleryDescriptor();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for EditorialCollectionDetail();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BrowseContent();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BDF23A0(v1, (uint64_t)v10, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23BDF2424((uint64_t)v10, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for BrowseGalleryDescriptor);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7A50);
      v13 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BrowseSectionDescriptor() - 8) + 80);
      v14 = (v13 + 32) & ~v13;
      v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_23BE61460;
      sub_23BDF23A0((uint64_t)v4, v15 + v14, (uint64_t (*)(_QWORD))type metadata accessor for BrowseGalleryDescriptor);
      swift_storeEnumTagMultiPayload();
      sub_23BDF2468((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for BrowseGalleryDescriptor);
    }
    else
    {
      return *(_QWORD *)v10;
    }
  }
  else
  {
    sub_23BDF2424((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollectionDetail);
    v15 = *(_QWORD *)&v7[*(int *)(v5 + 24)];
    swift_bridgeObjectRetain();
    sub_23BDF2468((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollectionDetail);
  }
  return v15;
}

uint64_t type metadata accessor for BrowseContent()
{
  uint64_t result;

  result = qword_256AC81C0;
  if (!qword_256AC81C0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BrowseContent.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int EnumCaseMultiPayload;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC80D8);
  v39 = *(_QWORD *)(v2 - 8);
  v40 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v38 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC80E0);
  v36 = *(_QWORD *)(v4 - 8);
  v37 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v35 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for BrowseGalleryDescriptor();
  MEMORY[0x24BDAC7A8](v34);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC80E8);
  v32 = *(_QWORD *)(v8 - 8);
  v33 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for EditorialCollectionDetail();
  MEMORY[0x24BDAC7A8](v31);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BrowseContent();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC80F0);
  v42 = *(_QWORD *)(v16 - 8);
  v43 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE2F6B4();
  sub_23BE5AF00();
  sub_23BDF23A0(v41, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for BrowseContent);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23BDF2424((uint64_t)v15, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for BrowseGalleryDescriptor);
      v46 = 1;
      sub_23BE2F73C();
      v20 = v35;
      v21 = v43;
      sub_23BE5ADF8();
      sub_23BDF23E4(&qword_256AC76C0, (uint64_t (*)(uint64_t))type metadata accessor for BrowseGalleryDescriptor, (uint64_t)&protocol conformance descriptor for BrowseGalleryDescriptor);
      v22 = v37;
      sub_23BE5AE4C();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v20, v22);
      sub_23BDF2468((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for BrowseGalleryDescriptor);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v18, v21);
    }
    else
    {
      v26 = *v15;
      v47 = 2;
      sub_23BE2F6F8();
      v27 = v38;
      v28 = v43;
      sub_23BE5ADF8();
      v44 = v26;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7578);
      sub_23BE17508(&qword_256AC7580, &qword_256AC7588, (uint64_t)&protocol conformance descriptor for BrowseSectionDescriptor, MEMORY[0x24BEE12A0]);
      v29 = v40;
      sub_23BE5AE4C();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v27, v29);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v18, v28);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_23BDF2424((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollectionDetail);
    v45 = 0;
    sub_23BE2F780();
    v24 = v43;
    sub_23BE5ADF8();
    sub_23BDF23E4(&qword_256AC8118, (uint64_t (*)(uint64_t))type metadata accessor for EditorialCollectionDetail, (uint64_t)&protocol conformance descriptor for EditorialCollectionDetail);
    v25 = v33;
    sub_23BE5AE4C();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v25);
    sub_23BDF2468((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollectionDetail);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v18, v24);
  }
}

unint64_t sub_23BE2F6B4()
{
  unint64_t result;

  result = qword_256AC80F8;
  if (!qword_256AC80F8)
  {
    result = MEMORY[0x242612B20](&unk_23BE619A0, &type metadata for BrowseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC80F8);
  }
  return result;
}

unint64_t sub_23BE2F6F8()
{
  unint64_t result;

  result = qword_256AC8100;
  if (!qword_256AC8100)
  {
    result = MEMORY[0x242612B20](&unk_23BE61950, &type metadata for BrowseContent.SectionDescriptorsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8100);
  }
  return result;
}

unint64_t sub_23BE2F73C()
{
  unint64_t result;

  result = qword_256AC8108;
  if (!qword_256AC8108)
  {
    result = MEMORY[0x242612B20](&unk_23BE61900, &type metadata for BrowseContent.EditorialGalleryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8108);
  }
  return result;
}

unint64_t sub_23BE2F780()
{
  unint64_t result;

  result = qword_256AC8110;
  if (!qword_256AC8110)
  {
    result = MEMORY[0x242612B20](&unk_23BE618B0, &type metadata for BrowseContent.EditorialCollectionDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8110);
  }
  return result;
}

uint64_t BrowseContent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;

  v55 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8120);
  v4 = *(_QWORD *)(v3 - 8);
  v53 = v3;
  v54 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v56 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8128);
  v7 = *(_QWORD *)(v6 - 8);
  v51 = v6;
  v52 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v60 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8130);
  v49 = *(_QWORD *)(v9 - 8);
  v50 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v58 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8138);
  v57 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BrowseContent();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v46 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v46 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v46 - v23;
  v25 = a1[3];
  v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v25);
  sub_23BE2F6B4();
  v26 = v62;
  sub_23BE5AEF4();
  if (!v26)
  {
    v47 = v22;
    v48 = v19;
    v46 = v16;
    v27 = v58;
    v28 = v59;
    v29 = v60;
    v62 = v13;
    v30 = sub_23BE5ADEC();
    v31 = (char *)v30;
    if (*(_QWORD *)(v30 + 16) == 1)
    {
      if (*(_BYTE *)(v30 + 32))
      {
        if (*(_BYTE *)(v30 + 32) != 1)
        {
          v66 = 2;
          sub_23BE2F6F8();
          sub_23BE5AD80();
          v60 = v31;
          __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7578);
          sub_23BE17508(&qword_256AC75A8, &qword_256AC75B0, (uint64_t)&protocol conformance descriptor for BrowseSectionDescriptor, MEMORY[0x24BEE12D0]);
          v42 = v53;
          v43 = v56;
          sub_23BE5ADE0();
          v44 = v57;
          (*(void (**)(char *, uint64_t))(v54 + 8))(v43, v42);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v28);
          v45 = (uint64_t)v46;
          *v46 = v63;
          swift_storeEnumTagMultiPayload();
          sub_23BDF2424(v45, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for BrowseContent);
          v33 = (uint64_t)v61;
          goto LABEL_12;
        }
        v65 = 1;
        sub_23BE2F73C();
        sub_23BE5AD80();
        type metadata accessor for BrowseGalleryDescriptor();
        sub_23BDF23E4(&qword_256AC7720, (uint64_t (*)(uint64_t))type metadata accessor for BrowseGalleryDescriptor, (uint64_t)&protocol conformance descriptor for BrowseGalleryDescriptor);
        v32 = v51;
        sub_23BE5ADE0();
        (*(void (**)(char *, uint64_t))(v52 + 8))(v29, v32);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v28);
        v33 = (uint64_t)v61;
        v34 = (uint64_t)v48;
        swift_storeEnumTagMultiPayload();
        v35 = v34;
      }
      else
      {
        v64 = 0;
        sub_23BE2F780();
        sub_23BE5AD80();
        type metadata accessor for EditorialCollectionDetail();
        sub_23BDF23E4(&qword_256AC8140, (uint64_t (*)(uint64_t))type metadata accessor for EditorialCollectionDetail, (uint64_t)&protocol conformance descriptor for EditorialCollectionDetail);
        v39 = (uint64_t)v47;
        v40 = v50;
        sub_23BE5ADE0();
        (*(void (**)(char *, uint64_t))(v49 + 8))(v27, v40);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v28);
        v33 = (uint64_t)v61;
        swift_storeEnumTagMultiPayload();
        v35 = v39;
      }
      sub_23BDF2424(v35, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for BrowseContent);
LABEL_12:
      sub_23BDF2424((uint64_t)v24, v55, (uint64_t (*)(_QWORD))type metadata accessor for BrowseContent);
      return __swift_destroy_boxed_opaque_existential_1(v33);
    }
    v36 = sub_23BE5AD68();
    swift_allocError();
    v38 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v38 = v62;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v38, *MEMORY[0x24BEE26D0], v36);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v28);
  }
  v33 = (uint64_t)v61;
  return __swift_destroy_boxed_opaque_existential_1(v33);
}

uint64_t sub_23BE2FE04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseContent.init(from:)(a1, a2);
}

uint64_t sub_23BE2FE18(_QWORD *a1)
{
  return BrowseContent.encode(to:)(a1);
}

uint64_t BrowseContent.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t (*v13)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = type metadata accessor for BrowseGalleryDescriptor();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for EditorialCollectionDetail();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BrowseContent();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23BDF23A0(v2, (uint64_t)v12, v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23BDF2424((uint64_t)v12, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for BrowseGalleryDescriptor);
      sub_23BE5AEC4();
      BrowseDisplayStyle.rawValue.getter(*v6);
      sub_23BE5AC9C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23BE5AC9C();
      swift_bridgeObjectRelease();
      v15 = *((_QWORD *)v6 + 3);
      swift_bridgeObjectRetain();
      sub_23BDF1AA4(a1, v15);
      swift_bridgeObjectRelease();
      sub_23BE5AEC4();
      sub_23BE5A678();
      sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
      sub_23BE5AC30();
      return sub_23BDF2468((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for BrowseGalleryDescriptor);
    }
    else
    {
      v18 = *v12;
      sub_23BE5AEC4();
      sub_23BDF04FC(a1, v18);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_23BDF2424((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollectionDetail);
    sub_23BE5AEC4();
    sub_23BE17808(a1);
    EditorialCollection.hash(into:)();
    v17 = *(_QWORD *)&v9[*(int *)(v7 + 24)];
    swift_bridgeObjectRetain();
    sub_23BDF04FC(a1, v17);
    swift_bridgeObjectRelease();
    return sub_23BDF2468((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollectionDetail);
  }
}

uint64_t BrowseContent.hashValue.getter()
{
  _BYTE v1[72];

  sub_23BE5AEB8();
  BrowseContent.hash(into:)((uint64_t)v1);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE30100()
{
  _BYTE v1[72];

  sub_23BE5AEB8();
  BrowseContent.hash(into:)((uint64_t)v1);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE30140()
{
  _BYTE v1[72];

  sub_23BE5AEB8();
  BrowseContent.hash(into:)((uint64_t)v1);
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing13BrowseContentO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  int EnumCaseMultiPayload;
  uint64_t (*v24)();
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v4 = type metadata accessor for BrowseGalleryDescriptor();
  MEMORY[0x24BDAC7A8](v4);
  v31 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for EditorialCollectionDetail();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BrowseContent();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v30 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v30 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8258);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (uint64_t *)&v21[*(int *)(v19 + 48)];
  sub_23BDF23A0(a1, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for BrowseContent);
  sub_23BDF23A0(a2, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for BrowseContent);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23BDF23A0((uint64_t)v21, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for BrowseContent);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v24 = type metadata accessor for BrowseGalleryDescriptor;
        v25 = v31;
        sub_23BDF2424((uint64_t)v22, v31, (uint64_t (*)(_QWORD))type metadata accessor for BrowseGalleryDescriptor);
        v26 = _s15FitnessBrowsing23BrowseGalleryDescriptorV2eeoiySbAC_ACtFZ_0((uint64_t)v15, v25);
        sub_23BDF2468(v25, (uint64_t (*)(_QWORD))type metadata accessor for BrowseGalleryDescriptor);
        v27 = (uint64_t)v15;
LABEL_13:
        sub_23BDF2468(v27, (uint64_t (*)(_QWORD))v24);
        goto LABEL_14;
      }
      sub_23BDF2468((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for BrowseGalleryDescriptor);
    }
    else
    {
      sub_23BDF23A0((uint64_t)v21, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for BrowseContent);
      v28 = *v12;
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v26 = sub_23BDF0180(v28, *v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_14:
        sub_23BDF2468((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for BrowseContent);
        return v26 & 1;
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_23BDF23A0((uint64_t)v21, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for BrowseContent);
    if (!swift_getEnumCaseMultiPayload())
    {
      v24 = type metadata accessor for EditorialCollectionDetail;
      sub_23BDF2424((uint64_t)v22, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollectionDetail);
      v26 = _s15FitnessBrowsing25EditorialCollectionDetailV2eeoiySbAC_ACtFZ_0((uint64_t)v17, (uint64_t)v8);
      sub_23BDF2468((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollectionDetail);
      v27 = (uint64_t)v17;
      goto LABEL_13;
    }
    sub_23BDF2468((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollectionDetail);
  }
  sub_23BE31C40((uint64_t)v21);
  v26 = 0;
  return v26 & 1;
}

uint64_t sub_23BE30484()
{
  return sub_23BDF23E4(&qword_256AC8148, (uint64_t (*)(uint64_t))type metadata accessor for BrowseContent, (uint64_t)&protocol conformance descriptor for BrowseContent);
}

_QWORD *initializeBufferWithCopyOfBuffer for BrowseContent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v7 = a2[2];
      a1[1] = a2[1];
      a1[2] = v7;
      a1[3] = a2[3];
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      v8 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = sub_23BE5A678();
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v9, v10, v11);
    }
    else
    {
      v14 = type metadata accessor for BrowseArtwork();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(a2, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        v17 = sub_23BE5A720();
        v18 = *(_QWORD *)(v17 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(a2, 1, v17))
        {
          v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v18 + 16))(a1, a2, v17);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(a1, 0, 1, v17);
        }
        v20 = *(int *)(v14 + 20);
        v21 = (char *)a1 + v20;
        v22 = (char *)a2 + v20;
        v23 = sub_23BE5A690();
        v24 = *(_QWORD *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
      }
      v39 = type metadata accessor for EditorialCollectionDetail();
      v26 = *(int *)(v39 + 20);
      v27 = (_QWORD *)((char *)a1 + v26);
      v28 = (char *)a2 + v26;
      v29 = *(_QWORD *)((char *)a2 + v26 + 8);
      *v27 = *(_QWORD *)((char *)a2 + v26);
      v27[1] = v29;
      v30 = *(_QWORD *)((char *)a2 + v26 + 24);
      v27[2] = *(_QWORD *)((char *)a2 + v26 + 16);
      v27[3] = v30;
      v31 = *(_QWORD *)((char *)a2 + v26 + 40);
      v27[4] = *(_QWORD *)((char *)a2 + v26 + 32);
      v27[5] = v31;
      v32 = *(_QWORD *)((char *)a2 + v26 + 56);
      v27[6] = *(_QWORD *)((char *)a2 + v26 + 48);
      v27[7] = v32;
      v33 = *(int *)(type metadata accessor for EditorialCollection() + 32);
      v38 = (char *)v27 + v33;
      v34 = &v28[v33];
      v35 = sub_23BE5A690();
      v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v38, v34, v35);
      *(_QWORD *)((char *)a1 + *(int *)(v39 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v39 + 24));
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for BrowseContent(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
    return swift_bridgeObjectRelease();
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    v3 = type metadata accessor for BrowseArtwork();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(a1, 1, v3))
    {
      v4 = sub_23BE5A720();
      v5 = *(_QWORD *)(v4 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
      v6 = a1 + *(int *)(v3 + 20);
      v7 = sub_23BE5A690();
      v8 = *(_QWORD *)(v7 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
    v9 = a1 + *(int *)(type metadata accessor for EditorialCollectionDetail() + 20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = v9 + *(int *)(type metadata accessor for EditorialCollection() + 32);
    v11 = sub_23BE5A690();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = a1 + *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
  v13 = sub_23BE5A678();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
}

_QWORD *initializeWithCopy for BrowseContent(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v36;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a2[2];
    a1[1] = a2[1];
    a1[2] = v5;
    a1[3] = a2[3];
    *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    v6 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_23BE5A678();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  else
  {
    v11 = type metadata accessor for BrowseArtwork();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v14 = sub_23BE5A720();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(a2, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v15 + 16))(a1, a2, v14);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
      }
      v17 = *(int *)(v11 + 20);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = sub_23BE5A690();
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
    }
    v36 = type metadata accessor for EditorialCollectionDetail();
    v23 = *(int *)(v36 + 20);
    v24 = (_QWORD *)((char *)a1 + v23);
    v25 = (char *)a2 + v23;
    v26 = *(_QWORD *)((char *)a2 + v23 + 8);
    *v24 = *(_QWORD *)((char *)a2 + v23);
    v24[1] = v26;
    v27 = *(_QWORD *)((char *)a2 + v23 + 24);
    v24[2] = *(_QWORD *)((char *)a2 + v23 + 16);
    v24[3] = v27;
    v28 = *(_QWORD *)((char *)a2 + v23 + 40);
    v24[4] = *(_QWORD *)((char *)a2 + v23 + 32);
    v24[5] = v28;
    v29 = *(_QWORD *)((char *)a2 + v23 + 56);
    v24[6] = *(_QWORD *)((char *)a2 + v23 + 48);
    v24[7] = v29;
    v30 = *(int *)(type metadata accessor for EditorialCollection() + 32);
    v31 = (char *)v24 + v30;
    v32 = &v25[v30];
    v33 = sub_23BE5A690();
    v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v34(v31, v32, v33);
    *(_QWORD *)((char *)a1 + *(int *)(v36 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v36 + 24));
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for BrowseContent(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v31;

  if (a1 != a2)
  {
    sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseContent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      v5 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
      v6 = (char *)a1 + v5;
      v7 = (char *)a2 + v5;
      v8 = sub_23BE5A678();
      v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9(v6, v7, v8);
    }
    else
    {
      v10 = type metadata accessor for BrowseArtwork();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        v13 = sub_23BE5A720();
        v14 = *(_QWORD *)(v13 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48))(a2, 1, v13))
        {
          v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v14 + 16))(a1, a2, v13);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
        }
        v16 = *(int *)(v10 + 20);
        v17 = (char *)a1 + v16;
        v18 = (char *)a2 + v16;
        v19 = sub_23BE5A690();
        v20 = *(_QWORD *)(v19 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
      }
      v31 = type metadata accessor for EditorialCollectionDetail();
      v22 = *(int *)(v31 + 20);
      v23 = (_QWORD *)((char *)a1 + v22);
      v24 = (char *)a2 + v22;
      *v23 = *(_QWORD *)((char *)a2 + v22);
      v23[1] = *(_QWORD *)((char *)a2 + v22 + 8);
      v23[2] = *(_QWORD *)((char *)a2 + v22 + 16);
      v23[3] = *(_QWORD *)((char *)a2 + v22 + 24);
      v23[4] = *(_QWORD *)((char *)a2 + v22 + 32);
      v23[5] = *(_QWORD *)((char *)a2 + v22 + 40);
      v23[6] = *(_QWORD *)((char *)a2 + v22 + 48);
      v23[7] = *(_QWORD *)((char *)a2 + v22 + 56);
      v25 = *(int *)(type metadata accessor for EditorialCollection() + 32);
      v26 = (char *)v23 + v25;
      v27 = &v24[v25];
      v28 = sub_23BE5A690();
      v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29(v26, v27, v28);
      *(_QWORD *)((char *)a1 + *(int *)(v31 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v31 + 24));
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for BrowseContent(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
    a1[32] = a2[32];
    v10 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = sub_23BE5A678();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
LABEL_15:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for BrowseArtwork();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v14 = sub_23BE5A720();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(a2, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(a1, a2, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
      }
      v17 = *(int *)(v7 + 20);
      v18 = &a1[v17];
      v19 = &a2[v17];
      v20 = sub_23BE5A690();
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v23 = type metadata accessor for EditorialCollectionDetail();
    v24 = *(int *)(v23 + 20);
    v25 = &a1[v24];
    v26 = &a2[v24];
    v27 = *(_OWORD *)&a2[v24 + 16];
    *(_OWORD *)v25 = *(_OWORD *)&a2[v24];
    *((_OWORD *)v25 + 1) = v27;
    v28 = *(_OWORD *)&a2[v24 + 48];
    *((_OWORD *)v25 + 2) = *(_OWORD *)&a2[v24 + 32];
    *((_OWORD *)v25 + 3) = v28;
    v29 = *(int *)(type metadata accessor for EditorialCollection() + 32);
    v30 = &v25[v29];
    v31 = &v26[v29];
    v32 = sub_23BE5A690();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
    *(_QWORD *)&a1[*(int *)(v23 + 24)] = *(_QWORD *)&a2[*(int *)(v23 + 24)];
    goto LABEL_15;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for BrowseContent(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  if (a1 != a2)
  {
    sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseContent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      a1[32] = a2[32];
      v10 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
      v11 = &a1[v10];
      v12 = &a2[v10];
      v13 = sub_23BE5A678();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
LABEL_16:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for BrowseArtwork();
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        v14 = sub_23BE5A720();
        v15 = *(_QWORD *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(a2, 1, v14))
        {
          v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(a1, a2, v14);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
        }
        v17 = *(int *)(v7 + 20);
        v18 = &a1[v17];
        v19 = &a2[v17];
        v20 = sub_23BE5A690();
        v21 = *(_QWORD *)(v20 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
          memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v23 = type metadata accessor for EditorialCollectionDetail();
      v24 = *(int *)(v23 + 20);
      v25 = &a1[v24];
      v26 = &a2[v24];
      v27 = *(_OWORD *)&a2[v24 + 16];
      *(_OWORD *)v25 = *(_OWORD *)&a2[v24];
      *((_OWORD *)v25 + 1) = v27;
      v28 = *(_OWORD *)&a2[v24 + 48];
      *((_OWORD *)v25 + 2) = *(_OWORD *)&a2[v24 + 32];
      *((_OWORD *)v25 + 3) = v28;
      v29 = *(int *)(type metadata accessor for EditorialCollection() + 32);
      v30 = &v25[v29];
      v31 = &v26[v29];
      v32 = sub_23BE5A690();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
      *(_QWORD *)&a1[*(int *)(v23 + 24)] = *(_QWORD *)&a2[*(int *)(v23 + 24)];
      goto LABEL_16;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_23BE31588()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for EditorialCollectionDetail();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for BrowseGalleryDescriptor();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrowseContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE31660 + 4 * byte_23BE61475[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE31694 + 4 * byte_23BE61470[v4]))();
}

uint64_t sub_23BE31694(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE3169C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE316A4);
  return result;
}

uint64_t sub_23BE316B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE316B8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE316BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE316C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseContent.CodingKeys()
{
  return &type metadata for BrowseContent.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowseContent.EditorialCollectionDetailCodingKeys()
{
  return &type metadata for BrowseContent.EditorialCollectionDetailCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseContent.EditorialGalleryCodingKeys()
{
  return &type metadata for BrowseContent.EditorialGalleryCodingKeys;
}

uint64_t _s15FitnessBrowsing13BrowseContentO35EditorialCollectionDetailCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BE31744 + 4 * byte_23BE6147A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BE31764 + 4 * byte_23BE6147F[v4]))();
}

_BYTE *sub_23BE31744(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BE31764(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE3176C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE31774(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE3177C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE31784(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BrowseContent.SectionDescriptorsCodingKeys()
{
  return &type metadata for BrowseContent.SectionDescriptorsCodingKeys;
}

unint64_t sub_23BE317A4()
{
  unint64_t result;

  result = qword_256AC81F8;
  if (!qword_256AC81F8)
  {
    result = MEMORY[0x242612B20](&unk_23BE61660, &type metadata for BrowseContent.SectionDescriptorsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC81F8);
  }
  return result;
}

unint64_t sub_23BE317EC()
{
  unint64_t result;

  result = qword_256AC8200;
  if (!qword_256AC8200)
  {
    result = MEMORY[0x242612B20](&unk_23BE61718, &type metadata for BrowseContent.EditorialGalleryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8200);
  }
  return result;
}

unint64_t sub_23BE31834()
{
  unint64_t result;

  result = qword_256AC8208;
  if (!qword_256AC8208)
  {
    result = MEMORY[0x242612B20](&unk_23BE617D0, &type metadata for BrowseContent.EditorialCollectionDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8208);
  }
  return result;
}

unint64_t sub_23BE3187C()
{
  unint64_t result;

  result = qword_256AC8210;
  if (!qword_256AC8210)
  {
    result = MEMORY[0x242612B20](&unk_23BE61888, &type metadata for BrowseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8210);
  }
  return result;
}

unint64_t sub_23BE318C4()
{
  unint64_t result;

  result = qword_256AC8218;
  if (!qword_256AC8218)
  {
    result = MEMORY[0x242612B20](&unk_23BE61740, &type metadata for BrowseContent.EditorialCollectionDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8218);
  }
  return result;
}

unint64_t sub_23BE3190C()
{
  unint64_t result;

  result = qword_256AC8220;
  if (!qword_256AC8220)
  {
    result = MEMORY[0x242612B20](&unk_23BE61768, &type metadata for BrowseContent.EditorialCollectionDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8220);
  }
  return result;
}

unint64_t sub_23BE31954()
{
  unint64_t result;

  result = qword_256AC8228;
  if (!qword_256AC8228)
  {
    result = MEMORY[0x242612B20](&unk_23BE61688, &type metadata for BrowseContent.EditorialGalleryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8228);
  }
  return result;
}

unint64_t sub_23BE3199C()
{
  unint64_t result;

  result = qword_256AC8230;
  if (!qword_256AC8230)
  {
    result = MEMORY[0x242612B20](&unk_23BE616B0, &type metadata for BrowseContent.EditorialGalleryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8230);
  }
  return result;
}

unint64_t sub_23BE319E4()
{
  unint64_t result;

  result = qword_256AC8238;
  if (!qword_256AC8238)
  {
    result = MEMORY[0x242612B20](&unk_23BE615D0, &type metadata for BrowseContent.SectionDescriptorsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8238);
  }
  return result;
}

unint64_t sub_23BE31A2C()
{
  unint64_t result;

  result = qword_256AC8240;
  if (!qword_256AC8240)
  {
    result = MEMORY[0x242612B20](&unk_23BE615F8, &type metadata for BrowseContent.SectionDescriptorsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8240);
  }
  return result;
}

unint64_t sub_23BE31A74()
{
  unint64_t result;

  result = qword_256AC8248;
  if (!qword_256AC8248)
  {
    result = MEMORY[0x242612B20](&unk_23BE617F8, &type metadata for BrowseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8248);
  }
  return result;
}

unint64_t sub_23BE31ABC()
{
  unint64_t result;

  result = qword_256AC8250;
  if (!qword_256AC8250)
  {
    result = MEMORY[0x242612B20](&unk_23BE61820, &type metadata for BrowseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8250);
  }
  return result;
}

uint64_t sub_23BE31B00(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000019 && a2 == 0x800000023BE664C0 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023BE664E0 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023BE66300)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BE31C40(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8258);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BE31C84()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1954047348;
  if (*v0 != 1)
    v1 = 0x6E694C6F65646976;
  if (*v0)
    return v1;
  else
    return 0x7241726564616568;
}

uint64_t sub_23BE31CE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE34A40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE31D0C()
{
  sub_23BE33418();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE31D34()
{
  sub_23BE33418();
  return sub_23BE5AF18();
}

uint64_t sub_23BE31D5C()
{
  sub_23BE33528();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE31D84()
{
  sub_23BE33528();
  return sub_23BE5AF18();
}

uint64_t sub_23BE31DAC()
{
  sub_23BE334E4();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE31DD4()
{
  sub_23BE334E4();
  return sub_23BE5AF18();
}

uint64_t sub_23BE31DFC()
{
  sub_23BE334A0();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE31E24()
{
  sub_23BE334A0();
  return sub_23BE5AF18();
}

uint64_t BrowseDetailContent.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int EnumCaseMultiPayload;
  uint64_t (*v21)();
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8260);
  v40 = *(_QWORD *)(v2 - 8);
  v41 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v39 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for BrowseDetailVideoLinkItem();
  MEMORY[0x24BDAC7A8](v37);
  v38 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8268);
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v34 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for BrowseDetailTextItem();
  MEMORY[0x24BDAC7A8](v32);
  v33 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8270);
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BrowseDetailArtworkItem();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BrowseDetailContent();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8278);
  v43 = *(_QWORD *)(v17 - 8);
  v44 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE33418();
  sub_23BE5AF00();
  sub_23BE3345C(v42, (uint64_t)v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v21 = type metadata accessor for BrowseDetailTextItem;
      v22 = v33;
      sub_23BDF2424((uint64_t)v16, v33, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailTextItem);
      v46 = 1;
      sub_23BE334E4();
      v23 = v34;
      v24 = v44;
      sub_23BE5ADF8();
      sub_23BDF23E4(&qword_256AC82A0, (uint64_t (*)(uint64_t))type metadata accessor for BrowseDetailTextItem, (uint64_t)&protocol conformance descriptor for BrowseDetailTextItem);
      v25 = v36;
      sub_23BE5AE4C();
      v26 = v35;
    }
    else
    {
      v21 = type metadata accessor for BrowseDetailVideoLinkItem;
      v22 = v38;
      sub_23BDF2424((uint64_t)v16, v38, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailVideoLinkItem);
      v47 = 2;
      sub_23BE334A0();
      v23 = v39;
      v24 = v44;
      sub_23BE5ADF8();
      sub_23BDF23E4(&qword_256AC8290, (uint64_t (*)(uint64_t))type metadata accessor for BrowseDetailVideoLinkItem, (uint64_t)&protocol conformance descriptor for BrowseDetailVideoLinkItem);
      v25 = v41;
      sub_23BE5AE4C();
      v26 = v40;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    v28 = v22;
  }
  else
  {
    v21 = type metadata accessor for BrowseDetailArtworkItem;
    sub_23BDF2424((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailArtworkItem);
    v45 = 0;
    sub_23BE33528();
    v24 = v44;
    sub_23BE5ADF8();
    sub_23BDF23E4(&qword_256AC82B0, (uint64_t (*)(uint64_t))type metadata accessor for BrowseDetailArtworkItem, (uint64_t)&protocol conformance descriptor for BrowseDetailArtworkItem);
    v27 = v31;
    sub_23BE5AE4C();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v27);
    v28 = (uint64_t)v13;
  }
  sub_23BDF2468(v28, (uint64_t (*)(_QWORD))v21);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v19, v24);
}

uint64_t BrowseDetailContent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;

  v54 = a2;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC82B8);
  v53 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v55 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC82C0);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v59 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC82C8);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v57 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC82D0);
  v56 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BrowseDetailContent();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v43 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v43 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v43 - v20;
  v22 = a1[3];
  v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  sub_23BE33418();
  v60 = v9;
  v23 = v62;
  sub_23BE5AEF4();
  if (v23)
    goto LABEL_9;
  v44 = v16;
  v45 = v19;
  v46 = v13;
  v47 = v21;
  v24 = v57;
  v25 = v58;
  v27 = v59;
  v26 = v60;
  v62 = v10;
  v28 = sub_23BE5ADEC();
  if (*(_QWORD *)(v28 + 16) != 1)
  {
    v29 = v25;
    v30 = sub_23BE5AD68();
    swift_allocError();
    v32 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v32 = v62;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, *MEMORY[0x24BEE26D0], v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v29);
LABEL_9:
    v37 = (uint64_t)v61;
    return __swift_destroy_boxed_opaque_existential_1(v37);
  }
  if (*(_BYTE *)(v28 + 32))
  {
    if (*(_BYTE *)(v28 + 32) == 1)
    {
      v64 = 1;
      sub_23BE334E4();
      sub_23BE5AD80();
      type metadata accessor for BrowseDetailTextItem();
      sub_23BDF23E4(&qword_256AC82E0, (uint64_t (*)(uint64_t))type metadata accessor for BrowseDetailTextItem, (uint64_t)&protocol conformance descriptor for BrowseDetailTextItem);
      v35 = (uint64_t)v44;
      v36 = v52;
      sub_23BE5ADE0();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v27, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v25);
      v37 = (uint64_t)v61;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v65 = 2;
      sub_23BE334A0();
      v33 = v55;
      sub_23BE5AD80();
      type metadata accessor for BrowseDetailVideoLinkItem();
      sub_23BDF23E4(&qword_256AC82D8, (uint64_t (*)(uint64_t))type metadata accessor for BrowseDetailVideoLinkItem, (uint64_t)&protocol conformance descriptor for BrowseDetailVideoLinkItem);
      v39 = (uint64_t)v46;
      v40 = v50;
      sub_23BE5ADE0();
      v41 = v56;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v26, v25);
      swift_storeEnumTagMultiPayload();
      v35 = v39;
      v37 = (uint64_t)v61;
    }
  }
  else
  {
    v63 = 0;
    sub_23BE33528();
    sub_23BE5AD80();
    type metadata accessor for BrowseDetailArtworkItem();
    sub_23BDF23E4(&qword_256AC82E8, (uint64_t (*)(uint64_t))type metadata accessor for BrowseDetailArtworkItem, (uint64_t)&protocol conformance descriptor for BrowseDetailArtworkItem);
    v35 = (uint64_t)v45;
    v38 = v49;
    sub_23BE5ADE0();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v24, v38);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v25);
    v37 = (uint64_t)v61;
    swift_storeEnumTagMultiPayload();
  }
  v42 = (uint64_t)v47;
  sub_23BDF2424(v35, (uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
  sub_23BDF2424(v42, v54, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
  return __swift_destroy_boxed_opaque_existential_1(v37);
}

uint64_t sub_23BE32954@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseDetailContent.init(from:)(a1, a2);
}

uint64_t sub_23BE32968(_QWORD *a1)
{
  return BrowseDetailContent.encode(to:)(a1);
}

uint64_t BrowseDetailContent.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t (*v24)();
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v1 = type metadata accessor for BrowseDetailVideoLinkItem();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23BE5A678();
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v33 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v31 = (uint64_t)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v30 - v9;
  v32 = type metadata accessor for BrowseDetailTextItem();
  MEMORY[0x24BDAC7A8](v32);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BrowseDetailArtworkItem();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for BrowseDetailContent();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE3345C(v0, (uint64_t)v18);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23BDF2424((uint64_t)v18, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailTextItem);
      sub_23BE5AEC4();
      sub_23BDF2358((uint64_t)v12, (uint64_t)v10);
      v21 = v34;
      v20 = v35;
      v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
      if (v22(v10, 1, v35) == 1)
      {
        sub_23BE5AED0();
      }
      else
      {
        v26 = v33;
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v33, v10, v20);
        sub_23BE5AED0();
        sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
        sub_23BE5AC30();
        (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v20);
      }
      v27 = v31;
      sub_23BDF2358((uint64_t)&v12[*(int *)(v32 + 20)], v31);
      if (v22((char *)v27, 1, v20) == 1)
      {
        sub_23BE5AED0();
      }
      else
      {
        v28 = v33;
        (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v33, v27, v20);
        sub_23BE5AED0();
        sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
        sub_23BE5AC30();
        (*(void (**)(char *, uint64_t))(v21 + 8))(v28, v20);
      }
      sub_23BE5AC9C();
      v24 = type metadata accessor for BrowseDetailTextItem;
      v23 = (uint64_t)v12;
    }
    else
    {
      sub_23BDF2424((uint64_t)v18, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailVideoLinkItem);
      sub_23BE5AEC4();
      sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
      sub_23BE5AC30();
      sub_23BE5AC9C();
      v25 = &v3[*(int *)(v1 + 24)];
      sub_23BE5AC9C();
      if (*((_QWORD *)v25 + 3))
      {
        sub_23BE5AED0();
        swift_bridgeObjectRetain();
        sub_23BE5AC9C();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23BE5AED0();
      }
      type metadata accessor for VideoAsset();
      sub_23BE5A690();
      sub_23BDF23E4(&qword_256AC6488, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
      sub_23BE5AC30();
      v24 = type metadata accessor for BrowseDetailVideoLinkItem;
      v23 = (uint64_t)v3;
    }
  }
  else
  {
    sub_23BDF2424((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailArtworkItem);
    sub_23BE5AEC4();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
    sub_23BE5A738();
    sub_23BE5AC9C();
    v23 = (uint64_t)v15;
    v24 = type metadata accessor for BrowseDetailArtworkItem;
  }
  return sub_23BDF2468(v23, (uint64_t (*)(_QWORD))v24);
}

uint64_t BrowseDetailContent.hashValue.getter()
{
  sub_23BE5AEB8();
  BrowseDetailContent.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE32E90()
{
  sub_23BE5AEB8();
  BrowseDetailContent.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE32ED0()
{
  sub_23BE5AEB8();
  BrowseDetailContent.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing19BrowseDetailContentO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  char v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  BOOL v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t (*v43)();
  uint64_t v44;
  uint64_t (*v45)();
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = a2;
  v50 = type metadata accessor for BrowseDetailVideoLinkItem();
  MEMORY[0x24BDAC7A8](v50);
  v51 = (uint64_t)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for BrowseDetailTextItem();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BrowseDetailArtworkItem();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BrowseDetailContent();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v49 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v49 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8400);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (uint64_t)&v22[*(int *)(v20 + 48)];
  sub_23BE3345C(a1, (uint64_t)v22);
  sub_23BE3345C(v52, v23);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_23BE3345C((uint64_t)v22, (uint64_t)v18);
    if (swift_getEnumCaseMultiPayload())
    {
      v26 = type metadata accessor for BrowseDetailArtworkItem;
      v27 = (uint64_t)v18;
LABEL_25:
      sub_23BDF2468(v27, (uint64_t (*)(_QWORD))v26);
      sub_23BE34BB4((uint64_t)v22);
LABEL_38:
      v25 = 0;
      return v25 & 1;
    }
    sub_23BDF2424(v23, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailArtworkItem);
    type metadata accessor for BrowseArtwork();
    sub_23BDF23E4(&qword_256AC6C78, (uint64_t (*)(uint64_t))type metadata accessor for BrowseArtwork, (uint64_t)&protocol conformance descriptor for BrowseArtwork);
    if ((sub_23BE5A72C() & 1) == 0
      || ((v39 = *(int *)(v7 + 20),
           v40 = *(_QWORD *)&v18[v39],
           v41 = *(_QWORD *)&v18[v39 + 8],
           v42 = &v9[v39],
           v40 != *(_QWORD *)v42)
       || v41 != *((_QWORD *)v42 + 1))
      && (sub_23BE5AE58() & 1) == 0)
    {
      v45 = type metadata accessor for BrowseDetailArtworkItem;
      sub_23BDF2468((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailArtworkItem);
      v46 = (uint64_t)v18;
LABEL_37:
      sub_23BDF2468(v46, (uint64_t (*)(_QWORD))v45);
      sub_23BDF2468((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
      goto LABEL_38;
    }
    v43 = type metadata accessor for BrowseDetailArtworkItem;
    sub_23BDF2468((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailArtworkItem);
    v44 = (uint64_t)v18;
LABEL_31:
    sub_23BDF2468(v44, (uint64_t (*)(_QWORD))v43);
    sub_23BDF2468((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
    v25 = 1;
    return v25 & 1;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_23BE3345C((uint64_t)v22, (uint64_t)v13);
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      v26 = type metadata accessor for BrowseDetailVideoLinkItem;
      v27 = (uint64_t)v13;
      goto LABEL_25;
    }
    v28 = v51;
    sub_23BDF2424(v23, v51, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailVideoLinkItem);
    if ((sub_23BE5A66C() & 1) == 0)
      goto LABEL_36;
    v29 = *(int *)(v50 + 20);
    v30 = *(_QWORD *)&v13[v29];
    v31 = *(_QWORD *)&v13[v29 + 8];
    v32 = (_QWORD *)(v28 + v29);
    v33 = v30 == *v32 && v31 == v32[1];
    if (!v33 && (sub_23BE5AE58() & 1) == 0)
      goto LABEL_36;
    v34 = *(int *)(v50 + 24);
    v35 = &v13[v34];
    v36 = v28 + v34;
    if ((*(_QWORD *)&v13[v34] != *(_QWORD *)(v28 + v34) || *(_QWORD *)&v13[v34 + 8] != *(_QWORD *)(v28 + v34 + 8))
      && (sub_23BE5AE58() & 1) == 0)
    {
      goto LABEL_36;
    }
    v37 = *((_QWORD *)v35 + 3);
    v38 = *(_QWORD *)(v36 + 24);
    if (v37)
    {
      if (!v38 || (*((_QWORD *)v35 + 2) != *(_QWORD *)(v36 + 16) || v37 != v38) && (sub_23BE5AE58() & 1) == 0)
        goto LABEL_36;
    }
    else if (v38)
    {
      goto LABEL_36;
    }
    v47 = type metadata accessor for VideoAsset();
    if ((MEMORY[0x242612094](&v35[*(int *)(v47 + 24)], v36 + *(int *)(v47 + 24)) & 1) != 0)
    {
      v43 = type metadata accessor for BrowseDetailVideoLinkItem;
      sub_23BDF2468(v28, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailVideoLinkItem);
      v44 = (uint64_t)v13;
      goto LABEL_31;
    }
LABEL_36:
    v45 = type metadata accessor for BrowseDetailVideoLinkItem;
    sub_23BDF2468(v28, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailVideoLinkItem);
    v46 = (uint64_t)v13;
    goto LABEL_37;
  }
  sub_23BE3345C((uint64_t)v22, (uint64_t)v16);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v26 = type metadata accessor for BrowseDetailTextItem;
    v27 = (uint64_t)v16;
    goto LABEL_25;
  }
  sub_23BDF2424(v23, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailTextItem);
  v25 = _s15FitnessBrowsing20BrowseDetailTextItemV2eeoiySbAC_ACtFZ_0((uint64_t)v16, (uint64_t)v6);
  sub_23BDF2468((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailTextItem);
  sub_23BDF2468((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailTextItem);
  sub_23BDF2468((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
  return v25 & 1;
}

uint64_t type metadata accessor for BrowseDetailContent()
{
  uint64_t result;

  result = qword_256AC8368;
  if (!qword_256AC8368)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BE33418()
{
  unint64_t result;

  result = qword_256AC8280;
  if (!qword_256AC8280)
  {
    result = MEMORY[0x242612B20](&unk_23BE61EF4, &type metadata for BrowseDetailContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8280);
  }
  return result;
}

uint64_t sub_23BE3345C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseDetailContent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BE334A0()
{
  unint64_t result;

  result = qword_256AC8288;
  if (!qword_256AC8288)
  {
    result = MEMORY[0x242612B20](&unk_23BE61EA4, &type metadata for BrowseDetailContent.VideoLinkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8288);
  }
  return result;
}

unint64_t sub_23BE334E4()
{
  unint64_t result;

  result = qword_256AC8298;
  if (!qword_256AC8298)
  {
    result = MEMORY[0x242612B20](&unk_23BE61E54, &type metadata for BrowseDetailContent.TextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8298);
  }
  return result;
}

unint64_t sub_23BE33528()
{
  unint64_t result;

  result = qword_256AC82A8;
  if (!qword_256AC82A8)
  {
    result = MEMORY[0x242612B20](&unk_23BE61E04, &type metadata for BrowseDetailContent.HeaderArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC82A8);
  }
  return result;
}

uint64_t sub_23BE3356C()
{
  return sub_23BDF23E4(&qword_256AC82F0, (uint64_t (*)(uint64_t))type metadata accessor for BrowseDetailContent, (uint64_t)&protocol conformance descriptor for BrowseDetailContent);
}

uint64_t *initializeBufferWithCopyOfBuffer for BrowseDetailContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v12 = sub_23BE5A678();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = type metadata accessor for BrowseDetailVideoLinkItem();
      v14 = *(int *)(v13 + 20);
      v15 = (uint64_t *)((char *)a1 + v14);
      v16 = (uint64_t *)((char *)a2 + v14);
      v17 = v16[1];
      *v15 = *v16;
      v15[1] = v17;
      v18 = *(int *)(v13 + 24);
      v19 = (uint64_t *)((char *)a1 + v18);
      v20 = (uint64_t *)((char *)a2 + v18);
      v21 = *(uint64_t *)((char *)a2 + v18);
      v22 = v20[1];
      *v19 = v21;
      v19[1] = v22;
      v23 = v20[3];
      v19[2] = v20[2];
      v19[3] = v23;
      v24 = *(int *)(type metadata accessor for VideoAsset() + 24);
      v25 = (char *)v19 + v24;
      v26 = (char *)v20 + v24;
      v27 = sub_23BE5A690();
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28(v25, v26, v27);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = sub_23BE5A678();
      v8 = *(_QWORD *)(v7 - 8);
      v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
      if (v9(a2, 1, v7))
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v35 = type metadata accessor for BrowseDetailTextItem();
      v36 = *(int *)(v35 + 20);
      v37 = (char *)a1 + v36;
      v38 = (char *)a2 + v36;
      if (v9((uint64_t *)((char *)a2 + v36), 1, v7))
      {
        v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v37, v38, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v37, 0, 1, v7);
      }
      v40 = *(int *)(v35 + 24);
      v41 = (uint64_t *)((char *)a1 + v40);
      v42 = (uint64_t *)((char *)a2 + v40);
      v43 = v42[1];
      *v41 = *v42;
      v41[1] = v43;
      swift_bridgeObjectRetain();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
      if (swift_getEnumCaseMultiPayload() == 1)
        v29 = (uint64_t *)&unk_256AC6BF8;
      else
        v29 = (uint64_t *)&unk_256AC6BF0;
      v30 = __swift_instantiateConcreteTypeFromMangledName(v29);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(a1, a2, v30);
      swift_storeEnumTagMultiPayload();
      v31 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
      v32 = (uint64_t *)((char *)a1 + v31);
      v33 = (uint64_t *)((char *)a2 + v31);
      v34 = v33[1];
      *v32 = *v33;
      v32[1] = v34;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for BrowseDetailContent(uint64_t a1)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    v5 = sub_23BE5A678();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
    v6 = type metadata accessor for BrowseDetailVideoLinkItem();
    swift_bridgeObjectRelease();
    v7 = a1 + *(int *)(v6 + 24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = v7 + *(int *)(type metadata accessor for VideoAsset() + 24);
    v9 = sub_23BE5A690();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    if ((_DWORD)result == 1)
    {
      v10 = sub_23BE5A678();
      v11 = *(_QWORD *)(v10 - 8);
      v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      if (!v12(a1, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
      v13 = a1 + *(int *)(type metadata accessor for BrowseDetailTextItem() + 20);
      if (!v12(v13, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
    }
    else
    {
      if ((_DWORD)result)
        return result;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
      if (swift_getEnumCaseMultiPayload() == 1)
        v3 = (uint64_t *)&unk_256AC6BF8;
      else
        v3 = (uint64_t *)&unk_256AC6BF0;
      v4 = __swift_instantiateConcreteTypeFromMangledName(v3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for BrowseDetailArtworkItem();
    }
    return swift_bridgeObjectRelease();
  }
}

char *initializeWithCopy for BrowseDetailContent(char *a1, char *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v9 = sub_23BE5A678();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    v10 = type metadata accessor for BrowseDetailVideoLinkItem();
    v11 = *(int *)(v10 + 20);
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = *((_QWORD *)v13 + 1);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *((_QWORD *)v12 + 1) = v14;
    v15 = *(int *)(v10 + 24);
    v16 = &a1[v15];
    v17 = &a2[v15];
    v18 = *(_QWORD *)&a2[v15];
    v19 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = v18;
    *((_QWORD *)v16 + 1) = v19;
    v20 = *((_QWORD *)v17 + 3);
    *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
    *((_QWORD *)v16 + 3) = v20;
    v21 = *(int *)(type metadata accessor for VideoAsset() + 24);
    v22 = &v16[v21];
    v23 = &v17[v21];
    v24 = sub_23BE5A690();
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25(v22, v23, v24);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v5 = sub_23BE5A678();
      v6 = *(_QWORD *)(v5 - 8);
      v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
      if (v7(a2, 1, v5))
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      v29 = type metadata accessor for BrowseDetailTextItem();
      v30 = *(int *)(v29 + 20);
      v31 = &a1[v30];
      v32 = &a2[v30];
      if (v7(&a2[v30], 1, v5))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v31, v32, v5);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v31, 0, 1, v5);
      }
      v28 = *(int *)(v29 + 24);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
      if (swift_getEnumCaseMultiPayload() == 1)
        v26 = (uint64_t *)&unk_256AC6BF8;
      else
        v26 = (uint64_t *)&unk_256AC6BF0;
      v27 = __swift_instantiateConcreteTypeFromMangledName(v26);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(a1, a2, v27);
      swift_storeEnumTagMultiPayload();
      v28 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
    }
    v34 = &a1[v28];
    v35 = &a2[v28];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithCopy for BrowseDetailContent(char *a1, char *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;

  if (a1 != a2)
  {
    sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = sub_23BE5A678();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = type metadata accessor for BrowseDetailVideoLinkItem();
      v11 = *(int *)(v10 + 20);
      v12 = &a1[v11];
      v13 = &a2[v11];
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
      v14 = *(int *)(v10 + 24);
      v15 = &a1[v14];
      v16 = &a2[v14];
      *(_QWORD *)v15 = *(_QWORD *)&a2[v14];
      *((_QWORD *)v15 + 1) = *(_QWORD *)&a2[v14 + 8];
      *((_QWORD *)v15 + 2) = *(_QWORD *)&a2[v14 + 16];
      *((_QWORD *)v15 + 3) = *(_QWORD *)&a2[v14 + 24];
      v17 = *(int *)(type metadata accessor for VideoAsset() + 24);
      v18 = &v15[v17];
      v19 = &v16[v17];
      v20 = sub_23BE5A690();
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21(v18, v19, v20);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v5 = sub_23BE5A678();
        v6 = *(_QWORD *)(v5 - 8);
        v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
        if (v7(a2, 1, v5))
        {
          v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        }
        v25 = type metadata accessor for BrowseDetailTextItem();
        v26 = *(int *)(v25 + 20);
        v27 = &a1[v26];
        v28 = &a2[v26];
        if (v7(&a2[v26], 1, v5))
        {
          v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v27, v28, v5);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v27, 0, 1, v5);
        }
        v24 = *(int *)(v25 + 24);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
        if (swift_getEnumCaseMultiPayload() == 1)
          v22 = (uint64_t *)&unk_256AC6BF8;
        else
          v22 = (uint64_t *)&unk_256AC6BF0;
        v23 = __swift_instantiateConcreteTypeFromMangledName(v22);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a1, a2, v23);
        swift_storeEnumTagMultiPayload();
        v24 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
      }
      v30 = &a1[v24];
      v31 = &a2[v24];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for BrowseDetailContent(char *a1, char *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v9 = sub_23BE5A678();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = type metadata accessor for BrowseDetailVideoLinkItem();
    *(_OWORD *)&a1[*(int *)(v10 + 20)] = *(_OWORD *)&a2[*(int *)(v10 + 20)];
    v11 = *(int *)(v10 + 24);
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = *(_OWORD *)&a2[v11 + 16];
    *(_OWORD *)v12 = *(_OWORD *)&a2[v11];
    *((_OWORD *)v12 + 1) = v14;
    v15 = *(int *)(type metadata accessor for VideoAsset() + 24);
    v16 = &v12[v15];
    v17 = &v13[v15];
    v18 = sub_23BE5A690();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v5 = sub_23BE5A678();
      v6 = *(_QWORD *)(v5 - 8);
      v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
      if (v7(a2, 1, v5))
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      v22 = type metadata accessor for BrowseDetailTextItem();
      v23 = *(int *)(v22 + 20);
      v24 = &a1[v23];
      v25 = &a2[v23];
      if (v7(&a2[v23], 1, v5))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v24, v25, v5);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v5);
      }
      v21 = *(int *)(v22 + 24);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
      if (swift_getEnumCaseMultiPayload() == 1)
        v19 = (uint64_t *)&unk_256AC6BF8;
      else
        v19 = (uint64_t *)&unk_256AC6BF0;
      v20 = __swift_instantiateConcreteTypeFromMangledName(v19);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(a1, a2, v20);
      swift_storeEnumTagMultiPayload();
      v21 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
    }
    *(_OWORD *)&a1[v21] = *(_OWORD *)&a2[v21];
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for BrowseDetailContent(char *a1, char *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  if (a1 != a2)
  {
    sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = sub_23BE5A678();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = type metadata accessor for BrowseDetailVideoLinkItem();
      *(_OWORD *)&a1[*(int *)(v10 + 20)] = *(_OWORD *)&a2[*(int *)(v10 + 20)];
      v11 = *(int *)(v10 + 24);
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = *(_OWORD *)&a2[v11 + 16];
      *(_OWORD *)v12 = *(_OWORD *)&a2[v11];
      *((_OWORD *)v12 + 1) = v14;
      v15 = *(int *)(type metadata accessor for VideoAsset() + 24);
      v16 = &v12[v15];
      v17 = &v13[v15];
      v18 = sub_23BE5A690();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v5 = sub_23BE5A678();
        v6 = *(_QWORD *)(v5 - 8);
        v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
        if (v7(a2, 1, v5))
        {
          v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        }
        v22 = type metadata accessor for BrowseDetailTextItem();
        v23 = *(int *)(v22 + 20);
        v24 = &a1[v23];
        v25 = &a2[v23];
        if (v7(&a2[v23], 1, v5))
        {
          v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v24, v25, v5);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v5);
        }
        v21 = *(int *)(v22 + 24);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
        if (swift_getEnumCaseMultiPayload() == 1)
          v19 = (uint64_t *)&unk_256AC6BF8;
        else
          v19 = (uint64_t *)&unk_256AC6BF0;
        v20 = __swift_instantiateConcreteTypeFromMangledName(v19);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(a1, a2, v20);
        swift_storeEnumTagMultiPayload();
        v21 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
      }
      *(_OWORD *)&a1[v21] = *(_OWORD *)&a2[v21];
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23BE344B8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for BrowseDetailArtworkItem();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for BrowseDetailTextItem();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for BrowseDetailVideoLinkItem();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrowseDetailContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE345A0 + 4 * byte_23BE619F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE345D4 + 4 * byte_23BE619F0[v4]))();
}

uint64_t sub_23BE345D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE345DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE345E4);
  return result;
}

uint64_t sub_23BE345F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE345F8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE345FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE34604(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseDetailContent.CodingKeys()
{
  return &type metadata for BrowseDetailContent.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowseDetailContent.HeaderArtworkCodingKeys()
{
  return &type metadata for BrowseDetailContent.HeaderArtworkCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseDetailContent.TextCodingKeys()
{
  return &type metadata for BrowseDetailContent.TextCodingKeys;
}

uint64_t _s15FitnessBrowsing19BrowseDetailContentO23HeaderArtworkCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BE34684 + 4 * byte_23BE619FA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BE346A4 + 4 * byte_23BE619FF[v4]))();
}

_BYTE *sub_23BE34684(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BE346A4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE346AC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE346B4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE346BC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE346C4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BrowseDetailContent.VideoLinkCodingKeys()
{
  return &type metadata for BrowseDetailContent.VideoLinkCodingKeys;
}

unint64_t sub_23BE346E4()
{
  unint64_t result;

  result = qword_256AC83A0;
  if (!qword_256AC83A0)
  {
    result = MEMORY[0x242612B20](&unk_23BE61BB4, &type metadata for BrowseDetailContent.VideoLinkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC83A0);
  }
  return result;
}

unint64_t sub_23BE3472C()
{
  unint64_t result;

  result = qword_256AC83A8;
  if (!qword_256AC83A8)
  {
    result = MEMORY[0x242612B20](&unk_23BE61C6C, &type metadata for BrowseDetailContent.TextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC83A8);
  }
  return result;
}

unint64_t sub_23BE34774()
{
  unint64_t result;

  result = qword_256AC83B0;
  if (!qword_256AC83B0)
  {
    result = MEMORY[0x242612B20](&unk_23BE61D24, &type metadata for BrowseDetailContent.HeaderArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC83B0);
  }
  return result;
}

unint64_t sub_23BE347BC()
{
  unint64_t result;

  result = qword_256AC83B8;
  if (!qword_256AC83B8)
  {
    result = MEMORY[0x242612B20](&unk_23BE61DDC, &type metadata for BrowseDetailContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC83B8);
  }
  return result;
}

unint64_t sub_23BE34804()
{
  unint64_t result;

  result = qword_256AC83C0;
  if (!qword_256AC83C0)
  {
    result = MEMORY[0x242612B20](&unk_23BE61C94, &type metadata for BrowseDetailContent.HeaderArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC83C0);
  }
  return result;
}

unint64_t sub_23BE3484C()
{
  unint64_t result;

  result = qword_256AC83C8;
  if (!qword_256AC83C8)
  {
    result = MEMORY[0x242612B20](&unk_23BE61CBC, &type metadata for BrowseDetailContent.HeaderArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC83C8);
  }
  return result;
}

unint64_t sub_23BE34894()
{
  unint64_t result;

  result = qword_256AC83D0;
  if (!qword_256AC83D0)
  {
    result = MEMORY[0x242612B20](&unk_23BE61BDC, &type metadata for BrowseDetailContent.TextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC83D0);
  }
  return result;
}

unint64_t sub_23BE348DC()
{
  unint64_t result;

  result = qword_256AC83D8;
  if (!qword_256AC83D8)
  {
    result = MEMORY[0x242612B20](&unk_23BE61C04, &type metadata for BrowseDetailContent.TextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC83D8);
  }
  return result;
}

unint64_t sub_23BE34924()
{
  unint64_t result;

  result = qword_256AC83E0;
  if (!qword_256AC83E0)
  {
    result = MEMORY[0x242612B20](&unk_23BE61B24, &type metadata for BrowseDetailContent.VideoLinkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC83E0);
  }
  return result;
}

unint64_t sub_23BE3496C()
{
  unint64_t result;

  result = qword_256AC83E8;
  if (!qword_256AC83E8)
  {
    result = MEMORY[0x242612B20](&unk_23BE61B4C, &type metadata for BrowseDetailContent.VideoLinkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC83E8);
  }
  return result;
}

unint64_t sub_23BE349B4()
{
  unint64_t result;

  result = qword_256AC83F0;
  if (!qword_256AC83F0)
  {
    result = MEMORY[0x242612B20](&unk_23BE61D4C, &type metadata for BrowseDetailContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC83F0);
  }
  return result;
}

unint64_t sub_23BE349FC()
{
  unint64_t result;

  result = qword_256AC83F8;
  if (!qword_256AC83F8)
  {
    result = MEMORY[0x242612B20](&unk_23BE61D74, &type metadata for BrowseDetailContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC83F8);
  }
  return result;
}

uint64_t sub_23BE34A40(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7241726564616568 && a2 == 0xED00006B726F7774;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1954047348 && a2 == 0xE400000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E694C6F65646976 && a2 == 0xE90000000000006BLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BE34BB4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8400);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t BrowseLazyItem.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for BrowseItem();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BrowseLazyItem();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE34D0C(v1, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = *((_QWORD *)v7 + 7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BE34D50((uint64_t)v7, (uint64_t)v4);
    v8 = *(_QWORD *)&v4[*(int *)(v2 + 64)];
    swift_bridgeObjectRetain();
    sub_23BE34D94((uint64_t)v4);
  }
  return v8;
}

uint64_t sub_23BE34D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseLazyItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BE34D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BE34D94(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BrowseItem();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t BrowseLazyItem.referenceType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for BrowseItem();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BrowseLazyItem();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE34D0C(v1, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = v7[72];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BE34D50((uint64_t)v7, (uint64_t)v4);
    v8 = v4[*(int *)(v2 + 68)];
    sub_23BE34D94((uint64_t)v4);
  }
  return v8;
}

uint64_t BrowseGalleryDescriptor.init(displayStyle:identifier:items:preferredInsetBehavior:title:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_BYTE *)(a7 + 32) = a5 & 1;
  v8 = a7 + *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
  v9 = sub_23BE5A678();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a6, v9);
}

uint64_t BrowseGalleryDescriptor.displayStyle.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t BrowseGalleryDescriptor.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BrowseGalleryDescriptor.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BrowseGalleryDescriptor.preferredInsetBehavior.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t BrowseGalleryDescriptor.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
  v4 = sub_23BE5A678();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_23BE34FD4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE3500C + 4 * byte_23BE61F50[*v0]))(0x5379616C70736964, 0xEC000000656C7974);
}

uint64_t sub_23BE3500C()
{
  return 0x696669746E656469;
}

uint64_t sub_23BE35028()
{
  return 0x736D657469;
}

unint64_t sub_23BE3503C()
{
  return 0xD000000000000016;
}

uint64_t sub_23BE35058()
{
  return 0x656C746974;
}

uint64_t sub_23BE3506C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE36318(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE35090()
{
  sub_23BE35C18();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE350B8()
{
  sub_23BE35C18();
  return sub_23BE5AF18();
}

uint64_t BrowseGalleryDescriptor.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;
  char v13;
  char v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8408);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE35C18();
  sub_23BE5AF00();
  v14 = *v3;
  v13 = 0;
  sub_23BE01D74();
  sub_23BE5AE4C();
  if (!v2)
  {
    v12 = 1;
    sub_23BE5AE28();
    v11 = *((_QWORD *)v3 + 3);
    v10[15] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6428);
    sub_23BDEEED8(&qword_256AC6430, &qword_256AC6438, (uint64_t)&protocol conformance descriptor for BrowseLazyItem, MEMORY[0x24BEE12A0]);
    sub_23BE5AE4C();
    v10[14] = v3[32];
    v10[13] = 3;
    sub_23BE2322C();
    sub_23BE5AE4C();
    type metadata accessor for BrowseGalleryDescriptor();
    v10[12] = 4;
    sub_23BE5A678();
    sub_23BDF23E4(&qword_256AC6B10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5B8]);
    sub_23BE5AE4C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t BrowseGalleryDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v21 = a2;
  v22 = sub_23BE5A678();
  v3 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8418);
  v6 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BrowseGalleryDescriptor();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v25 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_23BE35C18();
  v24 = v8;
  v13 = v26;
  sub_23BE5AEF4();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  v26 = v9;
  v14 = v5;
  v15 = v22;
  v33 = 0;
  sub_23BE02BA0();
  v16 = v23;
  sub_23BE5ADE0();
  *v11 = v34;
  v32 = 1;
  *((_QWORD *)v11 + 1) = sub_23BE5ADBC();
  *((_QWORD *)v11 + 2) = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6428);
  v31 = 2;
  sub_23BDEEED8(&qword_256AC6448, &qword_256AC6450, (uint64_t)&protocol conformance descriptor for BrowseLazyItem, MEMORY[0x24BEE12D0]);
  sub_23BE5ADE0();
  *((_QWORD *)v11 + 3) = v27;
  v29 = 3;
  sub_23BE232F8();
  v20 = 0;
  sub_23BE5ADE0();
  v11[32] = v30;
  v28 = 4;
  sub_23BDF23E4(&qword_256AC6B88, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5D0]);
  v18 = v24;
  sub_23BE5ADE0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v16);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(&v11[*(int *)(v26 + 32)], v14, v15);
  sub_23BE2B5A8((uint64_t)v11, v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return sub_23BE2B5EC((uint64_t)v11);
}

uint64_t sub_23BE356CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseGalleryDescriptor.init(from:)(a1, a2);
}

uint64_t sub_23BE356E0(_QWORD *a1)
{
  return BrowseGalleryDescriptor.encode(to:)(a1);
}

uint64_t BrowseGalleryDescriptor.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  BrowseDisplayStyle.rawValue.getter(*(_BYTE *)v1);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  sub_23BDF1AA4(a1, v3);
  swift_bridgeObjectRelease();
  sub_23BE5AEC4();
  type metadata accessor for BrowseGalleryDescriptor();
  sub_23BE5A678();
  sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
  return sub_23BE5AC30();
}

uint64_t BrowseGalleryDescriptor.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  sub_23BE5AEB8();
  BrowseDisplayStyle.rawValue.getter(*(_BYTE *)v0);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_23BDF1AA4((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  sub_23BE5AEC4();
  type metadata accessor for BrowseGalleryDescriptor();
  sub_23BE5A678();
  sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
  sub_23BE5AC30();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE358E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  BrowseDisplayStyle.rawValue.getter(*(_BYTE *)v1);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  sub_23BDF1AA4(a1, v3);
  swift_bridgeObjectRelease();
  sub_23BE5AEC4();
  sub_23BE5A678();
  sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
  return sub_23BE5AC30();
}

uint64_t sub_23BE359D4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  sub_23BE5AEB8();
  BrowseDisplayStyle.rawValue.getter(*(_BYTE *)v0);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_23BDF1AA4((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  sub_23BE5AEC4();
  sub_23BE5A678();
  sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
  sub_23BE5AC30();
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing23BrowseGalleryDescriptorV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v4 = *(_BYTE *)a2;
  v5 = BrowseDisplayStyle.rawValue.getter(*(_BYTE *)a1);
  v7 = v6;
  if (v5 == BrowseDisplayStyle.rawValue.getter(v4) && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v10 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
      return 0;
  }
  if ((*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8) || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    && (sub_23BE5AE58() & 1) == 0
    || (sub_23BDEFCC4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)) & 1) == 0
    || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
  {
    return 0;
  }
  type metadata accessor for BrowseGalleryDescriptor();
  return sub_23BE5A66C();
}

uint64_t type metadata accessor for BrowseGalleryDescriptor()
{
  uint64_t result;

  result = qword_256AC8480;
  if (!qword_256AC8480)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BE35C18()
{
  unint64_t result;

  result = qword_256AC8410;
  if (!qword_256AC8410)
  {
    result = MEMORY[0x242612B20](&unk_23BE62164, &type metadata for BrowseGalleryDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8410);
  }
  return result;
}

uint64_t sub_23BE35C5C()
{
  return sub_23BDF23E4(&qword_256AC8420, (uint64_t (*)(uint64_t))type metadata accessor for BrowseGalleryDescriptor, (uint64_t)&protocol conformance descriptor for BrowseGalleryDescriptor);
}

_QWORD *initializeBufferWithCopyOfBuffer for BrowseGalleryDescriptor(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = a2[3];
    v6 = *(int *)(a3 + 32);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v9 = sub_23BE5A678();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for BrowseGalleryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_23BE5A678();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for BrowseGalleryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_23BE5A678();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for BrowseGalleryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_23BE5A678();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for BrowseGalleryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23BE5A678();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for BrowseGalleryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23BE5A678();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseGalleryDescriptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE35FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23BE5A678();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for BrowseGalleryDescriptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE3606C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_23BE5A678();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_23BE360E0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BE5A678();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrowseGalleryDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BE361C0 + 4 * byte_23BE61F5A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BE361F4 + 4 * byte_23BE61F55[v4]))();
}

uint64_t sub_23BE361F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE361FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE36204);
  return result;
}

uint64_t sub_23BE36210(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE36218);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BE3621C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE36224(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseGalleryDescriptor.CodingKeys()
{
  return &type metadata for BrowseGalleryDescriptor.CodingKeys;
}

unint64_t sub_23BE36244()
{
  unint64_t result;

  result = qword_256AC84C8;
  if (!qword_256AC84C8)
  {
    result = MEMORY[0x242612B20](&unk_23BE6213C, &type metadata for BrowseGalleryDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC84C8);
  }
  return result;
}

unint64_t sub_23BE3628C()
{
  unint64_t result;

  result = qword_256AC84D0;
  if (!qword_256AC84D0)
  {
    result = MEMORY[0x242612B20](&unk_23BE620AC, &type metadata for BrowseGalleryDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC84D0);
  }
  return result;
}

unint64_t sub_23BE362D4()
{
  unint64_t result;

  result = qword_256AC84D8;
  if (!qword_256AC84D8)
  {
    result = MEMORY[0x242612B20](&unk_23BE620D4, &type metadata for BrowseGalleryDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC84D8);
  }
  return result;
}

uint64_t sub_23BE36318(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x5379616C70736964 && a2 == 0xEC000000656C7974;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023BE66420 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t type metadata accessor for LocalizationBundle()
{
  return objc_opt_self();
}

id sub_23BE36560()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for LocalizationBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  qword_256ADEB20 = (uint64_t)result;
  return result;
}

BOOL static BrowseSizeClass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BE365C8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x72616C75676572;
  if (*v0 != 1)
    v1 = 30324;
  if (*v0)
    return v1;
  else
    return 0x746361706D6F63;
}

uint64_t sub_23BE36618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE373A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE3663C()
{
  sub_23BE369E0();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE36664()
{
  sub_23BE369E0();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3668C()
{
  sub_23BE36AAC();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE366B4()
{
  sub_23BE36AAC();
  return sub_23BE5AF18();
}

uint64_t sub_23BE366DC()
{
  sub_23BE36A68();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE36704()
{
  sub_23BE36A68();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3672C()
{
  sub_23BE36A24();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE36754()
{
  sub_23BE36A24();
  return sub_23BE5AF18();
}

uint64_t BrowseSizeClass.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8578);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8580);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8588);
  v9 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8590);
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE369E0();
  sub_23BE5AF00();
  if (v15)
  {
    if (v15 == 1)
    {
      v26 = 1;
      sub_23BE36A68();
      sub_23BE5ADF8();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {
      v27 = 2;
      sub_23BE36A24();
      v16 = v21;
      sub_23BE5ADF8();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }
  else
  {
    v25 = 0;
    sub_23BE36AAC();
    sub_23BE5ADF8();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

unint64_t sub_23BE369E0()
{
  unint64_t result;

  result = qword_256AC8598;
  if (!qword_256AC8598)
  {
    result = MEMORY[0x242612B20](&unk_23BE625A8, &type metadata for BrowseSizeClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8598);
  }
  return result;
}

unint64_t sub_23BE36A24()
{
  unint64_t result;

  result = qword_256AC85A0;
  if (!qword_256AC85A0)
  {
    result = MEMORY[0x242612B20](&unk_23BE62558, &type metadata for BrowseSizeClass.TvCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC85A0);
  }
  return result;
}

unint64_t sub_23BE36A68()
{
  unint64_t result;

  result = qword_256AC85A8;
  if (!qword_256AC85A8)
  {
    result = MEMORY[0x242612B20](&unk_23BE62508, &type metadata for BrowseSizeClass.RegularCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC85A8);
  }
  return result;
}

unint64_t sub_23BE36AAC()
{
  unint64_t result;

  result = qword_256AC85B0;
  if (!qword_256AC85B0)
  {
    result = MEMORY[0x242612B20](&unk_23BE624B8, &type metadata for BrowseSizeClass.CompactCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC85B0);
  }
  return result;
}

uint64_t BrowseSizeClass.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC85B8);
  v34 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC85C0);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC85C8);
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC85D0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE369E0();
  v13 = v41;
  sub_23BE5AEF4();
  if (v13)
    goto LABEL_7;
  v31 = v6;
  v32 = v10;
  v14 = v39;
  v15 = v40;
  v41 = a1;
  v16 = v12;
  v17 = sub_23BE5ADEC();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = sub_23BE5AD68();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v25 = &type metadata for BrowseSizeClass;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      v43 = 1;
      sub_23BE36A68();
      v20 = v9;
      sub_23BE5AD80();
      v21 = v38;
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }
    else
    {
      v44 = 2;
      sub_23BE36A24();
      v28 = v15;
      sub_23BE5AD80();
      v21 = v38;
      v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }
  else
  {
    v42 = 0;
    sub_23BE36AAC();
    sub_23BE5AD80();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    v21 = v38;
  }
  *v21 = v19;
  v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t sub_23BE36F34@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return BrowseSizeClass.init(from:)(a1, a2);
}

uint64_t sub_23BE36F48(_QWORD *a1)
{
  return BrowseSizeClass.encode(to:)(a1);
}

uint64_t BrowseSizeClass.hash(into:)()
{
  return sub_23BE5AEC4();
}

uint64_t BrowseSizeClass.hashValue.getter()
{
  sub_23BE5AEB8();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

unint64_t sub_23BE36FCC()
{
  unint64_t result;

  result = qword_256AC85D8;
  if (!qword_256AC85D8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseSizeClass, &type metadata for BrowseSizeClass);
    atomic_store(result, (unint64_t *)&qword_256AC85D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for BrowseSizeClass()
{
  return &type metadata for BrowseSizeClass;
}

uint64_t _s15FitnessBrowsing15BrowseSizeClassOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE37070 + 4 * byte_23BE621E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE370A4 + 4 * asc_23BE621E0[v4]))();
}

uint64_t sub_23BE370A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE370AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE370B4);
  return result;
}

uint64_t sub_23BE370C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE370C8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE370CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE370D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseSizeClass.CodingKeys()
{
  return &type metadata for BrowseSizeClass.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowseSizeClass.CompactCodingKeys()
{
  return &type metadata for BrowseSizeClass.CompactCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseSizeClass.RegularCodingKeys()
{
  return &type metadata for BrowseSizeClass.RegularCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseSizeClass.TvCodingKeys()
{
  return &type metadata for BrowseSizeClass.TvCodingKeys;
}

unint64_t sub_23BE37124()
{
  unint64_t result;

  result = qword_256AC85E0;
  if (!qword_256AC85E0)
  {
    result = MEMORY[0x242612B20](&unk_23BE62490, &type metadata for BrowseSizeClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC85E0);
  }
  return result;
}

unint64_t sub_23BE3716C()
{
  unint64_t result;

  result = qword_256AC85E8;
  if (!qword_256AC85E8)
  {
    result = MEMORY[0x242612B20](&unk_23BE623B0, &type metadata for BrowseSizeClass.CompactCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC85E8);
  }
  return result;
}

unint64_t sub_23BE371B4()
{
  unint64_t result;

  result = qword_256AC85F0;
  if (!qword_256AC85F0)
  {
    result = MEMORY[0x242612B20](&unk_23BE623D8, &type metadata for BrowseSizeClass.CompactCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC85F0);
  }
  return result;
}

unint64_t sub_23BE371FC()
{
  unint64_t result;

  result = qword_256AC85F8;
  if (!qword_256AC85F8)
  {
    result = MEMORY[0x242612B20](&unk_23BE62360, &type metadata for BrowseSizeClass.RegularCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC85F8);
  }
  return result;
}

unint64_t sub_23BE37244()
{
  unint64_t result;

  result = qword_256AC8600;
  if (!qword_256AC8600)
  {
    result = MEMORY[0x242612B20](&unk_23BE62388, &type metadata for BrowseSizeClass.RegularCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8600);
  }
  return result;
}

unint64_t sub_23BE3728C()
{
  unint64_t result;

  result = qword_256AC8608;
  if (!qword_256AC8608)
  {
    result = MEMORY[0x242612B20](&unk_23BE62310, &type metadata for BrowseSizeClass.TvCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8608);
  }
  return result;
}

unint64_t sub_23BE372D4()
{
  unint64_t result;

  result = qword_256AC8610;
  if (!qword_256AC8610)
  {
    result = MEMORY[0x242612B20](&unk_23BE62338, &type metadata for BrowseSizeClass.TvCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8610);
  }
  return result;
}

unint64_t sub_23BE3731C()
{
  unint64_t result;

  result = qword_256AC8618;
  if (!qword_256AC8618)
  {
    result = MEMORY[0x242612B20](&unk_23BE62400, &type metadata for BrowseSizeClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8618);
  }
  return result;
}

unint64_t sub_23BE37364()
{
  unint64_t result;

  result = qword_256AC8620;
  if (!qword_256AC8620)
  {
    result = MEMORY[0x242612B20](&unk_23BE62428, &type metadata for BrowseSizeClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8620);
  }
  return result;
}

uint64_t sub_23BE373A8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746361706D6F63 && a2 == 0xE700000000000000;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72616C75676572 && a2 == 0xE700000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 30324 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t BrowseTextAttributes.fontDescriptor.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_23BE010EC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  return v1;
}

uint64_t BrowseTextAttributes.foregroundColor.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BrowseTextAttributes.textAlignment.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t BrowseTextAttributes.init(fontDescriptor:foregroundColor:textAlignment:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_BYTE *)(a8 + 24) = a4;
  *(_QWORD *)(a8 + 32) = a5;
  *(_QWORD *)(a8 + 40) = a6;
  *(_BYTE *)(a8 + 48) = a7;
  return result;
}

uint64_t sub_23BE37580()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x756F726765726F66;
  if (*v0 != 1)
    v1 = 0x67696C4174786574;
  if (*v0)
    return v1;
  else
    return 0x63736544746E6F66;
}

uint64_t sub_23BE37600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE385EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE37624()
{
  sub_23BE37810();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3764C()
{
  sub_23BE37810();
  return sub_23BE5AF18();
}

uint64_t BrowseTextAttributes.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD v13[2];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8628);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  v7 = *((_QWORD *)v1 + 2);
  v8 = *((_BYTE *)v1 + 24);
  v9 = *((_QWORD *)v1 + 4);
  v13[0] = *((_QWORD *)v1 + 5);
  v13[1] = v9;
  v19 = *((unsigned __int8 *)v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE37810();
  sub_23BE5AF00();
  v16 = v14;
  v17 = v7;
  v18 = v8;
  v20 = 0;
  sub_23BE37854();
  v10 = v15;
  sub_23BE5AE1C();
  if (!v10)
  {
    v11 = v19;
    LOBYTE(v16) = 1;
    sub_23BE5AE04();
    LOBYTE(v16) = v11;
    v20 = 2;
    sub_23BE37898();
    sub_23BE5AE4C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BE37810()
{
  unint64_t result;

  result = qword_256AC8630;
  if (!qword_256AC8630)
  {
    result = MEMORY[0x242612B20](&unk_23BE627B8, &type metadata for BrowseTextAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8630);
  }
  return result;
}

unint64_t sub_23BE37854()
{
  unint64_t result;

  result = qword_256AC8638;
  if (!qword_256AC8638)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontDescriptor, &type metadata for BrowseFontDescriptor);
    atomic_store(result, (unint64_t *)&qword_256AC8638);
  }
  return result;
}

unint64_t sub_23BE37898()
{
  unint64_t result;

  result = qword_256AC8640;
  if (!qword_256AC8640)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseTextAlignment, &type metadata for BrowseTextAlignment);
    atomic_store(result, (unint64_t *)&qword_256AC8640);
  }
  return result;
}

uint64_t BrowseTextAttributes.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  int v35;
  char v36;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8648);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE37810();
  sub_23BE5AEF4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v36 = 0;
  sub_23BE37BC4();
  sub_23BE5ADB0();
  v29 = a2;
  v9 = v31;
  v10 = v32;
  v11 = v33;
  v12 = v34;
  LOBYTE(v31) = 1;
  v30 = v9;
  sub_23BE010EC(v9, v32, v33, v34);
  v13 = sub_23BE5AD98();
  v15 = v14;
  v26 = v13;
  v35 = v12;
  v28 = v11;
  v16 = v30;
  v36 = 2;
  sub_23BE37C08();
  swift_bridgeObjectRetain();
  v17 = v15;
  v27 = 0;
  sub_23BE5ADE0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOBYTE(v15) = v31;
  v18 = v16;
  v19 = v16;
  v20 = v10;
  v21 = v10;
  v22 = v28;
  LOBYTE(v10) = v35;
  sub_23BE010EC(v19, v21, v28, v35);
  sub_23BE02A38(v18, v20, v22, v10);
  v23 = v29;
  *v29 = v18;
  v23[1] = v20;
  v23[2] = v22;
  *((_BYTE *)v23 + 24) = v10;
  v23[4] = v26;
  v23[5] = v17;
  *((_BYTE *)v23 + 48) = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_23BE02A38(v18, v20, v22, v10);
  return swift_bridgeObjectRelease();
}

unint64_t sub_23BE37BC4()
{
  unint64_t result;

  result = qword_256AC8650;
  if (!qword_256AC8650)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontDescriptor, &type metadata for BrowseFontDescriptor);
    atomic_store(result, (unint64_t *)&qword_256AC8650);
  }
  return result;
}

unint64_t sub_23BE37C08()
{
  unint64_t result;

  result = qword_256AC8658;
  if (!qword_256AC8658)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseTextAlignment, &type metadata for BrowseTextAlignment);
    atomic_store(result, (unint64_t *)&qword_256AC8658);
  }
  return result;
}

uint64_t sub_23BE37C4C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return BrowseTextAttributes.init(from:)(a1, a2);
}

uint64_t sub_23BE37C60(_QWORD *a1)
{
  return BrowseTextAttributes.encode(to:)(a1);
}

void BrowseTextAttributes.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned __int8 *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(unsigned __int8 *)(v1 + 48);
  if (v3 == 255)
  {
    sub_23BE5AED0();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_QWORD *)(v1 + 8);
    v6 = *(_QWORD *)(v1 + 16);
    v8 = *(_QWORD *)v1;
    sub_23BE5AED0();
    sub_23BE01100(v8, v7, v6, v3);
    BrowseFontDescriptor.hash(into:)(a1, v8, v7, v6, v3);
    sub_23BE02A38(v8, v7, v6, v3);
    if (v4)
    {
LABEL_3:
      sub_23BE5AED0();
      swift_bridgeObjectRetain();
      sub_23BE5AC9C();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  sub_23BE5AED0();
LABEL_6:
  __asm { BR              X9 }
}

uint64_t sub_23BE37D74()
{
  sub_23BE5AC9C();
  return swift_bridgeObjectRelease();
}

uint64_t BrowseTextAttributes.hashValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  char v2;
  char v3;
  _BYTE v5[72];
  __int128 v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  char v10;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_BYTE *)v0 + 24);
  v3 = *((_BYTE *)v0 + 48);
  v6 = *v0;
  v7 = v1;
  v8 = v2;
  v9 = v0[2];
  v10 = v3;
  sub_23BE5AEB8();
  BrowseTextAttributes.hash(into:)((uint64_t)v5);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE37E60()
{
  __int128 *v0;
  uint64_t v1;
  char v2;
  char v3;
  _BYTE v5[72];
  __int128 v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  char v10;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_BYTE *)v0 + 24);
  v3 = *((_BYTE *)v0 + 48);
  v6 = *v0;
  v7 = v1;
  v8 = v2;
  v9 = v0[2];
  v10 = v3;
  sub_23BE5AEB8();
  BrowseTextAttributes.hash(into:)((uint64_t)v5);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE37ECC()
{
  __int128 *v0;
  uint64_t v1;
  char v2;
  char v3;
  _BYTE v5[72];
  __int128 v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  char v10;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_BYTE *)v0 + 24);
  v3 = *((_BYTE *)v0 + 48);
  v6 = *v0;
  v7 = v1;
  v8 = v2;
  v9 = v0[2];
  v10 = v3;
  sub_23BE5AEB8();
  BrowseTextAttributes.hash(into:)((uint64_t)v5);
  return sub_23BE5AEE8();
}

void _s15FitnessBrowsing20BrowseTextAttributesV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v2 = *(unsigned __int8 *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 48);
  v6 = *(unsigned __int8 *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  if (v2 == 255)
  {
    if (v6 != 255)
      return;
  }
  else
  {
    if (v6 == 255)
      return;
    v9 = *(_QWORD *)a1;
    v10 = *(_QWORD *)(a1 + 8);
    v20 = *(_BYTE *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)a2;
    v13 = *(_QWORD *)(a2 + 8);
    v14 = *(_QWORD *)(a2 + 16);
    v17 = *(_QWORD *)(a2 + 32);
    v18 = *(_QWORD *)(a2 + 40);
    v19 = *(_QWORD *)(a1 + 40);
    sub_23BE010EC(*(_QWORD *)a2, v13, v14, v6);
    sub_23BE010EC(v9, v10, v11, v2);
    v15 = _s15FitnessBrowsing20BrowseFontDescriptorO2eeoiySbAC_ACtFZ_0(v9, v10, v11, v2, v12, v13, v14, v6);
    sub_23BE02A38(v12, v13, v14, v6);
    v16 = v11;
    v5 = v20;
    sub_23BE02A38(v9, v10, v16, v2);
    v7 = v17;
    v8 = v18;
    v3 = v19;
    if ((v15 & 1) == 0)
      return;
  }
  if (!v3)
  {
    if (v8)
      return;
LABEL_11:
    sub_23BE46BD0(v5);
    return;
  }
  if (v8 && (v4 == v7 && v3 == v8 || (sub_23BE5AE58() & 1) != 0))
    goto LABEL_11;
}

unint64_t sub_23BE380B0()
{
  unint64_t result;

  result = qword_256AC8660;
  if (!qword_256AC8660)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseTextAttributes, &type metadata for BrowseTextAttributes);
    atomic_store(result, (unint64_t *)&qword_256AC8660);
  }
  return result;
}

uint64_t destroy for BrowseTextAttributes(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 24);
  if (v1 != 255)
    sub_23BE02A4C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BrowseTextAttributes(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  }
  else
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[2];
    sub_23BE01100(*a2, v6, v7, v4);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = v4;
  }
  v8 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BrowseTextAttributes(uint64_t a1, __int128 *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v4 = *((unsigned __int8 *)a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    if (v4 == 255)
    {
      v16 = *a2;
      *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = v16;
    }
    else
    {
      v12 = *(_QWORD *)a2;
      v13 = *((_QWORD *)a2 + 1);
      v14 = *((_QWORD *)a2 + 2);
      sub_23BE01100(*(_QWORD *)a2, v13, v14, v4);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v13;
      *(_QWORD *)(a1 + 16) = v14;
      *(_BYTE *)(a1 + 24) = v4;
    }
  }
  else if (v4 == 255)
  {
    sub_23BE06850(a1);
    v15 = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 9) = v15;
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v6 = *((_QWORD *)a2 + 1);
    v7 = *((_QWORD *)a2 + 2);
    sub_23BE01100(*(_QWORD *)a2, v6, v7, v4);
    v8 = *(_QWORD *)a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    v11 = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(a1 + 24) = v4;
    sub_23BE02A4C(v8, v9, v10, v11);
  }
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BrowseTextAttributes(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 == 255)
    goto LABEL_5;
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (v5 == 255)
  {
    sub_23BE06850(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v5;
  sub_23BE02A4C(v7, v8, v9, v4);
LABEL_6:
  v10 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseTextAttributes(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseTextAttributes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BrowseTextAttributes()
{
  return &type metadata for BrowseTextAttributes;
}

uint64_t storeEnumTagSinglePayload for BrowseTextAttributes.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE38494 + 4 * byte_23BE6260A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE384C8 + 4 * byte_23BE62605[v4]))();
}

uint64_t sub_23BE384C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE384D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE384D8);
  return result;
}

uint64_t sub_23BE384E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE384ECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE384F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE384F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseTextAttributes.CodingKeys()
{
  return &type metadata for BrowseTextAttributes.CodingKeys;
}

unint64_t sub_23BE38518()
{
  unint64_t result;

  result = qword_256AC8668;
  if (!qword_256AC8668)
  {
    result = MEMORY[0x242612B20](&unk_23BE62790, &type metadata for BrowseTextAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8668);
  }
  return result;
}

unint64_t sub_23BE38560()
{
  unint64_t result;

  result = qword_256AC8670;
  if (!qword_256AC8670)
  {
    result = MEMORY[0x242612B20](&unk_23BE62700, &type metadata for BrowseTextAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8670);
  }
  return result;
}

unint64_t sub_23BE385A8()
{
  unint64_t result;

  result = qword_256AC8678;
  if (!qword_256AC8678)
  {
    result = MEMORY[0x242612B20](&unk_23BE62728, &type metadata for BrowseTextAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8678);
  }
  return result;
}

uint64_t sub_23BE385EC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x63736544746E6F66 && a2 == 0xEE00726F74706972;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x756F726765726F66 && a2 == 0xEF726F6C6F43646ELL || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x67696C4174786574 && a2 == 0xED0000746E656D6ELL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void *static BrowseTextAlignment.allCases.getter()
{
  return &unk_250CDDCD8;
}

uint64_t BrowseTextAlignment.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE387EC + 4 * byte_23BE62810[a1]))(0x7265746E6563, 0xE600000000000000);
}

uint64_t sub_23BE387EC()
{
  return 0x656966697473756ALL;
}

uint64_t sub_23BE38808()
{
  return 1952867692;
}

uint64_t sub_23BE38818()
{
  return 0x6C61727574616ELL;
}

uint64_t sub_23BE38830()
{
  return 0x7468676972;
}

void sub_23BE38844(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_23BE38890@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23BE38900 + 4 * byte_23BE6281A[a1]))(0x656966697473756ALL);
}

uint64_t sub_23BE38900(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656966697473756ALL && v1 == 0xE900000000000064)
    v2 = 1;
  else
    v2 = sub_23BE5AE58();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_23BE389BC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23BE5AEB8();
  __asm { BR              X9 }
}

uint64_t sub_23BE38A04()
{
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

void sub_23BE38A84()
{
  __asm { BR              X10 }
}

uint64_t sub_23BE38ABC()
{
  sub_23BE5AC9C();
  return swift_bridgeObjectRelease();
}

void sub_23BE38B28()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23BE5AEB8();
  __asm { BR              X9 }
}

uint64_t sub_23BE38B6C()
{
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE38BEC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s15FitnessBrowsing19BrowseTextAlignmentO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_23BE38C18()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23BE38C44 + 4 * byte_23BE6282E[*v0]))();
}

void sub_23BE38C44(_QWORD *a1@<X8>)
{
  *a1 = 0x656966697473756ALL;
  a1[1] = 0xE900000000000064;
}

void sub_23BE38C64(_QWORD *a1@<X8>)
{
  *a1 = 1952867692;
  a1[1] = 0xE400000000000000;
}

void sub_23BE38C78(_QWORD *a1@<X8>)
{
  *a1 = 0x6C61727574616ELL;
  a1[1] = 0xE700000000000000;
}

void sub_23BE38C94(_QWORD *a1@<X8>)
{
  *a1 = 0x7468676972;
  a1[1] = 0xE500000000000000;
}

void sub_23BE38CAC(_QWORD *a1@<X8>)
{
  *a1 = &unk_250CDDD00;
}

uint64_t sub_23BE38CBC()
{
  sub_23BE38F10();
  return sub_23BE5ACB4();
}

uint64_t sub_23BE38D18()
{
  sub_23BE38F10();
  return sub_23BE5ACA8();
}

uint64_t _s15FitnessBrowsing19BrowseTextAlignmentO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_23BE5AD74();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

unint64_t sub_23BE38DB0()
{
  unint64_t result;

  result = qword_256AC8680;
  if (!qword_256AC8680)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseTextAlignment, &type metadata for BrowseTextAlignment);
    atomic_store(result, (unint64_t *)&qword_256AC8680);
  }
  return result;
}

unint64_t sub_23BE38DF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AC8688;
  if (!qword_256AC8688)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC8690);
    result = MEMORY[0x242612B20](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256AC8688);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrowseTextAlignment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BE38E90 + 4 * byte_23BE62838[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BE38EC4 + 4 * byte_23BE62833[v4]))();
}

uint64_t sub_23BE38EC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE38ECC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE38ED4);
  return result;
}

uint64_t sub_23BE38EE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE38EE8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BE38EEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE38EF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseTextAlignment()
{
  return &type metadata for BrowseTextAlignment;
}

unint64_t sub_23BE38F10()
{
  unint64_t result;

  result = qword_256AC8698;
  if (!qword_256AC8698)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseTextAlignment, &type metadata for BrowseTextAlignment);
    atomic_store(result, (unint64_t *)&qword_256AC8698);
  }
  return result;
}

uint64_t BrowseDetailDescriptor.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BDF23A0(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
}

uint64_t BrowseDetailDescriptor.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BrowseDetailDescriptor() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BrowseDetailDescriptor.preferredInsetBehavior.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BrowseDetailDescriptor() + 24));
}

uint64_t BrowseDetailDescriptor.init(content:identifier:preferredInsetBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t result;
  _QWORD *v10;

  sub_23BE39954(a1, a5);
  result = type metadata accessor for BrowseDetailDescriptor();
  v10 = (_QWORD *)(a5 + *(int *)(result + 20));
  *v10 = a2;
  v10[1] = a3;
  *(_BYTE *)(a5 + *(int *)(result + 24)) = a4;
  return result;
}

uint64_t sub_23BE3902C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x696669746E656469;
  if (*v0 != 1)
    v1 = 0xD000000000000016;
  if (*v0)
    return v1;
  else
    return 0x746E65746E6F63;
}

uint64_t sub_23BE39090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE3ADCC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE390B4()
{
  sub_23BE39998();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE390DC()
{
  sub_23BE39998();
  return sub_23BE5AF18();
}

uint64_t BrowseDetailDescriptor.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC86A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE39998();
  sub_23BE5AF00();
  v11[15] = 0;
  type metadata accessor for BrowseDetailContent();
  sub_23BDF23E4(&qword_256AC7428, (uint64_t (*)(uint64_t))type metadata accessor for BrowseDetailContent, (uint64_t)&protocol conformance descriptor for BrowseDetailContent);
  sub_23BE5AE4C();
  if (!v2)
  {
    v9 = type metadata accessor for BrowseDetailDescriptor();
    v11[14] = 1;
    sub_23BE5AE28();
    v11[13] = *(_BYTE *)(v3 + *(int *)(v9 + 24));
    v11[12] = 2;
    sub_23BE2322C();
    sub_23BE5AE1C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t BrowseDetailDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v21 = a2;
  v4 = type metadata accessor for BrowseDetailContent();
  MEMORY[0x24BDAC7A8](v4);
  v22 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC86B0);
  v6 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BrowseDetailDescriptor();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v24 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_23BE39998();
  sub_23BE5AEF4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  v13 = v6;
  v14 = (uint64_t)v11;
  v28 = 0;
  sub_23BDF23E4(&qword_256AC7450, (uint64_t (*)(uint64_t))type metadata accessor for BrowseDetailContent, (uint64_t)&protocol conformance descriptor for BrowseDetailContent);
  v15 = (uint64_t)v22;
  v16 = v23;
  sub_23BE5ADE0();
  sub_23BE39954(v15, v14);
  v27 = 1;
  v17 = sub_23BE5ADBC();
  v18 = (uint64_t *)(v14 + *(int *)(v9 + 20));
  *v18 = v17;
  v18[1] = v19;
  v25 = 2;
  sub_23BE232F8();
  sub_23BE5ADB0();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v16);
  *(_BYTE *)(v14 + *(int *)(v9 + 24)) = v26;
  sub_23BDF23A0(v14, v21, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailDescriptor);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return sub_23BDF2468(v14, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailDescriptor);
}

uint64_t sub_23BE39574@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseDetailDescriptor.init(from:)(a1, a2);
}

uint64_t sub_23BE39588(_QWORD *a1)
{
  return BrowseDetailDescriptor.encode(to:)(a1);
}

uint64_t BrowseDetailDescriptor.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  BrowseDetailContent.hash(into:)();
  v1 = type metadata accessor for BrowseDetailDescriptor();
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v0 + *(int *)(v1 + 24)) == 2)
    return sub_23BE5AED0();
  sub_23BE5AED0();
  return sub_23BE5AEC4();
}

uint64_t BrowseDetailDescriptor.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_23BE5AEB8();
  BrowseDetailContent.hash(into:)();
  v1 = type metadata accessor for BrowseDetailDescriptor();
  sub_23BE5AC9C();
  if (*(_BYTE *)(v0 + *(int *)(v1 + 24)) == 2)
  {
    sub_23BE5AED0();
  }
  else
  {
    sub_23BE5AED0();
    sub_23BE5AEC4();
  }
  return sub_23BE5AEE8();
}

uint64_t sub_23BE396D4(uint64_t a1)
{
  uint64_t v1;

  sub_23BE5AEB8();
  BrowseDetailContent.hash(into:)();
  sub_23BE5AC9C();
  if (*(_BYTE *)(v1 + *(int *)(a1 + 24)) == 2)
  {
    sub_23BE5AED0();
  }
  else
  {
    sub_23BE5AED0();
    sub_23BE5AEC4();
  }
  return sub_23BE5AEE8();
}

uint64_t sub_23BE39764(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  BrowseDetailContent.hash(into:)();
  sub_23BE5AC9C();
  if (*(_BYTE *)(v2 + *(int *)(a2 + 24)) == 2)
    return sub_23BE5AED0();
  sub_23BE5AED0();
  return sub_23BE5AEC4();
}

uint64_t sub_23BE397DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23BE5AEB8();
  BrowseDetailContent.hash(into:)();
  sub_23BE5AC9C();
  if (*(_BYTE *)(v2 + *(int *)(a2 + 24)) == 2)
  {
    sub_23BE5AED0();
  }
  else
  {
    sub_23BE5AED0();
    sub_23BE5AEC4();
  }
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing22BrowseDetailDescriptorV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  if ((static BrowseDetailContent.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = type metadata accessor for BrowseDetailDescriptor();
  v5 = *(int *)(v4 + 20);
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (v10 = sub_23BE5AE58(), result = 0, (v10 & 1) != 0))
  {
    v12 = *(int *)(v4 + 24);
    v13 = *(unsigned __int8 *)(a1 + v12);
    v14 = *(unsigned __int8 *)(a2 + v12);
    if (v13 == 2)
    {
      if (v14 != 2)
        return 0;
    }
    else
    {
      v15 = (v14 ^ v13) & 1;
      if (v14 == 2 || v15 != 0)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t type metadata accessor for BrowseDetailDescriptor()
{
  uint64_t result;

  result = qword_256AC8718;
  if (!qword_256AC8718)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23BE39954(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseDetailContent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BE39998()
{
  unint64_t result;

  result = qword_256AC86A8;
  if (!qword_256AC86A8)
  {
    result = MEMORY[0x242612B20](&unk_23BE62B7C, &type metadata for BrowseDetailDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC86A8);
  }
  return result;
}

uint64_t sub_23BE399DC()
{
  return sub_23BDF23E4(&qword_256AC86B8, (uint64_t (*)(uint64_t))type metadata accessor for BrowseDetailDescriptor, (uint64_t)&protocol conformance descriptor for BrowseDetailDescriptor);
}

uint64_t *initializeBufferWithCopyOfBuffer for BrowseDetailDescriptor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v45;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for BrowseDetailContent();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v13 = sub_23BE5A678();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v14 = type metadata accessor for BrowseDetailVideoLinkItem();
      v15 = *(int *)(v14 + 20);
      v16 = (uint64_t *)((char *)a1 + v15);
      v17 = (uint64_t *)((char *)a2 + v15);
      v18 = v17[1];
      *v16 = *v17;
      v16[1] = v18;
      v19 = *(int *)(v14 + 24);
      v20 = (uint64_t *)((char *)a1 + v19);
      v21 = (char *)a2 + v19;
      v22 = *(uint64_t *)((char *)a2 + v19 + 8);
      *v20 = *(uint64_t *)((char *)a2 + v19);
      v20[1] = v22;
      v23 = *(uint64_t *)((char *)a2 + v19 + 24);
      v20[2] = *(uint64_t *)((char *)a2 + v19 + 16);
      v20[3] = v23;
      v24 = *(int *)(type metadata accessor for VideoAsset() + 24);
      v45 = (char *)v20 + v24;
      v25 = &v21[v24];
      v26 = sub_23BE5A690();
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27(v45, v25, v26);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v8 = sub_23BE5A678();
        v9 = *(_QWORD *)(v8 - 8);
        v10 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48);
        if (v10(a2, 1, v8))
        {
          v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
        }
        v31 = type metadata accessor for BrowseDetailTextItem();
        v32 = *(int *)(v31 + 20);
        v33 = (char *)a1 + v32;
        v34 = (char *)a2 + v32;
        if (v10((uint64_t *)((char *)a2 + v32), 1, v8))
        {
          v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v33, v34, v8);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v33, 0, 1, v8);
        }
        v30 = *(int *)(v31 + 24);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
        if (swift_getEnumCaseMultiPayload() == 1)
          v28 = (uint64_t *)&unk_256AC6BF8;
        else
          v28 = (uint64_t *)&unk_256AC6BF0;
        v29 = __swift_instantiateConcreteTypeFromMangledName(v28);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(a1, a2, v29);
        swift_storeEnumTagMultiPayload();
        v30 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
      }
      v36 = (uint64_t *)((char *)a1 + v30);
      v37 = (uint64_t *)((char *)a2 + v30);
      v38 = v37[1];
      *v36 = *v37;
      v36[1] = v38;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    v39 = *(int *)(a3 + 20);
    v40 = *(int *)(a3 + 24);
    v41 = (uint64_t *)((char *)a1 + v39);
    v42 = (uint64_t *)((char *)a2 + v39);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    *((_BYTE *)a1 + v40) = *((_BYTE *)a2 + v40);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for BrowseDetailDescriptor(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  type metadata accessor for BrowseDetailContent();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v5 = sub_23BE5A678();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      v6 = type metadata accessor for BrowseDetailVideoLinkItem();
      swift_bridgeObjectRelease();
      v7 = a1 + *(int *)(v6 + 24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = v7 + *(int *)(type metadata accessor for VideoAsset() + 24);
      v9 = sub_23BE5A690();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
      break;
    case 1:
      v10 = sub_23BE5A678();
      v11 = *(_QWORD *)(v10 - 8);
      v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      if (!v12(a1, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
      v13 = a1 + *(int *)(type metadata accessor for BrowseDetailTextItem() + 20);
      if (!v12(v13, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
      goto LABEL_13;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
      if (swift_getEnumCaseMultiPayload() == 1)
        v3 = (uint64_t *)&unk_256AC6BF8;
      else
        v3 = (uint64_t *)&unk_256AC6BF0;
      v4 = __swift_instantiateConcreteTypeFromMangledName(v3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for BrowseDetailArtworkItem();
LABEL_13:
      swift_bridgeObjectRelease();
      break;
  }
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for BrowseDetailDescriptor(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v44;

  type metadata accessor for BrowseDetailContent();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v11 = sub_23BE5A678();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
    v12 = type metadata accessor for BrowseDetailVideoLinkItem();
    v13 = *(int *)(v12 + 20);
    v14 = &a1[v13];
    v15 = &a2[v13];
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    v17 = *(int *)(v12 + 24);
    v18 = &a1[v17];
    v19 = &a2[v17];
    v20 = *(_QWORD *)&a2[v17 + 8];
    *(_QWORD *)v18 = *(_QWORD *)&a2[v17];
    *((_QWORD *)v18 + 1) = v20;
    v21 = *(_QWORD *)&a2[v17 + 24];
    *((_QWORD *)v18 + 2) = *(_QWORD *)&a2[v17 + 16];
    *((_QWORD *)v18 + 3) = v21;
    v22 = *(int *)(type metadata accessor for VideoAsset() + 24);
    v44 = &v18[v22];
    v23 = &v19[v22];
    v24 = sub_23BE5A690();
    v25 = a3;
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26(v44, v23, v24);
    a3 = v25;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v7 = sub_23BE5A678();
      v8 = *(_QWORD *)(v7 - 8);
      v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
      if (v9(a2, 1, v7))
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v30 = type metadata accessor for BrowseDetailTextItem();
      v31 = *(int *)(v30 + 20);
      v32 = &a1[v31];
      v33 = &a2[v31];
      if (v9(&a2[v31], 1, v7))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v32, v33, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v32, 0, 1, v7);
      }
      v29 = *(int *)(v30 + 24);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
      if (swift_getEnumCaseMultiPayload() == 1)
        v27 = (uint64_t *)&unk_256AC6BF8;
      else
        v27 = (uint64_t *)&unk_256AC6BF0;
      v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(a1, a2, v28);
      swift_storeEnumTagMultiPayload();
      v29 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
    }
    v35 = &a1[v29];
    v36 = &a2[v29];
    v37 = *((_QWORD *)v36 + 1);
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *((_QWORD *)v35 + 1) = v37;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  v38 = *(int *)(a3 + 20);
  v39 = *(int *)(a3 + 24);
  v40 = &a1[v38];
  v41 = &a2[v38];
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = v42;
  a1[v39] = a2[v39];
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for BrowseDetailDescriptor(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v37;

  if (a1 != a2)
  {
    sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
    type metadata accessor for BrowseDetailContent();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = sub_23BE5A678();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = type metadata accessor for BrowseDetailVideoLinkItem();
      v13 = *(int *)(v12 + 20);
      v14 = &a1[v13];
      v15 = &a2[v13];
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
      v16 = *(int *)(v12 + 24);
      v17 = &a1[v16];
      v18 = &a2[v16];
      *(_QWORD *)v17 = *(_QWORD *)&a2[v16];
      *((_QWORD *)v17 + 1) = *(_QWORD *)&a2[v16 + 8];
      *((_QWORD *)v17 + 2) = *(_QWORD *)&a2[v16 + 16];
      *((_QWORD *)v17 + 3) = *(_QWORD *)&a2[v16 + 24];
      v19 = *(int *)(type metadata accessor for VideoAsset() + 24);
      v37 = &v17[v19];
      v20 = &v18[v19];
      v21 = sub_23BE5A690();
      v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22(v37, v20, v21);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v7 = sub_23BE5A678();
        v8 = *(_QWORD *)(v7 - 8);
        v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
        if (v9(a2, 1, v7))
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
        }
        v26 = type metadata accessor for BrowseDetailTextItem();
        v27 = *(int *)(v26 + 20);
        v28 = &a1[v27];
        v29 = &a2[v27];
        if (v9(&a2[v27], 1, v7))
        {
          v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v28, v29, v7);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v28, 0, 1, v7);
        }
        v25 = *(int *)(v26 + 24);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
        if (swift_getEnumCaseMultiPayload() == 1)
          v23 = (uint64_t *)&unk_256AC6BF8;
        else
          v23 = (uint64_t *)&unk_256AC6BF0;
        v24 = __swift_instantiateConcreteTypeFromMangledName(v23);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
        swift_storeEnumTagMultiPayload();
        v25 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
      }
      v31 = &a1[v25];
      v32 = &a2[v25];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v33 = *(int *)(a3 + 20);
  v34 = &a1[v33];
  v35 = &a2[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

char *initializeWithTake for BrowseDetailDescriptor(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  type metadata accessor for BrowseDetailContent();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v11 = sub_23BE5A678();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    v12 = type metadata accessor for BrowseDetailVideoLinkItem();
    *(_OWORD *)&a1[*(int *)(v12 + 20)] = *(_OWORD *)&a2[*(int *)(v12 + 20)];
    v13 = *(int *)(v12 + 24);
    v14 = &a1[v13];
    v15 = &a2[v13];
    v16 = *(_OWORD *)&a2[v13 + 16];
    *(_OWORD *)v14 = *(_OWORD *)&a2[v13];
    *((_OWORD *)v14 + 1) = v16;
    v17 = *(int *)(type metadata accessor for VideoAsset() + 24);
    v18 = &v14[v17];
    v19 = &v15[v17];
    v20 = sub_23BE5A690();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = sub_23BE5A678();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    v31 = a3;
    if (v9(a2, 1, v7))
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v24 = type metadata accessor for BrowseDetailTextItem();
    v25 = *(int *)(v24 + 20);
    v26 = &a1[v25];
    v27 = &a2[v25];
    if (v9(&a2[v25], 1, v7))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v26, v27, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v26, 0, 1, v7);
    }
    *(_OWORD *)&a1[*(int *)(v24 + 24)] = *(_OWORD *)&a2[*(int *)(v24 + 24)];
    a3 = v31;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
    if (swift_getEnumCaseMultiPayload() == 1)
      v21 = (uint64_t *)&unk_256AC6BF8;
    else
      v21 = (uint64_t *)&unk_256AC6BF0;
    v22 = __swift_instantiateConcreteTypeFromMangledName(v21);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(a1, a2, v22);
    swift_storeEnumTagMultiPayload();
    v23 = type metadata accessor for BrowseDetailArtworkItem();
    *(_OWORD *)&a1[*(int *)(v23 + 20)] = *(_OWORD *)&a2[*(int *)(v23 + 20)];
  }
  swift_storeEnumTagMultiPayload();
  v29 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  a1[v29] = a2[v29];
  return a1;
}

char *assignWithTake for BrowseDetailDescriptor(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v34)(char *, uint64_t, uint64_t);

  if (a1 != a2)
  {
    sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
    type metadata accessor for BrowseDetailContent();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v10 = sub_23BE5A678();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v11 = type metadata accessor for BrowseDetailVideoLinkItem();
      *(_OWORD *)&a1[*(int *)(v11 + 20)] = *(_OWORD *)&a2[*(int *)(v11 + 20)];
      v12 = *(int *)(v11 + 24);
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = *(_OWORD *)&a2[v12 + 16];
      *(_OWORD *)v13 = *(_OWORD *)&a2[v12];
      *((_OWORD *)v13 + 1) = v15;
      v16 = *(int *)(type metadata accessor for VideoAsset() + 24);
      v17 = &v13[v16];
      v18 = &v14[v16];
      v19 = sub_23BE5A690();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v7 = sub_23BE5A678();
        v8 = *(_QWORD *)(v7 - 8);
        v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
        if (v34(a2, 1, v7))
        {
          v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
        }
        v23 = type metadata accessor for BrowseDetailTextItem();
        v24 = *(int *)(v23 + 20);
        v25 = &a1[v24];
        v26 = &a2[v24];
        if (v34(&a2[v24], 1, v7))
        {
          v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
          memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v25, v26, v7);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
        }
        v22 = *(int *)(v23 + 24);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
        if (swift_getEnumCaseMultiPayload() == 1)
          v20 = (uint64_t *)&unk_256AC6BF8;
        else
          v20 = (uint64_t *)&unk_256AC6BF0;
        v21 = __swift_instantiateConcreteTypeFromMangledName(v20);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a1, a2, v21);
        swift_storeEnumTagMultiPayload();
        v22 = *(int *)(type metadata accessor for BrowseDetailArtworkItem() + 20);
      }
      *(_OWORD *)&a1[v22] = *(_OWORD *)&a2[v22];
    }
    swift_storeEnumTagMultiPayload();
  }
  v28 = *(int *)(a3 + 20);
  v29 = &a1[v28];
  v30 = &a2[v28];
  v32 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = v32;
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseDetailDescriptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE3AAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for BrowseDetailContent();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseDetailDescriptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE3AB30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for BrowseDetailContent();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_23BE3ABAC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BrowseDetailContent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrowseDetailDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE3AC74 + 4 * byte_23BE62995[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE3ACA8 + 4 * asc_23BE62990[v4]))();
}

uint64_t sub_23BE3ACA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE3ACB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE3ACB8);
  return result;
}

uint64_t sub_23BE3ACC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE3ACCCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE3ACD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE3ACD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseDetailDescriptor.CodingKeys()
{
  return &type metadata for BrowseDetailDescriptor.CodingKeys;
}

unint64_t sub_23BE3ACF8()
{
  unint64_t result;

  result = qword_256AC8758;
  if (!qword_256AC8758)
  {
    result = MEMORY[0x242612B20](&unk_23BE62B54, &type metadata for BrowseDetailDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8758);
  }
  return result;
}

unint64_t sub_23BE3AD40()
{
  unint64_t result;

  result = qword_256AC8760;
  if (!qword_256AC8760)
  {
    result = MEMORY[0x242612B20](&unk_23BE62AC4, &type metadata for BrowseDetailDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8760);
  }
  return result;
}

unint64_t sub_23BE3AD88()
{
  unint64_t result;

  result = qword_256AC8768;
  if (!qword_256AC8768)
  {
    result = MEMORY[0x242612B20](&unk_23BE62AEC, &type metadata for BrowseDetailDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8768);
  }
  return result;
}

uint64_t sub_23BE3ADCC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023BE66420)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

BOOL static BrowseItemMediaType.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_23BE3AF38()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE3AF6C + 4 * byte_23BE62BD0[*v0]))(0x7552646564697567, 0xE90000000000006ELL);
}

uint64_t sub_23BE3AF6C()
{
  return 0x6157646564697567;
}

uint64_t sub_23BE3AF88()
{
  return 0x697461746964656DLL;
}

uint64_t sub_23BE3AFA8()
{
  return 0x6F65646976;
}

uint64_t sub_23BE3AFBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE3B66C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE3AFE0()
{
  sub_23BE3B45C();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3B008()
{
  sub_23BE3B45C();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3B030()
{
  sub_23BE3B56C();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3B058()
{
  sub_23BE3B56C();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3B080()
{
  sub_23BE3B528();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3B0A8()
{
  sub_23BE3B528();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3B0D0()
{
  sub_23BE3B4E4();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3B0F8()
{
  sub_23BE3B4E4();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3B120()
{
  sub_23BE3B4A0();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3B148()
{
  sub_23BE3B4A0();
  return sub_23BE5AF18();
}

void BrowseItemMediaType.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[10];
  uint64_t v11;

  v11 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8770);
  v10[7] = *(_QWORD *)(v3 - 8);
  v10[8] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v10[6] = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8778);
  v10[4] = *(_QWORD *)(v5 - 8);
  v10[5] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v10[3] = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8780);
  v10[1] = *(_QWORD *)(v7 - 8);
  v10[2] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8788);
  MEMORY[0x24BDAC7A8](v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8790);
  v10[9] = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE3B45C();
  sub_23BE5AF00();
  __asm { BR              X10 }
}

uint64_t sub_23BE3B328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 - 68) = 0;
  sub_23BE3B56C();
  sub_23BE5ADF8();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 104) + 8))(v1, v0);
}

unint64_t sub_23BE3B45C()
{
  unint64_t result;

  result = qword_256AC8798;
  if (!qword_256AC8798)
  {
    result = MEMORY[0x242612B20](&unk_23BE63070, &type metadata for BrowseItemMediaType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8798);
  }
  return result;
}

unint64_t sub_23BE3B4A0()
{
  unint64_t result;

  result = qword_256AC87A0;
  if (!qword_256AC87A0)
  {
    result = MEMORY[0x242612B20](&unk_23BE63020, &type metadata for BrowseItemMediaType.VideoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC87A0);
  }
  return result;
}

unint64_t sub_23BE3B4E4()
{
  unint64_t result;

  result = qword_256AC87A8;
  if (!qword_256AC87A8)
  {
    result = MEMORY[0x242612B20](&unk_23BE62FD0, &type metadata for BrowseItemMediaType.MeditationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC87A8);
  }
  return result;
}

unint64_t sub_23BE3B528()
{
  unint64_t result;

  result = qword_256AC87B0;
  if (!qword_256AC87B0)
  {
    result = MEMORY[0x242612B20](&unk_23BE62F80, &type metadata for BrowseItemMediaType.GuidedWalkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC87B0);
  }
  return result;
}

unint64_t sub_23BE3B56C()
{
  unint64_t result;

  result = qword_256AC87B8;
  if (!qword_256AC87B8)
  {
    result = MEMORY[0x242612B20](&unk_23BE62F30, &type metadata for BrowseItemMediaType.GuidedRunCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC87B8);
  }
  return result;
}

uint64_t BrowseItemMediaType.init(from:)(_QWORD *a1)
{
  return sub_23BE3B838(a1);
}

uint64_t sub_23BE3B5C4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23BE3B838(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_23BE3B5EC(_QWORD *a1)
{
  unsigned __int8 *v1;

  BrowseItemMediaType.encode(to:)(a1, *v1);
}

uint64_t BrowseItemMediaType.hash(into:)()
{
  return sub_23BE5AEC4();
}

uint64_t BrowseItemMediaType.hashValue.getter()
{
  sub_23BE5AEB8();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE3B66C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7552646564697567 && a2 == 0xE90000000000006ELL;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6157646564697567 && a2 == 0xEA00000000006B6CLL || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x697461746964656DLL && a2 == 0xEA00000000006E6FLL || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F65646976 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23BE3B838(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v23[12];
  _QWORD *v24;
  uint64_t v25;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8820);
  v23[10] = *(_QWORD *)(v2 - 8);
  v23[11] = v2;
  MEMORY[0x24BDAC7A8](v2);
  v23[9] = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8828);
  v23[5] = *(_QWORD *)(v4 - 8);
  v23[6] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v23[8] = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8830);
  v23[3] = *(_QWORD *)(v6 - 8);
  v23[4] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v23[7] = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8838);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8840);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v24 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_23BE3B45C();
  v17 = v25;
  sub_23BE5AEF4();
  if (!v17)
  {
    v23[1] = v8;
    v23[2] = v11;
    v23[0] = v9;
    v25 = v13;
    v18 = sub_23BE5ADEC();
    if (*(_QWORD *)(v18 + 16) == 1)
      __asm { BR              X9 }
    v19 = sub_23BE5AD68();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v21 = &type metadata for BrowseItemMediaType;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v12);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return v12;
}

void sub_23BE3BB5C()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 67) = 1;
  sub_23BE3B528();
  sub_23BE5AD80();
  if (!v0)
    JUMPOUT(0x23BE3BC30);
  JUMPOUT(0x23BE3BB10);
}

void sub_23BE3BBA0()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 66) = 2;
  sub_23BE3B4E4();
  sub_23BE5AD80();
  if (!v0)
    JUMPOUT(0x23BE3BBE0);
  JUMPOUT(0x23BE3BB10);
}

void sub_23BE3BBEC()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 65) = 3;
  sub_23BE3B4A0();
  sub_23BE5AD80();
  if (!v0)
    JUMPOUT(0x23BE3BC30);
  JUMPOUT(0x23BE3BB10);
}

unint64_t sub_23BE3BC60()
{
  unint64_t result;

  result = qword_256AC87C0;
  if (!qword_256AC87C0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseItemMediaType, &type metadata for BrowseItemMediaType);
    atomic_store(result, (unint64_t *)&qword_256AC87C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for BrowseItemMediaType()
{
  return &type metadata for BrowseItemMediaType;
}

uint64_t _s15FitnessBrowsing19BrowseItemMediaTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BE3BD04 + 4 * byte_23BE62BE1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BE3BD38 + 4 * byte_23BE62BDC[v4]))();
}

uint64_t sub_23BE3BD38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE3BD40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE3BD48);
  return result;
}

uint64_t sub_23BE3BD54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE3BD5CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BE3BD60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE3BD68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseItemMediaType.CodingKeys()
{
  return &type metadata for BrowseItemMediaType.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowseItemMediaType.GuidedRunCodingKeys()
{
  return &type metadata for BrowseItemMediaType.GuidedRunCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseItemMediaType.GuidedWalkCodingKeys()
{
  return &type metadata for BrowseItemMediaType.GuidedWalkCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseItemMediaType.MeditationCodingKeys()
{
  return &type metadata for BrowseItemMediaType.MeditationCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseItemMediaType.VideoCodingKeys()
{
  return &type metadata for BrowseItemMediaType.VideoCodingKeys;
}

unint64_t sub_23BE3BDC8()
{
  unint64_t result;

  result = qword_256AC87C8;
  if (!qword_256AC87C8)
  {
    result = MEMORY[0x242612B20](&unk_23BE62F08, &type metadata for BrowseItemMediaType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC87C8);
  }
  return result;
}

unint64_t sub_23BE3BE10()
{
  unint64_t result;

  result = qword_256AC87D0;
  if (!qword_256AC87D0)
  {
    result = MEMORY[0x242612B20](&unk_23BE62E28, &type metadata for BrowseItemMediaType.GuidedRunCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC87D0);
  }
  return result;
}

unint64_t sub_23BE3BE58()
{
  unint64_t result;

  result = qword_256AC87D8;
  if (!qword_256AC87D8)
  {
    result = MEMORY[0x242612B20](&unk_23BE62E50, &type metadata for BrowseItemMediaType.GuidedRunCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC87D8);
  }
  return result;
}

unint64_t sub_23BE3BEA0()
{
  unint64_t result;

  result = qword_256AC87E0;
  if (!qword_256AC87E0)
  {
    result = MEMORY[0x242612B20](&unk_23BE62DD8, &type metadata for BrowseItemMediaType.GuidedWalkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC87E0);
  }
  return result;
}

unint64_t sub_23BE3BEE8()
{
  unint64_t result;

  result = qword_256AC87E8;
  if (!qword_256AC87E8)
  {
    result = MEMORY[0x242612B20](&unk_23BE62E00, &type metadata for BrowseItemMediaType.GuidedWalkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC87E8);
  }
  return result;
}

unint64_t sub_23BE3BF30()
{
  unint64_t result;

  result = qword_256AC87F0;
  if (!qword_256AC87F0)
  {
    result = MEMORY[0x242612B20](&unk_23BE62D88, &type metadata for BrowseItemMediaType.MeditationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC87F0);
  }
  return result;
}

unint64_t sub_23BE3BF78()
{
  unint64_t result;

  result = qword_256AC87F8;
  if (!qword_256AC87F8)
  {
    result = MEMORY[0x242612B20](&unk_23BE62DB0, &type metadata for BrowseItemMediaType.MeditationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC87F8);
  }
  return result;
}

unint64_t sub_23BE3BFC0()
{
  unint64_t result;

  result = qword_256AC8800;
  if (!qword_256AC8800)
  {
    result = MEMORY[0x242612B20](&unk_23BE62D38, &type metadata for BrowseItemMediaType.VideoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8800);
  }
  return result;
}

unint64_t sub_23BE3C008()
{
  unint64_t result;

  result = qword_256AC8808;
  if (!qword_256AC8808)
  {
    result = MEMORY[0x242612B20](&unk_23BE62D60, &type metadata for BrowseItemMediaType.VideoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8808);
  }
  return result;
}

unint64_t sub_23BE3C050()
{
  unint64_t result;

  result = qword_256AC8810;
  if (!qword_256AC8810)
  {
    result = MEMORY[0x242612B20](&unk_23BE62E78, &type metadata for BrowseItemMediaType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8810);
  }
  return result;
}

unint64_t sub_23BE3C098()
{
  unint64_t result;

  result = qword_256AC8818;
  if (!qword_256AC8818)
  {
    result = MEMORY[0x242612B20](&unk_23BE62EA0, &type metadata for BrowseItemMediaType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8818);
  }
  return result;
}

BOOL static BrowsePlatform.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_23BE3C0EC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE3C118 + 4 * byte_23BE630C0[*v0]))(0x656E6F6870, 0xE500000000000000);
}

uint64_t sub_23BE3C118()
{
  return 0x74656C626174;
}

uint64_t sub_23BE3C12C()
{
  return 0x6863746177;
}

uint64_t sub_23BE3C13C()
{
  return 30324;
}

uint64_t sub_23BE3C148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE3C7F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE3C16C()
{
  sub_23BE3C5E8();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3C194()
{
  sub_23BE3C5E8();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3C1BC()
{
  sub_23BE3C6F8();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3C1E4()
{
  sub_23BE3C6F8();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3C20C()
{
  sub_23BE3C6B4();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3C234()
{
  sub_23BE3C6B4();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3C25C()
{
  sub_23BE3C62C();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3C284()
{
  sub_23BE3C62C();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3C2AC()
{
  sub_23BE3C670();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3C2D4()
{
  sub_23BE3C670();
  return sub_23BE5AF18();
}

void BrowsePlatform.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[10];
  uint64_t v11;

  v11 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8848);
  v10[7] = *(_QWORD *)(v3 - 8);
  v10[8] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v10[6] = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8850);
  v10[4] = *(_QWORD *)(v5 - 8);
  v10[5] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v10[3] = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8858);
  v10[1] = *(_QWORD *)(v7 - 8);
  v10[2] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8860);
  MEMORY[0x24BDAC7A8](v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8868);
  v10[9] = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE3C5E8();
  sub_23BE5AF00();
  __asm { BR              X10 }
}

uint64_t sub_23BE3C4B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 - 68) = 0;
  sub_23BE3C6F8();
  sub_23BE5ADF8();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 104) + 8))(v1, v0);
}

unint64_t sub_23BE3C5E8()
{
  unint64_t result;

  result = qword_256AC8870;
  if (!qword_256AC8870)
  {
    result = MEMORY[0x242612B20](&unk_23BE63528, &type metadata for BrowsePlatform.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8870);
  }
  return result;
}

unint64_t sub_23BE3C62C()
{
  unint64_t result;

  result = qword_256AC8878;
  if (!qword_256AC8878)
  {
    result = MEMORY[0x242612B20](&unk_23BE634D8, &type metadata for BrowsePlatform.TvCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8878);
  }
  return result;
}

unint64_t sub_23BE3C670()
{
  unint64_t result;

  result = qword_256AC8880;
  if (!qword_256AC8880)
  {
    result = MEMORY[0x242612B20](&unk_23BE63488, &type metadata for BrowsePlatform.WatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8880);
  }
  return result;
}

unint64_t sub_23BE3C6B4()
{
  unint64_t result;

  result = qword_256AC8888;
  if (!qword_256AC8888)
  {
    result = MEMORY[0x242612B20](&unk_23BE63438, &type metadata for BrowsePlatform.TabletCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8888);
  }
  return result;
}

unint64_t sub_23BE3C6F8()
{
  unint64_t result;

  result = qword_256AC8890;
  if (!qword_256AC8890)
  {
    result = MEMORY[0x242612B20](&unk_23BE633E8, &type metadata for BrowsePlatform.PhoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8890);
  }
  return result;
}

uint64_t BrowsePlatform.init(from:)(_QWORD *a1)
{
  return sub_23BE3C980(a1);
}

uint64_t sub_23BE3C750@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23BE3C980(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_23BE3C778(_QWORD *a1)
{
  unsigned __int8 *v1;

  BrowsePlatform.encode(to:)(a1, *v1);
}

uint64_t BrowsePlatform.hash(into:)()
{
  return sub_23BE5AEC4();
}

uint64_t BrowsePlatform.hashValue.getter()
{
  sub_23BE5AEB8();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE3C7F8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656E6F6870 && a2 == 0xE500000000000000;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74656C626174 && a2 == 0xE600000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6863746177 && a2 == 0xE500000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 30324 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23BE3C980(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v23[12];
  _QWORD *v24;
  uint64_t v25;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC88F8);
  v23[10] = *(_QWORD *)(v2 - 8);
  v23[11] = v2;
  MEMORY[0x24BDAC7A8](v2);
  v23[9] = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8900);
  v23[5] = *(_QWORD *)(v4 - 8);
  v23[6] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v23[8] = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8908);
  v23[3] = *(_QWORD *)(v6 - 8);
  v23[4] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v23[7] = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8910);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8918);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v24 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_23BE3C5E8();
  v17 = v25;
  sub_23BE5AEF4();
  if (!v17)
  {
    v23[1] = v8;
    v23[2] = v11;
    v23[0] = v9;
    v25 = v13;
    v18 = sub_23BE5ADEC();
    if (*(_QWORD *)(v18 + 16) == 1)
      __asm { BR              X9 }
    v19 = sub_23BE5AD68();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v21 = &type metadata for BrowsePlatform;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v12);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return v12;
}

void sub_23BE3CCA4()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 67) = 1;
  sub_23BE3C6B4();
  sub_23BE5AD80();
  if (!v0)
    JUMPOUT(0x23BE3CD78);
  JUMPOUT(0x23BE3CC58);
}

void sub_23BE3CCE8()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 66) = 2;
  sub_23BE3C670();
  sub_23BE5AD80();
  if (!v0)
    JUMPOUT(0x23BE3CD28);
  JUMPOUT(0x23BE3CC58);
}

void sub_23BE3CD34()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 65) = 3;
  sub_23BE3C62C();
  sub_23BE5AD80();
  if (!v0)
    JUMPOUT(0x23BE3CD78);
  JUMPOUT(0x23BE3CC58);
}

unint64_t sub_23BE3CDA8()
{
  unint64_t result;

  result = qword_256AC8898;
  if (!qword_256AC8898)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowsePlatform, &type metadata for BrowsePlatform);
    atomic_store(result, (unint64_t *)&qword_256AC8898);
  }
  return result;
}

ValueMetadata *type metadata accessor for BrowsePlatform()
{
  return &type metadata for BrowsePlatform;
}

uint64_t _s15FitnessBrowsing14BrowsePlatformOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BE3CE4C + 4 * byte_23BE630D1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BE3CE80 + 4 * byte_23BE630CC[v4]))();
}

uint64_t sub_23BE3CE80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE3CE88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE3CE90);
  return result;
}

uint64_t sub_23BE3CE9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE3CEA4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BE3CEA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE3CEB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowsePlatform.CodingKeys()
{
  return &type metadata for BrowsePlatform.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowsePlatform.PhoneCodingKeys()
{
  return &type metadata for BrowsePlatform.PhoneCodingKeys;
}

ValueMetadata *type metadata accessor for BrowsePlatform.TabletCodingKeys()
{
  return &type metadata for BrowsePlatform.TabletCodingKeys;
}

ValueMetadata *type metadata accessor for BrowsePlatform.WatchCodingKeys()
{
  return &type metadata for BrowsePlatform.WatchCodingKeys;
}

ValueMetadata *type metadata accessor for BrowsePlatform.TvCodingKeys()
{
  return &type metadata for BrowsePlatform.TvCodingKeys;
}

unint64_t sub_23BE3CF10()
{
  unint64_t result;

  result = qword_256AC88A0;
  if (!qword_256AC88A0)
  {
    result = MEMORY[0x242612B20](&unk_23BE633C0, &type metadata for BrowsePlatform.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC88A0);
  }
  return result;
}

unint64_t sub_23BE3CF58()
{
  unint64_t result;

  result = qword_256AC88A8;
  if (!qword_256AC88A8)
  {
    result = MEMORY[0x242612B20](&unk_23BE632E0, &type metadata for BrowsePlatform.PhoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC88A8);
  }
  return result;
}

unint64_t sub_23BE3CFA0()
{
  unint64_t result;

  result = qword_256AC88B0;
  if (!qword_256AC88B0)
  {
    result = MEMORY[0x242612B20](&unk_23BE63308, &type metadata for BrowsePlatform.PhoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC88B0);
  }
  return result;
}

unint64_t sub_23BE3CFE8()
{
  unint64_t result;

  result = qword_256AC88B8;
  if (!qword_256AC88B8)
  {
    result = MEMORY[0x242612B20](&unk_23BE63290, &type metadata for BrowsePlatform.TabletCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC88B8);
  }
  return result;
}

unint64_t sub_23BE3D030()
{
  unint64_t result;

  result = qword_256AC88C0;
  if (!qword_256AC88C0)
  {
    result = MEMORY[0x242612B20](&unk_23BE632B8, &type metadata for BrowsePlatform.TabletCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC88C0);
  }
  return result;
}

unint64_t sub_23BE3D078()
{
  unint64_t result;

  result = qword_256AC88C8;
  if (!qword_256AC88C8)
  {
    result = MEMORY[0x242612B20](&unk_23BE63240, &type metadata for BrowsePlatform.WatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC88C8);
  }
  return result;
}

unint64_t sub_23BE3D0C0()
{
  unint64_t result;

  result = qword_256AC88D0;
  if (!qword_256AC88D0)
  {
    result = MEMORY[0x242612B20](&unk_23BE63268, &type metadata for BrowsePlatform.WatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC88D0);
  }
  return result;
}

unint64_t sub_23BE3D108()
{
  unint64_t result;

  result = qword_256AC88D8;
  if (!qword_256AC88D8)
  {
    result = MEMORY[0x242612B20](&unk_23BE631F0, &type metadata for BrowsePlatform.TvCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC88D8);
  }
  return result;
}

unint64_t sub_23BE3D150()
{
  unint64_t result;

  result = qword_256AC88E0;
  if (!qword_256AC88E0)
  {
    result = MEMORY[0x242612B20](&unk_23BE63218, &type metadata for BrowsePlatform.TvCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC88E0);
  }
  return result;
}

unint64_t sub_23BE3D198()
{
  unint64_t result;

  result = qword_256AC88E8;
  if (!qword_256AC88E8)
  {
    result = MEMORY[0x242612B20](&unk_23BE63330, &type metadata for BrowsePlatform.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC88E8);
  }
  return result;
}

unint64_t sub_23BE3D1E0()
{
  unint64_t result;

  result = qword_256AC88F0;
  if (!qword_256AC88F0)
  {
    result = MEMORY[0x242612B20](&unk_23BE63358, &type metadata for BrowsePlatform.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC88F0);
  }
  return result;
}

uint64_t sub_23BE3D224()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000019;
  if (*v0 != 1)
    v1 = 0x6D6574737973;
  if (*v0)
    return v1;
  else
    return 0x63696D616E7964;
}

uint64_t sub_23BE3D280@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE3E544(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE3D2A4()
{
  sub_23BE3DB6C();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3D2CC()
{
  sub_23BE3DB6C();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3D2F4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E6769736564;
  if (*v0 != 1)
    v1 = 0x63696C6F626D7973;
  if (*v0)
    return v1;
  else
    return 0x6C79745374786574;
}

uint64_t sub_23BE3D35C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE3E688(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE3D380()
{
  sub_23BE3DD8C();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3D3A8()
{
  sub_23BE3DD8C();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3D3D0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE3D404 + 4 * byte_23BE63580[*v0]))(0x6C79745374786574, 0xE900000000000065);
}

uint64_t sub_23BE3D404()
{
  return 0x746867696577;
}

uint64_t sub_23BE3D418()
{
  return 0x6E6769736564;
}

uint64_t sub_23BE3D42C()
{
  return 0x63696C6F626D7973;
}

uint64_t sub_23BE3D450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE3E804(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE3D474()
{
  sub_23BE3DD04();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3D49C()
{
  sub_23BE3DD04();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3D4C4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE3D4F4 + 4 * byte_23BE63584[*v0]))(0x657A6953746E6F66, 0xE800000000000000);
}

uint64_t sub_23BE3D4F4()
{
  return 0x746867696577;
}

uint64_t sub_23BE3D508()
{
  return 0x6E6769736564;
}

uint64_t sub_23BE3D51C()
{
  return 0x63696C6F626D7973;
}

uint64_t sub_23BE3D540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE3E9DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE3D564()
{
  sub_23BE3DBB0();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3D58C()
{
  sub_23BE3DBB0();
  return sub_23BE5AF18();
}

uint64_t BrowseFontDescriptor.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v42 = a2;
  v31 = a4;
  v32 = a3;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8920);
  v34 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v38 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8928);
  v33 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v36 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8930);
  v9 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8938);
  v40 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE3DB6C();
  v15 = v14;
  sub_23BE5AF00();
  if (!a5)
  {
    v22 = v9;
    LOBYTE(v44) = 0;
    sub_23BE3DD8C();
    sub_23BE5ADF8();
    v23 = BYTE1(v42);
    LOBYTE(v44) = v42;
    v43 = 0;
    sub_23BE3DD48();
    v24 = v35;
    v25 = v41;
    sub_23BE5AE4C();
    if (!v25)
    {
      LOBYTE(v44) = v23 & 1;
      v43 = 1;
      sub_23BE3DC7C();
      sub_23BE5AE4C();
      v44 = v32;
      v43 = 2;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8968);
      sub_23BE3FC94(&qword_256AC8970, (uint64_t (*)(void))sub_23BE3DCC0, MEMORY[0x24BEE1700]);
      sub_23BE5AE4C();
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v15, v12);
  }
  if (a5 != 1)
  {
    LOBYTE(v44) = 2;
    sub_23BE3DBB0();
    v26 = v38;
    sub_23BE5ADF8();
    v44 = v42;
    v43 = 0;
    sub_23BE3DBF4();
    v27 = v39;
    v28 = v41;
    sub_23BE5AE4C();
    if (!v28)
    {
      v29 = BYTE1(v32);
      LOBYTE(v44) = v32;
      v43 = 1;
      sub_23BE3DC38();
      sub_23BE5AE4C();
      LOBYTE(v44) = v29 & 1;
      v43 = 2;
      sub_23BE3DC7C();
      sub_23BE5AE4C();
      v44 = v31;
      v43 = 3;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8968);
      sub_23BE3FC94(&qword_256AC8970, (uint64_t (*)(void))sub_23BE3DCC0, MEMORY[0x24BEE1700]);
      sub_23BE5AE4C();
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v27);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v15, v12);
  }
  LOBYTE(v44) = 1;
  sub_23BE3DD04();
  v16 = v36;
  v17 = v15;
  sub_23BE5ADF8();
  v18 = v42;
  LOBYTE(v44) = v42;
  v43 = 0;
  sub_23BE3DD48();
  v19 = v37;
  v20 = v41;
  sub_23BE5AE4C();
  if (!v20)
  {
    LOBYTE(v44) = BYTE1(v18);
    v43 = 1;
    sub_23BE3DC38();
    sub_23BE5AE4C();
    LOBYTE(v44) = BYTE2(v18) & 1;
    v43 = 2;
    sub_23BE3DC7C();
    sub_23BE5AE4C();
    v44 = v32;
    v43 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8968);
    sub_23BE3FC94(&qword_256AC8970, (uint64_t (*)(void))sub_23BE3DCC0, MEMORY[0x24BEE1700]);
    sub_23BE5AE4C();
  }
  (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v17, v12);
}

unint64_t sub_23BE3DB6C()
{
  unint64_t result;

  result = qword_256AC8940;
  if (!qword_256AC8940)
  {
    result = MEMORY[0x242612B20](&unk_23BE63AC4, &type metadata for BrowseFontDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8940);
  }
  return result;
}

unint64_t sub_23BE3DBB0()
{
  unint64_t result;

  result = qword_256AC8948;
  if (!qword_256AC8948)
  {
    result = MEMORY[0x242612B20](&unk_23BE63A74, &type metadata for BrowseFontDescriptor.SystemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8948);
  }
  return result;
}

unint64_t sub_23BE3DBF4()
{
  unint64_t result;

  result = qword_256AC8950;
  if (!qword_256AC8950)
  {
    result = MEMORY[0x242612B20](MEMORY[0x24BEE50C0], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&qword_256AC8950);
  }
  return result;
}

unint64_t sub_23BE3DC38()
{
  unint64_t result;

  result = qword_256AC8958;
  if (!qword_256AC8958)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontWeight, &type metadata for BrowseFontWeight);
    atomic_store(result, (unint64_t *)&qword_256AC8958);
  }
  return result;
}

unint64_t sub_23BE3DC7C()
{
  unint64_t result;

  result = qword_256AC8960;
  if (!qword_256AC8960)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontDesign, &type metadata for BrowseFontDesign);
    atomic_store(result, (unint64_t *)&qword_256AC8960);
  }
  return result;
}

unint64_t sub_23BE3DCC0()
{
  unint64_t result;

  result = qword_256AC8978;
  if (!qword_256AC8978)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontSymbolicTrait, &type metadata for BrowseFontSymbolicTrait);
    atomic_store(result, (unint64_t *)&qword_256AC8978);
  }
  return result;
}

unint64_t sub_23BE3DD04()
{
  unint64_t result;

  result = qword_256AC8980;
  if (!qword_256AC8980)
  {
    result = MEMORY[0x242612B20](&unk_23BE63A24, &type metadata for BrowseFontDescriptor.DynamicWithWeightOverrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8980);
  }
  return result;
}

unint64_t sub_23BE3DD48()
{
  unint64_t result;

  result = qword_256AC8988;
  if (!qword_256AC8988)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontTextStyle, &type metadata for BrowseFontTextStyle);
    atomic_store(result, (unint64_t *)&qword_256AC8988);
  }
  return result;
}

unint64_t sub_23BE3DD8C()
{
  unint64_t result;

  result = qword_256AC8990;
  if (!qword_256AC8990)
  {
    result = MEMORY[0x242612B20](&unk_23BE639D4, &type metadata for BrowseFontDescriptor.DynamicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8990);
  }
  return result;
}

_QWORD *BrowseFontDescriptor.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;

  result = sub_23BE3EBA8(a1);
  if (v1)
    return (_QWORD *)v3;
  return result;
}

_QWORD *sub_23BE3DDF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = sub_23BE3EBA8(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t sub_23BE3DE24(_QWORD *a1)
{
  uint64_t v1;

  return BrowseFontDescriptor.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t BrowseFontDescriptor.hash(into:)(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    if (a5 == 1)
    {
      sub_23BE5AEC4();
      BrowseFontTextStyle.rawValue.getter(a2);
      sub_23BE5AC9C();
      swift_bridgeObjectRelease();
      __asm { BR              X10 }
    }
    sub_23BE5AEC4();
    sub_23BE5AEDC();
    __asm { BR              X10 }
  }
  sub_23BE5AEC4();
  BrowseFontTextStyle.rawValue.getter(a2);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE036D0(a1, a3);
}

uint64_t BrowseFontDescriptor.hashValue.getter(__int16 a1, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE v9[72];

  sub_23BE5AEB8();
  BrowseFontDescriptor.hash(into:)((uint64_t)v9, a1, a2, a3, a4);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE3E19C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _BYTE v6[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *((_BYTE *)v0 + 24);
  sub_23BE5AEB8();
  BrowseFontDescriptor.hash(into:)((uint64_t)v6, v1, v2, v3, v4);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE3E1FC(uint64_t a1)
{
  uint64_t v1;

  return BrowseFontDescriptor.hash(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_23BE3E20C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _BYTE v6[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *((_BYTE *)v0 + 24);
  sub_23BE5AEB8();
  BrowseFontDescriptor.hash(into:)((uint64_t)v6, v1, v2, v3, v4);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE3E268(uint64_t a1, uint64_t a2)
{
  return _s15FitnessBrowsing20BrowseFontDescriptorO2eeoiySbAC_ACtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
}

uint64_t _s15FitnessBrowsing20BrowseFontDescriptorO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  int v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v9 = a5;
  v11 = a1;
  if (!a4)
  {
    if (a8)
      return 0;
    v16 = BrowseFontTextStyle.rawValue.getter(a1);
    v18 = v17;
    if (v16 == BrowseFontTextStyle.rawValue.getter(v9) && v18 == v19)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v29 = sub_23BE5AE58();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
        return 0;
    }
    if ((v11 & 0x100) != 0)
      v27 = 0x6465646E756F72;
    else
      v27 = 0x746C7561666564;
    v28 = (v9 & 0x100) == 0;
    goto LABEL_33;
  }
  if (a4 != 1)
  {
    if (a8 != 2)
      return 0;
    if (*(double *)&a1 != *(double *)&a5)
      return 0;
    sub_23BE46D48(a2);
    if ((v22 & 1) == 0)
      return 0;
    if ((a2 & 0x100) != 0)
      v23 = 0x6465646E756F72;
    else
      v23 = 0x746C7561666564;
    if ((a6 & 0x100) != 0)
      v24 = 0x6465646E756F72;
    else
      v24 = 0x746C7561666564;
    if (v23 == v24)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v34 = sub_23BE5AE58();
      swift_bridgeObjectRelease_n();
      if ((v34 & 1) == 0)
        return 0;
    }
    v32 = a3;
    v33 = a7;
    return sub_23BE55EB0(v32, v33);
  }
  if (a8 == 1)
  {
    v12 = BrowseFontTextStyle.rawValue.getter(a1);
    v14 = v13;
    if (v12 == BrowseFontTextStyle.rawValue.getter(v9) && v14 == v15)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v25 = sub_23BE5AE58();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
        return 0;
    }
    sub_23BE46D48(SBYTE1(v11));
    if ((v26 & 1) == 0)
      return 0;
    if ((*(_QWORD *)&v11 & 0x10000) != 0)
      v27 = 0x6465646E756F72;
    else
      v27 = 0x746C7561666564;
    v28 = (*(_QWORD *)&v9 & 0x10000) == 0;
LABEL_33:
    if (v28)
      v30 = 0x746C7561666564;
    else
      v30 = 0x6465646E756F72;
    if (v27 == v30)
    {
      swift_bridgeObjectRelease_n();
LABEL_39:
      v32 = a2;
      v33 = a6;
      return sub_23BE55EB0(v32, v33);
    }
    v31 = sub_23BE5AE58();
    swift_bridgeObjectRelease_n();
    if ((v31 & 1) != 0)
      goto LABEL_39;
  }
  return 0;
}

uint64_t sub_23BE3E544(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x63696D616E7964 && a2 == 0xE700000000000000;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000023BE66550 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D6574737973 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BE3E688(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C79745374786574 && a2 == 0xE900000000000065;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6769736564 && a2 == 0xE600000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x63696C6F626D7973 && a2 == 0xEE00737469617254)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BE3E804(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C79745374786574 && a2 == 0xE900000000000065;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746867696577 && a2 == 0xE600000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6769736564 && a2 == 0xE600000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x63696C6F626D7973 && a2 == 0xEE00737469617254)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23BE3E9DC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x657A6953746E6F66 && a2 == 0xE800000000000000;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746867696577 && a2 == 0xE600000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6769736564 && a2 == 0xE600000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x63696C6F626D7973 && a2 == 0xEE00737469617254)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

_QWORD *sub_23BE3EBA8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[12];
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  _QWORD *v51;
  _BYTE *v52;
  char v53;
  uint64_t v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  _QWORD *v57;

  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8A00);
  v45 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v50 = &v42[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8A08);
  v48 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v49 = (unint64_t)&v42[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8A10);
  v5 = *(_BYTE **)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8A18);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v42[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = a1[3];
  v51 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_23BE3DB6C();
  v13 = v52;
  sub_23BE5AEF4();
  if (!v13)
  {
    v52 = v5;
    v14 = v4;
    v15 = v49;
    v16 = v50;
    v44 = v9;
    v17 = sub_23BE5ADEC();
    v18 = (_BYTE *)v8;
    if (*(_QWORD *)(v17 + 16) == 1)
    {
      v19 = *(unsigned __int8 *)(v17 + 32);
      if (*(_BYTE *)(v17 + 32))
      {
        if (v19 == 1)
        {
          v43 = 1;
          LOBYTE(v57) = 1;
          sub_23BE3DD04();
          v20 = v15;
          v21 = v18;
          sub_23BE5AD80();
          LOBYTE(v57) = 0;
          sub_23BE3FD40();
          v22 = v46;
          sub_23BE5ADE0();
          v31 = v20;
          v32 = v54;
          LOBYTE(v57) = 1;
          sub_23BE3FC0C();
          sub_23BE5ADE0();
          v33 = v56;
          LOBYTE(v57) = 2;
          sub_23BE3FC50();
          sub_23BE5ADE0();
          LODWORD(v52) = v55;
          __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8968);
          v53 = 3;
          sub_23BE3FC94(&qword_256AC8A38, (uint64_t (*)(void))sub_23BE3FCFC, MEMORY[0x24BEE1720]);
          sub_23BE5ADE0();
          (*(void (**)(unint64_t, uint64_t))(v48 + 8))(v31, v22);
          swift_bridgeObjectRelease();
          (*(void (**)(_BYTE *, _BYTE *))(v44 + 8))(v11, v21);
          v41 = 0x10000;
          if (!(_DWORD)v52)
            v41 = 0;
          v7 = (_QWORD *)(v32 | (v33 << 8) | v41);
        }
        else
        {
          LOBYTE(v57) = 2;
          sub_23BE3DBB0();
          v28 = v16;
          v29 = v18;
          sub_23BE5AD80();
          LOBYTE(v54) = 0;
          sub_23BE3FBC8();
          v30 = v47;
          sub_23BE5ADE0();
          v36 = v28;
          v7 = v57;
          LOBYTE(v54) = 1;
          sub_23BE3FC0C();
          sub_23BE5ADE0();
          v37 = v45;
          v43 = v19;
          LOBYTE(v54) = 2;
          sub_23BE3FC50();
          sub_23BE5ADE0();
          v52 = v11;
          LODWORD(v49) = v55;
          __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8968);
          v53 = 3;
          sub_23BE3FC94(&qword_256AC8A38, (uint64_t (*)(void))sub_23BE3FCFC, MEMORY[0x24BEE1720]);
          sub_23BE5ADE0();
          (*(void (**)(_BYTE *, uint64_t))(v37 + 8))(v36, v30);
          swift_bridgeObjectRelease();
          (*(void (**)(_BYTE *, _BYTE *))(v44 + 8))(v52, v29);
        }
      }
      else
      {
        LOBYTE(v57) = 0;
        sub_23BE3DD8C();
        v26 = v7;
        sub_23BE5AD80();
        LOBYTE(v57) = 0;
        sub_23BE3FD40();
        v27 = v14;
        sub_23BE5ADE0();
        v50 = v18;
        v34 = v54;
        LOBYTE(v57) = 1;
        sub_23BE3FC50();
        sub_23BE5ADE0();
        v35 = v52;
        v49 = v34;
        v43 = v19;
        v39 = v56;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8968);
        v55 = 2;
        sub_23BE3FC94(&qword_256AC8A38, (uint64_t (*)(void))sub_23BE3FCFC, MEMORY[0x24BEE1720]);
        sub_23BE5ADE0();
        (*((void (**)(_QWORD *, uint64_t))v35 + 1))(v26, v27);
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, _BYTE *))(v44 + 8))(v11, v50);
        v40 = 256;
        if (!v39)
          v40 = 0;
        v7 = (_QWORD *)(v40 | v49);
      }
    }
    else
    {
      v23 = v11;
      v24 = sub_23BE5AD68();
      swift_allocError();
      v7 = v25;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
      *v7 = &type metadata for BrowseFontDescriptor;
      sub_23BE5AD8C();
      sub_23BE5AD5C();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v7, *MEMORY[0x24BEE26D0], v24);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v44 + 8))(v23, v8);
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  return v7;
}

unint64_t sub_23BE3F478()
{
  unint64_t result;

  result = qword_256AC8998;
  if (!qword_256AC8998)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontDescriptor, &type metadata for BrowseFontDescriptor);
    atomic_store(result, (unint64_t *)&qword_256AC8998);
  }
  return result;
}

uint64_t destroy for BrowseFontDescriptor(uint64_t a1)
{
  return sub_23BE02A4C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for BrowseFontDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_23BE01100(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for BrowseFontDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_23BE01100(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_23BE02A4C(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BrowseFontDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_23BE02A4C(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseFontDescriptor(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseFontDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_23BE3F688(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_23BE3F690(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BrowseFontDescriptor()
{
  return &type metadata for BrowseFontDescriptor;
}

ValueMetadata *type metadata accessor for BrowseFontDescriptor.CodingKeys()
{
  return &type metadata for BrowseFontDescriptor.CodingKeys;
}

uint64_t _s15FitnessBrowsing20BrowseFontDescriptorO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE3F708 + 4 * byte_23BE6359F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE3F73C + 4 * byte_23BE6359A[v4]))();
}

uint64_t sub_23BE3F73C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE3F744(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE3F74CLL);
  return result;
}

uint64_t sub_23BE3F758(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE3F760);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE3F764(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE3F76C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseFontDescriptor.DynamicCodingKeys()
{
  return &type metadata for BrowseFontDescriptor.DynamicCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseFontDescriptor.DynamicWithWeightOverrideCodingKeys()
{
  return &type metadata for BrowseFontDescriptor.DynamicWithWeightOverrideCodingKeys;
}

uint64_t _s15FitnessBrowsing20BrowseFontDescriptorO35DynamicWithWeightOverrideCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BE3F7E8 + 4 * byte_23BE635A9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BE3F81C + 4 * byte_23BE635A4[v4]))();
}

uint64_t sub_23BE3F81C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE3F824(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE3F82CLL);
  return result;
}

uint64_t sub_23BE3F838(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE3F840);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BE3F844(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE3F84C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseFontDescriptor.SystemCodingKeys()
{
  return &type metadata for BrowseFontDescriptor.SystemCodingKeys;
}

unint64_t sub_23BE3F86C()
{
  unint64_t result;

  result = qword_256AC89A0;
  if (!qword_256AC89A0)
  {
    result = MEMORY[0x242612B20](&unk_23BE63784, &type metadata for BrowseFontDescriptor.SystemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC89A0);
  }
  return result;
}

unint64_t sub_23BE3F8B4()
{
  unint64_t result;

  result = qword_256AC89A8;
  if (!qword_256AC89A8)
  {
    result = MEMORY[0x242612B20](&unk_23BE6383C, &type metadata for BrowseFontDescriptor.DynamicWithWeightOverrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC89A8);
  }
  return result;
}

unint64_t sub_23BE3F8FC()
{
  unint64_t result;

  result = qword_256AC89B0;
  if (!qword_256AC89B0)
  {
    result = MEMORY[0x242612B20](&unk_23BE638F4, &type metadata for BrowseFontDescriptor.DynamicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC89B0);
  }
  return result;
}

unint64_t sub_23BE3F944()
{
  unint64_t result;

  result = qword_256AC89B8;
  if (!qword_256AC89B8)
  {
    result = MEMORY[0x242612B20](&unk_23BE639AC, &type metadata for BrowseFontDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC89B8);
  }
  return result;
}

unint64_t sub_23BE3F98C()
{
  unint64_t result;

  result = qword_256AC89C0;
  if (!qword_256AC89C0)
  {
    result = MEMORY[0x242612B20](&unk_23BE63864, &type metadata for BrowseFontDescriptor.DynamicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC89C0);
  }
  return result;
}

unint64_t sub_23BE3F9D4()
{
  unint64_t result;

  result = qword_256AC89C8;
  if (!qword_256AC89C8)
  {
    result = MEMORY[0x242612B20](&unk_23BE6388C, &type metadata for BrowseFontDescriptor.DynamicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC89C8);
  }
  return result;
}

unint64_t sub_23BE3FA1C()
{
  unint64_t result;

  result = qword_256AC89D0;
  if (!qword_256AC89D0)
  {
    result = MEMORY[0x242612B20](&unk_23BE637AC, &type metadata for BrowseFontDescriptor.DynamicWithWeightOverrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC89D0);
  }
  return result;
}

unint64_t sub_23BE3FA64()
{
  unint64_t result;

  result = qword_256AC89D8;
  if (!qword_256AC89D8)
  {
    result = MEMORY[0x242612B20](&unk_23BE637D4, &type metadata for BrowseFontDescriptor.DynamicWithWeightOverrideCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC89D8);
  }
  return result;
}

unint64_t sub_23BE3FAAC()
{
  unint64_t result;

  result = qword_256AC89E0;
  if (!qword_256AC89E0)
  {
    result = MEMORY[0x242612B20](&unk_23BE636F4, &type metadata for BrowseFontDescriptor.SystemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC89E0);
  }
  return result;
}

unint64_t sub_23BE3FAF4()
{
  unint64_t result;

  result = qword_256AC89E8;
  if (!qword_256AC89E8)
  {
    result = MEMORY[0x242612B20](&unk_23BE6371C, &type metadata for BrowseFontDescriptor.SystemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC89E8);
  }
  return result;
}

unint64_t sub_23BE3FB3C()
{
  unint64_t result;

  result = qword_256AC89F0;
  if (!qword_256AC89F0)
  {
    result = MEMORY[0x242612B20](&unk_23BE6391C, &type metadata for BrowseFontDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC89F0);
  }
  return result;
}

unint64_t sub_23BE3FB84()
{
  unint64_t result;

  result = qword_256AC89F8;
  if (!qword_256AC89F8)
  {
    result = MEMORY[0x242612B20](&unk_23BE63944, &type metadata for BrowseFontDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC89F8);
  }
  return result;
}

unint64_t sub_23BE3FBC8()
{
  unint64_t result;

  result = qword_256AC8A20;
  if (!qword_256AC8A20)
  {
    result = MEMORY[0x242612B20](MEMORY[0x24BEE50E8], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&qword_256AC8A20);
  }
  return result;
}

unint64_t sub_23BE3FC0C()
{
  unint64_t result;

  result = qword_256AC8A28;
  if (!qword_256AC8A28)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontWeight, &type metadata for BrowseFontWeight);
    atomic_store(result, (unint64_t *)&qword_256AC8A28);
  }
  return result;
}

unint64_t sub_23BE3FC50()
{
  unint64_t result;

  result = qword_256AC8A30;
  if (!qword_256AC8A30)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontDesign, &type metadata for BrowseFontDesign);
    atomic_store(result, (unint64_t *)&qword_256AC8A30);
  }
  return result;
}

uint64_t sub_23BE3FC94(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC8968);
    v8 = a2();
    result = MEMORY[0x242612B20](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BE3FCFC()
{
  unint64_t result;

  result = qword_256AC8A40;
  if (!qword_256AC8A40)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontSymbolicTrait, &type metadata for BrowseFontSymbolicTrait);
    atomic_store(result, (unint64_t *)&qword_256AC8A40);
  }
  return result;
}

unint64_t sub_23BE3FD40()
{
  unint64_t result;

  result = qword_256AC8A48;
  if (!qword_256AC8A48)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseFontTextStyle, &type metadata for BrowseFontTextStyle);
    atomic_store(result, (unint64_t *)&qword_256AC8A48);
  }
  return result;
}

unint64_t sub_23BE3FD88()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 != 1)
    v1 = 0x6169726F74696465;
  if (*v0)
    return v1;
  else
    return 0xD000000000000019;
}

uint64_t sub_23BE3FDF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE42024(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE3FE1C()
{
  sub_23BE41438();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3FE44()
{
  sub_23BE41438();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3FE6C()
{
  return 0x696669746E656469;
}

uint64_t sub_23BE3FE8C()
{
  sub_23BE41504();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3FEB4()
{
  sub_23BE41504();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3FEDC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x5379616C70736964;
  if (*v0 != 1)
    v1 = 0x656C746974;
  if (*v0)
    return v1;
  else
    return 0x696669746E656469;
}

uint64_t sub_23BE3FF40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE42194(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE3FF64()
{
  sub_23BE414C0();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE3FF8C()
{
  sub_23BE414C0();
  return sub_23BE5AF18();
}

uint64_t sub_23BE3FFB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23BE5AE58();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23BE40054()
{
  sub_23BE4147C();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE4007C()
{
  sub_23BE4147C();
  return sub_23BE5AF18();
}

uint64_t BrowseIdentifier.underlyingValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = v0;
  v2 = type metadata accessor for BrowseIdentifier();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE413F4(v1, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload() != 1)
    return *(_QWORD *)v4;
  v5 = *(_QWORD *)v4;
  v6 = &v4[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88) + 64)];
  v7 = sub_23BE5A678();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return v5;
}

uint64_t BrowseIdentifier.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;

  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8A50);
  v33 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v35 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8A58);
  v34 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v37 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_23BE5A678();
  v40 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v39 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8A60);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BrowseIdentifier();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8A68);
  v42 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE41438();
  v44 = v13;
  sub_23BE5AF00();
  sub_23BE413F4(v46, (uint64_t)v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      LODWORD(v46) = v11[16];
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88);
      v17 = v39;
      v16 = v40;
      v18 = v38;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v39, &v11[*(int *)(v15 + 64)], v38);
      v52 = 1;
      sub_23BE414C0();
      v19 = v37;
      v20 = v44;
      v21 = v45;
      sub_23BE5ADF8();
      v51 = 0;
      v22 = v43;
      sub_23BE5AE28();
      swift_bridgeObjectRelease();
      if (v22)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v41);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v17, v18);
      }
      else
      {
        v50 = v46;
        v49 = 1;
        sub_23BE01D74();
        v30 = v41;
        sub_23BE5AE4C();
        v48 = 2;
        sub_23BDF23E4(&qword_256AC6B10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5B8]);
        v31 = v39;
        sub_23BE5AE4C();
        v32 = v40;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v30);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v18);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v20, v21);
    }
    else
    {
      v53 = 2;
      sub_23BE4147C();
      v26 = v35;
      v28 = v44;
      v27 = v45;
      sub_23BE5ADF8();
      v29 = v36;
      sub_23BE5AE28();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v26, v29);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v28, v27);
    }
  }
  else
  {
    v47 = 0;
    sub_23BE41504();
    v24 = v44;
    v23 = v45;
    sub_23BE5ADF8();
    sub_23BE5AE28();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v24, v23);
  }
}

uint64_t BrowseIdentifier.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;

  v58 = a2;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8A90);
  v60 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v64 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8A98);
  v61 = *(_QWORD *)(v68 - 8);
  MEMORY[0x24BDAC7A8](v68);
  v65 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8AA0);
  v59 = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62);
  v67 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8AA8);
  v66 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BrowseIdentifier();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t *)((char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (uint64_t *)((char *)&v54 - v13);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (uint64_t *)((char *)&v54 - v16);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v54 - v18;
  v20 = a1[3];
  v70 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  sub_23BE41438();
  v21 = v71;
  sub_23BE5AEF4();
  if (v21)
    goto LABEL_9;
  v54 = v17;
  v55 = v11;
  v56 = v14;
  v57 = v19;
  v22 = v67;
  v23 = v68;
  v71 = v8;
  v24 = v66;
  v25 = v69;
  v26 = sub_23BE5ADEC();
  v27 = v7;
  if (*(_QWORD *)(v26 + 16) != 1)
  {
    v30 = v25;
    v31 = sub_23BE5AD68();
    swift_allocError();
    v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v33 = v71;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, *MEMORY[0x24BEE26D0], v31);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v30);
LABEL_9:
    v40 = (uint64_t)v70;
    return __swift_destroy_boxed_opaque_existential_1(v40);
  }
  v28 = v24;
  if (*(_BYTE *)(v26 + 32))
  {
    if (*(_BYTE *)(v26 + 32) == 1)
    {
      v76 = 1;
      sub_23BE414C0();
      sub_23BE5AD80();
      v75 = 0;
      v29 = sub_23BE5ADBC();
      v42 = (uint64_t)v56;
      *v56 = v29;
      *(_QWORD *)(v42 + 8) = v43;
      v74 = 1;
      sub_23BE02BA0();
      v44 = v65;
      sub_23BE5ADE0();
      v67 = (char *)(v42 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88) + 64));
      sub_23BE5A678();
      v73 = 2;
      sub_23BDF23E4(&qword_256AC6B88, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5D0]);
      sub_23BE5ADE0();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v44, v23);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v69);
    }
    else
    {
      v77 = 2;
      sub_23BE4147C();
      v37 = v64;
      sub_23BE5AD80();
      v38 = v25;
      v39 = v63;
      v48 = sub_23BE5ADBC();
      v50 = v49;
      (*(void (**)(char *, uint64_t))(v60 + 8))(v37, v39);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v38);
      v42 = (uint64_t)v55;
      *v55 = v48;
      *(_QWORD *)(v42 + 8) = v50;
    }
  }
  else
  {
    v72 = 0;
    sub_23BE41504();
    v34 = v22;
    sub_23BE5AD80();
    v35 = v27;
    v36 = v62;
    v45 = sub_23BE5ADBC();
    v47 = v46;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v34, v36);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v35, v25);
    v42 = (uint64_t)v54;
    *v54 = v45;
    *(_QWORD *)(v42 + 8) = v47;
  }
  swift_storeEnumTagMultiPayload();
  v51 = (uint64_t)v70;
  v53 = (uint64_t)v57;
  v52 = v58;
  sub_23BE41548(v42, (uint64_t)v57);
  sub_23BE41548(v53, v52);
  v40 = v51;
  return __swift_destroy_boxed_opaque_existential_1(v40);
}

uint64_t sub_23BE40D40@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseIdentifier.init(from:)(a1, a2);
}

uint64_t sub_23BE40D54(_QWORD *a1)
{
  return BrowseIdentifier.encode(to:)(a1);
}

uint64_t BrowseIdentifier.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v11;

  v1 = sub_23BE5A678();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BrowseIdentifier();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE413F4(v0, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = v7[16];
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88);
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, &v7[*(int *)(v9 + 64)], v1);
    sub_23BE5AEC4();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
    BrowseDisplayStyle.rawValue.getter(v8);
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
    sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
    sub_23BE5AC30();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    sub_23BE5AEC4();
    sub_23BE5AC9C();
    return swift_bridgeObjectRelease();
  }
}

uint64_t BrowseIdentifier.hashValue.getter()
{
  sub_23BE5AEB8();
  BrowseIdentifier.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE40F5C()
{
  sub_23BE5AEB8();
  BrowseIdentifier.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE40F9C()
{
  sub_23BE5AEB8();
  BrowseIdentifier.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing16BrowseIdentifierO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  _BYTE *v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  void (*v32)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v33;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  void (*v47)(_BYTE *, uint64_t);
  _BYTE *v49;
  void (*v50)(_BYTE *, uint64_t);
  _BYTE v51[4];
  int v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;

  v4 = sub_23BE5A678();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v54 = &v51[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v55 = &v51[-v8];
  v9 = type metadata accessor for BrowseIdentifier();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)&v51[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = &v51[-v14];
  MEMORY[0x24BDAC7A8](v13);
  v17 = (uint64_t *)&v51[-v16];
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8BC0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = &v51[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = (uint64_t)&v21[*(int *)(v19 + 48)];
  sub_23BE413F4(a1, (uint64_t)v21);
  sub_23BE413F4(a2, v22);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23BE413F4((uint64_t)v21, (uint64_t)v15);
      v24 = *((_QWORD *)v15 + 1);
      v53 = *(_QWORD *)v15;
      v25 = v15[16];
      v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88) + 64);
      v27 = &v15[v26];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v28 = v25;
        v30 = *(_QWORD *)v22;
        v29 = *(_QWORD *)(v22 + 8);
        v52 = *(unsigned __int8 *)(v22 + 16);
        v31 = (_BYTE *)(v22 + v26);
        v32 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32);
        v32(v55, v27, v4);
        v33 = v54;
        v32(v54, v31, v4);
        if (v53 == v30 && v24 == v29)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v35 = sub_23BE5AE58();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v35 & 1) == 0)
            goto LABEL_29;
        }
        v41 = BrowseDisplayStyle.rawValue.getter(v28);
        v43 = v42;
        if (v41 == BrowseDisplayStyle.rawValue.getter(v52) && v43 == v44)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v46 = sub_23BE5AE58();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v46 & 1) == 0)
          {
LABEL_29:
            v47 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
            v47(v33, v4);
            v47(v55, v4);
LABEL_30:
            sub_23BE418F0((uint64_t)v21);
            goto LABEL_31;
          }
        }
        v49 = v55;
        v40 = sub_23BE5A66C();
        v50 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
        v50(v33, v4);
        v50(v49, v4);
        sub_23BE418F0((uint64_t)v21);
        return v40 & 1;
      }
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(&v15[v26], v4);
LABEL_20:
      swift_bridgeObjectRelease();
      sub_23BE42304((uint64_t)v21);
LABEL_31:
      v40 = 0;
      return v40 & 1;
    }
    sub_23BE413F4((uint64_t)v21, (uint64_t)v12);
    v36 = *v12;
    v37 = v12[1];
    if (swift_getEnumCaseMultiPayload() != 2)
      goto LABEL_20;
  }
  else
  {
    sub_23BE413F4((uint64_t)v21, (uint64_t)v17);
    v36 = *v17;
    v37 = v17[1];
    if (swift_getEnumCaseMultiPayload())
      goto LABEL_20;
  }
  if (v36 == *(_QWORD *)v22 && v37 == *(_QWORD *)(v22 + 8))
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v39 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v39 & 1) == 0)
      goto LABEL_30;
  }
  sub_23BE418F0((uint64_t)v21);
  v40 = 1;
  return v40 & 1;
}

uint64_t type metadata accessor for BrowseIdentifier()
{
  uint64_t result;

  result = qword_256AC8B28;
  if (!qword_256AC8B28)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23BE413F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BE41438()
{
  unint64_t result;

  result = qword_256AC8A70;
  if (!qword_256AC8A70)
  {
    result = MEMORY[0x242612B20](&unk_23BE64088, &type metadata for BrowseIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8A70);
  }
  return result;
}

unint64_t sub_23BE4147C()
{
  unint64_t result;

  result = qword_256AC8A78;
  if (!qword_256AC8A78)
  {
    result = MEMORY[0x242612B20](&unk_23BE64038, &type metadata for BrowseIdentifier.EditorialPageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8A78);
  }
  return result;
}

unint64_t sub_23BE414C0()
{
  unint64_t result;

  result = qword_256AC8A80;
  if (!qword_256AC8A80)
  {
    result = MEMORY[0x242612B20](&unk_23BE63FE8, &type metadata for BrowseIdentifier.EditorialGalleryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8A80);
  }
  return result;
}

unint64_t sub_23BE41504()
{
  unint64_t result;

  result = qword_256AC8A88;
  if (!qword_256AC8A88)
  {
    result = MEMORY[0x242612B20](&unk_23BE63F98, &type metadata for BrowseIdentifier.EditorialCollectionDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8A88);
  }
  return result;
}

uint64_t sub_23BE41548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BE4158C()
{
  return sub_23BDF23E4(&qword_256AC8AB0, (uint64_t (*)(uint64_t))type metadata accessor for BrowseIdentifier, (uint64_t)&protocol conformance descriptor for BrowseIdentifier);
}

uint64_t initializeBufferWithCopyOfBuffer for BrowseIdentifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      swift_bridgeObjectRetain();
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88) + 64);
      v8 = a1 + v7;
      v9 = (uint64_t)a2 + v7;
      v10 = sub_23BE5A678();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      v12 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v12;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for BrowseIdentifier(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
    return swift_bridgeObjectRelease();
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v3 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88) + 64);
  v4 = sub_23BE5A678();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

uint64_t initializeWithCopy for BrowseIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    swift_bridgeObjectRetain();
    v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88) + 64);
    v6 = a1 + v5;
    v7 = a2 + v5;
    v8 = sub_23BE5A678();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v9;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for BrowseIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_23BE418F0(a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      swift_bridgeObjectRetain();
      v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88) + 64);
      v5 = a1 + v4;
      v6 = a2 + v4;
      v7 = sub_23BE5A678();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23BE418F0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BrowseIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for BrowseIdentifier(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[16] = a2[16];
    v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88) + 64);
    v7 = &a1[v6];
    v8 = &a2[v6];
    v9 = sub_23BE5A678();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for BrowseIdentifier(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_23BE418F0((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D88) + 64);
      v7 = &a1[v6];
      v8 = &a2[v6];
      v9 = sub_23BE5A678();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_23BE41AA4()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  void *v3;
  char *v4;
  void *v5;

  v3 = &unk_23BE63C08;
  result = sub_23BE5A678();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v4 = &v2;
    v5 = &unk_23BE63C08;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for BrowseIdentifier.CodingKeys()
{
  return &type metadata for BrowseIdentifier.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowseIdentifier.EditorialCollectionDetailCodingKeys()
{
  return &type metadata for BrowseIdentifier.EditorialCollectionDetailCodingKeys;
}

uint64_t _s15FitnessBrowsing16BrowseIdentifierO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE41BA8 + 4 * byte_23BE63B25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE41BDC + 4 * byte_23BE63B20[v4]))();
}

uint64_t sub_23BE41BDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE41BE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE41BECLL);
  return result;
}

uint64_t sub_23BE41BF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE41C00);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE41C04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE41C0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseIdentifier.EditorialGalleryCodingKeys()
{
  return &type metadata for BrowseIdentifier.EditorialGalleryCodingKeys;
}

uint64_t _s15FitnessBrowsing16BrowseIdentifierO35EditorialCollectionDetailCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BE41C68 + 4 * byte_23BE63B2A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BE41C88 + 4 * byte_23BE63B2F[v4]))();
}

_BYTE *sub_23BE41C68(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BE41C88(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE41C90(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE41C98(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE41CA0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE41CA8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BrowseIdentifier.EditorialPageCodingKeys()
{
  return &type metadata for BrowseIdentifier.EditorialPageCodingKeys;
}

unint64_t sub_23BE41CC8()
{
  unint64_t result;

  result = qword_256AC8B60;
  if (!qword_256AC8B60)
  {
    result = MEMORY[0x242612B20](&unk_23BE63D48, &type metadata for BrowseIdentifier.EditorialPageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8B60);
  }
  return result;
}

unint64_t sub_23BE41D10()
{
  unint64_t result;

  result = qword_256AC8B68;
  if (!qword_256AC8B68)
  {
    result = MEMORY[0x242612B20](&unk_23BE63E00, &type metadata for BrowseIdentifier.EditorialGalleryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8B68);
  }
  return result;
}

unint64_t sub_23BE41D58()
{
  unint64_t result;

  result = qword_256AC8B70;
  if (!qword_256AC8B70)
  {
    result = MEMORY[0x242612B20](&unk_23BE63EB8, &type metadata for BrowseIdentifier.EditorialCollectionDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8B70);
  }
  return result;
}

unint64_t sub_23BE41DA0()
{
  unint64_t result;

  result = qword_256AC8B78;
  if (!qword_256AC8B78)
  {
    result = MEMORY[0x242612B20](&unk_23BE63F70, &type metadata for BrowseIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8B78);
  }
  return result;
}

unint64_t sub_23BE41DE8()
{
  unint64_t result;

  result = qword_256AC8B80;
  if (!qword_256AC8B80)
  {
    result = MEMORY[0x242612B20](&unk_23BE63E28, &type metadata for BrowseIdentifier.EditorialCollectionDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8B80);
  }
  return result;
}

unint64_t sub_23BE41E30()
{
  unint64_t result;

  result = qword_256AC8B88;
  if (!qword_256AC8B88)
  {
    result = MEMORY[0x242612B20](&unk_23BE63E50, &type metadata for BrowseIdentifier.EditorialCollectionDetailCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8B88);
  }
  return result;
}

unint64_t sub_23BE41E78()
{
  unint64_t result;

  result = qword_256AC8B90;
  if (!qword_256AC8B90)
  {
    result = MEMORY[0x242612B20](&unk_23BE63D70, &type metadata for BrowseIdentifier.EditorialGalleryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8B90);
  }
  return result;
}

unint64_t sub_23BE41EC0()
{
  unint64_t result;

  result = qword_256AC8B98;
  if (!qword_256AC8B98)
  {
    result = MEMORY[0x242612B20](&unk_23BE63D98, &type metadata for BrowseIdentifier.EditorialGalleryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8B98);
  }
  return result;
}

unint64_t sub_23BE41F08()
{
  unint64_t result;

  result = qword_256AC8BA0;
  if (!qword_256AC8BA0)
  {
    result = MEMORY[0x242612B20](&unk_23BE63CB8, &type metadata for BrowseIdentifier.EditorialPageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8BA0);
  }
  return result;
}

unint64_t sub_23BE41F50()
{
  unint64_t result;

  result = qword_256AC8BA8;
  if (!qword_256AC8BA8)
  {
    result = MEMORY[0x242612B20](&unk_23BE63CE0, &type metadata for BrowseIdentifier.EditorialPageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8BA8);
  }
  return result;
}

unint64_t sub_23BE41F98()
{
  unint64_t result;

  result = qword_256AC8BB0;
  if (!qword_256AC8BB0)
  {
    result = MEMORY[0x242612B20](&unk_23BE63EE0, &type metadata for BrowseIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8BB0);
  }
  return result;
}

unint64_t sub_23BE41FE0()
{
  unint64_t result;

  result = qword_256AC8BB8;
  if (!qword_256AC8BB8)
  {
    result = MEMORY[0x242612B20](&unk_23BE63F08, &type metadata for BrowseIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8BB8);
  }
  return result;
}

uint64_t sub_23BE42024(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000019 && a2 == 0x800000023BE664C0 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023BE664E0 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6169726F74696465 && a2 == 0xED0000656761506CLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BE42194(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5379616C70736964 && a2 == 0xEC000000656C7974 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BE42304(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8BC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t BrowseItemReferenceType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE42388 + 4 * byte_23BE640E0[a1]))(0x6169726F74696465, 0xEF73647261632D6CLL);
}

uint64_t sub_23BE4239C()
{
  return 0x7974696C61646F6DLL;
}

uint64_t sub_23BE423B4()
{
  return 0x7473696C79616C70;
}

uint64_t sub_23BE423CC()
{
  return 0x6D6172676F7270;
}

uint64_t sub_23BE423E4()
{
  return 0x2D72656E69617274;
}

uint64_t sub_23BE42404()
{
  return 0x72656E69617274;
}

uint64_t sub_23BE4241C()
{
  return 0x65486C6C65737075;
}

uint64_t sub_23BE4243C()
{
  return 0x74756F6B726F77;
}

uint64_t sub_23BE42454(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = BrowseItemReferenceType.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == BrowseItemReferenceType.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_23BE5AE58();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23BE424DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s15FitnessBrowsing23BrowseItemReferenceTypeO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_23BE42508@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = BrowseItemReferenceType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_23BE42530()
{
  sub_23BE42830();
  return sub_23BE5ACB4();
}

uint64_t sub_23BE4258C()
{
  sub_23BE42830();
  return sub_23BE5ACA8();
}

uint64_t sub_23BE425D8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23BE5AEB8();
  BrowseItemReferenceType.rawValue.getter(v1);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE42638()
{
  unsigned __int8 *v0;

  BrowseItemReferenceType.rawValue.getter(*v0);
  sub_23BE5AC9C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BE42678()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23BE5AEB8();
  BrowseItemReferenceType.rawValue.getter(v1);
  sub_23BE5AC9C();
  swift_bridgeObjectRelease();
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing23BrowseItemReferenceTypeO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_23BE5AD74();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

unint64_t sub_23BE42720()
{
  unint64_t result;

  result = qword_256AC8BC8;
  if (!qword_256AC8BC8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseItemReferenceType, &type metadata for BrowseItemReferenceType);
    atomic_store(result, (unint64_t *)&qword_256AC8BC8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrowseItemReferenceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23BE427B0 + 4 * byte_23BE640EE[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23BE427E4 + 4 * byte_23BE640E9[v4]))();
}

uint64_t sub_23BE427E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE427EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE427F4);
  return result;
}

uint64_t sub_23BE42800(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE42808);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23BE4280C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE42814(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseItemReferenceType()
{
  return &type metadata for BrowseItemReferenceType;
}

unint64_t sub_23BE42830()
{
  unint64_t result;

  result = qword_256AC8BD0;
  if (!qword_256AC8BD0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseItemReferenceType, &type metadata for BrowseItemReferenceType);
    atomic_store(result, (unint64_t *)&qword_256AC8BD0);
  }
  return result;
}

uint64_t BrowseLoadState.preferredInsetBehavior.getter()
{
  uint64_t v0;
  uint64_t State;
  uint64_t v2;
  char *v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t (*v6)();
  char v7;
  uint64_t v9;

  State = type metadata accessor for BrowseLoadState();
  MEMORY[0x24BDAC7A8](State);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE43FCC(v0, (uint64_t)v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = 0;
  if ((EnumCaseMultiPayload - 2) >= 2)
  {
    if (EnumCaseMultiPayload)
    {
      v7 = v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA8) + 48)];
      swift_bridgeObjectRelease();
      v5 = v7 & 1;
      v6 = type metadata accessor for BrowseContent;
    }
    else
    {
      v6 = type metadata accessor for BrowseLoadState;
    }
    sub_23BDF2468((uint64_t)v3, (uint64_t (*)(_QWORD))v6);
  }
  return v5;
}

uint64_t sub_23BE42944()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE4296C + 4 * byte_23BE64210[*v0]))(1701602409, 0xE400000000000000);
}

uint64_t sub_23BE4296C()
{
  return 0x6F5464656C696166;
}

uint64_t sub_23BE4298C()
{
  return 0x64656863746566;
}

uint64_t sub_23BE429A4()
{
  return 0x676E696863746566;
}

uint64_t sub_23BE429BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE45C4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE429E0()
{
  sub_23BE44010();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE42A08()
{
  sub_23BE44010();
  return sub_23BE5AF18();
}

uint64_t sub_23BE42A30()
{
  return 0x726F727265;
}

uint64_t sub_23BE42A44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23BE5AE58();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23BE42AD0()
{
  sub_23BE440DC();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE42AF8()
{
  sub_23BE440DC();
  return sub_23BE5AF18();
}

uint64_t sub_23BE42B20()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000016;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x746E65746E6F63;
}

uint64_t sub_23BE42B88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE45E0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE42BAC()
{
  sub_23BE44098();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE42BD4()
{
  sub_23BE44098();
  return sub_23BE5AF18();
}

uint64_t sub_23BE42BFC()
{
  sub_23BE44054();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE42C24()
{
  sub_23BE44054();
  return sub_23BE5AF18();
}

uint64_t sub_23BE42C4C()
{
  sub_23BE44120();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE42C74()
{
  sub_23BE44120();
  return sub_23BE5AF18();
}

void BrowseLoadState.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t State;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8BD8);
  v20 = *(_QWORD *)(v2 - 8);
  v21 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v18 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8BE0);
  v24 = *(_QWORD *)(v4 - 8);
  v25 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v23 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for BrowseContent();
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8BE8);
  v16 = *(_QWORD *)(v7 - 8);
  v17 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8BF0);
  MEMORY[0x24BDAC7A8](v15);
  State = type metadata accessor for BrowseLoadState();
  MEMORY[0x24BDAC7A8](State);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8BF8);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE44010();
  v26 = v12;
  sub_23BE5AF00();
  sub_23BE43FCC(v29, (uint64_t)v10);
  v13 = (char *)sub_23BE42EE4 + 4 * byte_23BE64214[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BE42EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v1 - 88) = 1;
  sub_23BE440DC();
  v3 = *(_QWORD *)(v1 - 128);
  v2 = *(_QWORD *)(v1 - 120);
  sub_23BE5ADF8();
  v4 = *(_QWORD *)(v1 - 200);
  sub_23BE5AE28();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 208) + 8))(v0, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 104) + 8))(v3, v2);
}

uint64_t BrowseLoadState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t State;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD v27[6];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;

  v32 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8C48);
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v35 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8C50);
  v27[3] = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v37 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8C58);
  v27[2] = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v34 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8C60);
  v27[4] = *(_QWORD *)(v7 - 8);
  v27[5] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v33 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8C68);
  v36 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for BrowseLoadState();
  v13 = MEMORY[0x24BDAC7A8](State);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)v27 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = a1[3];
  v38 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  sub_23BE44010();
  v20 = v39;
  sub_23BE5AEF4();
  if (!v20)
  {
    v27[1] = v18;
    v39 = v15;
    v21 = sub_23BE5ADEC();
    if (*(_QWORD *)(v21 + 16) == 1)
      __asm { BR              X10 }
    v22 = v11;
    v23 = sub_23BE5AD68();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v25 = State;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v9);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
}

uint64_t sub_23BE439B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseLoadState.init(from:)(a1, a2);
}

void sub_23BE439CC(_QWORD *a1)
{
  BrowseLoadState.encode(to:)(a1);
}

void BrowseLoadState.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t State;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for BrowseContent();
  MEMORY[0x24BDAC7A8](v1);
  State = type metadata accessor for BrowseLoadState();
  MEMORY[0x24BDAC7A8](State);
  sub_23BE43FCC(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_23BE43A9C + 4 * byte_23BE6421C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BE43A9C()
{
  sub_23BE5AEC4();
  sub_23BE5AC9C();
  return swift_bridgeObjectRelease();
}

uint64_t BrowseLoadState.hashValue.getter()
{
  sub_23BE5AEB8();
  BrowseLoadState.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE43BC8()
{
  sub_23BE5AEB8();
  BrowseLoadState.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE43C08()
{
  sub_23BE5AEB8();
  BrowseLoadState.hash(into:)();
  return sub_23BE5AEE8();
}

void _s15FitnessBrowsing15BrowseLoadStateO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t State;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v4 = type metadata accessor for BrowseContent();
  MEMORY[0x24BDAC7A8](v4);
  State = type metadata accessor for BrowseLoadState();
  v6 = MEMORY[0x24BDAC7A8](State);
  MEMORY[0x24BDAC7A8](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8DA0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 + *(int *)(v8 + 48) - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE43FCC(a1, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23BE43FCC(a2, (uint64_t)v10);
  v11 = (char *)sub_23BE43D70 + 4 * byte_23BE64220[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BE43D70()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;

  sub_23BE43FCC(v0, (uint64_t)v2);
  v4 = *v2;
  v3 = v2[1];
  if (!swift_getEnumCaseMultiPayload())
  {
    if (v4 == *v1 && v3 == v1[1])
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v7 = sub_23BE5AE58();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
      {
        sub_23BDF2468(v0, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLoadState);
        goto LABEL_3;
      }
    }
    sub_23BDF2468(v0, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLoadState);
    v5 = 1;
    return v5 & 1;
  }
  swift_bridgeObjectRelease();
  sub_23BE45F54(v0);
LABEL_3:
  v5 = 0;
  return v5 & 1;
}

uint64_t type metadata accessor for BrowseLoadState()
{
  uint64_t result;

  result = qword_256AC8D00;
  if (!qword_256AC8D00)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23BE43FCC(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for BrowseLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 16))(a2, a1, State);
  return a2;
}

unint64_t sub_23BE44010()
{
  unint64_t result;

  result = qword_256AC8C00;
  if (!qword_256AC8C00)
  {
    result = MEMORY[0x242612B20](&unk_23BE647BC, &type metadata for BrowseLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8C00);
  }
  return result;
}

unint64_t sub_23BE44054()
{
  unint64_t result;

  result = qword_256AC8C08;
  if (!qword_256AC8C08)
  {
    result = MEMORY[0x242612B20](&unk_23BE6476C, &type metadata for BrowseLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8C08);
  }
  return result;
}

unint64_t sub_23BE44098()
{
  unint64_t result;

  result = qword_256AC8C10;
  if (!qword_256AC8C10)
  {
    result = MEMORY[0x242612B20](&unk_23BE6471C, &type metadata for BrowseLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8C10);
  }
  return result;
}

unint64_t sub_23BE440DC()
{
  unint64_t result;

  result = qword_256AC8C38;
  if (!qword_256AC8C38)
  {
    result = MEMORY[0x242612B20](&unk_23BE646CC, &type metadata for BrowseLoadState.FailedToLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8C38);
  }
  return result;
}

unint64_t sub_23BE44120()
{
  unint64_t result;

  result = qword_256AC8C40;
  if (!qword_256AC8C40)
  {
    result = MEMORY[0x242612B20](&unk_23BE6467C, &type metadata for BrowseLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8C40);
  }
  return result;
}

uint64_t sub_23BE44164(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AC8C20);
    v10 = sub_23BDF23E4(a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], a3);
    result = MEMORY[0x242612B20](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BE441E8()
{
  return sub_23BDF23E4(&qword_256AC8C88, (uint64_t (*)(uint64_t))type metadata accessor for BrowseLoadState, (uint64_t)&protocol conformance descriptor for BrowseLoadState);
}

_QWORD *initializeBufferWithCopyOfBuffer for BrowseLoadState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v42;
  uint64_t v43;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for BrowseContent();
      v10 = swift_getEnumCaseMultiPayload();
      if (v10 == 2)
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      else if (v10 == 1)
      {
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v11 = a2[2];
        a1[1] = a2[1];
        a1[2] = v11;
        a1[3] = a2[3];
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
        v12 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
        v13 = (char *)a1 + v12;
        v14 = (char *)a2 + v12;
        v15 = sub_23BE5A678();
        v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v16(v13, v14, v15);
      }
      else
      {
        v17 = type metadata accessor for BrowseArtwork();
        v18 = *(_QWORD *)(v17 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(a2, 1, v17))
        {
          v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        }
        else
        {
          v20 = sub_23BE5A720();
          v21 = *(_QWORD *)(v20 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(a2, 1, v20))
          {
            v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
          }
          else
          {
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 + 16))(a1, a2, v20);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(a1, 0, 1, v20);
          }
          v23 = *(int *)(v17 + 20);
          v24 = (char *)a1 + v23;
          v25 = (char *)a2 + v23;
          v26 = sub_23BE5A690();
          v27 = *(_QWORD *)(v26 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
          {
            v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
            memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(a1, 0, 1, v17);
        }
        v43 = type metadata accessor for EditorialCollectionDetail();
        v29 = *(int *)(v43 + 20);
        v30 = (_QWORD *)((char *)a1 + v29);
        v31 = (char *)a2 + v29;
        v32 = *(_QWORD *)((char *)a2 + v29 + 8);
        *v30 = *(_QWORD *)((char *)a2 + v29);
        v30[1] = v32;
        v33 = *(_QWORD *)((char *)a2 + v29 + 24);
        v30[2] = *(_QWORD *)((char *)a2 + v29 + 16);
        v30[3] = v33;
        v34 = *(_QWORD *)((char *)a2 + v29 + 40);
        v30[4] = *(_QWORD *)((char *)a2 + v29 + 32);
        v30[5] = v34;
        v35 = *(_QWORD *)((char *)a2 + v29 + 56);
        v30[6] = *(_QWORD *)((char *)a2 + v29 + 48);
        v30[7] = v35;
        v36 = *(int *)(type metadata accessor for EditorialCollection() + 32);
        v37 = (char *)v30 + v36;
        v42 = &v31[v36];
        v38 = sub_23BE5A690();
        v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v39(v37, v42, v38);
        *(_QWORD *)((char *)a1 + *(int *)(v43 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v43 + 24));
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA8);
      *((_BYTE *)a1 + *(int *)(v40 + 48)) = *((_BYTE *)a2 + *(int *)(v40 + 48));
      *(_QWORD *)((char *)a1 + *(int *)(v40 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v40 + 64));
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
    if (!EnumCaseMultiPayload)
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
LABEL_22:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for BrowseLoadState(uint64_t a1)
{
  uint64_t result;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    type metadata accessor for BrowseContent();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = a1 + *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
        v14 = sub_23BE5A678();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
        goto LABEL_16;
      }
      if (EnumCaseMultiPayload)
      {
LABEL_16:
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA8);
        return swift_bridgeObjectRelease();
      }
      v4 = type metadata accessor for BrowseArtwork();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
      {
        v5 = sub_23BE5A720();
        v6 = *(_QWORD *)(v5 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5))
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
        v7 = a1 + *(int *)(v4 + 20);
        v8 = sub_23BE5A690();
        v9 = *(_QWORD *)(v8 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
          (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
      }
      v10 = a1 + *(int *)(type metadata accessor for EditorialCollectionDetail() + 20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v10 + *(int *)(type metadata accessor for EditorialCollection() + 32);
      v12 = sub_23BE5A690();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    }
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if (!(_DWORD)result)
    return swift_bridgeObjectRelease();
  return result;
}

_QWORD *initializeWithCopy for BrowseLoadState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  char *v40;
  uint64_t v41;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for BrowseContent();
    v8 = swift_getEnumCaseMultiPayload();
    if (v8 == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else if (v8 == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v9 = a2[2];
      a1[1] = a2[1];
      a1[2] = v9;
      a1[3] = a2[3];
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      v10 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = sub_23BE5A678();
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14(v11, v12, v13);
    }
    else
    {
      v15 = type metadata accessor for BrowseArtwork();
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        v18 = sub_23BE5A720();
        v19 = *(_QWORD *)(v18 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(a2, 1, v18))
        {
          v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v19 + 16))(a1, a2, v18);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(a1, 0, 1, v18);
        }
        v21 = *(int *)(v15 + 20);
        v22 = (char *)a1 + v21;
        v23 = (char *)a2 + v21;
        v24 = sub_23BE5A690();
        v25 = *(_QWORD *)(v24 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
        {
          v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
          memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
      }
      v41 = type metadata accessor for EditorialCollectionDetail();
      v27 = *(int *)(v41 + 20);
      v28 = (_QWORD *)((char *)a1 + v27);
      v29 = (char *)a2 + v27;
      v30 = *(_QWORD *)((char *)a2 + v27 + 8);
      *v28 = *(_QWORD *)((char *)a2 + v27);
      v28[1] = v30;
      v31 = *(_QWORD *)((char *)a2 + v27 + 24);
      v28[2] = *(_QWORD *)((char *)a2 + v27 + 16);
      v28[3] = v31;
      v32 = *(_QWORD *)((char *)a2 + v27 + 40);
      v28[4] = *(_QWORD *)((char *)a2 + v27 + 32);
      v28[5] = v32;
      v33 = *(_QWORD *)((char *)a2 + v27 + 56);
      v28[6] = *(_QWORD *)((char *)a2 + v27 + 48);
      v28[7] = v33;
      v34 = *(int *)(type metadata accessor for EditorialCollection() + 32);
      v35 = (char *)v28 + v34;
      v40 = &v29[v34];
      v36 = sub_23BE5A690();
      v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v35, v40, v36);
      *(_QWORD *)((char *)a1 + *(int *)(v41 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v41 + 24));
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA8);
    *((_BYTE *)a1 + *(int *)(v38 + 48)) = *((_BYTE *)a2 + *(int *)(v38 + 48));
    *(_QWORD *)((char *)a1 + *(int *)(v38 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v38 + 64));
    swift_bridgeObjectRetain();
    goto LABEL_20;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
LABEL_20:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *assignWithCopy for BrowseLoadState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v34;
  uint64_t v35;

  if (a1 != a2)
  {
    sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLoadState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for BrowseContent();
      v7 = swift_getEnumCaseMultiPayload();
      if (v7 == 2)
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      else if (v7 == 1)
      {
        *(_BYTE *)a1 = *(_BYTE *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
        v8 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
        v9 = (char *)a1 + v8;
        v10 = (char *)a2 + v8;
        v11 = sub_23BE5A678();
        v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v12(v9, v10, v11);
      }
      else
      {
        v13 = type metadata accessor for BrowseArtwork();
        v14 = *(_QWORD *)(v13 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48))(a2, 1, v13))
        {
          v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        }
        else
        {
          v16 = sub_23BE5A720();
          v17 = *(_QWORD *)(v16 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(a2, 1, v16))
          {
            v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
          }
          else
          {
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v17 + 16))(a1, a2, v16);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
          }
          v19 = *(int *)(v13 + 20);
          v20 = (char *)a1 + v19;
          v21 = (char *)a2 + v19;
          v22 = sub_23BE5A690();
          v23 = *(_QWORD *)(v22 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
          {
            v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
            memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
        }
        v35 = type metadata accessor for EditorialCollectionDetail();
        v25 = *(int *)(v35 + 20);
        v26 = (_QWORD *)((char *)a1 + v25);
        v27 = (char *)a2 + v25;
        *v26 = *(_QWORD *)((char *)a2 + v25);
        v26[1] = *(_QWORD *)((char *)a2 + v25 + 8);
        v26[2] = *(_QWORD *)((char *)a2 + v25 + 16);
        v26[3] = *(_QWORD *)((char *)a2 + v25 + 24);
        v26[4] = *(_QWORD *)((char *)a2 + v25 + 32);
        v26[5] = *(_QWORD *)((char *)a2 + v25 + 40);
        v26[6] = *(_QWORD *)((char *)a2 + v25 + 48);
        v26[7] = *(_QWORD *)((char *)a2 + v25 + 56);
        v28 = *(int *)(type metadata accessor for EditorialCollection() + 32);
        v29 = (char *)v26 + v28;
        v34 = &v27[v28];
        v30 = sub_23BE5A690();
        v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v31(v29, v34, v30);
        *(_QWORD *)((char *)a1 + *(int *)(v35 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v35 + 24));
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA8);
      *((_BYTE *)a1 + *(int *)(v32 + 48)) = *((_BYTE *)a2 + *(int *)(v32 + 48));
      *(_QWORD *)((char *)a1 + *(int *)(v32 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v32 + 64));
      swift_bridgeObjectRetain();
      goto LABEL_21;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
LABEL_21:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for BrowseLoadState(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for BrowseContent();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      a1[32] = a2[32];
      v11 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = sub_23BE5A678();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_18:
        v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA8);
        a1[*(int *)(v34 + 48)] = a2[*(int *)(v34 + 48)];
        *(_QWORD *)&a1[*(int *)(v34 + 64)] = *(_QWORD *)&a2[*(int *)(v34 + 64)];
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v8 = type metadata accessor for BrowseArtwork();
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        v15 = sub_23BE5A720();
        v16 = *(_QWORD *)(v15 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
        {
          v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v16 + 32))(a1, a2, v15);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
        }
        v18 = *(int *)(v8 + 20);
        v19 = &a1[v18];
        v20 = &a2[v18];
        v21 = sub_23BE5A690();
        v22 = *(_QWORD *)(v21 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
        {
          v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
          memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      v24 = type metadata accessor for EditorialCollectionDetail();
      v25 = *(int *)(v24 + 20);
      v26 = &a1[v25];
      v27 = &a2[v25];
      v28 = *(_OWORD *)&a2[v25 + 16];
      *(_OWORD *)v26 = *(_OWORD *)&a2[v25];
      *((_OWORD *)v26 + 1) = v28;
      v29 = *(_OWORD *)&a2[v25 + 48];
      *((_OWORD *)v26 + 2) = *(_OWORD *)&a2[v25 + 32];
      *((_OWORD *)v26 + 3) = v29;
      v30 = *(int *)(type metadata accessor for EditorialCollection() + 32);
      v31 = &v26[v30];
      v32 = &v27[v30];
      v33 = sub_23BE5A690();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      *(_QWORD *)&a1[*(int *)(v24 + 24)] = *(_QWORD *)&a2[*(int *)(v24 + 24)];
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_18;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for BrowseLoadState(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  if (a1 != a2)
  {
    sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLoadState);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for BrowseContent();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        a1[32] = a2[32];
        v11 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
        v12 = &a1[v11];
        v13 = &a2[v11];
        v14 = sub_23BE5A678();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_19:
          v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA8);
          a1[*(int *)(v34 + 48)] = a2[*(int *)(v34 + 48)];
          *(_QWORD *)&a1[*(int *)(v34 + 64)] = *(_QWORD *)&a2[*(int *)(v34 + 64)];
          swift_storeEnumTagMultiPayload();
          return a1;
        }
        v8 = type metadata accessor for BrowseArtwork();
        v9 = *(_QWORD *)(v8 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        }
        else
        {
          v15 = sub_23BE5A720();
          v16 = *(_QWORD *)(v15 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
          {
            v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v16 + 32))(a1, a2, v15);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
          }
          v18 = *(int *)(v8 + 20);
          v19 = &a1[v18];
          v20 = &a2[v18];
          v21 = sub_23BE5A690();
          v22 = *(_QWORD *)(v21 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
          {
            v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
            memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
        }
        v24 = type metadata accessor for EditorialCollectionDetail();
        v25 = *(int *)(v24 + 20);
        v26 = &a1[v25];
        v27 = &a2[v25];
        v28 = *(_OWORD *)&a2[v25 + 16];
        *(_OWORD *)v26 = *(_OWORD *)&a2[v25];
        *((_OWORD *)v26 + 1) = v28;
        v29 = *(_OWORD *)&a2[v25 + 48];
        *((_OWORD *)v26 + 2) = *(_OWORD *)&a2[v25 + 32];
        *((_OWORD *)v26 + 3) = v29;
        v30 = *(int *)(type metadata accessor for EditorialCollection() + 32);
        v31 = &v26[v30];
        v32 = &v27[v30];
        v33 = sub_23BE5A690();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
        *(_QWORD *)&a1[*(int *)(v24 + 24)] = *(_QWORD *)&a2[*(int *)(v24 + 24)];
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_19;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_23BE455C0()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  v2[4] = &unk_23BE64310;
  result = type metadata accessor for BrowseContent();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrowseLoadState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BE4569C + 4 * byte_23BE64229[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BE456D0 + 4 * byte_23BE64224[v4]))();
}

uint64_t sub_23BE456D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE456D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE456E0);
  return result;
}

uint64_t sub_23BE456EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE456F4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BE456F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE45700(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseLoadState.CodingKeys()
{
  return &type metadata for BrowseLoadState.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowseLoadState.IdleCodingKeys()
{
  return &type metadata for BrowseLoadState.IdleCodingKeys;
}

uint64_t storeEnumTagSinglePayload for BrowseLoadState.FailedToLoadCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BE4576C + 4 * byte_23BE6422E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BE4578C + 4 * byte_23BE64233[v4]))();
}

_BYTE *sub_23BE4576C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BE4578C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE45794(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE4579C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE457A4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE457AC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BrowseLoadState.FailedToLoadCodingKeys()
{
  return &type metadata for BrowseLoadState.FailedToLoadCodingKeys;
}

uint64_t storeEnumTagSinglePayload for BrowseLoadState.FetchedCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE45814 + 4 * byte_23BE6423D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE45848 + 4 * byte_23BE64238[v4]))();
}

uint64_t sub_23BE45848(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE45850(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE45858);
  return result;
}

uint64_t sub_23BE45864(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE4586CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE45870(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE45878(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseLoadState.FetchedCodingKeys()
{
  return &type metadata for BrowseLoadState.FetchedCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseLoadState.FetchingCodingKeys()
{
  return &type metadata for BrowseLoadState.FetchingCodingKeys;
}

unint64_t sub_23BE458A8()
{
  unint64_t result;

  result = qword_256AC8D38;
  if (!qword_256AC8D38)
  {
    result = MEMORY[0x242612B20](&unk_23BE64494, &type metadata for BrowseLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8D38);
  }
  return result;
}

unint64_t sub_23BE458F0()
{
  unint64_t result;

  result = qword_256AC8D40;
  if (!qword_256AC8D40)
  {
    result = MEMORY[0x242612B20](&unk_23BE6454C, &type metadata for BrowseLoadState.FailedToLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8D40);
  }
  return result;
}

unint64_t sub_23BE45938()
{
  unint64_t result;

  result = qword_256AC8D48;
  if (!qword_256AC8D48)
  {
    result = MEMORY[0x242612B20](&unk_23BE64654, &type metadata for BrowseLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8D48);
  }
  return result;
}

unint64_t sub_23BE45980()
{
  unint64_t result;

  result = qword_256AC8D50;
  if (!qword_256AC8D50)
  {
    result = MEMORY[0x242612B20](&unk_23BE64574, &type metadata for BrowseLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8D50);
  }
  return result;
}

unint64_t sub_23BE459C8()
{
  unint64_t result;

  result = qword_256AC8D58;
  if (!qword_256AC8D58)
  {
    result = MEMORY[0x242612B20](&unk_23BE6459C, &type metadata for BrowseLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8D58);
  }
  return result;
}

unint64_t sub_23BE45A10()
{
  unint64_t result;

  result = qword_256AC8D60;
  if (!qword_256AC8D60)
  {
    result = MEMORY[0x242612B20](&unk_23BE644BC, &type metadata for BrowseLoadState.FailedToLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8D60);
  }
  return result;
}

unint64_t sub_23BE45A58()
{
  unint64_t result;

  result = qword_256AC8D68;
  if (!qword_256AC8D68)
  {
    result = MEMORY[0x242612B20](&unk_23BE644E4, &type metadata for BrowseLoadState.FailedToLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8D68);
  }
  return result;
}

unint64_t sub_23BE45AA0()
{
  unint64_t result;

  result = qword_256AC8D70;
  if (!qword_256AC8D70)
  {
    result = MEMORY[0x242612B20](&unk_23BE64404, &type metadata for BrowseLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8D70);
  }
  return result;
}

unint64_t sub_23BE45AE8()
{
  unint64_t result;

  result = qword_256AC8D78;
  if (!qword_256AC8D78)
  {
    result = MEMORY[0x242612B20](&unk_23BE6442C, &type metadata for BrowseLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8D78);
  }
  return result;
}

unint64_t sub_23BE45B30()
{
  unint64_t result;

  result = qword_256AC8D80;
  if (!qword_256AC8D80)
  {
    result = MEMORY[0x242612B20](&unk_23BE643B4, &type metadata for BrowseLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8D80);
  }
  return result;
}

unint64_t sub_23BE45B78()
{
  unint64_t result;

  result = qword_256AC8D88;
  if (!qword_256AC8D88)
  {
    result = MEMORY[0x242612B20](&unk_23BE643DC, &type metadata for BrowseLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8D88);
  }
  return result;
}

unint64_t sub_23BE45BC0()
{
  unint64_t result;

  result = qword_256AC8D90;
  if (!qword_256AC8D90)
  {
    result = MEMORY[0x242612B20](&unk_23BE645C4, &type metadata for BrowseLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8D90);
  }
  return result;
}

unint64_t sub_23BE45C08()
{
  unint64_t result;

  result = qword_256AC8D98;
  if (!qword_256AC8D98)
  {
    result = MEMORY[0x242612B20](&unk_23BE645EC, &type metadata for BrowseLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8D98);
  }
  return result;
}

uint64_t sub_23BE45C4C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701602409 && a2 == 0xE400000000000000;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F5464656C696166 && a2 == 0xEC00000064616F4CLL || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64656863746566 && a2 == 0xE700000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x676E696863746566 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23BE45E0C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023BE66420 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023BE66570)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BE45F54(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8DA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL static BrowseGalleryDestination.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_23BE45FA4()
{
  _BYTE *v0;

  if (*v0)
    return 0x5472656E69617274;
  else
    return 0x6169726F74696465;
}

uint64_t sub_23BE45FE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE4645C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE4600C()
{
  sub_23BE462CC();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE46034()
{
  sub_23BE462CC();
  return sub_23BE5AF18();
}

uint64_t sub_23BE4605C()
{
  sub_23BE46354();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE46084()
{
  sub_23BE46354();
  return sub_23BE5AF18();
}

uint64_t sub_23BE460AC()
{
  sub_23BE46310();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE460D4()
{
  sub_23BE46310();
  return sub_23BE5AF18();
}

uint64_t BrowseGalleryDestination.encode(to:)(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;

  v17 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8DA8);
  v15 = *(_QWORD *)(v3 - 8);
  v16 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8DB0);
  v6 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8DB8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE462CC();
  sub_23BE5AF00();
  if ((v17 & 1) != 0)
  {
    v19 = 1;
    sub_23BE46310();
    sub_23BE5ADF8();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v16);
  }
  else
  {
    v18 = 0;
    sub_23BE46354();
    sub_23BE5ADF8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_23BE462CC()
{
  unint64_t result;

  result = qword_256AC8DC0;
  if (!qword_256AC8DC0)
  {
    result = MEMORY[0x242612B20](&unk_23BE64B40, &type metadata for BrowseGalleryDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8DC0);
  }
  return result;
}

unint64_t sub_23BE46310()
{
  unint64_t result;

  result = qword_256AC8DC8;
  if (!qword_256AC8DC8)
  {
    result = MEMORY[0x242612B20](&unk_23BE64AF0, &type metadata for BrowseGalleryDestination.TrainerTipCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8DC8);
  }
  return result;
}

unint64_t sub_23BE46354()
{
  unint64_t result;

  result = qword_256AC8DD0;
  if (!qword_256AC8DD0)
  {
    result = MEMORY[0x242612B20](&unk_23BE64AA0, &type metadata for BrowseGalleryDestination.EditorialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8DD0);
  }
  return result;
}

uint64_t BrowseGalleryDestination.init(from:)(_QWORD *a1)
{
  return sub_23BE46564(a1) & 1;
}

uint64_t sub_23BE463B0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23BE46564(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t sub_23BE463DC(_QWORD *a1)
{
  unsigned __int8 *v1;

  return BrowseGalleryDestination.encode(to:)(a1, *v1);
}

uint64_t BrowseGalleryDestination.hash(into:)()
{
  return sub_23BE5AEC4();
}

uint64_t BrowseGalleryDestination.hashValue.getter()
{
  sub_23BE5AEB8();
  sub_23BE5AEC4();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE4645C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6169726F74696465 && a2 == 0xE90000000000006CLL;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5472656E69617274 && a2 == 0xEA00000000007069)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BE46564(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;

  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8E18);
  v22 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v25 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8E20);
  v3 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8E28);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE462CC();
  v10 = v26;
  sub_23BE5AEF4();
  if (v10)
    goto LABEL_7;
  v11 = v5;
  v12 = v25;
  v21 = a1;
  v26 = v7;
  v13 = sub_23BE5ADEC();
  v14 = v6;
  if (*(_QWORD *)(v13 + 16) != 1)
  {
    v16 = sub_23BE5AD68();
    swift_allocError();
    v17 = v9;
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v19 = &type metadata for BrowseGalleryDestination;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v6);
    a1 = v21;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v6;
  }
  v6 = *(unsigned __int8 *)(v13 + 32);
  if ((v6 & 1) != 0)
  {
    v28 = 1;
    sub_23BE46310();
    sub_23BE5AD80();
    v15 = v26;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v24);
  }
  else
  {
    v27 = 0;
    sub_23BE46354();
    sub_23BE5AD80();
    v15 = v26;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v23);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return v6;
}

unint64_t sub_23BE46894()
{
  unint64_t result;

  result = qword_256AC8DD8;
  if (!qword_256AC8DD8)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseGalleryDestination, &type metadata for BrowseGalleryDestination);
    atomic_store(result, (unint64_t *)&qword_256AC8DD8);
  }
  return result;
}

ValueMetadata *type metadata accessor for BrowseGalleryDestination()
{
  return &type metadata for BrowseGalleryDestination;
}

uint64_t _s15FitnessBrowsing24BrowseGalleryDestinationOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BE46938 + 4 * byte_23BE64815[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BE4696C + 4 * byte_23BE64810[v4]))();
}

uint64_t sub_23BE4696C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE46974(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE4697CLL);
  return result;
}

uint64_t sub_23BE46988(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE46990);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BE46994(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE4699C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseGalleryDestination.CodingKeys()
{
  return &type metadata for BrowseGalleryDestination.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowseGalleryDestination.EditorialCodingKeys()
{
  return &type metadata for BrowseGalleryDestination.EditorialCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseGalleryDestination.TrainerTipCodingKeys()
{
  return &type metadata for BrowseGalleryDestination.TrainerTipCodingKeys;
}

unint64_t sub_23BE469DC()
{
  unint64_t result;

  result = qword_256AC8DE0;
  if (!qword_256AC8DE0)
  {
    result = MEMORY[0x242612B20](&unk_23BE64A78, &type metadata for BrowseGalleryDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8DE0);
  }
  return result;
}

unint64_t sub_23BE46A24()
{
  unint64_t result;

  result = qword_256AC8DE8;
  if (!qword_256AC8DE8)
  {
    result = MEMORY[0x242612B20](&unk_23BE64998, &type metadata for BrowseGalleryDestination.EditorialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8DE8);
  }
  return result;
}

unint64_t sub_23BE46A6C()
{
  unint64_t result;

  result = qword_256AC8DF0;
  if (!qword_256AC8DF0)
  {
    result = MEMORY[0x242612B20](&unk_23BE649C0, &type metadata for BrowseGalleryDestination.EditorialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8DF0);
  }
  return result;
}

unint64_t sub_23BE46AB4()
{
  unint64_t result;

  result = qword_256AC8DF8;
  if (!qword_256AC8DF8)
  {
    result = MEMORY[0x242612B20](&unk_23BE64948, &type metadata for BrowseGalleryDestination.TrainerTipCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8DF8);
  }
  return result;
}

unint64_t sub_23BE46AFC()
{
  unint64_t result;

  result = qword_256AC8E00;
  if (!qword_256AC8E00)
  {
    result = MEMORY[0x242612B20](&unk_23BE64970, &type metadata for BrowseGalleryDestination.TrainerTipCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8E00);
  }
  return result;
}

unint64_t sub_23BE46B44()
{
  unint64_t result;

  result = qword_256AC8E08;
  if (!qword_256AC8E08)
  {
    result = MEMORY[0x242612B20](&unk_23BE649E8, &type metadata for BrowseGalleryDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8E08);
  }
  return result;
}

unint64_t sub_23BE46B8C()
{
  unint64_t result;

  result = qword_256AC8E10;
  if (!qword_256AC8E10)
  {
    result = MEMORY[0x242612B20](&unk_23BE64A10, &type metadata for BrowseGalleryDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8E10);
  }
  return result;
}

void sub_23BE46BD0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23BE46C18(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23BE46C8C + 4 * byte_23BE64B95[a2]))(0x656966697473756ALL);
}

uint64_t sub_23BE46C8C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656966697473756ALL && v1 == 0xE900000000000064)
    v2 = 1;
  else
    v2 = sub_23BE5AE58();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_23BE46D48(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23BE46DA4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23BE46E5C + 4 * byte_23BE64BA3[a2]))(1852401780);
}

uint64_t sub_23BE46E5C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1852401780 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_23BE5AE58();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_23BE46F80(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23BE46FEC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_23BE470D0 + 4 * byte_23BE64BB5[a2]))();
}

uint64_t sub_23BE470D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 && v3 == 0xEF736D6574692D6CLL)
    v4 = 1;
  else
    v4 = sub_23BE5AE58();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t BrowseFeature.environment.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v2 = v1[7];
  v3 = v1[9];
  v24 = v1[8];
  v25 = v3;
  v4 = v1[9];
  v26 = v1[10];
  v5 = v1[3];
  v6 = v1[5];
  v20 = v1[4];
  v7 = v20;
  v21 = v6;
  v8 = v1[5];
  v9 = v1[7];
  v22 = v1[6];
  v10 = v22;
  v23 = v9;
  v11 = v1[1];
  v17[0] = *v1;
  v17[1] = v11;
  v12 = v1[3];
  v14 = *v1;
  v13 = v1[1];
  v18 = v1[2];
  v15 = v18;
  v19 = v12;
  a1[8] = v24;
  a1[9] = v4;
  a1[10] = v1[10];
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v10;
  a1[7] = v2;
  *a1 = v14;
  a1[1] = v13;
  a1[2] = v15;
  a1[3] = v5;
  return sub_23BE4F220((uint64_t)v17);
}

uint64_t sub_23BE472A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      result = sub_23BE5AEC4();
      break;
    default:
      sub_23BE5AEC4();
      result = sub_23BE5AC9C();
      break;
  }
  return result;
}

uint64_t sub_23BE47360()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  sub_23BE5AEB8();
  sub_23BE472A0((uint64_t)v4, v1, v2);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE473A8(uint64_t a1)
{
  uint64_t *v1;

  return sub_23BE472A0(a1, *v1, v1[1]);
}

uint64_t sub_23BE473B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  sub_23BE5AEB8();
  sub_23BE472A0((uint64_t)v4, v1, v2);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE473F4(uint64_t *a1, uint64_t a2)
{
  return sub_23BE4EBA0(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

__n128 BrowseFeature.init(environment:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 144) = v2;
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 160);
  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v4;
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void BrowseFeature.reduce(localState:sharedState:sideEffects:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t (*v60)(_QWORD);
  char *v61;
  _QWORD v62[10];
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t State;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;

  v89 = a2;
  v90 = a4;
  v85 = a1;
  v86 = a3;
  v5 = sub_23BE5A678();
  v69 = *(_QWORD *)(v5 - 8);
  v70 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v62[7] = v7;
  v62[8] = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v68 = (char *)v62 - v8;
  v78 = type metadata accessor for BrowseIdentifier();
  v9 = MEMORY[0x24BDAC7A8](v78);
  v62[9] = (char *)v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v77 = (char *)v62 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7FE8);
  MEMORY[0x24BDAC7A8](v12);
  v81 = (char *)v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23BE5A6C0();
  v83 = *(_QWORD *)(v14 - 8);
  v84 = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v62[1] = (char *)v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v75 = (char *)v62 - v17;
  v18 = type metadata accessor for BrowseContent();
  v63 = *(_QWORD *)(v18 - 8);
  v19 = *(_QWORD *)(v63 + 64);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v64 = (char *)v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v76 = (char *)v62 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v80 = (char *)v62 - v23;
  v87 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7A60);
  v82 = *(_QWORD *)(v87 - 8);
  v24 = MEMORY[0x24BDAC7A8](v87);
  v65 = (char *)v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v62[2] = (char *)v62 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v74 = (char *)v62 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v62[4] = (char *)v62 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v73 = (char *)v62 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v62[3] = (char *)v62 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v72 = (char *)v62 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v71 = (char *)v62 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v67 = (char *)v62 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v62[5] = (char *)v62 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v66 = (char *)v62 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v62[6] = (char *)v62 - v47;
  MEMORY[0x24BDAC7A8](v46);
  v79 = (char *)v62 - v48;
  State = type metadata accessor for BrowseLoadState();
  v49 = MEMORY[0x24BDAC7A8](State);
  v50 = MEMORY[0x24BDAC7A8](v49);
  v51 = MEMORY[0x24BDAC7A8](v50);
  v52 = MEMORY[0x24BDAC7A8](v51);
  MEMORY[0x24BDAC7A8](v52);
  v53 = type metadata accessor for BrowseAction();
  MEMORY[0x24BDAC7A8](v53);
  v55 = v4[9];
  v99 = v4[8];
  v100 = v55;
  v101 = v4[10];
  v56 = v4[5];
  v95 = v4[4];
  v96 = v56;
  v57 = v4[7];
  v97 = v4[6];
  v98 = v57;
  v58 = v4[1];
  v91 = *v4;
  v92 = v58;
  v59 = v4[3];
  v93 = v4[2];
  v94 = v59;
  sub_23BDF23A0(v90, (uint64_t)v62 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0), v60);
  v61 = (char *)sub_23BE47948 + 4 * byte_23BE64BC8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BE47948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v2;
  v3 = v2[1];
  v5 = (_QWORD *)(*(_QWORD *)(v0 + 288) + *(int *)(type metadata accessor for BrowseState() + 36));
  sub_23BDF23A0((uint64_t)v5, v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLoadState);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLoadState);
    sub_23BDF2468((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLoadState);
    *v5 = v4;
    v5[1] = v3;
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    swift_bridgeObjectRelease();
    return sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLoadState);
  }
}

uint64_t sub_23BE49374(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 + 152) = a3;
  *(_QWORD *)(v3 + 48) = a1;
  *(_QWORD *)(v3 + 56) = a2;
  *(_QWORD *)(v3 + 64) = type metadata accessor for BrowseAction();
  *(_QWORD *)(v3 + 72) = swift_task_alloc();
  sub_23BE5ACE4();
  *(_QWORD *)(v3 + 80) = sub_23BE5ACD8();
  *(_QWORD *)(v3 + 88) = sub_23BE5ACC0();
  *(_QWORD *)(v3 + 96) = v4;
  return swift_task_switch();
}

uint64_t sub_23BE49408()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  int *v14;

  v1 = v0[7];
  v2 = *(int **)(v1 + 32);
  v3 = (_OWORD *)swift_allocObject();
  v0[13] = v3;
  v5 = *(_OWORD *)(v1 + 16);
  v4 = *(_OWORD *)(v1 + 32);
  v3[1] = *(_OWORD *)v1;
  v3[2] = v5;
  v3[3] = v4;
  v6 = *(_OWORD *)(v1 + 96);
  v8 = *(_OWORD *)(v1 + 48);
  v7 = *(_OWORD *)(v1 + 64);
  v3[6] = *(_OWORD *)(v1 + 80);
  v3[7] = v6;
  v3[4] = v8;
  v3[5] = v7;
  v9 = *(_OWORD *)(v1 + 160);
  v11 = *(_OWORD *)(v1 + 112);
  v10 = *(_OWORD *)(v1 + 128);
  v3[10] = *(_OWORD *)(v1 + 144);
  v3[11] = v9;
  v3[8] = v11;
  v3[9] = v10;
  sub_23BE4F220(v1);
  v14 = (int *)((char *)v2 + *v2);
  v12 = (_QWORD *)swift_task_alloc();
  v0[14] = v12;
  *v12 = v0;
  v12[1] = sub_23BE494D0;
  return ((uint64_t (*)(BOOL (*)(uint64_t), _OWORD *))v14)(sub_23BE4FC78, v3);
}

uint64_t sub_23BE494D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    *(_QWORD *)(v4 + 128) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_23BE4954C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD **)(v0 + 72);
  v2 = Array<A>.includingMarketingUpsellSectionDescriptors(isSubscribed:)(*(_BYTE *)(v0 + 152), *(_QWORD **)(v0 + 128));
  swift_bridgeObjectRelease();
  v3 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC8EE8) + 48);
  *v1 = v2;
  type metadata accessor for BrowseContent();
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  v4 = sub_23BE49840((uint64_t)v2);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v1 + v3) = v4;
  swift_storeEnumTagMultiPayload();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F28);
  *v5 = v0;
  v5[1] = sub_23BE49640;
  return sub_23BE5ABE8();
}

uint64_t sub_23BE49640()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc();
  sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
  return swift_task_switch();
}

uint64_t sub_23BE496A0()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BE496DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t **)(v0 + 72);
  swift_release();
  swift_getErrorValue();
  *v1 = sub_23BE5AE7C();
  v1[1] = v2;
  swift_storeEnumTagMultiPayload();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F28);
  *v3 = v0;
  v3[1] = sub_23BE49798;
  return sub_23BE5ABE8();
}

uint64_t sub_23BE49798()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc();
  sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
  return swift_task_switch();
}

uint64_t sub_23BE497F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_release();
  MEMORY[0x242612A3C](v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BE49840(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)();
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  unint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;

  v2 = sub_23BE5A714();
  v74 = *(_QWORD *)(v2 - 8);
  v75 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v73 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v72 = (char *)&v56 - v5;
  v69 = type metadata accessor for BrowseItem();
  MEMORY[0x24BDAC7A8](v69);
  v68 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for BrowseLazyItem();
  v71 = *(_QWORD *)(v77 - 8);
  v7 = MEMORY[0x24BDAC7A8](v77);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v83 = (uint64_t)&v56 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F30);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v70 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F38);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t *)((char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v15);
  v80 = (char *)&v56 - v18;
  v63 = type metadata accessor for BrowseSectionDescriptor();
  v58 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for BrowseEditorialDescriptor();
  MEMORY[0x24BDAC7A8](v21);
  v60 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F40);
  v65 = *(_QWORD *)(v67 - 8);
  MEMORY[0x24BDAC7A8](v67);
  v57 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F48);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (unint64_t *)((char *)&v56 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v25);
  v64 = (uint64_t *)((char *)&v56 - v28);
  v84 = MEMORY[0x24BEE4B08];
  v29 = *(_QWORD *)(a1 + 16);
  v59 = a1;
  swift_bridgeObjectRetain();
  v30 = 0;
  v78 = v17;
  v82 = v20;
  v61 = v29;
  v62 = v27;
  v31 = v29 == 0;
  if (!v29)
    goto LABEL_7;
LABEL_2:
  if (v31)
  {
LABEL_24:
    __break(1u);
    JUMPOUT(0x23BE4A07CLL);
  }
  v32 = v30 + 1;
  v33 = v30;
  v34 = (uint64_t)&v57[*(int *)(v67 + 48)];
  sub_23BDF23A0(v59+ ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))+ *(_QWORD *)(v58 + 72) * v30, v34, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
  v35 = (uint64_t)v27 + *(int *)(v67 + 48);
  *v27 = v33;
  sub_23BDF2424(v34, v35, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
  v36 = v67;
  v37 = 0;
  v66 = v32;
  v20 = v82;
  while (1)
  {
    v40 = v65;
    v41 = v36;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v27, v37, 1, v36);
    v42 = (uint64_t)v27;
    v43 = v64;
    sub_23BE013D8(v42, (uint64_t)v64, &qword_256AC8F48);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v40 + 48))(v43, 1, v41) == 1)
      break;
    v44 = *v43;
    sub_23BDF2424((uint64_t)v43 + *(int *)(v41 + 48), (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      v38 = (uint64_t)v20;
      v39 = type metadata accessor for BrowseSectionDescriptor;
LABEL_5:
      sub_23BDF2468(v38, (uint64_t (*)(_QWORD))v39);
      v27 = v62;
      v29 = v61;
      goto LABEL_6;
    }
    v45 = v60;
    sub_23BDF2424((uint64_t)v20, (uint64_t)v60, (uint64_t (*)(_QWORD))type metadata accessor for BrowseEditorialDescriptor);
    if (v45[8] != 1)
    {
      v38 = (uint64_t)v45;
      v39 = type metadata accessor for BrowseEditorialDescriptor;
      goto LABEL_5;
    }
    v46 = *(_QWORD *)v45;
    v47 = *(_QWORD *)(*(_QWORD *)v45 + 16);
    v76 = v46;
    swift_bridgeObjectRetain();
    v48 = (uint64_t)v80;
    v81 = v44;
    v79 = v47;
    if (v47)
    {
      if (!*(_QWORD *)(v76 + 16))
      {
        __break(1u);
        goto LABEL_24;
      }
      v50 = (uint64_t)&v70[*(int *)(v11 + 48)];
      sub_23BDF23A0(v76 + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80)), v50, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
      v51 = (uint64_t)v17 + *(int *)(v11 + 48);
      *v17 = 0;
      sub_23BDF2424(v50, v51, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
      v49 = 0;
      v20 = v82;
    }
    else
    {
      v49 = 1;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v17, v49, 1, v11);
    sub_23BE013D8((uint64_t)v17, v48, &qword_256AC8F38);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v48, 1, v11) != 1)
    {
      v52 = v83;
      sub_23BDF2424(v48 + *(int *)(v11 + 48), v83, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
      sub_23BDF23A0(v52, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v53 = v9[72];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v54 = v68;
        sub_23BDF2424((uint64_t)v9, v68, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
        v53 = *(unsigned __int8 *)(v54 + *(int *)(v69 + 68));
        sub_23BDF2468(v54, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
      }
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    sub_23BDF2468((uint64_t)v60, (uint64_t (*)(_QWORD))type metadata accessor for BrowseEditorialDescriptor);
    v27 = v62;
    v29 = v61;
LABEL_6:
    v30 = v66;
    v31 = v66 >= v29;
    if (v66 != v29)
      goto LABEL_2;
LABEL_7:
    v37 = 1;
    v66 = v29;
    v36 = v67;
  }
  swift_bridgeObjectRelease();
  return v84;
}

uint64_t sub_23BE4A0A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v24;
  char *v25;

  v2 = type metadata accessor for BrowseGalleryDescriptor();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BrowseEditorialDescriptor();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (unsigned __int8 *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BrowseDetailDescriptor();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BrowseSectionDescriptor();
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
    return 2;
  v24 = v8;
  v25 = v4;
  v16 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v17 = *(_QWORD *)(v12 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_23BDF23A0(v16, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 2)
      break;
    sub_23BDF2424((uint64_t)v14, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for BrowseEditorialDescriptor);
    if (*(_QWORD *)(*(_QWORD *)v7 + 16))
    {
      swift_bridgeObjectRelease();
      v19 = v7[32];
      v21 = type metadata accessor for BrowseEditorialDescriptor;
      v20 = (uint64_t)v7;
      goto LABEL_14;
    }
    sub_23BDF2468((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for BrowseEditorialDescriptor);
    v16 += v17;
    if (!--v15)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
  }
  if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    sub_23BDF2424((uint64_t)v14, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailDescriptor);
    v19 = v10[*(int *)(v24 + 24)];
    v20 = (uint64_t)v10;
    v21 = type metadata accessor for BrowseDetailDescriptor;
  }
  else
  {
    swift_bridgeObjectRelease();
    v22 = (uint64_t)v25;
    sub_23BDF2424((uint64_t)v14, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for BrowseGalleryDescriptor);
    v19 = *(unsigned __int8 *)(v22 + 32);
    v20 = v22;
    v21 = type metadata accessor for BrowseGalleryDescriptor;
  }
LABEL_14:
  sub_23BDF2468(v20, (uint64_t (*)(_QWORD))v21);
  return v19;
}

uint64_t sub_23BE4A324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = type metadata accessor for BrowseAction();
  v4[7] = swift_task_alloc();
  type metadata accessor for EditorialCollectionDetail();
  v4[8] = swift_task_alloc();
  sub_23BE5ACE4();
  v4[9] = sub_23BE5ACD8();
  v4[10] = sub_23BE5ACC0();
  v4[11] = v5;
  return swift_task_switch();
}

uint64_t sub_23BE4A3D8()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  int *v14;

  v1 = v0[3];
  v2 = *(int **)v1;
  v3 = (_OWORD *)swift_allocObject();
  v0[12] = v3;
  v5 = *(_OWORD *)(v1 + 16);
  v4 = *(_OWORD *)(v1 + 32);
  v3[1] = *(_OWORD *)v1;
  v3[2] = v5;
  v3[3] = v4;
  v6 = *(_OWORD *)(v1 + 96);
  v8 = *(_OWORD *)(v1 + 48);
  v7 = *(_OWORD *)(v1 + 64);
  v3[6] = *(_OWORD *)(v1 + 80);
  v3[7] = v6;
  v3[4] = v8;
  v3[5] = v7;
  v9 = *(_OWORD *)(v1 + 160);
  v11 = *(_OWORD *)(v1 + 112);
  v10 = *(_OWORD *)(v1 + 128);
  v3[10] = *(_OWORD *)(v1 + 144);
  v3[11] = v9;
  v3[8] = v11;
  v3[9] = v10;
  sub_23BE4F220(v1);
  v14 = (int *)((char *)v2 + *v2);
  v12 = (_QWORD *)swift_task_alloc();
  v0[13] = v12;
  *v12 = v0;
  v12[1] = sub_23BE4A4A8;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, BOOL (*)(uint64_t), _OWORD *))v14)(v0[8], v0[4], v0[5], sub_23BE4FC60, v3);
}

uint64_t sub_23BE4A4A8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_23BE4A514()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[7];
  v2 = v0[8];
  v3 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC8EE8) + 48);
  sub_23BDF23A0(v2, v1, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollectionDetail);
  type metadata accessor for BrowseContent();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v1 + v3) = MEMORY[0x24BEE4B08];
  swift_storeEnumTagMultiPayload();
  v4 = (_QWORD *)swift_task_alloc();
  v0[15] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F28);
  *v4 = v0;
  v4[1] = sub_23BE4A5E0;
  return sub_23BE5ABE8();
}

uint64_t sub_23BE4A5E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc();
  sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
  return swift_task_switch();
}

uint64_t sub_23BE4A640()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release();
  sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollectionDetail);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BE4A698()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_23BE4A6F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t (*v8)(_QWORD);
  _BOOL8 v9;
  uint64_t v11;

  v2 = type metadata accessor for BrowseDetailContent();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BrowseInsetBehaviorProviderType();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (unsigned __int8 *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BDF23A0(a1, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload() != 1)
    return *v7 == 25;
  sub_23BDF2424((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
  v9 = swift_getEnumCaseMultiPayload() == 0;
  sub_23BDF2468((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for BrowseDetailContent);
  return v9;
}

uint64_t sub_23BE4A808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = a6;
  *(_BYTE *)(v6 + 128) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a4;
  *(_QWORD *)(v6 + 48) = type metadata accessor for BrowseAction();
  *(_QWORD *)(v6 + 56) = swift_task_alloc();
  *(_QWORD *)(v6 + 64) = sub_23BE5ACE4();
  *(_QWORD *)(v6 + 72) = sub_23BE5ACD8();
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a2 + 16) + *(_QWORD *)(a2 + 16));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 80) = v11;
  *v11 = v6;
  v11[1] = sub_23BE4A8D0;
  return v13(a3, a4, a5);
}

uint64_t sub_23BE4A8D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)v2;
  *(_QWORD *)(*(_QWORD *)v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_23BE5ACC0();
  }
  else
  {
    v4[12] = a1;
    v4[13] = sub_23BE5ACC0();
    v4[14] = v5;
  }
  return swift_task_switch();
}

uint64_t sub_23BE4A97C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_BYTE *)(v0 + 128);
  v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC8EE8) + 48);
  v8 = v2 + *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
  v9 = sub_23BE5A678();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, v4, v9);
  *(_BYTE *)v2 = v6;
  *(_QWORD *)(v2 + 8) = v5;
  *(_QWORD *)(v2 + 16) = v3;
  *(_QWORD *)(v2 + 24) = v1;
  *(_BYTE *)(v2 + 32) = 0;
  type metadata accessor for BrowseContent();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v2 + v7) = MEMORY[0x24BEE4B08];
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F28);
  *v10 = v0;
  v10[1] = sub_23BE4AAA4;
  return sub_23BE5ABE8();
}

uint64_t sub_23BE4AAA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc();
  sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
  return swift_task_switch();
}

uint64_t sub_23BE4AB04()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BE4AB44()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BE4AB84(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[2] = a1;
  v1[3] = type metadata accessor for BrowseAction();
  v1[4] = swift_task_alloc();
  sub_23BE5ACE4();
  v1[5] = sub_23BE5ACD8();
  v1[6] = sub_23BE5ACC0();
  v1[7] = v2;
  return swift_task_switch();
}

uint64_t sub_23BE4AC14()
{
  uint64_t v0;
  _QWORD *v1;

  swift_storeEnumTagMultiPayload();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F28);
  *v1 = v0;
  v1[1] = sub_23BE4AC84;
  return sub_23BE5ABE8();
}

uint64_t sub_23BE4AC84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc();
  sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
  return swift_task_switch();
}

uint64_t sub_23BE4ACE4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *);

  v2[12] = a1;
  v2[13] = type metadata accessor for BrowseAction();
  v2[14] = swift_task_alloc();
  v2[15] = sub_23BE5ACE4();
  v2[16] = sub_23BE5ACD8();
  v6 = (uint64_t (*)(_QWORD *))(**(int **)(a2 + 48) + *(_QWORD *)(a2 + 48));
  v4 = (_QWORD *)swift_task_alloc();
  v2[17] = v4;
  *v4 = v2;
  v4[1] = sub_23BE4AD90;
  return v6(v2 + 7);
}

uint64_t sub_23BE4AD90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc();
  *(_QWORD *)(v2 + 152) = sub_23BE5ACC0();
  *(_QWORD *)(v2 + 160) = v3;
  return swift_task_switch();
}

uint64_t sub_23BE4AE1C()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[10];
  v2 = __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = swift_task_alloc();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 16))(v4, v2, v1);
  v0[5] = swift_getAssociatedTypeWitness();
  v0[6] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  sub_23BE5AD08();
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  v0[21] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v5 = (_QWORD *)swift_task_alloc();
  v0[22] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23BE4AF7C;
  return sub_23BE5ACCC();
}

uint64_t sub_23BE4AF7C()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23BE4AFD0()
{
  uint64_t v0;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 208) == 1)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v2;
    *(_QWORD *)(v0 + 192) = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F28);
    *v2 = v0;
    v2[1] = sub_23BE4B088;
    return sub_23BE5ABE8();
  }
}

uint64_t sub_23BE4B088()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc();
  sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
  return swift_task_switch();
}

uint64_t sub_23BE4B0E8()
{
  uint64_t v0;
  _QWORD *v1;

  swift_storeEnumTagMultiPayload();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 200) = v1;
  *v1 = v0;
  v1[1] = sub_23BE4B14C;
  return sub_23BE5ABE8();
}

uint64_t sub_23BE4B14C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc();
  sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
  return swift_task_switch();
}

uint64_t sub_23BE4B1AC()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[21] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[22] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_23BE4AF7C;
  return sub_23BE5ACCC();
}

uint64_t sub_23BE4B250()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BE4B290(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *);

  v2[12] = a1;
  v2[13] = type metadata accessor for BrowseAction();
  v2[14] = swift_task_alloc();
  v2[15] = sub_23BE5ACE4();
  v2[16] = sub_23BE5ACD8();
  v6 = (uint64_t (*)(_QWORD *))(**(int **)(a2 + 64) + *(_QWORD *)(a2 + 64));
  v4 = (_QWORD *)swift_task_alloc();
  v2[17] = v4;
  *v4 = v2;
  v4[1] = sub_23BE4B33C;
  return v6(v2 + 7);
}

uint64_t sub_23BE4B33C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc();
  *(_QWORD *)(v2 + 152) = sub_23BE5ACC0();
  *(_QWORD *)(v2 + 160) = v3;
  return swift_task_switch();
}

uint64_t sub_23BE4B3C8()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[10];
  v2 = __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = swift_task_alloc();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 16))(v4, v2, v1);
  v0[5] = swift_getAssociatedTypeWitness();
  v0[6] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  sub_23BE5AD08();
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  v0[21] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v5 = (_QWORD *)swift_task_alloc();
  v0[22] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23BE4B528;
  return sub_23BE5ACCC();
}

uint64_t sub_23BE4B528()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23BE4B57C()
{
  uint64_t v0;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 192) == 1)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_23BE5A6B4();
    swift_storeEnumTagMultiPayload();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F28);
    *v2 = v0;
    v2[1] = sub_23BE4B640;
    return sub_23BE5ABE8();
  }
}

uint64_t sub_23BE4B640()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc();
  sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
  return swift_task_switch();
}

uint64_t sub_23BE4B6A0()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[21] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[22] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_23BE4B528;
  return sub_23BE5ACCC();
}

uint64_t sub_23BE4B744(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *);

  v2[12] = a1;
  v2[13] = type metadata accessor for BrowseAction();
  v2[14] = swift_task_alloc();
  v2[15] = sub_23BE5ACE4();
  v2[16] = sub_23BE5ACD8();
  v6 = (uint64_t (*)(_QWORD *))(**(int **)(a2 + 80) + *(_QWORD *)(a2 + 80));
  v4 = (_QWORD *)swift_task_alloc();
  v2[17] = v4;
  *v4 = v2;
  v4[1] = sub_23BE4B7F0;
  return v6(v2 + 7);
}

uint64_t sub_23BE4B7F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc();
  *(_QWORD *)(v2 + 152) = sub_23BE5ACC0();
  *(_QWORD *)(v2 + 160) = v3;
  return swift_task_switch();
}

uint64_t sub_23BE4B87C()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[10];
  v2 = __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = swift_task_alloc();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 16))(v4, v2, v1);
  v0[5] = swift_getAssociatedTypeWitness();
  v0[6] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  sub_23BE5AD08();
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  v0[21] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v5 = (_QWORD *)swift_task_alloc();
  v0[22] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23BE4B9DC;
  return sub_23BE5ACCC();
}

uint64_t sub_23BE4B9DC()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23BE4BA30()
{
  uint64_t v0;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 192) == 1)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F28);
    *v2 = v0;
    v2[1] = sub_23BE4BAE4;
    return sub_23BE5ABE8();
  }
}

uint64_t sub_23BE4BAE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc();
  sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
  return swift_task_switch();
}

uint64_t sub_23BE4BB44()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[21] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[22] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_23BE4B9DC;
  return sub_23BE5ACCC();
}

uint64_t sub_23BE4BBE8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *);

  v2[12] = a1;
  v2[13] = type metadata accessor for BrowseAction();
  v2[14] = swift_task_alloc();
  v2[15] = sub_23BE5ACE4();
  v2[16] = sub_23BE5ACD8();
  v6 = (uint64_t (*)(_QWORD *))(**(int **)(a2 + 96) + *(_QWORD *)(a2 + 96));
  v4 = (_QWORD *)swift_task_alloc();
  v2[17] = v4;
  *v4 = v2;
  v4[1] = sub_23BE4BC94;
  return v6(v2 + 7);
}

uint64_t sub_23BE4BC94()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc();
  *(_QWORD *)(v2 + 152) = sub_23BE5ACC0();
  *(_QWORD *)(v2 + 160) = v3;
  return swift_task_switch();
}

uint64_t sub_23BE4BD20()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[10];
  v2 = __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = swift_task_alloc();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 16))(v4, v2, v1);
  v0[5] = swift_getAssociatedTypeWitness();
  v0[6] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  sub_23BE5AD08();
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  v0[21] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v5 = (_QWORD *)swift_task_alloc();
  v0[22] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23BE4BE80;
  return sub_23BE5ACCC();
}

uint64_t sub_23BE4BE80()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23BE4BED4()
{
  uint64_t v0;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 192) == 1)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F28);
    *v2 = v0;
    v2[1] = sub_23BE4BF88;
    return sub_23BE5ABE8();
  }
}

uint64_t sub_23BE4BF88()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc();
  sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
  return swift_task_switch();
}

uint64_t sub_23BE4BFE8()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[21] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[22] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_23BE4BE80;
  return sub_23BE5ACCC();
}

uint64_t sub_23BE4C08C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *);

  v2[12] = a1;
  v2[13] = type metadata accessor for BrowseAction();
  v2[14] = swift_task_alloc();
  v2[15] = sub_23BE5ACE4();
  v2[16] = sub_23BE5ACD8();
  v6 = (uint64_t (*)(_QWORD *))(**(int **)(a2 + 112) + *(_QWORD *)(a2 + 112));
  v4 = (_QWORD *)swift_task_alloc();
  v2[17] = v4;
  *v4 = v2;
  v4[1] = sub_23BE4C138;
  return v6(v2 + 7);
}

uint64_t sub_23BE4C138()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc();
  *(_QWORD *)(v2 + 152) = sub_23BE5ACC0();
  *(_QWORD *)(v2 + 160) = v3;
  return swift_task_switch();
}

uint64_t sub_23BE4C1C4()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[10];
  v2 = __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = swift_task_alloc();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 16))(v4, v2, v1);
  v0[5] = swift_getAssociatedTypeWitness();
  v0[6] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  sub_23BE5AD08();
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  v0[21] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v5 = (_QWORD *)swift_task_alloc();
  v0[22] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23BE4C324;
  return sub_23BE5ACCC();
}

uint64_t sub_23BE4C324()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23BE4C378()
{
  uint64_t v0;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 192) == 1)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F28);
    *v2 = v0;
    v2[1] = sub_23BE4C42C;
    return sub_23BE5ABE8();
  }
}

uint64_t sub_23BE4C42C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc();
  sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
  return swift_task_switch();
}

uint64_t sub_23BE4C48C()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[21] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[22] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_23BE4C324;
  return sub_23BE5ACCC();
}

uint64_t sub_23BE4C530(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *);

  v2[12] = a1;
  v2[13] = type metadata accessor for BrowseAction();
  v2[14] = swift_task_alloc();
  v2[15] = sub_23BE5ACE4();
  v2[16] = sub_23BE5ACD8();
  v6 = (uint64_t (*)(_QWORD *))(**(int **)(a2 + 128) + *(_QWORD *)(a2 + 128));
  v4 = (_QWORD *)swift_task_alloc();
  v2[17] = v4;
  *v4 = v2;
  v4[1] = sub_23BE4C5DC;
  return v6(v2 + 7);
}

uint64_t sub_23BE4C5DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc();
  *(_QWORD *)(v2 + 152) = sub_23BE5ACC0();
  *(_QWORD *)(v2 + 160) = v3;
  return swift_task_switch();
}

uint64_t sub_23BE4C668()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[10];
  v2 = __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = swift_task_alloc();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 16))(v4, v2, v1);
  v0[5] = swift_getAssociatedTypeWitness();
  v0[6] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  sub_23BE5AD08();
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  v0[21] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v5 = (_QWORD *)swift_task_alloc();
  v0[22] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23BE4C7C8;
  return sub_23BE5ACCC();
}

uint64_t sub_23BE4C7C8()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23BE4C81C()
{
  uint64_t v0;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 192) == 1)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F28);
    *v2 = v0;
    v2[1] = sub_23BE4C8D0;
    return sub_23BE5ABE8();
  }
}

uint64_t sub_23BE4C8D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc();
  sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
  return swift_task_switch();
}

uint64_t sub_23BE4C930()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[21] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[22] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_23BE4C7C8;
  return sub_23BE5ACCC();
}

uint64_t sub_23BE4C9D4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *);

  v2[12] = a1;
  v2[13] = type metadata accessor for BrowseAction();
  v2[14] = swift_task_alloc();
  v2[15] = sub_23BE5ACE4();
  v2[16] = sub_23BE5ACD8();
  v6 = (uint64_t (*)(_QWORD *))(**(int **)(a2 + 144) + *(_QWORD *)(a2 + 144));
  v4 = (_QWORD *)swift_task_alloc();
  v2[17] = v4;
  *v4 = v2;
  v4[1] = sub_23BE4CA80;
  return v6(v2 + 7);
}

uint64_t sub_23BE4CA80()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc();
  *(_QWORD *)(v2 + 152) = sub_23BE5ACC0();
  *(_QWORD *)(v2 + 160) = v3;
  return swift_task_switch();
}

uint64_t sub_23BE4CB0C()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[10];
  v2 = __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = swift_task_alloc();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 16))(v4, v2, v1);
  v0[5] = swift_getAssociatedTypeWitness();
  v0[6] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  sub_23BE5AD08();
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  v0[21] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v5 = (_QWORD *)swift_task_alloc();
  v0[22] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23BE4CC6C;
  return sub_23BE5ACCC();
}

uint64_t sub_23BE4CC6C()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23BE4CCC0()
{
  uint64_t v0;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 192) == 1)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F28);
    *v2 = v0;
    v2[1] = sub_23BE4CD74;
    return sub_23BE5ABE8();
  }
}

uint64_t sub_23BE4CD74()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc();
  sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
  return swift_task_switch();
}

uint64_t sub_23BE4CDD4()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[21] = sub_23BE5ACD8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[22] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_23BE4CC6C;
  return sub_23BE5ACCC();
}

uint64_t sub_23BE4CE78(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[2] = a1;
  v1[3] = type metadata accessor for BrowseAction();
  v1[4] = swift_task_alloc();
  sub_23BE5ACE4();
  v1[5] = sub_23BE5ACD8();
  v1[6] = sub_23BE5ACC0();
  v1[7] = v2;
  return swift_task_switch();
}

uint64_t sub_23BE4CF08()
{
  uint64_t v0;
  _QWORD *v1;

  swift_storeEnumTagMultiPayload();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F28);
  *v1 = v0;
  v1[1] = sub_23BE4CF78;
  return sub_23BE5ABE8();
}

uint64_t sub_23BE4CF78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc();
  sub_23BDF2468(v1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
  return swift_task_switch();
}

uint64_t sub_23BE4CFD8()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23BE4D014(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD);
  char *v21;
  _BYTE v22[56];
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;

  v36 = a3;
  v32 = a1;
  v26 = a4;
  v5 = sub_23BE5A714();
  v35 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  v37 = &v22[-v7];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F60);
  MEMORY[0x24BDAC7A8](v8);
  v31 = type metadata accessor for BrowseLazyItem();
  v33 = *(_QWORD *)(v31 - 8);
  v9 = MEMORY[0x24BDAC7A8](v31);
  v28 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v27 = &v22[-v11];
  v12 = sub_23BE5A678();
  MEMORY[0x24BDAC7A8](v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  MEMORY[0x24BDAC7A8](v13);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F30);
  v14 = MEMORY[0x24BDAC7A8](v30);
  v29 = &v22[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v34 = &v22[-v16];
  v23 = type metadata accessor for BrowseEditorialDescriptor();
  MEMORY[0x24BDAC7A8](v23);
  v25 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for BrowseSectionDescriptor();
  MEMORY[0x24BDAC7A8](v18);
  sub_23BDF23A0(a2, (uint64_t)&v22[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v20);
  v24 = v18;
  v21 = (char *)sub_23BE4D2C0 + 4 * byte_23BE64BDE[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BE4D2C0()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_23BDF23A0(v0, *(_QWORD *)(v1 - 232), (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
}

void sub_23BE4D7F4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_23BE4D014(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t sub_23BE4D7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = type metadata accessor for BrowseAction();
  v4[7] = swift_task_alloc();
  sub_23BE5ACE4();
  v4[8] = sub_23BE5ACD8();
  v4[9] = sub_23BE5ACC0();
  v4[10] = v5;
  return swift_task_switch();
}

uint64_t sub_23BE4D890()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (_QWORD *)v0[7];
  v3 = v0[4];
  v2 = v0[5];
  v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AC8EE8) + 48);
  sub_23BE4DAC0(v3, v2, v1);
  *(_QWORD *)((char *)v1 + v4) = sub_23BE49840(v2);
  swift_storeEnumTagMultiPayload();
  v5 = (_QWORD *)swift_task_alloc();
  v0[11] = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F28);
  *v5 = v0;
  v5[1] = sub_23BE4D958;
  return sub_23BE5ABE8();
}

uint64_t sub_23BE4D958()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);
  uint64_t v7;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 56);
  v3 = *(_QWORD *)(*v0 + 24);
  v7 = *v0;
  swift_task_dealloc();
  sub_23BDF2468(v2, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
  v6 = (uint64_t (*)(void))(**(int **)(v3 + 160) + *(_QWORD *)(v3 + 160));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 96) = v4;
  *v4 = v7;
  v4[1] = sub_23BE4D9E8;
  return v6();
}

uint64_t sub_23BE4D9E8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BE4DA48()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BE4DA84()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BE4DAC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v21;

  v6 = type metadata accessor for EditorialCollection();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for EditorialCollectionDetail();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BrowseContent();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BDF23A0(a1, (uint64_t)v17, v18);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23BDF23A0(a1, (uint64_t)a3, (uint64_t (*)(_QWORD))type metadata accessor for BrowseContent);
      return sub_23BDF2468((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for BrowseGalleryDescriptor);
    }
    swift_bridgeObjectRelease();
    *a3 = a2;
  }
  else
  {
    sub_23BDF2424((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollectionDetail);
    sub_23BDFFFD8((uint64_t)v14, (uint64_t)v11, &qword_256AC6DA0);
    sub_23BDF23A0((uint64_t)&v14[*(int *)(v12 + 20)], (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollection);
    sub_23BDF2468((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollectionDetail);
    sub_23BE013D8((uint64_t)v11, (uint64_t)a3, &qword_256AC6DA0);
    sub_23BDF2424((uint64_t)v8, (uint64_t)a3 + *(int *)(v12 + 20), (uint64_t (*)(_QWORD))type metadata accessor for EditorialCollection);
    *(_QWORD *)((char *)a3 + *(int *)(v12 + 24)) = a2;
  }
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23BE4DCF8(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_23BE5A714();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_23BDF23E4(&qword_256AC6D10, v11, MEMORY[0x24BDCF690]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = sub_23BE5AC24();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      sub_23BDF23E4(&qword_256AC8F50, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF6A0]);
      v21 = sub_23BE5AC3C();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    sub_23BE4E2C0((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_23BE4DF54()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = sub_23BE5A714();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F58);
  v6 = sub_23BE5AD50();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v5 + 48);
      v23 = *(_QWORD *)(v36 + 72);
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v22 + v23 * v17, v2);
      sub_23BDF23E4(&qword_256AC6D10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF690]);
      result = sub_23BE5AC24();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v23, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t sub_23BE4E2C0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = sub_23BE5A714();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_23BE4DF54();
  }
  else
  {
    if (v11 > v10)
    {
      sub_23BE4E4C4();
      goto LABEL_12;
    }
    sub_23BE4E6E8();
  }
  v12 = *v3;
  sub_23BDF23E4(&qword_256AC6D10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF690]);
  v13 = sub_23BE5AC24();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      sub_23BDF23E4(&qword_256AC8F50, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF6A0]);
      v18 = sub_23BE5AC3C();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_23BE5AE70();
  __break(1u);
  return result;
}

void *sub_23BE4E4C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = sub_23BE5A714();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F58);
  v6 = *v0;
  v7 = sub_23BE5AD44();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_23BE4E6E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = sub_23BE5A714();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F58);
  v7 = sub_23BE5AD50();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    sub_23BDF23E4(&qword_256AC6D10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF690]);
    result = sub_23BE5AC24();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

size_t sub_23BE4EA10(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_23BE4EA2C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

size_t sub_23BE4EA2C(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7A50);
  v10 = *(_QWORD *)(type metadata accessor for BrowseSectionDescriptor() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(type metadata accessor for BrowseSectionDescriptor() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

uint64_t sub_23BE4EBA0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      if (a4)
        goto LABEL_26;
      result = 1;
      break;
    case 1:
      if (a4 != 1)
        goto LABEL_26;
      result = 1;
      break;
    case 2:
      if (a4 != 2)
        goto LABEL_26;
      result = 1;
      break;
    case 3:
      if (a4 != 3)
        goto LABEL_26;
      result = 1;
      break;
    case 4:
      if (a4 != 4)
        goto LABEL_26;
      result = 1;
      break;
    case 5:
      if (a4 != 5)
        goto LABEL_26;
      result = 1;
      break;
    case 6:
      if (a4 != 6)
        goto LABEL_26;
      result = 1;
      break;
    case 7:
      if (a4 != 7)
        goto LABEL_26;
      result = 1;
      break;
    case 8:
      if (a4 != 8)
        goto LABEL_26;
      result = 1;
      break;
    case 9:
      if (a4 != 9)
        goto LABEL_26;
      result = 1;
      break;
    default:
      if (a4 < 0xA)
      {
LABEL_26:
        result = 0;
      }
      else if (a1 == a3 && a2 == a4)
      {
        result = 1;
      }
      else
      {
        result = sub_23BE5AE58();
      }
      break;
  }
  return result;
}

uint64_t sub_23BE4EC8C(uint64_t a1, void (*a2)(_QWORD, char *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(_QWORD, char *);
  uint64_t v36;
  uint64_t v37;

  v35 = a2;
  v36 = a3;
  v4 = type metadata accessor for BrowseSectionDescriptor();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F40);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v34 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (_QWORD *)((char *)v29 - v12);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v29 - v14;
  v37 = MEMORY[0x24BEE4AF8];
  sub_23BE4EA10(0, 0, 0);
  v16 = a1;
  v17 = v37;
  v18 = *(_QWORD *)(v16 + 16);
  v19 = swift_bridgeObjectRetain();
  v33 = v18;
  v29[1] = v19;
  if (v18)
  {
    v20 = 0;
    v21 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v30 = *(_QWORD *)(v5 + 72);
    v31 = v21;
    v22 = v19 + v21;
    v32 = v7;
    do
    {
      v23 = (uint64_t)&v34[*(int *)(v8 + 48)];
      sub_23BDF23A0(v22, v23, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
      v24 = (uint64_t)v13 + *(int *)(v8 + 48);
      *v13 = v20;
      sub_23BDF2424(v23, v24, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
      sub_23BE013D8((uint64_t)v13, (uint64_t)v15, &qword_256AC8F40);
      v35(*(_QWORD *)v15, &v15[*(int *)(v8 + 48)]);
      sub_23BE000B8((uint64_t)v15, &qword_256AC8F40);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23BE4EA10(0, *(_QWORD *)(v17 + 16) + 1, 1);
        v17 = v37;
      }
      v26 = *(_QWORD *)(v17 + 16);
      v25 = *(_QWORD *)(v17 + 24);
      if (v26 >= v25 >> 1)
      {
        sub_23BE4EA10(v25 > 1, v26 + 1, 1);
        v17 = v37;
      }
      ++v20;
      *(_QWORD *)(v17 + 16) = v26 + 1;
      v27 = v30;
      sub_23BDF2424((uint64_t)v32, v17 + v31 + v26 * v30, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
      v22 += v27;
    }
    while (v33 != v20);
  }
  swift_bridgeObjectRelease();
  return v17;
}

unint64_t sub_23BE4EF00()
{
  unint64_t result;

  result = qword_256AC8E30;
  if (!qword_256AC8E30)
  {
    result = MEMORY[0x242612B20](&unk_23BE64CA0, &type metadata for BrowseFeature.TaskIdentifier);
    atomic_store(result, &qword_256AC8E30);
  }
  return result;
}

uint64_t sub_23BE4EF44()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(type metadata accessor for BrowseContent() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 192) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v3 = v0 + v2;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
LABEL_10:
      swift_bridgeObjectRelease();
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = v3 + *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
      v15 = sub_23BE5A678();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
      break;
    case 0:
      v5 = type metadata accessor for BrowseArtwork();
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v0 + v2, 1, v5))
      {
        v6 = sub_23BE5A720();
        v7 = *(_QWORD *)(v6 - 8);
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v2, 1, v6))
          (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v2, v6);
        v8 = v3 + *(int *)(v5 + 20);
        v9 = sub_23BE5A690();
        v10 = *(_QWORD *)(v9 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
          (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      }
      v11 = v3 + *(int *)(type metadata accessor for EditorialCollectionDetail() + 20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = v11 + *(int *)(type metadata accessor for EditorialCollection() + 32);
      v13 = sub_23BE5A690();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BE4F18C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(type metadata accessor for BrowseContent() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 192) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + 16;
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_23BE2174C;
  return sub_23BE4D7FC(a1, v6, v7, v8);
}

uint64_t sub_23BE4F220(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_23BE4F2EC()
{
  return objectdestroy_3Tm();
}

uint64_t sub_23BE4F2F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BE2174C;
  return sub_23BE4ACE4(a1, v1 + 16);
}

uint64_t sub_23BE4F348()
{
  return objectdestroy_3Tm();
}

uint64_t sub_23BE4F350(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BE2174C;
  return sub_23BE4B290(a1, v1 + 16);
}

uint64_t sub_23BE4F3A4()
{
  return objectdestroy_3Tm();
}

uint64_t sub_23BE4F3AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BE2174C;
  return sub_23BE4B744(a1, v1 + 16);
}

uint64_t sub_23BE4F400()
{
  return objectdestroy_3Tm();
}

uint64_t sub_23BE4F408(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BE2174C;
  return sub_23BE4BBE8(a1, v1 + 16);
}

uint64_t sub_23BE4F45C()
{
  return objectdestroy_3Tm();
}

uint64_t sub_23BE4F464(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BE2174C;
  return sub_23BE4C08C(a1, v1 + 16);
}

uint64_t sub_23BE4F4B8()
{
  return objectdestroy_3Tm();
}

uint64_t sub_23BE4F4C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BE2174C;
  return sub_23BE4C530(a1, v1 + 16);
}

uint64_t sub_23BE4F514()
{
  return objectdestroy_3Tm();
}

uint64_t sub_23BE4F51C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BE2174C;
  return sub_23BE4C9D4(a1, v1 + 16);
}

uint64_t sub_23BE4F570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_23BE5A678();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 216) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_23BE4F63C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_23BE5A678() - 8) + 80);
  v5 = v1 + 16;
  v6 = *(_QWORD *)(v1 + 200);
  v7 = *(_QWORD *)(v1 + 208);
  v8 = v1 + ((v4 + 216) & ~v4);
  v9 = *(unsigned __int8 *)(v1 + 192);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_23BE2174C;
  return sub_23BE4A808(a1, v5, v9, v6, v7, v8);
}

uint64_t sub_23BE4F6D4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BE4F750(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1 + 16;
  v6 = *(_QWORD *)(v1 + 192);
  v5 = *(_QWORD *)(v1 + 200);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_23BE210E8;
  return sub_23BE4A324(a1, v4, v6, v5);
}

uint64_t sub_23BE4F7B8(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for BrowseLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 40))(a2, a1, State);
  return a2;
}

uint64_t sub_23BE4F7FC()
{
  return objectdestroy_3Tm();
}

uint64_t sub_23BE4F804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  _QWORD *v6;

  v4 = v1 + 16;
  v5 = *(_BYTE *)(v1 + 192);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_23BE2174C;
  return sub_23BE49374(a1, v4, v5);
}

uint64_t sub_23BE4F868()
{
  return sub_23BDF23E4(&qword_256AC8F00, (uint64_t (*)(uint64_t))type metadata accessor for BrowseAction, (uint64_t)&protocol conformance descriptor for BrowseAction);
}

uint64_t sub_23BE4F894()
{
  return sub_23BDF23E4(&qword_256AC8F08, (uint64_t (*)(uint64_t))type metadata accessor for BrowseAction, (uint64_t)&protocol conformance descriptor for BrowseAction);
}

uint64_t sub_23BE4F8C0()
{
  return sub_23BDF23E4(&qword_256AC8F10, (uint64_t (*)(uint64_t))type metadata accessor for BrowseLocalState, (uint64_t)&protocol conformance descriptor for BrowseLocalState);
}

uint64_t sub_23BE4F8EC()
{
  return sub_23BDF23E4(&qword_256AC8F18, (uint64_t (*)(uint64_t))type metadata accessor for BrowseState, (uint64_t)&protocol conformance descriptor for BrowseState);
}

ValueMetadata *type metadata accessor for BrowseFeature()
{
  return &type metadata for BrowseFeature;
}

unint64_t destroy for BrowseFeature.TaskIdentifier(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s15FitnessBrowsing13BrowseFeatureV14TaskIdentifierOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for BrowseFeature.TaskIdentifier(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for BrowseFeature.TaskIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseFeature.TaskIdentifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF5 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483638);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 9;
  if (v4 >= 0xB)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BrowseFeature.TaskIdentifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF6)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483638;
    if (a3 >= 0x7FFFFFF6)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFF6)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 9;
  }
  return result;
}

uint64_t sub_23BE4FB40(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_23BE4FB58(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for BrowseFeature.TaskIdentifier()
{
  return &type metadata for BrowseFeature.TaskIdentifier;
}

unint64_t sub_23BE4FB8C()
{
  unint64_t result;

  result = qword_256AC8F20;
  if (!qword_256AC8F20)
  {
    result = MEMORY[0x242612B20](&unk_23BE64C78, &type metadata for BrowseFeature.TaskIdentifier);
    atomic_store(result, (unint64_t *)&qword_256AC8F20);
  }
  return result;
}

uint64_t sub_23BE4FBD0()
{
  return objectdestroy_3Tm();
}

uint64_t sub_23BE4FBD8()
{
  return objectdestroy_3Tm();
}

uint64_t objectdestroy_3Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

BOOL sub_23BE4FC60(uint64_t a1)
{
  return sub_23BE4A6F4(a1);
}

_QWORD *Array<A>.includingMarketingUpsellSectionDescriptors(isSubscribed:)(char a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t (*v24)();
  uint64_t v25;
  uint64_t v26;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *result;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  __int128 v64;
  _QWORD *v65;

  v4 = sub_23BE5A6E4();
  v61 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BrowseEditorialDescriptor();
  MEMORY[0x24BDAC7A8](v7);
  v62 = (uint64_t)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = 0;
  v9 = type metadata accessor for BrowseSectionDescriptor();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (void (*)(char *, uint64_t))((char *)&v52 - v14);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v52 - v17;
  if ((a1 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    return a2;
  }
  v57 = v4;
  v58 = v7;
  v19 = a2[2];
  v59 = v16;
  if (!v19)
  {
LABEL_15:
    sub_23BE5A6D8();
    v29 = v6;
    v30 = sub_23BE5A6CC();
    v32 = v31;
    v63 = *(void (**)(char *, uint64_t))(v61 + 8);
    v33 = v6;
    v34 = v57;
    v63(v33, v57);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7A48);
    v35 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BrowseLazyItem() - 8) + 80);
    v36 = (v35 + 32) & ~v35;
    v37 = swift_allocObject();
    v64 = xmmword_23BE61460;
    *(_OWORD *)(v37 + 16) = xmmword_23BE61460;
    v38 = v37 + v36;
    *(_BYTE *)v38 = 25;
    *(_OWORD *)(v38 + 24) = 0u;
    *(_OWORD *)(v38 + 8) = 0u;
    *(_QWORD *)(v38 + 40) = v30;
    *(_QWORD *)(v38 + 48) = v32;
    *(_QWORD *)(v38 + 56) = v30;
    *(_QWORD *)(v38 + 64) = v32;
    *(_BYTE *)(v38 + 72) = 7;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    sub_23BE5A6D8();
    v39 = sub_23BE5A6CC();
    v41 = v40;
    v63(v29, v34);
    v42 = &v12[*(int *)(v58 + 40)];
    sub_23BE5A660();
    v43 = sub_23BE5A678();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 0, 1, v43);
    sub_23BE5A660();
    *(_QWORD *)v12 = v37;
    v12[8] = 1;
    *(_WORD *)(v12 + 9) = 537;
    v12[11] = 25;
    *((_QWORD *)v12 + 2) = v39;
    *((_QWORD *)v12 + 3) = v41;
    v12[32] = 1;
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7A50);
    v44 = (*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
    v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = v64;
    sub_23BDF23A0((uint64_t)v12, v45 + v44, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
    v65 = (_QWORD *)v45;
    v46 = swift_bridgeObjectRetain();
    sub_23BE5076C(v46, (uint64_t (*)(void))sub_23BE213BC, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
    a2 = v65;
    sub_23BDF2468((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
    return a2;
  }
  v53 = v6;
  v54 = v12;
  v20 = (uint64_t)a2 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  *(_QWORD *)&v64 = *(_QWORD *)(v16 + 72);
  v56 = a2;
  swift_bridgeObjectRetain();
  v21 = v20;
  v55 = v19;
  v22 = v19;
  v23 = type metadata accessor for BrowseSectionDescriptor;
  v63 = v15;
  while (1)
  {
    sub_23BDF23A0(v21, (uint64_t)v18, (uint64_t (*)(_QWORD))v23);
    sub_23BDF23A0((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(_QWORD))v23);
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      sub_23BDF2468((uint64_t)v15, (uint64_t (*)(_QWORD))v23);
      sub_23BDF2468((uint64_t)v18, (uint64_t (*)(_QWORD))v23);
      goto LABEL_6;
    }
    v24 = v23;
    v25 = v62;
    sub_23BDF2424((uint64_t)v15, v62, (uint64_t (*)(_QWORD))type metadata accessor for BrowseEditorialDescriptor);
    if (BrowseDisplayStyle.rawValue.getter(*(_BYTE *)(v25 + 9)) == 0x6564616548626174 && v26 == 0xE900000000000072)
      break;
    v28 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    sub_23BDF2468(v25, (uint64_t (*)(_QWORD))type metadata accessor for BrowseEditorialDescriptor);
    v23 = v24;
    sub_23BDF2468((uint64_t)v18, (uint64_t (*)(_QWORD))v24);
    if ((v28 & 1) != 0)
      goto LABEL_17;
LABEL_6:
    v15 = v63;
    v21 += v64;
    if (!--v22)
    {
      swift_bridgeObjectRelease();
      v6 = v53;
      v12 = v54;
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease();
  sub_23BDF2468(v25, (uint64_t (*)(_QWORD))type metadata accessor for BrowseEditorialDescriptor);
  sub_23BDF2468((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
LABEL_17:
  swift_bridgeObjectRelease();
  v65 = (_QWORD *)MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v47 = 0;
  v48 = v55;
  v49 = v60;
  while (1)
  {
    v50 = v47 + 1;
    if (__OFADD__(v47, 1))
      break;
    sub_23BE501E4(&v65, v20);
    if (v49)
      goto LABEL_24;
    ++v47;
    v20 += v64;
    if (v50 == v48)
    {
      swift_bridgeObjectRelease();
      return v65;
    }
  }
  __break(1u);
LABEL_24:
  swift_bridgeObjectRelease();
  result = (_QWORD *)swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_23BE501E4(_QWORD **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t (*v26)();
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  _QWORD **v65;
  uint64_t v66;

  v65 = a1;
  v3 = type metadata accessor for BrowseLazyItem();
  v4 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  v60 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v63 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_23BE5A6E4();
  v6 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BrowseSectionDescriptor();
  v64 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v62 = (uint64_t)&v57 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v57 - v15;
  v58 = type metadata accessor for BrowseEditorialDescriptor();
  v17 = MEMORY[0x24BDAC7A8](v58);
  v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v57 - v20;
  sub_23BDF23A0(a2, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
  v61 = v9;
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    v26 = type metadata accessor for BrowseSectionDescriptor;
    v27 = (uint64_t)v16;
LABEL_11:
    sub_23BDF2468(v27, (uint64_t (*)(_QWORD))v26);
    goto LABEL_12;
  }
  sub_23BDF2424((uint64_t)v16, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for BrowseEditorialDescriptor);
  if (v21[8] != 1)
  {
    v26 = type metadata accessor for BrowseEditorialDescriptor;
    v27 = (uint64_t)v21;
    goto LABEL_11;
  }
  v22 = *(_QWORD *)v21;
  if (BrowseDisplayStyle.rawValue.getter(v21[9]) == 0x6564616548626174 && v23 == 0xE900000000000072)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = sub_23BE5AE58();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      sub_23BDF2468((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for BrowseEditorialDescriptor);
      swift_bridgeObjectRelease();
LABEL_12:
      sub_23BDF23A0(a2, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
      v28 = v65;
      v29 = *v65;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v31 = v64;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v29 = (_QWORD *)sub_23BE213BC(0, v29[2] + 1, 1, v29);
      v33 = v29[2];
      v32 = v29[3];
      if (v33 >= v32 >> 1)
        v29 = (_QWORD *)sub_23BE213BC(v32 > 1, v33 + 1, 1, v29);
      v29[2] = v33 + 1;
      result = sub_23BDF2424((uint64_t)v12, (uint64_t)v29+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v33, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
      *v28 = v29;
      return result;
    }
  }
  sub_23BE5A6D8();
  v35 = sub_23BE5A6CC();
  v37 = v36;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v57);
  v38 = v63;
  *v63 = 25;
  *(_OWORD *)(v38 + 8) = 0u;
  *(_OWORD *)(v38 + 24) = 0u;
  *((_QWORD *)v38 + 5) = v35;
  *((_QWORD *)v38 + 6) = v37;
  *((_QWORD *)v38 + 7) = v35;
  *((_QWORD *)v38 + 8) = v37;
  v38[72] = 7;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC7A48);
  v39 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_23BE61460;
  sub_23BDF23A0((uint64_t)v38, v40 + v39, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
  v66 = v40;
  swift_bridgeObjectRetain();
  sub_23BE5076C(v22, (uint64_t (*)(void))sub_23BE21558, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
  v41 = v66;
  v42 = *(_WORD *)(v21 + 9);
  v43 = v21[11];
  v45 = *((_QWORD *)v21 + 2);
  v44 = *((_QWORD *)v21 + 3);
  v46 = v58;
  sub_23BDF2358((uint64_t)&v21[*(int *)(v58 + 40)], (uint64_t)&v19[*(int *)(v58 + 40)]);
  v47 = *(int *)(v46 + 44);
  v48 = &v21[v47];
  v49 = &v19[v47];
  v50 = sub_23BE5A678();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v49, v48, v50);
  *(_QWORD *)v19 = v41;
  v19[8] = 1;
  *(_WORD *)(v19 + 9) = v42;
  v19[11] = v43;
  *((_QWORD *)v19 + 2) = v45;
  *((_QWORD *)v19 + 3) = v44;
  v19[32] = 1;
  v51 = v62;
  sub_23BDF23A0((uint64_t)v19, v62, (uint64_t (*)(_QWORD))type metadata accessor for BrowseEditorialDescriptor);
  swift_storeEnumTagMultiPayload();
  v52 = v65;
  v53 = *v65;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v53 = (_QWORD *)sub_23BE213BC(0, v53[2] + 1, 1, v53);
  v54 = v64;
  v56 = v53[2];
  v55 = v53[3];
  if (v56 >= v55 >> 1)
    v53 = (_QWORD *)sub_23BE213BC(v55 > 1, v56 + 1, 1, v53);
  v53[2] = v56 + 1;
  sub_23BDF2424(v51, (uint64_t)v53+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(_QWORD *)(v54 + 72) * v56, (uint64_t (*)(_QWORD))type metadata accessor for BrowseSectionDescriptor);
  *v52 = v53;
  sub_23BDF2468((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for BrowseEditorialDescriptor);
  sub_23BDF2468((uint64_t)v63, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
  return sub_23BDF2468((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for BrowseEditorialDescriptor);
}

uint64_t sub_23BE5076C(uint64_t result, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v4 = *(_QWORD *)(result + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v9 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_5;
    goto LABEL_10;
  }
  result = a2();
  v5 = result;
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_10:
    if (!v4)
      goto LABEL_11;
    goto LABEL_13;
  }
LABEL_5:
  v10 = (*(_QWORD *)(v5 + 24) >> 1) - *(_QWORD *)(v5 + 16);
  result = a3(0);
  if (v10 < v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_11:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v11 = *(_QWORD *)(v5 + 16);
  v12 = __OFADD__(v11, v4);
  v13 = v11 + v4;
  if (!v12)
  {
    *(_QWORD *)(v5 + 16) = v13;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_23BE5087C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C6F686563616C70;
  else
    return 1835365481;
}

uint64_t sub_23BE508B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE53AE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE508DC()
{
  sub_23BE50D94();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE50904()
{
  sub_23BE50D94();
  return sub_23BE5AF18();
}

uint64_t sub_23BE5092C()
{
  sub_23BE50E60();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE50954()
{
  sub_23BE50E60();
  return sub_23BE5AF18();
}

uint64_t sub_23BE5097C()
{
  sub_23BE50DD8();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE509A4()
{
  sub_23BE50DD8();
  return sub_23BE5AF18();
}

uint64_t BrowseLazyItem.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v24;
  _BYTE v25[12];
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F68);
  v32 = *(_QWORD *)(v2 - 8);
  v33 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v31 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F70);
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v28 = type metadata accessor for BrowseItem();
  MEMORY[0x24BDAC7A8](v28);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for BrowseLazyItem();
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8F78);
  v34 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v25[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE50D94();
  sub_23BE5AF00();
  sub_23BE34D0C(v45, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    LODWORD(v30) = *v11;
    v15 = *((_QWORD *)v11 + 1);
    v45 = *((_QWORD *)v11 + 2);
    v16 = v45;
    v17 = *((_QWORD *)v11 + 4);
    v28 = *((_QWORD *)v11 + 3);
    v29 = v15;
    v18 = *((_QWORD *)v11 + 6);
    v27 = *((_QWORD *)v11 + 5);
    v20 = *((_QWORD *)v11 + 7);
    v19 = *((_QWORD *)v11 + 8);
    v26 = v11[72];
    v35 = 1;
    sub_23BE50DD8();
    v21 = v31;
    sub_23BE5ADF8();
    v35 = v30;
    v36 = v29;
    v37 = v16;
    v38 = v28;
    v39 = v17;
    v40 = v27;
    v41 = v18;
    v42 = v20;
    v43 = v19;
    v44 = v26;
    sub_23BE50E1C();
    v22 = v33;
    sub_23BE5AE4C();
    (*(void (**)(_BYTE *, uint64_t))(v32 + 8))(v21, v22);
    (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v14, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BDF2424((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
    v35 = 0;
    sub_23BE50E60();
    sub_23BE5ADF8();
    sub_23BDF23E4(&qword_256AC8FA0, (uint64_t (*)(uint64_t))type metadata accessor for BrowseItem, (uint64_t)&protocol conformance descriptor for BrowseItem);
    v24 = v30;
    sub_23BE5AE4C();
    (*(void (**)(_BYTE *, uint64_t))(v29 + 8))(v6, v24);
    sub_23BDF2468((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v34 + 8))(v14, v12);
  }
}

uint64_t type metadata accessor for BrowseLazyItem()
{
  uint64_t result;

  result = qword_256AC9048;
  if (!qword_256AC9048)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BE50D94()
{
  unint64_t result;

  result = qword_256AC8F80;
  if (!qword_256AC8F80)
  {
    result = MEMORY[0x242612B20](&unk_23BE65170, &type metadata for BrowseLazyItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8F80);
  }
  return result;
}

unint64_t sub_23BE50DD8()
{
  unint64_t result;

  result = qword_256AC8F88;
  if (!qword_256AC8F88)
  {
    result = MEMORY[0x242612B20](&unk_23BE65120, &type metadata for BrowseLazyItem.PlaceholderCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8F88);
  }
  return result;
}

unint64_t sub_23BE50E1C()
{
  unint64_t result;

  result = qword_256AC8F90;
  if (!qword_256AC8F90)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseItemPlaceholder, &type metadata for BrowseItemPlaceholder);
    atomic_store(result, (unint64_t *)&qword_256AC8F90);
  }
  return result;
}

unint64_t sub_23BE50E60()
{
  unint64_t result;

  result = qword_256AC8F98;
  if (!qword_256AC8F98)
  {
    result = MEMORY[0x242612B20](&unk_23BE650D0, &type metadata for BrowseLazyItem.ItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC8F98);
  }
  return result;
}

uint64_t BrowseLazyItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  char v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;

  v43 = a2;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8FA8);
  v47 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v50 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8FB0);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v49 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8FB8);
  v48 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BrowseLazyItem();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v39 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v39 - v16;
  v18 = a1[3];
  v51 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_23BE50D94();
  v19 = v59;
  sub_23BE5AEF4();
  if (v19)
    goto LABEL_10;
  v42 = v15;
  v40 = v12;
  v21 = v49;
  v20 = v50;
  v41 = v17;
  v59 = v9;
  v22 = sub_23BE5ADEC();
  if (*(_QWORD *)(v22 + 16) != 1)
  {
    v31 = sub_23BE5AD68();
    swift_allocError();
    v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v33 = v59;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, *MEMORY[0x24BEE26D0], v31);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v6);
LABEL_10:
    v24 = (uint64_t)v51;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  if ((*(_BYTE *)(v22 + 32) & 1) != 0)
  {
    v52 = 1;
    sub_23BE50DD8();
    sub_23BE5AD80();
    sub_23BE51378();
    v23 = v44;
    sub_23BE5ADE0();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v20, v23);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v6);
    v24 = (uint64_t)v51;
    v25 = v56;
    v26 = v57;
    v27 = v58;
    v28 = v40;
    *v40 = v52;
    *(_OWORD *)(v28 + 8) = v53;
    v29 = v55;
    *(_OWORD *)(v28 + 24) = v54;
    *(_OWORD *)(v28 + 40) = v29;
    *((_QWORD *)v28 + 7) = v25;
    *((_QWORD *)v28 + 8) = v26;
    v28[72] = v27;
    swift_storeEnumTagMultiPayload();
    v30 = (uint64_t)v28;
  }
  else
  {
    v52 = 0;
    sub_23BE50E60();
    sub_23BE5AD80();
    type metadata accessor for BrowseItem();
    v35 = v21;
    sub_23BDF23E4(&qword_256AC8FC8, (uint64_t (*)(uint64_t))type metadata accessor for BrowseItem, (uint64_t)&protocol conformance descriptor for BrowseItem);
    v36 = (uint64_t)v42;
    v37 = v46;
    sub_23BE5ADE0();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v37);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v6);
    v24 = (uint64_t)v51;
    swift_storeEnumTagMultiPayload();
    v30 = v36;
  }
  v38 = (uint64_t)v41;
  sub_23BDF2424(v30, (uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
  sub_23BDF2424(v38, v43, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

unint64_t sub_23BE51378()
{
  unint64_t result;

  result = qword_256AC8FC0;
  if (!qword_256AC8FC0)
  {
    result = MEMORY[0x242612B20](&protocol conformance descriptor for BrowseItemPlaceholder, &type metadata for BrowseItemPlaceholder);
    atomic_store(result, (unint64_t *)&qword_256AC8FC0);
  }
  return result;
}

uint64_t sub_23BE513BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseLazyItem.init(from:)(a1, a2);
}

uint64_t sub_23BE513D0(_QWORD *a1)
{
  return BrowseLazyItem.encode(to:)(a1);
}

uint64_t BrowseLazyItem.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;

  v2 = v1;
  v4 = type metadata accessor for BrowseItem();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BrowseLazyItem();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (unsigned __int8 *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE34D0C(v2, (uint64_t)v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = *v9;
    v10 = *((_QWORD *)v9 + 2);
    v19 = *((_QWORD *)v9 + 1);
    v12 = *((_QWORD *)v9 + 3);
    v11 = *((_QWORD *)v9 + 4);
    v14 = *((_QWORD *)v9 + 5);
    v13 = *((_QWORD *)v9 + 6);
    v15 = *((_QWORD *)v9 + 7);
    v16 = *((_QWORD *)v9 + 8);
    v17 = v9[72];
    sub_23BE5AEC4();
    v21 = v20;
    v22 = v19;
    v23 = v10;
    v24 = v12;
    v25 = v11;
    v26 = v14;
    v27 = v13;
    v28 = v15;
    v29 = v16;
    v30 = v17;
    BrowseItemPlaceholder.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BDF2424((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
    sub_23BE5AEC4();
    BrowseItem.hash(into:)(a1);
    return sub_23BDF2468((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
  }
}

uint64_t BrowseLazyItem.hashValue.getter()
{
  _BYTE v1[72];

  sub_23BE5AEB8();
  BrowseLazyItem.hash(into:)((uint64_t)v1);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE515B0()
{
  _BYTE v1[72];

  sub_23BE5AEB8();
  BrowseLazyItem.hash(into:)((uint64_t)v1);
  return sub_23BE5AEE8();
}

uint64_t sub_23BE515F0()
{
  _BYTE v1[72];

  sub_23BE5AEB8();
  BrowseLazyItem.hash(into:)((uint64_t)v1);
  return sub_23BE5AEE8();
}

BOOL _s15FitnessBrowsing14BrowseLazyItemO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  BOOL v35;
  BOOL v36;
  _OWORD v38[2];
  char v39[8];
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;

  v4 = type metadata accessor for BrowseItem();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BrowseLazyItem();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v38 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6498);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (uint64_t)&v16[*(int *)(v14 + 48)];
  sub_23BE34D0C(a1, (uint64_t)v16);
  sub_23BE34D0C(a2, v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23BE34D0C((uint64_t)v16, (uint64_t)v10);
    v18 = *((_QWORD *)v10 + 2);
    v19 = *((_QWORD *)v10 + 4);
    v20 = *((_QWORD *)v10 + 6);
    v21 = *((_QWORD *)v10 + 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v22 = v10[72];
      v23 = *((_QWORD *)v10 + 7);
      v24 = *((_QWORD *)v10 + 5);
      v25 = *((_QWORD *)v10 + 3);
      v26 = *((_QWORD *)v10 + 1);
      v27 = *v10;
      v28 = *(_BYTE *)v17;
      v29 = *(_QWORD *)(v17 + 8);
      v31 = *(_QWORD *)(v17 + 48);
      v30 = *(_QWORD *)(v17 + 56);
      v32 = *(_QWORD *)(v17 + 64);
      v33 = *(_BYTE *)(v17 + 72);
      v47[0] = v27;
      v48 = v26;
      v49 = v18;
      v50 = v25;
      v51 = v19;
      v52 = v24;
      v53 = v20;
      v54 = v23;
      v55 = v21;
      v56 = v22;
      v39[0] = v28;
      v40 = v29;
      v34 = *(_OWORD *)(v17 + 32);
      v38[0] = *(_OWORD *)(v17 + 16);
      v38[1] = v34;
      v41 = v38[0];
      v42 = v34;
      v43 = v31;
      v44 = v30;
      v45 = v32;
      v46 = v33;
      _s15FitnessBrowsing21BrowseItemPlaceholderV2eeoiySbAC_ACtFZ_0((uint64_t)v47, (uint64_t)v39);
      v36 = v35;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_9:
      sub_23BDF2468((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
      return v36;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BE34D0C((uint64_t)v16, (uint64_t)v12);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_23BDF2424(v17, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
      v36 = static BrowseItem.== infix(_:_:)((uint64_t)v12, (uint64_t)v6);
      sub_23BDF2468((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
      sub_23BDF2468((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
      goto LABEL_9;
    }
    sub_23BDF2468((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for BrowseItem);
  }
  sub_23BDF24A4((uint64_t)v16);
  return 0;
}

uint64_t sub_23BE5191C()
{
  return sub_23BDF23E4(&qword_256AC8FD0, (uint64_t (*)(uint64_t))type metadata accessor for BrowseLazyItem, (uint64_t)&protocol conformance descriptor for BrowseLazyItem);
}

_QWORD *initializeBufferWithCopyOfBuffer for BrowseLazyItem(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(_QWORD *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v71;
  uint64_t v72;
  unsigned int (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v6 = a2[2];
      a1[1] = a2[1];
      a1[2] = v6;
      v7 = a2[4];
      a1[3] = a2[3];
      a1[4] = v7;
      v8 = a2[6];
      a1[5] = a2[5];
      a1[6] = v8;
      v9 = a2[8];
      a1[7] = a2[7];
      a1[8] = v9;
      *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v11 = sub_23BE5A678();
      v12 = *(_QWORD *)(v11 - 8);
      v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
      v72 = v12;
      if (v13((char *)a2, 1, v11))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(a1, a2, v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      v15 = (int *)type metadata accessor for BrowseItem();
      v16 = v15[5];
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
      if (swift_getEnumCaseMultiPayload() == 1)
        v19 = (uint64_t *)&unk_256AC6BF8;
      else
        v19 = (uint64_t *)&unk_256AC6BF0;
      v20 = __swift_instantiateConcreteTypeFromMangledName(v19);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
      swift_storeEnumTagMultiPayload();
      *(_QWORD *)((char *)a1 + v15[6]) = *(_QWORD *)((char *)a2 + v15[6]);
      *((_BYTE *)a1 + v15[7]) = *((_BYTE *)a2 + v15[7]);
      *((_BYTE *)a1 + v15[8]) = *((_BYTE *)a2 + v15[8]);
      v21 = v15[9];
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      swift_bridgeObjectRetain();
      v73 = v13;
      v74 = v11;
      if (v13(v23, 1, v11))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v22, v23, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v22, 0, 1, v11);
      }
      *((_BYTE *)a1 + v15[10]) = *((_BYTE *)a2 + v15[10]);
      *((_BYTE *)a1 + v15[11]) = *((_BYTE *)a2 + v15[11]);
      *(_QWORD *)((char *)a1 + v15[12]) = *(_QWORD *)((char *)a2 + v15[12]);
      v25 = v15[13];
      v26 = (_QWORD *)((char *)a1 + v25);
      v27 = (_QWORD *)((char *)a2 + v25);
      v28 = v27[1];
      *v26 = *v27;
      v26[1] = v28;
      v29 = v15[14];
      v30 = (_QWORD *)((char *)a1 + v29);
      v31 = (_QWORD *)((char *)a2 + v29);
      v32 = type metadata accessor for EditorialLink();
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v34(v31, 1, v32))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF8);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v30 = *(_OWORD *)v31;
        v30[2] = v31[2];
        v36 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
        v37 = (char *)v30 + v36;
        v71 = (char *)v31 + v36;
        v38 = sub_23BE5A690();
        v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
        swift_bridgeObjectRetain();
        v39(v37, v71, v38);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      *((_BYTE *)a1 + v15[15]) = *((_BYTE *)a2 + v15[15]);
      v40 = v15[16];
      v41 = (_QWORD *)((char *)a1 + v40);
      v42 = (_QWORD *)((char *)a2 + v40);
      v43 = v42[1];
      *v41 = *v42;
      v41[1] = v43;
      *((_BYTE *)a1 + v15[17]) = *((_BYTE *)a2 + v15[17]);
      v44 = v15[18];
      v45 = (char *)a1 + v44;
      v46 = (char *)a2 + v44;
      swift_bridgeObjectRetain();
      if (v73(v46, 1, v74))
      {
        v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v45, v46, v74);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v45, 0, 1, v74);
      }
      v48 = v15[19];
      v49 = (char *)a1 + v48;
      v50 = (char *)a2 + v48;
      v51 = *(_QWORD *)((char *)a2 + v48 + 40);
      if (v51 == 1)
      {
        v52 = *((_OWORD *)v50 + 1);
        *(_OWORD *)v49 = *(_OWORD *)v50;
        *((_OWORD *)v49 + 1) = v52;
        *((_OWORD *)v49 + 2) = *((_OWORD *)v50 + 2);
        v49[48] = v50[48];
      }
      else
      {
        v53 = v50[24];
        if (v53 == 255)
        {
          *(_OWORD *)v49 = *(_OWORD *)v50;
          *(_OWORD *)(v49 + 9) = *(_OWORD *)(v50 + 9);
        }
        else
        {
          v54 = *(_QWORD *)v50;
          v55 = *((_QWORD *)v50 + 1);
          v56 = *((_QWORD *)v50 + 2);
          sub_23BE01100(*(_QWORD *)v50, v55, v56, v50[24]);
          *(_QWORD *)v49 = v54;
          *((_QWORD *)v49 + 1) = v55;
          *((_QWORD *)v49 + 2) = v56;
          v49[24] = v53;
          v51 = *((_QWORD *)v50 + 5);
        }
        *((_QWORD *)v49 + 4) = *((_QWORD *)v50 + 4);
        *((_QWORD *)v49 + 5) = v51;
        v49[48] = v50[48];
        swift_bridgeObjectRetain();
      }
      v57 = v15[20];
      v58 = (char *)a1 + v57;
      v59 = (char *)a2 + v57;
      if (v73((char *)a2 + v57, 1, v74))
      {
        v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v58, v59, v74);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v58, 0, 1, v74);
      }
      v61 = v15[21];
      v62 = (char *)a1 + v61;
      v63 = (char *)a2 + v61;
      v64 = *(_QWORD *)((char *)a2 + v61 + 40);
      if (v64 == 1)
      {
        v65 = *((_OWORD *)v63 + 1);
        *(_OWORD *)v62 = *(_OWORD *)v63;
        *((_OWORD *)v62 + 1) = v65;
        *((_OWORD *)v62 + 2) = *((_OWORD *)v63 + 2);
        v62[48] = v63[48];
      }
      else
      {
        v66 = v63[24];
        if (v66 == 255)
        {
          *(_OWORD *)v62 = *(_OWORD *)v63;
          *(_OWORD *)(v62 + 9) = *(_OWORD *)(v63 + 9);
        }
        else
        {
          v67 = *(_QWORD *)v63;
          v68 = *((_QWORD *)v63 + 1);
          v69 = *((_QWORD *)v63 + 2);
          sub_23BE01100(*(_QWORD *)v63, v68, v69, v63[24]);
          *(_QWORD *)v62 = v67;
          *((_QWORD *)v62 + 1) = v68;
          *((_QWORD *)v62 + 2) = v69;
          v62[24] = v66;
          v64 = *((_QWORD *)v63 + 5);
        }
        *((_QWORD *)v62 + 4) = *((_QWORD *)v63 + 4);
        *((_QWORD *)v62 + 5) = v64;
        v62[48] = v63[48];
        swift_bridgeObjectRetain();
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for BrowseLazyItem(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  int *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  int v20;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v2 = sub_23BE5A678();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v4(a1, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  v5 = (int *)type metadata accessor for BrowseItem();
  v6 = a1 + v5[5];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
  if (swift_getEnumCaseMultiPayload() == 1)
    v7 = (uint64_t *)&unk_256AC6BF8;
  else
    v7 = (uint64_t *)&unk_256AC6BF0;
  v8 = __swift_instantiateConcreteTypeFromMangledName(v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  swift_bridgeObjectRelease();
  v9 = a1 + v5[9];
  if (!v4(v9, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v9, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = a1 + v5[14];
  v11 = type metadata accessor for EditorialLink();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    swift_bridgeObjectRelease();
    v12 = v10 + *(int *)(type metadata accessor for EditorialVideoLink() + 24);
    v13 = sub_23BE5A690();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  swift_bridgeObjectRelease();
  v14 = a1 + v5[18];
  if (!v4(v14, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v14, v2);
  v15 = a1 + v5[19];
  if (*(_QWORD *)(v15 + 40) != 1)
  {
    v16 = *(unsigned __int8 *)(v15 + 24);
    if (v16 != 255)
      sub_23BE02A4C(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 16), v16);
    swift_bridgeObjectRelease();
  }
  v17 = a1 + v5[20];
  if (!v4(v17, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v17, v2);
  v18 = a1 + v5[21];
  result = *(_QWORD *)(v18 + 40);
  if (result != 1)
  {
    v20 = *(unsigned __int8 *)(v18 + 24);
    if (v20 != 255)
      sub_23BE02A4C(*(_QWORD *)v18, *(_QWORD *)(v18 + 8), *(_QWORD *)(v18 + 16), v20);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for BrowseLazyItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(_QWORD *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v4 = a2[2];
    a1[1] = a2[1];
    a1[2] = v4;
    v5 = a2[4];
    a1[3] = a2[3];
    a1[4] = v5;
    v6 = a2[6];
    a1[5] = a2[5];
    a1[6] = v6;
    v7 = a2[8];
    a1[7] = a2[7];
    a1[8] = v7;
    *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = sub_23BE5A678();
    v9 = *(_QWORD *)(v8 - 8);
    v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    v69 = v9;
    if (v71((char *)a2, 1, v8))
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    v11 = (int *)type metadata accessor for BrowseItem();
    v12 = v11[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
    if (swift_getEnumCaseMultiPayload() == 1)
      v15 = (uint64_t *)&unk_256AC6BF8;
    else
      v15 = (uint64_t *)&unk_256AC6BF0;
    v16 = __swift_instantiateConcreteTypeFromMangledName(v15);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)((char *)a1 + v11[6]) = *(_QWORD *)((char *)a2 + v11[6]);
    *((_BYTE *)a1 + v11[7]) = *((_BYTE *)a2 + v11[7]);
    *((_BYTE *)a1 + v11[8]) = *((_BYTE *)a2 + v11[8]);
    v17 = v11[9];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    swift_bridgeObjectRetain();
    v70 = v8;
    if (v71(v19, 1, v8))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v18, v19, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
    }
    *((_BYTE *)a1 + v11[10]) = *((_BYTE *)a2 + v11[10]);
    *((_BYTE *)a1 + v11[11]) = *((_BYTE *)a2 + v11[11]);
    *(_QWORD *)((char *)a1 + v11[12]) = *(_QWORD *)((char *)a2 + v11[12]);
    v21 = v11[13];
    v22 = (_QWORD *)((char *)a1 + v21);
    v23 = (_QWORD *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = v11[14];
    v26 = (_QWORD *)((char *)a1 + v25);
    v27 = (_QWORD *)((char *)a2 + v25);
    v28 = type metadata accessor for EditorialLink();
    v29 = *(_QWORD *)(v28 - 8);
    v30 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v29 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v30(v27, 1, v28))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF8);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v26 = *(_OWORD *)v27;
      v26[2] = v27[2];
      v32 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
      v33 = (char *)v26 + v32;
      v68 = (char *)v27 + v32;
      v34 = sub_23BE5A690();
      v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
      swift_bridgeObjectRetain();
      v35(v33, v68, v34);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    v36 = v70;
    *((_BYTE *)a1 + v11[15]) = *((_BYTE *)a2 + v11[15]);
    v37 = v11[16];
    v38 = (_QWORD *)((char *)a1 + v37);
    v39 = (_QWORD *)((char *)a2 + v37);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    *((_BYTE *)a1 + v11[17]) = *((_BYTE *)a2 + v11[17]);
    v41 = v11[18];
    v42 = (char *)a1 + v41;
    v43 = (char *)a2 + v41;
    swift_bridgeObjectRetain();
    if (v71(v43, 1, v70))
    {
      v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v42, v43, v70);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v42, 0, 1, v70);
    }
    v45 = v11[19];
    v46 = (char *)a1 + v45;
    v47 = (char *)a2 + v45;
    v48 = *(_QWORD *)((char *)a2 + v45 + 40);
    if (v48 == 1)
    {
      v49 = *((_OWORD *)v47 + 1);
      *(_OWORD *)v46 = *(_OWORD *)v47;
      *((_OWORD *)v46 + 1) = v49;
      *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
      v46[48] = v47[48];
    }
    else
    {
      v50 = v47[24];
      if (v50 == 255)
      {
        *(_OWORD *)v46 = *(_OWORD *)v47;
        *(_OWORD *)(v46 + 9) = *(_OWORD *)(v47 + 9);
      }
      else
      {
        v51 = *(_QWORD *)v47;
        v52 = *((_QWORD *)v47 + 1);
        v53 = *((_QWORD *)v47 + 2);
        sub_23BE01100(*(_QWORD *)v47, v52, v53, v47[24]);
        *(_QWORD *)v46 = v51;
        *((_QWORD *)v46 + 1) = v52;
        v36 = v70;
        *((_QWORD *)v46 + 2) = v53;
        v46[24] = v50;
        v48 = *((_QWORD *)v47 + 5);
      }
      *((_QWORD *)v46 + 4) = *((_QWORD *)v47 + 4);
      *((_QWORD *)v46 + 5) = v48;
      v46[48] = v47[48];
      swift_bridgeObjectRetain();
    }
    v54 = v11[20];
    v55 = (char *)a1 + v54;
    v56 = (char *)a2 + v54;
    if (v71((char *)a2 + v54, 1, v36))
    {
      v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v55, v56, v36);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v55, 0, 1, v36);
    }
    v58 = v11[21];
    v59 = (char *)a1 + v58;
    v60 = (char *)a2 + v58;
    v61 = *(_QWORD *)((char *)a2 + v58 + 40);
    if (v61 == 1)
    {
      v62 = *((_OWORD *)v60 + 1);
      *(_OWORD *)v59 = *(_OWORD *)v60;
      *((_OWORD *)v59 + 1) = v62;
      *((_OWORD *)v59 + 2) = *((_OWORD *)v60 + 2);
      v59[48] = v60[48];
    }
    else
    {
      v63 = v60[24];
      if (v63 == 255)
      {
        *(_OWORD *)v59 = *(_OWORD *)v60;
        *(_OWORD *)(v59 + 9) = *(_OWORD *)(v60 + 9);
      }
      else
      {
        v64 = *(_QWORD *)v60;
        v65 = *((_QWORD *)v60 + 1);
        v66 = *((_QWORD *)v60 + 2);
        sub_23BE01100(*(_QWORD *)v60, v65, v66, v60[24]);
        *(_QWORD *)v59 = v64;
        *((_QWORD *)v59 + 1) = v65;
        *((_QWORD *)v59 + 2) = v66;
        v59[24] = v63;
        v61 = *((_QWORD *)v60 + 5);
      }
      *((_QWORD *)v59 + 4) = *((_QWORD *)v60 + 4);
      *((_QWORD *)v59 + 5) = v61;
      v59[48] = v60[48];
      swift_bridgeObjectRetain();
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for BrowseLazyItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(_QWORD *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(char *, uint64_t, uint64_t);

  if (a1 != a2)
  {
    sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v4 = sub_23BE5A678();
      v5 = *(_QWORD *)(v4 - 8);
      v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
      v67 = v5;
      if (v69((char *)a2, 1, v4))
      {
        v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, v4);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
      }
      v7 = (int *)type metadata accessor for BrowseItem();
      v8 = v7[5];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
      if (swift_getEnumCaseMultiPayload() == 1)
        v11 = (uint64_t *)&unk_256AC6BF8;
      else
        v11 = (uint64_t *)&unk_256AC6BF0;
      v12 = __swift_instantiateConcreteTypeFromMangledName(v11);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
      *(_QWORD *)((char *)a1 + v7[6]) = *(_QWORD *)((char *)a2 + v7[6]);
      *((_BYTE *)a1 + v7[7]) = *((_BYTE *)a2 + v7[7]);
      *((_BYTE *)a1 + v7[8]) = *((_BYTE *)a2 + v7[8]);
      v13 = v7[9];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      swift_bridgeObjectRetain();
      v68 = v4;
      if (v69(v15, 1, v4))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v14, v15, v4);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
      }
      *((_BYTE *)a1 + v7[10]) = *((_BYTE *)a2 + v7[10]);
      *((_BYTE *)a1 + v7[11]) = *((_BYTE *)a2 + v7[11]);
      *(_QWORD *)((char *)a1 + v7[12]) = *(_QWORD *)((char *)a2 + v7[12]);
      v17 = v7[13];
      v18 = (_QWORD *)((char *)a1 + v17);
      v19 = (_QWORD *)((char *)a2 + v17);
      *v18 = *v19;
      v18[1] = v19[1];
      v20 = v7[14];
      v21 = (_QWORD *)((char *)a1 + v20);
      v22 = (_QWORD *)((char *)a2 + v20);
      v23 = type metadata accessor for EditorialLink();
      v24 = *(_QWORD *)(v23 - 8);
      v25 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v24 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v25(v22, 1, v23))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF8);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        *v21 = *v22;
        v21[1] = v22[1];
        v21[2] = v22[2];
        v27 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
        v28 = (char *)v21 + v27;
        v66 = (char *)v22 + v27;
        v29 = sub_23BE5A690();
        v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
        swift_bridgeObjectRetain();
        v30(v28, v66, v29);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      v31 = v68;
      *((_BYTE *)a1 + v7[15]) = *((_BYTE *)a2 + v7[15]);
      v32 = v7[16];
      v33 = (_QWORD *)((char *)a1 + v32);
      v34 = (_QWORD *)((char *)a2 + v32);
      *v33 = *v34;
      v33[1] = v34[1];
      *((_BYTE *)a1 + v7[17]) = *((_BYTE *)a2 + v7[17]);
      v35 = v7[18];
      v36 = (char *)a1 + v35;
      v37 = (char *)a2 + v35;
      swift_bridgeObjectRetain();
      if (v69(v37, 1, v68))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v36, v37, v68);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v36, 0, 1, v68);
      }
      v39 = v7[19];
      v40 = (char *)a1 + v39;
      v41 = (char *)a2 + v39;
      if (*(_QWORD *)((char *)a2 + v39 + 40) == 1)
      {
        v42 = *(_OWORD *)v41;
        v43 = *((_OWORD *)v41 + 1);
        v44 = *((_OWORD *)v41 + 2);
        v40[48] = v41[48];
        *((_OWORD *)v40 + 1) = v43;
        *((_OWORD *)v40 + 2) = v44;
        *(_OWORD *)v40 = v42;
      }
      else
      {
        v45 = v41[24];
        if (v45 == 255)
        {
          v49 = *(_OWORD *)v41;
          *(_OWORD *)(v40 + 9) = *(_OWORD *)(v41 + 9);
          *(_OWORD *)v40 = v49;
        }
        else
        {
          v46 = *(_QWORD *)v41;
          v47 = *((_QWORD *)v41 + 1);
          v48 = *((_QWORD *)v41 + 2);
          sub_23BE01100(*(_QWORD *)v41, v47, v48, v41[24]);
          *(_QWORD *)v40 = v46;
          *((_QWORD *)v40 + 1) = v47;
          v31 = v68;
          *((_QWORD *)v40 + 2) = v48;
          v40[24] = v45;
        }
        *((_QWORD *)v40 + 4) = *((_QWORD *)v41 + 4);
        *((_QWORD *)v40 + 5) = *((_QWORD *)v41 + 5);
        v40[48] = v41[48];
        swift_bridgeObjectRetain();
      }
      v50 = v7[20];
      v51 = (char *)a1 + v50;
      v52 = (char *)a2 + v50;
      if (v69((char *)a2 + v50, 1, v31))
      {
        v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v51, v52, v31);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v51, 0, 1, v31);
      }
      v54 = v7[21];
      v55 = (char *)a1 + v54;
      v56 = (char *)a2 + v54;
      if (*(_QWORD *)((char *)a2 + v54 + 40) == 1)
      {
        v57 = *(_OWORD *)v56;
        v58 = *((_OWORD *)v56 + 1);
        v59 = *((_OWORD *)v56 + 2);
        v55[48] = v56[48];
        *((_OWORD *)v55 + 1) = v58;
        *((_OWORD *)v55 + 2) = v59;
        *(_OWORD *)v55 = v57;
      }
      else
      {
        v60 = v56[24];
        if (v60 == 255)
        {
          v64 = *(_OWORD *)v56;
          *(_OWORD *)(v55 + 9) = *(_OWORD *)(v56 + 9);
          *(_OWORD *)v55 = v64;
        }
        else
        {
          v61 = *(_QWORD *)v56;
          v62 = *((_QWORD *)v56 + 1);
          v63 = *((_QWORD *)v56 + 2);
          sub_23BE01100(*(_QWORD *)v56, v62, v63, v56[24]);
          *(_QWORD *)v55 = v61;
          *((_QWORD *)v55 + 1) = v62;
          *((_QWORD *)v55 + 2) = v63;
          v55[24] = v60;
        }
        *((_QWORD *)v55 + 4) = *((_QWORD *)v56 + 4);
        *((_QWORD *)v55 + 5) = *((_QWORD *)v56 + 5);
        v55[48] = v56[48];
        swift_bridgeObjectRetain();
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for BrowseLazyItem(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t);

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_23BE5A678();
    v7 = *(_QWORD *)(v6 - 8);
    v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
    if (v49(a2, 1, v6))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    v9 = (int *)type metadata accessor for BrowseItem();
    v10 = v9[5];
    v11 = &a1[v10];
    v12 = &a2[v10];
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
    if (swift_getEnumCaseMultiPayload() == 1)
      v13 = (uint64_t *)&unk_256AC6BF8;
    else
      v13 = (uint64_t *)&unk_256AC6BF0;
    v14 = __swift_instantiateConcreteTypeFromMangledName(v13);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)&a1[v9[6]] = *(_QWORD *)&a2[v9[6]];
    a1[v9[7]] = a2[v9[7]];
    a1[v9[8]] = a2[v9[8]];
    v15 = v9[9];
    v16 = &a1[v15];
    v17 = &a2[v15];
    v18 = v49;
    v48 = v7;
    if (v49(&a2[v15], 1, v6))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v16, v17, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
    }
    a1[v9[10]] = a2[v9[10]];
    a1[v9[11]] = a2[v9[11]];
    *(_QWORD *)&a1[v9[12]] = *(_QWORD *)&a2[v9[12]];
    *(_OWORD *)&a1[v9[13]] = *(_OWORD *)&a2[v9[13]];
    v20 = v9[14];
    v21 = &a1[v20];
    v22 = &a2[v20];
    v23 = type metadata accessor for EditorialLink();
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF8);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *(_OWORD *)(v21 + 8) = *(_OWORD *)(v22 + 8);
      v26 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
      v27 = &v21[v26];
      v28 = &v22[v26];
      v29 = sub_23BE5A690();
      v30 = v27;
      v18 = v49;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v30, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    a1[v9[15]] = a2[v9[15]];
    *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
    a1[v9[17]] = a2[v9[17]];
    v31 = v9[18];
    v32 = &a1[v31];
    v33 = &a2[v31];
    if (v18(&a2[v31], 1, v6))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v32, v33, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v32, 0, 1, v6);
    }
    v35 = v9[19];
    v36 = &a1[v35];
    v37 = &a2[v35];
    v38 = *((_OWORD *)v37 + 1);
    *(_OWORD *)v36 = *(_OWORD *)v37;
    *((_OWORD *)v36 + 1) = v38;
    *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
    v36[48] = v37[48];
    v39 = v9[20];
    v40 = &a1[v39];
    v41 = &a2[v39];
    if (v18(&a2[v39], 1, v6))
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v40, v41, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v40, 0, 1, v6);
    }
    v43 = v9[21];
    v44 = &a1[v43];
    v45 = &a2[v43];
    v46 = *((_OWORD *)v45 + 1);
    *(_OWORD *)v44 = *(_OWORD *)v45;
    *((_OWORD *)v44 + 1) = v46;
    *((_OWORD *)v44 + 2) = *((_OWORD *)v45 + 2);
    v44[48] = v45[48];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for BrowseLazyItem(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t);

  if (a1 != a2)
  {
    sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseLazyItem);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23BE5A678();
      v7 = *(_QWORD *)(v6 - 8);
      v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
      if (v49(a2, 1, v6))
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      v9 = (int *)type metadata accessor for BrowseItem();
      v10 = v9[5];
      v11 = &a1[v10];
      v12 = &a2[v10];
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6490);
      if (swift_getEnumCaseMultiPayload() == 1)
        v13 = (uint64_t *)&unk_256AC6BF8;
      else
        v13 = (uint64_t *)&unk_256AC6BF0;
      v14 = __swift_instantiateConcreteTypeFromMangledName(v13);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload();
      *(_QWORD *)&a1[v9[6]] = *(_QWORD *)&a2[v9[6]];
      a1[v9[7]] = a2[v9[7]];
      a1[v9[8]] = a2[v9[8]];
      v15 = v9[9];
      v16 = &a1[v15];
      v17 = &a2[v15];
      v18 = v49;
      v48 = v7;
      if (v49(&a2[v15], 1, v6))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v16, v17, v6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
      }
      a1[v9[10]] = a2[v9[10]];
      a1[v9[11]] = a2[v9[11]];
      *(_QWORD *)&a1[v9[12]] = *(_QWORD *)&a2[v9[12]];
      *(_OWORD *)&a1[v9[13]] = *(_OWORD *)&a2[v9[13]];
      v20 = v9[14];
      v21 = &a1[v20];
      v22 = &a2[v20];
      v23 = type metadata accessor for EditorialLink();
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6AF8);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v21 = *(_QWORD *)v22;
        *(_OWORD *)(v21 + 8) = *(_OWORD *)(v22 + 8);
        v26 = *(int *)(type metadata accessor for EditorialVideoLink() + 24);
        v27 = &v21[v26];
        v28 = &v22[v26];
        v29 = sub_23BE5A690();
        v30 = v27;
        v18 = v49;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v30, v28, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      a1[v9[15]] = a2[v9[15]];
      *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
      a1[v9[17]] = a2[v9[17]];
      v31 = v9[18];
      v32 = &a1[v31];
      v33 = &a2[v31];
      if (v18(&a2[v31], 1, v6))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v32, v33, v6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v32, 0, 1, v6);
      }
      v35 = v9[19];
      v36 = &a1[v35];
      v37 = &a2[v35];
      v38 = *((_OWORD *)v37 + 1);
      *(_OWORD *)v36 = *(_OWORD *)v37;
      *((_OWORD *)v36 + 1) = v38;
      *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
      v36[48] = v37[48];
      v39 = v9[20];
      v40 = &a1[v39];
      v41 = &a2[v39];
      if (v18(&a2[v39], 1, v6))
      {
        v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v40, v41, v6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v40, 0, 1, v6);
      }
      v43 = v9[21];
      v44 = &a1[v43];
      v45 = &a2[v43];
      v46 = *((_OWORD *)v45 + 1);
      *(_OWORD *)v44 = *(_OWORD *)v45;
      *((_OWORD *)v44 + 1) = v46;
      *((_OWORD *)v44 + 2) = *((_OWORD *)v45 + 2);
      v44[48] = v45[48];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_23BE53678()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BrowseItem();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrowseLazyItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BE53730 + 4 * byte_23BE64D75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BE53764 + 4 * byte_23BE64D70[v4]))();
}

uint64_t sub_23BE53764(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE5376C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE53774);
  return result;
}

uint64_t sub_23BE53780(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE53788);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BE5378C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE53794(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseLazyItem.CodingKeys()
{
  return &type metadata for BrowseLazyItem.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowseLazyItem.ItemCodingKeys()
{
  return &type metadata for BrowseLazyItem.ItemCodingKeys;
}

uint64_t _s15FitnessBrowsing14BrowseLazyItemO14ItemCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BE53804 + 4 * byte_23BE64D7A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BE53824 + 4 * byte_23BE64D7F[v4]))();
}

_BYTE *sub_23BE53804(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BE53824(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE5382C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE53834(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE5383C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE53844(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BrowseLazyItem.PlaceholderCodingKeys()
{
  return &type metadata for BrowseLazyItem.PlaceholderCodingKeys;
}

unint64_t sub_23BE53864()
{
  unint64_t result;

  result = qword_256AC9080;
  if (!qword_256AC9080)
  {
    result = MEMORY[0x242612B20](&unk_23BE64F38, &type metadata for BrowseLazyItem.PlaceholderCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9080);
  }
  return result;
}

unint64_t sub_23BE538AC()
{
  unint64_t result;

  result = qword_256AC9088;
  if (!qword_256AC9088)
  {
    result = MEMORY[0x242612B20](&unk_23BE64FF0, &type metadata for BrowseLazyItem.ItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9088);
  }
  return result;
}

unint64_t sub_23BE538F4()
{
  unint64_t result;

  result = qword_256AC9090;
  if (!qword_256AC9090)
  {
    result = MEMORY[0x242612B20](&unk_23BE650A8, &type metadata for BrowseLazyItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9090);
  }
  return result;
}

unint64_t sub_23BE5393C()
{
  unint64_t result;

  result = qword_256AC9098;
  if (!qword_256AC9098)
  {
    result = MEMORY[0x242612B20](&unk_23BE64F60, &type metadata for BrowseLazyItem.ItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9098);
  }
  return result;
}

unint64_t sub_23BE53984()
{
  unint64_t result;

  result = qword_256AC90A0;
  if (!qword_256AC90A0)
  {
    result = MEMORY[0x242612B20](&unk_23BE64F88, &type metadata for BrowseLazyItem.ItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC90A0);
  }
  return result;
}

unint64_t sub_23BE539CC()
{
  unint64_t result;

  result = qword_256AC90A8;
  if (!qword_256AC90A8)
  {
    result = MEMORY[0x242612B20](&unk_23BE64EA8, &type metadata for BrowseLazyItem.PlaceholderCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC90A8);
  }
  return result;
}

unint64_t sub_23BE53A14()
{
  unint64_t result;

  result = qword_256AC90B0;
  if (!qword_256AC90B0)
  {
    result = MEMORY[0x242612B20](&unk_23BE64ED0, &type metadata for BrowseLazyItem.PlaceholderCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC90B0);
  }
  return result;
}

unint64_t sub_23BE53A5C()
{
  unint64_t result;

  result = qword_256AC90B8;
  if (!qword_256AC90B8)
  {
    result = MEMORY[0x242612B20](&unk_23BE65018, &type metadata for BrowseLazyItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC90B8);
  }
  return result;
}

unint64_t sub_23BE53AA4()
{
  unint64_t result;

  result = qword_256AC90C0;
  if (!qword_256AC90C0)
  {
    result = MEMORY[0x242612B20](&unk_23BE65040, &type metadata for BrowseLazyItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC90C0);
  }
  return result;
}

uint64_t sub_23BE53AE8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1835365481 && a2 == 0xE400000000000000;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F686563616C70 && a2 == 0xEB00000000726564)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t BrowseDetailTextItem.attributedSummary.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BDF2358(v1, a1);
}

uint64_t BrowseDetailTextItem.attributedTitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for BrowseDetailTextItem() + 20);
  return sub_23BDF2358(v3, a1);
}

uint64_t BrowseDetailTextItem.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BrowseDetailTextItem() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BrowseDetailTextItem.init(identifier:attributedSummary:attributedTitle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;

  v10 = type metadata accessor for BrowseDetailTextItem();
  v11 = (_QWORD *)(a5 + *(int *)(v10 + 24));
  *v11 = a1;
  v11[1] = a2;
  sub_23BE23118(a3, a5);
  return sub_23BE23118(a4, a5 + *(int *)(v10 + 20));
}

unint64_t sub_23BE53CC8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7475626972747461;
  if (*v0 != 1)
    v1 = 0x696669746E656469;
  if (*v0)
    return v1;
  else
    return 0xD000000000000011;
}

uint64_t sub_23BE53D38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE55D30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE53D5C()
{
  sub_23BE550D4();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE53D84()
{
  sub_23BE550D4();
  return sub_23BE5AF18();
}

uint64_t BrowseDetailTextItem.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char v9;
  char v10;
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC90C8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE550D4();
  sub_23BE5AF00();
  v11 = 0;
  sub_23BE5A678();
  sub_23BDF23E4(&qword_256AC6B10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5B8]);
  sub_23BE5AE1C();
  if (!v1)
  {
    type metadata accessor for BrowseDetailTextItem();
    v10 = 1;
    sub_23BE5AE1C();
    v9 = 2;
    sub_23BE5AE28();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t BrowseDetailTextItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  char v31;
  char v32;

  v26 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v27 = (char *)&v24 - v8;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC90D8);
  v9 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BrowseDetailTextItem();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v29 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  sub_23BE550D4();
  sub_23BE5AEF4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  v24 = v14;
  v25 = v9;
  sub_23BE5A678();
  v32 = 0;
  sub_23BDF23E4(&qword_256AC6B88, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5D0]);
  v16 = (uint64_t)v27;
  v17 = v28;
  sub_23BE5ADB0();
  sub_23BE23118(v16, (uint64_t)v24);
  v31 = 1;
  sub_23BE5ADB0();
  v18 = (uint64_t)v24;
  sub_23BE23118((uint64_t)v7, (uint64_t)&v24[*(int *)(v12 + 20)]);
  v30 = 2;
  v19 = sub_23BE5ADBC();
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v17);
  v22 = (uint64_t *)(v18 + *(int *)(v12 + 24));
  *v22 = v19;
  v22[1] = v21;
  sub_23BE55118(v18, v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return sub_23BE5515C(v18);
}

uint64_t sub_23BE5424C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseDetailTextItem.init(from:)(a1, a2);
}

uint64_t sub_23BE54260(_QWORD *a1)
{
  return BrowseDetailTextItem.encode(to:)(a1);
}

uint64_t BrowseDetailTextItem.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v15;

  v1 = v0;
  v2 = sub_23BE5A678();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v15 - v10;
  sub_23BDF2358(v1, (uint64_t)&v15 - v10);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v12(v11, 1, v2) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v11, v2);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v13 = type metadata accessor for BrowseDetailTextItem();
  sub_23BDF2358(v1 + *(int *)(v13 + 20), (uint64_t)v9);
  if (v12(v9, 1, v2) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  swift_bridgeObjectRetain();
  sub_23BE5AC9C();
  return swift_bridgeObjectRelease();
}

uint64_t BrowseDetailTextItem.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v15;

  v1 = v0;
  v2 = sub_23BE5A678();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v15 - v10;
  sub_23BE5AEB8();
  sub_23BDF2358(v1, (uint64_t)v11);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v12(v11, 1, v2) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v11, v2);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v13 = type metadata accessor for BrowseDetailTextItem();
  sub_23BDF2358(v1 + *(int *)(v13 + 20), (uint64_t)v9);
  if (v12(v9, 1, v2) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  sub_23BE5AC9C();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE546DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v17;

  v4 = v2;
  v5 = sub_23BE5A678();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v17 - v13;
  sub_23BDF2358(v4, (uint64_t)&v17 - v13);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v15(v14, 1, v5) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v14, v5);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  sub_23BDF2358(v4 + *(int *)(a2 + 20), (uint64_t)v12);
  if (v15(v12, 1, v5) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return sub_23BE5AC9C();
}

uint64_t sub_23BE548F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v17;

  v4 = v2;
  v5 = sub_23BE5A678();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v17 - v13;
  sub_23BE5AEB8();
  sub_23BDF2358(v4, (uint64_t)v14);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v15(v14, 1, v5) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v14, v5);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  sub_23BDF2358(v4 + *(int *)(a2 + 20), (uint64_t)v12);
  if (v15(v12, 1, v5) == 1)
  {
    sub_23BE5AED0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
    sub_23BE5AED0();
    sub_23BDF23E4(&qword_256AC6480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
    sub_23BE5AC30();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  sub_23BE5AC9C();
  return sub_23BE5AEE8();
}

uint64_t _s15FitnessBrowsing20BrowseDetailTextItemV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  void (*v33)(_BYTE *, uint64_t);
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  char v40;
  uint64_t v42;
  char v43;
  uint64_t v44;
  void (*v45)(_BYTE *, uint64_t);
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _BYTE v50[4];
  int v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;

  v4 = sub_23BE5A678();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v50[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D20);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v54 = &v50[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v50[-v11];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v52 = &v50[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x24BDAC7A8](v14);
  v57 = &v50[-v17];
  v18 = MEMORY[0x24BDAC7A8](v16);
  v53 = &v50[-v19];
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = &v50[-v21];
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = &v50[-v24];
  MEMORY[0x24BDAC7A8](v23);
  v27 = &v50[-v26];
  v56 = a1;
  sub_23BDF2358(a1, (uint64_t)&v50[-v26]);
  v55 = a2;
  sub_23BDF2358(a2, (uint64_t)v25);
  v28 = (uint64_t)&v12[*(int *)(v8 + 48)];
  sub_23BDF2358((uint64_t)v27, (uint64_t)v12);
  sub_23BDF2358((uint64_t)v25, v28);
  v58 = v5;
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v29((uint64_t)v12, 1, v4) == 1)
  {
    sub_23BE000B8((uint64_t)v25, &qword_256AC6478);
    sub_23BE000B8((uint64_t)v27, &qword_256AC6478);
    if (v29(v28, 1, v4) == 1)
    {
      sub_23BE000B8((uint64_t)v12, &qword_256AC6478);
      goto LABEL_8;
    }
LABEL_6:
    v30 = (uint64_t)v12;
LABEL_14:
    sub_23BE000B8(v30, &qword_256AC6D20);
    goto LABEL_15;
  }
  sub_23BDF2358((uint64_t)v12, (uint64_t)v22);
  if (v29(v28, 1, v4) == 1)
  {
    sub_23BE000B8((uint64_t)v25, &qword_256AC6478);
    sub_23BE000B8((uint64_t)v27, &qword_256AC6478);
    (*(void (**)(_BYTE *, uint64_t))(v58 + 8))(v22, v4);
    goto LABEL_6;
  }
  v31 = v7;
  v32 = v58;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v58 + 32))(v31, v28, v4);
  sub_23BDF23E4(&qword_256AC6D28, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C8]);
  v51 = sub_23BE5AC3C();
  v33 = *(void (**)(_BYTE *, uint64_t))(v32 + 8);
  v7 = v31;
  v33(v31, v4);
  sub_23BE000B8((uint64_t)v25, &qword_256AC6478);
  sub_23BE000B8((uint64_t)v27, &qword_256AC6478);
  v33(v22, v4);
  sub_23BE000B8((uint64_t)v12, &qword_256AC6478);
  if ((v51 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v34 = type metadata accessor for BrowseDetailTextItem();
  v35 = v53;
  sub_23BDF2358(v56 + *(int *)(v34 + 20), (uint64_t)v53);
  v36 = v57;
  sub_23BDF2358(v55 + *(int *)(v34 + 20), (uint64_t)v57);
  v37 = v54;
  v38 = (uint64_t)&v54[*(int *)(v8 + 48)];
  sub_23BDF2358((uint64_t)v35, (uint64_t)v54);
  sub_23BDF2358((uint64_t)v36, v38);
  if (v29((uint64_t)v37, 1, v4) != 1)
  {
    v39 = v52;
    sub_23BDF2358((uint64_t)v37, (uint64_t)v52);
    if (v29(v38, 1, v4) == 1)
    {
      sub_23BE000B8((uint64_t)v57, &qword_256AC6478);
      sub_23BE000B8((uint64_t)v35, &qword_256AC6478);
      (*(void (**)(_BYTE *, uint64_t))(v58 + 8))(v39, v4);
      goto LABEL_13;
    }
    v42 = v58;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v58 + 32))(v7, v38, v4);
    sub_23BDF23E4(&qword_256AC6D28, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C8]);
    v43 = sub_23BE5AC3C();
    v44 = (uint64_t)v35;
    v45 = *(void (**)(_BYTE *, uint64_t))(v42 + 8);
    v45(v7, v4);
    sub_23BE000B8((uint64_t)v57, &qword_256AC6478);
    sub_23BE000B8(v44, &qword_256AC6478);
    v45(v39, v4);
    sub_23BE000B8((uint64_t)v37, &qword_256AC6478);
    if ((v43 & 1) != 0)
      goto LABEL_18;
LABEL_15:
    v40 = 0;
    return v40 & 1;
  }
  sub_23BE000B8((uint64_t)v36, &qword_256AC6478);
  sub_23BE000B8((uint64_t)v35, &qword_256AC6478);
  if (v29(v38, 1, v4) != 1)
  {
LABEL_13:
    v30 = (uint64_t)v37;
    goto LABEL_14;
  }
  sub_23BE000B8((uint64_t)v37, &qword_256AC6478);
LABEL_18:
  v46 = *(int *)(v34 + 24);
  v47 = (_QWORD *)(v56 + v46);
  v48 = *(_QWORD *)(v56 + v46 + 8);
  v49 = (_QWORD *)(v55 + v46);
  if (*v47 == *v49 && v48 == v49[1])
    v40 = 1;
  else
    v40 = sub_23BE5AE58();
  return v40 & 1;
}

uint64_t type metadata accessor for BrowseDetailTextItem()
{
  uint64_t result;

  result = qword_256AC9140;
  if (!qword_256AC9140)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BE550D4()
{
  unint64_t result;

  result = qword_256AC90D0;
  if (!qword_256AC90D0)
  {
    result = MEMORY[0x242612B20](&unk_23BE65394, &type metadata for BrowseDetailTextItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC90D0);
  }
  return result;
}

uint64_t sub_23BE55118(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseDetailTextItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BE5515C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BrowseDetailTextItem();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BE55198()
{
  return sub_23BDF23E4(&qword_256AC90E0, (uint64_t (*)(uint64_t))type metadata accessor for BrowseDetailTextItem, (uint64_t)&protocol conformance descriptor for BrowseDetailTextItem);
}

uint64_t *initializeBufferWithCopyOfBuffer for BrowseDetailTextItem(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23BE5A678();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = *(int *)(a3 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    if (v9((uint64_t *)((char *)a2 + v12), 1, v7))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
    v16 = *(int *)(a3 + 24);
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for BrowseDetailTextItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  v4 = sub_23BE5A678();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + *(int *)(a2 + 20);
  if (!v6(v7, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for BrowseDetailTextItem(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = sub_23BE5A678();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = *(int *)(a3 + 24);
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = v17;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for BrowseDetailTextItem(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v6 = sub_23BE5A678();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_13:
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for BrowseDetailTextItem(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = sub_23BE5A678();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *assignWithTake for BrowseDetailTextItem(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_23BE5A678();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_13:
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  v22 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v19 = v22;
  *((_QWORD *)v19 + 1) = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BrowseDetailTextItem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE55A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for BrowseDetailTextItem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BE55A98(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6478);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

void sub_23BE55B18()
{
  unint64_t v0;

  sub_23BE23CF0();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for BrowseDetailTextItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BE55BD8 + 4 * byte_23BE651C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BE55C0C + 4 * byte_23BE651C0[v4]))();
}

uint64_t sub_23BE55C0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE55C14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE55C1CLL);
  return result;
}

uint64_t sub_23BE55C28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE55C30);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BE55C34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE55C3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseDetailTextItem.CodingKeys()
{
  return &type metadata for BrowseDetailTextItem.CodingKeys;
}

unint64_t sub_23BE55C5C()
{
  unint64_t result;

  result = qword_256AC9180;
  if (!qword_256AC9180)
  {
    result = MEMORY[0x242612B20](&unk_23BE6536C, &type metadata for BrowseDetailTextItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9180);
  }
  return result;
}

unint64_t sub_23BE55CA4()
{
  unint64_t result;

  result = qword_256AC9188;
  if (!qword_256AC9188)
  {
    result = MEMORY[0x242612B20](&unk_23BE652DC, &type metadata for BrowseDetailTextItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9188);
  }
  return result;
}

unint64_t sub_23BE55CEC()
{
  unint64_t result;

  result = qword_256AC9190;
  if (!qword_256AC9190)
  {
    result = MEMORY[0x242612B20](&unk_23BE65304, &type metadata for BrowseDetailTextItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9190);
  }
  return result;
}

uint64_t sub_23BE55D30(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x800000023BE66590 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7475626972747461 && a2 == 0xEF656C7469546465 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BE55EB0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v25 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(result + 56);
  v26 = (unint64_t)(v5 + 63) >> 6;
  v8 = a2 + 56;
  v24 = result;
  if (!v7)
    goto LABEL_8;
  while (2)
  {
    v27 = (v7 - 1) & v7;
    v28 = v4;
    v9 = __clz(__rbit64(v7)) | (v4 << 6);
LABEL_22:
    v14 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v9);
    sub_23BE5AEB8();
    sub_23BE5AC9C();
    swift_bridgeObjectRelease();
    v15 = sub_23BE5AEE8();
    v16 = -1 << *(_BYTE *)(a2 + 32);
    v17 = v15 & ~v16;
    if (((*(_QWORD *)(v8 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      return 0;
    v18 = ~v16;
    while (!*(_BYTE *)(*(_QWORD *)(a2 + 48) + v17))
    {
      v20 = 0x6C6F427469617274;
      v21 = 0xE900000000000064;
      if (v14)
        goto LABEL_32;
LABEL_28:
      v22 = 0xE900000000000064;
      if (v20 == 0x6C6F427469617274)
        goto LABEL_36;
LABEL_37:
      v23 = sub_23BE5AE58();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v23 & 1) != 0)
        goto LABEL_41;
      v17 = (v17 + 1) & v18;
      if (((*(_QWORD *)(v8 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
        return 0;
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + v17) == 1)
      v19 = "d";
    else
      v19 = "traitLooseLeading";
    v21 = (unint64_t)v19 | 0x8000000000000000;
    v20 = 0xD000000000000011;
    if (!v14)
      goto LABEL_28;
LABEL_32:
    if (v14 == 1)
      v22 = 0x800000023BE65FA0;
    else
      v22 = 0x800000023BE65FC0;
    if (v20 != 0xD000000000000011)
      goto LABEL_37;
LABEL_36:
    if (v21 != v22)
      goto LABEL_37;
    result = swift_bridgeObjectRelease_n();
LABEL_41:
    v3 = v24;
    v7 = v27;
    v4 = v28;
    if (v27)
      continue;
    break;
  }
LABEL_8:
  v10 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_46;
  }
  if (v10 >= v26)
    return 1;
  v11 = *(_QWORD *)(v25 + 8 * v10);
  v12 = v4 + 1;
  if (v11)
    goto LABEL_21;
  v12 = v4 + 2;
  if (v4 + 2 >= v26)
    return 1;
  v11 = *(_QWORD *)(v25 + 8 * v12);
  if (v11)
    goto LABEL_21;
  v12 = v4 + 3;
  if (v4 + 3 >= v26)
    return 1;
  v11 = *(_QWORD *)(v25 + 8 * v12);
  if (v11)
    goto LABEL_21;
  v13 = v4 + 4;
  if (v4 + 4 >= v26)
    return 1;
  v11 = *(_QWORD *)(v25 + 8 * v13);
  if (v11)
  {
    v12 = v4 + 4;
LABEL_21:
    v27 = (v11 - 1) & v11;
    v28 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v26)
      return 1;
    v11 = *(_QWORD *)(v25 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_21;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_23BE561F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = sub_23BE5A714();
  v40 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v33 - v9;
  result = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v33 - v12;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v14 = 0;
  v15 = *(_QWORD *)(a1 + 56);
  v34 = a1;
  v35 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  v36 = (unint64_t)(v16 + 63) >> 6;
  v39 = a2 + 56;
  v33 = (char *)&v33 - v12;
  if (!v18)
    goto LABEL_9;
LABEL_7:
  v37 = (v18 - 1) & v18;
  v38 = v14;
  for (i = __clz(__rbit64(v18)) | (v14 << 6); ; i = __clz(__rbit64(v21)) + (v22 << 6))
  {
    v24 = v40;
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
    v26(v13, *(_QWORD *)(a1 + 48) + v25 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v10, v13, v4);
    sub_23BDF23E4(&qword_256AC6D10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF690]);
    v27 = sub_23BE5AC24();
    v28 = -1 << *(_BYTE *)(a2 + 32);
    v29 = v27 & ~v28;
    if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v4);
      return 0;
    }
    v30 = ~v28;
    while (1)
    {
      v26(v7, *(_QWORD *)(a2 + 48) + v29 * v25, v4);
      sub_23BDF23E4(&qword_256AC8F50, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF6A0]);
      v31 = sub_23BE5AC3C();
      v32 = *(void (**)(char *, uint64_t))(v40 + 8);
      v32(v7, v4);
      if ((v31 & 1) != 0)
        break;
      v29 = (v29 + 1) & v30;
      if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v32(v10, v4);
        return 0;
      }
    }
    result = ((uint64_t (*)(char *, uint64_t))v32)(v10, v4);
    v13 = v33;
    a1 = v34;
    v18 = v37;
    v14 = v38;
    if (v37)
      goto LABEL_7;
LABEL_9:
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v20 >= v36)
      return 1;
    v21 = *(_QWORD *)(v35 + 8 * v20);
    v22 = v14 + 1;
    if (!v21)
    {
      v22 = v20 + 1;
      if (v20 + 1 >= v36)
        return 1;
      v21 = *(_QWORD *)(v35 + 8 * v22);
      if (!v21)
      {
        v22 = v20 + 2;
        if (v20 + 2 >= v36)
          return 1;
        v21 = *(_QWORD *)(v35 + 8 * v22);
        if (!v21)
        {
          v22 = v20 + 3;
          if (v20 + 3 >= v36)
            return 1;
          v21 = *(_QWORD *)(v35 + 8 * v22);
          if (!v21)
            break;
        }
      }
    }
LABEL_24:
    v37 = (v21 - 1) & v21;
    v38 = v22;
  }
  v23 = v20 + 4;
  if (v23 >= v36)
    return 1;
  v21 = *(_QWORD *)(v35 + 8 * v23);
  if (v21)
  {
    v22 = v23;
    goto LABEL_24;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v36)
      return 1;
    v21 = *(_QWORD *)(v35 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_24;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_23BE56568(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_24;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 3;
    if (v13 + 3 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v15 = v13 + 4;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_35;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_24;
      }
    }
    v4 = v15;
LABEL_24:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v12);
    sub_23BE5AEB8();
    sub_23BE5AEC4();
    result = sub_23BE5AEE8();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(unsigned __int8 *)(v19 + v18) == v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(unsigned __int8 *)(v19 + v18) == v16)
      goto LABEL_7;
  }
}

uint64_t sub_23BE5675C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BE56798 + 4 * byte_23BE653F0[a1]))(0x6F5464656C696166, 0xEC00000064616F4CLL);
}

unint64_t sub_23BE56798()
{
  return 0xD000000000000017;
}

uint64_t sub_23BE56800()
{
  return 0x4164694477656976;
}

uint64_t sub_23BE56824()
{
  unsigned __int8 *v0;

  return sub_23BE5675C(*v0);
}

uint64_t sub_23BE5682C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE5A27C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE56850()
{
  sub_23BE57254();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE56878()
{
  sub_23BE57254();
  return sub_23BE5AF18();
}

uint64_t sub_23BE568A0()
{
  sub_23BE57430();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE568C8()
{
  sub_23BE57430();
  return sub_23BE5AF18();
}

uint64_t sub_23BE568F0()
{
  sub_23BE573EC();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE56918()
{
  sub_23BE573EC();
  return sub_23BE5AF18();
}

uint64_t sub_23BE56940()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x746E65746E6F63;
}

uint64_t sub_23BE56980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BE5A514(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE569A4()
{
  sub_23BE573A8();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE569CC()
{
  sub_23BE573A8();
  return sub_23BE5AF18();
}

uint64_t sub_23BE569F4()
{
  sub_23BE57364();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE56A1C()
{
  sub_23BE57364();
  return sub_23BE5AF18();
}

uint64_t sub_23BE56A44()
{
  sub_23BE57320();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE56A6C()
{
  sub_23BE57320();
  return sub_23BE5AF18();
}

uint64_t sub_23BE56A94()
{
  sub_23BE572DC();
  return sub_23BE5AF0C();
}

uint64_t sub_23BE56ABC()
{
  sub_23BE572DC();
  return sub_23BE5AF18();
}

void BrowseAction.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v17[3];
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC9198);
  v25 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v23 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC91A0);
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v31 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_23BE5A6C0();
  v30 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v27 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC91A8);
  v21 = *(_QWORD *)(v6 - 8);
  v22 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v19 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC91B0);
  v29 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v26 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for BrowseContent();
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC91B8);
  v17[2] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC91C0);
  v17[1] = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v11 = type metadata accessor for BrowseAction();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC91C8);
  v36 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v15 = (char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE57254();
  v37 = v15;
  sub_23BE5AF00();
  sub_23BE57298(v39, (uint64_t)v13);
  v16 = (char *)sub_23BE56E0C + 4 * byte_23BE653F6[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BE56E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v2 - 72) = 0;
  sub_23BE57430();
  v3 = *(_QWORD *)(v2 - 128);
  v4 = *(_QWORD *)(v2 - 120);
  sub_23BE5ADF8();
  sub_23BE5AE28();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 296) + 8))(v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 136) + 8))(v3, v4);
}

uint64_t type metadata accessor for BrowseAction()
{
  uint64_t result;

  result = qword_256AC92C0;
  if (!qword_256AC92C0)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BE57254()
{
  unint64_t result;

  result = qword_256AC91D0;
  if (!qword_256AC91D0)
  {
    result = MEMORY[0x242612B20](&unk_23BE65BA8, &type metadata for BrowseAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC91D0);
  }
  return result;
}

uint64_t sub_23BE57298(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BrowseAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BE572DC()
{
  unint64_t result;

  result = qword_256AC91D8;
  if (!qword_256AC91D8)
  {
    result = MEMORY[0x242612B20](&unk_23BE65B58, &type metadata for BrowseAction.ViewDidAppearCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC91D8);
  }
  return result;
}

unint64_t sub_23BE57320()
{
  unint64_t result;

  result = qword_256AC91E0;
  if (!qword_256AC91E0)
  {
    result = MEMORY[0x242612B20](&unk_23BE65B08, &type metadata for BrowseAction.UpdateLastBackgroundTimeStampCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC91E0);
  }
  return result;
}

unint64_t sub_23BE57364()
{
  unint64_t result;

  result = qword_256AC91E8;
  if (!qword_256AC91E8)
  {
    result = MEMORY[0x242612B20](&unk_23BE65AB8, &type metadata for BrowseAction.SubscriptionChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC91E8);
  }
  return result;
}

unint64_t sub_23BE573A8()
{
  unint64_t result;

  result = qword_256AC91F0;
  if (!qword_256AC91F0)
  {
    result = MEMORY[0x242612B20](&unk_23BE65A68, &type metadata for BrowseAction.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC91F0);
  }
  return result;
}

unint64_t sub_23BE573EC()
{
  unint64_t result;

  result = qword_256AC91F8;
  if (!qword_256AC91F8)
  {
    result = MEMORY[0x242612B20](&unk_23BE65A18, &type metadata for BrowseAction.FetchSectionDescriptorsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC91F8);
  }
  return result;
}

unint64_t sub_23BE57430()
{
  unint64_t result;

  result = qword_256AC9200;
  if (!qword_256AC9200)
  {
    result = MEMORY[0x242612B20](&unk_23BE659C8, &type metadata for BrowseAction.FailedToLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9200);
  }
  return result;
}

uint64_t BrowseAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD v35[5];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;

  v50 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC9208);
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v48 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC9210);
  v42 = *(_QWORD *)(v5 - 8);
  v43 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v55 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC9218);
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v47 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC9220);
  v53 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v49 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC9228);
  v35[3] = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v45 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC9230);
  v35[4] = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v46 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC9238);
  v51 = *(_QWORD *)(v12 - 8);
  v52 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BrowseAction();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)v35 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v35 - v23;
  v25 = a1[3];
  v56 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v25);
  sub_23BE57254();
  v54 = v14;
  v26 = v57;
  sub_23BE5AEF4();
  if (!v26)
  {
    v35[0] = v18;
    v35[1] = v21;
    v57 = 0;
    v27 = v15;
    v35[2] = v24;
    v28 = v52;
    v29 = v54;
    v30 = sub_23BE5ADEC();
    if (*(_QWORD *)(v30 + 16) == 1)
      __asm { BR              X10 }
    v31 = sub_23BE5AD68();
    swift_allocError();
    v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6640);
    *v33 = v27;
    sub_23BE5AD8C();
    sub_23BE5AD5C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, *MEMORY[0x24BEE26D0], v31);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v29, v28);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
}

uint64_t sub_23BE57E4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BrowseAction.init(from:)(a1, a2);
}

void sub_23BE57E60(_QWORD *a1)
{
  BrowseAction.encode(to:)(a1);
}

void BrowseAction.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = sub_23BE5A6C0();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for BrowseContent();
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for BrowseAction();
  MEMORY[0x24BDAC7A8](v3);
  sub_23BE57298(v0, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = (char *)sub_23BE57F6C + 4 * byte_23BE65402[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BE57F6C()
{
  sub_23BE5AEC4();
  sub_23BE5AC9C();
  return swift_bridgeObjectRelease();
}

uint64_t BrowseAction.hashValue.getter()
{
  sub_23BE5AEB8();
  BrowseAction.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE580DC()
{
  sub_23BE5AEB8();
  BrowseAction.hash(into:)();
  return sub_23BE5AEE8();
}

uint64_t sub_23BE5811C()
{
  sub_23BE5AEB8();
  BrowseAction.hash(into:)();
  return sub_23BE5AEE8();
}

void _s15FitnessBrowsing12BrowseActionO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v15 = sub_23BE5A6C0();
  MEMORY[0x24BDAC7A8](v15);
  v4 = type metadata accessor for BrowseContent();
  MEMORY[0x24BDAC7A8](v4);
  v14 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BrowseAction();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v8 = MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC9388);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 + *(int *)(v10 + 48) - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE57298(a1, (uint64_t)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23BE57298(a2, (uint64_t)v12);
  v13 = (char *)sub_23BE582E0 + 4 * byte_23BE65408[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BE582E0()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;

  sub_23BE57298(v0, (uint64_t)v1);
  v4 = *v1;
  v3 = v1[1];
  if (!swift_getEnumCaseMultiPayload())
  {
    if (v4 == *v2 && v3 == v2[1])
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v7 = sub_23BE5AE58();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
      {
        sub_23BDF2468(v0, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
        goto LABEL_3;
      }
    }
    sub_23BDF2468(v0, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
    v5 = 1;
    return v5 & 1;
  }
  swift_bridgeObjectRelease();
  sub_23BE5A600(v0);
LABEL_3:
  v5 = 0;
  return v5 & 1;
}

uint64_t sub_23BE58568()
{
  return sub_23BDF23E4(&qword_256AC9248, (uint64_t (*)(uint64_t))type metadata accessor for BrowseAction, (uint64_t)&protocol conformance descriptor for BrowseAction);
}

_QWORD *initializeBufferWithCopyOfBuffer for BrowseAction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = sub_23BE5A6C0();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for BrowseContent();
      v12 = swift_getEnumCaseMultiPayload();
      if (v12 == 2)
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      else if (v12 == 1)
      {
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v13 = a2[2];
        a1[1] = a2[1];
        a1[2] = v13;
        a1[3] = a2[3];
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
        v14 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = sub_23BE5A678();
        v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18(v15, v16, v17);
      }
      else
      {
        v19 = type metadata accessor for BrowseArtwork();
        v20 = *(_QWORD *)(v19 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(a2, 1, v19))
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        }
        else
        {
          v22 = sub_23BE5A720();
          v23 = *(_QWORD *)(v22 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(a2, 1, v22))
          {
            v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
          }
          else
          {
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v23 + 16))(a1, a2, v22);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(a1, 0, 1, v22);
          }
          v25 = *(int *)(v19 + 20);
          v26 = (char *)a1 + v25;
          v27 = (char *)a2 + v25;
          v28 = sub_23BE5A690();
          v29 = *(_QWORD *)(v28 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
          {
            v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
            memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(a1, 0, 1, v19);
        }
        v44 = type metadata accessor for EditorialCollectionDetail();
        v31 = *(int *)(v44 + 20);
        v32 = (_QWORD *)((char *)a1 + v31);
        v33 = (char *)a2 + v31;
        v34 = *(_QWORD *)((char *)a2 + v31 + 8);
        *v32 = *(_QWORD *)((char *)a2 + v31);
        v32[1] = v34;
        v35 = *(_QWORD *)((char *)a2 + v31 + 24);
        v32[2] = *(_QWORD *)((char *)a2 + v31 + 16);
        v32[3] = v35;
        v36 = *(_QWORD *)((char *)a2 + v31 + 40);
        v32[4] = *(_QWORD *)((char *)a2 + v31 + 32);
        v32[5] = v36;
        v37 = *(_QWORD *)((char *)a2 + v31 + 56);
        v32[6] = *(_QWORD *)((char *)a2 + v31 + 48);
        v32[7] = v37;
        v38 = *(int *)(type metadata accessor for EditorialCollection() + 32);
        v39 = (char *)v32 + v38;
        v43 = &v33[v38];
        v40 = sub_23BE5A690();
        v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v41(v39, v43, v40);
        *(_QWORD *)((char *)a1 + *(int *)(v44 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v44 + 24));
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8EE8);
      *(_QWORD *)((char *)a1 + *(int *)(v42 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v42 + 48));
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for BrowseAction(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:
      v3 = sub_23BE5A6C0();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    case 1:
      type metadata accessor for BrowseContent();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 2)
      {
        if (EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v14 = a1 + *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
          v15 = sub_23BE5A678();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
          goto LABEL_18;
        }
        if (EnumCaseMultiPayload)
        {
LABEL_18:
          __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8EE8);
          return swift_bridgeObjectRelease();
        }
        v5 = type metadata accessor for BrowseArtwork();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1, v5))
        {
          v6 = sub_23BE5A720();
          v7 = *(_QWORD *)(v6 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6))
            (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
          v8 = a1 + *(int *)(v5 + 20);
          v9 = sub_23BE5A690();
          v10 = *(_QWORD *)(v9 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
            (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
        }
        v11 = a1 + *(int *)(type metadata accessor for EditorialCollectionDetail() + 20);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v12 = v11 + *(int *)(type metadata accessor for EditorialCollection() + 32);
        v13 = sub_23BE5A690();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
      }
      swift_bridgeObjectRelease();
      goto LABEL_18;
    case 0:
      return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for BrowseAction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v41;
  uint64_t v42;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v8 = sub_23BE5A6C0();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      goto LABEL_22;
    case 1:
      type metadata accessor for BrowseContent();
      v9 = swift_getEnumCaseMultiPayload();
      if (v9 == 2)
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      else if (v9 == 1)
      {
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v10 = a2[2];
        a1[1] = a2[1];
        a1[2] = v10;
        a1[3] = a2[3];
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
        v11 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = sub_23BE5A678();
        v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v15(v12, v13, v14);
      }
      else
      {
        v16 = type metadata accessor for BrowseArtwork();
        v17 = *(_QWORD *)(v16 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(a2, 1, v16))
        {
          v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        }
        else
        {
          v19 = sub_23BE5A720();
          v20 = *(_QWORD *)(v19 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(a2, 1, v19))
          {
            v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
          }
          else
          {
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v20 + 16))(a1, a2, v19);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(a1, 0, 1, v19);
          }
          v22 = *(int *)(v16 + 20);
          v23 = (char *)a1 + v22;
          v24 = (char *)a2 + v22;
          v25 = sub_23BE5A690();
          v26 = *(_QWORD *)(v25 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
          {
            v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
            memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
        }
        v42 = type metadata accessor for EditorialCollectionDetail();
        v28 = *(int *)(v42 + 20);
        v29 = (_QWORD *)((char *)a1 + v28);
        v30 = (char *)a2 + v28;
        v31 = *(_QWORD *)((char *)a2 + v28 + 8);
        *v29 = *(_QWORD *)((char *)a2 + v28);
        v29[1] = v31;
        v32 = *(_QWORD *)((char *)a2 + v28 + 24);
        v29[2] = *(_QWORD *)((char *)a2 + v28 + 16);
        v29[3] = v32;
        v33 = *(_QWORD *)((char *)a2 + v28 + 40);
        v29[4] = *(_QWORD *)((char *)a2 + v28 + 32);
        v29[5] = v33;
        v34 = *(_QWORD *)((char *)a2 + v28 + 56);
        v29[6] = *(_QWORD *)((char *)a2 + v28 + 48);
        v29[7] = v34;
        v35 = *(int *)(type metadata accessor for EditorialCollection() + 32);
        v36 = (char *)v29 + v35;
        v41 = &v30[v35];
        v37 = sub_23BE5A690();
        v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38(v36, v41, v37);
        *(_QWORD *)((char *)a1 + *(int *)(v42 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v42 + 24));
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8EE8);
      *(_QWORD *)((char *)a1 + *(int *)(v39 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v39 + 48));
      swift_bridgeObjectRetain();
      goto LABEL_22;
    case 0:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
LABEL_22:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *assignWithCopy for BrowseAction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v35;
  uint64_t v36;

  if (a1 != a2)
  {
    sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v7 = sub_23BE5A6C0();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_23;
      case 1:
        type metadata accessor for BrowseContent();
        v8 = swift_getEnumCaseMultiPayload();
        if (v8 == 2)
        {
          *a1 = *a2;
          swift_bridgeObjectRetain();
        }
        else if (v8 == 1)
        {
          *(_BYTE *)a1 = *(_BYTE *)a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          a1[3] = a2[3];
          *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
          v9 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
          v10 = (char *)a1 + v9;
          v11 = (char *)a2 + v9;
          v12 = sub_23BE5A678();
          v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v13(v10, v11, v12);
        }
        else
        {
          v14 = type metadata accessor for BrowseArtwork();
          v15 = *(_QWORD *)(v14 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(a2, 1, v14))
          {
            v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
          }
          else
          {
            v17 = sub_23BE5A720();
            v18 = *(_QWORD *)(v17 - 8);
            if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(a2, 1, v17))
            {
              v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
              memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
            }
            else
            {
              (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v18 + 16))(a1, a2, v17);
              (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(a1, 0, 1, v17);
            }
            v20 = *(int *)(v14 + 20);
            v21 = (char *)a1 + v20;
            v22 = (char *)a2 + v20;
            v23 = sub_23BE5A690();
            v24 = *(_QWORD *)(v23 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
            {
              v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
              memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
            }
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
          }
          v36 = type metadata accessor for EditorialCollectionDetail();
          v26 = *(int *)(v36 + 20);
          v27 = (_QWORD *)((char *)a1 + v26);
          v28 = (char *)a2 + v26;
          *v27 = *(_QWORD *)((char *)a2 + v26);
          v27[1] = *(_QWORD *)((char *)a2 + v26 + 8);
          v27[2] = *(_QWORD *)((char *)a2 + v26 + 16);
          v27[3] = *(_QWORD *)((char *)a2 + v26 + 24);
          v27[4] = *(_QWORD *)((char *)a2 + v26 + 32);
          v27[5] = *(_QWORD *)((char *)a2 + v26 + 40);
          v27[6] = *(_QWORD *)((char *)a2 + v26 + 48);
          v27[7] = *(_QWORD *)((char *)a2 + v26 + 56);
          v29 = *(int *)(type metadata accessor for EditorialCollection() + 32);
          v30 = (char *)v27 + v29;
          v35 = &v28[v29];
          v31 = sub_23BE5A690();
          v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v32(v30, v35, v31);
          *(_QWORD *)((char *)a1 + *(int *)(v36 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v36 + 24));
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
        v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8EE8);
        *(_QWORD *)((char *)a1 + *(int *)(v33 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v33 + 48));
        swift_bridgeObjectRetain();
        goto LABEL_23;
      case 0:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
LABEL_23:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for BrowseAction(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v12 = sub_23BE5A6C0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
LABEL_21:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for BrowseContent();
    v8 = swift_getEnumCaseMultiPayload();
    if (v8 == 1)
    {
      *a1 = *a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      a1[32] = a2[32];
      v13 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
      v14 = &a1[v13];
      v15 = &a2[v13];
      v16 = sub_23BE5A678();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    }
    else
    {
      if (v8)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_20:
        v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8EE8);
        *(_QWORD *)&a1[*(int *)(v36 + 48)] = *(_QWORD *)&a2[*(int *)(v36 + 48)];
        goto LABEL_21;
      }
      v9 = type metadata accessor for BrowseArtwork();
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        v17 = sub_23BE5A720();
        v18 = *(_QWORD *)(v17 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(a2, 1, v17))
        {
          v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 32))(a1, a2, v17);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(a1, 0, 1, v17);
        }
        v20 = *(int *)(v9 + 20);
        v21 = &a1[v20];
        v22 = &a2[v20];
        v23 = sub_23BE5A690();
        v24 = *(_QWORD *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
      }
      v26 = type metadata accessor for EditorialCollectionDetail();
      v27 = *(int *)(v26 + 20);
      v28 = &a1[v27];
      v29 = &a2[v27];
      v30 = *(_OWORD *)&a2[v27 + 16];
      *(_OWORD *)v28 = *(_OWORD *)&a2[v27];
      *((_OWORD *)v28 + 1) = v30;
      v31 = *(_OWORD *)&a2[v27 + 48];
      *((_OWORD *)v28 + 2) = *(_OWORD *)&a2[v27 + 32];
      *((_OWORD *)v28 + 3) = v31;
      v32 = *(int *)(type metadata accessor for EditorialCollection() + 32);
      v33 = &v28[v32];
      v34 = &v29[v32];
      v35 = sub_23BE5A690();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
      *(_QWORD *)&a1[*(int *)(v26 + 24)] = *(_QWORD *)&a2[*(int *)(v26 + 24)];
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_20;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for BrowseAction(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  if (a1 != a2)
  {
    sub_23BDF2468((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for BrowseAction);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v12 = sub_23BE5A6C0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
LABEL_22:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for BrowseContent();
      v8 = swift_getEnumCaseMultiPayload();
      if (v8 == 1)
      {
        *a1 = *a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        a1[32] = a2[32];
        v13 = *(int *)(type metadata accessor for BrowseGalleryDescriptor() + 32);
        v14 = &a1[v13];
        v15 = &a2[v13];
        v16 = sub_23BE5A678();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      }
      else
      {
        if (v8)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_21:
          v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC8EE8);
          *(_QWORD *)&a1[*(int *)(v36 + 48)] = *(_QWORD *)&a2[*(int *)(v36 + 48)];
          goto LABEL_22;
        }
        v9 = type metadata accessor for BrowseArtwork();
        v10 = *(_QWORD *)(v9 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
        {
          v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6DA0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        }
        else
        {
          v17 = sub_23BE5A720();
          v18 = *(_QWORD *)(v17 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(a2, 1, v17))
          {
            v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D90);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v18 + 32))(a1, a2, v17);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(a1, 0, 1, v17);
          }
          v20 = *(int *)(v9 + 20);
          v21 = &a1[v20];
          v22 = &a2[v20];
          v23 = sub_23BE5A690();
          v24 = *(_QWORD *)(v23 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
          {
            v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC6D98);
            memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
        }
        v26 = type metadata accessor for EditorialCollectionDetail();
        v27 = *(int *)(v26 + 20);
        v28 = &a1[v27];
        v29 = &a2[v27];
        v30 = *(_OWORD *)&a2[v27 + 16];
        *(_OWORD *)v28 = *(_OWORD *)&a2[v27];
        *((_OWORD *)v28 + 1) = v30;
        v31 = *(_OWORD *)&a2[v27 + 48];
        *((_OWORD *)v28 + 2) = *(_OWORD *)&a2[v27 + 32];
        *((_OWORD *)v28 + 3) = v31;
        v32 = *(int *)(type metadata accessor for EditorialCollection() + 32);
        v33 = &v28[v32];
        v34 = &v29[v32];
        v35 = sub_23BE5A690();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
        *(_QWORD *)&a1[*(int *)(v26 + 24)] = *(_QWORD *)&a2[*(int *)(v26 + 24)];
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_21;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_23BE59A50()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  char v3;
  void *v4;
  char *v5;
  uint64_t v6;

  v4 = &unk_23BE654F8;
  result = type metadata accessor for BrowseContent();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v5 = &v3;
    result = sub_23BE5A6C0();
    if (v2 <= 0x3F)
    {
      v6 = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BrowseAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23BE59B40 + 4 * byte_23BE65413[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23BE59B74 + 4 * byte_23BE6540E[v4]))();
}

uint64_t sub_23BE59B74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE59B7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE59B84);
  return result;
}

uint64_t sub_23BE59B90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE59B98);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23BE59B9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE59BA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseAction.CodingKeys()
{
  return &type metadata for BrowseAction.CodingKeys;
}

ValueMetadata *type metadata accessor for BrowseAction.FailedToLoadCodingKeys()
{
  return &type metadata for BrowseAction.FailedToLoadCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseAction.FetchSectionDescriptorsCodingKeys()
{
  return &type metadata for BrowseAction.FetchSectionDescriptorsCodingKeys;
}

uint64_t storeEnumTagSinglePayload for BrowseAction.LoadedCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BE59C30 + 4 * byte_23BE6541D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BE59C64 + 4 * byte_23BE65418[v4]))();
}

uint64_t sub_23BE59C64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE59C6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BE59C74);
  return result;
}

uint64_t sub_23BE59C80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BE59C88);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BE59C8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BE59C94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrowseAction.LoadedCodingKeys()
{
  return &type metadata for BrowseAction.LoadedCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseAction.SubscriptionChangedCodingKeys()
{
  return &type metadata for BrowseAction.SubscriptionChangedCodingKeys;
}

uint64_t _s15FitnessBrowsing12BrowseActionO22FailedToLoadCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BE59D00 + 4 * byte_23BE65422[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BE59D20 + 4 * byte_23BE65427[v4]))();
}

_BYTE *sub_23BE59D00(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BE59D20(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE59D28(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE59D30(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BE59D38(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BE59D40(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BrowseAction.UpdateLastBackgroundTimeStampCodingKeys()
{
  return &type metadata for BrowseAction.UpdateLastBackgroundTimeStampCodingKeys;
}

ValueMetadata *type metadata accessor for BrowseAction.ViewDidAppearCodingKeys()
{
  return &type metadata for BrowseAction.ViewDidAppearCodingKeys;
}

unint64_t sub_23BE59D70()
{
  unint64_t result;

  result = qword_256AC92F8;
  if (!qword_256AC92F8)
  {
    result = MEMORY[0x242612B20](&unk_23BE656D8, &type metadata for BrowseAction.UpdateLastBackgroundTimeStampCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC92F8);
  }
  return result;
}

unint64_t sub_23BE59DB8()
{
  unint64_t result;

  result = qword_256AC9300;
  if (!qword_256AC9300)
  {
    result = MEMORY[0x242612B20](&unk_23BE657E0, &type metadata for BrowseAction.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9300);
  }
  return result;
}

unint64_t sub_23BE59E00()
{
  unint64_t result;

  result = qword_256AC9308;
  if (!qword_256AC9308)
  {
    result = MEMORY[0x242612B20](&unk_23BE658E8, &type metadata for BrowseAction.FailedToLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9308);
  }
  return result;
}

unint64_t sub_23BE59E48()
{
  unint64_t result;

  result = qword_256AC9310;
  if (!qword_256AC9310)
  {
    result = MEMORY[0x242612B20](&unk_23BE659A0, &type metadata for BrowseAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9310);
  }
  return result;
}

unint64_t sub_23BE59E90()
{
  unint64_t result;

  result = qword_256AC9318;
  if (!qword_256AC9318)
  {
    result = MEMORY[0x242612B20](&unk_23BE65858, &type metadata for BrowseAction.FailedToLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9318);
  }
  return result;
}

unint64_t sub_23BE59ED8()
{
  unint64_t result;

  result = qword_256AC9320;
  if (!qword_256AC9320)
  {
    result = MEMORY[0x242612B20](&unk_23BE65880, &type metadata for BrowseAction.FailedToLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9320);
  }
  return result;
}

unint64_t sub_23BE59F20()
{
  unint64_t result;

  result = qword_256AC9328;
  if (!qword_256AC9328)
  {
    result = MEMORY[0x242612B20](&unk_23BE65808, &type metadata for BrowseAction.FetchSectionDescriptorsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9328);
  }
  return result;
}

unint64_t sub_23BE59F68()
{
  unint64_t result;

  result = qword_256AC9330;
  if (!qword_256AC9330)
  {
    result = MEMORY[0x242612B20](&unk_23BE65830, &type metadata for BrowseAction.FetchSectionDescriptorsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9330);
  }
  return result;
}

unint64_t sub_23BE59FB0()
{
  unint64_t result;

  result = qword_256AC9338;
  if (!qword_256AC9338)
  {
    result = MEMORY[0x242612B20](&unk_23BE65750, &type metadata for BrowseAction.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9338);
  }
  return result;
}

unint64_t sub_23BE59FF8()
{
  unint64_t result;

  result = qword_256AC9340;
  if (!qword_256AC9340)
  {
    result = MEMORY[0x242612B20](&unk_23BE65778, &type metadata for BrowseAction.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9340);
  }
  return result;
}

unint64_t sub_23BE5A040()
{
  unint64_t result;

  result = qword_256AC9348;
  if (!qword_256AC9348)
  {
    result = MEMORY[0x242612B20](&unk_23BE65700, &type metadata for BrowseAction.SubscriptionChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9348);
  }
  return result;
}

unint64_t sub_23BE5A088()
{
  unint64_t result;

  result = qword_256AC9350;
  if (!qword_256AC9350)
  {
    result = MEMORY[0x242612B20](&unk_23BE65728, &type metadata for BrowseAction.SubscriptionChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9350);
  }
  return result;
}

unint64_t sub_23BE5A0D0()
{
  unint64_t result;

  result = qword_256AC9358;
  if (!qword_256AC9358)
  {
    result = MEMORY[0x242612B20](&unk_23BE65648, &type metadata for BrowseAction.UpdateLastBackgroundTimeStampCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9358);
  }
  return result;
}

unint64_t sub_23BE5A118()
{
  unint64_t result;

  result = qword_256AC9360;
  if (!qword_256AC9360)
  {
    result = MEMORY[0x242612B20](&unk_23BE65670, &type metadata for BrowseAction.UpdateLastBackgroundTimeStampCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9360);
  }
  return result;
}

unint64_t sub_23BE5A160()
{
  unint64_t result;

  result = qword_256AC9368;
  if (!qword_256AC9368)
  {
    result = MEMORY[0x242612B20](&unk_23BE655F8, &type metadata for BrowseAction.ViewDidAppearCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9368);
  }
  return result;
}

unint64_t sub_23BE5A1A8()
{
  unint64_t result;

  result = qword_256AC9370;
  if (!qword_256AC9370)
  {
    result = MEMORY[0x242612B20](&unk_23BE65620, &type metadata for BrowseAction.ViewDidAppearCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9370);
  }
  return result;
}

unint64_t sub_23BE5A1F0()
{
  unint64_t result;

  result = qword_256AC9378;
  if (!qword_256AC9378)
  {
    result = MEMORY[0x242612B20](&unk_23BE65910, &type metadata for BrowseAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9378);
  }
  return result;
}

unint64_t sub_23BE5A238()
{
  unint64_t result;

  result = qword_256AC9380;
  if (!qword_256AC9380)
  {
    result = MEMORY[0x242612B20](&unk_23BE65938, &type metadata for BrowseAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AC9380);
  }
  return result;
}

uint64_t sub_23BE5A27C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F5464656C696166 && a2 == 0xEC00000064616F4CLL;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023BE665B0 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646564616F6CLL && a2 == 0xE600000000000000 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023BE665D0 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x800000023BE665F0 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x4164694477656976 && a2 == 0xED00007261657070)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_23BE5A514(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000;
  if (v2 || (sub_23BE5AE58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023BE66570)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BE5AE58();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BE5A600(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AC9388);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self();
}

uint64_t sub_23BE5A660()
{
  return MEMORY[0x24BDCC2F8]();
}

uint64_t sub_23BE5A66C()
{
  return MEMORY[0x24BDCC3F8]();
}

uint64_t sub_23BE5A678()
{
  return MEMORY[0x24BDCC5A8]();
}

uint64_t sub_23BE5A684()
{
  return MEMORY[0x24BDCD988]();
}

uint64_t sub_23BE5A690()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_23BE5A69C()
{
  return MEMORY[0x24BDCE330]();
}

uint64_t sub_23BE5A6A8()
{
  return MEMORY[0x24BDCE858]();
}

uint64_t sub_23BE5A6B4()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t sub_23BE5A6C0()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_23BE5A6CC()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t sub_23BE5A6D8()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_23BE5A6E4()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_23BE5A6F0()
{
  return MEMORY[0x24BDCECD8]();
}

uint64_t sub_23BE5A6FC()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_23BE5A708()
{
  return MEMORY[0x24BEBBE90]();
}

uint64_t sub_23BE5A714()
{
  return MEMORY[0x24BDCF678]();
}

uint64_t sub_23BE5A720()
{
  return MEMORY[0x24BE34FA0]();
}

uint64_t sub_23BE5A72C()
{
  return MEMORY[0x24BE35038]();
}

uint64_t sub_23BE5A738()
{
  return MEMORY[0x24BE35040]();
}

uint64_t sub_23BE5A744()
{
  return MEMORY[0x24BE35048]();
}

uint64_t sub_23BE5A750()
{
  return MEMORY[0x24BE35070]();
}

uint64_t sub_23BE5A75C()
{
  return MEMORY[0x24BE35078]();
}

uint64_t sub_23BE5A768()
{
  return MEMORY[0x24BEE76F0]();
}

uint64_t sub_23BE5A774()
{
  return MEMORY[0x24BDEB790]();
}

uint64_t sub_23BE5A780()
{
  return MEMORY[0x24BDEB7B8]();
}

uint64_t sub_23BE5A78C()
{
  return MEMORY[0x24BDEBDE0]();
}

uint64_t sub_23BE5A798()
{
  return MEMORY[0x24BDEBDF0]();
}

uint64_t sub_23BE5A7A4()
{
  return MEMORY[0x24BDEBE00]();
}

uint64_t sub_23BE5A7B0()
{
  return MEMORY[0x24BDEBED0]();
}

uint64_t sub_23BE5A7BC()
{
  return MEMORY[0x24BDEC120]();
}

uint64_t sub_23BE5A7C8()
{
  return MEMORY[0x24BDEC148]();
}

uint64_t sub_23BE5A7D4()
{
  return MEMORY[0x24BDEC5A0]();
}

uint64_t sub_23BE5A7E0()
{
  return MEMORY[0x24BDED130]();
}

uint64_t sub_23BE5A7EC()
{
  return MEMORY[0x24BDED2D0]();
}

uint64_t sub_23BE5A7F8()
{
  return MEMORY[0x24BDED3B0]();
}

uint64_t sub_23BE5A804()
{
  return MEMORY[0x24BDED998]();
}

uint64_t sub_23BE5A810()
{
  return MEMORY[0x24BDEDBA8]();
}

uint64_t sub_23BE5A81C()
{
  return MEMORY[0x24BDEDFE8]();
}

uint64_t sub_23BE5A828()
{
  return MEMORY[0x24BDEE070]();
}

uint64_t sub_23BE5A834()
{
  return MEMORY[0x24BDEE490]();
}

uint64_t sub_23BE5A840()
{
  return MEMORY[0x24BDEE4A0]();
}

uint64_t sub_23BE5A84C()
{
  return MEMORY[0x24BDEE730]();
}

uint64_t sub_23BE5A858()
{
  return MEMORY[0x24BDEEA08]();
}

uint64_t sub_23BE5A864()
{
  return MEMORY[0x24BDEEA18]();
}

uint64_t sub_23BE5A870()
{
  return MEMORY[0x24BDEEA28]();
}

uint64_t sub_23BE5A87C()
{
  return MEMORY[0x24BDEEA30]();
}

uint64_t sub_23BE5A888()
{
  return MEMORY[0x24BDEEA40]();
}

uint64_t sub_23BE5A894()
{
  return MEMORY[0x24BDEEA50]();
}

uint64_t sub_23BE5A8A0()
{
  return MEMORY[0x24BDEEA60]();
}

uint64_t sub_23BE5A8AC()
{
  return MEMORY[0x24BDEEB88]();
}

uint64_t sub_23BE5A8B8()
{
  return MEMORY[0x24BDEEF78]();
}

uint64_t sub_23BE5A8C4()
{
  return MEMORY[0x24BDEF380]();
}

uint64_t sub_23BE5A8D0()
{
  return MEMORY[0x24BDEF3A0]();
}

uint64_t sub_23BE5A8DC()
{
  return MEMORY[0x24BDEF3B8]();
}

uint64_t sub_23BE5A8E8()
{
  return MEMORY[0x24BDEFBF0]();
}

uint64_t sub_23BE5A8F4()
{
  return MEMORY[0x24BDF1430]();
}

uint64_t sub_23BE5A900()
{
  return MEMORY[0x24BDF1450]();
}

uint64_t sub_23BE5A90C()
{
  return MEMORY[0x24BDF14A8]();
}

uint64_t sub_23BE5A918()
{
  return MEMORY[0x24BDF14C0]();
}

uint64_t sub_23BE5A924()
{
  return MEMORY[0x24BDF1580]();
}

uint64_t sub_23BE5A930()
{
  return MEMORY[0x24BDF15F8]();
}

uint64_t sub_23BE5A93C()
{
  return MEMORY[0x24BDF1600]();
}

uint64_t sub_23BE5A948()
{
  return MEMORY[0x24BDF1640]();
}

uint64_t sub_23BE5A954()
{
  return MEMORY[0x24BDF1778]();
}

uint64_t sub_23BE5A960()
{
  return MEMORY[0x24BDF17D8]();
}

uint64_t sub_23BE5A96C()
{
  return MEMORY[0x24BDF1818]();
}

uint64_t sub_23BE5A978()
{
  return MEMORY[0x24BDF1CE0]();
}

uint64_t sub_23BE5A984()
{
  return MEMORY[0x24BDF1D18]();
}

uint64_t sub_23BE5A990()
{
  return MEMORY[0x24BE37BF0]();
}

uint64_t sub_23BE5A99C()
{
  return MEMORY[0x24BDF1DC8]();
}

uint64_t sub_23BE5A9A8()
{
  return MEMORY[0x24BDF1FC0]();
}

uint64_t sub_23BE5A9B4()
{
  return MEMORY[0x24BDF1FF0]();
}

uint64_t sub_23BE5A9C0()
{
  return MEMORY[0x24BE37BF8]();
}

uint64_t sub_23BE5A9CC()
{
  return MEMORY[0x24BDF2088]();
}

uint64_t sub_23BE5A9D8()
{
  return MEMORY[0x24BDF20A0]();
}

uint64_t sub_23BE5A9E4()
{
  return MEMORY[0x24BDF20D8]();
}

uint64_t sub_23BE5A9F0()
{
  return MEMORY[0x24BDF20E8]();
}

uint64_t sub_23BE5A9FC()
{
  return MEMORY[0x24BDF2370]();
}

uint64_t sub_23BE5AA08()
{
  return MEMORY[0x24BDF2698]();
}

uint64_t sub_23BE5AA14()
{
  return MEMORY[0x24BDF2708]();
}

uint64_t sub_23BE5AA20()
{
  return MEMORY[0x24BDF3108]();
}

uint64_t sub_23BE5AA2C()
{
  return MEMORY[0x24BDF3628]();
}

uint64_t sub_23BE5AA38()
{
  return MEMORY[0x24BDF3630]();
}

uint64_t sub_23BE5AA44()
{
  return MEMORY[0x24BDF37C8]();
}

uint64_t sub_23BE5AA50()
{
  return MEMORY[0x24BDF37D8]();
}

uint64_t sub_23BE5AA5C()
{
  return MEMORY[0x24BDF38C0]();
}

uint64_t sub_23BE5AA68()
{
  return MEMORY[0x24BDF38C8]();
}

uint64_t sub_23BE5AA74()
{
  return MEMORY[0x24BDF38E0]();
}

uint64_t sub_23BE5AA80()
{
  return MEMORY[0x24BDF3900]();
}

uint64_t sub_23BE5AA8C()
{
  return MEMORY[0x24BDF3980]();
}

uint64_t sub_23BE5AA98()
{
  return MEMORY[0x24BDF3C40]();
}

uint64_t sub_23BE5AAA4()
{
  return MEMORY[0x24BDF3D10]();
}

uint64_t sub_23BE5AAB0()
{
  return MEMORY[0x24BDF3D30]();
}

uint64_t sub_23BE5AABC()
{
  return MEMORY[0x24BDF3D78]();
}

uint64_t sub_23BE5AAC8()
{
  return MEMORY[0x24BDF3D88]();
}

uint64_t sub_23BE5AAD4()
{
  return MEMORY[0x24BDF3E08]();
}

uint64_t sub_23BE5AAE0()
{
  return MEMORY[0x24BDF3E70]();
}

uint64_t sub_23BE5AAEC()
{
  return MEMORY[0x24BDF3EB0]();
}

uint64_t sub_23BE5AAF8()
{
  return MEMORY[0x24BDF3F18]();
}

uint64_t sub_23BE5AB04()
{
  return MEMORY[0x24BDF3F28]();
}

uint64_t sub_23BE5AB10()
{
  return MEMORY[0x24BDF3F80]();
}

uint64_t sub_23BE5AB1C()
{
  return MEMORY[0x24BDF3FE8]();
}

uint64_t sub_23BE5AB28()
{
  return MEMORY[0x24BDF40D8]();
}

uint64_t sub_23BE5AB34()
{
  return MEMORY[0x24BDF4130]();
}

uint64_t sub_23BE5AB40()
{
  return MEMORY[0x24BDF4280]();
}

uint64_t sub_23BE5AB4C()
{
  return MEMORY[0x24BDF4290]();
}

uint64_t sub_23BE5AB58()
{
  return MEMORY[0x24BDF42A8]();
}

uint64_t sub_23BE5AB64()
{
  return MEMORY[0x24BDF4340]();
}

uint64_t sub_23BE5AB70()
{
  return MEMORY[0x24BDF4470]();
}

uint64_t sub_23BE5AB7C()
{
  return MEMORY[0x24BDF4480]();
}

uint64_t sub_23BE5AB88()
{
  return MEMORY[0x24BDF46D8]();
}

uint64_t sub_23BE5AB94()
{
  return MEMORY[0x24BDF46E0]();
}

uint64_t sub_23BE5ABA0()
{
  return MEMORY[0x24BDF4F18]();
}

uint64_t sub_23BE5ABAC()
{
  return MEMORY[0x24BDF4F20]();
}

uint64_t sub_23BE5ABB8()
{
  return MEMORY[0x24BDF4F38]();
}

uint64_t sub_23BE5ABC4()
{
  return MEMORY[0x24BDF5018]();
}

uint64_t sub_23BE5ABD0()
{
  return MEMORY[0x24BDF53F0]();
}

uint64_t sub_23BE5ABDC()
{
  return MEMORY[0x24BDF5418]();
}

uint64_t sub_23BE5ABE8()
{
  return MEMORY[0x24BE2B460]();
}

uint64_t sub_23BE5ABF4()
{
  return MEMORY[0x24BE2B560]();
}

uint64_t sub_23BE5AC00()
{
  return MEMORY[0x24BE2B588]();
}

uint64_t sub_23BE5AC0C()
{
  return MEMORY[0x24BE2B598]();
}

uint64_t sub_23BE5AC18()
{
  return MEMORY[0x24BE2B5A8]();
}

uint64_t sub_23BE5AC24()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_23BE5AC30()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_23BE5AC3C()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_23BE5AC48()
{
  return MEMORY[0x24BDCF8D8]();
}

uint64_t sub_23BE5AC54()
{
  return MEMORY[0x24BDCF910]();
}

uint64_t sub_23BE5AC60()
{
  return MEMORY[0x24BDCF930]();
}

uint64_t sub_23BE5AC6C()
{
  return MEMORY[0x24BDCF938]();
}

uint64_t sub_23BE5AC78()
{
  return MEMORY[0x24BDCF948]();
}

uint64_t sub_23BE5AC84()
{
  return MEMORY[0x24BDCF968]();
}

uint64_t sub_23BE5AC90()
{
  return MEMORY[0x24BDCF978]();
}

uint64_t sub_23BE5AC9C()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_23BE5ACA8()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_23BE5ACB4()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_23BE5ACC0()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_23BE5ACCC()
{
  return MEMORY[0x24BEE68D8]();
}

uint64_t sub_23BE5ACD8()
{
  return MEMORY[0x24BEE6920]();
}

uint64_t sub_23BE5ACE4()
{
  return MEMORY[0x24BEE6928]();
}

uint64_t sub_23BE5ACF0()
{
  return MEMORY[0x24BEE6940]();
}

uint64_t sub_23BE5ACFC()
{
  return MEMORY[0x24BEE6970]();
}

uint64_t sub_23BE5AD08()
{
  return MEMORY[0x24BEE6C08]();
}

uint64_t sub_23BE5AD14()
{
  return MEMORY[0x24BE37C48]();
}

uint64_t sub_23BE5AD20()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t sub_23BE5AD2C()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_23BE5AD38()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_23BE5AD44()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_23BE5AD50()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_23BE5AD5C()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_23BE5AD68()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_23BE5AD74()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_23BE5AD80()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_23BE5AD8C()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_23BE5AD98()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_23BE5ADA4()
{
  return MEMORY[0x24BEE32E0]();
}

uint64_t sub_23BE5ADB0()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_23BE5ADBC()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_23BE5ADC8()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t sub_23BE5ADD4()
{
  return MEMORY[0x24BEE3360]();
}

uint64_t sub_23BE5ADE0()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_23BE5ADEC()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_23BE5ADF8()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_23BE5AE04()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_23BE5AE10()
{
  return MEMORY[0x24BEE3430]();
}

uint64_t sub_23BE5AE1C()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_23BE5AE28()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_23BE5AE34()
{
  return MEMORY[0x24BEE34A8]();
}

uint64_t sub_23BE5AE40()
{
  return MEMORY[0x24BEE34B0]();
}

uint64_t sub_23BE5AE4C()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_23BE5AE58()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_23BE5AE64()
{
  return MEMORY[0x24BEE3D50]();
}

uint64_t sub_23BE5AE70()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_23BE5AE7C()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t sub_23BE5AE88()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_23BE5AE94()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_23BE5AEA0()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_23BE5AEAC()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_23BE5AEB8()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_23BE5AEC4()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_23BE5AED0()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_23BE5AEDC()
{
  return MEMORY[0x24BEE4318]();
}

uint64_t sub_23BE5AEE8()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_23BE5AEF4()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_23BE5AF00()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_23BE5AF0C()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_23BE5AF18()
{
  return MEMORY[0x24BEE4A10]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x24BEE4DC0]();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return MEMORY[0x24BEE4DC8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x24BEE4DE8]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x24BEE4DF0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x24BEE4E00]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSingleCase()
{
  return MEMORY[0x24BEE4E38]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

