void sub_19165C854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void **a21)
{
  void *v21;
  uint64_t v22;

  a21 = (void **)&a16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v22 - 88);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);

  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso17dataset_estimator8estimateENSt3__110shared_ptrINS_20abstract_data_sourceEEERKNS0_9options_tEU13block_pointerFvvE_block_invoke(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;

  Espresso::dataset_estimator::sample_stats_with_blobs(a1[5], *a2, a1[6]);
  result = a1[4];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void Espresso::feed_data_source_to_networks(_QWORD *a1, uint64_t **a2, uint64_t a3, void *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Espresso *v20;
  const char *v21;
  unint64_t v22;
  NSObject *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  BOOL v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  std::runtime_error *v57;
  std::string *v58;
  __int128 v59;
  std::runtime_error *v60;
  std::runtime_error *v61;
  std::runtime_error *exception;
  unint64_t v63;
  uint64_t v64;
  void (**v65)(id, _QWORD *);
  __int128 v66;
  _QWORD v67[4];
  void *__p[5];
  __int128 v69;
  _QWORD *v70;
  int v71;
  int v72;
  char v73;
  __int16 v74;
  char v75;
  std::string v76;
  std::string v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD v81[5];
  std::string v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v65 = a4;
  v8 = *a2;
  v7 = a2[1];
  if (v7 == *a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "feed_data_source_to_network: empty network array");
    goto LABEL_87;
  }
  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "feed_data_source_to_network: null data source");
LABEL_87:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = -1;
  do
  {
    v10 = *v8;
    v11 = (std::__shared_weak_count *)v8[1];
    v81[0] = *v8;
    v81[1] = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v82.__r_.__value_.__r.__words[0] = *(_QWORD *)(v10 + 640);
    v14 = *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10 + 136, (unsigned __int8 *)v82.__r_.__value_.__l.__data_, (__int128 **)&v82)+ 5)+ 20);
    if (v9 != -1 && v9 != v14)
    {
      v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v61, "feed_data_source_to_network: networks have different batch size");
      __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v8 += 2;
    v9 = v14;
  }
  while (v8 != v7);
  v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  if ((int)v17 >= (int)a3)
    LODWORD(v18) = a3;
  else
    LODWORD(v18) = v17;
  v18 = (int)v18;
  if ((int)a3 <= 0)
    v18 = v17;
  v63 = (v18 - 1) / (unint64_t)v14;
  v64 = v14;
  if (v63 != -1)
  {
    v19 = 0;
    while (1)
    {
      v20 = (Espresso *)(*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 8))(v81, *a1, v19, v64);
      HIDWORD(v22) = -858993459 * v19;
      LODWORD(v22) = -858993459 * v19;
      if ((v22 >> 1) <= 0x19999999)
      {
        Espresso::espresso_os_log_subsystem(v20, v21);
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v82.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(v82.__r_.__value_.__r.__words[0]) = v19;
          LOWORD(v82.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v82.__r_.__value_.__r.__words[1] + 2) = v63 + 1;
          _os_log_debug_impl(&dword_190DAF000, v23, OS_LOG_TYPE_DEBUG, "[dataset_estimator::estimate] batch: %d / %d\n", (uint8_t *)&v82, 0xEu);
        }

      }
      v25 = *a2;
      v24 = a2[1];
      v79 = 0;
      v80 = 0;
      v78 = 0;
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
      v82.__r_.__value_.__s.__data_[8] = 0;
      v26 = (char *)v24 - (char *)v25;
      if (v26)
        break;
LABEL_77:
      ((void (**)(id, _QWORD **))v65)[2](v65, &v78);
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
      std::vector<Espresso::map_with_ordered_keys<std::string,std::shared_ptr<Espresso::blob<float,4>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node((_QWORD *)v81[2]);
      v56 = (void *)v81[0];
      v81[0] = 0;
      if (v56)
        operator delete(v56);
      v42 = v19++ == v63;
      if (v42)
        goto LABEL_21;
    }
    if ((unint64_t)v26 >= 0x5555555555555551)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v27 = v26 >> 4;
    v28 = 3 * v27;
    v29 = 48 * v27;
    v30 = operator new(48 * v27);
    v31 = &v30[2 * v28];
    v78 = v30;
    v80 = v31;
    do
    {
      v30[1] = 0;
      *v30 = v30 + 1;
      v30[2] = 0;
      v30[3] = 0;
      v30[4] = 0;
      v30[5] = 0;
      v30 += 6;
      v29 -= 48;
    }
    while (v29);
    v32 = 0;
    v79 = v31;
    while (1)
    {
      v33 = *(_OWORD *)&v25[2 * v32];
      v66 = v33;
      v34 = (std::__shared_weak_count *)v25[2 * v32 + 1];
      if (*((_QWORD *)&v33 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v37 = v78;
      v38 = *(_QWORD *)(v33 + 16);
      v39 = *(std::__shared_weak_count **)(v33 + 24);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (*(_BYTE *)(v38 + 44))
        v42 = (a3 & 0x100000000) == 0;
      else
        v42 = 1;
      if (!v42)
      {
        v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v60, "Invalid context: memory aliasing optimizations must be disabled (network_allocate_using_reshape_graph_coloring)");
        __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v43 = *(_QWORD **)(v33 + 232);
      if (v43 != (_QWORD *)(v33 + 240))
      {
        do
        {
          if (*((char *)v43 + 55) < 0)
            std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)v43[4], v43[5]);
          else
            v82 = *(std::string *)(v43 + 4);
          v83 = *((_BYTE *)v43 + 56);
          if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v81, (unsigned __int8 *)&v82))
          {
            v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v58 = std::string::append(&v76, " missing from data_source");
            v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
            v77.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v59;
            v58->__r_.__value_.__l.__size_ = 0;
            v58->__r_.__value_.__r.__words[2] = 0;
            v58->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v57, &v77);
            __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v82.__r_.__value_.__l.__data_);
          v44 = (_QWORD *)v43[1];
          if (v44)
          {
            do
            {
              v45 = v44;
              v44 = (_QWORD *)*v44;
            }
            while (v44);
          }
          else
          {
            do
            {
              v45 = (_QWORD *)v43[2];
              v42 = *v45 == (_QWORD)v43;
              v43 = v45;
            }
            while (!v42);
          }
          v43 = v45;
        }
        while (v45 != (_QWORD *)(v66 + 240));
      }
      v67[0] = MEMORY[0x1E0C809B0];
      v67[1] = 3321888768;
      v67[2] = ___ZN8Espresso28feed_data_source_to_networksENSt3__110shared_ptrINS_20abstract_data_sourceEEENS0_6vectorINS1_INS_3netEEENS0_9allocatorIS6_EEEENS_23feed_data_source_opts_tEU13block_pointerFvRNS4_INS_21map_with_ordered_keysINS0_12basic_stringIcNS0_11char_traitsIcEENS7_IcEEEENS1_INS_4blobIfLi4EEEEEEENS7_ISK_EEEEE_block_invoke;
      v67[3] = &__block_descriptor_108_ea8_32c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE72c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
      std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map((uint64_t)__p, (uint64_t)v81);
      v69 = v66;
      if (v34)
      {
        v46 = (unint64_t *)&v34->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      v71 = v19;
      v72 = a3;
      v73 = BYTE4(a3);
      v74 = HIDWORD(a3) >> 8;
      v75 = HIBYTE(a3);
      v70 = &v37[6 * v32];
      Espresso::abstract_context::compute_batch_sync((void (***)(uint64_t *__return_ptr, _QWORD))v38, v67);
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
      if (*((_QWORD *)&v69 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node((_QWORD *)__p[2]);
      v51 = __p[0];
      __p[0] = 0;
      if (v51)
        operator delete(v51);
      if (!v39)
        goto LABEL_70;
      v52 = (unint64_t *)&v39->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
        if (v34)
        {
LABEL_71:
          v54 = (unint64_t *)&v34->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
      else
      {
LABEL_70:
        if (v34)
          goto LABEL_71;
      }
      ++v32;
      v25 = *a2;
      if (v32 >= ((char *)a2[1] - (char *)*a2) >> 4)
        goto LABEL_77;
    }
  }
LABEL_21:

}

void sub_19165CFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  void *v49;

  __cxa_free_exception(v49);

  _Unwind_Resume(a1);
}

void ___ZN8Espresso28feed_data_source_to_networksENSt3__110shared_ptrINS_20abstract_data_sourceEEENS0_6vectorINS1_INS_3netEEENS0_9allocatorIS6_EEEENS_23feed_data_source_opts_tEU13block_pointerFvRNS4_INS_21map_with_ordered_keysINS0_12basic_stringIcNS0_11char_traitsIcEENS7_IcEEEENS1_INS_4blobIfLi4EEEEEEENS7_ISK_EEEEE_block_invoke(uint64_t a1, _QWORD *a2)
{
  __int128 *v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string *v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  std::string::size_type v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  char **v35;
  std::string *v36;
  std::string *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  char *v43;
  std::__shared_weak_count *v44;
  std::string::size_type v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t **v48;
  uint64_t *v49;
  uint64_t v50;
  char **v51;
  std::string *v52;
  std::string *v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v56;
  std::string v57;
  std::string __p;
  uint64_t v59;
  std::__shared_weak_count *v60;
  std::string *p_p;
  uint8_t buf[24];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v4 = *(__int128 **)(a1 + 48);
  if (v4)
  {
    v5 = a1 + 72;
    do
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v4 + 1);
      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(*(_QWORD *)v5 + 136), (unsigned __int8 *)&__p))
      {
        v7 = Espresso::blob<float,4>::copy(buf, v59);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v57, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v57 = __p;
        v9 = *(std::__shared_weak_count **)&buf[8];
        v56 = *(_OWORD *)buf;
        if (*(_QWORD *)&buf[8])
        {
          v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        Espresso::prepare_blob_for_network((uint64_t)v7, (uint64_t *)(a1 + 72), (std::string::size_type)&v57, (uint64_t)&v56, 0);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        v14 = *(_QWORD *)v5 + 136;
        p_p = &__p;
        v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (unsigned __int8 *)&__p, (__int128 **)&p_p);
        (*(void (**)(_QWORD, _QWORD *, uint8_t *))(**((_QWORD **)v15 + 5) + 48))(*((_QWORD *)v15 + 5), a2, buf);
        v16 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      else if (!*(_DWORD *)(a1 + 96))
      {
        Espresso::espresso_os_log_subsystem(0, v6);
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = &__p;
          else
            v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v22;
          _os_log_error_impl(&dword_190DAF000, v8, OS_LOG_TYPE_ERROR, "[dataset_estimator::estimate] blob not found in network: %s", buf, 0xCu);
        }

      }
      v19 = v60;
      if (v60)
      {
        v20 = (unint64_t *)&v60->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v4 = *(__int128 **)v4;
    }
    while (v4);
  }
  Espresso::net::__forward(*(_QWORD *)(a1 + 72), a2, 0, 0xFFFFFFFFLL);
  v23 = *(_QWORD **)(a1 + 72);
  if (*(_BYTE *)(a1 + 104))
  {
    v24 = (unsigned __int8 *)v23[86];
    v25 = (unsigned __int8 *)v23[87];
    while (v24 != v25)
    {
      v26 = *(_QWORD *)(a1 + 72) + 136;
      *(_QWORD *)buf = v24;
      v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, v24, (__int128 **)buf);
      v29 = *((_QWORD *)v27 + 5);
      v28 = (std::__shared_weak_count *)*((_QWORD *)v27 + 6);
      __p.__r_.__value_.__r.__words[0] = v29;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
      if (v28)
      {
        v30 = (unint64_t *)&v28->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v32 = *(uint64_t ***)(a1 + 88);
      *(_QWORD *)buf = v24;
      v33 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, v24, (__int128 **)buf);
      (*(void (**)(std::string::size_type, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 40))(v29, a2, v33 + 7);
      v34 = *(_QWORD *)(a1 + 88);
      v35 = (char **)(v34 + 24);
      v36 = *(std::string **)(v34 + 32);
      if ((unint64_t)v36 >= *(_QWORD *)(v34 + 40))
      {
        v37 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v35, (uint64_t)v24);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v35, (__int128 *)v24);
        v37 = v36 + 1;
      }
      *(_QWORD *)(v34 + 32) = v37;
      if (v28)
      {
        v38 = (unint64_t *)&v28->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v24 += 24;
    }
  }
  else
  {
    v40 = (unsigned __int8 *)v23[83];
    v41 = (unsigned __int8 *)v23[84];
    while (v40 != v41)
    {
      v42 = *(_QWORD *)(a1 + 72) + 136;
      *(_QWORD *)buf = v40;
      v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v42, v40, (__int128 **)buf);
      v45 = *((_QWORD *)v43 + 5);
      v44 = (std::__shared_weak_count *)*((_QWORD *)v43 + 6);
      __p.__r_.__value_.__r.__words[0] = v45;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
      if (v44)
      {
        v46 = (unint64_t *)&v44->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      v48 = *(uint64_t ***)(a1 + 88);
      *(_QWORD *)buf = v40;
      v49 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v48, v40, (__int128 **)buf);
      (*(void (**)(std::string::size_type, _QWORD *, uint64_t *))(*(_QWORD *)v45 + 40))(v45, a2, v49 + 7);
      v50 = *(_QWORD *)(a1 + 88);
      v51 = (char **)(v50 + 24);
      v52 = *(std::string **)(v50 + 32);
      if ((unint64_t)v52 >= *(_QWORD *)(v50 + 40))
      {
        v53 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v51, (uint64_t)v40);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v51, (__int128 *)v40);
        v53 = v52 + 1;
      }
      *(_QWORD *)(v50 + 32) = v53;
      if (v44)
      {
        v54 = (unint64_t *)&v44->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v40 += 24;
    }
  }
}

void sub_19165D5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 96);
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void std::vector<Espresso::map_with_ordered_keys<std::string,std::shared_ptr<Espresso::blob<float,4>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void **)(v4 - 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)v4 - 5));
        v4 -= 48;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t __copy_helper_block_ea8_32c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE72c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map(a1 + 32, a2 + 32);
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE72c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 72);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v1);
}

int64x2_t *Espresso::batchnorm_renormalizer::batchnorm_renormalizer(int64x2_t *a1, Espresso::net **a2, int64x2_t *a3)
{
  Espresso::net *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  Espresso::net *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  Espresso *v18;
  std::__shared_weak_count *v19;
  Espresso *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  const struct __class_type_info *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  const void *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  const struct __class_type_info *v42;
  _DWORD *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;
  _DWORD *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::runtime_error *exception;
  uint64_t *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t v75;
  __int128 v76;
  void *v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  Espresso *v81;
  std::__shared_weak_count *v82;
  _QWORD v83[6];
  std::__shared_weak_count *v84;

  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    a1->i64[0] = (uint64_t)v6;
    a1->i64[1] = (uint64_t)v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    a1->i64[0] = (uint64_t)v6;
    a1->i64[1] = 0;
  }
  a1[4].i64[1] = 0;
  a1[1].i64[1] = 0;
  a1[3].i64[0] = 0;
  a1[1].i64[0] = (uint64_t)&a1[1].i64[1];
  a1[2].i64[0] = 0;
  a1[2].i64[1] = (uint64_t)a1[3].i64;
  a1[5].i64[0] = 0;
  a1[3].i64[1] = 0;
  a1[4].i64[0] = (uint64_t)&a1[4].i64[1];
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(int64x2_t *)((char *)a1 + 88) = *a3;
  std::unordered_set<std::string>::unordered_set((uint64_t)&a1[6].i64[1], (uint64_t)a3[1].i64);
  v13 = a3[3].i64[1];
  a1[9].i32[2] = a3[4].i32[0];
  a1[10] = 0u;
  a1[9].i64[0] = v13;
  v72 = &a1[13].i64[1];
  a1[11] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[15].i32[0] = 0;
  v83[0] = MEMORY[0x1E0C809B0];
  v83[1] = 3321888768;
  v83[2] = ___ZN8Espresso22batchnorm_renormalizerC2ENSt3__110shared_ptrINS_3netEEENS0_9options_tE_block_invoke;
  v83[3] = &__block_descriptor_56_ea8_40c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e9_v16__0_v8l;
  v14 = *a2;
  v15 = (std::__shared_weak_count *)a2[1];
  v83[4] = a1;
  v83[5] = v14;
  v84 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  Espresso::single_match_replace<Espresso::generic_convolution_kernel>(v14, v83);
  v18 = (Espresso *)a1->i64[0];
  v19 = (std::__shared_weak_count *)a1->i64[1];
  v81 = v18;
  v82 = v19;
  v20 = v18;
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v20 = (Espresso *)a1->i64[0];
  }
  Espresso::shape_network_recursive(v18, (Espresso *)((char *)v20 + 184), 0, 0);
  if (v82)
  {
    v23 = &v82->__shared_owners_;
    do
      v24 = __ldaxr((unint64_t *)v23);
    while (__stlxr(v24 - 1, (unint64_t *)v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v26 = *(uint64_t **)(a1->i64[0] + 32);
  v25 = *(uint64_t **)(a1->i64[0] + 40);
  if (v26 != v25)
  {
    v27 = 0;
    do
    {
      v30 = *v26;
      v29 = (std::__shared_weak_count *)v26[1];
      v79 = *v26;
      v80 = v29;
      if (v29)
      {
        v31 = (unint64_t *)&v29->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      v33 = *(const void **)(v30 + 64);
      if (!v33)
        goto LABEL_64;
      if (!v34)
        goto LABEL_64;
      v35 = *(std::__shared_weak_count **)(v30 + 72);
      v77 = v34;
      v78 = v35;
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        do
          v38 = __ldxr(v36);
        while (__stxr(v38 + 1, v36));
      }
      LODWORD(v75) = v27;
      *(_QWORD *)&v76 = v34;
      *((_QWORD *)&v76 + 1) = v35;
      v40 = (_DWORD *)a1[14].i64[0];
      v39 = a1[14].u64[1];
      if ((unint64_t)v40 >= v39)
      {
        v42 = v28;
        v43 = (_DWORD *)*v72;
        v44 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *v72) >> 3);
        v45 = v44 + 1;
        if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (_QWORD)v43) >> 3);
        if (2 * v46 > v45)
          v45 = 2 * v46;
        if (v46 >= 0x555555555555555)
          v47 = 0xAAAAAAAAAAAAAAALL;
        else
          v47 = v45;
        if (v47 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v48 = (char *)operator new(24 * v47);
        v49 = &v48[24 * v44];
        *(_DWORD *)v49 = v27;
        *(_OWORD *)(v49 + 8) = v76;
        v50 = &v48[24 * v47];
        v76 = 0uLL;
        v41 = v49 + 24;
        if (v40 == v43)
        {
          a1[13].i64[1] = (uint64_t)v49;
          a1[14].i64[0] = (uint64_t)v41;
          a1[14].i64[1] = (uint64_t)v50;
        }
        else
        {
          do
          {
            v51 = *(v40 - 6);
            v40 -= 6;
            *((_DWORD *)v49 - 6) = v51;
            v49 -= 24;
            *(_OWORD *)(v49 + 8) = *(_OWORD *)(v40 + 2);
            *((_QWORD *)v40 + 1) = 0;
            *((_QWORD *)v40 + 2) = 0;
          }
          while (v40 != v43);
          v52 = (_DWORD *)a1[13].i64[1];
          v40 = (_DWORD *)a1[14].i64[0];
          a1[13].i64[1] = (uint64_t)v49;
          a1[14].i64[0] = (uint64_t)v41;
          a1[14].i64[1] = (uint64_t)v50;
          if (v40 != v52)
          {
            do
            {
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v40 - 4));
              v40 -= 6;
            }
            while (v40 != v52);
            v40 = v52;
          }
        }
        v28 = v42;
        if (v40)
        {
          operator delete(v40);
          v53 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
          a1[14].i64[0] = (uint64_t)v41;
          if (v53)
          {
            v54 = (unint64_t *)&v53->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          goto LABEL_58;
        }
      }
      else
      {
        *v40 = v27;
        *(_OWORD *)(v40 + 2) = v76;
        v76 = 0uLL;
        v41 = v40 + 6;
        a1[14].i64[0] = (uint64_t)(v40 + 6);
      }
      a1[14].i64[0] = (uint64_t)v41;
LABEL_58:
      a1[15].i32[0] += *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v77 + 384))(v77);
      v56 = a1->i64[0] + 56;
      v75 = v27;
      v57 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v56, v27, &v75);
      if (v57[4] == v57[3])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Inconsistent state: no inputs to BN");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v58 = v78;
      if (v78)
      {
        v59 = (unint64_t *)&v78->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
LABEL_64:
      v61 = v80;
      if (v80)
      {
        v62 = (unint64_t *)&v80->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      ++v27;
      v26 += 2;
    }
    while (v26 != v25);
  }
  Espresso::batchnorm_renormalizer::create_checkpoint(a1, 1, &v73);
  v64 = v74;
  if (v74)
  {
    v65 = (unint64_t *)&v74->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v84;
  if (v84)
  {
    v68 = (unint64_t *)&v84->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  return a1;
}

void sub_19165DCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  Espresso::dataset_estimator *v30;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  a16 = a12;
  std::vector<std::pair<int,std::shared_ptr<Espresso::generic_batchnorm_kernel>>>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v30 + 200);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v30 + 184);
  a16 = a10;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a11);
  Espresso::dataset_estimator::~dataset_estimator(v30);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso22batchnorm_renormalizerC2ENSt3__110shared_ptrINS_3netEEENS0_9options_tE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int32x2_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *size;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  size_t v41;
  std::string *p_str;
  std::string *v43;
  uint64_t v44;
  std::vector<std::string> *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  size_t v49;
  std::string *v50;
  std::string *v51;
  uint64_t v52;
  std::string **v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::runtime_error *exception;
  void *lpsrc;
  std::__shared_weak_count *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72[2];
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  _DWORD v79[5];
  __int16 v80;
  int32x2_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string v94;
  std::string v95;
  void **p_lpsrc;
  char v97;
  std::string v98;
  uint64_t v99;
  std::string __str;
  __int128 v101;

  *(_QWORD *)&v101 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 32);
  v5 = a2[3].i32[2];
  v6 = *v4;
  v7 = *(_QWORD *)(*(_QWORD *)(*v4 + 32) + 16 * v5);
  if (*(char *)(v7 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)(v7 + 16), *(_QWORD *)(v7 + 24));
    v6 = *v4;
  }
  else
  {
    v95 = *(std::string *)(v7 + 16);
  }
  *(_QWORD *)v79 = v5;
  v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6 + 96, v5, v79);
  if (v8[4] - v8[3] == 24)
  {
    v9 = *v4 + 96;
    *(_QWORD *)v79 = v5;
    v10 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v5, v79)[3];
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *v10;
      v94.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v11;
    }
    v12 = a2->i64[0];
    v13 = (std::__shared_weak_count *)a2->i64[1];
    v92 = a2->i64[0];
    v93 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 384))(v12);
    v17 = (int32x2_t *)v16;
    if (*(_DWORD *)(v16 + 112))
    {
      if (*(_DWORD *)(v16 + 60) != -1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "not implemented");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      *(_DWORD *)(v16 + 112) = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a2->i64[0] + 448))(&v90);
      v18 = a2->i64[0];
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v88, v17[5].i32[0], 1, 1, 1);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 392))(v18, &v88);
      v19 = v89;
      if (v89)
      {
        v20 = (unint64_t *)&v89->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      *(_QWORD *)&v79[1] = 0;
      *(_QWORD *)&v79[3] = 0x3F6666663727C5ACLL;
      v80 = 0;
      v83 = 0;
      v84 = 0;
      v82 = 0;
      v85 = 1065353216;
      v86 = 0;
      v87 = 0x200000000;
      v81 = vrev64_s32(v17[3]);
      v79[0] = v17[5].i32[0];
      v22 = *(_QWORD *)(a1 + 40);
      v24 = *(_QWORD *)(v22 + 16);
      v23 = *(std::__shared_weak_count **)(v22 + 24);
      v77 = v24;
      v78 = v23;
      if (v23)
      {
        v25 = (unint64_t *)&v23->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      Espresso::abstract_engine_factory::shared(&v98);
      v27 = v98.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&__str, "batchnorm");
      LODWORD(p_lpsrc) = (***(uint64_t (****)(_QWORD))(v77 + 8))(*(_QWORD *)(v77 + 8));
      Espresso::abstract_engine_factory::make_kernel_priv(v27, (uint64_t)&v77, (uint64_t)&__str, (uint64_t)v79, (int *)&p_lpsrc);
      if (lpsrc
      {
        v75 = (uint64_t)v28;
        v76 = v69;
        if (v69)
        {
          v29 = &v69->__shared_owners_;
          do
            v30 = __ldxr((unint64_t *)v29);
          while (__stxr(v30 + 1, (unint64_t *)v29));
        }
      }
      else
      {
        v75 = 0;
        v76 = 0;
      }
      if (v69)
      {
        v31 = &v69->__shared_owners_;
        do
          v32 = __ldaxr((unint64_t *)v31);
        while (__stlxr(v32 - 1, (unint64_t *)v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      size = (std::__shared_weak_count *)v98.__r_.__value_.__l.__size_;
      if (v98.__r_.__value_.__l.__size_)
      {
        v34 = (unint64_t *)(v98.__r_.__value_.__l.__size_ + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v73 = v90;
      v74 = v91;
      if (v91)
      {
        v36 = (unint64_t *)&v91->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v75 + 392))(v75, &v73);
      v38 = v74;
      if (v74)
      {
        v39 = (unint64_t *)&v74->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      else
        v41 = v94.__r_.__value_.__l.__size_;
      p_str = &__str;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v41 + 13);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v41)
      {
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = &v94;
        else
          v43 = (std::string *)v94.__r_.__value_.__r.__words[0];
        memmove(p_str, v43, v41);
      }
      strcpy((char *)p_str + v41, "_bnrenorm_tmp");
      v44 = *v4 + 96;
      lpsrc = (void *)v5;
      v45 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v44, v5, &lpsrc);
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v45 + 1, &__str, &v101, 1uLL);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v46 = v76;
      v72[0] = v75;
      v72[1] = (uint64_t)v76;
      if (v76)
      {
        v47 = (unint64_t *)&v76->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
      else
        v49 = v95.__r_.__value_.__l.__size_;
      v50 = &__str;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v49 + 13);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v50 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v49)
      {
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v95;
        else
          v51 = (std::string *)v95.__r_.__value_.__r.__words[0];
        memmove(v50, v51, v49);
      }
      strcpy((char *)v50 + v49, "_bnrenorm_tmp");
      v52 = *v4 + 96;
      v71 = v5;
      v53 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v52, v5, &v71);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v98, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
      else
        v98 = v94;
      lpsrc = 0;
      v69 = 0;
      v70 = 0;
      p_lpsrc = &lpsrc;
      v97 = 0;
      lpsrc = operator new(0x18uLL);
      v69 = (std::__shared_weak_count *)lpsrc;
      v70 = (char *)lpsrc + 24;
      v69 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v70, (__int128 *)&v98, (__int128 *)&v99, (std::string *)lpsrc);
      Espresso::single_match_state<Espresso::generic_convolution_kernel>::add_kernel(a2, v72, &__str, &v95, v53 + 3, (std::string **)&lpsrc, 0);
      p_lpsrc = &lpsrc;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_lpsrc);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v46)
      {
        v54 = (unint64_t *)&v46->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v56 = v76;
      if (v76)
      {
        v57 = (unint64_t *)&v76->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v59 = v78;
      if (v78)
      {
        v60 = (unint64_t *)&v78->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v62 = v91;
      if (v91)
      {
        v63 = (unint64_t *)&v91->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v13 = v93;
    }
    if (v13)
    {
      v65 = (unint64_t *)&v13->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
}

void sub_19165E504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 89) < 0)
    operator delete(*(void **)(v42 - 112));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  if (a42 < 0)
    operator delete(__p);
  if (*(char *)(v42 - 169) < 0)
    operator delete(*(void **)(v42 - 192));
  _Unwind_Resume(a1);
}

void Espresso::batchnorm_renormalizer::create_checkpoint(int64x2_t *this@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  std::string::size_type v9;
  void *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  int v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  __int128 v46;
  int64x2_t v47;
  uint64_t v48;
  void *v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  void **v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  FILE *v59;
  unint64_t *v60;
  unint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  float *v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  float *v75;
  float *v76;
  float v77;
  uint64_t v78;
  float *v79;
  float v80;
  float *v81;
  uint64_t v82;
  float v83;
  float v84;
  float v85;
  float *v86;
  uint64_t v87;
  float v88;
  float v89;
  float v90;
  uint64_t v91;
  float v92;
  double v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::runtime_error *exception;
  std::string v98;
  std::string v99;
  void *__p[2];
  std::__shared_weak_count *v101;
  __int128 __ptr;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(a3, this[15].i32[0], 2, 1, 1);
  v6 = this[13].i64[1];
  v7 = this[14].i64[0];
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      LODWORD(__p[0]) = *(_DWORD *)v6;
      v10 = *(void **)(v6 + 8);
      v9 = *(_QWORD *)(v6 + 16);
      __p[1] = v10;
      v101 = (std::__shared_weak_count *)v9;
      if (v9)
      {
        v11 = (unint64_t *)(v9 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v99.__r_.__value_.__l.__size_ = v9;
        do
          v13 = __ldxr(v11);
        while (__stxr(v13 + 1, v11));
      }
      else
      {
        v99.__r_.__value_.__l.__size_ = 0;
      }
      v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      v14 = *(unsigned int *)(*(uint64_t (**)(void *))(*(_QWORD *)v10 + 384))(v10);
      (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v10 + 408))(&v98, v10);
      if ((int)v14 >= 1)
      {
        v15 = *(_QWORD *)(*a3 + 16);
        v16 = (int *)(*(_QWORD *)(v98.__r_.__value_.__r.__words[0] + 16) + 12);
        v17 = 2 * v8;
        v18 = v14;
        do
        {
          *(_DWORD *)(v15 + 4 * v17) = *(v16 - 1);
          v19 = *v16;
          v16 += 4;
          *(_DWORD *)(v15 + 4 * (v17 + 1)) = v19;
          v17 += 2;
          --v18;
        }
        while (v18);
        v8 += v14;
      }
      size = (std::__shared_weak_count *)v98.__r_.__value_.__l.__size_;
      if (v98.__r_.__value_.__l.__size_)
      {
        v21 = (unint64_t *)(v98.__r_.__value_.__l.__size_ + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v23 = (std::__shared_weak_count *)v99.__r_.__value_.__l.__size_;
      if (v99.__r_.__value_.__l.__size_)
      {
        v24 = (unint64_t *)(v99.__r_.__value_.__l.__size_ + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = v101;
      if (v101)
      {
        p_shared_owners = (unint64_t *)&v101->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v6 += 24;
    }
    while (v6 != v7);
  }
  if ((a2 & 1) != 0)
  {
    v30 = (uint64_t *)this[10].i64[1];
    v29 = this[11].u64[0];
    if ((unint64_t)v30 >= v29)
    {
      v35 = (char *)this[10].i64[0];
      v36 = ((char *)v30 - v35) >> 4;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v38 = v29 - (_QWORD)v35;
      if (v38 >> 3 > v37)
        v37 = v38 >> 3;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
        v39 = 0xFFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v40 = (char *)operator new(16 * v39);
      v41 = &v40[16 * v36];
      v42 = *(_OWORD *)a3;
      *(_OWORD *)v41 = *(_OWORD *)a3;
      if (*((_QWORD *)&v42 + 1))
      {
        v43 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        v35 = (char *)this[10].i64[0];
        v30 = (uint64_t *)this[10].i64[1];
      }
      if (v30 == (uint64_t *)v35)
      {
        v47 = vdupq_n_s64((unint64_t)v30);
        v45 = &v40[16 * v36];
      }
      else
      {
        v45 = &v40[16 * v36];
        do
        {
          v46 = *((_OWORD *)v30 - 1);
          v30 -= 2;
          *((_OWORD *)v45 - 1) = v46;
          v45 -= 16;
          *v30 = 0;
          v30[1] = 0;
        }
        while (v30 != (uint64_t *)v35);
        v47 = this[10];
      }
      v34 = v41 + 16;
      this[10].i64[0] = (uint64_t)v45;
      this[10].i64[1] = (uint64_t)(v41 + 16);
      this[11].i64[0] = (uint64_t)&v40[16 * v39];
      v48 = v47.i64[1];
      v49 = (void *)v47.i64[0];
      while ((void *)v48 != v49)
        v48 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v48 - 16);
      if (v49)
        operator delete(v49);
    }
    else
    {
      *v30 = *a3;
      v31 = a3[1];
      v30[1] = v31;
      if (v31)
      {
        v32 = (unint64_t *)(v31 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v34 = v30 + 2;
    }
    this[10].i64[1] = (uint64_t)v34;
    std::to_string(&v98, ((uint64_t)v34 - this[10].i64[0]) >> 4);
    v50 = std::string::insert(&v98, 0, "/tmp/bn_");
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    v52 = std::string::append(&v99, ".f4");
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v101 = (std::__shared_weak_count *)v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v101) >= 0)
      v54 = __p;
    else
      v54 = (void **)__p[0];
    v56 = *a3;
    v55 = (std::__shared_weak_count *)a3[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    v59 = fopen((const char *)v54, "wb");
    if (!v59)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Null file pointer");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    __ptr = xmmword_191A93A60;
    *(_QWORD *)&__ptr = *(_QWORD *)(v56 + 8);
    fwrite(&__ptr, 4uLL, 4uLL, v59);
    fwrite(*(const void **)(v56 + 16), 1uLL, 4 * *(int *)(v56 + 8) * (uint64_t)*(int *)(v56 + 12), v59);
    fclose(v59);
    if (v55)
    {
      v60 = (unint64_t *)&v55->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (SHIBYTE(v101) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (!this[11].i64[1])
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&this[11].i64[1], *(_QWORD *)this[10].i64[0], *(_QWORD *)(this[10].i64[0] + 8));
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(__p, this[15].i32[0], 2, 1, 1);
  v62 = (int *)__p[0];
  v63 = *((int *)__p[0] + 3) * (uint64_t)*((int *)__p[0] + 2);
  v64 = *a3;
  if (v63)
  {
    v65 = *(float **)(v64 + 16);
    v66 = *(float **)(this[11].i64[1] + 16);
    v67 = (float *)*((_QWORD *)__p[0] + 2);
    do
    {
      v68 = *v65++;
      v69 = v68;
      v70 = *v66++;
      *v67++ = vabds_f32(v69, v70);
      --v63;
    }
    while (v63);
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&this[11].i64[1], v64, a3[1]);
  v73 = this[12].i64[1];
  v72 = &this[12].i64[1];
  v71 = v73;
  if (v73)
  {
    v74 = v62[3] * (uint64_t)v62[2];
    if (v74)
    {
      v75 = (float *)*((_QWORD *)v62 + 2);
      v76 = *(float **)(v71 + 16);
      do
      {
        v77 = *v75++;
        *v76 = (float)(*v76 * 0.90484) + (float)(v77 * 0.095163);
        ++v76;
        --v74;
      }
      while (v74);
    }
  }
  else
  {
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v72, (uint64_t)v62, (uint64_t)__p[1]);
    v71 = *v72;
  }
  v78 = *(int *)(v71 + 12) * (uint64_t)*(int *)(v71 + 8);
  v79 = *(float **)(v71 + 16);
  v80 = *v79;
  if (v78)
  {
    v81 = v79;
    v82 = v78;
    v83 = *v79;
    do
    {
      v84 = *v81++;
      v85 = v84;
      if (v84 < v83)
        v83 = v85;
      --v82;
    }
    while (v82);
    v86 = v79;
    v87 = v78;
    do
    {
      v88 = *v86++;
      v89 = v88;
      if (v88 > v80)
        v80 = v89;
      --v87;
    }
    while (v87);
    v90 = 0.0;
    v91 = v78;
    do
    {
      v92 = *v79++;
      v90 = v90 + v92;
      --v91;
    }
    while (v91);
    v93 = v90;
  }
  else
  {
    v93 = 0.0;
    v83 = *v79;
  }
  printf("delta_moving_average: min=%.4e max=%.4e avg=%.4e\n", v83, v80, v93 / (double)(unint64_t)v78);
  v94 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v95 = (unint64_t *)((char *)__p[1] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
}

void sub_19165ECD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  void *v33;

  __cxa_free_exception(v33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a32 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a19 < 0)
    operator delete(a14);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<int,std::shared_ptr<Espresso::generic_batchnorm_kernel>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 16));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Espresso::batchnorm_renormalizer::analyze(Espresso::batchnorm_renormalizer *this)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int *v6;
  int v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  float v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  double v25;
  uint64_t *v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  float v33;
  float v34;
  std::string *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  int *v52;
  int *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  std::string v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  int v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  __int128 *v66[2];

  v2 = (uint64_t *)*((_QWORD *)this + 20);
  v3 = (std::__shared_weak_count *)v2[1];
  v64 = *v2;
  v65 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = (int *)*((_QWORD *)this + 27);
  v52 = (int *)*((_QWORD *)this + 28);
  if (v6 != v52)
  {
    v7 = 0;
    do
    {
      v8 = *v6;
      v61 = *v6;
      v10 = *((_QWORD *)v6 + 1);
      v9 = (std::__shared_weak_count *)*((_QWORD *)v6 + 2);
      v62 = v10;
      v63 = v9;
      if (v9)
      {
        v11 = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v60 = v9;
        do
          v13 = __ldxr(v11);
        while (__stxr(v13 + 1, v11));
      }
      else
      {
        v60 = 0;
      }
      v59 = v10;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 384))(v10);
      v15 = *(_DWORD *)v14;
      v16 = *(float *)(v14 + 12);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v10 + 408))(&v57, v10);
      v17 = *(_QWORD *)this + 56;
      v66[0] = (__int128 *)v8;
      v18 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v17, v8, v66)[3];
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
      }
      else
      {
        v19 = *v18;
        v56.__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v19;
      }
      if (v15 >= 1)
      {
        v53 = v6;
        v20 = 0;
        v21 = 88 * v15;
        v22 = 2 * v7;
        v23 = 3;
        do
        {
          v24 = *(_QWORD *)(v57 + 16);
          v66[0] = (__int128 *)&v56;
          v25 = *(double *)(std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 5, &v56, v66)[7]+ v20+ 16);
          v66[0] = (__int128 *)&v56;
          v26 = std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 5, &v56, v66);
          v27 = v23 - 1;
          v28 = v25;
          v29 = *(double *)(v26[7] + v20 + 24);
          v30 = (float)((float)(1.0 - *((float *)this + 37)) * v28)
              + (float)(*(float *)(v24 + 4 * v27) * *((float *)this + 37));
          *(float *)(v24 + 4 * v27) = v30;
          v31 = (float)(sqrtf(v16 + (float)(v29 * v29)) * (float)(1.0 - *((float *)this + 37)))
              + (float)(*(float *)(v24 + 4 * v23) * *((float *)this + 37));
          *(float *)(v24 + 4 * v23) = v31;
          if (!v20)
          {
            v32 = *(_QWORD *)(v64 + 16);
            v33 = *(float *)(v32 + 4 * v22);
            v34 = *(float *)(v32 + 4 * (v22 + 1));
            if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v35 = &v56;
            else
              v35 = (std::string *)v56.__r_.__value_.__r.__words[0];
            printf("%s %d - %f (%f) %f (%f)\n", (const char *)v35, 0, v30, v33, v31, v34);
          }
          ++v7;
          v20 += 88;
          v23 += 4;
          v22 += 2;
        }
        while (v21 != v20);
        v6 = v53;
      }
      v54 = v57;
      v55 = v58;
      if (v58)
      {
        v36 = (unint64_t *)&v58->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 392))(v10, &v54);
      v38 = v55;
      if (v55)
      {
        v39 = (unint64_t *)&v55->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      v41 = v58;
      if (v58)
      {
        v42 = (unint64_t *)&v58->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = v60;
      if (v60)
      {
        v45 = (unint64_t *)&v60->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = v63;
      if (v63)
      {
        v48 = (unint64_t *)&v63->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v6 += 6;
    }
    while (v6 != v52);
    v3 = v65;
  }
  if (v3)
  {
    v50 = (unint64_t *)&v3->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19165F1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a26 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 144);
  _Unwind_Resume(a1);
}

void Espresso::batchnorm_renormalizer::renormalize_bn_epoch(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[6];
  uint64_t v8[2];
  _QWORD v9[3];
  int v10;

  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2020000000;
  v10 = 0;
  v2 = (std::__shared_weak_count *)a2[1];
  v8[0] = *a2;
  v8[1] = (uint64_t)v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZN8Espresso22batchnorm_renormalizer20renormalize_bn_epochENSt3__110shared_ptrINS_20abstract_data_sourceEEE_block_invoke;
  v7[3] = &unk_1E2DD51D8;
  v7[4] = v9;
  v7[5] = a1;
  Espresso::dataset_estimator::estimate((uint64_t **)a1, v8, (unsigned int *)(a1 + 88), v7);
  if (v2)
  {
    v5 = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  _Block_object_dispose(v9, 8);
}

void sub_19165F308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso22batchnorm_renormalizer20renormalize_bn_epochENSt3__110shared_ptrINS_20abstract_data_sourceEEE_block_invoke(uint64_t a1)
{
  Espresso::batchnorm_renormalizer *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v1 = *(Espresso::batchnorm_renormalizer **)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += *((_DWORD *)v1 + 23);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) >= *((_DWORD *)v1 + 36))
  {
    Espresso::batchnorm_renormalizer::analyze(v1);
    Espresso::batchnorm_renormalizer::create_checkpoint((int64x2_t *)v1, 1, &v6);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) -= *((_DWORD *)v1 + 36);
  }
}

void Espresso::dataset_estimator::result_t::save(_QWORD *a1, uint64_t a2)
{
  __int128 *v3;
  void *v4;
  std::string *v5;
  void *v6;
  __int128 *v7;
  __int128 *v8;
  BOOL v9;
  __int128 *v10;
  __int128 *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  std::string *v16;
  void *v17;
  __int128 *v18;
  __int128 *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;
  void *v31;
  id v32;
  std::string v33;
  _QWORD v34[7];
  void *__p;
  void *v36;
  void **v37;
  _QWORD v38[2];
  _QWORD v39[4];

  v39[2] = *MEMORY[0x1E0C80C00];
  v31 = (void *)objc_opt_new();
  v30 = (void *)objc_opt_new();
  v3 = (__int128 *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      std::pair<std::string const,Espresso::dataset_estimator::statistics_entry_t>::pair[abi:ne180100](&v33, v3 + 2);
      Espresso::dataset_estimator::result_t::save(std::string const&)::$_0::operator()((uint64_t)v34);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v5 = &v33;
      else
        v5 = (std::string *)v33.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v4, v6);

      if (__p)
      {
        v36 = __p;
        operator delete(__p);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      v7 = (__int128 *)*((_QWORD *)v3 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(__int128 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (__int128 *)*((_QWORD *)v3 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v9);
      }
      v3 = v8;
    }
    while (v8 != (__int128 *)(a1 + 1));
  }
  v10 = (__int128 *)a1[3];
  v11 = (__int128 *)(a1 + 4);
  if (v10 != (__int128 *)(a1 + 4))
  {
    do
    {
      std::pair<std::string const,std::vector<Espresso::dataset_estimator::statistics_entry_t>>::pair[abi:ne180100](&v33, v10 + 2);
      v12 = (void *)objc_opt_new();
      v14 = v34[0];
      v13 = v34[1];
      while (v14 != v13)
      {
        Espresso::dataset_estimator::result_t::save(std::string const&)::$_0::operator()(v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "addObject:", v15);

        v14 += 88;
      }
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v33;
      else
        v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "setObject:forKeyedSubscript:", v12, v17);

      v37 = (void **)v34;
      std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100](&v37);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      v18 = (__int128 *)*((_QWORD *)v10 + 1);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(__int128 **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (__int128 *)*((_QWORD *)v10 + 2);
          v9 = *(_QWORD *)v19 == (_QWORD)v10;
          v10 = v19;
        }
        while (!v9);
      }
      v10 = v19;
    }
    while (v19 != v11);
  }
  v38[0] = CFSTR("entries");
  v38[1] = CFSTR("entries_per_ch");
  v39[0] = v31;
  v39[1] = v30;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 2);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v20, 1, &v32);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v32;
  v23 = v22;
  if (!v21)
  {
    objc_msgSend(v22, "description");
    v27 = objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    Espresso::throw_exception_selector<Espresso::io_error,char const*>("Cannot serialize to JSON. Error: %s", v27);
  }
  if (*(char *)(a2 + 23) >= 0)
    v24 = a2;
  else
    v24 = *(_QWORD *)a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v21, "writeToFile:atomically:", v25, 1);

  if ((v26 & 1) == 0)
  {
    if (*(char *)(a2 + 23) >= 0)
      v28 = a2;
    else
      v28 = *(_QWORD *)a2;
    Espresso::throw_exception_selector<Espresso::io_error,char const*>("Cannot write to: %s", v28);
  }

}

void sub_19165F758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id Espresso::dataset_estimator::result_t::save(std::string const&)::$_0::operator()(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  void *v9;

  v2 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)a1, 0.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("min_val"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 8), 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CFSTR("max_val"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 16), 0.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, CFSTR("mean"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 24), 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, CFSTR("stddev"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 32), 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v7, CFSTR("mean_sq"));

  *(float *)&v8 = (float)*(unint64_t *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, CFSTR("n_samples"));

  return v2;
}

void sub_19165F9AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::vector<Espresso::dataset_estimator::statistics_entry_t>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void Espresso::dataset_estimator::result_t::load(uint64_t **a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void **v14;
  _OWORD *v15;
  uint64_t **v16;
  void *v17;
  __int128 v18;
  uint64_t **v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t k;
  void *v25;
  void **v26;
  char *v27;
  uint64_t **v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t j;
  id obj;
  uint64_t **v56;
  id v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  void *__p[2];
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int v71;
  __int128 v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  char *v83;
  char *v84;
  char *v85;
  _BYTE v86[128];
  _BYTE v87[128];
  _BYTE v88[128];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99D50];
  if (*(char *)(a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dataWithContentsOfFile:", v6);
  v7 = objc_claimAutoreleasedReturnValue();

  v46 = (void *)v7;
  if (!v7)
  {
    if (*(char *)(a2 + 23) >= 0)
      v44 = a2;
    else
      v44 = *(_QWORD *)a2;
    Espresso::throw_exception_selector<Espresso::io_error,char const*>("Cannot load to: %s", v44);
  }
  v79 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v7, 0, &v79);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = v79;
  v48 = v8;
  if (!v8)
  {
    objc_msgSend(v47, "description", v7);
    v45 = objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    Espresso::throw_exception_selector<Espresso::io_error,char const*>("Cannot de-serialize from JSON. Error: %s", v45);
  }
  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("entries"));
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("entries_per_ch"));
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  obj = v49;
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v88, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v76;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v76 != v10)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * i);
        objc_msgSend(obj, "objectForKeyedSubscript:", v12, v46);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        Espresso::dataset_estimator::result_t::load(std::string const&)::$_0::operator()((uint64_t)&v68, v13);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v12), "UTF8String"));
        v14 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v80, __p);
        v15 = *v14;
        if (!*v14)
        {
          v16 = (uint64_t **)v14;
          v15 = operator new(0x90uLL);
          v82 = a1 + 1;
          v15[2] = *(_OWORD *)__p;
          *((_QWORD *)v15 + 6) = v67;
          __p[0] = 0;
          __p[1] = 0;
          v67 = 0;
          *(_OWORD *)((char *)v15 + 104) = 0u;
          *(_OWORD *)((char *)v15 + 120) = 0u;
          *((_QWORD *)v15 + 16) = 0;
          *((_QWORD *)v15 + 17) = 0;
          *(_OWORD *)((char *)v15 + 56) = 0u;
          *(_OWORD *)((char *)v15 + 72) = 0u;
          *(_OWORD *)((char *)v15 + 88) = 0u;
          *((_DWORD *)v15 + 26) = -1082130432;
          *((_QWORD *)v15 + 14) = 0;
          *((_QWORD *)v15 + 15) = 0;
          *((_BYTE *)v15 + 136) = 0;
          LOBYTE(v83) = 1;
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v80, v16, (uint64_t *)v15);
          v81 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>>>>::reset[abi:ne180100]((uint64_t)&v81);
        }
        v17 = (void *)*((_QWORD *)v15 + 14);
        v18 = v69;
        *(_OWORD *)((char *)v15 + 56) = v68;
        *(_OWORD *)((char *)v15 + 72) = v18;
        *(_OWORD *)((char *)v15 + 88) = v70;
        *((_DWORD *)v15 + 26) = v71;
        if (v17)
        {
          *((_QWORD *)v15 + 15) = v17;
          operator delete(v17);
          *((_QWORD *)v15 + 14) = 0;
          *((_QWORD *)v15 + 15) = 0;
          *((_QWORD *)v15 + 16) = 0;
        }
        v15[7] = v72;
        *((_QWORD *)v15 + 16) = v73;
        *((_BYTE *)v15 + 136) = v74;
        if (SHIBYTE(v67) < 0)
          operator delete(__p[0]);

      }
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v88, 16);
    }
    while (v9);
  }

  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v53 = v50;
  v52 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v62, v87, 16);
  if (v52)
  {
    v51 = *(_QWORD *)v63;
    v19 = a1 + 3;
    v56 = a1 + 4;
    do
    {
      for (j = 0; j != v52; ++j)
      {
        if (*(_QWORD *)v63 != v51)
          objc_enumerationMutation(v53);
        v20 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * j);
        objc_msgSend(v53, "objectForKeyedSubscript:", v20, v46);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v57 = v21;
        v22 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v58, v86, 16);
        if (v22)
        {
          v23 = *(_QWORD *)v59;
          do
          {
            for (k = 0; k != v22; ++k)
            {
              if (*(_QWORD *)v59 != v23)
                objc_enumerationMutation(v57);
              v25 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * k);
              std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v20), "UTF8String"));
              v26 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)v19, &v81, __p);
              v27 = (char *)*v26;
              if (!*v26)
              {
                v28 = (uint64_t **)v26;
                v27 = (char *)operator new(0x50uLL);
                *((_QWORD *)&v68 + 1) = v56;
                *((_OWORD *)v27 + 2) = *(_OWORD *)__p;
                v29 = v67;
                __p[0] = 0;
                __p[1] = 0;
                v67 = 0;
                *((_QWORD *)v27 + 6) = v29;
                *((_QWORD *)v27 + 7) = 0;
                *((_QWORD *)v27 + 8) = 0;
                *((_QWORD *)v27 + 9) = 0;
                LOBYTE(v69) = 1;
                std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v19, v81, v28, (uint64_t *)v27);
                *(_QWORD *)&v68 = 0;
                std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v68);
              }
              Espresso::dataset_estimator::result_t::load(std::string const&)::$_0::operator()((uint64_t)&v68, v25);
              v30 = *((_QWORD *)v27 + 9);
              v31 = *((_QWORD *)v27 + 8);
              if (v31 >= v30)
              {
                v33 = *((_QWORD *)v27 + 7);
                v34 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v31 - v33) >> 3);
                v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) > 0x2E8BA2E8BA2E8BALL)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v36 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v30 - v33) >> 3);
                if (2 * v36 > v35)
                  v35 = 2 * v36;
                if (v36 >= 0x1745D1745D1745DLL)
                  v37 = 0x2E8BA2E8BA2E8BALL;
                else
                  v37 = v35;
                v85 = v27 + 72;
                v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>>(v37);
                v39 = &v38[88 * v34];
                v81 = (uint64_t)v38;
                v82 = (uint64_t **)v39;
                v84 = &v38[88 * v40];
                v41 = v70;
                *((_OWORD *)v39 + 1) = v69;
                *((_OWORD *)v39 + 2) = v41;
                *((_DWORD *)v39 + 12) = v71;
                *(_OWORD *)v39 = v68;
                *(_OWORD *)(v39 + 56) = v72;
                *((_QWORD *)v39 + 9) = v73;
                v73 = 0;
                v72 = 0uLL;
                v39[80] = v74;
                v83 = v39 + 88;
                std::vector<Espresso::dataset_estimator::statistics_entry_t>::__swap_out_circular_buffer((uint64_t *)v27 + 7, &v81);
                v42 = *((_QWORD *)v27 + 8);
                std::__split_buffer<Espresso::dataset_estimator::statistics_entry_t>::~__split_buffer((uint64_t)&v81);
                v43 = (void *)v72;
                *((_QWORD *)v27 + 8) = v42;
                if (v43)
                  operator delete(v43);
              }
              else
              {
                v32 = v69;
                *(_OWORD *)v31 = v68;
                *(_OWORD *)(v31 + 16) = v32;
                *(_OWORD *)(v31 + 32) = v70;
                *(_DWORD *)(v31 + 48) = v71;
                *(_OWORD *)(v31 + 56) = v72;
                *(_QWORD *)(v31 + 72) = v73;
                *(_BYTE *)(v31 + 80) = v74;
                *((_QWORD *)v27 + 8) = v31 + 88;
              }
              if (SHIBYTE(v67) < 0)
                operator delete(__p[0]);
            }
            v22 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v58, v86, 16);
          }
          while (v22);
        }

      }
      v52 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v62, v87, 16);
    }
    while (v52);
  }

}

void sub_1916600CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  void *v50;

  _Unwind_Resume(a1);
}

void Espresso::dataset_estimator::result_t::load(std::string const&)::$_0::operator()(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;

  v3 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = -1082130432;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  v15 = v3;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("min_val"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "doubleValue");
  *(_QWORD *)a1 = v5;

  objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("max_val"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "doubleValue");
  *(_QWORD *)(a1 + 8) = v7;

  objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("mean"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "doubleValue");
  *(_QWORD *)(a1 + 16) = v9;

  objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("stddev"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "doubleValue");
  *(_QWORD *)(a1 + 24) = v11;

  objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("mean_sq"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "doubleValue");
  *(_QWORD *)(a1 + 32) = v13;

  objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("n_samples"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 40) = objc_msgSend(v14, "unsignedLongValue");

}

void sub_191660320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<Espresso::tracer>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<Espresso::tracer>::reset[abi:ne180100]((Espresso::tracer **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 vision::DCN::FaceList::merge_bounding_boxes(uint64_t *a1, char *__p, float32x2_t *a3, double a4, double a5, double a6, __n128 a7)
{
  float32x2_t v9;
  float v10;
  float32x2_t v11;
  float v12;
  float32x2_t v13;
  uint64_t v14;
  float32x2_t *v15;
  char *v16;
  __n128 result;
  uint64_t v18;
  __n128 v19;

  v9 = a3[3];
  v10 = *((float *)__p + 7);
  v11 = (float32x2_t)vrev64_s32((int32x2_t)v9);
  a7.n128_f32[0] = v10 + v9.f32[1];
  v12 = (float)(vmuls_lane_f32(a3[2].f32[0], v9, 1) + (float)(*((float *)__p + 4) * v10)) / (float)(v10 + v9.f32[1]);
  v19 = a7;
  v9.i32[0] = a3[2].i32[1];
  v13 = vdiv_f32(vmla_n_f32(vmul_f32(v9, v11), *(float32x2_t *)(__p + 20), v10), (float32x2_t)vdup_lane_s32((int32x2_t)a7.n128_u64[0], 0));
  v14 = *(_QWORD *)__p;
  *(_QWORD *)(v14 + 8) = *((_QWORD *)__p + 1);
  **((_QWORD **)__p + 1) = v14;
  --a1[2];
  operator delete(__p);
  v15 = (float32x2_t *)*a3;
  v15[1] = a3[1];
  **(_QWORD **)&a3[1] = v15;
  --a1[2];
  operator delete(a3);
  v16 = (char *)operator new(0x20uLL);
  *((float *)v16 + 4) = v12;
  *(float32x2_t *)(v16 + 20) = v13;
  result = v19;
  *((_DWORD *)v16 + 7) = v19.n128_u32[0];
  v18 = *a1;
  *(_QWORD *)v16 = *a1;
  *((_QWORD *)v16 + 1) = a1;
  *(_QWORD *)(v18 + 8) = v16;
  *a1 = (uint64_t)v16;
  ++a1[2];
  return result;
}

unint64_t *Espresso::zephyr::ir_function_object::ir_function_object(unint64_t *this, Espresso::zephyr::function_t *a2)
{
  unint64_t *v2;
  unint64_t v3;

  v2 = (unint64_t *)*((_QWORD *)a2 + 3);
  *this = 0;
  this[1] = 0;
  this[2] = (unint64_t)v2;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *this = v3;
  this[3] = (unint64_t)a2;
  return this;
}

{
  unint64_t *v2;
  unint64_t v3;

  v2 = (unint64_t *)*((_QWORD *)a2 + 3);
  *this = 0;
  this[1] = 0;
  this[2] = (unint64_t)v2;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *this = v3;
  this[3] = (unint64_t)a2;
  return this;
}

uint64_t Espresso::zephyr::function_t::function_t(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  char *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  do
    v3 = __ldaxr(a2);
  while (__stlxr(v3 + 1, a2));
  *(_QWORD *)a1 = off_1E2DA4098;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = a1 + 64;
  *(_QWORD *)(a1 + 72) = a1 + 64;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  v4 = (char *)operator new(0xC0uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_1E2DC10C0;
  *(_OWORD *)(v4 + 24) = 0u;
  v5 = *(unint64_t **)(a1 + 24);
  *((_QWORD *)v4 + 5) = v5;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)v4 + 3) = v6;
  *((_QWORD *)v4 + 6) = a1;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *((_QWORD *)v4 + 13) = 0;
  *((_DWORD *)v4 + 28) = 1065353216;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *((_QWORD *)v4 + 23) = 0;
  *(_QWORD *)&v17 = v4 + 24;
  *((_QWORD *)&v17 + 1) = v4;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 32, &v17);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (char *)operator new(0xC0uLL);
  *(_OWORD *)(v10 + 8) = 0u;
  *(_QWORD *)v10 = &off_1E2DC10C0;
  *(_OWORD *)(v10 + 24) = 0u;
  v11 = *(unint64_t **)(a1 + 24);
  *((_QWORD *)v10 + 5) = v11;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *((_QWORD *)v10 + 3) = v12;
  *((_QWORD *)v10 + 6) = a1;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *((_QWORD *)v10 + 13) = 0;
  *((_DWORD *)v10 + 28) = 1065353216;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *((_QWORD *)v10 + 23) = 0;
  *(_QWORD *)&v17 = v10 + 24;
  *((_QWORD *)&v17 + 1) = v10;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 48, &v17);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

void sub_1916606FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table(v1 + 88);
  std::__list_imp<std::shared_ptr<Espresso::basic_block::instruction>>::clear(v4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  v7 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  _Unwind_Resume(a1);
}

void Espresso::zephyr::function_t::~function_t(Espresso::zephyr::function_t *this)
{
  uint64_t *i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 *j;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::string __p;
  uint64_t v18;
  std::__shared_weak_count *v19;

  *(_QWORD *)this = off_1E2DA4098;
  for (i = (uint64_t *)*((_QWORD *)this + 13); i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[2], i[3]);
    else
      __p = *(std::string *)(i + 2);
    v3 = i[5];
    v4 = (std::__shared_weak_count *)i[6];
    v18 = v3;
    v19 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      v3 = v18;
    }
    v7 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v19;
    if (v19)
    {
      v9 = (unint64_t *)&v19->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  for (j = (__int128 *)*((_QWORD *)this + 18); j; j = *(__int128 **)j)
  {
    std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, j + 1);
    v12 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)(v18 + 8) = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v19;
    if (v19)
    {
      v14 = (unint64_t *)&v19->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__list_imp<std::shared_ptr<Espresso::basic_block::instruction>>::clear((uint64_t *)this + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table((uint64_t)this + 88);
  std::__list_imp<std::shared_ptr<Espresso::basic_block::instruction>>::clear((uint64_t *)this + 8);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  v16 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
}

uint64_t Espresso::zephyr::function_t::get_referenced_objects@<X0>(Espresso::zephyr::function_t *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t j;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  uint64_t k;
  uint64_t result;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = (uint64_t)(a2 + 1);
  v4 = (char *)this + 64;
  for (i = *((_QWORD *)this + 9); (char *)i != v4; i = *(_QWORD *)(i + 8))
  {
    v6 = *(_QWORD *)(i + 16);
    v7 = v6 + 112;
    for (j = *(_QWORD *)(v6 + 120); j != v7; j = *(_QWORD *)(j + 8))
    {
      v9 = *(_QWORD **)(j + 16);
      std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(a2, (unint64_t)v9, (uint64_t)v9);
      v10 = (unint64_t *)v9[15];
      v11 = (unint64_t *)v9[16];
      while (v10 != v11)
      {
        std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(a2, *v10, *v10);
        ++v10;
      }
      v13 = (unint64_t *)v9[12];
      v12 = (unint64_t *)v9[13];
      while (v13 != v12)
      {
        std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(a2, *v13, *v13);
        ++v13;
      }
    }
  }
  v14 = *((_QWORD *)this + 5);
  v30[0] = *((_QWORD *)this + 4);
  v30[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *((_QWORD *)this + 7);
  v30[2] = *((_QWORD *)this + 6);
  v30[3] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = 0;
  v21 = 0;
  do
  {
    v22 = v20;
    v23 = (_QWORD *)v30[2 * v21];
    std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(a2, (unint64_t)v23, (uint64_t)v23);
    v24 = (unint64_t *)v23[15];
    v25 = (unint64_t *)v23[16];
    while (v24 != v25)
    {
      std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(a2, *v24, *v24);
      ++v24;
    }
    v27 = (unint64_t *)v23[12];
    v26 = (unint64_t *)v23[13];
    while (v27 != v26)
    {
      std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(a2, *v27, *v27);
      ++v27;
    }
    v20 = 1;
    v21 = 1;
  }
  while ((v22 & 1) == 0);
  for (k = 2; k != -2; k -= 2)
    result = std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v30[k]);
  return result;
}

void sub_191660B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  _QWORD **v10;
  uint64_t i;

  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(&a10 + i));
  std::__tree<int>::destroy(*v10);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = v9;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

void Espresso::zephyr::function_t::clear_unreferenced(int8x8_t *this)
{
  int8x8_t *i;
  int8x8_t v3;
  uint64_t v4;
  uint64_t j;
  int8x8_t *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  int8x8_t *v13;
  int8x8_t v14;
  int8x8_t *v15;
  int8x8_t *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  int8x8_t *v28;
  int8x8_t v29;
  int8x8_t *v30;
  int8x8_t *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int8x8_t *v38;
  int8x8_t *v39;
  char v40;

  Espresso::zephyr::function_t::get_referenced_objects((Espresso::zephyr::function_t *)this, &v36);
  for (i = (int8x8_t *)this[9]; i != &this[8]; i = (int8x8_t *)i[1])
  {
    v3 = i[2];
    v4 = *(_QWORD *)&v3 + 112;
    for (j = *(_QWORD *)(*(_QWORD *)&v3 + 120); j != v4; j = *(_QWORD *)(j + 8))
      std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(&v36, *(_QWORD *)(j + 16), *(_QWORD *)(j + 16));
  }
  v6 = (int8x8_t *)this[18];
  if (v6)
  {
    while (1)
    {
      v7 = v37;
      if (v37)
      {
        v8 = (unint64_t)v6[5];
        do
        {
          v9 = v7[4];
          if (v8 >= v9)
          {
            if (v9 >= v8)
            {
              v13 = (int8x8_t *)*v6;
              goto LABEL_42;
            }
            ++v7;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      v10 = this[17];
      v11 = (unint64_t)v6[1];
      v12 = (uint8x8_t)vcnt_s8(v10);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] > 1uLL)
      {
        if (v11 >= *(_QWORD *)&v10)
          v11 %= *(_QWORD *)&v10;
      }
      else
      {
        v11 &= *(_QWORD *)&v10 - 1;
      }
      v13 = (int8x8_t *)*v6;
      v14 = this[16];
      v15 = *(int8x8_t **)(*(_QWORD *)&v14 + 8 * v11);
      do
      {
        v16 = v15;
        v15 = (int8x8_t *)*v15;
      }
      while (v15 != v6);
      if (v16 != &this[18])
      {
        v17 = (unint64_t)v16[1];
        if (v12.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&v10)
            v17 %= *(_QWORD *)&v10;
        }
        else
        {
          v17 &= *(_QWORD *)&v10 - 1;
        }
        v18 = (_QWORD *)*v6;
        if (v17 == v11)
          goto LABEL_34;
      }
      if (!v13)
        break;
      v19 = (unint64_t)v13[1];
      if (v12.u32[0] > 1uLL)
      {
        if (v19 >= *(_QWORD *)&v10)
          v19 %= *(_QWORD *)&v10;
      }
      else
      {
        v19 &= *(_QWORD *)&v10 - 1;
      }
      v18 = (_QWORD *)*v6;
      if (v19 != v11)
        break;
LABEL_35:
      v20 = v18[1];
      if (v12.u32[0] > 1uLL)
      {
        if (v20 >= *(_QWORD *)&v10)
          v20 %= *(_QWORD *)&v10;
      }
      else
      {
        v20 &= *(_QWORD *)&v10 - 1;
      }
      if (v20 != v11)
      {
        *(_QWORD *)(*(_QWORD *)&this[16] + 8 * v20) = v16;
        v18 = (_QWORD *)*v6;
      }
LABEL_41:
      *v16 = (int8x8_t)v18;
      *v6 = 0;
      --*(_QWORD *)&this[19];
      v38 = v6;
      v39 = this + 18;
      v40 = 1;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v38);
LABEL_42:
      v6 = v13;
      if (!v13)
        goto LABEL_43;
    }
    *(_QWORD *)(*(_QWORD *)&v14 + 8 * v11) = 0;
    v18 = (_QWORD *)*v6;
LABEL_34:
    if (!v18)
      goto LABEL_41;
    goto LABEL_35;
  }
LABEL_43:
  v21 = (int8x8_t *)this[13];
  if (v21)
  {
    while (1)
    {
      v22 = v37;
      if (v37)
      {
        v23 = (unint64_t)v21[5];
        do
        {
          v24 = v22[4];
          if (v23 >= v24)
          {
            if (v24 >= v23)
            {
              v28 = (int8x8_t *)*v21;
              goto LABEL_78;
            }
            ++v22;
          }
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      v25 = this[12];
      v26 = (unint64_t)v21[1];
      v27 = (uint8x8_t)vcnt_s8(v25);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        if (v26 >= *(_QWORD *)&v25)
          v26 %= *(_QWORD *)&v25;
      }
      else
      {
        v26 &= *(_QWORD *)&v25 - 1;
      }
      v28 = (int8x8_t *)*v21;
      v29 = this[11];
      v30 = *(int8x8_t **)(*(_QWORD *)&v29 + 8 * v26);
      do
      {
        v31 = v30;
        v30 = (int8x8_t *)*v30;
      }
      while (v30 != v21);
      if (v31 != &this[13])
      {
        v32 = (unint64_t)v31[1];
        if (v27.u32[0] > 1uLL)
        {
          if (v32 >= *(_QWORD *)&v25)
            v32 %= *(_QWORD *)&v25;
        }
        else
        {
          v32 &= *(_QWORD *)&v25 - 1;
        }
        v33 = (_QWORD *)*v21;
        if (v32 == v26)
          goto LABEL_70;
      }
      if (!v28)
        break;
      v34 = (unint64_t)v28[1];
      if (v27.u32[0] > 1uLL)
      {
        if (v34 >= *(_QWORD *)&v25)
          v34 %= *(_QWORD *)&v25;
      }
      else
      {
        v34 &= *(_QWORD *)&v25 - 1;
      }
      v33 = (_QWORD *)*v21;
      if (v34 != v26)
        break;
LABEL_71:
      v35 = v33[1];
      if (v27.u32[0] > 1uLL)
      {
        if (v35 >= *(_QWORD *)&v25)
          v35 %= *(_QWORD *)&v25;
      }
      else
      {
        v35 &= *(_QWORD *)&v25 - 1;
      }
      if (v35 != v26)
      {
        *(_QWORD *)(*(_QWORD *)&this[11] + 8 * v35) = v31;
        v33 = (_QWORD *)*v21;
      }
LABEL_77:
      *v31 = (int8x8_t)v33;
      *v21 = 0;
      --*(_QWORD *)&this[14];
      v38 = v21;
      v39 = this + 13;
      v40 = 1;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v38);
LABEL_78:
      v21 = v28;
      if (!v28)
        goto LABEL_79;
    }
    *(_QWORD *)(*(_QWORD *)&v29 + 8 * v26) = 0;
    v33 = (_QWORD *)*v21;
LABEL_70:
    if (!v33)
      goto LABEL_77;
    goto LABEL_71;
  }
LABEL_79:
  std::__tree<int>::destroy(v37);
}

void sub_191660FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<int>::destroy(a10);
  _Unwind_Resume(a1);
}

char *Espresso::zephyr::function_t::new_value(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  char *v5;
  char *v6;
  unint64_t *v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  void **v11;
  unint64_t v12;
  int8x8_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  unsigned __int8 **v17;
  unsigned __int8 *i;
  unint64_t v19;
  size_t v20;
  std::string *v21;
  const void *v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  std::string::size_type v26;
  char v27;
  std::string::size_type v28;
  uint64_t v29;
  std::string::size_type v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  std::string::size_type *v36;
  std::string::size_type j;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  std::string *v41;
  float v42;
  float v43;
  _BOOL8 v44;
  unint64_t v45;
  unint64_t v46;
  int8x8_t prime;
  void *v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint8x8_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  std::string::size_type *v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  char *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  char *v71;
  void *v72;
  const void **v73;
  unint64_t __val;
  char *v75;
  std::string v76;
  char *v77;
  std::__shared_weak_count *v78;
  std::string v79;
  std::string v80;
  _QWORD v81[3];

  v81[2] = *MEMORY[0x1E0C80C00];
  v5 = (char *)operator new(0x70uLL);
  v6 = v5;
  *(_OWORD *)(v5 + 8) = 0u;
  v7 = (unint64_t *)(v5 + 8);
  *(_QWORD *)v5 = &off_1E2DC10F8;
  *(_OWORD *)(v5 + 24) = 0u;
  v8 = v5 + 24;
  v9 = *(unint64_t **)(a1 + 24);
  *((_QWORD *)v5 + 5) = v9;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *((_QWORD *)v5 + 3) = v10;
  *((_QWORD *)v5 + 6) = a1;
  *(_OWORD *)(v5 + 56) = 0u;
  v11 = (void **)(v5 + 56);
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *((_QWORD *)v5 + 13) = 0;
  v77 = v5 + 24;
  v78 = (std::__shared_weak_count *)v5;
  v73 = (const void **)a2;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v76 = *(std::string *)a2;
  __val = 0;
  v75 = v8;
LABEL_7:
  v12 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v76);
  v13 = *(int8x8_t *)(a1 + 136);
  if (v13)
  {
    v14 = v12;
    v15 = (uint8x8_t)vcnt_s8(v13);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      v2 = v12;
      if (v12 >= *(_QWORD *)&v13)
        v2 = v12 % *(_QWORD *)&v13;
    }
    else
    {
      v2 = (*(_QWORD *)&v13 - 1) & v12;
    }
    v17 = *(unsigned __int8 ***)(*(_QWORD *)(a1 + 128) + 8 * v2);
    if (v17)
    {
      for (i = *v17; i; i = *(unsigned __int8 **)i)
      {
        v19 = *((_QWORD *)i + 1);
        if (v14 == v19)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)&v76))
          {
            if (*((char *)v73 + 23) >= 0)
              v20 = *((unsigned __int8 *)v73 + 23);
            else
              v20 = (size_t)v73[1];
            std::string::basic_string[abi:ne180100]((uint64_t)&v80, v20 + 1);
            if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v21 = &v80;
            else
              v21 = (std::string *)v80.__r_.__value_.__r.__words[0];
            if (v20)
            {
              if (*((char *)v73 + 23) >= 0)
                v22 = v73;
              else
                v22 = *v73;
              memmove(v21, v22, v20);
            }
            *(_WORD *)((char *)&v21->__r_.__value_.__l.__data_ + v20) = 95;
            std::to_string(&v79, __val);
            if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v23 = &v79;
            else
              v23 = (std::string *)v79.__r_.__value_.__r.__words[0];
            if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
            else
              size = v79.__r_.__value_.__l.__size_;
            v25 = std::string::append(&v80, (const std::string::value_type *)v23, size);
            v26 = v25->__r_.__value_.__r.__words[0];
            v81[0] = v25->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v81 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
            v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
            v25->__r_.__value_.__l.__size_ = 0;
            v25->__r_.__value_.__r.__words[2] = 0;
            v25->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v76.__r_.__value_.__l.__data_);
            v76.__r_.__value_.__r.__words[0] = v26;
            v76.__r_.__value_.__l.__size_ = v81[0];
            *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v81 + 7);
            *((_BYTE *)&v76.__r_.__value_.__s + 23) = v27;
            if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v79.__r_.__value_.__l.__data_);
            if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v80.__r_.__value_.__l.__data_);
            ++__val;
            goto LABEL_7;
          }
        }
        else
        {
          if (v16 > 1)
          {
            if (v19 >= *(_QWORD *)&v13)
              v19 %= *(_QWORD *)&v13;
          }
          else
          {
            v19 &= *(_QWORD *)&v13 - 1;
          }
          if (v19 != v2)
            break;
        }
      }
    }
  }
  if (v6[79] < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
  *((_QWORD *)v6 + 9) = *((_QWORD *)&v76.__r_.__value_.__l + 2);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v80, a1);
  v28 = v80.__r_.__value_.__r.__words[0];
  v80.__r_.__value_.__r.__words[0] = 0;
  v29 = *((_QWORD *)v6 + 4);
  *((_QWORD *)v6 + 4) = v28;
  if (v29)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v80.__r_.__value_.__r.__words[0];
    v80.__r_.__value_.__r.__words[0] = 0;
    if (v30)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v30 + 8))(v30);
  }
  v31 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v6 + 56));
  v32 = v31;
  v33 = *(_QWORD *)(a1 + 136);
  if (v33)
  {
    v34 = (uint8x8_t)vcnt_s8((int8x8_t)v33);
    v34.i16[0] = vaddlv_u8(v34);
    v35 = v34.u32[0];
    if (v34.u32[0] > 1uLL)
    {
      v2 = v31;
      if (v31 >= v33)
        v2 = v31 % v33;
    }
    else
    {
      v2 = (v33 - 1) & v31;
    }
    v36 = *(std::string::size_type **)(*(_QWORD *)(a1 + 128) + 8 * v2);
    if (v36)
    {
      for (j = *v36; j; j = *(_QWORD *)j)
      {
        v38 = *(_QWORD *)(j + 8);
        if (v38 == v32)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(j + 16), (unsigned __int8 *)v6 + 56))
          {
            v71 = v75;
            goto LABEL_129;
          }
        }
        else
        {
          if (v35 > 1)
          {
            if (v38 >= v33)
              v38 %= v33;
          }
          else
          {
            v38 &= v33 - 1;
          }
          if (v38 != v2)
            break;
        }
      }
    }
  }
  v39 = operator new(0x38uLL);
  v40 = (_QWORD *)(a1 + 144);
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
  v80.__r_.__value_.__l.__size_ = a1 + 144;
  v80.__r_.__value_.__s.__data_[16] = 0;
  *v39 = 0;
  v39[1] = v32;
  v41 = (std::string *)(v39 + 2);
  if (v6[79] < 0)
  {
    std::string::__init_copy_ctor_external(v41, *((const std::string::value_type **)v6 + 7), *((_QWORD *)v6 + 8));
  }
  else
  {
    *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
    v39[4] = *((_QWORD *)v6 + 9);
  }
  v39[5] = 0;
  v39[6] = 0;
  v80.__r_.__value_.__s.__data_[16] = 1;
  v42 = (float)(unint64_t)(*(_QWORD *)(a1 + 152) + 1);
  v43 = *(float *)(a1 + 160);
  if (!v33 || (float)(v43 * (float)v33) < v42)
  {
    v44 = 1;
    if (v33 >= 3)
      v44 = (v33 & (v33 - 1)) != 0;
    v45 = v44 | (2 * v33);
    v46 = vcvtps_u32_f32(v42 / v43);
    if (v45 <= v46)
      prime = (int8x8_t)v46;
    else
      prime = (int8x8_t)v45;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v33 = *(_QWORD *)(a1 + 136);
    if (*(_QWORD *)&prime > v33)
      goto LABEL_85;
    if (*(_QWORD *)&prime < v33)
    {
      v54 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 152) / *(float *)(a1 + 160));
      if (v33 < 3 || (v55 = (uint8x8_t)vcnt_s8((int8x8_t)v33), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
      {
        v54 = std::__next_prime(v54);
      }
      else
      {
        v56 = 1 << -(char)__clz(v54 - 1);
        if (v54 >= 2)
          v54 = v56;
      }
      if (*(_QWORD *)&prime <= v54)
        prime = (int8x8_t)v54;
      if (*(_QWORD *)&prime >= v33)
      {
        v33 = *(_QWORD *)(a1 + 136);
      }
      else
      {
        if (prime)
        {
LABEL_85:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v48 = operator new(8 * *(_QWORD *)&prime);
          v49 = *(void **)(a1 + 128);
          *(_QWORD *)(a1 + 128) = v48;
          if (v49)
            operator delete(v49);
          v50 = 0;
          *(int8x8_t *)(a1 + 136) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v50++) = 0;
          while (*(_QWORD *)&prime != v50);
          v51 = (_QWORD *)*v40;
          if (*v40)
          {
            v52 = v51[1];
            v53 = (uint8x8_t)vcnt_s8(prime);
            v53.i16[0] = vaddlv_u8(v53);
            if (v53.u32[0] > 1uLL)
            {
              if (v52 >= *(_QWORD *)&prime)
                v52 %= *(_QWORD *)&prime;
            }
            else
            {
              v52 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v52) = v40;
            v57 = (_QWORD *)*v51;
            if (*v51)
            {
              do
              {
                v58 = v57[1];
                if (v53.u32[0] > 1uLL)
                {
                  if (v58 >= *(_QWORD *)&prime)
                    v58 %= *(_QWORD *)&prime;
                }
                else
                {
                  v58 &= *(_QWORD *)&prime - 1;
                }
                if (v58 != v52)
                {
                  v59 = *(_QWORD *)(a1 + 128);
                  if (!*(_QWORD *)(v59 + 8 * v58))
                  {
                    *(_QWORD *)(v59 + 8 * v58) = v51;
                    goto LABEL_110;
                  }
                  *v51 = *v57;
                  *v57 = **(_QWORD **)(*(_QWORD *)(a1 + 128) + 8 * v58);
                  **(_QWORD **)(*(_QWORD *)(a1 + 128) + 8 * v58) = v57;
                  v57 = v51;
                }
                v58 = v52;
LABEL_110:
                v51 = v57;
                v57 = (_QWORD *)*v57;
                v52 = v58;
              }
              while (v57);
            }
          }
          v33 = (unint64_t)prime;
          goto LABEL_114;
        }
        v72 = *(void **)(a1 + 128);
        *(_QWORD *)(a1 + 128) = 0;
        if (v72)
          operator delete(v72);
        v33 = 0;
        *(_QWORD *)(a1 + 136) = 0;
      }
    }
LABEL_114:
    if ((v33 & (v33 - 1)) != 0)
    {
      if (v32 >= v33)
        v2 = v32 % v33;
      else
        v2 = v32;
    }
    else
    {
      v2 = (v33 - 1) & v32;
    }
  }
  v60 = *(std::string::size_type **)(*(_QWORD *)(a1 + 128) + 8 * v2);
  j = v80.__r_.__value_.__r.__words[0];
  if (v60)
  {
    *(_QWORD *)v80.__r_.__value_.__l.__data_ = *v60;
    v71 = v75;
LABEL_127:
    *v60 = j;
    goto LABEL_128;
  }
  *(_QWORD *)v80.__r_.__value_.__l.__data_ = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = j;
  *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v2) = v40;
  v71 = v75;
  if (*(_QWORD *)j)
  {
    v61 = *(_QWORD *)(*(_QWORD *)j + 8);
    if ((v33 & (v33 - 1)) != 0)
    {
      if (v61 >= v33)
        v61 %= v33;
    }
    else
    {
      v61 &= v33 - 1;
    }
    v60 = (std::string::size_type *)(*(_QWORD *)(a1 + 128) + 8 * v61);
    goto LABEL_127;
  }
LABEL_128:
  v80.__r_.__value_.__r.__words[0] = 0;
  ++*(_QWORD *)(a1 + 152);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v80);
  do
LABEL_129:
    v62 = __ldxr(v7);
  while (__stxr(v62 + 1, v7));
  v63 = *(std::__shared_weak_count **)(j + 48);
  *(_QWORD *)(j + 40) = v71;
  *(_QWORD *)(j + 48) = v6;
  if (v63)
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(p_shared_owners);
    while (__stlxr(v65 - 1, p_shared_owners));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v77;
  v67 = v78;
  if (v78)
  {
    v68 = (unint64_t *)&v78->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  return v66;
}

void sub_19166177C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a18 < 0)
    operator delete(a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::zephyr::value_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC10F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::zephyr::value_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC10F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::zephyr::value_t>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

char *Espresso::zephyr::function_t::new_detached_node(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  char *v5;
  char *v6;
  unint64_t *v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 *i;
  unint64_t v18;
  size_t v19;
  std::string *v20;
  const void *v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  std::string::size_type v25;
  char v26;
  void **v27;
  std::string::size_type v28;
  uint64_t v29;
  std::string::size_type v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  std::string::size_type *v36;
  std::string::size_type j;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  std::string *v41;
  float v42;
  float v43;
  _BOOL8 v44;
  unint64_t v45;
  unint64_t v46;
  int8x8_t prime;
  void *v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint8x8_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  std::string::size_type *v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  char *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  char *v71;
  void *v72;
  unint64_t __val;
  char *v74;
  std::string v75;
  char *v76;
  std::__shared_weak_count *v77;
  std::string v78;
  std::string v79;
  _QWORD v80[3];

  v80[2] = *MEMORY[0x1E0C80C00];
  v5 = (char *)operator new(0xC0uLL);
  v6 = v5;
  *(_OWORD *)(v5 + 8) = 0u;
  v7 = (unint64_t *)(v5 + 8);
  *(_QWORD *)v5 = &off_1E2DC10C0;
  *(_OWORD *)(v5 + 24) = 0u;
  v8 = v5 + 24;
  v9 = *(unint64_t **)(a1 + 24);
  *((_QWORD *)v5 + 5) = v9;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *((_QWORD *)v5 + 3) = v10;
  *((_QWORD *)v5 + 6) = a1;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *((_QWORD *)v5 + 13) = 0;
  *((_DWORD *)v5 + 28) = 1065353216;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *((_QWORD *)v5 + 23) = 0;
  v76 = v5 + 24;
  v77 = (std::__shared_weak_count *)v5;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v75 = *(std::string *)a2;
  __val = 0;
  v74 = v8;
LABEL_7:
  v11 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v75);
  v12 = *(int8x8_t *)(a1 + 96);
  if (v12)
  {
    v13 = v11;
    v14 = (uint8x8_t)vcnt_s8(v12);
    v14.i16[0] = vaddlv_u8(v14);
    v2 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      v15 = v11;
      if (v11 >= *(_QWORD *)&v12)
        v15 = v11 % *(_QWORD *)&v12;
    }
    else
    {
      v15 = (*(_QWORD *)&v12 - 1) & v11;
    }
    v16 = *(unsigned __int8 ***)(*(_QWORD *)(a1 + 88) + 8 * v15);
    if (v16)
    {
      for (i = *v16; i; i = *(unsigned __int8 **)i)
      {
        v18 = *((_QWORD *)i + 1);
        if (v13 == v18)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)&v75))
          {
            if (*(char *)(a2 + 23) >= 0)
              v19 = *(unsigned __int8 *)(a2 + 23);
            else
              v19 = *(_QWORD *)(a2 + 8);
            std::string::basic_string[abi:ne180100]((uint64_t)&v79, v19 + 1);
            if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v20 = &v79;
            else
              v20 = (std::string *)v79.__r_.__value_.__r.__words[0];
            if (v19)
            {
              if (*(char *)(a2 + 23) >= 0)
                v21 = (const void *)a2;
              else
                v21 = *(const void **)a2;
              memmove(v20, v21, v19);
            }
            *(_WORD *)((char *)&v20->__r_.__value_.__l.__data_ + v19) = 95;
            std::to_string(&v78, __val);
            if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v22 = &v78;
            else
              v22 = (std::string *)v78.__r_.__value_.__r.__words[0];
            if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
            else
              size = v78.__r_.__value_.__l.__size_;
            v24 = std::string::append(&v79, (const std::string::value_type *)v22, size);
            v25 = v24->__r_.__value_.__r.__words[0];
            v80[0] = v24->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v80 + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
            v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v75.__r_.__value_.__l.__data_);
            v75.__r_.__value_.__r.__words[0] = v25;
            v75.__r_.__value_.__l.__size_ = v80[0];
            *(std::string::size_type *)((char *)&v75.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v80 + 7);
            *((_BYTE *)&v75.__r_.__value_.__s + 23) = v26;
            if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v78.__r_.__value_.__l.__data_);
            if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v79.__r_.__value_.__l.__data_);
            ++__val;
            goto LABEL_7;
          }
        }
        else
        {
          if (v2 > 1)
          {
            if (v18 >= *(_QWORD *)&v12)
              v18 %= *(_QWORD *)&v12;
          }
          else
          {
            v18 &= *(_QWORD *)&v12 - 1;
          }
          if (v18 != v15)
            break;
        }
      }
    }
  }
  v27 = (void **)(v6 + 168);
  if (v6[191] < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
  *((_QWORD *)v6 + 23) = *((_QWORD *)&v75.__r_.__value_.__l + 2);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v79, a1);
  v28 = v79.__r_.__value_.__r.__words[0];
  v79.__r_.__value_.__r.__words[0] = 0;
  v29 = *((_QWORD *)v6 + 4);
  *((_QWORD *)v6 + 4) = v28;
  if (v29)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v79.__r_.__value_.__r.__words[0];
    v79.__r_.__value_.__r.__words[0] = 0;
    if (v30)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v30 + 8))(v30);
  }
  v31 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v6 + 168));
  v32 = v31;
  v33 = *(_QWORD *)(a1 + 96);
  if (v33)
  {
    v34 = (uint8x8_t)vcnt_s8((int8x8_t)v33);
    v34.i16[0] = vaddlv_u8(v34);
    v35 = v34.u32[0];
    if (v34.u32[0] > 1uLL)
    {
      v2 = v31;
      if (v31 >= v33)
        v2 = v31 % v33;
    }
    else
    {
      v2 = (v33 - 1) & v31;
    }
    v36 = *(std::string::size_type **)(*(_QWORD *)(a1 + 88) + 8 * v2);
    if (v36)
    {
      for (j = *v36; j; j = *(_QWORD *)j)
      {
        v38 = *(_QWORD *)(j + 8);
        if (v38 == v32)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(j + 16), (unsigned __int8 *)v6 + 168))
          {
            v71 = v74;
            goto LABEL_129;
          }
        }
        else
        {
          if (v35 > 1)
          {
            if (v38 >= v33)
              v38 %= v33;
          }
          else
          {
            v38 &= v33 - 1;
          }
          if (v38 != v2)
            break;
        }
      }
    }
  }
  v39 = operator new(0x38uLL);
  v40 = (_QWORD *)(a1 + 104);
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
  v79.__r_.__value_.__l.__size_ = a1 + 104;
  v79.__r_.__value_.__s.__data_[16] = 0;
  *v39 = 0;
  v39[1] = v32;
  v41 = (std::string *)(v39 + 2);
  if (v6[191] < 0)
  {
    std::string::__init_copy_ctor_external(v41, *((const std::string::value_type **)v6 + 21), *((_QWORD *)v6 + 22));
  }
  else
  {
    *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)v27;
    v39[4] = *((_QWORD *)v6 + 23);
  }
  v39[5] = 0;
  v39[6] = 0;
  v79.__r_.__value_.__s.__data_[16] = 1;
  v42 = (float)(unint64_t)(*(_QWORD *)(a1 + 112) + 1);
  v43 = *(float *)(a1 + 120);
  if (!v33 || (float)(v43 * (float)v33) < v42)
  {
    v44 = 1;
    if (v33 >= 3)
      v44 = (v33 & (v33 - 1)) != 0;
    v45 = v44 | (2 * v33);
    v46 = vcvtps_u32_f32(v42 / v43);
    if (v45 <= v46)
      prime = (int8x8_t)v46;
    else
      prime = (int8x8_t)v45;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v33 = *(_QWORD *)(a1 + 96);
    if (*(_QWORD *)&prime > v33)
      goto LABEL_85;
    if (*(_QWORD *)&prime < v33)
    {
      v54 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 112) / *(float *)(a1 + 120));
      if (v33 < 3 || (v55 = (uint8x8_t)vcnt_s8((int8x8_t)v33), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
      {
        v54 = std::__next_prime(v54);
      }
      else
      {
        v56 = 1 << -(char)__clz(v54 - 1);
        if (v54 >= 2)
          v54 = v56;
      }
      if (*(_QWORD *)&prime <= v54)
        prime = (int8x8_t)v54;
      if (*(_QWORD *)&prime >= v33)
      {
        v33 = *(_QWORD *)(a1 + 96);
      }
      else
      {
        if (prime)
        {
LABEL_85:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v48 = operator new(8 * *(_QWORD *)&prime);
          v49 = *(void **)(a1 + 88);
          *(_QWORD *)(a1 + 88) = v48;
          if (v49)
            operator delete(v49);
          v50 = 0;
          *(int8x8_t *)(a1 + 96) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v50++) = 0;
          while (*(_QWORD *)&prime != v50);
          v51 = (_QWORD *)*v40;
          if (*v40)
          {
            v52 = v51[1];
            v53 = (uint8x8_t)vcnt_s8(prime);
            v53.i16[0] = vaddlv_u8(v53);
            if (v53.u32[0] > 1uLL)
            {
              if (v52 >= *(_QWORD *)&prime)
                v52 %= *(_QWORD *)&prime;
            }
            else
            {
              v52 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v52) = v40;
            v57 = (_QWORD *)*v51;
            if (*v51)
            {
              do
              {
                v58 = v57[1];
                if (v53.u32[0] > 1uLL)
                {
                  if (v58 >= *(_QWORD *)&prime)
                    v58 %= *(_QWORD *)&prime;
                }
                else
                {
                  v58 &= *(_QWORD *)&prime - 1;
                }
                if (v58 != v52)
                {
                  v59 = *(_QWORD *)(a1 + 88);
                  if (!*(_QWORD *)(v59 + 8 * v58))
                  {
                    *(_QWORD *)(v59 + 8 * v58) = v51;
                    goto LABEL_110;
                  }
                  *v51 = *v57;
                  *v57 = **(_QWORD **)(*(_QWORD *)(a1 + 88) + 8 * v58);
                  **(_QWORD **)(*(_QWORD *)(a1 + 88) + 8 * v58) = v57;
                  v57 = v51;
                }
                v58 = v52;
LABEL_110:
                v51 = v57;
                v57 = (_QWORD *)*v57;
                v52 = v58;
              }
              while (v57);
            }
          }
          v33 = (unint64_t)prime;
          goto LABEL_114;
        }
        v72 = *(void **)(a1 + 88);
        *(_QWORD *)(a1 + 88) = 0;
        if (v72)
          operator delete(v72);
        v33 = 0;
        *(_QWORD *)(a1 + 96) = 0;
      }
    }
LABEL_114:
    if ((v33 & (v33 - 1)) != 0)
    {
      if (v32 >= v33)
        v2 = v32 % v33;
      else
        v2 = v32;
    }
    else
    {
      v2 = (v33 - 1) & v32;
    }
  }
  v60 = *(std::string::size_type **)(*(_QWORD *)(a1 + 88) + 8 * v2);
  j = v79.__r_.__value_.__r.__words[0];
  if (v60)
  {
    *(_QWORD *)v79.__r_.__value_.__l.__data_ = *v60;
    v71 = v74;
LABEL_127:
    *v60 = j;
    goto LABEL_128;
  }
  *(_QWORD *)v79.__r_.__value_.__l.__data_ = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = j;
  *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v2) = v40;
  v71 = v74;
  if (*(_QWORD *)j)
  {
    v61 = *(_QWORD *)(*(_QWORD *)j + 8);
    if ((v33 & (v33 - 1)) != 0)
    {
      if (v61 >= v33)
        v61 %= v33;
    }
    else
    {
      v61 &= v33 - 1;
    }
    v60 = (std::string::size_type *)(*(_QWORD *)(a1 + 88) + 8 * v61);
    goto LABEL_127;
  }
LABEL_128:
  v79.__r_.__value_.__r.__words[0] = 0;
  ++*(_QWORD *)(a1 + 112);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v79);
  do
LABEL_129:
    v62 = __ldxr(v7);
  while (__stxr(v62 + 1, v7));
  v63 = *(std::__shared_weak_count **)(j + 48);
  *(_QWORD *)(j + 40) = v71;
  *(_QWORD *)(j + 48) = v6;
  if (v63)
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(p_shared_owners);
    while (__stlxr(v65 - 1, p_shared_owners));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v76;
  v67 = v77;
  if (v77)
  {
    v68 = (unint64_t *)&v77->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  return v66;
}

void sub_191662070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a18 < 0)
    operator delete(a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr::function_t::foreach_block(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v8;

  v2 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 72);
  if (v3 == a1 + 64)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v8 = *(_QWORD *)(v3 + 16);
      v6 = *(_QWORD *)(a2 + 24);
      if (!v6)
        std::__throw_bad_function_call[abi:ne180100]();
      v5 |= (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v8);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return v5 & 1;
}

char *Espresso::MPSGraphCompilerEngine::context::begin_batch@<X0>(char **a1@<X8>)
{
  char *v3;
  char *result;

  v3 = (char *)operator new(0x90uLL);
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &off_1E2DBC900;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  v3[64] = 1;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *((_WORD *)v3 + 60) = 256;
  *((_QWORD *)v3 + 16) = 0;
  *((_QWORD *)v3 + 17) = 0;
  a1[1] = v3;
  *((_QWORD *)v3 + 3) = &off_1E2D8C7C8;
  result = v3 + 24;
  *a1 = result;
  return result;
}

_QWORD *Espresso::MPSGraphCompilerEngine::context::get_device_model_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "GPU");
}

void Espresso::MPSGraphCompilerEngine::context::~context(id *this)
{
  Espresso::abstract_context::~abstract_context(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSGraphCompilerEngine::context::create_compiler_for_network(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  const void *v15;
  void *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  unint64_t *p_shared_weak_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::runtime_error *exception;
  __int128 v37;
  unsigned int v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  __int128 v41;

  v38 = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v3 = operator new(0x100uLL);
  v4 = v3;
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_1E2DBC9A8;
  v6 = (_QWORD *)*a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v39 = (_QWORD *)*a2;
  v40 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v3[4] = 0;
  v3[5] = 0;
  *((_BYTE *)v3 + 48) = 0;
  v3[7] = 0;
  v3[11] = 0;
  v3[8] = 0;
  v3[9] = 0;
  v3[10] = v3 + 11;
  v3[12] = 0;
  v3[13] = 0;
  v3[14] = 0;
  v3[15] = 0;
  v3[3] = &off_1E2D8C930;
  v3[16] = 0;
  v9 = v3 + 16;
  v3[19] = 0;
  v3[22] = 0;
  v3[21] = 0;
  *((_BYTE *)v3 + 144) = 0;
  v3[24] = 0;
  v3[17] = 0;
  v3[20] = v3 + 21;
  v3[23] = v3 + 24;
  v3[27] = 0;
  v3[28] = 0;
  v3[25] = 0;
  v3[26] = v3 + 27;
  v3[30] = 0;
  v3[31] = 0;
  v3[29] = 0;
  if ((***(unsigned int (****)(_QWORD))(v6[2] + 8))(*(_QWORD *)(v6[2] + 8)) == 50008)
  {
    v10 = (const void *)v6[2];
    if (v10
    {
      v12 = v6[3];
      *(_QWORD *)&v41 = v11;
      *((_QWORD *)&v41 + 1) = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
    }
    else
    {
      v41 = 0uLL;
    }
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v4 + 16), &v41);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      goto LABEL_26;
    }
  }
  else
  {
    v15 = (const void *)v6[157];
    if (v15
    {
      v17 = v6[158];
      *(_QWORD *)&v41 = v16;
      *((_QWORD *)&v41 + 1) = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
    }
    else
    {
      v41 = 0uLL;
    }
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v4 + 16), &v41);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v22 = __ldaxr(v23);
      while (__stlxr(v22 - 1, v23));
LABEL_26:
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v25 = v39;
  v24 = v40;
  if (v40)
  {
    p_shared_weak_owners = (unint64_t *)&v40->__shared_weak_owners_;
    do
      v27 = __ldxr(p_shared_weak_owners);
    while (__stxr(v27 + 1, p_shared_weak_owners));
  }
  v28 = (std::__shared_weak_count *)v4[5];
  v4[4] = v39;
  v4[5] = v24;
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  if (!v25)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error creating compiler");
    goto LABEL_48;
  }
  if (!*v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Wrong context");
LABEL_48:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v24)
  {
    v29 = (unint64_t *)&v24->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *(_QWORD *)&v37 = v4 + 3;
  *((_QWORD *)&v37 + 1) = v4;
  v31 = *a2 + 528;
  *(_QWORD *)&v41 = &v38;
  v32 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v31, &v38, (uint64_t)&std::piecewise_construct, (_DWORD **)&v41);
  v33 = (std::__shared_weak_count *)v32[4];
  *(_OWORD *)(v32 + 3) = v37;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1916625B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  void *v21;
  std::__shared_weak_count *v22;
  void *v23;

  __cxa_free_exception(v19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 + 240);
  std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100](v18, 0);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*(char **)(v15 + 216));
  std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*(_QWORD **)(v15 + 192));
  std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(*(char **)(v15 + 168));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17);
  *(_QWORD *)(v15 + 24) = off_1E2D94680;
  v21 = *(void **)(v15 + 104);
  if (v21)
  {
    *(_QWORD *)(v15 + 112) = v21;
    operator delete(v21);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v16, *(_QWORD **)(v15 + 88));
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  *(_QWORD *)(v15 + 24) = off_1E2D5FD08;
  v22 = *(std::__shared_weak_count **)(v15 + 40);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v15);
  operator delete(v23);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSGraphCompilerEngine::context::supports_custom_compute_path_for_blob(uint64_t a1, _DWORD *a2)
{
  return (*a2 < 0xFu) & (0x50Bu >> *a2);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC9A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC9A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::compiler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSGraphCompilerEngine::batch::~batch(Espresso::MPSGraphCompilerEngine::batch *this)
{
  Espresso::abstract_batch::~abstract_batch(this);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 Espresso::MPSGraphCompilerEngine::engine::make_abstract_blob_container@<Q0>(uint64_t *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  char *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;

  v6 = (char *)operator new(0xD8uLL);
  v7 = (unint64_t)v6;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBC890;
  v8 = *a1;
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    *((_DWORD *)v6 + 13) = -1;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *((_QWORD *)v6 + 11) = 0;
    *((_QWORD *)v6 + 12) = v8;
    *((_QWORD *)v6 + 13) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  else
  {
    *((_DWORD *)v6 + 13) = -1;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *((_QWORD *)v6 + 11) = 0;
    *((_QWORD *)v6 + 12) = v8;
    *((_QWORD *)v6 + 13) = 0;
  }
  *((_QWORD *)v6 + 14) = 0;
  *((_QWORD *)v6 + 15) = 0;
  *((_DWORD *)v6 + 32) = 0;
  *((_DWORD *)v6 + 34) = 1065353216;
  *(_QWORD *)(v6 + 140) = 0xFFFFFFFF00000000;
  *((_DWORD *)v6 + 37) = 1;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = 0;
  *((_DWORD *)v6 + 12) = 0;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2D8C6C8;
  *((_QWORD *)v6 + 24) = 0;
  *((_QWORD *)v6 + 26) = 16;
  *((_DWORD *)v6 + 46) = a2;
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  result.n128_u64[0] = v7 + 24;
  result.n128_u64[1] = v7;
  *a3 = result;
  return result;
}

__n128 Espresso::MPSGraphCompilerEngine::engine::create_context@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new(0xA8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBC970;
  v5 = Espresso::abstract_context::abstract_context((uint64_t)(v4 + 3), a1);
  v4[3] = &off_1E2D8C878;
  *((_BYTE *)v4 + 96) = 1;
  *((_BYTE *)v4 + 68) = 0;
  *((_BYTE *)v4 + 80) = 1;
  *((_BYTE *)v4 + 148) = 1;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_191662934(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphCompilerEngine::engine::~engine(Espresso::MPSGraphCompilerEngine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_48@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::upsample_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::upsample_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::upsample_kernel_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_47@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::transpose_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transpose_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_46@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::topk_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::topk_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::topk_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_45@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tile_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tile_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tile_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_44@<D0>(_QWORD *a1@<X1>, const void *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tensor_zero_pad_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_43@<D0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::stack_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_42@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::squeeze_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::squeeze_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::squeeze_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_41@<D0>(_QWORD *a1@<X1>, const void *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_nd_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_40@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_39@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::space_to_depth_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<D0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::slice_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::scatter_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<D0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_like_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reduce_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reduce_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reduce_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool3d_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::one_hot_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::one_hot_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::one_hot_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::lrn_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::lrn_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::lrn_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::load_random_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::load_random_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_random_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::l2_norm_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::inner_product_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::inner_product_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::inner_product_uniforms const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_slice_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_padding_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_padding_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_concat_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::gather_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::flatten_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::flatten_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::flatten_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::fill_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::fill_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::fill_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::expand_dims_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::elementwise_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::elementwise_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<D0>(_QWORD *a1@<X1>, const std::string *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::einsum_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::einsum_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::einsum_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<D0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::dev_op_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::dev_op_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dev_op_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_and_resize_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<D0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::copy_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::copy_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::conv3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::conv3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::conv3d_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::convolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::concat_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::cast_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::cast_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cast_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batchnorm_params const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batch_matmul_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::activation_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1916635DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v16;

  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_find_shared_weights::~pass_find_shared_weights(Espresso::pass_find_shared_weights *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_find_shared_weights::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_find_shared_weights::run_on_network(Espresso::pass_find_shared_weights *this@<X0>, Espresso::net *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  unsigned int (***v9)(_QWORD);
  uint64_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  BOOL v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  BOOL v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t j;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  char v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  Espresso *v68;
  const char *v69;
  int v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  NSObject *v76;
  uint64_t v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _BOOL8 v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int (***v89)(_QWORD);
  uint64_t v90;
  const void *v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  BOOL v104;
  size_t v105;
  int v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  BOOL v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  BOOL v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  char v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  Espresso *v143;
  const char *v144;
  int v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  NSObject *v151;
  uint64_t v152;
  _QWORD *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  _BOOL8 v157;
  unint64_t *v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  unsigned int (***v164)(_QWORD);
  uint64_t v165;
  const void *v166;
  void *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  void *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  BOOL v179;
  size_t v180;
  int v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  BOOL v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  BOOL v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  char v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  Espresso *v218;
  const char *v219;
  int v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  NSObject *v226;
  uint64_t v227;
  _QWORD *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  _BOOL8 v232;
  unint64_t *v233;
  unint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  NSObject *v237;
  _BOOL8 v239;
  _BOOL8 v240;
  _BOOL8 v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  void *v247;
  std::__shared_weak_count *v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  void *v253;
  std::__shared_weak_count *v254;
  _BYTE v255[24];
  _BYTE *v256;
  _BYTE v257[24];
  _BYTE *v258;
  _QWORD v259[3];
  _QWORD *v260;
  _BYTE buf[22];
  uint64_t v262;

  v262 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a2 + 5) == *((_QWORD *)a2 + 4))
  {
    v4 = 0;
    goto LABEL_399;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = operator new(8uLL);
    v7 = 0;
    *v6 = 0x6400000000;
    v8 = -1;
    v259[0] = &off_1E2DB19D0;
    v260 = v259;
    do
    {
      v9 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v5)
                                                                           + 64)
                                                               + 8)
                                                   + 8);
      if ((**v9)(v9) == *(_DWORD *)((char *)v6 + v7))
        v8 = *(_DWORD *)((char *)v6 + v7);
      v7 += 4;
    }
    while (v7 != 8);
    if (v8 == -1)
    {
      v82 = 0;
      goto LABEL_133;
    }
    v10 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v5);
    v11 = *(const void **)(v10 + 64);
    if (!v11
    {
      v44 = 0;
      goto LABEL_132;
    }
    v242 = v4;
    v13 = *(std::__shared_weak_count **)(v10 + 72);
    v253 = v12;
    v254 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    if (!v5)
    {
      v44 = 0;
      if (!v13)
        goto LABEL_131;
LABEL_127:
      v83 = (unint64_t *)&v13->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      goto LABEL_131;
    }
    for (i = 0; i != v5; ++i)
    {
      v17 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * i);
      v18 = *(_QWORD *)(v17 + 64);
      if (v18
      {
        v20 = v19;
        v21 = *(std::__shared_weak_count **)(v17 + 72);
        v251 = (uint64_t)v19;
        v252 = v21;
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v18 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * i) + 64);
        }
        if ((***(unsigned int (****)(_QWORD))(*(_QWORD *)(v18 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(v18 + 8)
                                                                                                 + 8)) != v8)
        {
LABEL_112:
          v44 = 6;
          goto LABEL_113;
        }
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v253 + 456))(buf);
        (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v20 + 456))(&v249, v20);
        v24 = match_blob<std::shared_ptr<Espresso::blob<float,4>>>(*(uint64_t *)buf, v249);
        v25 = v250;
        if (v250)
        {
          v26 = (unint64_t *)&v250->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v28 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_31;
        v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
          if (!v24)
            goto LABEL_112;
        }
        else
        {
LABEL_31:
          if (!v24)
            goto LABEL_112;
        }
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v253 + 448))(buf);
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v251 + 448))(&v249);
        v31 = match_blob<std::shared_ptr<Espresso::blob<float,1>>>(*(uint64_t *)buf, v249);
        v32 = v250;
        if (v250)
        {
          v33 = (unint64_t *)&v250->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v35 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_41;
        v36 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
          if (!v31)
            goto LABEL_112;
        }
        else
        {
LABEL_41:
          if (!v31)
            goto LABEL_112;
        }
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v253 + 552))(buf);
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v251 + 552))(&v249);
        v38 = (*(_QWORD *)buf == 0) == (v249 == 0);
        if (*(_QWORD *)buf && v249)
        {
          v39 = 0;
          v40 = *(int *)(*(_QWORD *)buf + 8);
          v41 = v40;
          do
          {
            v41 *= *(int *)(*(_QWORD *)buf + 12 + v39);
            v39 += 4;
          }
          while (v39 != 12);
          v42 = 0;
          v43 = *(int *)(v249 + 8);
          do
          {
            v43 *= *(int *)(v249 + 12 + v42);
            v42 += 4;
          }
          while (v42 != 12);
          if (((v43 ^ v41) & 0x7FFFFFFFFFFFFFFFLL) != 0)
          {
            v38 = 0;
          }
          else
          {
            for (j = 0; j != 12; j += 4)
              v40 *= *(int *)(*(_QWORD *)buf + 12 + j);
            v38 = memcmp(*(const void **)(*(_QWORD *)buf + 24), *(const void **)(v249 + 24), 2 * v40) == 0;
          }
        }
        v46 = v250;
        if (v250)
        {
          v47 = (unint64_t *)&v250->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_67;
        v50 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
          if (!v38)
            goto LABEL_112;
        }
        else
        {
LABEL_67:
          if (!v38)
            goto LABEL_112;
        }
        if (v260)
        {
          v247 = v253;
          v248 = v254;
          if (v254)
          {
            v52 = (unint64_t *)&v254->__shared_owners_;
            do
              v53 = __ldxr(v52);
            while (__stxr(v53 + 1, v52));
          }
          v245 = v251;
          v246 = v252;
          if (v252)
          {
            v54 = (unint64_t *)&v252->__shared_owners_;
            do
              v55 = __ldxr(v54);
            while (__stxr(v55 + 1, v54));
          }
          if (!v260)
            std::__throw_bad_function_call[abi:ne180100]();
          v56 = (*(uint64_t (**)(_QWORD *, void **, uint64_t *))(*v260 + 48))(v260, &v247, &v245);
          v57 = v246;
          if (v246)
          {
            v58 = (unint64_t *)&v246->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          v60 = v248;
          if (!v248)
            goto LABEL_85;
          v61 = (unint64_t *)&v248->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
            if ((v56 & 1) == 0)
              goto LABEL_112;
          }
          else
          {
LABEL_85:
            if ((v56 & 1) == 0)
              goto LABEL_112;
          }
        }
        *(_QWORD *)buf = v253;
        *(_QWORD *)&buf[8] = v254;
        if (v254)
        {
          v63 = (unint64_t *)&v254->__shared_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
        v65 = v252;
        v249 = v251;
        v250 = v252;
        if (v252)
        {
          v66 = (unint64_t *)&v252->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
        v68 = (Espresso *)check_serialization_blobs((uint64_t)buf, (uint64_t)&v249);
        v70 = (int)v68;
        if (v65)
        {
          v71 = (unint64_t *)&v65->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v73 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_101;
        v74 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
          if (!v70)
          {
LABEL_110:
            v44 = 0;
            goto LABEL_113;
          }
        }
        else
        {
LABEL_101:
          if (!v70)
            goto LABEL_110;
        }
        Espresso::espresso_os_log_subsystem(v68, v69);
        v76 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
        {
          v77 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v5);
          v78 = (_QWORD *)(v77 + 16);
          if (*(char *)(v77 + 39) < 0)
            v78 = (_QWORD *)*v78;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v78;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = i;
          _os_log_impl(&dword_190DAF000, v76, OS_LOG_TYPE_INFO, "pass_find_shared_weights: sharing weights to layer %s from %zu\n", buf, 0x16u);
        }

        std::string::operator=((std::string *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v5) + 128), (const std::string *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * i) + 16));
        v44 = 1;
      }
      else
      {
        v44 = 0;
        v251 = 0;
        v252 = 0;
      }
LABEL_113:
      v79 = v252;
      if (v252)
      {
        v80 = (unint64_t *)&v252->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      if (v44 != 6 && v44)
        goto LABEL_122;
    }
    v44 = 0;
LABEL_122:
    v13 = v254;
    if (v254)
      goto LABEL_127;
LABEL_131:
    v4 = v242;
LABEL_132:
    v82 = v44 != 0;
LABEL_133:
    v85 = v260;
    if (v260 == v259)
    {
      v85 = v259;
      v86 = 4;
LABEL_137:
      (*(void (**)(void))(*v85 + 8 * v86))();
    }
    else if (v260)
    {
      v86 = 5;
      goto LABEL_137;
    }
    v87 = 0;
    v258 = 0;
    v88 = -1;
    do
    {
      v89 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v5)
                                                                            + 64)
                                                                + 8)
                                                    + 8);
      if ((**v89)(v89) == *(_DWORD *)((char *)v6 + v87))
        v88 = *(_DWORD *)((char *)v6 + v87);
      v87 += 4;
    }
    while (v87 != 8);
    if (v88 == -1)
    {
      v157 = 0;
      goto LABEL_262;
    }
    v90 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v5);
    v91 = *(const void **)(v90 + 64);
    if (!v91
    {
      v106 = 0;
      goto LABEL_261;
    }
    v239 = v82;
    v243 = v4;
    v93 = *(std::__shared_weak_count **)(v90 + 72);
    v253 = v92;
    v254 = v93;
    if (v93)
    {
      v94 = (unint64_t *)&v93->__shared_owners_;
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
    }
    if (!v5)
    {
      v106 = 0;
      if (!v93)
        goto LABEL_260;
LABEL_256:
      v158 = (unint64_t *)&v93->__shared_owners_;
      do
        v159 = __ldaxr(v158);
      while (__stlxr(v159 - 1, v158));
      if (!v159)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
      goto LABEL_260;
    }
    v96 = 0;
    while (2)
    {
      v97 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v96);
      v98 = *(_QWORD *)(v97 + 64);
      if (!v98
      {
        v106 = 0;
        v251 = 0;
        v252 = 0;
        goto LABEL_242;
      }
      v100 = v99;
      v101 = *(std::__shared_weak_count **)(v97 + 72);
      v251 = (uint64_t)v99;
      v252 = v101;
      if (v101)
      {
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
        v98 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v96) + 64);
      }
      if ((***(unsigned int (****)(_QWORD))(*(_QWORD *)(v98 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(v98 + 8)
                                                                                               + 8)) != v88)
        goto LABEL_241;
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v253 + 416))(buf);
      (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v100 + 416))(&v249, v100);
      v104 = (*(_QWORD *)buf == 0) == (v249 == 0);
      if (*(_QWORD *)buf && v249)
      {
        v105 = 4 * *(int *)(*(_QWORD *)buf + 8) * (uint64_t)*(int *)(*(_QWORD *)buf + 12);
        v104 = v105 == 4 * *(int *)(v249 + 8) * (uint64_t)*(int *)(v249 + 12)
            && memcmp(*(const void **)(*(_QWORD *)buf + 16), *(const void **)(v249 + 16), v105) == 0;
      }
      v107 = v250;
      if (v250)
      {
        v108 = (unint64_t *)&v250->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      v110 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v111 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
          if (v104)
            goto LABEL_173;
          goto LABEL_241;
        }
      }
      if (!v104)
        goto LABEL_241;
LABEL_173:
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v253 + 408))(buf);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v251 + 408))(&v249);
      v113 = match_blob<std::shared_ptr<Espresso::blob<float,1>>>(*(uint64_t *)buf, v249);
      v114 = v250;
      if (v250)
      {
        v115 = (unint64_t *)&v250->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      v117 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v118 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
          if (v113)
            goto LABEL_183;
          goto LABEL_241;
        }
      }
      if (!v113)
        goto LABEL_241;
LABEL_183:
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v253 + 472))(buf);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v251 + 472))(&v249);
      v120 = match_blob<std::shared_ptr<Espresso::blob<unsigned short,2>>>(*(uint64_t *)buf, v249);
      v121 = v250;
      if (v250)
      {
        v122 = (unint64_t *)&v250->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      v124 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v125 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
          if (!v120)
            goto LABEL_241;
LABEL_193:
          if (v258)
          {
            v247 = v253;
            v248 = v254;
            if (v254)
            {
              v127 = (unint64_t *)&v254->__shared_owners_;
              do
                v128 = __ldxr(v127);
              while (__stxr(v128 + 1, v127));
            }
            v245 = v251;
            v246 = v252;
            if (v252)
            {
              v129 = (unint64_t *)&v252->__shared_owners_;
              do
                v130 = __ldxr(v129);
              while (__stxr(v130 + 1, v129));
            }
            if (!v258)
              std::__throw_bad_function_call[abi:ne180100]();
            v131 = (*(uint64_t (**)(_BYTE *, void **, uint64_t *))(*(_QWORD *)v258 + 48))(v258, &v247, &v245);
            v132 = v246;
            if (v246)
            {
              v133 = (unint64_t *)&v246->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
            v135 = v248;
            if (!v248)
              goto LABEL_210;
            v136 = (unint64_t *)&v248->__shared_owners_;
            do
              v137 = __ldaxr(v136);
            while (__stlxr(v137 - 1, v136));
            if (!v137)
            {
              ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
              std::__shared_weak_count::__release_weak(v135);
              if ((v131 & 1) == 0)
                goto LABEL_241;
            }
            else
            {
LABEL_210:
              if ((v131 & 1) == 0)
                goto LABEL_241;
            }
          }
          *(_QWORD *)buf = v253;
          *(_QWORD *)&buf[8] = v254;
          if (v254)
          {
            v138 = (unint64_t *)&v254->__shared_owners_;
            do
              v139 = __ldxr(v138);
            while (__stxr(v139 + 1, v138));
          }
          v140 = v252;
          v249 = v251;
          v250 = v252;
          if (v252)
          {
            v141 = (unint64_t *)&v252->__shared_owners_;
            do
              v142 = __ldxr(v141);
            while (__stxr(v142 + 1, v141));
          }
          v143 = (Espresso *)check_serialization_blobs((uint64_t)buf, (uint64_t)&v249);
          v145 = (int)v143;
          if (v140)
          {
            v146 = (unint64_t *)&v140->__shared_owners_;
            do
              v147 = __ldaxr(v146);
            while (__stlxr(v147 - 1, v146));
            if (!v147)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
          v148 = *(std::__shared_weak_count **)&buf[8];
          if (!*(_QWORD *)&buf[8])
            goto LABEL_226;
          v149 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v150 = __ldaxr(v149);
          while (__stlxr(v150 - 1, v149));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
            if (v145)
              goto LABEL_227;
          }
          else
          {
LABEL_226:
            if (v145)
            {
LABEL_227:
              Espresso::espresso_os_log_subsystem(v143, v144);
              v151 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v151, OS_LOG_TYPE_INFO))
              {
                v152 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v5);
                v153 = (_QWORD *)(v152 + 16);
                if (*(char *)(v152 + 39) < 0)
                  v153 = (_QWORD *)*v153;
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v153;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v96;
                _os_log_impl(&dword_190DAF000, v151, OS_LOG_TYPE_INFO, "pass_find_shared_weights: sharing weights to layer %s from %zu\n", buf, 0x16u);
              }

              std::string::operator=((std::string *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v5) + 128), (const std::string *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v96) + 16));
              v106 = 1;
              goto LABEL_242;
            }
          }
          v106 = 0;
          goto LABEL_242;
        }
      }
      if (v120)
        goto LABEL_193;
LABEL_241:
      v106 = 6;
LABEL_242:
      v154 = v252;
      if (v252)
      {
        v155 = (unint64_t *)&v252->__shared_owners_;
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      if (v106 != 6 && v106)
        goto LABEL_251;
      if (++v96 != v5)
        continue;
      break;
    }
    v106 = 0;
LABEL_251:
    v93 = v254;
    if (v254)
      goto LABEL_256;
LABEL_260:
    v4 = v243;
    v82 = v239;
LABEL_261:
    v157 = v106 != 0;
LABEL_262:
    v160 = v258;
    if (v258 == v257)
    {
      v160 = v257;
      v161 = 4;
LABEL_266:
      (*(void (**)(void))(*v160 + 8 * v161))();
    }
    else if (v258)
    {
      v161 = 5;
      goto LABEL_266;
    }
    v162 = 0;
    v256 = 0;
    v163 = -1;
    do
    {
      v164 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v5)
                                                                             + 64)
                                                                 + 8)
                                                     + 8);
      if ((**v164)(v164) == *(_DWORD *)((char *)v6 + v162))
        v163 = *(_DWORD *)((char *)v6 + v162);
      v162 += 4;
    }
    while (v162 != 8);
    if (v163 == -1)
    {
      v232 = 0;
      goto LABEL_391;
    }
    v165 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v5);
    v166 = *(const void **)(v165 + 64);
    v241 = v157;
    if (!v166
    {
      v181 = 0;
      goto LABEL_390;
    }
    v240 = v82;
    v244 = v4;
    v168 = *(std::__shared_weak_count **)(v165 + 72);
    v253 = v167;
    v254 = v168;
    if (v168)
    {
      v169 = (unint64_t *)&v168->__shared_owners_;
      do
        v170 = __ldxr(v169);
      while (__stxr(v170 + 1, v169));
    }
    if (!v5)
    {
      v181 = 0;
      if (!v168)
        goto LABEL_389;
LABEL_385:
      v233 = (unint64_t *)&v168->__shared_owners_;
      do
        v234 = __ldaxr(v233);
      while (__stlxr(v234 - 1, v233));
      if (!v234)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
      }
      goto LABEL_389;
    }
    v171 = 0;
    while (2)
    {
      v172 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v171);
      v173 = *(_QWORD *)(v172 + 64);
      if (!v173
      {
        v181 = 0;
        v251 = 0;
        v252 = 0;
        goto LABEL_371;
      }
      v175 = v174;
      v176 = *(std::__shared_weak_count **)(v172 + 72);
      v251 = (uint64_t)v174;
      v252 = v176;
      if (v176)
      {
        v177 = (unint64_t *)&v176->__shared_owners_;
        do
          v178 = __ldxr(v177);
        while (__stxr(v178 + 1, v177));
        v173 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v171) + 64);
      }
      if ((***(unsigned int (****)(_QWORD))(*(_QWORD *)(v173 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(v173 + 8)
                                                                                                + 8)) != v163)
        goto LABEL_370;
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v253 + 400))(buf);
      (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v175 + 400))(&v249, v175);
      v179 = (*(_QWORD *)buf == 0) == (v249 == 0);
      if (*(_QWORD *)buf && v249)
      {
        v180 = *(int *)(*(_QWORD *)buf + 12) * (uint64_t)*(int *)(*(_QWORD *)buf + 8);
        v179 = v180 == *(int *)(v249 + 12) * (uint64_t)*(int *)(v249 + 8)
            && memcmp(*(const void **)(*(_QWORD *)buf + 16), *(const void **)(v249 + 16), v180) == 0;
      }
      v182 = v250;
      if (v250)
      {
        v183 = (unint64_t *)&v250->__shared_owners_;
        do
          v184 = __ldaxr(v183);
        while (__stlxr(v184 - 1, v183));
        if (!v184)
        {
          ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
          std::__shared_weak_count::__release_weak(v182);
        }
      }
      v185 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v186 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 - 1, v186));
        if (!v187)
        {
          ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
          std::__shared_weak_count::__release_weak(v185);
          if (v179)
            goto LABEL_302;
          goto LABEL_370;
        }
      }
      if (!v179)
        goto LABEL_370;
LABEL_302:
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v253 + 392))(buf);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v251 + 392))(&v249);
      v188 = match_blob<std::shared_ptr<Espresso::blob<float,4>>>(*(uint64_t *)buf, v249);
      v189 = v250;
      if (v250)
      {
        v190 = (unint64_t *)&v250->__shared_owners_;
        do
          v191 = __ldaxr(v190);
        while (__stlxr(v191 - 1, v190));
        if (!v191)
        {
          ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
          std::__shared_weak_count::__release_weak(v189);
        }
      }
      v192 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v193 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v194 = __ldaxr(v193);
        while (__stlxr(v194 - 1, v193));
        if (!v194)
        {
          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
          std::__shared_weak_count::__release_weak(v192);
          if (v188)
            goto LABEL_312;
          goto LABEL_370;
        }
      }
      if (!v188)
        goto LABEL_370;
LABEL_312:
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v253 + 408))(buf);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v251 + 408))(&v249);
      v195 = match_blob<std::shared_ptr<Espresso::blob<unsigned short,2>>>(*(uint64_t *)buf, v249);
      v196 = v250;
      if (v250)
      {
        v197 = (unint64_t *)&v250->__shared_owners_;
        do
          v198 = __ldaxr(v197);
        while (__stlxr(v198 - 1, v197));
        if (!v198)
        {
          ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
          std::__shared_weak_count::__release_weak(v196);
        }
      }
      v199 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v200 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
          if (!v195)
            goto LABEL_370;
LABEL_322:
          if (v256)
          {
            v247 = v253;
            v248 = v254;
            if (v254)
            {
              v202 = (unint64_t *)&v254->__shared_owners_;
              do
                v203 = __ldxr(v202);
              while (__stxr(v203 + 1, v202));
            }
            v245 = v251;
            v246 = v252;
            if (v252)
            {
              v204 = (unint64_t *)&v252->__shared_owners_;
              do
                v205 = __ldxr(v204);
              while (__stxr(v205 + 1, v204));
            }
            if (!v256)
              std::__throw_bad_function_call[abi:ne180100]();
            v206 = (*(uint64_t (**)(_BYTE *, void **, uint64_t *))(*(_QWORD *)v256 + 48))(v256, &v247, &v245);
            v207 = v246;
            if (v246)
            {
              v208 = (unint64_t *)&v246->__shared_owners_;
              do
                v209 = __ldaxr(v208);
              while (__stlxr(v209 - 1, v208));
              if (!v209)
              {
                ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                std::__shared_weak_count::__release_weak(v207);
              }
            }
            v210 = v248;
            if (!v248)
              goto LABEL_339;
            v211 = (unint64_t *)&v248->__shared_owners_;
            do
              v212 = __ldaxr(v211);
            while (__stlxr(v212 - 1, v211));
            if (!v212)
            {
              ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
              std::__shared_weak_count::__release_weak(v210);
              if ((v206 & 1) == 0)
                goto LABEL_370;
            }
            else
            {
LABEL_339:
              if ((v206 & 1) == 0)
                goto LABEL_370;
            }
          }
          *(_QWORD *)buf = v253;
          *(_QWORD *)&buf[8] = v254;
          if (v254)
          {
            v213 = (unint64_t *)&v254->__shared_owners_;
            do
              v214 = __ldxr(v213);
            while (__stxr(v214 + 1, v213));
          }
          v215 = v252;
          v249 = v251;
          v250 = v252;
          if (v252)
          {
            v216 = (unint64_t *)&v252->__shared_owners_;
            do
              v217 = __ldxr(v216);
            while (__stxr(v217 + 1, v216));
          }
          v218 = (Espresso *)check_serialization_blobs((uint64_t)buf, (uint64_t)&v249);
          v220 = (int)v218;
          if (v215)
          {
            v221 = (unint64_t *)&v215->__shared_owners_;
            do
              v222 = __ldaxr(v221);
            while (__stlxr(v222 - 1, v221));
            if (!v222)
            {
              ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
              std::__shared_weak_count::__release_weak(v215);
            }
          }
          v223 = *(std::__shared_weak_count **)&buf[8];
          if (!*(_QWORD *)&buf[8])
            goto LABEL_355;
          v224 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v225 = __ldaxr(v224);
          while (__stlxr(v225 - 1, v224));
          if (!v225)
          {
            ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
            std::__shared_weak_count::__release_weak(v223);
            if (v220)
              goto LABEL_356;
          }
          else
          {
LABEL_355:
            if (v220)
            {
LABEL_356:
              Espresso::espresso_os_log_subsystem(v218, v219);
              v226 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v226, OS_LOG_TYPE_INFO))
              {
                v227 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v5);
                v228 = (_QWORD *)(v227 + 16);
                if (*(char *)(v227 + 39) < 0)
                  v228 = (_QWORD *)*v228;
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v228;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v171;
                _os_log_impl(&dword_190DAF000, v226, OS_LOG_TYPE_INFO, "pass_find_shared_weights: sharing weights to layer %s from %zu\n", buf, 0x16u);
              }

              std::string::operator=((std::string *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v5) + 128), (const std::string *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v171) + 16));
              v181 = 1;
              goto LABEL_371;
            }
          }
          v181 = 0;
          goto LABEL_371;
        }
      }
      if (v195)
        goto LABEL_322;
LABEL_370:
      v181 = 6;
LABEL_371:
      v229 = v252;
      if (v252)
      {
        v230 = (unint64_t *)&v252->__shared_owners_;
        do
          v231 = __ldaxr(v230);
        while (__stlxr(v231 - 1, v230));
        if (!v231)
        {
          ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
          std::__shared_weak_count::__release_weak(v229);
        }
      }
      if (v181 != 6 && v181)
        goto LABEL_380;
      if (++v171 != v5)
        continue;
      break;
    }
    v181 = 0;
LABEL_380:
    v168 = v254;
    if (v254)
      goto LABEL_385;
LABEL_389:
    v4 = v244;
    v82 = v240;
LABEL_390:
    v232 = v181 != 0;
    v157 = v241;
LABEL_391:
    v235 = v256;
    if (v256 == v255)
    {
      v235 = v255;
      v236 = 4;
LABEL_395:
      (*(void (**)(void))(*v235 + 8 * v236))();
    }
    else if (v256)
    {
      v236 = 5;
      goto LABEL_395;
    }
    v4 += v82 + v157 + v232;
    operator delete(v6);
    ++v5;
  }
  while (v5 < (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
LABEL_399:
  Espresso::espresso_os_log_subsystem(this, (const char *)a2);
  v237 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v237, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl(&dword_190DAF000, v237, OS_LOG_TYPE_INFO, "pass_find_shared_weights: shared identical weights for %zu layers", buf, 0xCu);
  }

  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

void sub_191664CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  void *v28;
  char *v30;
  uint64_t v31;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  v30 = a28;
  if (a28 == &a25)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  operator delete(v28);
  _Unwind_Resume(a1);
}

BOOL match_blob<std::shared_ptr<Espresso::blob<float,4>>>(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;

  v2 = (a1 == 0) == (a2 == 0);
  if (a1 && a2)
  {
    v3 = 0;
    v4 = *(int *)(a1 + 8);
    v5 = v4;
    do
    {
      v5 *= *(int *)(a1 + 12 + v3);
      v3 += 4;
    }
    while (v3 != 12);
    v6 = 0;
    v7 = *(int *)(a2 + 8);
    do
    {
      v7 *= *(int *)(a2 + 12 + v6);
      v6 += 4;
    }
    while (v6 != 12);
    if (((v7 ^ v5) & 0x3FFFFFFFFFFFFFFFLL) != 0)
    {
      return 0;
    }
    else
    {
      v8 = 0;
      v9 = *(const void **)(a2 + 24);
      do
      {
        v4 *= *(int *)(a1 + 12 + v8);
        v8 += 4;
      }
      while (v8 != 12);
      return memcmp(*(const void **)(a1 + 24), v9, 4 * v4) == 0;
    }
  }
  return v2;
}

BOOL match_blob<std::shared_ptr<Espresso::blob<unsigned short,2>>>(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  size_t v3;

  v2 = (a1 == 0) == (a2 == 0);
  if (a1 && a2)
  {
    v3 = 2 * *(int *)(a1 + 8) * (uint64_t)*(int *)(a1 + 12);
    return v3 == 2 * *(int *)(a2 + 8) * (uint64_t)*(int *)(a2 + 12)
        && memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), v3) == 0;
  }
  return v2;
}

uint64_t check_serialization_blobs(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *i;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  size_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  int v23;

  v21 = 0u;
  v22 = 0u;
  v23 = 1065353216;
  v4 = *(_QWORD **)(*(_QWORD *)a1 + 152);
  v5 = *(_QWORD *)a1 + 160;
  if (v4 != (_QWORD *)v5)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v21, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v6 = (_QWORD *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v17 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v17);
      }
      v4 = v7;
    }
    while (v7 != (_QWORD *)v5);
  }
  v8 = *(_QWORD **)(*(_QWORD *)a2 + 152);
  v9 = *(_QWORD *)a2 + 160;
  if (v8 != (_QWORD *)v9)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v21, (uint64_t)(v8 + 4), (uint64_t)(v8 + 4));
      v10 = (_QWORD *)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v8[2];
          v17 = *v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v17);
      }
      v8 = v11;
    }
    while (v11 != (_QWORD *)v9);
  }
  for (i = (_QWORD *)v22; i; i = (_QWORD *)*i)
  {
    v13 = (uint64_t *)std::map<std::string,Espresso::blob_numerical_properties>::at(*(_QWORD *)a1 + 152, i + 2);
    v14 = (uint64_t *)std::map<std::string,Espresso::blob_numerical_properties>::at(*(_QWORD *)a2 + 152, i + 2);
    v15 = *v13;
    v16 = *v14;
    if (*v13)
      v17 = v16 == 0;
    else
      v17 = 1;
    if (v17)
    {
      if ((v15 == 0) != (v16 == 0))
        goto LABEL_27;
    }
    else
    {
      v18 = *(int *)(v15 + 8);
      if ((_DWORD)v18 != *(_DWORD *)(v16 + 8) || memcmp(*(const void **)(v15 + 16), *(const void **)(v16 + 16), v18))
      {
LABEL_27:
        v19 = 0;
        goto LABEL_28;
      }
    }
  }
  v19 = 1;
LABEL_28:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v21);
  return v19;
}

void sub_1916651B4()
{
  JUMPOUT(0x1916651C0);
}

BOOL match_blob<std::shared_ptr<Espresso::blob<float,1>>>(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  size_t v3;

  v2 = (a1 == 0) == (a2 == 0);
  if (a1 && a2)
  {
    v3 = 4 * *(int *)(a1 + 8);
    return v3 == 4 * *(int *)(a2 + 8) && memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), v3) == 0;
  }
  return v2;
}

void std::__function::__func<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0>,BOOL ()(std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::generic_convolution_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0>,BOOL ()(std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::generic_convolution_kernel>)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB19D0;
  return result;
}

void std::__function::__func<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0>,BOOL ()(std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::generic_convolution_kernel>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB19D0;
}

BOOL std::__function::__func<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0>,BOOL ()(std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::generic_convolution_kernel>)>::operator()(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  std::__shared_weak_count *v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _BOOL8 v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  if (!match_blob<std::shared_ptr<Espresso::blob<float,1>>>(v4[61], v6[61])
    || !match_blob<std::shared_ptr<Espresso::blob<float,1>>>(v4[63], v6[63]))
  {
    goto LABEL_16;
  }
  v7 = v4[65];
  v8 = v6[65];
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
  {
    v10 = (v7 == 0) == (v8 == 0);
    goto LABEL_17;
  }
  v11 = 0;
  v12 = *(int *)(v7 + 8);
  v13 = v12;
  do
  {
    v13 *= *(int *)(v7 + 12 + v11);
    v11 += 4;
  }
  while (v11 != 12);
  v14 = 0;
  v15 = *(int *)(v8 + 8);
  do
  {
    v15 *= *(int *)(v8 + 12 + v14);
    v14 += 4;
  }
  while (v14 != 12);
  if (v13 != v15)
  {
LABEL_16:
    v10 = 0;
    goto LABEL_17;
  }
  v16 = 0;
  v17 = *(const void **)(v7 + 24);
  v18 = v7 + 12;
  do
  {
    v12 *= *(int *)(v18 + v16);
    v16 += 4;
  }
  while (v16 != 12);
  v10 = memcmp(v17, *(const void **)(v8 + 24), v12) == 0;
LABEL_17:
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v3)
  {
    v21 = (unint64_t *)&v3->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v10;
}

uint64_t std::__function::__func<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0>,BOOL ()(std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::generic_convolution_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso24pass_find_shared_weights14run_on_networkERNS_3netEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0>,BOOL ()(std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::generic_convolution_kernel>)>::target_type()
{
}

void std::__shared_ptr_emplace<Espresso::pass_find_shared_weights>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_find_shared_weights>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_find_shared_weights>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::abstract_kernel_with_weights_grad_::clear_weights(Espresso::abstract_kernel_with_weights_grad_ *this)
{
  uint64_t result;
  uint64_t v3;

  result = *((_QWORD *)this + 36);
  v3 = *((_QWORD *)this + 35);
  while (result != v3)
    result = std::shared_ptr<void>::~shared_ptr[abi:ne180100](result - 16);
  *((_QWORD *)this + 36) = v3;
  return result;
}

uint64_t Espresso::generic_convolution_kernel::input_blob_type(Espresso::generic_convolution_kernel *this, uint64_t a2)
{
  if (a2 == 1)
    return 1;
  else
    return 2 * (a2 == 2);
}

_QWORD *Espresso::generic_convolution_kernel::share_weights(_QWORD *a1, const void **a2)
{
  uint64_t *v4;

  Espresso::base_kernel::share_weights(a1, a2);
  if (*a2)
  else
    v4 = 0;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 59, v4[59], v4[60]);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 61, v4[61], v4[62]);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 63, v4[63], v4[64]);
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 65, v4[65], v4[66]);
}

void Espresso::generic_convolution_kernel::clear_weights(Espresso::generic_convolution_kernel *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 20));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 45);
}

float Espresso::generic_convolution_kernel::estimated_compute_resources(uint64_t a1, __int128 **a2, int a3)
{
  float v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  float v13;
  _QWORD v15[3];
  void **v16;

  v5 = Espresso::base_kernel::estimated_compute_resources(a1, a2, a3);
  v6 = *((_DWORD *)*a2 + 3);
  v7 = *((_DWORD *)*a2 + 4);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 **, float))(*(_QWORD *)a1 + 64))(v15, a1, a2, v5);
  v9 = *(_DWORD *)v15[0];
  v8 = *(_DWORD *)(v15[0] + 4);
  v10 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
  v11 = v10[29];
  if (v11 <= 1)
    v11 = 1;
  if (v7 <= 1)
    v12 = 1;
  else
    v12 = v7;
  v13 = ((double)(v12 * v6) * (double)v10[10] * (double)v9 * (double)v8
       + (double)v10[10]
       * (double)(v10[11] / v11)
       * (double)v10[12]
       * (double)v10[13]
       * (double)(v12 * v6)
       * (double)v9
       * (double)v8
       * 2.0)
      * 0.000000001;
  v16 = (void **)v15;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v16);
  return v13;
}

void sub_191665710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Espresso::abstract_kernel_with_weights_::__set_weight_raw_blob_for_serialization(uint64_t **a1, uint64_t a2, __int128 *a3, const void *a4, size_t a5)
{
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 *v12;

  Espresso::base_kernel::__set_weight_raw_blob_for_serialization(a1, a2, a3, a4, a5);
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(a1[36], a3))
  {
    v11 = 0uLL;
    v12 = a3;
    v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 35, a3, &v12);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v7 + 7), &v11);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (*((_QWORD *)&v11 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1916657C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_convolution_kernel::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  int v2;
  _BOOL8 result;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  int v18;
  int v19;
  int v24;
  BOOL v25;
  int v26;

  v2 = *((unsigned __int8 *)a2 + 23);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    result = 0;
    switch(*((_BYTE *)a2 + 23))
    {
      case 1:
        v4 = *(unsigned __int8 *)a2;
        if (v4 != 87)
          return v4 == 98;
        return 1;
      case 2:
        v9 = *(unsigned __int16 *)a2;
        v10 = 14423;
        return v9 == v10;
      case 4:
        v9 = *a2;
        v10 = 947216215;
        return v9 == v10;
      case 5:
        if (*a2 != 828792663 || *((_BYTE *)a2 + 4) != 54)
          return *a2 == 828792674 && *((_BYTE *)a2 + 4) == 54;
        return 1;
      case 6:
        return *a2 == 1852399447 && *((_WORD *)a2 + 2) == 14452;
      case 9:
        goto LABEL_99;
      case 0xA:
        goto LABEL_81;
      case 0x14:
        if (*(_QWORD *)a2 != 0x6F635F3233665F57 || *((_QWORD *)a2 + 1) != 0x646573736572706DLL || a2[4] != 909207135)
          return *(_QWORD *)a2 == 0x6F635F3233665F62
              && *((_QWORD *)a2 + 1) == 0x646573736572706DLL
              && a2[4] == 909207135;
        return 1;
      default:
        return result;
    }
  }
  v5 = *((_QWORD *)a2 + 1);
  switch(v5)
  {
    case 1:
      if (**(_BYTE **)a2 != 87)
        goto LABEL_66;
      return 1;
    case 2:
      v18 = **(unsigned __int16 **)a2;
      v19 = 14423;
      goto LABEL_52;
    case 3:
      goto LABEL_66;
    case 4:
      v18 = **(_DWORD **)a2;
      v19 = 947216215;
LABEL_52:
      if (v18 == v19)
        return 1;
      goto LABEL_66;
    case 5:
      if (**(_DWORD **)a2 == 828792663 && *(_BYTE *)(*(_QWORD *)a2 + 4) == 54)
        return 1;
      if ((v2 & 0x80) == 0)
      {
        result = 0;
        switch(*((_BYTE *)a2 + 23))
        {
          case 1:
            v4 = *(unsigned __int8 *)a2;
            return v4 == 98;
          case 2:
          case 3:
          case 4:
          case 6:
          case 7:
          case 8:
            return result;
          case 5:
            return *a2 == 828792674 && *((_BYTE *)a2 + 4) == 54;
          case 9:
            goto LABEL_99;
          case 0xA:
            goto LABEL_81;
          default:
            if (v2 != 20)
              return result;
            return *(_QWORD *)a2 == 0x6F635F3233665F62
                && *((_QWORD *)a2 + 1) == 0x646573736572706DLL
                && a2[4] == 909207135;
        }
      }
      goto LABEL_66;
    case 6:
      v6 = *(unsigned __int16 *)(*(_QWORD *)a2 + 4);
      v7 = **(_DWORD **)a2 == 1852399447;
      v8 = 14452;
      goto LABEL_62;
    default:
      if (v5 != 20)
        goto LABEL_66;
      v6 = *(_DWORD *)(*(_QWORD *)a2 + 16);
      v7 = **(_QWORD **)a2 == 0x6F635F3233665F57 && *(_QWORD *)(*(_QWORD *)a2 + 8) == 0x646573736572706DLL;
      v8 = 909207135;
LABEL_62:
      if (v7 && v6 == v8)
        return 1;
LABEL_66:
      if (*((_QWORD *)a2 + 1) != 1)
        goto LABEL_69;
      if (**(_BYTE **)a2 == 98)
        return 1;
      if ((v2 & 0x80) == 0)
        return 0;
LABEL_69:
      if (*((_QWORD *)a2 + 1) != 20)
        goto LABEL_82;
      if (**(_QWORD **)a2 == 0x6F635F3233665F62
        && *(_QWORD *)(*(_QWORD *)a2 + 8) == 0x646573736572706DLL
        && *(_DWORD *)(*(_QWORD *)a2 + 16) == 909207135)
      {
        return 1;
      }
      if ((v2 & 0x80) != 0)
      {
LABEL_82:
        if (*((_QWORD *)a2 + 1) == 5)
        {
          if (**(_DWORD **)a2 == 828792674 && *(_BYTE *)(*(_QWORD *)a2 + 4) == 54)
            return 1;
          if ((v2 & 0x80) == 0)
            return 0;
        }
        if (*((_QWORD *)a2 + 1) != 10)
          goto LABEL_97;
        if (**(_QWORD **)a2 == 0x6E61725F38755F71 && *(_WORD *)(*(_QWORD *)a2 + 8) == 25959)
          return 1;
        if ((v2 & 0x80) != 0)
        {
LABEL_97:
          if (*((_QWORD *)a2 + 1) != 9)
            return 0;
          a2 = *(_DWORD **)a2;
        }
        else if (v2 != 9)
        {
          return 0;
        }
LABEL_99:
        v24 = *((unsigned __int8 *)a2 + 8);
        v25 = *(_QWORD *)a2 == 0x616D6E696D5F3857;
        v26 = 120;
        return v25 && v24 == v26;
      }
      if (v2 == 5)
        return *a2 == 828792674 && *((_BYTE *)a2 + 4) == 54;
      if (v2 == 9)
        goto LABEL_99;
      if (v2 != 10)
        return 0;
LABEL_81:
      v24 = *((unsigned __int16 *)a2 + 4);
      v25 = *(_QWORD *)a2 == 0x6E61725F38755F71;
      v26 = 25959;
      return v25 && v24 == v26;
  }
}

void Espresso::generic_convolution_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string::size_type *v6;
  std::string::size_type v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  uint64_t *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  char v23;
  std::string *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t i;
  void **v41;
  void *v42[2];
  char v43;
  std::string **v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  std::string *v48;
  std::string *v49;
  std::string v50;
  void *v51[2];
  std::string::size_type v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *__p[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[21];
  BOOL v65;
  BOOL v66;
  char v67;
  char v68;
  char *v69;
  std::string *v70;
  unint64_t v71;
  std::string ***v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  __int128 v77;

  *(_QWORD *)&v77 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v42, "convolution");
  v6 = *(std::string::size_type **)(a3 + 16);
  v7 = *v6;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3);
  if (v8 <= 1)
  {
    if (v43 >= 0)
      v41 = v42;
    else
      v41 = (void **)v42[0];
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,char const*,unsigned long>((const char *)v41, v8);
  }
  v9 = **(__int128 ***)(a3 + 8);
  v10 = **(__int128 ***)(a3 + 24);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v11 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v7);
  if (v11)
  {
    Espresso::blob_grad_contrib_name((uint64_t)__p, v7, a3);
    v12 = v70;
    if ((unint64_t)v70 >= v71)
    {
      v14 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v69, (uint64_t)__p);
    }
    else
    {
      if (SBYTE7(v56) < 0)
      {
        std::string::__init_copy_ctor_external(v70, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v13 = *(_OWORD *)__p;
        v70->__r_.__value_.__r.__words[2] = v56;
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v14 = v12 + 1;
    }
    v70 = v14;
    if (SBYTE7(v56) < 0)
      operator delete(__p[0]);
  }
  v15 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v7 + 24);
  if (v15)
  {
    Espresso::blob_grad_contrib_name((uint64_t)__p, v7 + 24, a3);
    v16 = v70;
    if ((unint64_t)v70 >= v71)
    {
      v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v69, (uint64_t)__p);
    }
    else
    {
      if (SBYTE7(v56) < 0)
      {
        std::string::__init_copy_ctor_external(v70, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v17 = *(_OWORD *)__p;
        v70->__r_.__value_.__r.__words[2] = v56;
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      v18 = v16 + 1;
    }
    v70 = v18;
    if (SBYTE7(v56) < 0)
      operator delete(__p[0]);
  }
  v19 = **(_QWORD **)(a3 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - v19) >> 3) >= 3
    && (v20 = v19 + 48,
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v19 + 48)))
  {
    Espresso::blob_grad_contrib_name((uint64_t)__p, v20, a3);
    v21 = v70;
    if ((unint64_t)v70 >= v71)
    {
      v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v69, (uint64_t)__p);
    }
    else
    {
      if (SBYTE7(v56) < 0)
      {
        std::string::__init_copy_ctor_external(v70, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v22 = *(_OWORD *)__p;
        v70->__r_.__value_.__r.__words[2] = v56;
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      v24 = v21 + 1;
    }
    v70 = v24;
    if (SBYTE7(v56) < 0)
      operator delete(__p[0]);
    v23 = 1;
  }
  else
  {
    v23 = 0;
  }
  v68 = 0;
  v25 = *(_OWORD *)(a1 + 448);
  v63 = *(_OWORD *)(a1 + 432);
  *(_OWORD *)v64 = v25;
  *(_QWORD *)&v64[13] = *(_QWORD *)(a1 + 461);
  v26 = *(_OWORD *)(a1 + 384);
  v59 = *(_OWORD *)(a1 + 368);
  v60 = v26;
  v27 = *(_OWORD *)(a1 + 416);
  v61 = *(_OWORD *)(a1 + 400);
  v62 = v27;
  v28 = *(_OWORD *)(a1 + 320);
  *(_OWORD *)__p = *(_OWORD *)(a1 + 304);
  v56 = v28;
  v29 = *(_OWORD *)(a1 + 352);
  v57 = *(_OWORD *)(a1 + 336);
  v58 = v29;
  v65 = v11 != 0;
  v66 = v15 != 0;
  v67 = v23;
  std::operator+<char>();
  v30 = std::string::append(&v50, "_grad");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v52 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)v51 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = *(_QWORD *)a3;
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v33 = *v9;
    v73.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v33;
  }
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
  }
  else
  {
    v34 = *(_OWORD *)v7;
    v74.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v34;
  }
  if (*(char *)(v7 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)(v7 + 24), *(_QWORD *)(v7 + 32));
  }
  else
  {
    v35 = *(_OWORD *)(v7 + 24);
    v75.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 40);
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v35;
  }
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v36 = *v10;
    v76.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v36;
  }
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v44 = &v47;
  LOBYTE(v45) = 0;
  v47 = (std::string *)operator new(0x60uLL);
  v48 = v47;
  v49 = v47 + 4;
  v48 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v49, (__int128 *)&v73, &v77, v47);
  v45 = 0;
  v46 = 0;
  v44 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v44, (uint64_t)v69, (uint64_t)v70, 0xAAAAAAAAAAAAAAABLL * (((char *)v70 - v69) >> 3));
  Espresso::sequential_builder::add<Espresso::fused_convolution_grad_params_t>(&v53, a2, (uint64_t)v51, v32, (uint64_t)__p, (uint64_t)v47, (uint64_t)v48, (uint64_t *)&v44);
  v37 = v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v72 = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  v72 = (std::string ***)&v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v76.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v76.__r_.__value_.__l.__data_ + i * 8));
  }
  if (SHIBYTE(v52) < 0)
    operator delete(v51[0]);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  __p[0] = &v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v43 < 0)
    operator delete(v42[0]);
}

void sub_19166612C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  uint64_t v42;

  *(_QWORD *)(v42 - 216) = v41;
  if (a41 < 0)
    operator delete(__p);
  *(_QWORD *)(v42 - 192) = v42 - 224;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 192));
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_meta_convolution_kernel::kernel_type_str(Espresso::generic_meta_convolution_kernel *this)
{
  return "meta_convolution";
}

void Espresso::generic_convolution_kernel::set_weights()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not implemented");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1916662C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double Espresso::generic_convolution_kernel::weights_blob_shape@<D0>(Espresso::generic_convolution_kernel *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  double result;

  v2 = *((_DWORD *)this + 114);
  if (v2 <= 1)
    v2 = 1;
  v3 = *((_DWORD *)this + 105);
  if (v3 <= 1)
    v3 = 1;
  v4 = *((_DWORD *)this + 87) / v3;
  v5 = *((_DWORD *)this + 86) * v2;
  v6 = *((_DWORD *)this + 106);
  if (v6 <= 1)
    v6 = 1;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)a2 = *((_QWORD *)this + 44);
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v5 * v6;
  result = NAN;
  *(_QWORD *)(a2 + 16) = 0xFFFFFFFF00000001;
  return result;
}

void Espresso::generic_convolution_kernel::create_shuffled_weights_blob(Espresso::generic_convolution_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  int v3;
  BOOL v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v2 = *((_DWORD *)this + 105);
  if (v2 <= 1)
    v2 = 1;
  v3 = *((_DWORD *)this + 87) / v2;
  v5 = v3 - 1;
  v4 = v3 < 1;
  v6 = v3 + 2;
  if (!v4)
    v6 = v5;
  v7 = (v6 >> 2) + 1;
  v8 = *((_DWORD *)this + 106);
  if (v8 <= 1)
    v8 = 1;
  v9 = v8 * *((_DWORD *)this + 86);
  v10 = v9 - 1;
  v4 = v9 < 1;
  v11 = v9 + 2;
  if (!v4)
    v11 = v10;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,6>,std::allocator<Espresso::blob<float,6>>,int &,int &,int &,int &,int &,int &,void>(a2, 4, 4, *((_DWORD *)this + 88), *((_DWORD *)this + 89), v7, (v11 >> 2) + 1);
}

void Espresso::generic_convolution_kernel::create_quantized_weights_blob(Espresso::generic_convolution_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  int v3;
  int v4;

  v2 = *((_DWORD *)this + 105);
  if (v2 <= 1)
    v2 = 1;
  v3 = *((_DWORD *)this + 87) / v2;
  v4 = *((_DWORD *)this + 106);
  if (v4 <= 1)
    v4 = 1;
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 88), *((_DWORD *)this + 89), v3, v4 * *((_DWORD *)this + 86));
}

void Espresso::generic_convolution_kernel::create_quantization_lut_blob(_QWORD *a1@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a1, 256, 1, 1, 1);
}

void Espresso::generic_convolution_kernel::create_quantization_ranges_blob(Espresso::generic_convolution_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a2, 2 * *((_DWORD *)this + 86), 1, 1, 1);
}

void Espresso::generic_convolution_kernel::get_quantization_lut_shape(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 256;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = 1;
}

void Espresso::generic_convolution_kernel::get_shuffled_weights_shape(Espresso::generic_convolution_kernel *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = *((_DWORD *)this + 105);
  if (v4 <= 1)
    v4 = 1;
  v5 = *((_DWORD *)this + 87) / v4;
  v7 = v5 - 1;
  v6 = v5 < 1;
  v8 = v5 + 2;
  if (!v6)
    v8 = v7;
  v9 = (v8 >> 2) + 1;
  v10 = *((_DWORD *)this + 106);
  if (v10 <= 1)
    v10 = 1;
  v11 = v10 * *((_DWORD *)this + 86);
  v12 = v11 - 1;
  v6 = v11 < 1;
  v13 = v11 + 2;
  if (!v6)
    v13 = v12;
  v14 = (v13 >> 2) + 1;
  v15 = operator new(0x18uLL);
  v16 = *((_QWORD *)this + 44);
  *v15 = 0x400000004;
  v15[1] = v16;
  *((_DWORD *)v15 + 4) = v9;
  *((_DWORD *)v15 + 5) = v14;
  *(_OWORD *)a2 = *(_OWORD *)v15;
  *(_DWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 20) = 6;
  operator delete(v15);
}

void Espresso::generic_convolution_kernel::set_f16_weights(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  vImagePixelCount v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  vImage_Buffer dest;
  vImage_Buffer src;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v31, *a2 + 8);
  v6 = 0;
  v7 = *a2;
  v8 = *(void **)(*a2 + 24);
  v9 = v31;
  v10 = *(void **)(v31 + 24);
  v11 = *(int *)(v7 + 8);
  v12 = v7 + 12;
  do
  {
    v11 *= *(int *)(v12 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  src.data = v8;
  src.height = 1;
  src.width = v11;
  src.rowBytes = 2 * v11;
  dest.data = v10;
  dest.height = 1;
  dest.width = v11;
  dest.rowBytes = 4 * v11;
  vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  v29 = v9;
  v30 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (std::__shared_weak_count *)a3[1];
  v27 = *a3;
  v28 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 424))(a1, &v29, &v27);
  v18 = v28;
  if (v28)
  {
    v19 = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v30;
  if (v30)
  {
    v22 = (unint64_t *)&v30->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v32;
  if (v32)
  {
    v25 = (unint64_t *)&v32->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19166666C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::generic_convolution_kernel::dequantized_weights_from_ranges@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float *v14;
  uint64_t v15;
  unsigned int v16;

  if (this[63] && (v3 = this, this[65]))
  {
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 472))(this);
    v4 = *((unsigned int *)v3 + 86);
    if ((int)v4 >= 1)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = *a2;
      v9 = *(int *)(*a2 + 12) * (uint64_t)*(int *)(*a2 + 8) * *(int *)(*a2 + 16);
      v10 = *(_QWORD *)(v3[63] + 16);
      v11 = (*(_DWORD *)(*a2 + 12) * *(_DWORD *)(*a2 + 8) * *(_DWORD *)(*a2 + 16));
      do
      {
        if ((int)v11 >= 1)
        {
          v12 = *(float *)(v10 + 4 * v7);
          v13 = *(float *)(v10 + 4 * (v7 + v4)) - v12;
          v14 = (float *)(*(_QWORD *)(v8 + 24) + v6);
          this = (_QWORD *)(*(_QWORD *)(v3[65] + 24) + v5);
          v15 = v11;
          do
          {
            v16 = *(unsigned __int8 *)this;
            this = (_QWORD *)((char *)this + 1);
            *v14++ = v12 + (float)((float)((float)v16 * 0.0039216) * v13);
            --v15;
          }
          while (v15);
        }
        ++v7;
        v6 += 4 * v9;
        v5 += v9;
      }
      while (v7 != v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void Espresso::generic_convolution_kernel::create_weights_fp16_blob(Espresso::generic_convolution_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  void *__p;
  void *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 464))(&v3);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,Espresso::blob<unsigned short,4>::UnitializedBlobType,void>(a2, v3, SHIDWORD(v3), v4, v6 * v5);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_1916667E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,char const*,unsigned long>(const char *a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::unsupported_configuration_error>("%s needs at least 2 inputs for gradients, got %zu", a1, a2);
}

std::string *Espresso::blob_grad_contrib_name(uint64_t a1, std::string::size_type a2, uint64_t a3)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  uint64_t **v13;
  uint64_t **v14;
  char **v15;
  std::string *v16;
  std::string *result;
  std::string __p;
  std::string v19;

  if (*(char *)(a2 + 23) >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = &v19;
  std::string::basic_string[abi:ne180100]((uint64_t)&v19, v6 + 6);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*(char *)(a2 + 23) >= 0)
      v8 = (const void *)a2;
    else
      v8 = *(const void **)a2;
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "/grad@");
  std::to_string(&__p, *(_QWORD *)(a3 + 48));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)a1 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  v13 = *(uint64_t ***)(a3 + 32);
  v19.__r_.__value_.__r.__words[0] = a2;
  v14 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v19);
  v15 = (char **)(v14 + 7);
  v16 = (std::string *)v14[8];
  if (v16 >= (std::string *)v14[9])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v15, a1);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v15, (__int128 *)a1);
    result = v16 + 1;
  }
  v14[8] = (uint64_t *)result;
  return result;
}

void sub_191666984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add<Espresso::fused_convolution_grad_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_191666BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,4>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, int a9, int a10, char a11)
{
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::runtime_error *exception;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = *a6;
  v19 = a6[1];
  v48 = *a6;
  v49 = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *a1 = 0;
  a1[1] = 0;
  if (!*(_BYTE *)(a2 + 73))
  {
LABEL_11:
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(&v55, a7, a8, a9, a10);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v55);
    size = (std::__shared_weak_count *)v55.__r_.__value_.__l.__size_;
    if (v55.__r_.__value_.__l.__size_)
    {
      v23 = (unint64_t *)(v55.__r_.__value_.__l.__size_ + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v25 = 0;
    v26 = *(int *)(*a1 + 8);
    do
    {
      v26 *= *(int *)(*a1 + 12 + v25);
      v25 += 4;
    }
    while (v25 != 12);
    if (a5 != 2 * v26)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v52, a5);
      v38 = std::string::insert(&v52, 0, "Unexpected size s=");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      v40 = std::string::append(&v53, "/blob=");
      v41 = 0;
      v42 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v42;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      v43 = *(int *)(*a1 + 8);
      do
      {
        v43 *= *(int *)(*a1 + 12 + v41);
        v41 += 4;
      }
      while (v41 != 12);
      std::to_string(&v51, 2 * v43);
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &v51;
      else
        v44 = (std::string *)v51.__r_.__value_.__r.__words[0];
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
      else
        v45 = v51.__r_.__value_.__l.__size_;
      v46 = std::string::append(&v54, (const std::string::value_type *)v44, v45);
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v55);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*a1 + 24), a4, a5);
    v27 = (std::__shared_weak_count *)v49;
    if (!v49)
      goto LABEL_32;
LABEL_28:
    v33 = (unint64_t *)&v27->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    goto LABEL_32;
  }
  if (!v18 || (a11 & 1) != 0)
  {
    if (!v18)
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(a2 + 123))
  {
    goto LABEL_11;
  }
  v28 = operator new(0x60uLL);
  v28[1] = 0;
  v28[2] = 0;
  v28[3] = &off_1E2DA1410;
  *v28 = &off_1E2DBF060;
  *((_OWORD *)v28 + 4) = 0u;
  *((_OWORD *)v28 + 5) = 0u;
  *((_DWORD *)v28 + 8) = a7;
  *((_DWORD *)v28 + 9) = a8;
  *((_DWORD *)v28 + 10) = a9;
  *((_DWORD *)v28 + 11) = a10;
  v28[6] = a4;
  *((_BYTE *)v28 + 56) = 0;
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v28 + 3);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v55);
  v29 = (std::__shared_weak_count *)v55.__r_.__value_.__l.__size_;
  if (v55.__r_.__value_.__l.__size_)
  {
    v30 = (unint64_t *)(v55.__r_.__value_.__l.__size_ + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (_QWORD *)(*a1 + 40);
  v27 = (std::__shared_weak_count *)v49;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v32, v48, v49);
  if (v49)
    goto LABEL_28;
LABEL_32:
  if (a3)
  {
    v35 = (unint64_t *)&a3->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_191666FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void *v38;
  int v39;
  uint64_t v40;

  if (*(char *)(v40 - 73) < 0)
    operator delete(*(void **)(v40 - 96));
  if (a18 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v39 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v38);
  goto LABEL_14;
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,4>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, int a9, int a10, char a11)
{
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::runtime_error *exception;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  uint64_t v41;
  __int128 v42;
  unint64_t v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = *a6;
  v19 = a6[1];
  v48 = *a6;
  v49 = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *a1 = 0;
  a1[1] = 0;
  if (!*(_BYTE *)(a2 + 73))
  {
LABEL_11:
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,void>(&v55, a7, a8, a9, a10);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v55);
    size = (std::__shared_weak_count *)v55.__r_.__value_.__l.__size_;
    if (v55.__r_.__value_.__l.__size_)
    {
      v23 = (unint64_t *)(v55.__r_.__value_.__l.__size_ + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v25 = 0;
    v26 = *(int *)(*a1 + 8);
    do
    {
      v26 *= *(int *)(*a1 + 12 + v25);
      v25 += 4;
    }
    while (v25 != 12);
    if (v26 != a5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v52, a5);
      v38 = std::string::insert(&v52, 0, "Unexpected size s=");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      v40 = std::string::append(&v53, "/blob=");
      v41 = 0;
      v42 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v42;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      v43 = *(int *)(*a1 + 8);
      do
      {
        v43 *= *(int *)(*a1 + 12 + v41);
        v41 += 4;
      }
      while (v41 != 12);
      std::to_string(&v51, v43);
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &v51;
      else
        v44 = (std::string *)v51.__r_.__value_.__r.__words[0];
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
      else
        v45 = v51.__r_.__value_.__l.__size_;
      v46 = std::string::append(&v54, (const std::string::value_type *)v44, v45);
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v55);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*a1 + 24), a4, a5);
    v27 = (std::__shared_weak_count *)v49;
    if (!v49)
      goto LABEL_32;
LABEL_28:
    v33 = (unint64_t *)&v27->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    goto LABEL_32;
  }
  if (!v18 || (a11 & 1) != 0)
  {
    if (!v18)
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(a2 + 123))
  {
    goto LABEL_11;
  }
  v28 = operator new(0x60uLL);
  v28[1] = 0;
  v28[2] = 0;
  v28[3] = &off_1E2DA12B0;
  *v28 = &off_1E2DBEDF8;
  *((_OWORD *)v28 + 4) = 0u;
  *((_OWORD *)v28 + 5) = 0u;
  *((_DWORD *)v28 + 8) = a7;
  *((_DWORD *)v28 + 9) = a8;
  *((_DWORD *)v28 + 10) = a9;
  *((_DWORD *)v28 + 11) = a10;
  v28[6] = a4;
  *((_BYTE *)v28 + 56) = 0;
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v28 + 3);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v55);
  v29 = (std::__shared_weak_count *)v55.__r_.__value_.__l.__size_;
  if (v55.__r_.__value_.__l.__size_)
  {
    v30 = (unint64_t *)(v55.__r_.__value_.__l.__size_ + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (_QWORD *)(*a1 + 40);
  v27 = (std::__shared_weak_count *)v49;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v32, v48, v49);
  if (v49)
    goto LABEL_28;
LABEL_32:
  if (a3)
  {
    v35 = (unint64_t *)&a3->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_19166740C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void *v38;
  int v39;
  uint64_t v40;

  if (*(char *)(v40 - 73) < 0)
    operator delete(*(void **)(v40 - 96));
  if (a18 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v39 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v38);
  goto LABEL_14;
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, char a8)
{
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::runtime_error *exception;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a6;
  v15 = a6[1];
  v40 = *a6;
  v41 = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *a1 = 0;
  a1[1] = 0;
  if (!*(_BYTE *)(a2 + 73))
  {
LABEL_11:
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,1>,std::allocator<Espresso::blob<unsigned short,1>>,int &,int &,int &,int &,void>(&v47, a7, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v47);
    size = (std::__shared_weak_count *)v47.__r_.__value_.__l.__size_;
    if (v47.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(v47.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 2 * *(int *)(*a1 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      v32 = std::string::insert(&v44, 0, "Unexpected size s=");
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      v34 = std::string::append(&v45, "/blob=");
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 2 * *(int *)(*a1 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v43;
      else
        v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      else
        v37 = v43.__r_.__value_.__l.__size_;
      v38 = std::string::append(&v46, (const std::string::value_type *)v36, v37);
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v47);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*a1 + 16), a4, a5);
    v21 = (std::__shared_weak_count *)v41;
    if (!v41)
      goto LABEL_30;
LABEL_26:
    v27 = (unint64_t *)&v21->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    goto LABEL_30;
  }
  if (!v14 || (a8 & 1) != 0)
  {
    if (!v14)
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(a2 + 123))
  {
    goto LABEL_11;
  }
  v22 = (char *)operator new(0x58uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_1E2DBEFB8;
  *((_QWORD *)v22 + 3) = &off_1E2DA13B0;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_OWORD *)(v22 + 72) = 0u;
  *((_DWORD *)v22 + 8) = a7;
  *((_QWORD *)v22 + 5) = a4;
  v22[48] = 0;
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)(v22 + 24);
  v47.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v47);
  v23 = (std::__shared_weak_count *)v47.__r_.__value_.__l.__size_;
  if (v47.__r_.__value_.__l.__size_)
  {
    v24 = (unint64_t *)(v47.__r_.__value_.__l.__size_ + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (_QWORD *)(*a1 + 32);
  v21 = (std::__shared_weak_count *)v41;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v26, v40, v41);
  if (v41)
    goto LABEL_26;
LABEL_30:
  if (a3)
  {
    v29 = (unint64_t *)&a3->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_191667804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  void *v31;
  int v32;
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 73) < 0)
    operator delete(*(void **)(v33 - 96));
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v32 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v31);
  goto LABEL_14;
}

uint64_t Espresso::generic_dynamic_dequantize_kernel::top_shapes_for_bottom_shapes@<X0>(__int128 **a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a2, *a1);
  a2[1] = result;
  return result;
}

void sub_191667920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *Espresso::generic_dynamic_dequantize_kernel::__set_weight_raw_blob(void *result, uint64_t a2, _BYTE *a3, const void *a4, unint64_t a5)
{
  void *v7;
  unint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::runtime_error *v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::runtime_error *v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  __int128 v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::runtime_error *v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  const std::string::value_type *v84;
  std::string::size_type v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  __int128 v89;
  const std::string::value_type *v90;
  std::string::size_type v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  std::string::size_type v95;
  std::string *v96;
  __int128 v97;
  uint64_t v99;
  std::__shared_weak_count *size;
  unint64_t *v101;
  unint64_t v102;
  std::runtime_error *exception;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  std::string::size_type v109;
  std::string *v110;
  __int128 v111;
  const std::string::value_type *v112;
  std::string::size_type v113;
  std::string *v114;
  __int128 v115;
  std::string *v116;
  __int128 v117;
  const std::string::value_type *v118;
  std::string::size_type v119;
  std::string *v120;
  __int128 v121;
  std::string *v122;
  std::string::size_type v123;
  std::string *v124;
  __int128 v125;
  std::string v126;
  const std::string::value_type *v127;
  std::string::size_type v128;
  unsigned __int8 v129;
  const std::string::value_type *v130;
  std::string::size_type v131;
  unsigned __int8 v132;
  std::string v133;
  std::string v134;
  std::string v135;
  std::string v136;
  std::string v137;
  std::string v138;
  std::string v139;
  std::string v140;
  std::string v141;

  v7 = result;
  v8 = (unint64_t)(int)a5 >> 2;
  if (((char)a3[23] & 0x80000000) == 0)
  {
    v9 = a3[23];
    if (v9 != 5)
    {
      if (v9 != 6)
      {
        if (v9 != 9)
          return result;
        if (*(_QWORD *)a3 != 0x6D75735F776F7251 || a3[8] != 115)
          return result;
        goto LABEL_19;
      }
      goto LABEL_57;
    }
    if (*(_DWORD *)a3 != 1634296401 || a3[4] != 115)
      return result;
LABEL_133:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v141, v8, 1, 1, 1);
    v99 = (uint64_t)v7 + 328;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v99, (__int128 *)&v141);
    size = (std::__shared_weak_count *)v141.__r_.__value_.__l.__size_;
    if (v141.__r_.__value_.__l.__size_)
    {
      v101 = (unint64_t *)(v141.__r_.__value_.__l.__size_ + 8);
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v17 = *(_QWORD *)v99;
    if (a5 != 4 * *(int *)(*(_QWORD *)v99 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v134, a5);
      v104 = std::string::insert(&v134, 0, "Unexpected size s=");
      v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
      v135.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v105;
      v104->__r_.__value_.__l.__size_ = 0;
      v104->__r_.__value_.__r.__words[2] = 0;
      v104->__r_.__value_.__r.__words[0] = 0;
      v106 = std::string::append(&v135, "/blob=");
      v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v136.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0;
      v106->__r_.__value_.__r.__words[2] = 0;
      v106->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v133, 4 * *(int *)(*(_QWORD *)v99 + 8));
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v108 = &v133;
      else
        v108 = (std::string *)v133.__r_.__value_.__r.__words[0];
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v109 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      else
        v109 = v133.__r_.__value_.__l.__size_;
      v110 = std::string::append(&v136, (const std::string::value_type *)v108, v109);
      v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v137.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0;
      v110->__r_.__value_.__r.__words[2] = 0;
      v110->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v130, " @ ");
      if ((v132 & 0x80u) == 0)
        v112 = (const std::string::value_type *)&v130;
      else
        v112 = v130;
      if ((v132 & 0x80u) == 0)
        v113 = v132;
      else
        v113 = v131;
      v114 = std::string::append(&v137, v112, v113);
      v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
      v138.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v115;
      v114->__r_.__value_.__l.__size_ = 0;
      v114->__r_.__value_.__r.__words[2] = 0;
      v114->__r_.__value_.__r.__words[0] = 0;
      v116 = std::string::append(&v138, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
      v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0;
      v116->__r_.__value_.__r.__words[2] = 0;
      v116->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v127, ":");
      if ((v129 & 0x80u) == 0)
        v118 = (const std::string::value_type *)&v127;
      else
        v118 = v127;
      if ((v129 & 0x80u) == 0)
        v119 = v129;
      else
        v119 = v128;
      v120 = std::string::append(&v139, v118, v119);
      v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v121;
      v120->__r_.__value_.__l.__size_ = 0;
      v120->__r_.__value_.__r.__words[2] = 0;
      v120->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v126, 7085);
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v122 = &v126;
      else
        v122 = (std::string *)v126.__r_.__value_.__r.__words[0];
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v123 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
      else
        v123 = v126.__r_.__value_.__l.__size_;
      v124 = std::string::append(&v140, (const std::string::value_type *)v122, v123);
      v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
      v141.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v125;
      v124->__r_.__value_.__l.__size_ = 0;
      v124->__r_.__value_.__r.__words[2] = 0;
      v124->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v141);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(v17 + 16), a4, a5);
  }
  v11 = *((_QWORD *)a3 + 1);
  if (v11 == 5)
  {
    if (**(_DWORD **)a3 != 1634296401 || *(_BYTE *)(*(_QWORD *)a3 + 4) != 115)
      return result;
    goto LABEL_133;
  }
  if (v11 == 6)
  {
    a3 = *(_BYTE **)a3;
LABEL_57:
    if (*(_DWORD *)a3 == 1633907537 && *((_WORD *)a3 + 2) == 25964)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v141, v8, 1, 1, 1);
      v71 = (uint64_t)v7 + 312;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v71, (__int128 *)&v141);
      v72 = (std::__shared_weak_count *)v141.__r_.__value_.__l.__size_;
      if (v141.__r_.__value_.__l.__size_)
      {
        v73 = (unint64_t *)(v141.__r_.__value_.__l.__size_ + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v17 = *(_QWORD *)v71;
      if (a5 != 4 * *(int *)(*(_QWORD *)v71 + 8))
      {
        v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v134, a5);
        v76 = std::string::insert(&v134, 0, "Unexpected size s=");
        v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        v135.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v77;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        v76->__r_.__value_.__r.__words[0] = 0;
        v78 = std::string::append(&v135, "/blob=");
        v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
        v136.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v79;
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v133, 4 * *(int *)(*(_QWORD *)v71 + 8));
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v80 = &v133;
        else
          v80 = (std::string *)v133.__r_.__value_.__r.__words[0];
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
        else
          v81 = v133.__r_.__value_.__l.__size_;
        v82 = std::string::append(&v136, (const std::string::value_type *)v80, v81);
        v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
        v137.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v83;
        v82->__r_.__value_.__l.__size_ = 0;
        v82->__r_.__value_.__r.__words[2] = 0;
        v82->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v130, " @ ");
        if ((v132 & 0x80u) == 0)
          v84 = (const std::string::value_type *)&v130;
        else
          v84 = v130;
        if ((v132 & 0x80u) == 0)
          v85 = v132;
        else
          v85 = v131;
        v86 = std::string::append(&v137, v84, v85);
        v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v138.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        v88 = std::string::append(&v138, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
        v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        v139.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v89;
        v88->__r_.__value_.__l.__size_ = 0;
        v88->__r_.__value_.__r.__words[2] = 0;
        v88->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v127, ":");
        if ((v129 & 0x80u) == 0)
          v90 = (const std::string::value_type *)&v127;
        else
          v90 = v127;
        if ((v129 & 0x80u) == 0)
          v91 = v129;
        else
          v91 = v128;
        v92 = std::string::append(&v139, v90, v91);
        v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
        v140.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v93;
        v92->__r_.__value_.__l.__size_ = 0;
        v92->__r_.__value_.__r.__words[2] = 0;
        v92->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v126, 7082);
        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v94 = &v126;
        else
          v94 = (std::string *)v126.__r_.__value_.__r.__words[0];
        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v95 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
        else
          v95 = v126.__r_.__value_.__l.__size_;
        v96 = std::string::append(&v140, (const std::string::value_type *)v94, v95);
        v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        v141.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v75, &v141);
        __cxa_throw(v75, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      return memcpy(*(void **)(v17 + 16), a4, a5);
    }
    if (*(_DWORD *)a3 == 1935763810 && *((_WORD *)a3 + 2) == 29541)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v141, v8, 1, 1, 1);
      v44 = (uint64_t)v7 + 360;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v44, (__int128 *)&v141);
      v45 = (std::__shared_weak_count *)v141.__r_.__value_.__l.__size_;
      if (v141.__r_.__value_.__l.__size_)
      {
        v46 = (unint64_t *)(v141.__r_.__value_.__l.__size_ + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v17 = *(_QWORD *)v44;
      if (a5 != 4 * *(int *)(*(_QWORD *)v44 + 8))
      {
        v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v134, a5);
        v49 = std::string::insert(&v134, 0, "Unexpected size s=");
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v135.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        v51 = std::string::append(&v135, "/blob=");
        v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v136.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v133, 4 * *(int *)(*(_QWORD *)v44 + 8));
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v133;
        else
          v53 = (std::string *)v133.__r_.__value_.__r.__words[0];
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
        else
          v54 = v133.__r_.__value_.__l.__size_;
        v55 = std::string::append(&v136, (const std::string::value_type *)v53, v54);
        v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        v137.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v130, " @ ");
        if ((v132 & 0x80u) == 0)
          v57 = (const std::string::value_type *)&v130;
        else
          v57 = v130;
        if ((v132 & 0x80u) == 0)
          v58 = v132;
        else
          v58 = v131;
        v59 = std::string::append(&v137, v57, v58);
        v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
        v138.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v60;
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        v61 = std::string::append(&v138, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
        v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v139.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v127, ":");
        if ((v129 & 0x80u) == 0)
          v63 = (const std::string::value_type *)&v127;
        else
          v63 = v127;
        if ((v129 & 0x80u) == 0)
          v64 = v129;
        else
          v64 = v128;
        v65 = std::string::append(&v139, v63, v64);
        v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        v140.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v126, 7091);
        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = &v126;
        else
          v67 = (std::string *)v126.__r_.__value_.__r.__words[0];
        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
        else
          v68 = v126.__r_.__value_.__l.__size_;
        v69 = std::string::append(&v140, (const std::string::value_type *)v67, v68);
        v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        v141.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v48, &v141);
        __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      return memcpy(*(void **)(v17 + 16), a4, a5);
    }
    return result;
  }
  if (v11 == 9 && **(_QWORD **)a3 == 0x6D75735F776F7251 && *(_BYTE *)(*(_QWORD *)a3 + 8) == 115)
  {
LABEL_19:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v141, v8, 1, 1, 1);
    v13 = (uint64_t)v7 + 344;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v13, (__int128 *)&v141);
    v14 = (std::__shared_weak_count *)v141.__r_.__value_.__l.__size_;
    if (v141.__r_.__value_.__l.__size_)
    {
      v15 = (unint64_t *)(v141.__r_.__value_.__l.__size_ + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *(_QWORD *)v13;
    if (a5 != 4 * *(int *)(*(_QWORD *)v13 + 8))
    {
      v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v134, a5);
      v19 = std::string::insert(&v134, 0, "Unexpected size s=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v135.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v135, "/blob=");
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v136.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v133, 4 * *(int *)(*(_QWORD *)v13 + 8));
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v133;
      else
        v23 = (std::string *)v133.__r_.__value_.__r.__words[0];
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      else
        v24 = v133.__r_.__value_.__l.__size_;
      v25 = std::string::append(&v136, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v137.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v130, " @ ");
      if ((v132 & 0x80u) == 0)
        v27 = (const std::string::value_type *)&v130;
      else
        v27 = v130;
      if ((v132 & 0x80u) == 0)
        v28 = v132;
      else
        v28 = v131;
      v29 = std::string::append(&v137, v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v138.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      v31 = std::string::append(&v138, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v127, ":");
      if ((v129 & 0x80u) == 0)
        v33 = (const std::string::value_type *)&v127;
      else
        v33 = v127;
      if ((v129 & 0x80u) == 0)
        v34 = v129;
      else
        v34 = v128;
      v35 = std::string::append(&v139, v33, v34);
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v126, 7088);
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v126;
      else
        v37 = (std::string *)v126.__r_.__value_.__r.__words[0];
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
      else
        v38 = v126.__r_.__value_.__l.__size_;
      v39 = std::string::append(&v140, (const std::string::value_type *)v37, v38);
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v141.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v18, &v141);
      __cxa_throw(v18, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(v17 + 16), a4, a5);
  }
  return result;
}

void sub_191668448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  char v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  if ((v60 & 1) != 0)
    __cxa_free_exception(v59);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::generic_dynamic_dequantize_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v9;

  if (*((char *)a2 + 23) < 0)
  {
    v5 = a2[1];
    switch(v5)
    {
      case 5:
        v6 = *(unsigned __int8 *)(*a2 + 4);
        v7 = *(_DWORD *)*a2 == 1634296401;
        break;
      case 6:
        a2 = (uint64_t *)*a2;
        goto LABEL_18;
      case 9:
        v6 = *(unsigned __int8 *)(*a2 + 8);
        v7 = *(_QWORD *)*a2 == 0x6D75735F776F7251;
        break;
      default:
        return 0;
    }
    return v7 && v6 == 115;
  }
  v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 == 5)
  {
    v3 = *((unsigned __int8 *)a2 + 4);
    v4 = *(_DWORD *)a2 == 1634296401;
    goto LABEL_12;
  }
  if (v2 == 6)
  {
LABEL_18:
    if (*(_DWORD *)a2 == 1633907537 && *((_WORD *)a2 + 2) == 25964)
      return 1;
    v3 = *((unsigned __int16 *)a2 + 2);
    v4 = *(_DWORD *)a2 == 1935763810;
    v9 = 29541;
    return v4 && v3 == v9;
  }
  if (v2 != 9)
    return 0;
  v3 = *((unsigned __int8 *)a2 + 8);
  v4 = *a2 == 0x6D75735F776F7251;
LABEL_12:
  v9 = 115;
  return v4 && v3 == v9;
}

uint64_t Espresso::generic_dynamic_dequantize_kernel::get_output_to_input_blob_aliases@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  return std::unordered_map<int,int>::unordered_map(a1, (int *)v3, 1);
}

void Espresso::generic_load_global_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, char **a3)
{
  uint64_t v6;
  char *v8;
  size_t v9;
  void *p_p;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  char *v21;
  size_t v22;
  void *v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char v33;
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::string v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  uint64_t v42[3];
  void *v43[3];
  void *__p;
  std::string *v45;
  std::string *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::string v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  std::string __str;
  void **v55;
  std::string v56;
  __int128 v57;

  *(_QWORD *)&v57 = *MEMORY[0x1E0C80C00];
  Espresso::global_grad_name((uint64_t)&__str, (const void **)(a1 + 280));
  if (!*(_BYTE *)(a1 + 304))
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("non array mode load global grad");
  v6 = *(unsigned int *)(a1 + 332);
  if ((_DWORD)v6)
  {
    if ((_DWORD)v6 != 7 && (_DWORD)v6 != 5)
      Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("non array op %d", v6);
    memset(&v49, 0, sizeof(v49));
    v51 = xmmword_191A8AA80;
    v52 = 0x100000001;
    v50 = 1;
    v53 = 0;
    std::string::operator=(&v49, &__str);
    std::string::basic_string[abi:ne180100]<0>(&v37, "store_global");
    v8 = *a3;
    if ((*a3)[23] >= 0)
      v9 = (*a3)[23];
    else
      v9 = *((_QWORD *)*a3 + 1);
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v9 + 5);
    if (SHIBYTE(v46) < 0)
      p_p = __p;
    if (v9)
    {
      if (v8[23] >= 0)
        v11 = v8;
      else
        v11 = *(char **)v8;
      memmove(p_p, v11, v9);
    }
    strcpy((char *)p_p + v9, "_init");
    memset(v43, 0, sizeof(v43));
    memset(v42, 0, sizeof(v42));
    Espresso::sequential_builder::add<Espresso::store_global_params_t>(&v47, a2, (uint64_t)&v37, (uint64_t)&__p, (uint64_t)&v49, 0, 0, v42);
    v12 = v48;
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    if (SHIBYTE(v46) < 0)
      operator delete(__p);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    memset(&v37, 0, sizeof(v37));
    v39 = xmmword_191A8AA80;
    v40 = 0x100000001;
    v38 = 1;
    v41 = 6;
    std::string::operator=(&v37, &__str);
    v15 = *(__int128 **)a3[1];
    if (*((char *)v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
    }
    else
    {
      v16 = *v15;
      v56.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v16;
    }
    __p = 0;
    v45 = 0;
    v46 = 0;
    v32 = &__p;
    v33 = 0;
    __p = operator new(0x18uLL);
    v45 = (std::string *)__p;
    v46 = (std::string *)((char *)__p + 24);
    v45 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v46, (__int128 *)&v56, &v57, (std::string *)__p);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (*(_DWORD *)(a1 + 332) == 5)
    {
      v41 = 4;
      v17 = *(_QWORD *)a3[2];
      v18 = v45;
      if (v45 >= v46)
      {
        v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&__p, v17);
      }
      else
      {
        if (*(char *)(v17 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v45, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
        }
        else
        {
          v19 = *(_OWORD *)v17;
          v45->__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        }
        v20 = v18 + 1;
      }
      v45 = v20;
    }
    std::string::basic_string[abi:ne180100]<0>(&v56, "store_global");
    v21 = *a3;
    if ((*a3)[23] >= 0)
      v22 = (*a3)[23];
    else
      v22 = *((_QWORD *)*a3 + 1);
    v23 = &v32;
    std::string::basic_string[abi:ne180100]((uint64_t)&v32, v22 + 8);
    if (v34 < 0)
      v23 = v32;
    if (v22)
    {
      if (v21[23] >= 0)
        v24 = v21;
      else
        v24 = *(char **)v21;
      memmove(v23, v24, v22);
    }
    strcpy((char *)v23 + v22, "_scatter");
    v29 = 0;
    v30 = 0;
    v31 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, (uint64_t)__p, (uint64_t)v45, 0xAAAAAAAAAAAAAAABLL * (((char *)v45 - (_BYTE *)__p) >> 3));
    memset(v28, 0, sizeof(v28));
    Espresso::sequential_builder::add<Espresso::store_global_params_t>(&v35, a2, (uint64_t)&v56, (uint64_t)&v32, (uint64_t)&v37, v29, v30, v28);
    v25 = v36;
    if (v36)
    {
      v26 = (unint64_t *)&v36->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v55 = (void **)v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v55);
    v55 = (void **)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v55);
    if (v34 < 0)
      operator delete(v32);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_191668CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  *(_QWORD *)(v46 - 96) = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v46 - 161) < 0)
    operator delete(*(void **)(v46 - 184));
  if (*(char *)(v46 - 105) < 0)
    operator delete(*(void **)(v46 - 128));
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_load_global_kernel::has_dynamic_top_shape(Espresso::generic_load_global_kernel *this)
{
  return 1;
}

uint64_t Espresso::global_grad_name(uint64_t a1, const void **a2)
{
  size_t v3;
  uint64_t result;
  void *v5;
  const void *v6;

  if (*((char *)a2 + 23) >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a1, v3 + 5);
  if (*(char *)(result + 23) >= 0)
    v5 = (void *)result;
  else
    v5 = *(void **)result;
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *a2;
    result = (uint64_t)memmove(v5, v6, v3);
  }
  strcpy((char *)v5 + v3, "_grad");
  return result;
}

void Espresso::generic_phi_virtual_kernel::~generic_phi_virtual_kernel(void **this)
{
  Espresso::generic_phi_virtual_kernel::~generic_phi_virtual_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  *this = &off_1E2D94120;
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::generic_instancenorm_1d_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, _OWORD **a2@<X1>, _QWORD *a3@<X8>)
{
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  char v20;
  void **v21;
  void *v22[2];
  __int128 v23;
  uint64_t v24;
  void *__p;
  void *v26;
  uint64_t v27;
  __int128 v28;

  *((_QWORD *)&v28 + 1) = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = *((_QWORD *)*a2 + 4);
  v8 = (*a2)[1];
  *(_OWORD *)v22 = **a2;
  v23 = v8;
  v24 = v7;
  __p = 0;
  v26 = 0;
  v27 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v6 + 5), *((_QWORD *)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 2);
  a3[2] = 0;
  *a3 = 0;
  a3[1] = 0;
  v18 = a3;
  v19 = 0;
  v9 = (char *)operator new(0x40uLL);
  *a3 = v9;
  a3[1] = v9;
  a3[2] = v9 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)v22, &v28, (uint64_t)v9);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "bnns_fused_slice_offset");
  v10 = (_QWORD *)(a1 + 240);
  v11 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v10, (unsigned __int8 *)v22);
  v12 = v11;
  if (SBYTE7(v23) < 0)
  {
    operator delete(v22[0]);
    if (!v12)
      return;
  }
  else if (!v11)
  {
    return;
  }
  v13 = *a2;
  v14 = *((_QWORD *)*a2 + 4);
  v15 = (*a2)[1];
  *(_OWORD *)v22 = **a2;
  v23 = v15;
  v24 = v14;
  __p = 0;
  v26 = 0;
  v27 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v13 + 5), *((_QWORD *)v13 + 6), (uint64_t)(*((_QWORD *)v13 + 6) - *((_QWORD *)v13 + 5)) >> 2);
  std::string::basic_string[abi:ne180100]<0>(&v18, "bnns_fused_slice_size");
  v21 = &v18;
  LODWORD(v22[0]) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v10, (unsigned __int8 *)&v18, (uint64_t)&std::piecewise_construct, (__int128 **)&v21)+ 10);
  if (v20 < 0)
    operator delete(v18);
  v16 = a3[1];
  if (v16 >= a3[2])
  {
    v17 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, (__int128 *)v22);
  }
  else
  {
    std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, (__int128 *)v22);
    v17 = v16 + 64;
  }
  a3[1] = v17;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
}

void sub_1916690E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

void sub_19166914C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 8) = v22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  JUMPOUT(0x191669144);
}

void sub_191669178()
{
  JUMPOUT(0x191669144);
}

void *Espresso::generic_instancenorm_1d_kernel::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  void *v7;
  unint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::runtime_error *v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  uint64_t v42;
  std::__shared_weak_count *size;
  unint64_t *v44;
  unint64_t v45;
  std::runtime_error *exception;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  const std::string::value_type *v55;
  std::string::size_type v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  const std::string::value_type *v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  std::string v69;
  const std::string::value_type *v70;
  std::string::size_type v71;
  unsigned __int8 v72;
  const std::string::value_type *v73;
  std::string::size_type v74;
  unsigned __int8 v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;

  v7 = result;
  v8 = (unint64_t)(int)a5 >> 2;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    v9 = *((unsigned __int8 *)a3 + 23);
    if (v9 != 5)
    {
      if (v9 != 6)
        return result;
      if (*(_DWORD *)a3 != 1835091831 || *((_WORD *)a3 + 2) != 24941)
        return result;
      goto LABEL_17;
    }
    goto LABEL_49;
  }
  v11 = a3[1];
  if (v11 == 5)
  {
    a3 = (uint64_t *)*a3;
LABEL_49:
    if (*(_DWORD *)a3 == 1952793207 && *((_BYTE *)a3 + 4) == 97)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v84, v8, 1, 1, 1);
      v42 = (uint64_t)v7 + 320;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v42, (__int128 *)&v84);
      size = (std::__shared_weak_count *)v84.__r_.__value_.__l.__size_;
      if (v84.__r_.__value_.__l.__size_)
      {
        v44 = (unint64_t *)(v84.__r_.__value_.__l.__size_ + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v17 = *(_QWORD *)v42;
      if (a5 != 4 * *(int *)(*(_QWORD *)v42 + 8))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v77, a5);
        v47 = std::string::insert(&v77, 0, "Unexpected size s=");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v78.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        v49 = std::string::append(&v78, "/blob=");
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v79.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v76, 4 * *(int *)(*(_QWORD *)v42 + 8));
        if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v76;
        else
          v51 = (std::string *)v76.__r_.__value_.__r.__words[0];
        if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
        else
          v52 = v76.__r_.__value_.__l.__size_;
        v53 = std::string::append(&v79, (const std::string::value_type *)v51, v52);
        v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        v80.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v73, " @ ");
        if ((v75 & 0x80u) == 0)
          v55 = (const std::string::value_type *)&v73;
        else
          v55 = v73;
        if ((v75 & 0x80u) == 0)
          v56 = v75;
        else
          v56 = v74;
        v57 = std::string::append(&v80, v55, v56);
        v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        v81.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        v59 = std::string::append(&v81, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
        v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
        v82.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v60;
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v70, ":");
        if ((v72 & 0x80u) == 0)
          v61 = (const std::string::value_type *)&v70;
        else
          v61 = v70;
        if ((v72 & 0x80u) == 0)
          v62 = v72;
        else
          v62 = v71;
        v63 = std::string::append(&v82, v61, v62);
        v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
        v83.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v64;
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v69, 7749);
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = &v69;
        else
          v65 = (std::string *)v69.__r_.__value_.__r.__words[0];
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
        else
          v66 = v69.__r_.__value_.__l.__size_;
        v67 = std::string::append(&v83, (const std::string::value_type *)v65, v66);
        v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        v84.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v84);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      return memcpy(*(void **)(v17 + 16), a4, a5);
    }
    return result;
  }
  if (v11 == 6 && *(_DWORD *)*a3 == 1835091831 && *(_WORD *)(*a3 + 4) == 24941)
  {
LABEL_17:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v84, v8, 1, 1, 1);
    v13 = (uint64_t)v7 + 304;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v13, (__int128 *)&v84);
    v14 = (std::__shared_weak_count *)v84.__r_.__value_.__l.__size_;
    if (v84.__r_.__value_.__l.__size_)
    {
      v15 = (unint64_t *)(v84.__r_.__value_.__l.__size_ + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *(_QWORD *)v13;
    if (a5 != 4 * *(int *)(*(_QWORD *)v13 + 8))
    {
      v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v77, a5);
      v19 = std::string::insert(&v77, 0, "Unexpected size s=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v78, "/blob=");
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v76, 4 * *(int *)(*(_QWORD *)v13 + 8));
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v76;
      else
        v23 = (std::string *)v76.__r_.__value_.__r.__words[0];
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
      else
        v24 = v76.__r_.__value_.__l.__size_;
      v25 = std::string::append(&v79, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v73, " @ ");
      if ((v75 & 0x80u) == 0)
        v27 = (const std::string::value_type *)&v73;
      else
        v27 = v73;
      if ((v75 & 0x80u) == 0)
        v28 = v75;
      else
        v28 = v74;
      v29 = std::string::append(&v80, v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      v31 = std::string::append(&v81, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v70, ":");
      if ((v72 & 0x80u) == 0)
        v33 = (const std::string::value_type *)&v70;
      else
        v33 = v70;
      if ((v72 & 0x80u) == 0)
        v34 = v72;
      else
        v34 = v71;
      v35 = std::string::append(&v82, v33, v34);
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v69, 7746);
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v69;
      else
        v37 = (std::string *)v69.__r_.__value_.__r.__words[0];
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      else
        v38 = v69.__r_.__value_.__l.__size_;
      v39 = std::string::append(&v83, (const std::string::value_type *)v37, v38);
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v18, &v84);
      __cxa_throw(v18, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(v17 + 16), a4, a5);
  }
  return result;
}

void sub_191669748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  char v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  if ((v60 & 1) != 0)
    __cxa_free_exception(v59);
  _Unwind_Resume(exception_object);
}

BOOL Espresso::generic_instancenorm_1d_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;
  int v3;
  BOOL v4;
  int v5;
  uint64_t v6;

  if (*((char *)a2 + 23) < 0)
  {
    v6 = a2[1];
    if (v6 != 5)
    {
      if (v6 == 6)
        return *(_DWORD *)*a2 == 1835091831 && *(_WORD *)(*a2 + 4) == 24941;
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else
  {
    v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 5)
    {
      if (v2 == 6)
      {
        v3 = *((unsigned __int16 *)a2 + 2);
        v4 = *(_DWORD *)a2 == 1835091831;
        v5 = 24941;
        return v4 && v3 == v5;
      }
      return 0;
    }
  }
  v3 = *((unsigned __int8 *)a2 + 4);
  v4 = *(_DWORD *)a2 == 1952793207;
  v5 = 97;
  return v4 && v3 == v5;
}

void Espresso::generic_builtin_kernel::top_shapes_for_bottom_shapes(_QWORD *a1@<X8>)
{
  __int128 v2;
  char *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;
  __int128 v11;

  *((_QWORD *)&v11 + 1) = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7 = 0;
  *(_QWORD *)&v2 = 0x100000001;
  *((_QWORD *)&v2 + 1) = 0x100000001;
  v4 = v2;
  v5 = 0x100000001;
  v9 = 0;
  v10 = 0;
  __p = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (char *)operator new(0x40uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 64;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a1 + 2), &v4, &v11, (uint64_t)v3);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_191669A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_transplant_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int128 *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t result;

  v4 = *(__int128 **)a1;
  v6 = *(_QWORD *)(a1 + 8) - (_QWORD)v4;
  if (v6 != 128)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("generic_transplant_kernel: expected 2 bottom blobs, got %d", v6 >> 6);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v7 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a2, v4);
  v8 = a2[2];
  v9 = *(__int128 **)a1;
  a2[1] = v7;
  v10 = v9 + 4;
  if (v7 >= v8)
  {
    result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a2, v10);
  }
  else
  {
    std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a2, v10);
    result = v7 + 64;
  }
  a2[1] = result;
  return result;
}

void sub_191669B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Espresso::generic_transplant_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::runtime_error *v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  uint64_t v43;
  std::__shared_weak_count *size;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  std::runtime_error *exception;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  const std::string::value_type *v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  std::string v74;
  const std::string::value_type *v75;
  std::string::size_type v76;
  unsigned __int8 v77;
  const std::string::value_type *v78;
  std::string::size_type v79;
  unsigned __int8 v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  uint64_t v90;
  std::__shared_weak_count *v91;

  v90 = 0;
  v91 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v90, *a6, a6[1]);
  v10 = (unint64_t)(int)a5 >> 2;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    v11 = *((unsigned __int8 *)a3 + 23);
    if (v11 != 6)
    {
      if (v11 != 16)
        goto LABEL_68;
      goto LABEL_11;
    }
    if (*(_DWORD *)a3 != 1718184051 || *((_WORD *)a3 + 2) != 29556)
LABEL_68:
      Espresso::throw_exception_selector<Espresso::generic_error>("Unrecognized weights in generic transplant kernel.");
LABEL_52:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v89, v10, 1, 1, 1);
    v43 = a1 + 344;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v43, (__int128 *)&v89);
    size = (std::__shared_weak_count *)v89.__r_.__value_.__l.__size_;
    if (v89.__r_.__value_.__l.__size_)
    {
      v45 = (unint64_t *)(v89.__r_.__value_.__l.__size_ + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v18 = *(_QWORD *)v43;
    if (a5 != 4 * *(int *)(*(_QWORD *)v43 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v82, a5);
      v52 = std::string::insert(&v82, 0, "Unexpected size s=");
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      v54 = std::string::append(&v83, "/blob=");
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v81, 4 * *(int *)(*(_QWORD *)v43 + 8));
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v81;
      else
        v56 = (std::string *)v81.__r_.__value_.__r.__words[0];
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
      else
        v57 = v81.__r_.__value_.__l.__size_;
      v58 = std::string::append(&v84, (const std::string::value_type *)v56, v57);
      v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v78, " @ ");
      if ((v80 & 0x80u) == 0)
        v60 = (const std::string::value_type *)&v78;
      else
        v60 = v78;
      if ((v80 & 0x80u) == 0)
        v61 = v80;
      else
        v61 = v79;
      v62 = std::string::append(&v85, v60, v61);
      v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      v64 = std::string::append(&v86, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
      v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v75, ":");
      if ((v77 & 0x80u) == 0)
        v66 = (const std::string::value_type *)&v75;
      else
        v66 = v75;
      if ((v77 & 0x80u) == 0)
        v67 = v77;
      else
        v67 = v76;
      v68 = std::string::append(&v87, v66, v67);
      v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v74, 7921);
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v70 = &v74;
      else
        v70 = (std::string *)v74.__r_.__value_.__r.__words[0];
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v71 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
      else
        v71 = v74.__r_.__value_.__l.__size_;
      v72 = std::string::append(&v88, (const std::string::value_type *)v70, v71);
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v89);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    goto LABEL_58;
  }
  v12 = a3[1];
  if (v12 == 6)
  {
    if (*(_DWORD *)*a3 != 1718184051 || *(_WORD *)(*a3 + 4) != 29556)
      goto LABEL_68;
    goto LABEL_52;
  }
  if (v12 != 16)
    goto LABEL_68;
  a3 = (uint64_t *)*a3;
LABEL_11:
  if (*a3 != 0x726F6E6863746162 || a3[1] != 0x736D617261705F6DLL)
    goto LABEL_68;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v89, v10, 1, 1, 1);
  v14 = a1 + 360;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v14, (__int128 *)&v89);
  v15 = (std::__shared_weak_count *)v89.__r_.__value_.__l.__size_;
  if (v89.__r_.__value_.__l.__size_)
  {
    v16 = (unint64_t *)(v89.__r_.__value_.__l.__size_ + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(_QWORD *)v14;
  if (a5 != 4 * *(int *)(*(_QWORD *)v14 + 8))
  {
    v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v82, a5);
    v20 = std::string::insert(&v82, 0, "Unexpected size s=");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v83, "/blob=");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v81, 4 * *(int *)(*(_QWORD *)v14 + 8));
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v81;
    else
      v24 = (std::string *)v81.__r_.__value_.__r.__words[0];
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
    else
      v25 = v81.__r_.__value_.__l.__size_;
    v26 = std::string::append(&v84, (const std::string::value_type *)v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v78, " @ ");
    if ((v80 & 0x80u) == 0)
      v28 = (const std::string::value_type *)&v78;
    else
      v28 = v78;
    if ((v80 & 0x80u) == 0)
      v29 = v80;
    else
      v29 = v79;
    v30 = std::string::append(&v85, v28, v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v86, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v75, ":");
    if ((v77 & 0x80u) == 0)
      v34 = (const std::string::value_type *)&v75;
    else
      v34 = v75;
    if ((v77 & 0x80u) == 0)
      v35 = v77;
    else
      v35 = v76;
    v36 = std::string::append(&v87, v34, v35);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v74, 7926);
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &v74;
    else
      v38 = (std::string *)v74.__r_.__value_.__r.__words[0];
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
    else
      v39 = v74.__r_.__value_.__l.__size_;
    v40 = std::string::append(&v88, (const std::string::value_type *)v38, v39);
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v19, &v89);
    __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_58:
  memcpy(*(void **)(v18 + 16), a4, a5);
  v47 = v91;
  if (v91)
  {
    p_shared_owners = (unint64_t *)&v91->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
}

void sub_19166A170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 73) < 0)
    operator delete(*(void **)(v61 - 96));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 105) < 0)
    operator delete(*(void **)(v61 - 128));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 137) < 0)
    operator delete(*(void **)(v61 - 160));
  if (*(char *)(v61 - 169) < 0)
    operator delete(*(void **)(v61 - 192));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
    {
LABEL_28:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v61 - 64);
      _Unwind_Resume(a1);
    }
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL Espresso::generic_transplant_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;

  if (*((char *)a2 + 23) < 0)
  {
    v3 = a2[1];
    if (v3 == 6)
      return *(_DWORD *)*a2 == 1718184051 && *(_WORD *)(*a2 + 4) == 29556;
    if (v3 != 16)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else
  {
    v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 == 6)
      return *(_DWORD *)a2 == 1718184051 && *((_WORD *)a2 + 2) == 29556;
    if (v2 != 16)
      return 0;
  }
  return *a2 == 0x726F6E6863746162 && a2[1] == 0x736D617261705F6DLL;
}

_QWORD *Espresso::generic_transplant_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 344), *a2, a2[1]);
}

_QWORD *Espresso::generic_transplant_kernel::set_batchnorm_params(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 360), *a2, a2[1]);
}

void Espresso::generic_transplant_kernel::create_weights_blob(Espresso::generic_transplant_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  int v3;

  v2 = *((_DWORD *)this + 76);
  if (v2 <= 0)
    v3 = 4;
  else
    v3 = 4 * v2;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a2, v3, 1, 1, 1);
}

void Espresso::generic_transplant_kernel::create_batchnorm_params(Espresso::generic_transplant_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  int v3;

  v2 = *((_DWORD *)this + 76);
  if (v2 <= 0)
    v3 = 4;
  else
    v3 = 4 * v2;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a2, v3, 1, 1, 1);
}

const char *Espresso::generic_loopkit_kernel::kernel_type_str(Espresso::generic_loopkit_kernel *this)
{
  return "loopkit";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::loopkit_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void *Espresso::generic_static_dequantize_kernel::__set_weight_raw_blob(void *result, uint64_t a2, unsigned __int8 **a3, const void *a4, unint64_t a5)
{
  void *v7;
  int v8;
  unsigned __int8 *v9;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  if (*((char *)a3 + 23) < 0)
  {
    v9 = a3[1];
    if (v9 != (unsigned __int8 *)1)
    {
      if (v9 != (unsigned __int8 *)6)
        return result;
      a3 = (unsigned __int8 **)*a3;
LABEL_8:
      if (*(_DWORD *)a3 != 1935763810 || *((_WORD *)a3 + 2) != 29541)
        return result;
      goto LABEL_16;
    }
    v11 = **a3;
  }
  else
  {
    v8 = *((unsigned __int8 *)a3 + 23);
    if (v8 != 1)
    {
      if (v8 != 6)
        return result;
      goto LABEL_8;
    }
    v11 = *(unsigned __int8 *)a3;
  }
  if (v11 != 98)
    return result;
LABEL_16:
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
  v12 = (uint64_t)v7 + 336;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v52);
  size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
  if (v52.__r_.__value_.__l.__size_)
  {
    v14 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (a5 != 4 * *(int *)(*(_QWORD *)v12 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v45, a5);
    v17 = std::string::insert(&v45, 0, "Unexpected size s=");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v46, "/blob=");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v12 + 8));
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v44;
    else
      v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    else
      v22 = v44.__r_.__value_.__l.__size_;
    v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
    if ((v43 & 0x80u) == 0)
      v25 = (const std::string::value_type *)v42;
    else
      v25 = (const std::string::value_type *)v42[0];
    if ((v43 & 0x80u) == 0)
      v26 = v43;
    else
      v26 = v42[1];
    v27 = std::string::append(&v48, v25, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v40, ":");
    if ((v41 & 0x80u) == 0)
      v31 = (const std::string::value_type *)v40;
    else
      v31 = (const std::string::value_type *)v40[0];
    if ((v41 & 0x80u) == 0)
      v32 = v41;
    else
      v32 = v40[1];
    v33 = std::string::append(&v50, v31, v32);
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, 5535);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v39;
    else
      v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      v36 = v39.__r_.__value_.__l.__size_;
    v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v52);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return memcpy(*(void **)(*(_QWORD *)v12 + 16), a4, a5);
}

void sub_19166A7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL Espresso::generic_static_dequantize_kernel::supports_weight_key(uint64_t a1, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  int v6;

  if (*((char *)a2 + 23) < 0)
  {
    v3 = a2[1];
    if (v3 != (unsigned __int8 *)1)
    {
      if (v3 != (unsigned __int8 *)6)
        return 0;
      a2 = (unsigned __int8 **)*a2;
      return *(_DWORD *)a2 == 1935763810 && *((_WORD *)a2 + 2) == 29541;
    }
    v6 = **a2;
  }
  else
  {
    v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 1)
    {
      if (v2 != 6)
        return 0;
      return *(_DWORD *)a2 == 1935763810 && *((_WORD *)a2 + 2) == 29541;
    }
    v6 = *(unsigned __int8 *)a2;
  }
  return v6 == 98;
}

_QWORD *Espresso::generic_linear_quantize_kernel::top_shapes_for_bottom_shapes@<X0>(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a2, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 6);
}

void Espresso::generic_linear_quantize_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, _DWORD *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  v37 = 0;
  v38 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v37, *a6, a6[1]);
  if (*((char *)a3 + 23) < 0)
  {
    v11 = *((_QWORD *)a3 + 1);
    if (v11 != 5)
    {
      if (v11 != 10)
        goto LABEL_56;
      a3 = *(_DWORD **)a3;
      goto LABEL_11;
    }
    if (**(_DWORD **)a3 != 1818321779 || *(_BYTE *)(*(_QWORD *)a3 + 4) != 101)
LABEL_56:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_linear_quantize_kernel: Weight key not valid");
  }
  else
  {
    v10 = *((unsigned __int8 *)a3 + 23);
    if (v10 != 5)
    {
      if (v10 != 10)
        goto LABEL_56;
LABEL_11:
      if (*(_QWORD *)a3 != 0x696F705F6F72657ALL || *((_WORD *)a3 + 4) != 29806)
        goto LABEL_56;
      v32 = v37;
      v33 = v38;
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<int,4>(&v36, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v32, a5 >> 2, (a4 & 0x3F) == 0);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 304, &v36);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = v33;
      if (v33)
      {
        v19 = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        goto LABEL_44;
      }
      goto LABEL_46;
    }
    if (*a3 != 1818321779 || *((_BYTE *)a3 + 4) != 101)
      goto LABEL_56;
  }
  v34 = v37;
  v35 = v38;
  if (v38)
  {
    v22 = (unint64_t *)&v38->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(&v36, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v34, a5 >> 2, 1, 1, 1, (a4 & 0x3F) == 0);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 288, &v36);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v18 = v35;
  if (v35)
  {
    v27 = (unint64_t *)&v35->__shared_owners_;
    do
      v20 = __ldaxr(v27);
    while (__stlxr(v20 - 1, v27));
LABEL_44:
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
LABEL_46:
  v28 = v38;
  if (v38)
  {
    v29 = (unint64_t *)&v38->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_19166AC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v5 - 48);
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_linear_quantize_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (*((char *)a2 + 23) < 0)
  {
    v3 = a2[1];
    if (v3 == 5)
      return *(_DWORD *)*a2 == 1818321779 && *(_BYTE *)(*a2 + 4) == 101;
    if (v3 != 10)
      return 0;
    a2 = (uint64_t *)*a2;
    goto LABEL_8;
  }
  v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 != 5)
  {
    if (v2 != 10)
      return 0;
LABEL_8:
    v4 = *((unsigned __int16 *)a2 + 4);
    v5 = *a2 == 0x696F705F6F72657ALL;
    v6 = 29806;
    return v5 && v4 == v6;
  }
  v4 = *((unsigned __int8 *)a2 + 4);
  v5 = *(_DWORD *)a2 == 1818321779;
  v6 = 101;
  return v5 && v4 == v6;
}

const char *Espresso::generic_linear_quantize_kernel::kernel_type_str(Espresso::generic_linear_quantize_kernel *this)
{
  return "linear_quantize";
}

_QWORD *Espresso::generic_linear_quantize_kernel::get_runtime_type_config@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;

  result = std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a4, a2, a3);
  v7 = a4[1] - *a4;
  if (v7)
  {
    v8 = v7 / 40;
    v9 = *(_DWORD *)(a1 + 284);
    if (v8 <= 1)
      v8 = 1;
    v10 = (_DWORD *)(a4[3] + 8);
    v11 = (_DWORD *)(*a4 + 8);
    do
    {
      if (*v11 >= 2u)
        *v11 = 0;
      if (v9 == -1)
      {
        if (*v10 != 2 && *v10 != 4)
          *v10 = 4;
      }
      else
      {
        if (v9 != 2 && v9 != 4)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_linear_quantize_kernel: Only int8 and uint8 dst_compute_path supported");
        *v10 = v9;
      }
      v10 += 10;
      v11 += 10;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_19166AE40(_Unwind_Exception *a1)
{
  void **v1;

  std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::~pair(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::linear_quantize_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

_QWORD *std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)(a1 + 3), *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  return a1;
}

void sub_19166AED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void **std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::~pair(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<int,4>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, char a8)
{
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::runtime_error *exception;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a6;
  v15 = a6[1];
  v44 = *a6;
  v45 = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *a1 = 0;
  a1[1] = 0;
  if (!*(_BYTE *)(a2 + 73))
  {
LABEL_11:
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,void>(&v51, a7, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v51);
    size = (std::__shared_weak_count *)v51.__r_.__value_.__l.__size_;
    if (v51.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(v51.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v21 = 0;
    v22 = *(int *)(*a1 + 8);
    do
    {
      v22 *= *(int *)(*a1 + 12 + v21);
      v21 += 4;
    }
    while (v21 != 12);
    if (a5 != 4 * v22)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v48, a5);
      v34 = std::string::insert(&v48, 0, "Unexpected size s=");
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      v36 = std::string::append(&v49, "/blob=");
      v37 = 0;
      v38 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      v39 = *(int *)(*a1 + 8);
      do
      {
        v39 *= *(int *)(*a1 + 12 + v37);
        v37 += 4;
      }
      while (v37 != 12);
      std::to_string(&v47, 4 * v39);
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v47;
      else
        v40 = (std::string *)v47.__r_.__value_.__r.__words[0];
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      else
        v41 = v47.__r_.__value_.__l.__size_;
      v42 = std::string::append(&v50, (const std::string::value_type *)v40, v41);
      v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*a1 + 24), a4, a5);
    v23 = (std::__shared_weak_count *)v45;
    if (!v45)
      goto LABEL_32;
LABEL_28:
    v29 = (unint64_t *)&v23->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    goto LABEL_32;
  }
  if (!v14 || (a8 & 1) != 0)
  {
    if (!v14)
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(a2 + 123))
  {
    goto LABEL_11;
  }
  v24 = operator new(0x60uLL);
  v24[1] = 0;
  v24[2] = 0;
  *v24 = &off_1E2DBEED8;
  v24[3] = &off_1E2DA1330;
  *((_OWORD *)v24 + 4) = 0u;
  *((_OWORD *)v24 + 5) = 0u;
  *((_DWORD *)v24 + 8) = a7;
  *(_QWORD *)((char *)v24 + 36) = 0x100000001;
  *((_DWORD *)v24 + 11) = 1;
  v24[6] = a4;
  *((_BYTE *)v24 + 56) = 0;
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)(v24 + 3);
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v51);
  v25 = (std::__shared_weak_count *)v51.__r_.__value_.__l.__size_;
  if (v51.__r_.__value_.__l.__size_)
  {
    v26 = (unint64_t *)(v51.__r_.__value_.__l.__size_ + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (_QWORD *)(*a1 + 40);
  v23 = (std::__shared_weak_count *)v45;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v28, v44, v45);
  if (v45)
    goto LABEL_28;
LABEL_32:
  if (a3)
  {
    v31 = (unint64_t *)&a3->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_19166B298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  void *v31;
  int v32;
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 73) < 0)
    operator delete(*(void **)(v33 - 96));
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v32 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v31);
  goto LABEL_14;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  _QWORD *v10;
  Espresso *v11;
  void *v12;

  v10 = operator new(0x60uLL);
  *v10 = &off_1E2DBEED8;
  v10[1] = 0;
  v10[3] = &off_1E2DA1330;
  *((_OWORD *)v10 + 4) = 0u;
  v10[2] = 0;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  v10[6] = v12;
  *((_BYTE *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_19166B434(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<int,4>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1330;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  return a1;
}

void Espresso::blob<int,4>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1330;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<int,4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<int,4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEED8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<int,4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *Espresso::generic_linear_dequantize_kernel::top_shapes_for_bottom_shapes@<X0>(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a2, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 6);
}

void Espresso::generic_linear_dequantize_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, _DWORD *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  v37 = 0;
  v38 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v37, *a6, a6[1]);
  if (*((char *)a3 + 23) < 0)
  {
    v11 = *((_QWORD *)a3 + 1);
    if (v11 != 5)
    {
      if (v11 != 10)
        goto LABEL_56;
      a3 = *(_DWORD **)a3;
      goto LABEL_11;
    }
    if (**(_DWORD **)a3 != 1818321779 || *(_BYTE *)(*(_QWORD *)a3 + 4) != 101)
LABEL_56:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_linear_quantize_kernel: Weight key not valid");
  }
  else
  {
    v10 = *((unsigned __int8 *)a3 + 23);
    if (v10 != 5)
    {
      if (v10 != 10)
        goto LABEL_56;
LABEL_11:
      if (*(_QWORD *)a3 != 0x696F705F6F72657ALL || *((_WORD *)a3 + 4) != 29806)
        goto LABEL_56;
      v32 = v37;
      v33 = v38;
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<int,4>(&v36, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v32, a5 >> 2, (a4 & 0x3F) == 0);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 304, &v36);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = v33;
      if (v33)
      {
        v19 = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        goto LABEL_44;
      }
      goto LABEL_46;
    }
    if (*a3 != 1818321779 || *((_BYTE *)a3 + 4) != 101)
      goto LABEL_56;
  }
  v34 = v37;
  v35 = v38;
  if (v38)
  {
    v22 = (unint64_t *)&v38->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(&v36, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v34, a5 >> 2, 1, 1, 1, (a4 & 0x3F) == 0);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 288, &v36);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v18 = v35;
  if (v35)
  {
    v27 = (unint64_t *)&v35->__shared_owners_;
    do
      v20 = __ldaxr(v27);
    while (__stlxr(v20 - 1, v27));
LABEL_44:
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
LABEL_46:
  v28 = v38;
  if (v38)
  {
    v29 = (unint64_t *)&v38->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_19166B85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v5 - 48);
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_linear_dequantize_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (*((char *)a2 + 23) < 0)
  {
    v3 = a2[1];
    if (v3 == 5)
      return *(_DWORD *)*a2 == 1818321779 && *(_BYTE *)(*a2 + 4) == 101;
    if (v3 != 10)
      return 0;
    a2 = (uint64_t *)*a2;
    goto LABEL_8;
  }
  v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 != 5)
  {
    if (v2 != 10)
      return 0;
LABEL_8:
    v4 = *((unsigned __int16 *)a2 + 4);
    v5 = *a2 == 0x696F705F6F72657ALL;
    v6 = 29806;
    return v5 && v4 == v6;
  }
  v4 = *((unsigned __int8 *)a2 + 4);
  v5 = *(_DWORD *)a2 == 1818321779;
  v6 = 101;
  return v5 && v4 == v6;
}

const char *Espresso::generic_linear_dequantize_kernel::kernel_type_str(Espresso::generic_linear_dequantize_kernel *this)
{
  return "linear_dequantize";
}

_QWORD *Espresso::generic_linear_dequantize_kernel::get_runtime_type_config@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  _DWORD *v11;

  result = std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a4, a2, a3);
  v7 = a4[1] - *a4;
  if (v7)
  {
    v8 = v7 / 40;
    v9 = *(_DWORD *)(a1 + 284);
    if (v8 <= 1)
      v8 = 1;
    v10 = (unsigned int *)(a4[3] + 8);
    v11 = (_DWORD *)(*a4 + 8);
    do
    {
      if (*v11 != 2 && *v11 != 4)
        *v11 = 4;
      if (v9 >= 2)
      {
        if (v9 != -1)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_linear_quantize_kernel: Only fp16 and fp32 dst_compute_path supported");
        if (*v10 >= 2)
          *v10 = 0;
      }
      else
      {
        *v10 = v9;
      }
      v10 += 10;
      v11 += 10;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_19166BA08(_Unwind_Exception *a1)
{
  void **v1;

  std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::~pair(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::linear_dequantize_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::generic_rnn_kernel::__launch(uint64_t **a1, _QWORD *a2, std::string::size_type **a3, int ***a4)
{
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  int *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::string::size_type *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string::size_type v19;
  unint64_t *v20;
  unint64_t v21;
  std::string::size_type v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string::size_type v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::size_type v31;
  std::string::size_type v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  int v41;
  _OWORD *v42;
  _OWORD *v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::string *v52;
  std::string::size_type *v53;
  std::string::size_type v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::string *v75;
  std::string::size_type *p_size;
  std::string::size_type v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *v101;
  std::string::size_type *v102;
  std::string::size_type v103;
  unint64_t *v104;
  unint64_t v105;
  std::string *v106;
  std::string::size_type *v107;
  std::string::size_type v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  __int128 v135;
  __int128 v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  std::string::size_type v160;
  uint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  int i;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  int v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  int v188;
  int v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  unint64_t *v261;
  __int128 v262;
  __int128 v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::string::size_type *v291;
  std::string::size_type v292;
  std::string::size_type v293;
  unint64_t *v294;
  unint64_t v295;
  std::string::size_type v296;
  std::string::size_type v297;
  unint64_t *v298;
  unint64_t v299;
  std::string::size_type v300;
  std::string::size_type v301;
  unint64_t *v302;
  unint64_t v303;
  int **v304;
  std::string::size_type v305;
  std::string::size_type v306;
  unint64_t *v307;
  unint64_t v308;
  std::string::size_type v309;
  std::string::size_type v310;
  unint64_t *v311;
  unint64_t v312;
  int v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  unint64_t *v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  unint64_t *v355;
  unint64_t v356;
  unint64_t *v357;
  unint64_t v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t *v361;
  unint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  unint64_t *v388;
  unint64_t *v389;
  unint64_t v390;
  unint64_t *v391;
  unint64_t v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  unint64_t *v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  std::runtime_error *v412;
  std::runtime_error *exception;
  std::string *v414;
  __int128 v415;
  std::string *v416;
  __int128 v417;
  std::string *v418;
  std::string::size_type size;
  std::string *v420;
  __int128 v421;
  std::runtime_error *v422;
  std::runtime_error *v423;
  std::runtime_error *v424;
  std::string *v425;
  __int128 v426;
  uint64_t v427;
  std::__shared_weak_count *v428;
  __int128 v429;
  void *v430;
  std::__shared_weak_count *v431;
  __int128 v432;
  uint64_t v433;
  std::__shared_weak_count *v434;
  uint64_t v435;
  std::__shared_weak_count *v436;
  __int128 v437;
  __int128 v438;
  void *v439;
  std::__shared_weak_count *v440;
  __int128 v441;
  __int128 v442;
  uint64_t v443;
  std::__shared_weak_count *v444;
  uint64_t v445;
  std::__shared_weak_count *v446;
  __int128 v447;
  void *v448;
  std::__shared_weak_count *v449;
  __int128 v450;
  uint64_t v451;
  std::__shared_weak_count *v452;
  std::string::size_type v453;
  std::__shared_weak_count *v454;
  uint64_t v455;
  std::__shared_weak_count *v456;
  void *v457[2];
  char v458;
  uint64_t v459;
  std::__shared_weak_count *v460;
  void *__p[2];
  char v462;
  __int128 v463;
  std::string::size_type v464;
  std::__shared_weak_count *v465;
  void *v466;
  std::__shared_weak_count *v467;
  __int128 v468;
  uint64_t v469;
  std::__shared_weak_count *v470;
  __int128 v471;
  std::string::size_type v472;
  std::__shared_weak_count *v473;
  std::string::size_type v474;
  std::__shared_weak_count *v475;
  void *v476;
  std::__shared_weak_count *v477;
  __int128 v478;
  __int128 v479;
  uint64_t v480;
  std::__shared_weak_count *v481;
  __int128 v482;
  std::string::size_type v483;
  std::__shared_weak_count *v484;
  void *v485;
  std::__shared_weak_count *v486;
  __int128 v487;
  std::string v488;
  std::string v489;
  std::string v490;
  __int128 v491;
  __int128 v492;
  void *v493;
  std::__shared_weak_count *v494;
  __int128 v495;
  __int128 v496;
  std::string::size_type v497;
  std::__shared_weak_count *v498;
  int *v499;
  std::__shared_weak_count *v500;
  std::string::size_type v501;
  std::__shared_weak_count *v502;
  std::string::size_type v503;
  std::__shared_weak_count *v504;
  std::string::size_type v505;
  std::__shared_weak_count *v506;
  uint64_t v507;
  std::__shared_weak_count *v508;
  int *v509;
  std::__shared_weak_count *v510;
  std::string::size_type v511;
  std::__shared_weak_count *v512;
  std::string::size_type v513;
  std::__shared_weak_count *v514;
  std::string::size_type v515;
  std::__shared_weak_count *v516;
  std::string::size_type v517;
  std::__shared_weak_count *v518;
  std::string::size_type v519;
  std::__shared_weak_count *v520;
  uint64_t v521;
  std::__shared_weak_count *v522;
  int *v523;
  std::__shared_weak_count *v524;
  std::string::size_type v525;
  std::__shared_weak_count *v526;
  std::string::size_type v527;
  std::__shared_weak_count *v528;
  std::string::size_type v529;
  std::__shared_weak_count *v530;
  __int128 v531;
  uint64_t v532;
  std::__shared_weak_count *v533;
  uint64_t v534;
  std::__shared_weak_count *v535;
  std::string v536;
  uint64_t v537;
  std::__shared_weak_count *v538;
  std::string v539;
  uint64_t v540;

  v540 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v536, "W_h");
  v490.__r_.__value_.__r.__words[0] = (std::string::size_type)&v536;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 35, &v536, &v490);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v537, *((void **)v8 + 7), *((std::__shared_weak_count **)v8 + 8));
  if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v536.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v536, "W_x");
  v490.__r_.__value_.__r.__words[0] = (std::string::size_type)&v536;
  v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 35, &v536, &v490);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v534, *((void **)v9 + 7), *((std::__shared_weak_count **)v9 + 8));
  if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v536.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v536, "b");
  v490.__r_.__value_.__r.__words[0] = (std::string::size_type)&v536;
  v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 35, &v536, &v490);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v532, *((void **)v10 + 7), *((std::__shared_weak_count **)v10 + 8));
  if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v536.__r_.__value_.__l.__data_);
  v11 = **a4;
  v12 = (std::__shared_weak_count *)(*a4)[1];
  *(_QWORD *)&v531 = v11;
  *((_QWORD *)&v531 + 1) = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  *((_DWORD *)a1 + 92) = (*(uint64_t (**)(int *))(*(_QWORD *)v11 + 32))(v11);
  if (*((_DWORD *)a1 + 80))
  {
    v15 = *a3;
    v16 = (std::__shared_weak_count *)(*a3)[1];
    v497 = **a3;
    v498 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v15 = *a3;
    }
    v19 = v15[3];
    *(_QWORD *)&v496 = v15[2];
    *((_QWORD *)&v496 + 1) = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v15 = *a3;
    }
    v22 = v15[5];
    *(_QWORD *)&v495 = v15[4];
    *((_QWORD *)&v495 + 1) = v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v15 = *a3;
    }
    v25 = (std::__shared_weak_count *)v15[7];
    v493 = (void *)v15[6];
    v494 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      v15 = *a3;
    }
    v28 = v15[9];
    *(_QWORD *)&v492 = v15[8];
    *((_QWORD *)&v492 + 1) = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      v15 = *a3;
    }
    v32 = v15[10];
    v31 = v15[11];
    *(_QWORD *)&v491 = v32;
    *((_QWORD *)&v491 + 1) = v31;
    if (v31)
    {
      v33 = (unint64_t *)(v31 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v35 = v11[5];
    v36 = *((_DWORD *)a1 + 85);
    if (v35 > v36)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v489, v11[5]);
      v414 = std::string::insert(&v489, 0, "Unexpected input batch_n ");
      v415 = *(_OWORD *)&v414->__r_.__value_.__l.__data_;
      v539.__r_.__value_.__r.__words[2] = v414->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v539.__r_.__value_.__l.__data_ = v415;
      v414->__r_.__value_.__l.__size_ = 0;
      v414->__r_.__value_.__r.__words[2] = 0;
      v414->__r_.__value_.__r.__words[0] = 0;
      v416 = std::string::append(&v539, "/");
      v417 = *(_OWORD *)&v416->__r_.__value_.__l.__data_;
      v490.__r_.__value_.__r.__words[2] = v416->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v490.__r_.__value_.__l.__data_ = v417;
      v416->__r_.__value_.__l.__size_ = 0;
      v416->__r_.__value_.__r.__words[2] = 0;
      v416->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v488, *((_DWORD *)a1 + 85));
      if ((v488.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v418 = &v488;
      else
        v418 = (std::string *)v488.__r_.__value_.__r.__words[0];
      if ((v488.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v488.__r_.__value_.__r.__words[2]);
      else
        size = v488.__r_.__value_.__l.__size_;
      v420 = std::string::append(&v490, (const std::string::value_type *)v418, size);
      v421 = *(_OWORD *)&v420->__r_.__value_.__l.__data_;
      v536.__r_.__value_.__r.__words[2] = v420->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v536.__r_.__value_.__l.__data_ = v421;
      v420->__r_.__value_.__l.__size_ = 0;
      v420->__r_.__value_.__r.__words[2] = 0;
      v420->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v536);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v37 = *((_DWORD *)a1 + 84);
    if (v37 && v11[4] != 1)
    {
      v424 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v490, v11[2]);
      v425 = std::string::insert(&v490, 0, "Unexpected input size w=");
      v426 = *(_OWORD *)&v425->__r_.__value_.__l.__data_;
      v536.__r_.__value_.__r.__words[2] = v425->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v536.__r_.__value_.__l.__data_ = v426;
      v425->__r_.__value_.__l.__size_ = 0;
      v425->__r_.__value_.__r.__words[2] = 0;
      v425->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v424, &v536);
      __cxa_throw(v424, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (*((int *)a1 + 81) <= 0)
    {
      v422 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v422, "input_embedding_size must be > 0 in seq2seq mode");
      __cxa_throw(v422, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *(_OWORD *)&v489.__r_.__value_.__l.__data_ = 0uLL;
    if (v36)
      v38 = *((int *)a1 + 87) < 0;
    else
      v38 = 1;
    v39 = !v38;
    if (v37 || v39)
    {
      (*(void (**)(int *, _QWORD *, std::string *))(*(_QWORD *)v11 + 40))(v11, a2, &v489);
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
      v35 = v11[5];
      v36 = *((_DWORD *)a1 + 85);
    }
    if (v35 >= v36)
      v35 = v36;
    if (v35 >= 1)
    {
      v40 = 0;
      do
      {
        if (v36 >= 2)
        {
          v41 = *((_DWORD *)a1 + 87);
          if ((v41 & 0x80000000) == 0)
          {
            if (!v40)
            {
              (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
              v41 = *((_DWORD *)a1 + 87);
            }
            if (v41 == (int)*(float *)(*(_QWORD *)(v489.__r_.__value_.__r.__words[0] + 24) + 4 * v40))
              break;
          }
        }
        *(_OWORD *)&v490.__r_.__value_.__l.__data_ = 0uLL;
        *(_OWORD *)&v539.__r_.__value_.__l.__data_ = 0uLL;
        if (!v40)
        {
          std::string::basic_string[abi:ne180100]<0>(&v536, "h0");
          v488.__r_.__value_.__r.__words[0] = (std::string::size_type)&v536;
          v42 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 35, &v536, &v488);
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v490, *((_QWORD *)v42 + 7), *((_QWORD *)v42 + 8));
          if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v536.__r_.__value_.__l.__data_);
          if (!v490.__r_.__value_.__r.__words[0])
          {
            v147 = v495;
            (*(void (**)(std::string *__return_ptr, _QWORD))(*(_QWORD *)v495 + 56))(&v536, v495);
            v148 = 0;
            v149 = *(int *)(v536.__r_.__value_.__r.__words[0] + 8);
            do
            {
              v149 *= *(int *)(v536.__r_.__value_.__r.__words[0] + 12 + v148);
              v148 += 4;
            }
            while (v148 != 12);
            if (v149)
              bzero(*(void **)(v536.__r_.__value_.__r.__words[0] + 24), 4 * v149);
            (*(void (**)(uint64_t, _QWORD *, std::string *))(*(_QWORD *)v147 + 48))(v147, a2, &v536);
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v490, v147, *((uint64_t *)&v495 + 1));
            v150 = (std::__shared_weak_count *)v536.__r_.__value_.__l.__size_;
            if (v536.__r_.__value_.__l.__size_)
            {
              v151 = (unint64_t *)(v536.__r_.__value_.__l.__size_ + 8);
              do
                v152 = __ldaxr(v151);
              while (__stlxr(v152 - 1, v151));
              if (!v152)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&v536, "c0");
          v488.__r_.__value_.__r.__words[0] = (std::string::size_type)&v536;
          v43 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 35, &v536, &v488);
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v539, *((_QWORD *)v43 + 7), *((_QWORD *)v43 + 8));
          if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v536.__r_.__value_.__l.__data_);
          if (!v539.__r_.__value_.__r.__words[0])
          {
            v153 = v491;
            (*(void (**)(std::string *__return_ptr, _QWORD))(*(_QWORD *)v491 + 56))(&v536, v491);
            v154 = 0;
            v155 = *(int *)(v536.__r_.__value_.__r.__words[0] + 8);
            do
            {
              v155 *= *(int *)(v536.__r_.__value_.__r.__words[0] + 12 + v154);
              v154 += 4;
            }
            while (v154 != 12);
            if (v155)
              bzero(*(void **)(v536.__r_.__value_.__r.__words[0] + 24), 4 * v155);
            (*(void (**)(uint64_t, _QWORD *, std::string *))(*(_QWORD *)v153 + 48))(v153, a2, &v536);
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v539, v153, *((uint64_t *)&v491 + 1));
            v156 = (std::__shared_weak_count *)v536.__r_.__value_.__l.__size_;
            if (v536.__r_.__value_.__l.__size_)
            {
              v157 = (unint64_t *)(v536.__r_.__value_.__l.__size_ + 8);
              do
                v158 = __ldaxr(v157);
              while (__stlxr(v158 - 1, v157));
              if (!v158)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
            }
          }
        }
        v44 = v531;
        *(_OWORD *)&v536.__r_.__value_.__l.__data_ = v531;
        if (*((_QWORD *)&v531 + 1))
        {
          v45 = (unint64_t *)(*((_QWORD *)&v531 + 1) + 8);
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        if (*((_DWORD *)a1 + 84))
        {
          *(_OWORD *)&v488.__r_.__value_.__l.__data_ = 0uLL;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v536, (__int128 *)&v488);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v488);
          v412 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v412, "Not impl");
          __cxa_throw(v412, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v47 = *((_DWORD *)a1 + 76);
        if (v47)
        {
          if (v47 == 2)
          {
            v468 = v496;
            if (*((_QWORD *)&v496 + 1))
            {
              v71 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
              do
                v72 = __ldxr(v71);
              while (__stxr(v72 + 1, v71));
            }
            v466 = v493;
            v467 = v494;
            if (v494)
            {
              v73 = (unint64_t *)&v494->__shared_owners_;
              do
                v74 = __ldxr(v73);
              while (__stxr(v74 + 1, v73));
            }
            if (v40)
              v75 = (std::string *)&v495;
            else
              v75 = &v490;
            v464 = v75->__r_.__value_.__r.__words[0];
            p_size = &v490.__r_.__value_.__l.__size_;
            if (v40)
              p_size = (std::string::size_type *)&v495 + 1;
            v77 = *p_size;
            v465 = (std::__shared_weak_count *)v77;
            if (v77)
            {
              v78 = (unint64_t *)(v77 + 8);
              do
                v79 = __ldxr(v78);
              while (__stxr(v79 + 1, v78));
            }
            v463 = v44;
            if (*((_QWORD *)&v44 + 1))
            {
              v80 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
              do
                v81 = __ldxr(v80);
              while (__stxr(v81 + 1, v80));
            }
            ((void (*)(uint64_t **, __int128 *, void **, std::string::size_type *, __int128 *, _QWORD, _QWORD))(*a1)[50])(a1, &v468, &v466, &v464, &v463, 0, 0);
            v82 = (std::__shared_weak_count *)*((_QWORD *)&v463 + 1);
            if (*((_QWORD *)&v463 + 1))
            {
              v83 = (unint64_t *)(*((_QWORD *)&v463 + 1) + 8);
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
            v85 = v465;
            if (v465)
            {
              v86 = (unint64_t *)&v465->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
            v88 = v467;
            if (v467)
            {
              v89 = (unint64_t *)&v467->__shared_owners_;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
            }
            v68 = (std::__shared_weak_count *)*((_QWORD *)&v468 + 1);
            if (!*((_QWORD *)&v468 + 1))
              goto LABEL_213;
            v91 = (unint64_t *)(*((_QWORD *)&v468 + 1) + 8);
            do
              v70 = __ldaxr(v91);
            while (__stlxr(v70 - 1, v91));
          }
          else
          {
            if (v47 != 1)
              goto LABEL_213;
            v487 = v496;
            if (*((_QWORD *)&v496 + 1))
            {
              v48 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
            }
            v485 = v493;
            v486 = v494;
            if (v494)
            {
              v50 = (unint64_t *)&v494->__shared_owners_;
              do
                v51 = __ldxr(v50);
              while (__stxr(v51 + 1, v50));
            }
            if (v40)
              v52 = (std::string *)&v495;
            else
              v52 = &v490;
            v483 = v52->__r_.__value_.__r.__words[0];
            v53 = &v490.__r_.__value_.__l.__size_;
            if (v40)
              v53 = (std::string::size_type *)&v495 + 1;
            v54 = *v53;
            v484 = (std::__shared_weak_count *)v54;
            if (v54)
            {
              v55 = (unint64_t *)(v54 + 8);
              do
                v56 = __ldxr(v55);
              while (__stxr(v56 + 1, v55));
            }
            v482 = v44;
            if (*((_QWORD *)&v44 + 1))
            {
              v57 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
              do
                v58 = __ldxr(v57);
              while (__stxr(v58 + 1, v57));
            }
            ((void (*)(uint64_t **, __int128 *, void **, std::string::size_type *, __int128 *, _QWORD, _QWORD))(*a1)[49])(a1, &v487, &v485, &v483, &v482, 0, 0);
            v59 = (std::__shared_weak_count *)*((_QWORD *)&v482 + 1);
            if (*((_QWORD *)&v482 + 1))
            {
              v60 = (unint64_t *)(*((_QWORD *)&v482 + 1) + 8);
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            v62 = v484;
            if (v484)
            {
              v63 = (unint64_t *)&v484->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            v65 = v486;
            if (v486)
            {
              v66 = (unint64_t *)&v486->__shared_owners_;
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
            v68 = (std::__shared_weak_count *)*((_QWORD *)&v487 + 1);
            if (!*((_QWORD *)&v487 + 1))
              goto LABEL_213;
            v69 = (unint64_t *)(*((_QWORD *)&v487 + 1) + 8);
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
          }
        }
        else
        {
          v92 = (std::__shared_weak_count *)a2[1];
          v480 = *a2;
          v481 = v92;
          if (v92)
          {
            v93 = (unint64_t *)&v92->__shared_owners_;
            do
              v94 = __ldxr(v93);
            while (__stxr(v94 + 1, v93));
          }
          v479 = v496;
          if (*((_QWORD *)&v496 + 1))
          {
            v95 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
            do
              v96 = __ldxr(v95);
            while (__stxr(v96 + 1, v95));
          }
          v478 = v492;
          if (*((_QWORD *)&v492 + 1))
          {
            v97 = (unint64_t *)(*((_QWORD *)&v492 + 1) + 8);
            do
              v98 = __ldxr(v97);
            while (__stxr(v98 + 1, v97));
          }
          v476 = v493;
          v477 = v494;
          if (v494)
          {
            v99 = (unint64_t *)&v494->__shared_owners_;
            do
              v100 = __ldxr(v99);
            while (__stxr(v100 + 1, v99));
          }
          if (v40)
            v101 = (std::string *)&v495;
          else
            v101 = &v490;
          v474 = v101->__r_.__value_.__r.__words[0];
          v102 = &v490.__r_.__value_.__l.__size_;
          if (v40)
            v102 = (std::string::size_type *)&v495 + 1;
          v103 = *v102;
          v475 = (std::__shared_weak_count *)v103;
          if (v103)
          {
            v104 = (unint64_t *)(v103 + 8);
            do
              v105 = __ldxr(v104);
            while (__stxr(v105 + 1, v104));
          }
          if (v40)
            v106 = (std::string *)&v491;
          else
            v106 = &v539;
          v472 = v106->__r_.__value_.__r.__words[0];
          v107 = &v539.__r_.__value_.__l.__size_;
          if (v40)
            v107 = (std::string::size_type *)&v491 + 1;
          v108 = *v107;
          v473 = (std::__shared_weak_count *)v108;
          if (v108)
          {
            v109 = (unint64_t *)(v108 + 8);
            do
              v110 = __ldxr(v109);
            while (__stxr(v110 + 1, v109));
          }
          v471 = v44;
          if (*((_QWORD *)&v44 + 1))
          {
            v111 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
            do
              v112 = __ldxr(v111);
            while (__stxr(v112 + 1, v111));
          }
          v469 = 0;
          v470 = 0;
          ((void (*)(uint64_t **, uint64_t *, __int128 *, __int128 *, void **, std::string::size_type *, std::string::size_type *, __int128 *, uint64_t *, _DWORD))(*a1)[51])(a1, &v480, &v479, &v478, &v476, &v474, &v472, &v471, &v469, 0);
          v113 = v470;
          if (v470)
          {
            v114 = (unint64_t *)&v470->__shared_owners_;
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
          }
          v116 = (std::__shared_weak_count *)*((_QWORD *)&v471 + 1);
          if (*((_QWORD *)&v471 + 1))
          {
            v117 = (unint64_t *)(*((_QWORD *)&v471 + 1) + 8);
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          v119 = v473;
          if (v473)
          {
            v120 = (unint64_t *)&v473->__shared_owners_;
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
          }
          v122 = v475;
          if (v475)
          {
            v123 = (unint64_t *)&v475->__shared_owners_;
            do
              v124 = __ldaxr(v123);
            while (__stlxr(v124 - 1, v123));
            if (!v124)
            {
              ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
              std::__shared_weak_count::__release_weak(v122);
            }
          }
          v125 = v477;
          if (v477)
          {
            v126 = (unint64_t *)&v477->__shared_owners_;
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
          v128 = (std::__shared_weak_count *)*((_QWORD *)&v478 + 1);
          if (*((_QWORD *)&v478 + 1))
          {
            v129 = (unint64_t *)(*((_QWORD *)&v478 + 1) + 8);
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
          v131 = (std::__shared_weak_count *)*((_QWORD *)&v479 + 1);
          if (*((_QWORD *)&v479 + 1))
          {
            v132 = (unint64_t *)(*((_QWORD *)&v479 + 1) + 8);
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }
          v68 = v481;
          if (!v481)
            goto LABEL_213;
          v134 = (unint64_t *)&v481->__shared_owners_;
          do
            v70 = __ldaxr(v134);
          while (__stlxr(v70 - 1, v134));
        }
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
LABEL_213:
        v135 = v495;
        v495 = v496;
        v496 = v135;
        v136 = v491;
        v491 = v492;
        v492 = v136;
        v137 = (std::__shared_weak_count *)v536.__r_.__value_.__l.__size_;
        if (v536.__r_.__value_.__l.__size_)
        {
          v138 = (unint64_t *)(v536.__r_.__value_.__l.__size_ + 8);
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (!v139)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
        }
        v140 = (std::__shared_weak_count *)v539.__r_.__value_.__l.__size_;
        if (v539.__r_.__value_.__l.__size_)
        {
          v141 = (unint64_t *)(v539.__r_.__value_.__l.__size_ + 8);
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
            std::__shared_weak_count::__release_weak(v140);
          }
        }
        v143 = (std::__shared_weak_count *)v490.__r_.__value_.__l.__size_;
        if (v490.__r_.__value_.__l.__size_)
        {
          v144 = (unint64_t *)(v490.__r_.__value_.__l.__size_ + 8);
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }
        ++v40;
        v146 = *(_DWORD *)(v531 + 20);
        v36 = *((_DWORD *)a1 + 85);
        if (v146 >= v36)
          v146 = *((_DWORD *)a1 + 85);
      }
      while (v40 < v146);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "max");
    Espresso::generic_rnn_kernel::cached_temp_blob((uint64_t)a1, __p, 1u, 1u, 1u, 1u, &v488);
    if (v462 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(v457, "argmax");
    Espresso::generic_rnn_kernel::cached_temp_blob((uint64_t)a1, v457, 1u, 1u, 1u, 1u, &v459);
    if (v458 < 0)
      operator delete(v457[0]);
    v159 = v459;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v459 + 56))(&v536, v459);
    **(float **)(v536.__r_.__value_.__r.__words[0] + 24) = (float)*((int *)a1 + 89);
    (*(void (**)(uint64_t, _QWORD *, std::string *))(*(_QWORD *)v159 + 48))(v159, a2, &v536);
    v160 = v497;
    (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v497 + 56))(&v490, v497);
    v161 = 0;
    v162 = *(int *)(v490.__r_.__value_.__r.__words[0] + 8);
    do
    {
      v162 *= *(int *)(v490.__r_.__value_.__r.__words[0] + 12 + v161);
      v161 += 4;
    }
    while (v161 != 12);
    if (v162)
      bzero(*(void **)(v490.__r_.__value_.__r.__words[0] + 24), 4 * v162);
    (*(void (**)(std::string::size_type, _QWORD *, std::string *))(*(_QWORD *)v160 + 48))(v160, a2, &v490);
    v163 = (std::__shared_weak_count *)v490.__r_.__value_.__l.__size_;
    if (v490.__r_.__value_.__l.__size_)
    {
      v164 = (unint64_t *)(v490.__r_.__value_.__l.__size_ + 8);
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
    v166 = (std::__shared_weak_count *)v536.__r_.__value_.__l.__size_;
    if (v536.__r_.__value_.__l.__size_)
    {
      v167 = (unint64_t *)(v536.__r_.__value_.__l.__size_ + 8);
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    if (*((int *)a1 + 90) > 0)
    {
      memset(&v536, 0, sizeof(v536));
      memset(&v539, 0, sizeof(v539));
      std::vector<std::vector<std::pair<int,float>>>::vector[abi:ne180100](&v490, (uint64_t **)&v539, 1uLL);
      if (v539.__r_.__value_.__r.__words[0])
      {
        v539.__r_.__value_.__l.__size_ = v539.__r_.__value_.__r.__words[0];
        operator delete(v539.__r_.__value_.__l.__data_);
      }
      v423 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v423, "Not implemented");
      __cxa_throw(v423, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (*((int *)a1 + 86) >= 1)
    {
      for (i = 0; i < *((_DWORD *)a1 + 86); ++i)
      {
        v170 = *((unsigned int *)a1 + 89);
        if (i || (v170 & 0x80000000) != 0)
        {
          if (*((int *)a1 + 83) <= 0)
            Espresso::reduce_shorthand::operator()((uint64_t)(a1 + 92), (uint64_t)a2, 6u, &v493, (uint64_t)&v488, &v459, 0.000001);
          v171 = (std::__shared_weak_count *)a2[1];
          v455 = *a2;
          v456 = v171;
          if (v171)
          {
            v172 = (unint64_t *)&v171->__shared_owners_;
            do
              v173 = __ldxr(v172);
            while (__stxr(v173 + 1, v172));
          }
          v453 = v497;
          v454 = v498;
          if (v498)
          {
            v174 = (unint64_t *)&v498->__shared_owners_;
            do
              v175 = __ldxr(v174);
            while (__stxr(v175 + 1, v174));
          }
          v176 = *((_DWORD *)a1 + 89);
          v451 = v459;
          v452 = v460;
          if (v460)
          {
            v177 = (unint64_t *)&v460->__shared_owners_;
            do
              v178 = __ldxr(v177);
            while (__stxr(v178 + 1, v177));
          }
          ((void (*)(uint64_t **, uint64_t *, std::string::size_type *, _QWORD, uint64_t *))(*a1)[54])(a1, &v455, &v453, (i + (~v176 >> 31)), &v451);
          v179 = v452;
          if (v452)
          {
            v180 = (unint64_t *)&v452->__shared_owners_;
            do
              v181 = __ldaxr(v180);
            while (__stlxr(v181 - 1, v180));
            if (!v181)
            {
              ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
              std::__shared_weak_count::__release_weak(v179);
            }
          }
          v182 = v454;
          if (v454)
          {
            v183 = (unint64_t *)&v454->__shared_owners_;
            do
              v184 = __ldaxr(v183);
            while (__stlxr(v184 - 1, v183));
            if (!v184)
            {
              ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
              std::__shared_weak_count::__release_weak(v182);
            }
          }
          v185 = v456;
          if (v456)
          {
            v186 = (unint64_t *)&v456->__shared_owners_;
            do
              v187 = __ldaxr(v186);
            while (__stlxr(v187 - 1, v186));
            if (!v187)
            {
              ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
              std::__shared_weak_count::__release_weak(v185);
            }
          }
        }
        v188 = *((_DWORD *)a1 + 88);
        if ((v188 & 0x80000000) == 0 && *((int *)a1 + 86) >= 2 && (_DWORD)v170 == v188)
          break;
        v190 = *((_DWORD *)a1 + 76);
        if (v190)
        {
          if (v190 == 2)
          {
            v432 = v496;
            if (*((_QWORD *)&v496 + 1))
            {
              v209 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
              do
                v210 = __ldxr(v209);
              while (__stxr(v210 + 1, v209));
            }
            v430 = v493;
            v431 = v494;
            if (v494)
            {
              v211 = (unint64_t *)&v494->__shared_owners_;
              do
                v212 = __ldxr(v211);
              while (__stxr(v212 + 1, v211));
            }
            v429 = v495;
            if (*((_QWORD *)&v495 + 1))
            {
              v213 = (unint64_t *)(*((_QWORD *)&v495 + 1) + 8);
              do
                v214 = __ldxr(v213);
              while (__stxr(v214 + 1, v213));
            }
            v427 = 0;
            v428 = 0;
            ((void (*)(uint64_t **, __int128 *, void **, __int128 *, uint64_t *, uint64_t, uint64_t))(*a1)[50])(a1, &v432, &v430, &v429, &v427, v170, 1);
            v215 = v428;
            if (v428)
            {
              v216 = (unint64_t *)&v428->__shared_owners_;
              do
                v217 = __ldaxr(v216);
              while (__stlxr(v217 - 1, v216));
              if (!v217)
              {
                ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                std::__shared_weak_count::__release_weak(v215);
              }
            }
            v218 = (std::__shared_weak_count *)*((_QWORD *)&v429 + 1);
            if (*((_QWORD *)&v429 + 1))
            {
              v219 = (unint64_t *)(*((_QWORD *)&v429 + 1) + 8);
              do
                v220 = __ldaxr(v219);
              while (__stlxr(v220 - 1, v219));
              if (!v220)
              {
                ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                std::__shared_weak_count::__release_weak(v218);
              }
            }
            v221 = v431;
            if (v431)
            {
              v222 = (unint64_t *)&v431->__shared_owners_;
              do
                v223 = __ldaxr(v222);
              while (__stlxr(v223 - 1, v222));
              if (!v223)
              {
                ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                std::__shared_weak_count::__release_weak(v221);
              }
            }
            v206 = (std::__shared_weak_count *)*((_QWORD *)&v432 + 1);
            if (!*((_QWORD *)&v432 + 1))
              goto LABEL_424;
            v224 = (unint64_t *)(*((_QWORD *)&v432 + 1) + 8);
            do
              v208 = __ldaxr(v224);
            while (__stlxr(v208 - 1, v224));
          }
          else
          {
            if (v190 != 1)
              goto LABEL_424;
            v450 = v496;
            if (*((_QWORD *)&v496 + 1))
            {
              v191 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
              do
                v192 = __ldxr(v191);
              while (__stxr(v192 + 1, v191));
            }
            v448 = v493;
            v449 = v494;
            if (v494)
            {
              v193 = (unint64_t *)&v494->__shared_owners_;
              do
                v194 = __ldxr(v193);
              while (__stxr(v194 + 1, v193));
            }
            v447 = v495;
            if (*((_QWORD *)&v495 + 1))
            {
              v195 = (unint64_t *)(*((_QWORD *)&v495 + 1) + 8);
              do
                v196 = __ldxr(v195);
              while (__stxr(v196 + 1, v195));
            }
            v445 = 0;
            v446 = 0;
            ((void (*)(uint64_t **, __int128 *, void **, __int128 *, uint64_t *, uint64_t, uint64_t))(*a1)[49])(a1, &v450, &v448, &v447, &v445, v170, 1);
            v197 = v446;
            if (v446)
            {
              v198 = (unint64_t *)&v446->__shared_owners_;
              do
                v199 = __ldaxr(v198);
              while (__stlxr(v199 - 1, v198));
              if (!v199)
              {
                ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                std::__shared_weak_count::__release_weak(v197);
              }
            }
            v200 = (std::__shared_weak_count *)*((_QWORD *)&v447 + 1);
            if (*((_QWORD *)&v447 + 1))
            {
              v201 = (unint64_t *)(*((_QWORD *)&v447 + 1) + 8);
              do
                v202 = __ldaxr(v201);
              while (__stlxr(v202 - 1, v201));
              if (!v202)
              {
                ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                std::__shared_weak_count::__release_weak(v200);
              }
            }
            v203 = v449;
            if (v449)
            {
              v204 = (unint64_t *)&v449->__shared_owners_;
              do
                v205 = __ldaxr(v204);
              while (__stlxr(v205 - 1, v204));
              if (!v205)
              {
                ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                std::__shared_weak_count::__release_weak(v203);
              }
            }
            v206 = (std::__shared_weak_count *)*((_QWORD *)&v450 + 1);
            if (!*((_QWORD *)&v450 + 1))
              goto LABEL_424;
            v207 = (unint64_t *)(*((_QWORD *)&v450 + 1) + 8);
            do
              v208 = __ldaxr(v207);
            while (__stlxr(v208 - 1, v207));
          }
        }
        else
        {
          v225 = (std::__shared_weak_count *)a2[1];
          v443 = *a2;
          v444 = v225;
          if (v225)
          {
            v226 = (unint64_t *)&v225->__shared_owners_;
            do
              v227 = __ldxr(v226);
            while (__stxr(v227 + 1, v226));
          }
          v442 = v496;
          if (*((_QWORD *)&v496 + 1))
          {
            v228 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
            do
              v229 = __ldxr(v228);
            while (__stxr(v229 + 1, v228));
          }
          v441 = v492;
          if (*((_QWORD *)&v492 + 1))
          {
            v230 = (unint64_t *)(*((_QWORD *)&v492 + 1) + 8);
            do
              v231 = __ldxr(v230);
            while (__stxr(v231 + 1, v230));
          }
          v439 = v493;
          v440 = v494;
          if (v494)
          {
            v232 = (unint64_t *)&v494->__shared_owners_;
            do
              v233 = __ldxr(v232);
            while (__stxr(v233 + 1, v232));
          }
          v438 = v495;
          if (*((_QWORD *)&v495 + 1))
          {
            v234 = (unint64_t *)(*((_QWORD *)&v495 + 1) + 8);
            do
              v235 = __ldxr(v234);
            while (__stxr(v235 + 1, v234));
          }
          v437 = v491;
          if (*((_QWORD *)&v491 + 1))
          {
            v236 = (unint64_t *)(*((_QWORD *)&v491 + 1) + 8);
            do
              v237 = __ldxr(v236);
            while (__stxr(v237 + 1, v236));
          }
          v435 = 0;
          v436 = 0;
          v433 = v459;
          v434 = v460;
          if (v460)
          {
            v238 = (unint64_t *)&v460->__shared_owners_;
            do
              v239 = __ldxr(v238);
            while (__stxr(v239 + 1, v238));
          }
          ((void (*)(uint64_t **, uint64_t *, __int128 *, __int128 *, void **, __int128 *, __int128 *, uint64_t *, uint64_t *, int))(*a1)[51])(a1, &v443, &v442, &v441, &v439, &v438, &v437, &v435, &v433, 1);
          v240 = v434;
          if (v434)
          {
            v241 = (unint64_t *)&v434->__shared_owners_;
            do
              v242 = __ldaxr(v241);
            while (__stlxr(v242 - 1, v241));
            if (!v242)
            {
              ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
              std::__shared_weak_count::__release_weak(v240);
            }
          }
          v243 = v436;
          if (v436)
          {
            v244 = (unint64_t *)&v436->__shared_owners_;
            do
              v245 = __ldaxr(v244);
            while (__stlxr(v245 - 1, v244));
            if (!v245)
            {
              ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
              std::__shared_weak_count::__release_weak(v243);
            }
          }
          v246 = (std::__shared_weak_count *)*((_QWORD *)&v437 + 1);
          if (*((_QWORD *)&v437 + 1))
          {
            v247 = (unint64_t *)(*((_QWORD *)&v437 + 1) + 8);
            do
              v248 = __ldaxr(v247);
            while (__stlxr(v248 - 1, v247));
            if (!v248)
            {
              ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
              std::__shared_weak_count::__release_weak(v246);
            }
          }
          v249 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
          if (*((_QWORD *)&v438 + 1))
          {
            v250 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
            do
              v251 = __ldaxr(v250);
            while (__stlxr(v251 - 1, v250));
            if (!v251)
            {
              ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
              std::__shared_weak_count::__release_weak(v249);
            }
          }
          v252 = v440;
          if (v440)
          {
            v253 = (unint64_t *)&v440->__shared_owners_;
            do
              v254 = __ldaxr(v253);
            while (__stlxr(v254 - 1, v253));
            if (!v254)
            {
              ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
              std::__shared_weak_count::__release_weak(v252);
            }
          }
          v255 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
          if (*((_QWORD *)&v441 + 1))
          {
            v256 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 8);
            do
              v257 = __ldaxr(v256);
            while (__stlxr(v257 - 1, v256));
            if (!v257)
            {
              ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
              std::__shared_weak_count::__release_weak(v255);
            }
          }
          v258 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
          if (*((_QWORD *)&v442 + 1))
          {
            v259 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
            do
              v260 = __ldaxr(v259);
            while (__stlxr(v260 - 1, v259));
            if (!v260)
            {
              ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
              std::__shared_weak_count::__release_weak(v258);
            }
          }
          v206 = v444;
          if (!v444)
            goto LABEL_424;
          v261 = (unint64_t *)&v444->__shared_owners_;
          do
            v208 = __ldaxr(v261);
          while (__stlxr(v208 - 1, v261));
        }
        if (!v208)
        {
          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
          std::__shared_weak_count::__release_weak(v206);
        }
LABEL_424:
        v262 = v495;
        v495 = v496;
        v496 = v262;
        v263 = v491;
        v491 = v492;
        v492 = v263;
      }
    }
    v264 = v460;
    if (v460)
    {
      v265 = (unint64_t *)&v460->__shared_owners_;
      do
        v266 = __ldaxr(v265);
      while (__stlxr(v266 - 1, v265));
      if (!v266)
      {
        ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
        std::__shared_weak_count::__release_weak(v264);
      }
    }
    v267 = (std::__shared_weak_count *)v488.__r_.__value_.__l.__size_;
    if (v488.__r_.__value_.__l.__size_)
    {
      v268 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 8);
      do
        v269 = __ldaxr(v268);
      while (__stlxr(v269 - 1, v268));
      if (!v269)
      {
        ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
        std::__shared_weak_count::__release_weak(v267);
      }
    }
    v270 = (std::__shared_weak_count *)v489.__r_.__value_.__l.__size_;
    if (v489.__r_.__value_.__l.__size_)
    {
      v271 = (unint64_t *)(v489.__r_.__value_.__l.__size_ + 8);
      do
        v272 = __ldaxr(v271);
      while (__stlxr(v272 - 1, v271));
      if (!v272)
      {
        ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
        std::__shared_weak_count::__release_weak(v270);
      }
    }
    v273 = (std::__shared_weak_count *)*((_QWORD *)&v491 + 1);
    if (*((_QWORD *)&v491 + 1))
    {
      v274 = (unint64_t *)(*((_QWORD *)&v491 + 1) + 8);
      do
        v275 = __ldaxr(v274);
      while (__stlxr(v275 - 1, v274));
      if (!v275)
      {
        ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
        std::__shared_weak_count::__release_weak(v273);
      }
    }
    v276 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
    if (*((_QWORD *)&v492 + 1))
    {
      v277 = (unint64_t *)(*((_QWORD *)&v492 + 1) + 8);
      do
        v278 = __ldaxr(v277);
      while (__stlxr(v278 - 1, v277));
      if (!v278)
      {
        ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
        std::__shared_weak_count::__release_weak(v276);
      }
    }
    v279 = v494;
    if (v494)
    {
      v280 = (unint64_t *)&v494->__shared_owners_;
      do
        v281 = __ldaxr(v280);
      while (__stlxr(v281 - 1, v280));
      if (!v281)
      {
        ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
        std::__shared_weak_count::__release_weak(v279);
      }
    }
    v282 = (std::__shared_weak_count *)*((_QWORD *)&v495 + 1);
    if (*((_QWORD *)&v495 + 1))
    {
      v283 = (unint64_t *)(*((_QWORD *)&v495 + 1) + 8);
      do
        v284 = __ldaxr(v283);
      while (__stlxr(v284 - 1, v283));
      if (!v284)
      {
        ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
        std::__shared_weak_count::__release_weak(v282);
      }
    }
    v285 = (std::__shared_weak_count *)*((_QWORD *)&v496 + 1);
    if (*((_QWORD *)&v496 + 1))
    {
      v286 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
      do
        v287 = __ldaxr(v286);
      while (__stlxr(v287 - 1, v286));
      if (!v287)
      {
        ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
        std::__shared_weak_count::__release_weak(v285);
      }
    }
    v288 = v498;
    if (v498)
    {
      v289 = (unint64_t *)&v498->__shared_owners_;
      do
        v290 = __ldaxr(v289);
      while (__stlxr(v290 - 1, v289));
      goto LABEL_636;
    }
    goto LABEL_638;
  }
  v291 = *a3;
  v293 = **a3;
  v292 = (*a3)[1];
  v536.__r_.__value_.__r.__words[0] = v293;
  v536.__r_.__value_.__l.__size_ = v292;
  if (v292)
  {
    v294 = (unint64_t *)(v292 + 8);
    do
      v295 = __ldxr(v294);
    while (__stxr(v295 + 1, v294));
    v291 = *a3;
  }
  v297 = v291[2];
  v296 = v291[3];
  v490.__r_.__value_.__r.__words[0] = v297;
  v490.__r_.__value_.__l.__size_ = v296;
  if (v296)
  {
    v298 = (unint64_t *)(v296 + 8);
    do
      v299 = __ldxr(v298);
    while (__stxr(v299 + 1, v298));
    v291 = *a3;
  }
  v301 = v291[4];
  v300 = v291[5];
  v539.__r_.__value_.__r.__words[0] = v301;
  v539.__r_.__value_.__l.__size_ = v300;
  if (v300)
  {
    v302 = (unint64_t *)(v300 + 8);
    do
      v303 = __ldxr(v302);
    while (__stxr(v303 + 1, v302));
  }
  v304 = *a4;
  v306 = (std::string::size_type)(*a4)[2];
  v305 = (std::string::size_type)(*a4)[3];
  v489.__r_.__value_.__r.__words[0] = v306;
  v489.__r_.__value_.__l.__size_ = v305;
  if (v305)
  {
    v307 = (unint64_t *)(v305 + 8);
    do
      v308 = __ldxr(v307);
    while (__stxr(v308 + 1, v307));
    v304 = *a4;
  }
  v310 = (std::string::size_type)v304[4];
  v309 = (std::string::size_type)v304[5];
  v488.__r_.__value_.__r.__words[0] = v310;
  v488.__r_.__value_.__l.__size_ = v309;
  if (v309)
  {
    v311 = (unint64_t *)(v309 + 8);
    do
      v312 = __ldxr(v311);
    while (__stxr(v312 + 1, v311));
  }
  v313 = *((_DWORD *)a1 + 76);
  switch(v313)
  {
    case 0:
      v352 = (std::__shared_weak_count *)a2[1];
      v521 = *a2;
      v522 = v352;
      if (v352)
      {
        v353 = (unint64_t *)&v352->__shared_owners_;
        do
          v354 = __ldxr(v353);
        while (__stxr(v354 + 1, v353));
      }
      v519 = v297;
      v520 = (std::__shared_weak_count *)v296;
      if (v296)
      {
        v355 = (unint64_t *)(v296 + 8);
        do
          v356 = __ldxr(v355);
        while (__stxr(v356 + 1, v355));
      }
      v517 = v301;
      v518 = (std::__shared_weak_count *)v300;
      if (v300)
      {
        v357 = (unint64_t *)(v300 + 8);
        do
          v358 = __ldxr(v357);
        while (__stxr(v358 + 1, v357));
      }
      v515 = v293;
      v516 = (std::__shared_weak_count *)v292;
      if (v292)
      {
        v359 = (unint64_t *)(v292 + 8);
        do
          v360 = __ldxr(v359);
        while (__stxr(v360 + 1, v359));
      }
      v513 = v306;
      v514 = (std::__shared_weak_count *)v305;
      if (v305)
      {
        v361 = (unint64_t *)(v305 + 8);
        do
          v362 = __ldxr(v361);
        while (__stxr(v362 + 1, v361));
      }
      v511 = v310;
      v512 = (std::__shared_weak_count *)v309;
      if (v309)
      {
        v363 = (unint64_t *)(v309 + 8);
        do
          v364 = __ldxr(v363);
        while (__stxr(v364 + 1, v363));
      }
      v509 = v11;
      v510 = v12;
      if (v12)
      {
        v365 = (unint64_t *)&v12->__shared_owners_;
        do
          v366 = __ldxr(v365);
        while (__stxr(v366 + 1, v365));
      }
      v508 = 0;
      v507 = 0;
      ((void (*)(uint64_t **, uint64_t *, std::string::size_type *, std::string::size_type *, std::string::size_type *, std::string::size_type *, std::string::size_type *, int **, uint64_t *, _DWORD))(*a1)[51])(a1, &v521, &v519, &v517, &v515, &v513, &v511, &v509, &v507, 0);
      v367 = v508;
      if (v508)
      {
        v368 = (unint64_t *)&v508->__shared_owners_;
        do
          v369 = __ldaxr(v368);
        while (__stlxr(v369 - 1, v368));
        if (!v369)
        {
          ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
          std::__shared_weak_count::__release_weak(v367);
        }
      }
      v370 = v510;
      if (v510)
      {
        v371 = (unint64_t *)&v510->__shared_owners_;
        do
          v372 = __ldaxr(v371);
        while (__stlxr(v372 - 1, v371));
        if (!v372)
        {
          ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
          std::__shared_weak_count::__release_weak(v370);
        }
      }
      v373 = v512;
      if (v512)
      {
        v374 = (unint64_t *)&v512->__shared_owners_;
        do
          v375 = __ldaxr(v374);
        while (__stlxr(v375 - 1, v374));
        if (!v375)
        {
          ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
          std::__shared_weak_count::__release_weak(v373);
        }
      }
      v376 = v514;
      if (v514)
      {
        v377 = (unint64_t *)&v514->__shared_owners_;
        do
          v378 = __ldaxr(v377);
        while (__stlxr(v378 - 1, v377));
        if (!v378)
        {
          ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
          std::__shared_weak_count::__release_weak(v376);
        }
      }
      v379 = v516;
      if (v516)
      {
        v380 = (unint64_t *)&v516->__shared_owners_;
        do
          v381 = __ldaxr(v380);
        while (__stlxr(v381 - 1, v380));
        if (!v381)
        {
          ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
          std::__shared_weak_count::__release_weak(v379);
        }
      }
      v382 = v518;
      if (v518)
      {
        v383 = (unint64_t *)&v518->__shared_owners_;
        do
          v384 = __ldaxr(v383);
        while (__stlxr(v384 - 1, v383));
        if (!v384)
        {
          ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
          std::__shared_weak_count::__release_weak(v382);
        }
      }
      v385 = v520;
      if (v520)
      {
        v386 = (unint64_t *)&v520->__shared_owners_;
        do
          v387 = __ldaxr(v386);
        while (__stlxr(v387 - 1, v386));
        if (!v387)
        {
          ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
          std::__shared_weak_count::__release_weak(v385);
        }
      }
      v331 = v522;
      if (!v522)
        break;
      v388 = (unint64_t *)&v522->__shared_owners_;
      do
        v333 = __ldaxr(v388);
      while (__stlxr(v333 - 1, v388));
LABEL_611:
      if (!v333)
      {
        ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
        std::__shared_weak_count::__release_weak(v331);
      }
      break;
    case 2:
      v505 = v297;
      v506 = (std::__shared_weak_count *)v296;
      if (v296)
      {
        v334 = (unint64_t *)(v296 + 8);
        do
          v335 = __ldxr(v334);
        while (__stxr(v335 + 1, v334));
      }
      v503 = v293;
      v504 = (std::__shared_weak_count *)v292;
      if (v292)
      {
        v336 = (unint64_t *)(v292 + 8);
        do
          v337 = __ldxr(v336);
        while (__stxr(v337 + 1, v336));
      }
      v501 = v306;
      v502 = (std::__shared_weak_count *)v305;
      if (v305)
      {
        v338 = (unint64_t *)(v305 + 8);
        do
          v339 = __ldxr(v338);
        while (__stxr(v339 + 1, v338));
      }
      v499 = v11;
      v500 = v12;
      if (v12)
      {
        v340 = (unint64_t *)&v12->__shared_owners_;
        do
          v341 = __ldxr(v340);
        while (__stxr(v341 + 1, v340));
      }
      ((void (*)(uint64_t **, std::string::size_type *, std::string::size_type *, std::string::size_type *, int **, _QWORD, _QWORD))(*a1)[50])(a1, &v505, &v503, &v501, &v499, 0, 0);
      v342 = v500;
      if (v500)
      {
        v343 = (unint64_t *)&v500->__shared_owners_;
        do
          v344 = __ldaxr(v343);
        while (__stlxr(v344 - 1, v343));
        if (!v344)
        {
          ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
          std::__shared_weak_count::__release_weak(v342);
        }
      }
      v345 = v502;
      if (v502)
      {
        v346 = (unint64_t *)&v502->__shared_owners_;
        do
          v347 = __ldaxr(v346);
        while (__stlxr(v347 - 1, v346));
        if (!v347)
        {
          ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
          std::__shared_weak_count::__release_weak(v345);
        }
      }
      v348 = v504;
      if (v504)
      {
        v349 = (unint64_t *)&v504->__shared_owners_;
        do
          v350 = __ldaxr(v349);
        while (__stlxr(v350 - 1, v349));
        if (!v350)
        {
          ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
          std::__shared_weak_count::__release_weak(v348);
        }
      }
      v331 = v506;
      if (!v506)
        break;
      v351 = (unint64_t *)&v506->__shared_owners_;
      do
        v333 = __ldaxr(v351);
      while (__stlxr(v333 - 1, v351));
      goto LABEL_611;
    case 1:
      v529 = v297;
      v530 = (std::__shared_weak_count *)v296;
      if (v296)
      {
        v314 = (unint64_t *)(v296 + 8);
        do
          v315 = __ldxr(v314);
        while (__stxr(v315 + 1, v314));
      }
      v527 = v293;
      v528 = (std::__shared_weak_count *)v292;
      if (v292)
      {
        v316 = (unint64_t *)(v292 + 8);
        do
          v317 = __ldxr(v316);
        while (__stxr(v317 + 1, v316));
      }
      v525 = v306;
      v526 = (std::__shared_weak_count *)v305;
      if (v305)
      {
        v318 = (unint64_t *)(v305 + 8);
        do
          v319 = __ldxr(v318);
        while (__stxr(v319 + 1, v318));
      }
      v523 = v11;
      v524 = v12;
      if (v12)
      {
        v320 = (unint64_t *)&v12->__shared_owners_;
        do
          v321 = __ldxr(v320);
        while (__stxr(v321 + 1, v320));
      }
      ((void (*)(uint64_t **, std::string::size_type *, std::string::size_type *, std::string::size_type *, int **, _QWORD, _QWORD))(*a1)[49])(a1, &v529, &v527, &v525, &v523, 0, 0);
      v322 = v524;
      if (v524)
      {
        v323 = (unint64_t *)&v524->__shared_owners_;
        do
          v324 = __ldaxr(v323);
        while (__stlxr(v324 - 1, v323));
        if (!v324)
        {
          ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
          std::__shared_weak_count::__release_weak(v322);
        }
      }
      v325 = v526;
      if (v526)
      {
        v326 = (unint64_t *)&v526->__shared_owners_;
        do
          v327 = __ldaxr(v326);
        while (__stlxr(v327 - 1, v326));
        if (!v327)
        {
          ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
          std::__shared_weak_count::__release_weak(v325);
        }
      }
      v328 = v528;
      if (v528)
      {
        v329 = (unint64_t *)&v528->__shared_owners_;
        do
          v330 = __ldaxr(v329);
        while (__stlxr(v330 - 1, v329));
        if (!v330)
        {
          ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
          std::__shared_weak_count::__release_weak(v328);
        }
      }
      v331 = v530;
      if (v530)
      {
        v332 = (unint64_t *)&v530->__shared_owners_;
        do
          v333 = __ldaxr(v332);
        while (__stlxr(v333 - 1, v332));
        goto LABEL_611;
      }
      break;
  }
  if (v488.__r_.__value_.__l.__size_)
  {
    v389 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 8);
    do
      v390 = __ldaxr(v389);
    while (__stlxr(v390 - 1, v389));
    if (!v390)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v488.__r_.__value_.__l.__size_ + 16))(v488.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v488.__r_.__value_.__l.__size_);
    }
  }
  if (v489.__r_.__value_.__l.__size_)
  {
    v391 = (unint64_t *)(v489.__r_.__value_.__l.__size_ + 8);
    do
      v392 = __ldaxr(v391);
    while (__stlxr(v392 - 1, v391));
    if (!v392)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v489.__r_.__value_.__l.__size_ + 16))(v489.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v489.__r_.__value_.__l.__size_);
    }
  }
  v393 = (std::__shared_weak_count *)v539.__r_.__value_.__l.__size_;
  if (v539.__r_.__value_.__l.__size_)
  {
    v394 = (unint64_t *)(v539.__r_.__value_.__l.__size_ + 8);
    do
      v395 = __ldaxr(v394);
    while (__stlxr(v395 - 1, v394));
    if (!v395)
    {
      ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
      std::__shared_weak_count::__release_weak(v393);
    }
  }
  v396 = (std::__shared_weak_count *)v490.__r_.__value_.__l.__size_;
  if (v490.__r_.__value_.__l.__size_)
  {
    v397 = (unint64_t *)(v490.__r_.__value_.__l.__size_ + 8);
    do
      v398 = __ldaxr(v397);
    while (__stlxr(v398 - 1, v397));
    if (!v398)
    {
      ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
      std::__shared_weak_count::__release_weak(v396);
    }
  }
  v288 = (std::__shared_weak_count *)v536.__r_.__value_.__l.__size_;
  if (v536.__r_.__value_.__l.__size_)
  {
    v399 = (unint64_t *)(v536.__r_.__value_.__l.__size_ + 8);
    do
      v290 = __ldaxr(v399);
    while (__stlxr(v290 - 1, v399));
LABEL_636:
    if (!v290)
    {
      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
      std::__shared_weak_count::__release_weak(v288);
    }
  }
LABEL_638:
  v400 = (std::__shared_weak_count *)*((_QWORD *)&v531 + 1);
  if (*((_QWORD *)&v531 + 1))
  {
    v401 = (unint64_t *)(*((_QWORD *)&v531 + 1) + 8);
    do
      v402 = __ldaxr(v401);
    while (__stlxr(v402 - 1, v401));
    if (!v402)
    {
      ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
      std::__shared_weak_count::__release_weak(v400);
    }
  }
  v403 = v533;
  if (v533)
  {
    v404 = (unint64_t *)&v533->__shared_owners_;
    do
      v405 = __ldaxr(v404);
    while (__stlxr(v405 - 1, v404));
    if (!v405)
    {
      ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
      std::__shared_weak_count::__release_weak(v403);
    }
  }
  v406 = v535;
  if (v535)
  {
    v407 = (unint64_t *)&v535->__shared_owners_;
    do
      v408 = __ldaxr(v407);
    while (__stlxr(v408 - 1, v407));
    if (!v408)
    {
      ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
      std::__shared_weak_count::__release_weak(v406);
    }
  }
  v409 = v538;
  if (v538)
  {
    v410 = (unint64_t *)&v538->__shared_owners_;
    do
      v411 = __ldaxr(v410);
    while (__stlxr(v411 - 1, v410));
    if (!v411)
    {
      ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
      std::__shared_weak_count::__release_weak(v409);
    }
  }
}

void sub_19166DCF0(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  if (*(char *)(v3 - 169) < 0)
    operator delete(*(void **)(v3 - 192));
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  if (*(char *)(v3 - 121) < 0)
    operator delete(*(void **)(v3 - 144));
  if (SLOBYTE(STACK[0x2AF]) < 0)
  {
    operator delete((void *)STACK[0x298]);
    if ((v2 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2D0]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2E0]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F0]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x300]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x310]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x320]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 240);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 224);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 208);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 160);
      _Unwind_Resume(a1);
    }
  }
  else if (!v2)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v1);
  goto LABEL_14;
}

uint64_t Espresso::generic_rnn_kernel::clear_weights(Espresso::generic_rnn_kernel *this)
{
  return std::vector<Espresso::generic_rnn_kernel::embedding_cluster>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 824, *((_QWORD *)this + 103));
}

void Espresso::generic_rnn_kernel::top_shapes_for_bottom_shapes(_DWORD *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  int v6;
  int v7;
  unsigned int v8;
  char *v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  void *__p;
  void *v26;
  uint64_t v27;
  _BYTE v28[8];
  _QWORD *v29;
  char v30;
  __int128 v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unsigned __int128 v54;
  int v55;
  int v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;

  *(_QWORD *)&v68 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v23 = **a2;
  v24 = (*a2)[1];
  __p = 0;
  v26 = 0;
  v27 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  if (a1[80])
  {
    v6 = a1[86];
    v7 = a1[82];
    v8 = a1[78];
    if (v7 <= 0)
      v7 = a1[78];
    if (a1[76])
    {
      *(_QWORD *)&v31 = 0x100000001;
      DWORD2(v31) = 1;
      HIDWORD(v31) = v6;
      v32 = v24 | 0xFFFFFFFF00000000;
      v33 = 0u;
      v34 = 0u;
      v35 = 0;
      v36 = 0x100000001;
      v37 = v8;
      v38 = 1;
      v39 = v32;
      v40 = 0u;
      v41 = 0u;
      v42 = 0;
      *(_QWORD *)&v43 = 0x100000001;
      *((_QWORD *)&v43 + 1) = v8 | 0x100000000;
      v44 = v32;
      v47 = 0;
      v46 = 0u;
      v45 = 0u;
      *(_QWORD *)&v48 = 0x100000001;
      *((_QWORD *)&v48 + 1) = v7 | 0x100000000;
      v49 = v24;
      v50 = -1;
      v51 = 0u;
      v52 = 0u;
      v53 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      v29 = a3;
      v30 = 0;
      v9 = (char *)operator new(0x100uLL);
      *a3 = v9;
      a3[1] = v9;
      a3[2] = v9 + 256;
      v10 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v31, (__int128 *)&v54, (uint64_t)v9);
      do
      {
        v11 = *(void **)((char *)&v52 + v10);
        if (v11)
        {
          *(_QWORD *)((char *)&v52 + v10 + 8) = v11;
          operator delete(v11);
        }
        v10 -= 64;
      }
      while (v10 != -256);
    }
    else
    {
      *(_QWORD *)&v31 = 0x100000001;
      DWORD2(v31) = 1;
      HIDWORD(v31) = v6;
      v32 = v24 | 0xFFFFFFFF00000000;
      v33 = 0u;
      v34 = 0u;
      v35 = 0;
      v36 = 0x100000001;
      v37 = v8;
      v38 = 1;
      v39 = v32;
      v40 = 0u;
      v41 = 0u;
      v42 = 0;
      *(_QWORD *)&v43 = 0x100000001;
      *((_QWORD *)&v43 + 1) = v8 | 0x100000000;
      v44 = v32;
      v47 = 0;
      v46 = 0u;
      v45 = 0u;
      *(_QWORD *)&v48 = 0x100000001;
      *((_QWORD *)&v48 + 1) = v7 | 0x100000000;
      v49 = v24;
      v50 = -1;
      v51 = 0u;
      v52 = 0u;
      v53 = 0;
      v54 = __PAIR128__(*((unint64_t *)&v43 + 1), 0x100000001);
      v55 = v24;
      v56 = -1;
      v58 = 0u;
      v57 = 0u;
      v59 = 0;
      v60 = 0x100000001;
      v61 = v8;
      v62 = 1;
      v63 = v24;
      v64 = -1;
      v65 = 0u;
      v66 = 0u;
      v67 = 0;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v29 = a3;
      v30 = 0;
      v17 = (char *)operator new(0x180uLL);
      *a3 = v17;
      a3[1] = v17;
      a3[2] = v17 + 384;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v31, &v68, (uint64_t)v17);
      v18 = 48;
      do
      {
        v19 = *(_QWORD **)&v28[v18 * 8];
        if (v19)
        {
          (&v29)[v18] = v19;
          operator delete(v19);
        }
        v18 -= 8;
      }
      while (v18 * 8);
    }
  }
  else
  {
    v12 = a1[78];
    if ((int)a1[82] <= 0)
      v13 = a1[78];
    else
      v13 = a1[82];
    if (a1[76])
    {
      *(_QWORD *)&v31 = 0x100000001;
      *((_QWORD *)&v31 + 1) = __PAIR64__(HIDWORD(v23), v13);
      v32 = 0xFFFFFFFF00000001;
      v33 = 0u;
      v34 = 0u;
      v35 = 0;
      v36 = 0x100000001;
      v37 = v12;
      v38 = HIDWORD(v23);
      v39 = 0xFFFFFFFF00000001;
      v40 = 0u;
      v41 = 0u;
      v42 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      v29 = a3;
      v30 = 0;
      v14 = (char *)operator new(0x80uLL);
      *a3 = v14;
      a3[1] = v14;
      a3[2] = v14 + 128;
      v15 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v31, &v43, (uint64_t)v14);
      do
      {
        v16 = *(void **)((char *)&v41 + v15);
        if (v16)
        {
          *(_QWORD *)((char *)&v41 + v15 + 8) = v16;
          operator delete(v16);
        }
        v15 -= 64;
      }
      while (v15 != -128);
    }
    else
    {
      *(_QWORD *)&v31 = 0x100000001;
      *((_QWORD *)&v31 + 1) = __PAIR64__(HIDWORD(v23), v13);
      v32 = 0xFFFFFFFF00000001;
      v33 = 0u;
      v34 = 0u;
      v35 = 0;
      v36 = 0x100000001;
      v37 = v12;
      v38 = HIDWORD(v23);
      v39 = 0xFFFFFFFF00000001;
      v40 = 0u;
      v41 = 0u;
      v42 = 0;
      *(_QWORD *)&v43 = 0x100000001;
      *((_QWORD *)&v43 + 1) = __PAIR64__(HIDWORD(v23), v12);
      v44 = 0xFFFFFFFF00000001;
      v45 = 0u;
      v46 = 0u;
      v47 = 0;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v29 = a3;
      v30 = 0;
      v20 = (char *)operator new(0xC0uLL);
      *a3 = v20;
      a3[1] = v20;
      a3[2] = v20 + 192;
      v21 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v31, &v48, (uint64_t)v20);
      do
      {
        v22 = *(void **)((char *)&v46 + v21);
        if (v22)
        {
          *(_QWORD *)((char *)&v46 + v21 + 8) = v22;
          operator delete(v22);
        }
        v21 -= 64;
      }
      while (v21 != -192);
    }
  }
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
}

void sub_19166E660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;

  v22 = v21;
  *(_QWORD *)(v20 + 8) = v22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a18);
  v24 = 0;
  while (1)
  {
    v25 = *(void **)(&a20 + v24 + 168);
    if (v25)
    {
      *(_QWORD *)(&a20 + v24 + 176) = v25;
      operator delete(v25);
    }
    v24 -= 64;
    if (v24 == -192)
    {
      if (__p)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t Espresso::generic_rnn_kernel::number_of_top_blobs(Espresso::generic_rnn_kernel *this)
{
  unsigned int v1;
  unsigned int v2;

  if (*((_DWORD *)this + 80))
    v1 = 6;
  else
    v1 = 3;
  if (*((_DWORD *)this + 80))
    v2 = 4;
  else
    v2 = 2;
  if (*((_DWORD *)this + 76))
    return v2;
  else
    return v1;
}

uint64_t Espresso::generic_rnn_kernel::supports_weight_key()
{
  return 1;
}

const char *Espresso::generic_rnn_kernel::kernel_type_str(Espresso::generic_rnn_kernel *this)
{
  return "rnn";
}

void Espresso::generic_rnn_kernel::weight_names_and_shapes(Espresso::generic_rnn_kernel *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  _OWORD *v6;
  void *v7;
  _QWORD *v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  int v13;
  void *v14;
  _QWORD *v15;
  __int128 v16;
  _OWORD *v17;
  void *v18;
  _QWORD *v19;
  _OWORD *v20;
  void *v21;
  _QWORD *v22;
  __int128 v23;
  _OWORD *v24;
  void *v25;
  _QWORD *v26;
  _OWORD *v27;
  void *v28;
  _QWORD *v29;
  int v30;
  _OWORD *v31;
  void *v32;
  _QWORD *v33;
  _OWORD *v34;
  void *v35;
  _QWORD *v36;
  __int128 v37;
  int v38;
  _OWORD *v39;
  void *v40;
  _QWORD *v41;
  int v42;
  _OWORD *v43;
  void *v44;
  _QWORD *v45;
  __int128 v46;
  int v47;
  _OWORD *v48;
  void *v49;
  _QWORD *v50;
  _OWORD *v51;
  void *v52;
  _QWORD *v53;
  __int128 v54;
  int v55;
  _OWORD *v56;
  void *v57;
  _QWORD *v58;
  int v59;
  _OWORD *v60;
  void *v61;
  _QWORD *v62;
  __int128 v63;
  int v64;
  _OWORD *v65;
  void *v66;
  _QWORD *v67;
  __int128 v68;
  int v69;
  _OWORD *v70;
  void *v71;
  _QWORD *v72;
  __int128 v73;
  void *__p[2];
  char v75;
  void **v76;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v4 = *((_DWORD *)this + 78);
  v5 = *((_DWORD *)this + 76);
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "b");
    v76 = __p;
    v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    v13 = 4 * v4;
    v15 = v12 + 6;
    v14 = (void *)*((_QWORD *)v12 + 12);
    *((_DWORD *)v12 + 14) = 4 * v4;
    *(_QWORD *)&v16 = 0x100000001;
    *((_QWORD *)&v16 + 1) = 0x100000001;
    *(_OWORD *)((char *)v12 + 60) = v16;
    *((_DWORD *)v12 + 19) = -1;
    *((_QWORD *)v12 + 10) = 0;
    *((_QWORD *)v12 + 11) = 0;
    if (v14)
    {
      *((_QWORD *)v12 + 13) = v14;
      operator delete(v14);
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
    }
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
    if (v75 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "W_h");
    v76 = __p;
    v17 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    v19 = v17 + 6;
    v18 = (void *)*((_QWORD *)v17 + 12);
    *((_DWORD *)v17 + 14) = v4;
    *((_DWORD *)v17 + 15) = v13;
    v73 = xmmword_191A8D8A0;
    v17[4] = xmmword_191A8D8A0;
    *((_QWORD *)v17 + 10) = 0;
    *((_QWORD *)v17 + 11) = 0;
    if (v18)
    {
      *((_QWORD *)v17 + 13) = v18;
      operator delete(v18);
      *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
    }
    *v19 = 0;
    v19[1] = 0;
    v19[2] = 0;
    if (v75 < 0)
      operator delete(__p[0]);
    goto LABEL_28;
  }
  if (v5 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "b");
    v76 = __p;
    v20 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    v13 = 3 * v4;
    v22 = v20 + 6;
    v21 = (void *)*((_QWORD *)v20 + 12);
    *((_DWORD *)v20 + 14) = 3 * v4;
    *(_QWORD *)&v23 = 0x100000001;
    *((_QWORD *)&v23 + 1) = 0x100000001;
    *(_OWORD *)((char *)v20 + 60) = v23;
    *((_DWORD *)v20 + 19) = -1;
    *((_QWORD *)v20 + 10) = 0;
    *((_QWORD *)v20 + 11) = 0;
    if (v21)
    {
      *((_QWORD *)v20 + 13) = v21;
      operator delete(v21);
      *v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
    }
    *v22 = 0;
    v22[1] = 0;
    v22[2] = 0;
    if (v75 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "W_h");
    v76 = __p;
    v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    v26 = v24 + 6;
    v25 = (void *)*((_QWORD *)v24 + 12);
    *((_DWORD *)v24 + 14) = v4;
    *((_DWORD *)v24 + 15) = v13;
    v73 = xmmword_191A8D8A0;
    v24[4] = xmmword_191A8D8A0;
    *((_QWORD *)v24 + 10) = 0;
    *((_QWORD *)v24 + 11) = 0;
    if (v25)
    {
      *((_QWORD *)v24 + 13) = v25;
      operator delete(v25);
      *v26 = 0;
      v26[1] = 0;
      v26[2] = 0;
    }
    *v26 = 0;
    v26[1] = 0;
    v26[2] = 0;
    if (v75 < 0)
      operator delete(__p[0]);
LABEL_28:
    std::string::basic_string[abi:ne180100]<0>(__p, "W_x");
    v76 = __p;
    v27 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    v29 = v27 + 6;
    v28 = (void *)*((_QWORD *)v27 + 12);
    *((_DWORD *)v27 + 14) = v4;
    *((_DWORD *)v27 + 15) = v13;
    v27[4] = v73;
    *((_QWORD *)v27 + 10) = 0;
    *((_QWORD *)v27 + 11) = 0;
    if (v28)
    {
      *((_QWORD *)v27 + 13) = v28;
      operator delete(v28);
      *v29 = 0;
      v29[1] = 0;
      v29[2] = 0;
    }
    *v29 = 0;
    v29[1] = 0;
    v29[2] = 0;
    goto LABEL_31;
  }
  if (v5 != 1)
    goto LABEL_33;
  std::string::basic_string[abi:ne180100]<0>(__p, "b");
  v76 = __p;
  v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
  v8 = v6 + 6;
  v7 = (void *)*((_QWORD *)v6 + 12);
  *((_DWORD *)v6 + 14) = v4;
  *(_QWORD *)&v9 = 0x100000001;
  *((_QWORD *)&v9 + 1) = 0x100000001;
  *(_OWORD *)((char *)v6 + 60) = v9;
  *((_DWORD *)v6 + 19) = -1;
  *((_QWORD *)v6 + 10) = 0;
  *((_QWORD *)v6 + 11) = 0;
  if (v7)
  {
    *((_QWORD *)v6 + 13) = v7;
    operator delete(v7);
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  if (v75 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "W_h");
  v76 = __p;
  v10 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
  *((_DWORD *)v10 + 14) = v4;
  *((_DWORD *)v10 + 15) = v4;
  v10[4] = xmmword_191A8D8A0;
  *((_QWORD *)v10 + 10) = 0;
  *((_QWORD *)v10 + 11) = 0;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v10 + 96, 0, 0, 0);
  if (v75 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "W_x");
  v76 = __p;
  v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
  *((_DWORD *)v11 + 14) = v4;
  *((_DWORD *)v11 + 15) = v4;
  v11[4] = xmmword_191A8D8A0;
  *((_QWORD *)v11 + 10) = 0;
  *((_QWORD *)v11 + 11) = 0;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v11 + 96, 0, 0, 0);
LABEL_31:
  if (v75 < 0)
    operator delete(__p[0]);
LABEL_33:
  v30 = *((_DWORD *)this + 81);
  if (v30 >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "W_embedding_in");
    v76 = __p;
    v31 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    v33 = v31 + 6;
    v32 = (void *)*((_QWORD *)v31 + 12);
    *((_DWORD *)v31 + 14) = v30;
    *((_DWORD *)v31 + 15) = v4;
    v31[4] = xmmword_191A8D8A0;
    *((_QWORD *)v31 + 10) = 0;
    *((_QWORD *)v31 + 11) = 0;
    if (v32)
    {
      *((_QWORD *)v31 + 13) = v32;
      operator delete(v32);
      *v33 = 0;
      v33[1] = 0;
      v33[2] = 0;
    }
    *v33 = 0;
    v33[1] = 0;
    v33[2] = 0;
    if (v75 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "b_embedding_in");
    v76 = __p;
    v34 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    v36 = v34 + 6;
    v35 = (void *)*((_QWORD *)v34 + 12);
    *((_DWORD *)v34 + 14) = v4;
    *(_QWORD *)&v37 = 0x100000001;
    *((_QWORD *)&v37 + 1) = 0x100000001;
    *(_OWORD *)((char *)v34 + 60) = v37;
    *((_DWORD *)v34 + 19) = -1;
    *((_QWORD *)v34 + 10) = 0;
    *((_QWORD *)v34 + 11) = 0;
    if (v35)
    {
      *((_QWORD *)v34 + 13) = v35;
      operator delete(v35);
      *v36 = 0;
      v36[1] = 0;
      v36[2] = 0;
    }
    *v36 = 0;
    v36[1] = 0;
    v36[2] = 0;
    if (v75 < 0)
      operator delete(__p[0]);
  }
  v38 = *((_DWORD *)this + 82);
  if (v38 >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "W_embedding_out");
    v76 = __p;
    v39 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    v41 = v39 + 6;
    v40 = (void *)*((_QWORD *)v39 + 12);
    *((_DWORD *)v39 + 14) = v4;
    *((_DWORD *)v39 + 15) = v38;
    v39[4] = xmmword_191A8D8A0;
    *((_QWORD *)v39 + 10) = 0;
    *((_QWORD *)v39 + 11) = 0;
    if (v40)
    {
      *((_QWORD *)v39 + 13) = v40;
      operator delete(v40);
      *v41 = 0;
      v41[1] = 0;
      v41[2] = 0;
    }
    *v41 = 0;
    v41[1] = 0;
    v41[2] = 0;
    if (v75 < 0)
      operator delete(__p[0]);
    v42 = *((_DWORD *)this + 82);
    std::string::basic_string[abi:ne180100]<0>(__p, "b_embedding_out");
    v76 = __p;
    v43 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    v45 = v43 + 6;
    v44 = (void *)*((_QWORD *)v43 + 12);
    *((_DWORD *)v43 + 14) = v42;
    *(_QWORD *)&v46 = 0x100000001;
    *((_QWORD *)&v46 + 1) = 0x100000001;
    *(_OWORD *)((char *)v43 + 60) = v46;
    *((_DWORD *)v43 + 19) = -1;
    *((_QWORD *)v43 + 10) = 0;
    *((_QWORD *)v43 + 11) = 0;
    if (v44)
    {
      *((_QWORD *)v43 + 13) = v44;
      operator delete(v44);
      *v45 = 0;
      v45[1] = 0;
      v45[2] = 0;
    }
    *v45 = 0;
    v45[1] = 0;
    v45[2] = 0;
    if (v75 < 0)
      operator delete(__p[0]);
  }
  if (*((_DWORD *)this + 80))
  {
    v47 = *((_DWORD *)this + 82);
    std::string::basic_string[abi:ne180100]<0>(__p, "W_embedding_in_write");
    v76 = __p;
    v48 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    v50 = v48 + 6;
    v49 = (void *)*((_QWORD *)v48 + 12);
    *((_DWORD *)v48 + 14) = v47;
    *((_DWORD *)v48 + 15) = v4;
    v48[4] = xmmword_191A8D8A0;
    *((_QWORD *)v48 + 10) = 0;
    *((_QWORD *)v48 + 11) = 0;
    if (v49)
    {
      *((_QWORD *)v48 + 13) = v49;
      operator delete(v49);
      *v50 = 0;
      v50[1] = 0;
      v50[2] = 0;
    }
    *v50 = 0;
    v50[1] = 0;
    v50[2] = 0;
    if (v75 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "b_embedding_in_write");
    v76 = __p;
    v51 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    v53 = v51 + 6;
    v52 = (void *)*((_QWORD *)v51 + 12);
    *((_DWORD *)v51 + 14) = v4;
    *(_QWORD *)&v54 = 0x100000001;
    *((_QWORD *)&v54 + 1) = 0x100000001;
    *(_OWORD *)((char *)v51 + 60) = v54;
    *((_DWORD *)v51 + 19) = -1;
    *((_QWORD *)v51 + 10) = 0;
    *((_QWORD *)v51 + 11) = 0;
    if (v52)
    {
      *((_QWORD *)v51 + 13) = v52;
      operator delete(v52);
      *v53 = 0;
      v53[1] = 0;
      v53[2] = 0;
    }
    *v53 = 0;
    v53[1] = 0;
    v53[2] = 0;
    if (v75 < 0)
      operator delete(__p[0]);
  }
  v55 = *((_DWORD *)this + 83);
  if (v55)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "W_embedding_out_tree");
    v76 = __p;
    v56 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    v58 = v56 + 6;
    v57 = (void *)*((_QWORD *)v56 + 12);
    *((_DWORD *)v56 + 14) = v4;
    *((_DWORD *)v56 + 15) = v55;
    v56[4] = xmmword_191A8D8A0;
    *((_QWORD *)v56 + 10) = 0;
    *((_QWORD *)v56 + 11) = 0;
    if (v57)
    {
      *((_QWORD *)v56 + 13) = v57;
      operator delete(v57);
      *v58 = 0;
      v58[1] = 0;
      v58[2] = 0;
    }
    *v58 = 0;
    v58[1] = 0;
    v58[2] = 0;
    if (v75 < 0)
      operator delete(__p[0]);
    v59 = *((_DWORD *)this + 83);
    std::string::basic_string[abi:ne180100]<0>(__p, "b_embedding_out_tree");
    v76 = __p;
    v60 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    v62 = v60 + 6;
    v61 = (void *)*((_QWORD *)v60 + 12);
    *((_DWORD *)v60 + 14) = v59;
    *(_QWORD *)&v63 = 0x100000001;
    *((_QWORD *)&v63 + 1) = 0x100000001;
    *(_OWORD *)((char *)v60 + 60) = v63;
    *((_DWORD *)v60 + 19) = -1;
    *((_QWORD *)v60 + 10) = 0;
    *((_QWORD *)v60 + 11) = 0;
    if (v61)
    {
      *((_QWORD *)v60 + 13) = v61;
      operator delete(v61);
      *v62 = 0;
      v62[1] = 0;
      v62[2] = 0;
    }
    *v62 = 0;
    v62[1] = 0;
    v62[2] = 0;
    if (v75 < 0)
      operator delete(__p[0]);
    v64 = *((_DWORD *)this + 83);
    std::string::basic_string[abi:ne180100]<0>(__p, "label_embedding_out_tree");
    v76 = __p;
    v65 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    v67 = v65 + 6;
    v66 = (void *)*((_QWORD *)v65 + 12);
    *((_DWORD *)v65 + 14) = v64;
    *(_QWORD *)&v68 = 0x100000001;
    *((_QWORD *)&v68 + 1) = 0x100000001;
    *(_OWORD *)((char *)v65 + 60) = v68;
    *((_DWORD *)v65 + 19) = -1;
    *((_QWORD *)v65 + 10) = 0;
    *((_QWORD *)v65 + 11) = 0;
    if (v66)
    {
      *((_QWORD *)v65 + 13) = v66;
      operator delete(v66);
      *v67 = 0;
      v67[1] = 0;
      v67[2] = 0;
    }
    *v67 = 0;
    v67[1] = 0;
    v67[2] = 0;
    if (v75 < 0)
      operator delete(__p[0]);
    v69 = *((_DWORD *)this + 83);
    std::string::basic_string[abi:ne180100]<0>(__p, "W_embedding_in_write");
    v76 = __p;
    v70 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    v72 = v70 + 6;
    v71 = (void *)*((_QWORD *)v70 + 12);
    *((_DWORD *)v70 + 14) = v69;
    *((_DWORD *)v70 + 15) = v4;
    v70[4] = xmmword_191A8D8A0;
    *((_QWORD *)v70 + 10) = 0;
    *((_QWORD *)v70 + 11) = 0;
    if (v71)
    {
      *((_QWORD *)v70 + 13) = v71;
      operator delete(v71);
      *v72 = 0;
      v72[1] = 0;
      v72[2] = 0;
    }
    *v72 = 0;
    v72[1] = 0;
    v72[2] = 0;
    if (v75 < 0)
      operator delete(__p[0]);
  }
}

void sub_19166F0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v16, *(char **)(v16 + 8));
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::rnn_params,Espresso::abstract_kernel_with_named_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void Espresso::generic_rnn_kernel::__launch_lstm_generic(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t *a9, int a10)
{
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _OWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _OWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _OWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  __int128 v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  _OWORD *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _OWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _OWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _OWORD *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _OWORD *v76;
  _OWORD *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::runtime_error *exception;
  _OWORD *v105[2];
  int32x2_t *v106;
  std::__shared_weak_count *v107;
  void *v108[2];
  char v109;
  __int128 *v110;
  std::__shared_weak_count *v111;
  __int128 *v112;
  std::__shared_weak_count *v113;
  void *__p[2];
  char v115;
  void *v116[2];
  char v117;
  __int128 *v118;
  std::__shared_weak_count *v119;
  __int128 v120;
  char v121;
  int32x2_t *v122;
  std::__shared_weak_count *v123;
  __int128 v124;
  __int128 *v125;

  v14 = *a8;
  if (*a8)
    v15 = *(_DWORD *)(v14 + 20);
  else
    v15 = 1;
  v16 = *(_DWORD *)(a1 + 312);
  v17 = (std::__shared_weak_count *)a8[1];
  *(_QWORD *)&v124 = *a8;
  *((_QWORD *)&v124 + 1) = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v14 = *a8;
  }
  if (v14)
  {
    if (*(int *)(a1 + 324) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v120, "W_embedding_in");
      v118 = &v120;
      v20 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v120, &v118);
      v21 = (std::__shared_weak_count *)*((_QWORD *)v20 + 8);
      v122 = (int32x2_t *)*((_QWORD *)v20 + 7);
      v123 = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      if (v121 < 0)
        operator delete((void *)v120);
      std::string::basic_string[abi:ne180100]<0>(&v120, "b_embedding_in");
      v112 = &v120;
      v24 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v120, &v112);
      v25 = (std::__shared_weak_count *)*((_QWORD *)v24 + 8);
      v118 = (__int128 *)*((_QWORD *)v24 + 7);
      v119 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      if (v121 < 0)
        operator delete((void *)v120);
      std::string::basic_string[abi:ne180100]<0>(__p, "x_p_tmp");
      Espresso::generic_rnn_kernel::cached_temp_blob(a1, __p, 1u, 1u, v16, v15, &v120);
      v28 = v120;
      v120 = 0uLL;
      v124 = v28;
      if (v17)
      {
        v29 = (unint64_t *)&v17->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
      if (*((_QWORD *)&v120 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (v115 < 0)
        operator delete(__p[0]);
      Espresso::matmul_shorthand::operator()(a1 + 376, a2, (uint64_t *)&v124, &v122, &v118, a8);
      v34 = v119;
      if (v119)
      {
        v35 = (unint64_t *)&v119->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = v123;
      if (v123)
      {
        v38 = (unint64_t *)&v123->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        goto LABEL_77;
      }
    }
    goto LABEL_79;
  }
  std::string::basic_string[abi:ne180100]<0>(&v120, "W_embedding_in_write");
  v118 = &v120;
  v40 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v120, &v118);
  v41 = (std::__shared_weak_count *)*((_QWORD *)v40 + 8);
  v122 = (int32x2_t *)*((_QWORD *)v40 + 7);
  v123 = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  if (v121 < 0)
    operator delete((void *)v120);
  std::string::basic_string[abi:ne180100]<0>(&v120, "b_embedding_in_write");
  v112 = &v120;
  v44 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v120, &v112);
  v45 = (std::__shared_weak_count *)*((_QWORD *)v44 + 8);
  v118 = (__int128 *)*((_QWORD *)v44 + 7);
  v119 = v45;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  if (v121 < 0)
  {
    operator delete((void *)v120);
    if (a10)
      goto LABEL_57;
  }
  else if (a10)
  {
    goto LABEL_57;
  }
  std::string::basic_string[abi:ne180100]<0>(&v120, "W_embedding_in");
  v112 = &v120;
  v48 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v120, &v112);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v122, *((_QWORD *)v48 + 7), *((_QWORD *)v48 + 8));
  if (v121 < 0)
    operator delete((void *)v120);
  std::string::basic_string[abi:ne180100]<0>(&v120, "b_embedding_in");
  v112 = &v120;
  v49 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v120, &v112);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v118, *((_QWORD *)v49 + 7), *((_QWORD *)v49 + 8));
  if (v121 < 0)
    operator delete((void *)v120);
LABEL_57:
  std::string::basic_string[abi:ne180100]<0>(v116, "x_p_tmp");
  Espresso::generic_rnn_kernel::cached_temp_blob(a1, v116, 1u, 1u, v16, v15, &v120);
  v50 = v120;
  v120 = 0uLL;
  v124 = v50;
  if (v17)
  {
    v51 = (unint64_t *)&v17->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
  if (*((_QWORD *)&v120 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v117 < 0)
    operator delete(v116[0]);
  *(_DWORD *)(a1 + 732) = 1;
  Espresso::matmul_shorthand::operator()(a1 + 664, a2, (uint64_t *)&v124, &v122, &v118, a9);
  v56 = v119;
  if (v119)
  {
    v57 = (unint64_t *)&v119->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v37 = v123;
  if (v123)
  {
    v59 = (unint64_t *)&v123->__shared_owners_;
    do
      v39 = __ldaxr(v59);
    while (__stlxr(v39 - 1, v59));
LABEL_77:
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_79:
  std::string::basic_string[abi:ne180100]<0>(&v120, "W_h");
  v118 = &v120;
  v60 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v120, &v118);
  v61 = (std::__shared_weak_count *)*((_QWORD *)v60 + 8);
  v122 = (int32x2_t *)*((_QWORD *)v60 + 7);
  v123 = v61;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  if (v121 < 0)
    operator delete((void *)v120);
  std::string::basic_string[abi:ne180100]<0>(&v120, "W_x");
  v112 = &v120;
  v64 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v120, &v112);
  v65 = (std::__shared_weak_count *)*((_QWORD *)v64 + 8);
  v118 = (__int128 *)*((_QWORD *)v64 + 7);
  v119 = v65;
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  if (v121 < 0)
    operator delete((void *)v120);
  std::string::basic_string[abi:ne180100]<0>(&v120, "b");
  v110 = &v120;
  v68 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v120, &v110);
  v69 = (std::__shared_weak_count *)*((_QWORD *)v68 + 8);
  v112 = (__int128 *)*((_QWORD *)v68 + 7);
  v113 = v69;
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  if (v121 < 0)
    operator delete((void *)v120);
  std::string::basic_string[abi:ne180100]<0>(v108, "ifog");
  Espresso::generic_rnn_kernel::cached_temp_blob(a1, v108, 1u, 1u, 4 * v16, v15, &v110);
  if (v109 < 0)
    operator delete(v108[0]);
  v120 = 0uLL;
  Espresso::matmul_shorthand::operator()(a1 + 448, a2, (uint64_t *)&v110, &v122, &v120, a6);
  *(_DWORD *)(a1 + 584) = 1;
  Espresso::matmul_shorthand::operator()(a1 + 520, a2, (uint64_t *)&v110, (int32x2_t **)&v118, &v112, (uint64_t *)&v124);
  (*(void (**)(uint64_t, _QWORD *, uint64_t *, uint64_t, uint64_t, __int128 **))(*(_QWORD *)a1 + 416))(a1, a2, a3, a4, a7, &v110);
  if (*(int *)(a1 + 328) < 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v120, "W_embedding_out");
  v105[0] = &v120;
  v72 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v120, v105);
  v73 = (std::__shared_weak_count *)*((_QWORD *)v72 + 8);
  v106 = (int32x2_t *)*((_QWORD *)v72 + 7);
  v107 = v73;
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  if (v121 < 0)
    operator delete((void *)v120);
  std::string::basic_string[abi:ne180100]<0>(&v120, "b_embedding_out");
  v125 = &v120;
  v76 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v120, &v125);
  v77 = (_OWORD *)*((_QWORD *)v76 + 8);
  v105[0] = *((_OWORD **)v76 + 7);
  v105[1] = v77;
  if (v77)
  {
    v78 = (unint64_t *)v77 + 1;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  if (v121 < 0)
    operator delete((void *)v120);
  Espresso::matmul_shorthand::operator()(a1 + 592, a2, a5, &v106, v105, a3);
  if (v77)
  {
    v80 = (unint64_t *)v77 + 1;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      (*(void (**)(_OWORD *))(*(_QWORD *)v77 + 16))(v77);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v77);
    }
  }
  v82 = v107;
  if (v107)
  {
    v83 = (unint64_t *)&v107->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v111;
  if (v111)
  {
    v86 = (unint64_t *)&v111->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v113;
  if (v113)
  {
    v89 = (unint64_t *)&v113->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v119;
  if (v119)
  {
    v92 = (unint64_t *)&v119->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v123;
  if (v123)
  {
    v95 = (unint64_t *)&v123->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
}

void sub_19166FAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 153) < 0)
    operator delete(*(void **)(v40 - 176));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 128);
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_kernel::cached_temp_blob(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, unsigned int a6@<W5>, _QWORD *a7@<X8>)
{
  _QWORD *v11;
  uint64_t *v14;
  uint64_t *v15;
  _DWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  _BOOL8 v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  unint64_t v44;
  __int128 v45;
  void *__p[2];
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;

  v11 = a2;
  *(_QWORD *)&v43 = a2;
  v14 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 800), a2, (__int128 **)&v43);
  v15 = v14;
  v17 = v14 + 7;
  v16 = (_DWORD *)v14[7];
  if (v16 && v16[2] == a3 && v16[3] == a4 && v16[4] == a5 && v16[5] == a6)
  {
    v18 = v14[8];
    *a7 = v16;
    a7[1] = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    return;
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8)
                                                                          + 24))(&v43, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a1 + 8, *(unsigned int *)(a1 + 368));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v17, &v43);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *((char *)v11 + 23);
  if ((v24 & 0x80000000) == 0)
  {
    if (v24 != 6)
      goto LABEL_23;
LABEL_20:
    v25 = 1634887533;
    v26 = bswap32(*(_DWORD *)v11);
    if (v26 == 1634887533 && (v26 = bswap32(*((unsigned __int16 *)v11 + 2)) >> 16, v25 = 24952, v26 == 24952))
    {
      v27 = 0;
    }
    else if (v26 < v25)
    {
      v27 = -1;
    }
    else
    {
      v27 = 1;
    }
    v28 = v27 != 0;
    goto LABEL_28;
  }
  if (v11[1] == 6)
  {
    v11 = (_QWORD *)*v11;
    goto LABEL_20;
  }
LABEL_23:
  v28 = 1;
LABEL_28:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _BOOL8))(*(_QWORD *)a1 + 24))(&v48, a1, 1, v28);
  v29 = *v17;
  v47 = 0;
  *(_OWORD *)__p = 0u;
  v45 = 0u;
  *(_QWORD *)&v43 = __PAIR64__(a4, a3);
  *((_QWORD *)&v43 + 1) = __PAIR64__(a6, a5);
  v44 = 0xFFFFFFFF00000001;
  v41 = v48;
  v42 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v29 + 16))(v29, &v43, &v41);
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = v15[8];
  *a7 = v15[7];
  a7[1] = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = v49;
  if (v49)
  {
    v39 = (unint64_t *)&v49->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_19166FF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t Espresso::matmul_shorthand::operator()(uint64_t a1, _QWORD *a2, uint64_t *a3, int32x2_t **a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (***v25)(_QWORD);
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::runtime_error *exception;
  char *v86;
  std::__shared_weak_count *v87;
  char *v88;
  std::__shared_weak_count *v89;
  int v90;
  int v91;
  void *__p[2];
  char v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  __int128 v96;
  int32x2_t v97;
  _DWORD v98[8];
  char v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107[4];

  v107[1] = *MEMORY[0x1E0C80C00];
  v13 = (uint64_t *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 48);
  if (!v12)
    goto LABEL_9;
  if (*(_QWORD *)(*a3 + 72) != *(_QWORD *)(v12 + 8))
  {
    v97 = 0;
    *(_QWORD *)v98 = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 48, (__int128 *)&v97);
    v14 = *(std::__shared_weak_count **)v98;
    if (*(_QWORD *)v98)
    {
      v15 = (unint64_t *)(*(_QWORD *)v98 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (!*v13)
    {
LABEL_9:
      v99 = 0;
      __asm { FMOV            V1.2S, #1.0 }
      v101 = 0xFFFFFFFF00000000;
      v102 = _D1;
      v103 = 0;
      v98[5] = 0;
      v98[7] = 0;
      v104 = 0u;
      v105 = 0u;
      v97 = vrev64_s32((*a4)[1]);
      *(_QWORD *)&v98[1] = 0;
      *(_QWORD *)&v98[3] = _D1;
      v22 = *(_DWORD *)(a1 + 68);
      v100 = *(_DWORD *)(a1 + 64);
      v98[6] = v22;
      v98[0] = *a5 != 0;
      Espresso::abstract_engine_factory::shared(&v94);
      v23 = v94;
      v24 = *a3;
      std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
      v25 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a3 + 72) + 8);
      v91 = (**v25)(v25);
      v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 32))(*a3);
      Espresso::abstract_engine_factory::make_kernel_priv(v23, v24 + 72, (uint64_t)__p, (uint64_t)&v97, &v91);
      if ((_QWORD)v106
      {
        *(_QWORD *)&v96 = v26;
        *((_QWORD *)&v96 + 1) = *((_QWORD *)&v106 + 1);
        if (*((_QWORD *)&v106 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
      }
      else
      {
        v96 = 0uLL;
      }
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v13, &v96);
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
      if (*((_QWORD *)&v96 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      if (*((_QWORD *)&v106 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (v93 < 0)
        operator delete(__p[0]);
      v35 = v95;
      if (v95)
      {
        p_shared_owners = (unint64_t *)&v95->__shared_owners_;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(__p, *a4, (std::__shared_weak_count *)a4[1]);
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v96, (void *)*a5, (std::__shared_weak_count *)a5[1]);
      if (!__p[0])
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v106, (*a4)[1].i32[0], (*a4)[1].i32[1], 1, 1);
        v38 = v106;
        v106 = 0uLL;
        v39 = (std::__shared_weak_count *)__p[1];
        *(_OWORD *)__p = v38;
        if (v39)
        {
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v42 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
        if (*((_QWORD *)&v106 + 1))
        {
          v43 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        (*(void (**)(int32x2_t *, _QWORD *, void **))(*(_QWORD *)*a4 + 40))(*a4, a2, __p);
        (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
      }
      if (v98[0] && !(_QWORD)v96)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a5 + 56))(&v106);
        v45 = v106;
        v106 = 0uLL;
        v46 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
        v96 = v45;
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
        if (*((_QWORD *)&v106 + 1))
        {
          v50 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        (*(void (**)(_QWORD, _QWORD *, __int128 *))(*(_QWORD *)*a5 + 40))(*a5, a2, &v96);
        (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
      }
      v52 = *v13;
      v53 = __p[0];
      v54 = (char *)operator new(0x58uLL);
      *((_QWORD *)v54 + 1) = 0;
      *((_QWORD *)v54 + 2) = 0;
      *(_QWORD *)v54 = &off_1E2DBEC38;
      v55 = v53[3];
      *((_QWORD *)v54 + 3) = &off_1E2DA11B0;
      *(_OWORD *)(v54 + 56) = 0u;
      *(_OWORD *)(v54 + 72) = 0u;
      *((_DWORD *)v54 + 8) = *((_DWORD *)v53 + 2);
      *((_DWORD *)v54 + 9) = *((_DWORD *)v53 + 3);
      *((_QWORD *)v54 + 5) = v55;
      v54[48] = 0;
      v88 = v54 + 24;
      v89 = (std::__shared_weak_count *)v54;
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v52 + 400))(v52, &v88);
      v56 = v89;
      if (v89)
      {
        v57 = (unint64_t *)&v89->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      if (v98[0])
      {
        v59 = *v13;
        v60 = v96;
        v61 = (char *)operator new(0x58uLL);
        *((_QWORD *)v61 + 1) = 0;
        *((_QWORD *)v61 + 2) = 0;
        *(_QWORD *)v61 = &off_1E2DBEC00;
        v62 = *(_QWORD *)(v60 + 24);
        *((_QWORD *)v61 + 3) = &off_1E2DA1190;
        *(_OWORD *)(v61 + 56) = 0u;
        *(_OWORD *)(v61 + 72) = 0u;
        *((_DWORD *)v61 + 8) = *(_DWORD *)(v60 + 8);
        *((_QWORD *)v61 + 5) = v62;
        v61[48] = 0;
        v86 = v61 + 24;
        v87 = (std::__shared_weak_count *)v61;
        (*(void (**)(uint64_t, char **))(*(_QWORD *)v59 + 392))(v59, &v86);
        v63 = v87;
        if (v87)
        {
          v64 = (unint64_t *)&v87->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
      }
      v66 = a3[1];
      *(_QWORD *)&v106 = *a3;
      *((_QWORD *)&v106 + 1) = v66;
      if (v66)
      {
        v67 = (unint64_t *)(v66 + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(a1 + 24, (uint64_t *)&v106, v107, 1uLL);
      v69 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      if (*((_QWORD *)&v106 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = a6[1];
      *(_QWORD *)&v106 = *a6;
      *((_QWORD *)&v106 + 1) = v72;
      if (v72)
      {
        v73 = (unint64_t *)(v72 + 8);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(a1, (uint64_t *)&v106, v107, 1uLL);
      v75 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      if (*((_QWORD *)&v106 + 1))
      {
        v76 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v78 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
      if (*((_QWORD *)&v96 + 1))
      {
        v79 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v82 = (unint64_t *)((char *)__p[1] + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      if (!*v13)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Inconsistent state");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](*(_QWORD **)(a1 + 24), *a3, a3[1]);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](*(_QWORD **)a1, *a6, a6[1]);
  return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), a2, a1 + 24, a1);
}

void sub_191670700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Espresso::generic_rnn_kernel::embedding_cluster>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 48)
  {
    std::shared_ptr<void>::~shared_ptr[abi:ne180100](i - 16);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100](i - 32);
    result = std::shared_ptr<void>::~shared_ptr[abi:ne180100](i - 48);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t Espresso::reduce_shorthand::operator()(uint64_t a1, uint64_t a2, unsigned int a3, void **a4, uint64_t a5, uint64_t *a6, float a7)
{
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t (***v21)(_QWORD);
  void *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t i;
  std::runtime_error *exception;
  int v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  void *lpsrc;
  std::__shared_weak_count *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  void *__p;
  std::__shared_weak_count *v68;
  uint64_t v69[2];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v15 = (_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 48);
  if (!v14)
    goto LABEL_9;
  if (*((_QWORD *)*a4 + 9) != *(_QWORD *)(v14 + 8))
  {
    v62 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 48, &v62);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
    if (*((_QWORD *)&v62 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (!*v15)
    {
LABEL_9:
      *((_QWORD *)&v62 + 1) = 0x100000007;
      v63 = 0;
      v64 = 0;
      v65 = 0xFFFFFFFF00000000;
      v66 = 0;
      *(_QWORD *)&v62 = __PAIR64__(LODWORD(a7), a3);
      Espresso::abstract_engine_factory::shared(&v57);
      v19 = v57;
      v20 = *a4;
      std::string::basic_string[abi:ne180100]<0>(&__p, "reduce");
      v21 = *(uint64_t (****)(_QWORD))(*((_QWORD *)*a4 + 9) + 8);
      v56 = (**v21)(v21);
      (*(void (**)(void *))(*(_QWORD *)*a4 + 32))(*a4);
      Espresso::abstract_engine_factory::make_kernel_priv(v19, (uint64_t)v20 + 72, (uint64_t)&__p, (uint64_t)&v62, &v56);
      if (lpsrc
      {
        *(_QWORD *)&v61 = v22;
        *((_QWORD *)&v61 + 1) = v60;
        if (v60)
        {
          p_shared_owners = (unint64_t *)&v60->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
      }
      else
      {
        v61 = 0uLL;
      }
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v15, &v61);
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
      if (*((_QWORD *)&v61 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = v60;
      if (v60)
      {
        v29 = (unint64_t *)&v60->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (SHIBYTE(v69[0]) < 0)
        operator delete(__p);
      v31 = v58;
      if (v58)
      {
        v32 = (unint64_t *)&v58->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = *(std::__shared_weak_count **)(a5 + 8);
      __p = *(void **)a5;
      v68 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(a1 + 24, (uint64_t *)&__p, v69, 1uLL);
      v37 = v68;
      if (v68)
      {
        v38 = (unint64_t *)&v68->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (std::__shared_weak_count *)a4[1];
      __p = *a4;
      v68 = v40;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(a1, (uint64_t *)&__p, v69, 1uLL);
      v43 = v68;
      if (v68)
      {
        v44 = (unint64_t *)&v68->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = *a6;
      if (*a6)
      {
        v47 = *(std::__shared_weak_count **)(a5 + 8);
        __p = *(void **)a5;
        v68 = v47;
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
          v46 = *a6;
        }
        v50 = a6[1];
        v69[0] = v46;
        v69[1] = v50;
        if (v50)
        {
          v51 = (unint64_t *)(v50 + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(a1 + 24, (uint64_t *)&__p, &v70, 2uLL);
        for (i = 16; i != -16; i -= 16)
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p + i);
      }
      if (!*v15)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Inconsistent state");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](*(_QWORD **)(a1 + 24), *(_QWORD *)a5, *(_QWORD *)(a5 + 8));
  if (*a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *a6, a6[1]);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](*(_QWORD **)a1, (uint64_t)*a4, (uint64_t)a4[1]);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), a2, a1 + 24, a1);
}

void sub_191670C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  __cxa_free_exception(v27);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::pair<int,float>>>::vector[abi:ne180100](_QWORD *a1, uint64_t **a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  _QWORD *v17;
  _QWORD *v18;

  a1[2] = 0;
  v4 = a1 + 2;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = 3 * a3;
    v7 = operator new(24 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    v17 = v7;
    v18 = v7;
    v8 = &a2[v6];
    v15[0] = v4;
    v15[1] = &v17;
    v15[2] = &v18;
    v9 = v7;
    v16 = 0;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v10 = *a2;
      v11 = a2[1];
      if (v11 != *a2)
      {
        std::vector<std::pair<int,float>>::__vallocate[abi:ne180100](v9, v11 - *a2);
        v12 = (_QWORD *)v9[1];
        do
        {
          v13 = *v10++;
          *v12++ = v13;
        }
        while (v10 != v11);
        v9[1] = v12;
        v9 = v18;
      }
      a2 += 3;
      v9 += 3;
      v18 = v9;
    }
    while (a2 != v8);
    v16 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
    a1[1] = v9;
  }
  return a1;
}

void sub_191670E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_inner_product_kernel::input_blob_type(Espresso::generic_inner_product_kernel *this, uint64_t a2)
{
  if (a2 == 1)
    return 1;
  else
    return 2 * (a2 == 2);
}

void Espresso::generic_inner_product_kernel::clear_weights(Espresso::generic_inner_product_kernel *this)
{
  char *v2;

  v2 = (char *)this + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = v2;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 62);
}

uint64_t Espresso::generic_inner_product_kernel::supports_weight_key(uint64_t a1, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  int v7;

  if (*((char *)a2 + 23) < 0)
  {
    v3 = a2[1];
    if (v3 != (unsigned __int8 *)1)
    {
      if (v3 != (unsigned __int8 *)5)
        return 0;
      a2 = (unsigned __int8 **)*a2;
      goto LABEL_8;
    }
    v7 = **a2;
    return v7 == 87 || v7 == 98;
  }
  v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 == 1)
  {
    v7 = *(unsigned __int8 *)a2;
    return v7 == 87 || v7 == 98;
  }
  if (v2 != 5)
    return 0;
LABEL_8:
  if (*(_DWORD *)a2 == 828792663 && *((_BYTE *)a2 + 4) == 54)
    return 1;
  return *(_DWORD *)a2 == 828792674 && *((_BYTE *)a2 + 4) == 54;
}

void Espresso::generic_inner_product_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string::size_type *v6;
  std::string::size_type v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  uint64_t *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  char v23;
  std::string *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t i;
  void **v40;
  void *v41[2];
  char v42;
  std::string **v43;
  uint64_t v44;
  uint64_t v45;
  std::string *v46;
  std::string *v47;
  std::string *v48;
  std::string v49;
  void *v50[2];
  std::string::size_type v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  void *__p[2];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  BOOL v63;
  BOOL v64;
  char v65;
  char *v66;
  std::string *v67;
  unint64_t v68;
  std::string ***v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  __int128 v74;

  *(_QWORD *)&v74 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v41, "inner_product");
  v6 = *(std::string::size_type **)(a3 + 16);
  v7 = *v6;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3);
  if (v8 <= 1)
  {
    if (v42 >= 0)
      v40 = v41;
    else
      v40 = (void **)v41[0];
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,char const*,unsigned long>((const char *)v40, v8);
  }
  v9 = **(__int128 ***)(a3 + 8);
  v10 = **(__int128 ***)(a3 + 24);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v11 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v7);
  if (v11)
  {
    Espresso::blob_grad_contrib_name((uint64_t)__p, v7, a3);
    v12 = v67;
    if ((unint64_t)v67 >= v68)
    {
      v14 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v66, (uint64_t)__p);
    }
    else
    {
      if (SBYTE7(v55) < 0)
      {
        std::string::__init_copy_ctor_external(v67, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v13 = *(_OWORD *)__p;
        v67->__r_.__value_.__r.__words[2] = v55;
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v14 = v12 + 1;
    }
    v67 = v14;
    if (SBYTE7(v55) < 0)
      operator delete(__p[0]);
  }
  v15 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v7 + 24);
  if (v15)
  {
    Espresso::blob_grad_contrib_name((uint64_t)__p, v7 + 24, a3);
    v16 = v67;
    if ((unint64_t)v67 >= v68)
    {
      v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v66, (uint64_t)__p);
    }
    else
    {
      if (SBYTE7(v55) < 0)
      {
        std::string::__init_copy_ctor_external(v67, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v17 = *(_OWORD *)__p;
        v67->__r_.__value_.__r.__words[2] = v55;
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      v18 = v16 + 1;
    }
    v67 = v18;
    if (SBYTE7(v55) < 0)
      operator delete(__p[0]);
  }
  v19 = **(_QWORD **)(a3 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - v19) >> 3) >= 3
    && (v20 = v19 + 48,
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v19 + 48)))
  {
    Espresso::blob_grad_contrib_name((uint64_t)__p, v20, a3);
    v21 = v67;
    if ((unint64_t)v67 >= v68)
    {
      v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v66, (uint64_t)__p);
    }
    else
    {
      if (SBYTE7(v55) < 0)
      {
        std::string::__init_copy_ctor_external(v67, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v22 = *(_OWORD *)__p;
        v67->__r_.__value_.__r.__words[2] = v55;
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      v24 = v21 + 1;
    }
    v67 = v24;
    if (SBYTE7(v55) < 0)
      operator delete(__p[0]);
    v23 = 1;
  }
  else
  {
    v23 = 0;
  }
  v25 = *(_OWORD *)(a1 + 416);
  v60 = *(_OWORD *)(a1 + 400);
  v61 = v25;
  v62 = *(_DWORD *)(a1 + 432);
  v26 = *(_OWORD *)(a1 + 352);
  v56 = *(_OWORD *)(a1 + 336);
  v57 = v26;
  v27 = *(_OWORD *)(a1 + 384);
  v58 = *(_OWORD *)(a1 + 368);
  v59 = v27;
  v28 = *(_OWORD *)(a1 + 320);
  *(_OWORD *)__p = *(_OWORD *)(a1 + 304);
  v55 = v28;
  v63 = v11 != 0;
  v64 = v15 != 0;
  v65 = v23;
  std::operator+<char>();
  v29 = std::string::append(&v49, "_grad");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v51 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)v50 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = *(_QWORD *)a3;
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v32 = *v9;
    v70.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v32;
  }
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
  }
  else
  {
    v33 = *(_OWORD *)v7;
    v71.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v33;
  }
  if (*(char *)(v7 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(v7 + 24), *(_QWORD *)(v7 + 32));
  }
  else
  {
    v34 = *(_OWORD *)(v7 + 24);
    v72.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 40);
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v34;
  }
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v35 = *v10;
    v73.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v35;
  }
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v43 = &v46;
  LOBYTE(v44) = 0;
  v46 = (std::string *)operator new(0x60uLL);
  v47 = v46;
  v48 = v46 + 4;
  v47 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v48, (__int128 *)&v70, &v74, v46);
  v44 = 0;
  v45 = 0;
  v43 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v43, (uint64_t)v66, (uint64_t)v67, 0xAAAAAAAAAAAAAAABLL * (((char *)v67 - v66) >> 3));
  Espresso::sequential_builder::add<Espresso::fused_inner_product_grad_params_t>(&v52, a2, (uint64_t)v50, v31, (uint64_t)__p, (uint64_t)v46, (uint64_t)v47, (uint64_t *)&v43);
  v36 = v53;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v69 = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  v69 = (std::string ***)&v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v73.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v73.__r_.__value_.__l.__data_ + i * 8));
  }
  if (SHIBYTE(v51) < 0)
    operator delete(v50[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  __p[0] = &v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v42 < 0)
    operator delete(v41[0]);
}

void sub_191671488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  uint64_t v42;

  *(_QWORD *)(v42 - 216) = v41;
  if (a41 < 0)
    operator delete(__p);
  *(_QWORD *)(v42 - 192) = v42 - 224;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 192));
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

void Espresso::generic_inner_product_kernel::create_weights_blob(Espresso::generic_inner_product_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 77), *((_DWORD *)this + 76), 1, 1);
}

void Espresso::generic_inner_product_kernel::create_biases_blob(Espresso::generic_inner_product_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 76) << (*((_DWORD *)this + 83) != 0), 1, 1, 1);
}

void Espresso::generic_inner_product_kernel::set_f16_weights(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  vImagePixelCount v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  vImage_Buffer dest;
  vImage_Buffer src;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&v29, (int *)(*a2 + 8));
  v6 = *a2;
  v7 = *(void **)(*a2 + 16);
  v8 = v29;
  v9 = *(void **)(v29 + 16);
  v10 = *(int *)(v6 + 12) * (uint64_t)*(int *)(v6 + 8);
  src.data = v7;
  src.height = 1;
  src.width = v10;
  src.rowBytes = 2 * v10;
  dest.data = v9;
  dest.height = 1;
  dest.width = v10;
  dest.rowBytes = 4 * v10;
  vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  v27 = v8;
  v28 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (std::__shared_weak_count *)a3[1];
  v25 = *a3;
  v26 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 456))(a1, &v27, &v25);
  v16 = v26;
  if (v26)
  {
    v17 = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v28;
  if (v28)
  {
    v20 = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v30;
  if (v30)
  {
    v23 = (unint64_t *)&v30->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1916717A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void Espresso::generic_inner_product_kernel::set_f16_biases(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  vImagePixelCount v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  vImage_Buffer dest;
  vImage_Buffer src;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v29, (int *)(*a2 + 8));
  v6 = *a2;
  v7 = *(void **)(*a2 + 16);
  v8 = v29;
  v9 = *(void **)(v29 + 16);
  v10 = *(int *)(v6 + 8);
  src.data = v7;
  src.height = 1;
  src.width = v10;
  src.rowBytes = 2 * v10;
  dest.data = v9;
  dest.height = 1;
  dest.width = v10;
  dest.rowBytes = 4 * v10;
  vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  v27 = v8;
  v28 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (std::__shared_weak_count *)a3[1];
  v25 = *a3;
  v26 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 448))(a1, &v27, &v25);
  v16 = v26;
  if (v26)
  {
    v17 = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v28;
  if (v28)
  {
    v20 = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v30;
  if (v30)
  {
    v23 = (unint64_t *)&v30->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_191671950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::fused_inner_product_grad_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_191671B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::generic_load_constant_kernel::share_weights(_QWORD *a1, const void **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;

  Espresso::base_kernel::share_weights(a1, a2);
  if (!*a2
  {
    v21 = 0;
    v22 = 0;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("not a load_constant kernel");
  }
  v5 = v4;
  v6 = (std::__shared_weak_count *)a2[1];
  v21 = v4;
  v22 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = v4[43];
  if (v9 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9))
  {
    v16 = v5[43];
    v10 = *(std::__shared_weak_count **)(v16 + 168);
    v19 = *(_QWORD *)(v16 + 160);
    v20 = v10;
    if (v10)
    {
      v17 = (unint64_t *)&v10->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
    v10 = 0;
    v19 = 0;
    v20 = 0;
  }
  Espresso::generic_load_constant_kernel::set_constant_blob(a1, (uint64_t)&v19);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v22;
  if (v22)
  {
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_191671D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_load_constant_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  if (*((char *)a2 + 23) < 0)
  {
    v5 = a2[1];
    if (v5 == 13)
      return *(_QWORD *)*a2 == 0x746E6174736E6F63 && *(_QWORD *)(*a2 + 5) == 0x626F6C625F746E61;
    if (v5 != 16)
    {
      if (v5 == 18)
        return *(_QWORD *)*a2 == 0x746E6174736E6F63
            && *(_QWORD *)(*a2 + 8) == 0x70665F626F6C625FLL
            && *(_WORD *)(*a2 + 16) == 13873;
      return 0;
    }
    a2 = (uint64_t *)*a2;
    goto LABEL_26;
  }
  v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 != 13)
  {
    if (v2 != 16)
    {
      if (v2 == 18)
        return *a2 == 0x746E6174736E6F63 && a2[1] == 0x70665F626F6C625FLL && *((_WORD *)a2 + 8) == 13873;
      return 0;
    }
LABEL_26:
    if (*a2 == 0x746E6174736E6F63 && a2[1] == 0x38755F626F6C625FLL)
      return 1;
    v8 = a2[1];
    v9 = *a2 == 0x746E6174736E6F63;
    v10 = 0x38735F626F6C625FLL;
    return v9 && v8 == v10;
  }
  v8 = *(uint64_t *)((char *)a2 + 5);
  v9 = *a2 == 0x746E6174736E6F63;
  v10 = 0x626F6C625F746E61;
  return v9 && v8 == v10;
}

uint64_t Espresso::blob_cpu::blob_cpu(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)a1 = off_1E2D8F108;
  *(_DWORD *)(a1 + 28) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = a2[1];
  *(_QWORD *)(a1 + 72) = *a2;
  *(_QWORD *)(a1 + 80) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_QWORD *)(a1 + 116) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 124) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 128) = 0uLL;
  *(_OWORD *)(a1 + 144) = 0uLL;
  *(_QWORD *)a1 = &off_1E2DA6B80;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 160) = 0uLL;
  *(_OWORD *)(a1 + 176) = 0uLL;
  *(_OWORD *)(a1 + 208) = 0uLL;
  *(_OWORD *)(a1 + 224) = 0uLL;
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 192) = 0uLL;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 192), *a3, a3[1]);
  *(_DWORD *)(a1 + 240) = 2;
  return a1;
}

void Espresso::generic_load_constant_kernel::set_constant_blob(_DWORD *a1, uint64_t a2)
{
  _DWORD *v2;
  std::runtime_error *v5;
  std::runtime_error *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::runtime_error *exception;
  void *__p[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::runtime_error v17;
  std::runtime_error v18;
  std::runtime_error v19;
  std::runtime_error v20;

  v2 = *(_DWORD **)a2;
  if (!*(_QWORD *)a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "generic_load_constant_kernel must have a blob set");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v2[2] != a1[76])
  {
    v5 = std::runtime_error::runtime_error(&v20, "generic_load_constant_kernel wrong size");
    std::runtime_error::~runtime_error(v5);
    v2 = *(_DWORD **)a2;
  }
  if (v2[3] != a1[77])
  {
    v6 = std::runtime_error::runtime_error(&v19, "generic_load_constant_kernel wrong size");
    std::runtime_error::~runtime_error(v6);
    v2 = *(_DWORD **)a2;
  }
  if (v2[4] != a1[78])
  {
    std::runtime_error::runtime_error(&v18, "generic_load_constant_kernel wrong size");
    std::runtime_error::~runtime_error(&v18);
    v2 = *(_DWORD **)a2;
  }
  if (v2[5] != a1[80] * a1[79])
  {
    std::runtime_error::runtime_error(&v17, "generic_load_constant_kernel wrong size");
    std::runtime_error::~runtime_error(&v17);
  }
  v15 = 0;
  v16 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "constant_blob");
  v7 = 0;
  v8 = *(int *)(*(_QWORD *)a2 + 8);
  do
  {
    v8 *= *(int *)(*(_QWORD *)a2 + 12 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  (*(void (**)(_DWORD *, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 160))(a1, &v15, __p, *(_QWORD *)(*(_QWORD *)a2 + 24), 4 * v8, 0);
  if (v14 < 0)
    operator delete(__p[0]);
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_191672178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void *Espresso::generic_activation_kernel::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::runtime_error *v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::runtime_error *v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  const std::string::value_type *v55;
  std::string::size_type v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  const std::string::value_type *v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  uint64_t v70;
  std::__shared_weak_count *size;
  unint64_t *v72;
  unint64_t v73;
  std::runtime_error *exception;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  std::string::size_type v80;
  std::string *v81;
  __int128 v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  const std::string::value_type *v89;
  std::string::size_type v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  std::string::size_type v94;
  std::string *v95;
  __int128 v96;
  std::string v97;
  const std::string::value_type *v98;
  std::string::size_type v99;
  unsigned __int8 v100;
  const std::string::value_type *v101;
  std::string::size_type v102;
  unsigned __int8 v103;
  std::string v104;
  std::string v105;
  std::string v106;
  std::string v107;
  std::string v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string v112;

  v7 = result;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    v8 = *((unsigned __int8 *)a3 + 23);
    if (v8 != 12)
    {
      if (v8 != 14)
      {
        if (v8 != 15)
          return result;
        if (*a3 != 0x73756C7074666F73 || *(uint64_t *)((char *)a3 + 7) != 0x736168706C615F73)
          return result;
        goto LABEL_19;
      }
      goto LABEL_57;
    }
    if (*a3 != 0x705F736D61726170 || *((_DWORD *)a3 + 2) != 1970038130)
      return result;
LABEL_98:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v112, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v70 = (uint64_t)v7 + 344;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v70, (__int128 *)&v112);
    size = (std::__shared_weak_count *)v112.__r_.__value_.__l.__size_;
    if (v112.__r_.__value_.__l.__size_)
    {
      v72 = (unint64_t *)(v112.__r_.__value_.__l.__size_ + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v16 = *(_QWORD *)v70;
    if (a5 != 4 * *(int *)(*(_QWORD *)v70 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v105, a5);
      v75 = std::string::insert(&v105, 0, "Unexpected size s=");
      v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      v77 = std::string::append(&v106, "/blob=");
      v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v104, 4 * *(int *)(*(_QWORD *)v70 + 8));
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = &v104;
      else
        v79 = (std::string *)v104.__r_.__value_.__r.__words[0];
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      else
        v80 = v104.__r_.__value_.__l.__size_;
      v81 = std::string::append(&v107, (const std::string::value_type *)v79, v80);
      v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v101, " @ ");
      if ((v103 & 0x80u) == 0)
        v83 = (const std::string::value_type *)&v101;
      else
        v83 = v101;
      if ((v103 & 0x80u) == 0)
        v84 = v103;
      else
        v84 = v102;
      v85 = std::string::append(&v108, v83, v84);
      v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v109.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      v87 = std::string::append(&v109, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
      v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v110.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v98, ":");
      if ((v100 & 0x80u) == 0)
        v89 = (const std::string::value_type *)&v98;
      else
        v89 = v98;
      if ((v100 & 0x80u) == 0)
        v90 = v100;
      else
        v90 = v99;
      v91 = std::string::append(&v110, v89, v90);
      v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v111.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v92;
      v91->__r_.__value_.__l.__size_ = 0;
      v91->__r_.__value_.__r.__words[2] = 0;
      v91->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v97, 1401);
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v93 = &v97;
      else
        v93 = (std::string *)v97.__r_.__value_.__r.__words[0];
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v94 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      else
        v94 = v97.__r_.__value_.__l.__size_;
      v95 = std::string::append(&v111, (const std::string::value_type *)v93, v94);
      v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v96;
      v95->__r_.__value_.__l.__size_ = 0;
      v95->__r_.__value_.__r.__words[2] = 0;
      v95->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v112);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(v16 + 16), a4, a5);
  }
  v10 = a3[1];
  if (v10 == 12)
  {
    if (*(_QWORD *)*a3 != 0x705F736D61726170 || *(_DWORD *)(*a3 + 8) != 1970038130)
      return result;
    goto LABEL_98;
  }
  if (v10 == 14)
  {
    a3 = (uint64_t *)*a3;
LABEL_57:
    if (*a3 == 0x73756C7074666F73 && *(uint64_t *)((char *)a3 + 6) == 0x73617465625F7375)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v112, (unint64_t)(int)a5 >> 2, 1, 1, 1);
      v42 = (uint64_t)v7 + 376;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v42, (__int128 *)&v112);
      v43 = (std::__shared_weak_count *)v112.__r_.__value_.__l.__size_;
      if (v112.__r_.__value_.__l.__size_)
      {
        v44 = (unint64_t *)(v112.__r_.__value_.__l.__size_ + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v16 = *(_QWORD *)v42;
      if (a5 != 4 * *(int *)(*(_QWORD *)v42 + 8))
      {
        v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v105, a5);
        v47 = std::string::insert(&v105, 0, "Unexpected size s=");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v106.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        v49 = std::string::append(&v106, "/blob=");
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v107.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v104, 4 * *(int *)(*(_QWORD *)v42 + 8));
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v104;
        else
          v51 = (std::string *)v104.__r_.__value_.__r.__words[0];
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        else
          v52 = v104.__r_.__value_.__l.__size_;
        v53 = std::string::append(&v107, (const std::string::value_type *)v51, v52);
        v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        v108.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v101, " @ ");
        if ((v103 & 0x80u) == 0)
          v55 = (const std::string::value_type *)&v101;
        else
          v55 = v101;
        if ((v103 & 0x80u) == 0)
          v56 = v103;
        else
          v56 = v102;
        v57 = std::string::append(&v108, v55, v56);
        v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        v109.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        v59 = std::string::append(&v109, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
        v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
        v110.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v60;
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v98, ":");
        if ((v100 & 0x80u) == 0)
          v61 = (const std::string::value_type *)&v98;
        else
          v61 = v98;
        if ((v100 & 0x80u) == 0)
          v62 = v100;
        else
          v62 = v99;
        v63 = std::string::append(&v110, v61, v62);
        v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
        v111.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v64;
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v97, 1411);
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = &v97;
        else
          v65 = (std::string *)v97.__r_.__value_.__r.__words[0];
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        else
          v66 = v97.__r_.__value_.__l.__size_;
        v67 = std::string::append(&v111, (const std::string::value_type *)v65, v66);
        v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        v112.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v46, &v112);
        __cxa_throw(v46, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      return memcpy(*(void **)(v16 + 16), a4, a5);
    }
    return result;
  }
  if (v10 == 15 && *(_QWORD *)*a3 == 0x73756C7074666F73 && *(_QWORD *)(*a3 + 7) == 0x736168706C615F73)
  {
LABEL_19:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v112, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v12 = (uint64_t)v7 + 360;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v112);
    v13 = (std::__shared_weak_count *)v112.__r_.__value_.__l.__size_;
    if (v112.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v112.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = *(_QWORD *)v12;
    if (a5 != 4 * *(int *)(*(_QWORD *)v12 + 8))
    {
      v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v105, a5);
      v18 = std::string::insert(&v105, 0, "Unexpected size s=");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v20 = std::string::append(&v106, "/blob=");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v104, 4 * *(int *)(*(_QWORD *)v12 + 8));
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v104;
      else
        v22 = (std::string *)v104.__r_.__value_.__r.__words[0];
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      else
        v23 = v104.__r_.__value_.__l.__size_;
      v24 = std::string::append(&v107, (const std::string::value_type *)v22, v23);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v101, " @ ");
      if ((v103 & 0x80u) == 0)
        v26 = (const std::string::value_type *)&v101;
      else
        v26 = v101;
      if ((v103 & 0x80u) == 0)
        v27 = v103;
      else
        v27 = v102;
      v28 = std::string::append(&v108, v26, v27);
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v109.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = std::string::append(&v109, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v110.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v98, ":");
      if ((v100 & 0x80u) == 0)
        v32 = (const std::string::value_type *)&v98;
      else
        v32 = v98;
      if ((v100 & 0x80u) == 0)
        v33 = v100;
      else
        v33 = v99;
      v34 = std::string::append(&v110, v32, v33);
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v111.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v97, 1406);
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v97;
      else
        v36 = (std::string *)v97.__r_.__value_.__r.__words[0];
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      else
        v37 = v97.__r_.__value_.__l.__size_;
      v38 = std::string::append(&v111, (const std::string::value_type *)v36, v37);
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v17, &v112);
      __cxa_throw(v17, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(v16 + 16), a4, a5);
  }
  return result;
}

void sub_191672AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  char v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  if ((v60 & 1) != 0)
    __cxa_free_exception(v59);
  _Unwind_Resume(exception_object);
}

BOOL Espresso::generic_activation_kernel::supports_weight_key(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  if (*((char *)a2 + 23) < 0)
  {
    v6 = a2[1];
    if (v6 == 12)
      return *(_QWORD *)*a2 == 0x705F736D61726170 && *(_DWORD *)(*a2 + 8) == 1970038130;
    if (v6 != 14)
    {
      if (v6 == 15)
        return *(_QWORD *)*a2 == 0x73756C7074666F73 && *(_QWORD *)(*a2 + 7) == 0x736168706C615F73;
      return 0;
    }
    a2 = (_QWORD *)*a2;
  }
  else
  {
    v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 == 12)
      return *a2 == 0x705F736D61726170 && *((_DWORD *)a2 + 2) == 1970038130;
    if (v2 != 14)
    {
      if (v2 == 15)
      {
        v3 = *(_QWORD *)((char *)a2 + 7);
        v4 = *a2 == 0x73756C7074666F73;
        v5 = 0x68706C615F73;
        goto LABEL_21;
      }
      return 0;
    }
  }
  v3 = *(_QWORD *)((char *)a2 + 6);
  v4 = *a2 == 0x73756C7074666F73;
  v5 = 0x7465625F7375;
LABEL_21:
  v9 = v5 & 0xFFFFFFFFFFFFLL | 0x7361000000000000;
  return v4 && v3 == v9;
}

void Espresso::generic_activation_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  std::string *p_p;
  const void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  std::string *v19;
  const void *v20;
  std::string::size_type v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t m;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  uint64_t i;
  uint64_t j;
  void *v49;
  __int128 *v50;
  __int128 v51;
  __int128 *v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t k;
  std::string *v58;
  std::string *v59;
  std::string *v60;
  std::string *v61;
  std::string *v62;
  std::string *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  std::string *v66;
  std::string *v67;
  std::string *v68;
  std::string *v69;
  std::string *v70;
  std::string *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  std::string *v74;
  std::string *v75;
  std::string *v76;
  std::string *v77;
  std::string *v78;
  std::string *v79;
  void *v80[2];
  char v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  std::string v84;
  std::string v85;
  void *v86;
  size_t v87;
  unsigned __int8 v88;
  std::string **v89;
  char v90;
  std::string v91;
  std::string v92;
  std::string v93;
  uint64_t v94;
  std::string __p;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  uint64_t v102;
  std::string v103;
  __int128 v104;

  *(_QWORD *)&v104 = *MEMORY[0x1E0C80C00];
  if (**(_QWORD **)(a3 + 16) == *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8))
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("No input given to activation layer.");
  if (**(_QWORD **)(a3 + 24) == *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8))
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Activation layer does not produce any outputs.");
  std::string::basic_string[abi:ne180100]<0>(&v86, "activation");
  v6 = (_DWORD *)(a1 + 304);
  if (*(_DWORD *)(a1 + 304) == 17)
  {
    v7 = *(uint64_t **)(a3 + 16);
    v9 = *v7;
    v8 = v7[1];
    if ((v88 & 0x80u) == 0)
      v10 = v88;
    else
      v10 = v87;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v10 + 16);
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v10)
    {
      if ((v88 & 0x80u) == 0)
        v13 = &v86;
      else
        v13 = v86;
      memmove(p_p, v13, v10);
    }
    strcpy((char *)p_p + v10, "_fused_lstm_ifog");
    Espresso::check_num_arguments(v11, 3uLL, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v14 = *(uint64_t **)(a3 + 24);
    v16 = *v14;
    v15 = v14[1];
    if ((v88 & 0x80u) == 0)
      v17 = v88;
    else
      v17 = v87;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v17 + 16);
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &__p;
    else
      v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v17)
    {
      if ((v88 & 0x80u) == 0)
        v20 = &v86;
      else
        v20 = v86;
      memmove(v19, v20, v17);
    }
    strcpy((char *)v19 + v17, "_fused_lstm_ifog");
    Espresso::check_num_arguments(v18, 2uLL, (uint64_t)&__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v21 = **(_QWORD **)(a3 + 16);
    v22 = **(__int128 ***)(a3 + 24);
    v23 = **(__int128 ***)(a3 + 8);
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v21)&& std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v21 + 24)&& std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v21 + 48))
    {
      Espresso::blob_grad_contrib_name((uint64_t)&v85, v21, a3);
      Espresso::blob_grad_contrib_name((uint64_t)&v103, v21 + 24, a3);
      Espresso::blob_grad_contrib_name((uint64_t)&v84, v21 + 48, a3);
      std::string::basic_string[abi:ne180100]<0>(v80, "activation_grad");
      v24 = *(_QWORD *)a3;
      if (*((char *)v23 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
      }
      else
      {
        v25 = *v23;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
      }
      if (*((char *)v23 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)v23 + 3), *((_QWORD *)v23 + 4));
      }
      else
      {
        v38 = *(__int128 *)((char *)v23 + 24);
        v96.__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 5);
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v38;
      }
      if (*((char *)v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
      }
      else
      {
        v39 = *v22;
        v97.__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 2);
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v39;
      }
      if (*((char *)v22 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v98, *((const std::string::value_type **)v22 + 3), *((_QWORD *)v22 + 4));
      }
      else
      {
        v40 = *(__int128 *)((char *)v22 + 24);
        v98.__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 5);
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v40;
      }
      if (*(char *)(v21 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)v21, *(_QWORD *)(v21 + 8));
      }
      else
      {
        v41 = *(_OWORD *)v21;
        v99.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 16);
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v41;
      }
      if (*(char *)(v21 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)(v21 + 24), *(_QWORD *)(v21 + 32));
      }
      else
      {
        v42 = *(_OWORD *)(v21 + 24);
        v100.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 40);
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v42;
      }
      if (*(char *)(v21 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)(v21 + 48), *(_QWORD *)(v21 + 56));
      }
      else
      {
        v43 = *(_OWORD *)(v21 + 48);
        v101.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 64);
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v43;
      }
      v77 = 0;
      v78 = 0;
      v79 = 0;
      v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
      v91.__r_.__value_.__s.__data_[8] = 0;
      v77 = (std::string *)operator new(0xA8uLL);
      v78 = v77;
      v79 = v77 + 7;
      v78 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v79, (__int128 *)&__p, (__int128 *)&v102, v77);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v91, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
      else
        v91 = v85;
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v92, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
      else
        v92 = v103;
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v93, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
      else
        v93 = v84;
      v74 = 0;
      v75 = 0;
      v76 = 0;
      v89 = &v74;
      v90 = 0;
      v74 = (std::string *)operator new(0x48uLL);
      v75 = v74;
      v76 = v74 + 3;
      v75 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v76, (__int128 *)&v91, (__int128 *)&v94, v74);
      Espresso::sequential_builder::add<Espresso::activation_params>(&v82, a2, (uint64_t)v80, v24, (uint64_t)v6, (uint64_t)v77, (uint64_t)v78, (uint64_t *)&v74);
      v44 = v83;
      if (v83)
      {
        p_shared_owners = (unint64_t *)&v83->__shared_owners_;
        do
          v46 = __ldaxr(p_shared_owners);
        while (__stlxr(v46 - 1, p_shared_owners));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v89 = &v74;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
      for (i = 0; i != -9; i -= 3)
      {
        if (SHIBYTE(v93.__r_.__value_.__r.__words[i + 2]) < 0)
          operator delete(*(void **)((char *)&v93.__r_.__value_.__l.__data_ + i * 8));
      }
      v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
      for (j = 0; j != -21; j -= 3)
      {
        if (SHIBYTE(v101.__r_.__value_.__r.__words[j + 2]) < 0)
          operator delete(*(void **)((char *)&v101.__r_.__value_.__l.__data_ + j * 8));
      }
      if (v81 < 0)
        operator delete(v80[0]);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      {
        v49 = (void *)v85.__r_.__value_.__r.__words[0];
LABEL_135:
        operator delete(v49);
      }
    }
  }
  else if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), **(_QWORD **)(a3 + 16)))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v91, **(_QWORD **)(a3 + 16), a3);
    if (*v6 != 14 && *v6)
    {
      std::string::basic_string[abi:ne180100]<0>(&v85, "activation_grad");
      v29 = *(_QWORD *)a3;
      v30 = **(__int128 ***)(a3 + 8);
      if (*((char *)v30 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
      }
      else
      {
        v31 = *v30;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
      }
      v50 = **(__int128 ***)(a3 + 16);
      if (*((char *)v50 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)v50, *((_QWORD *)v50 + 1));
      }
      else
      {
        v51 = *v50;
        v96.__r_.__value_.__r.__words[2] = *((_QWORD *)v50 + 2);
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v51;
      }
      v52 = **(__int128 ***)(a3 + 24);
      if (*((char *)v52 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)v52, *((_QWORD *)v52 + 1));
      }
      else
      {
        v53 = *v52;
        v97.__r_.__value_.__r.__words[2] = *((_QWORD *)v52 + 2);
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v53;
      }
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
      v103.__r_.__value_.__s.__data_[8] = 0;
      v61 = (std::string *)operator new(0x48uLL);
      v62 = v61;
      v63 = v61 + 3;
      v62 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v63, (__int128 *)&__p, (__int128 *)&v98, v61);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v103, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
      else
        v103 = v91;
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
      v84.__r_.__value_.__s.__data_[8] = 0;
      v58 = (std::string *)operator new(0x18uLL);
      v59 = v58;
      v60 = v58 + 1;
      v59 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v60, (__int128 *)&v103, &v104, v58);
      Espresso::sequential_builder::add<Espresso::activation_params>(&v64, a2, (uint64_t)&v85, v29, (uint64_t)v6, (uint64_t)v61, (uint64_t)v62, (uint64_t *)&v58);
      v54 = v65;
      if (v65)
      {
        v55 = (unint64_t *)&v65->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
      for (k = 0; k != -9; k -= 3)
      {
        if (SHIBYTE(v97.__r_.__value_.__r.__words[k + 2]) < 0)
          operator delete(*(void **)((char *)&v97.__r_.__value_.__l.__data_ + k * 8));
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v85, "activation_grad");
      v26 = *(_QWORD *)a3;
      v27 = **(__int128 ***)(a3 + 8);
      if (*((char *)v27 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v27, *((_QWORD *)v27 + 1));
      }
      else
      {
        v28 = *v27;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v27 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
      }
      v32 = **(__int128 ***)(a3 + 16);
      if (*((char *)v32 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)v32, *((_QWORD *)v32 + 1));
      }
      else
      {
        v33 = *v32;
        v96.__r_.__value_.__r.__words[2] = *((_QWORD *)v32 + 2);
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v33;
      }
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
      v103.__r_.__value_.__s.__data_[8] = 0;
      v69 = (std::string *)operator new(0x30uLL);
      v70 = v69;
      v71 = v69 + 2;
      v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v71, (__int128 *)&__p, (__int128 *)&v97, v69);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v103, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
      else
        v103 = v91;
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
      v84.__r_.__value_.__s.__data_[8] = 0;
      v66 = (std::string *)operator new(0x18uLL);
      v67 = v66;
      v68 = v66 + 1;
      v67 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v68, (__int128 *)&v103, &v104, v66);
      Espresso::sequential_builder::add<Espresso::activation_params>(&v72, a2, (uint64_t)&v85, v26, (uint64_t)v6, (uint64_t)v69, (uint64_t)v70, (uint64_t *)&v66);
      v34 = v73;
      if (v73)
      {
        v35 = (unint64_t *)&v73->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
      for (m = 0; m != -6; m -= 3)
      {
        if (SHIBYTE(v96.__r_.__value_.__r.__words[m + 2]) < 0)
          operator delete(*(void **)((char *)&__p + m * 8 + 24));
      }
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    {
      v49 = (void *)v91.__r_.__value_.__r.__words[0];
      goto LABEL_135;
    }
  }
  if ((char)v88 < 0)
    operator delete(v86);
}

void sub_19167385C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  uint64_t v68;
  uint64_t v70;

  *(_QWORD *)(v68 - 112) = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v68 - 112));
  v70 = 0;
  while (1)
  {
    if (*((char *)&a68 + v70 + 71) < 0)
      operator delete(*(void **)((char *)&a68 + v70 + 48));
    v70 -= 24;
    if (v70 == -72)
    {
      if (a46 < 0)
        operator delete(__p);
      if (a60 < 0)
        operator delete(a55);
      if (a52 < 0)
        operator delete(a47);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t Espresso::check_num_arguments(uint64_t result, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  const char *v5;
  const char *v6;

  if (result != a2)
  {
    if (*(char *)(a3 + 23) >= 0)
      v4 = a3;
    else
      v4 = *(_QWORD *)a3;
    if (a4)
      v5 = "input";
    else
      v5 = "output";
    if (a2 <= 1)
      v6 = "";
    else
      v6 = "s";
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,char const*,char const*,char const*>("%s should have exactly %d %s%s", v4, (uint64_t)v5, (uint64_t)v6);
  }
  return result;
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,char const*,char const*,char const*>(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>(a1, a2, a3, a4);
}

void Espresso::generic_lambda_kernel::~generic_lambda_kernel(void **this)
{
  Espresso::generic_lambda_kernel::~generic_lambda_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  *this = &off_1E2D8A018;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 41));
  *this = off_1E2D8AB98;
  if (*((char *)this + 327) < 0)
    operator delete(this[38]);
  if (*((char *)this + 303) < 0)
    operator delete(this[35]);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::generic_lambda_kernel::__launch(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD **v8;
  uint64_t v9;
  _QWORD **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void **v23;

  (*(void (**)(uint64_t *__return_ptr))(***(_QWORD ***)a4 + 56))(&v21);
  (*(void (**)(uint64_t *__return_ptr))(***(_QWORD ***)a3 + 56))(&v19);
  v7 = *(_QWORD *)(a1 + 328);
  std::string::basic_string[abi:ne180100]<0>(__p, "data");
  v23 = __p;
  v8 = (_QWORD **)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)__p, (__int128 **)&v23);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t *))(*v8[5] + 48))(v8[5], a2, &v21);
  if (v18 < 0)
    operator delete(__p[0]);
  Espresso::net::__forward(*(_QWORD *)(a1 + 328), a2, 0, 0xFFFFFFFFLL);
  v9 = *(_QWORD *)(a1 + 328);
  std::string::basic_string[abi:ne180100]<0>(__p, "final");
  v23 = __p;
  v10 = (_QWORD **)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9 + 136, (unsigned __int8 *)__p, (__int128 **)&v23);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t *))(*v10[5] + 40))(v10[5], a2, &v19);
  if (v18 < 0)
    operator delete(__p[0]);
  v11 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_191673DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::generic_lambda_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  void **v5;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 336))(&v3);
  std::vector<Espresso::layer_shape>::__vdeallocate(a2);
  *(_OWORD *)a2 = v3;
  a2[2] = v4;
  v4 = 0;
  v3 = 0uLL;
  v5 = (void **)&v3;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void sub_191673E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_lambda_kernel::number_of_top_blobs(Espresso::generic_lambda_kernel *this)
{
  return 1;
}

const char *Espresso::generic_lambda_kernel::kernel_type_str(Espresso::generic_lambda_kernel *this)
{
  return "lambda";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::lambda_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::generic_lambda_kernel::bottom_shapes(Espresso::generic_lambda_kernel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  std::string v32;
  char v33;
  __int128 *v34[5];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *((_QWORD *)this + 41);
  v4 = *(_QWORD **)(v3 + 232);
  v5 = (_QWORD *)(v3 + 240);
  if (v4 != (_QWORD *)(v3 + 240))
  {
    do
    {
      if (*((char *)v4 + 55) < 0)
        std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)v4[4], v4[5]);
      else
        v32 = *(std::string *)(v4 + 4);
      v33 = *((_BYTE *)v4 + 56);
      v7 = *((_QWORD *)this + 41) + 136;
      v34[0] = (__int128 *)&v32;
      v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)&v32, v34);
      Espresso::abstract_blob_container::shape((char *)&v27, *((_QWORD *)v8 + 5));
      v9 = *(_QWORD *)(a2 + 8);
      v10 = *(_QWORD *)(a2 + 16);
      if (v9 >= v10)
      {
        v13 = (uint64_t)(v9 - *(_QWORD *)a2) >> 6;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 58)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v15 = v10 - *(_QWORD *)a2;
        if (v15 >> 5 > v14)
          v14 = v15 >> 5;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0)
          v16 = 0x3FFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        v34[4] = (__int128 *)(a2 + 16);
        v17 = (__int128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v16);
        v18 = &v17[4 * v13];
        v34[0] = v17;
        v34[1] = v18;
        v34[3] = &v17[4 * v19];
        v20 = v28;
        v21 = v29;
        *v18 = v27;
        v18[1] = v20;
        *((_QWORD *)v18 + 4) = v21;
        *((_QWORD *)v18 + 5) = 0;
        *((_QWORD *)v18 + 6) = 0;
        *((_QWORD *)v18 + 7) = 0;
        *(__int128 *)((char *)v18 + 40) = *(_OWORD *)__p;
        *((_QWORD *)v18 + 7) = v31;
        __p[0] = 0;
        __p[1] = 0;
        v31 = 0;
        v34[2] = v18 + 4;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)a2, v34);
        v22 = *(_QWORD *)(a2 + 8);
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v34);
        v23 = __p[0];
        *(_QWORD *)(a2 + 8) = v22;
        if (v23)
        {
          __p[1] = v23;
          operator delete(v23);
        }
      }
      else
      {
        v11 = v28;
        v12 = v29;
        *(_OWORD *)v9 = v27;
        *(_OWORD *)(v9 + 16) = v11;
        *(_QWORD *)(v9 + 32) = v12;
        *(_QWORD *)(v9 + 40) = 0;
        *(_QWORD *)(v9 + 48) = 0;
        *(_QWORD *)(v9 + 56) = 0;
        *(_OWORD *)(v9 + 40) = *(_OWORD *)__p;
        *(_QWORD *)(v9 + 56) = v31;
        __p[0] = 0;
        __p[1] = 0;
        v31 = 0;
        *(_QWORD *)(a2 + 8) = v9 + 64;
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      v24 = (_QWORD *)v4[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v4[2];
          v26 = *v25 == (_QWORD)v4;
          v4 = v25;
        }
        while (!v26);
      }
      v4 = v25;
    }
    while (v25 != v5);
  }
}

void sub_1916740C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void Espresso::generic_lambda_kernel::top_shapes(Espresso::generic_lambda_kernel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  std::string v32;
  char v33;
  __int128 *v34[5];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *((_QWORD *)this + 41);
  v4 = *(_QWORD **)(v3 + 256);
  v5 = (_QWORD *)(v3 + 264);
  if (v4 != (_QWORD *)(v3 + 264))
  {
    do
    {
      if (*((char *)v4 + 55) < 0)
        std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)v4[4], v4[5]);
      else
        v32 = *(std::string *)(v4 + 4);
      v33 = *((_BYTE *)v4 + 56);
      v7 = *((_QWORD *)this + 41) + 136;
      v34[0] = (__int128 *)&v32;
      v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)&v32, v34);
      Espresso::abstract_blob_container::shape((char *)&v27, *((_QWORD *)v8 + 5));
      v9 = *(_QWORD *)(a2 + 8);
      v10 = *(_QWORD *)(a2 + 16);
      if (v9 >= v10)
      {
        v13 = (uint64_t)(v9 - *(_QWORD *)a2) >> 6;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 58)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v15 = v10 - *(_QWORD *)a2;
        if (v15 >> 5 > v14)
          v14 = v15 >> 5;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0)
          v16 = 0x3FFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        v34[4] = (__int128 *)(a2 + 16);
        v17 = (__int128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v16);
        v18 = &v17[4 * v13];
        v34[0] = v17;
        v34[1] = v18;
        v34[3] = &v17[4 * v19];
        v20 = v28;
        v21 = v29;
        *v18 = v27;
        v18[1] = v20;
        *((_QWORD *)v18 + 4) = v21;
        *((_QWORD *)v18 + 5) = 0;
        *((_QWORD *)v18 + 6) = 0;
        *((_QWORD *)v18 + 7) = 0;
        *(__int128 *)((char *)v18 + 40) = *(_OWORD *)__p;
        *((_QWORD *)v18 + 7) = v31;
        __p[0] = 0;
        __p[1] = 0;
        v31 = 0;
        v34[2] = v18 + 4;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)a2, v34);
        v22 = *(_QWORD *)(a2 + 8);
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v34);
        v23 = __p[0];
        *(_QWORD *)(a2 + 8) = v22;
        if (v23)
        {
          __p[1] = v23;
          operator delete(v23);
        }
      }
      else
      {
        v11 = v28;
        v12 = v29;
        *(_OWORD *)v9 = v27;
        *(_OWORD *)(v9 + 16) = v11;
        *(_QWORD *)(v9 + 32) = v12;
        *(_QWORD *)(v9 + 40) = 0;
        *(_QWORD *)(v9 + 48) = 0;
        *(_QWORD *)(v9 + 56) = 0;
        *(_OWORD *)(v9 + 40) = *(_OWORD *)__p;
        *(_QWORD *)(v9 + 56) = v31;
        __p[0] = 0;
        __p[1] = 0;
        v31 = 0;
        *(_QWORD *)(a2 + 8) = v9 + 64;
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      v24 = (_QWORD *)v4[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v4[2];
          v26 = *v25 == (_QWORD)v4;
          v4 = v25;
        }
        while (!v26);
      }
      v4 = v25;
    }
    while (v25 != v5);
  }
}

void sub_191674328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void Espresso::abstract_kernel_with_weights_::clear_weights(Espresso::abstract_kernel_with_weights_ *this)
{
  char *v2;

  v2 = (char *)this + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = v2;
}

void Espresso::abstract_kernel_with_named_weights_::clear_weights(Espresso::abstract_kernel_with_named_weights_ *this)
{
  char *v2;

  v2 = (char *)this + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = v2;
}

void Espresso::no_op_kernel::~no_op_kernel(Espresso::no_op_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

const char *Espresso::no_op_kernel::kernel_type_str(Espresso::no_op_kernel *this)
{
  return "no_op";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::no_op_kernel_parameters,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

float Espresso::generic_lrn_kernel::estimated_compute_resources(uint64_t a1, __int128 **a2, int a3)
{
  Espresso::base_kernel::estimated_compute_resources(a1, a2, a3);
  return (double)*(int *)*a2
       * (double)*((int *)*a2 + 1)
       * (double)*((int *)*a2 + 2)
       * (double)*((int *)*a2 + 3)
       * (double)*(int *)(a1 + 288)
       * 3.0
       * 0.000000001;
}

float Espresso::generic_pool_kernel::estimated_compute_resources(uint64_t a1, __int128 **a2, int a3)
{
  float v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  signed int v16;
  int v17;
  signed int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  double v30;
  int v31;
  double v32;

  v5 = Espresso::base_kernel::estimated_compute_resources(a1, a2, a3);
  v6 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a1 + 384))(a1, v5);
  v8 = *(_DWORD *)(v6 + 4);
  v7 = *(_DWORD *)(v6 + 8);
  v9 = *(_DWORD *)(v6 + 12);
  v11 = *(_DWORD *)*a2;
  v10 = *((_DWORD *)*a2 + 1);
  v13 = *(_DWORD *)(v6 + 16);
  v12 = *(_DWORD *)(v6 + 20);
  switch(*(_WORD *)(v6 + 36))
  {
    case 0xFFFF:
    case 0:
      v11 = (v11 - v8 + *(__int16 *)(v6 + 46) + *(__int16 *)(v6 + 44)) / v13 + 1;
      v14 = v10 - v7 + *(__int16 *)(v6 + 50) + *(__int16 *)(v6 + 48);
      goto LABEL_31;
    case 1:
    case 4:
      v11 = (v11 - 1) / v13 + 1;
      v14 = v10 - 1;
      goto LABEL_31;
    case 2:
      v11 = (v11 - v8) / v13 + 1;
      v14 = v10 - v7;
LABEL_31:
      v10 = v14 / v12 + 1;
      break;
    case 3:
      if (v8 >= 0)
        v15 = *(_DWORD *)(v6 + 4);
      else
        v15 = v8 + 1;
      v16 = v15 & 0xFFFFFFFE;
      if (v7 >= 0)
        v17 = *(_DWORD *)(v6 + 8);
      else
        v17 = v7 + 1;
      v18 = v17 & 0xFFFFFFFE;
      if (v18 > v16)
        v16 = v18;
      v19 = v16 & ~(v16 >> 31);
      if (v13 <= 1)
        v20 = 1;
      else
        v20 = v13;
      if (v12 <= 1)
        v21 = 1;
      else
        v21 = v12;
      v22 = v13 < 0;
      if (v13 < 0)
        v23 = 1;
      else
        v23 = v20;
      v24 = ~v19;
      v25 = (v11 + v24) / v23;
      if (v22)
        v11 = ~v25;
      else
        v11 = v25 + 1;
      v26 = v12 < 0;
      if (v12 < 0)
        v27 = 1;
      else
        v27 = v21;
      v28 = (v10 + v24) / v27;
      if (v26)
        v10 = ~v28;
      else
        v10 = v28 + 1;
      break;
    default:
      break;
  }
  v29 = v11 & ~(v11 >> 31);
  if (v29 <= 1)
    v29 = 1;
  v30 = (double)v29;
  if ((v10 & ~(v10 >> 31)) <= 1)
    v31 = 1;
  else
    v31 = v10 & ~(v10 >> 31);
  v32 = (double)v31 * v30 * (double)*((int *)*a2 + 2) * (double)*((int *)*a2 + 3) * (double)v8 * (double)v7 * (double)v9;
  return (v32 + v32) * 0.000000001;
}

uint64_t Espresso::generic_pool_kernel::supports_weight_key()
{
  return 0;
}

void Espresso::generic_pool_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t i;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  void *__p[2];
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::string v26;
  std::string **v27;
  char v28;
  std::string v29;
  uint64_t v30;
  std::string v31;
  std::string v32;
  __int128 v33;

  *((_QWORD *)&v33 + 1) = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a3 + 16);
  if (*v4 == v4[1])
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("No input given to pooling layer.");
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), *v4))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v26, **(_QWORD **)(a3 + 16), a3);
    std::string::basic_string[abi:ne180100]<0>(__p, "pool_grad");
    v7 = *(_QWORD *)a3;
    v8 = **(__int128 ***)(a3 + 8);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      v31.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v9;
    }
    v10 = **(__int128 ***)(a3 + 16);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *v10;
      v32.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v11;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
    v29.__r_.__value_.__s.__data_[8] = 0;
    v19 = (std::string *)operator new(0x30uLL);
    v20 = v19;
    v21 = v19 + 2;
    v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v21, (__int128 *)&v31, &v33, v19);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v29, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
    else
      v29 = v26;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v27 = &v16;
    v28 = 0;
    v16 = (std::string *)operator new(0x18uLL);
    v17 = v16;
    v18 = v16 + 1;
    v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (__int128 *)&v29, (__int128 *)&v30, v16);
    Espresso::sequential_builder::add<Espresso::pool_params>(&v24, a2, (uint64_t)__p, v7, a1 + 304, (uint64_t)v19, (uint64_t)v20, (uint64_t *)&v16);
    v12 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v27 = &v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v32.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v31 + i * 8 + 24));
    }
    if (v23 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_191674978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,char *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;

  a31 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  v38 = 0;
  v39 = v36 - 112;
  while (1)
  {
    if (*(char *)(v39 + v38 + 47) < 0)
      operator delete(*(void **)(v39 + v38 + 24));
    v38 -= 24;
    if (v38 == -48)
    {
      if (a20 < 0)
        operator delete(__p);
      if (a28 < 0)
        operator delete(a23);
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int &,int &,int &,int &,char const*>(int a1, int a2, int a3, int a4, int a5, const char *a6)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("generic_pool_kernel: Zero dimension in output shape (%d, %d, %d, %d, %d) of %s", a1, a2, a3, a4, a5, a6);
}

float Espresso::generic_softmax_kernel::estimated_compute_resources(uint64_t a1, __int128 **a2, int a3)
{
  __int128 *v5;
  __int128 *v6;
  float v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  float v15;
  uint64_t v16;
  float v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *__p;
  void *v27;
  uint64_t v28;
  __int128 *v29;
  __int128 *v30;

  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 64))(&v29);
  v5 = *a2;
  v6 = a2[1];
  v7 = 0.0;
  if (*a2 != v6)
  {
    v8 = a3 - 1;
    do
    {
      v9 = *v5;
      v10 = v5[1];
      v25 = *((_QWORD *)v5 + 4);
      v23 = v9;
      v24 = v10;
      v27 = 0;
      v28 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
      v11 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v23);
      if (v8 > 0xC)
        v12 = 4;
      else
        v12 = qword_191AC0CA0[v8];
      if (__p)
      {
        v27 = __p;
        operator delete(__p);
      }
      v7 = v7 + (float)((float)(unint64_t)(v12 * v11) * 0.00000095367);
      v5 += 4;
    }
    while (v5 != v6);
  }
  v13 = v29;
  v14 = v30;
  v15 = 0.0;
  if (v29 != v30)
  {
    v16 = a3 - 1;
    v17 = 0.0;
    do
    {
      v18 = *v13;
      v19 = v13[1];
      v25 = *((_QWORD *)v13 + 4);
      v23 = v18;
      v24 = v19;
      v27 = 0;
      v28 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v13 + 5), *((_QWORD *)v13 + 6), (uint64_t)(*((_QWORD *)v13 + 6) - *((_QWORD *)v13 + 5)) >> 2);
      v20 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v23);
      if (v16 > 0xC)
        v21 = 4;
      else
        v21 = qword_191AC0CA0[v16];
      if (__p)
      {
        v27 = __p;
        operator delete(__p);
      }
      v17 = v17 + (float)((float)(unint64_t)(v21 * v20) * 0.00000095367);
      v13 += 4;
    }
    while (v13 != v14);
    v15 = (double)(4 * v20) * 0.000000001;
  }
  *(_QWORD *)&v23 = &v29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  return v15;
}

void sub_191674C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::generic_softmax_kernel::build_grads_for_inputs(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  std::string::size_type v4;
  __int128 **v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  char *v16;
  int v17;
  int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *__p;
  char v34;
  char v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  std::string *v38;
  std::string *v39;
  std::string *v40;
  std::string **v41;
  char v42;
  std::string v43;
  uint64_t v44;
  std::string v45;
  std::string v46;
  std::string v47;
  __int128 v48;

  *(_QWORD *)&v48 = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a3 + 16);
  v4 = *v3;
  if (v3[1] == *v3)
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("at least one input needed for softmax");
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), *v3))
  {
    v8 = *(__int128 ***)(a3 + 8);
    v9 = *v8;
    v10 = (char *)v8[1] - (char *)*v8;
    if (v10 != 24)
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("softmax loss gradient: invalid number of output grad: %zu != 1", 0xAAAAAAAAAAAAAAABLL * (v10 >> 3));
    if (a1[304])
    {
      v11 = *(uint64_t **)(a3 + 16);
      v12 = *v11;
      v13 = v11[1] - *v11;
      if (v13 != 48)
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("softmax loss gradient: invalid number of inputs: %zu != 2", 0xAAAAAAAAAAAAAAABLL * (v13 >> 3));
      v14 = **(__int128 ***)(a3 + 24);
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
      }
      else
      {
        v15 = *v14;
        v45.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v15;
      }
      if (*(char *)(v12 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(v12 + 24), *(_QWORD *)(v12 + 32));
      }
      else
      {
        v19 = *(_OWORD *)(v12 + 24);
        v46.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 40);
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      }
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v20 = *v9;
        v47.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      }
      v38 = 0;
      v39 = 0;
      v40 = 0;
      __p = &v38;
      v34 = 0;
      v38 = (std::string *)operator new(0x48uLL);
      v39 = v38;
      v40 = v38 + 3;
      v21 = 0;
      v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v40, (__int128 *)&v45, &v48, v38);
      do
      {
        if (SHIBYTE(v47.__r_.__value_.__r.__words[v21 + 2]) < 0)
          operator delete(*(void **)((char *)&v47.__r_.__value_.__l.__data_ + v21 * 8));
        v21 -= 3;
      }
      while (v21 != -9);
      Espresso::blob_grad_contrib_name((uint64_t)&v45, v4, a3);
      std::string::basic_string[abi:ne180100]<0>(&__p, "softmax_loss_grad");
      v22 = *(_QWORD *)a3;
      v23 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 320))(a1);
      v30 = 0;
      v31 = 0;
      v32 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v30, (uint64_t)v38, (uint64_t)v39, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)v38) >> 3));
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v43, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
      else
        v43 = v45;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v41 = &v27;
      v42 = 0;
      v27 = (std::string *)operator new(0x18uLL);
      v28 = v27;
      v29 = v27 + 1;
      v28 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v29, (__int128 *)&v43, (__int128 *)&v44, v27);
      Espresso::sequential_builder::add<Espresso::softmax_params>(&v36, a2, (uint64_t)&__p, v22, v23, v30, v31, (uint64_t *)&v27);
      v24 = v37;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v41 = &v27;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      if (v35 < 0)
        operator delete(__p);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
    }
    else
    {
      if (a1[306])
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("softmax gradient with is_log_softmax");
      if (a1[307])
      {
        v16 = Espresso::sequential_builder::blob_shape((Espresso::sequential_builder *)a2, **(_QWORD **)(a3 + 16));
        v17 = *((_DWORD *)v16 + 5);
        if (*((_DWORD *)v16 + 4) == 1)
          v18 = 4;
        else
          v18 = 5;
        if (v17 == -1)
          v17 = v18;
        Espresso::build_softmax_grad(a2, (uint64_t *)a3, v17 - 1);
      }
      else
      {
        Espresso::build_softmax_grad(a2, (uint64_t *)a3, -1);
      }
    }
  }
}

void sub_1916750C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  a28 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 121) < 0)
    operator delete(*(void **)(v33 - 144));
  __p = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void Espresso::build_softmax_grad(uint64_t *a1, uint64_t *a2, int a3)
{
  const void **v6;
  __int128 *v7;
  __int128 *v8;
  std::string::size_type v9;
  size_t v10;
  std::string *v11;
  const void *v12;
  __int128 v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  char v19;
  char *v20;
  size_t v21;
  std::string *v22;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  std::string *p_p;
  char *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t j;
  uint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t k;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  std::string *v45;
  std::string *v46;
  std::string *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::string __p;
  std::string v59;
  std::string *v60;
  std::string *v61;
  std::string *v62;
  std::string *v63;
  std::string *v64;
  std::string *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  std::string v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  std::string *v75;
  std::string *v76;
  std::string *v77;
  std::string *v78;
  std::string *v79;
  std::string *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  std::string v83;
  _QWORD v84[3];
  char v85;
  int v86;
  int v87;
  std::string **v88;
  char v89;
  std::string v90;
  uint64_t v91;
  std::string v92;
  std::string v93;
  std::string v94;
  __int128 v95;
  _BYTE v96[24];
  std::string v97;
  uint64_t v98;
  std::string v99;
  __int128 v100;
  _BYTE v101[12];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v6 = (const void **)*a2;
  v7 = *(__int128 **)a2[1];
  v8 = *(__int128 **)a2[3];
  v9 = *(_QWORD *)a2[2];
  v84[2] = 897988541;
  v85 = 0;
  v87 = 0;
  v86 = 0;
  v84[0] = 1;
  v84[1] = 1065353216;
  if (*((char *)v6 + 23) >= 0)
    v10 = *((unsigned __int8 *)v6 + 23);
  else
    v10 = (size_t)v6[1];
  v11 = &v83;
  std::string::basic_string[abi:ne180100]((uint64_t)&v83, v10 + 4);
  if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v83.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if (*((char *)v6 + 23) >= 0)
      v12 = v6;
    else
      v12 = *v6;
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/mul");
  std::string::basic_string[abi:ne180100]<0>(&v94, "elementwise");
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v13 = *v7;
    v99.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v13;
  }
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v100, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v14 = *v8;
    *(_QWORD *)v101 = *((_QWORD *)v8 + 2);
    v100 = v14;
  }
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
  v92.__r_.__value_.__s.__data_[8] = 0;
  v78 = (std::string *)operator new(0x30uLL);
  v79 = v78;
  v80 = v78 + 2;
  v79 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v80, (__int128 *)&v99, (__int128 *)&v101[8], v78);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v92, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  else
    v92 = v83;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v69 = (uint64_t)&v75;
  LOBYTE(v70) = 0;
  v75 = (std::string *)operator new(0x18uLL);
  v76 = v75;
  v77 = v75 + 1;
  v76 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v77, (__int128 *)&v92, (__int128 *)&v93, v75);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v81, a1, (uint64_t)&v94, (uint64_t)&v83, (uint64_t)v84, (uint64_t)v78, (uint64_t)v79, (uint64_t *)&v75);
  v15 = v82;
  if (v82)
  {
    p_shared_owners = (unint64_t *)&v82->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v69 = (uint64_t)&v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
  for (i = 0; i != -48; i -= 24)
  {
    if ((char)v101[i + 7] < 0)
      operator delete(*(void **)((char *)&v99 + i + 24));
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  v69 = 0x358637BD00000000;
  v70 = 0x100000007;
  v71 = 0;
  v72 = 0;
  v73 = 0xFFFFFFFF00000000;
  if (a3 < 0)
  {
    v19 = 0;
    LODWORD(v70) = 4;
  }
  else
  {
    HIDWORD(v73) = a3;
    v19 = 1;
  }
  v74 = v19;
  v20 = (char *)*a2;
  if (*(char *)(*a2 + 23) >= 0)
    v21 = *(unsigned __int8 *)(*a2 + 23);
  else
    v21 = *(_QWORD *)(*a2 + 8);
  v22 = &v68;
  std::string::basic_string[abi:ne180100]((uint64_t)&v68, v21 + 7);
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v22 = (std::string *)v68.__r_.__value_.__r.__words[0];
  if (v21)
  {
    if (v20[23] >= 0)
      v23 = v20;
    else
      v23 = *(char **)v20;
    memmove(v22, v23, v21);
  }
  strcpy((char *)v22 + v21, "/reduce");
  std::string::basic_string[abi:ne180100]<0>(&v99, "reduce");
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v94, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  else
    v94 = v83;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
  v92.__r_.__value_.__s.__data_[8] = 0;
  v63 = (std::string *)operator new(0x18uLL);
  v64 = v63;
  v65 = v63 + 1;
  v64 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v65, (__int128 *)&v94, &v95, v63);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v92, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  else
    v92 = v68;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
  v59.__r_.__value_.__s.__data_[8] = 0;
  v60 = (std::string *)operator new(0x18uLL);
  v61 = v60;
  v62 = v60 + 1;
  v61 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v62, (__int128 *)&v92, (__int128 *)&v93, v60);
  Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v66, a1, (uint64_t)&v99, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)v63, (uint64_t)v64, (uint64_t *)&v60);
  v24 = v67;
  if (v67)
  {
    v25 = (unint64_t *)&v67->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  Espresso::blob_grad_contrib_name((uint64_t)&v59, v9, (uint64_t)a2);
  v99.__r_.__value_.__r.__words[2] = 897988541;
  LOBYTE(v100) = 0;
  *(_QWORD *)&v101[4] = 0;
  v99.__r_.__value_.__r.__words[0] = 33;
  v99.__r_.__value_.__l.__size_ = 1065353216;
  v27 = (char *)*a2;
  if (*(char *)(*a2 + 23) >= 0)
    v28 = *(unsigned __int8 *)(*a2 + 23);
  else
    v28 = *(_QWORD *)(*a2 + 8);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v28 + 4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v28)
  {
    if (v27[23] >= 0)
      v30 = v27;
    else
      v30 = *(char **)v27;
    memmove(p_p, v30, v28);
  }
  strcpy((char *)p_p + v28, "/sub");
  std::string::basic_string[abi:ne180100]<0>(&v92, "elementwise");
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v31 = *v7;
    v94.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v31;
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v95, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  }
  else
  {
    v95 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
    *(_QWORD *)v96 = *((_QWORD *)&v68.__r_.__value_.__l + 2);
  }
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  v97.__r_.__value_.__s.__data_[8] = 0;
  v53 = (std::string *)operator new(0x30uLL);
  v54 = v53;
  v55 = v53 + 2;
  v54 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v55, (__int128 *)&v94, (__int128 *)&v96[8], v53);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v97, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v97 = __p;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  v90.__r_.__value_.__s.__data_[8] = 0;
  v50 = (std::string *)operator new(0x18uLL);
  v51 = v50;
  v52 = v50 + 1;
  v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v52, (__int128 *)&v97, (__int128 *)&v98, v50);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v56, a1, (uint64_t)&v92, (uint64_t)&__p, (uint64_t)&v99, (uint64_t)v53, (uint64_t)v54, (uint64_t *)&v50);
  v32 = v57;
  if (v57)
  {
    v33 = (unint64_t *)&v57->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
  for (j = 0; j != -48; j -= 24)
  {
    if ((char)v96[j + 7] < 0)
      operator delete(*(void **)((char *)&v94 + j + 24));
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  v94.__r_.__value_.__r.__words[2] = 897988541;
  LOBYTE(v95) = 0;
  *(_QWORD *)&v96[4] = 0;
  v94.__r_.__value_.__r.__words[0] = 1;
  v94.__r_.__value_.__l.__size_ = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v97, "elementwise");
  v36 = *a2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v92, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v92 = __p;
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v37 = *v8;
    v93.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v37;
  }
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  v90.__r_.__value_.__s.__data_[8] = 0;
  v45 = (std::string *)operator new(0x30uLL);
  v46 = v45;
  v47 = v45 + 2;
  v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v47, (__int128 *)&v92, (__int128 *)&v94, v45);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v90, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    v90 = v59;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v88 = &v42;
  v89 = 0;
  v42 = (std::string *)operator new(0x18uLL);
  v43 = v42;
  v44 = v42 + 1;
  v43 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v44, (__int128 *)&v90, (__int128 *)&v91, v42);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v48, a1, (uint64_t)&v97, v36, (uint64_t)&v94, (uint64_t)v45, (uint64_t)v46, (uint64_t *)&v42);
  v38 = v49;
  if (v49)
  {
    v39 = (unint64_t *)&v49->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v88 = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
  for (k = 0; k != -6; k -= 3)
  {
    if (SHIBYTE(v93.__r_.__value_.__r.__words[k + 2]) < 0)
      operator delete(*(void **)((char *)&v92 + k * 8 + 24));
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
}

void sub_191675BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  char a71;
  void *a72;
  uint64_t v72;
  uint64_t v74;

  a72 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  v74 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x200] + v74 + 47) < 0)
      operator delete(*(void **)((char *)&STACK[0x200] + v74 + 24));
    v74 -= 24;
    if (v74 == -48)
    {
      if (*(char *)(v72 - 169) < 0)
        operator delete(*(void **)(v72 - 192));
      if (a31 < 0)
        operator delete(__p);
      if (a37 < 0)
        operator delete(a32);
      if (a51 < 0)
        operator delete(a46);
      if (a71 < 0)
        operator delete(a66);
      _Unwind_Resume(a1);
    }
  }
}

void sub_191675F18()
{
  JUMPOUT(0x191675F08);
}

void Espresso::generic_concat_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, char **a3)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  std::string *v12;
  char *v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string v28;
  void *__p[2];
  std::string::size_type v30;
  void *v31[2];
  char v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::string v35;
  __int128 v36;
  uint64_t v37;
  std::string **v38;
  char v39;
  std::string v40;
  __int128 v41;

  *(_QWORD *)&v41 = *MEMORY[0x1E0C80C00];
  v36 = xmmword_191A93790;
  v37 = 0x100000000;
  v3 = (unsigned __int8 **)a3[2];
  v4 = *v3;
  v5 = v3[1];
  if (*v3 != v5)
  {
    v8 = 0;
    do
    {
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3[5], (uint64_t)v4))
      {
        v9 = a2[10] + 136;
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
        *(_QWORD *)((char *)&v36 + 4) = __PAIR64__(*(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, v4, (__int128 **)&v35)+ 5)+ 16)+ v8, v8);
        Espresso::blob_grad_contrib_name((uint64_t)&v35, (std::string::size_type)v4, (uint64_t)a3);
        std::string::basic_string[abi:ne180100]<0>(v31, "slice");
        v10 = *a3;
        if ((*a3)[23] >= 0)
          v11 = (*a3)[23];
        else
          v11 = *((_QWORD *)*a3 + 1);
        std::string::basic_string[abi:ne180100]((uint64_t)&v28, v11 + 1);
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &v28;
        else
          v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
        if (v11)
        {
          if (v10[23] >= 0)
            v13 = v10;
          else
            v13 = *(char **)v10;
          memmove(v12, v13, v11);
        }
        *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 58;
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v35;
        else
          v14 = (std::string *)v35.__r_.__value_.__r.__words[0];
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
        else
          size = v35.__r_.__value_.__l.__size_;
        v16 = std::string::append(&v28, (const std::string::value_type *)v14, size);
        v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v30 = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        v18 = (uint64_t *)a3[1];
        v26 = 0;
        v27 = 0;
        v25 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v25, *v18, v18[1], 0xAAAAAAAAAAAAAAABLL * ((v18[1] - *v18) >> 3));
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v40, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
        else
          v40 = v35;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v38 = &v22;
        v39 = 0;
        v22 = (std::string *)operator new(0x18uLL);
        v23 = v22;
        v24 = v22 + 1;
        v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v24, (__int128 *)&v40, &v41, v22);
        Espresso::sequential_builder::add<Espresso::slice_params_t>(&v33, a2, (uint64_t)v31, (uint64_t)__p, (uint64_t)&v36, v25, v26, (uint64_t *)&v22);
        v19 = v34;
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v38 = &v22;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
        if (SHIBYTE(v30) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (v32 < 0)
          operator delete(v31[0]);
        v8 = DWORD2(v36);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
}

void sub_19167623C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  *(_QWORD *)(v42 - 128) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 128));
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a34 < 0)
    operator delete(a29);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(a1);
}

void Espresso::generic_upsample_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  int32x2_t v9;
  int v10;
  BOOL v11;
  char *v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *__p;
  _BYTE *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  _BYTE *v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  __int128 v28[2];
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  __int128 v33;

  *((_QWORD *)&v33 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  v20 = **a2;
  v21 = v7;
  v22 = v6;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v23, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  *((_QWORD *)&v14 + 1) = *((_QWORD *)&v20 + 1);
  v15 = v21;
  v16 = v22;
  __p = 0;
  v18 = 0;
  v19 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v23, (uint64_t)v24, (v24 - (_BYTE *)v23) >> 2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
  if ((*(_BYTE *)(v8 + 24) & 1) != 0)
  {
    if (*(_DWORD *)(v8 + 20))
    {
      v13 = "generic_upsample_kernel: fractional scaling factor cannot be used in legacy mode";
    }
    else
    {
      *(int32x2_t *)&v14 = vcvt_s32_f32(vrndm_f32(vmul_f32(*(float32x2_t *)(v8 + 28), vcvt_f32_s32(*(int32x2_t *)&v20))));
      v10 = DWORD1(v14);
      if ((_DWORD)v14)
        v11 = DWORD1(v14) == 0;
      else
        v11 = 1;
      if (v11)
      {
        v13 = "generic_upsample_kernel: fractional scaling factor is too small, output shape is 0";
      }
      else
      {
        if ((*(_BYTE *)(v8 + 36) & 1) != 0)
          goto LABEL_12;
        if (*(_DWORD *)(v8 + 16))
        {
          v13 = "generic_upsample_kernel: recompute_fractional_scale_factors == false not supported with align_corners";
        }
        else
        {
          if (*(_DWORD *)(v8 + 12) <= 1u)
            goto LABEL_12;
          v13 = "generic_upsample_kernel: recompute_fractional_scale_factors == false only supported with nearest and linear mode.";
        }
      }
    }
LABEL_27:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v13);
  }
  v9 = vmul_s32(*(int32x2_t *)&v20, *(int32x2_t *)(v8 + 4));
  *(int32x2_t *)&v14 = v9;
  if ((*(_BYTE *)(v8 + 36) & 1) == 0)
  {
    v13 = "generic_upsample_kernel: Found recompute_fractional_scale_factors == false without use_fractional_scale_factors";
    goto LABEL_27;
  }
  v10 = v9.i32[1];
LABEL_12:
  if (DWORD1(v15) == 1 && v10 >= 2)
    DWORD1(v15) = 2;
  v28[0] = v14;
  v28[1] = v15;
  v29 = v16;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v30, __p, (uint64_t)v18, (v18 - (_BYTE *)__p) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v26 = a3;
  v27 = 0;
  v12 = (char *)operator new(0x40uLL);
  *a3 = v12;
  a3[1] = v12;
  a3[2] = v12 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v28, &v33, (uint64_t)v12);
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

void sub_19167654C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void **a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;

  *(_QWORD *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a25);
  v29 = *(void **)(v27 - 72);
  if (v29)
  {
    *(_QWORD *)(v27 - 64) = v29;
    operator delete(v29);
  }
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

float Espresso::generic_upsample_kernel::estimated_compute_resources(uint64_t a1, __int128 **a2, int a3)
{
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  float v9;
  float v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  float v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *__p;
  void *v31;
  uint64_t v32;
  __int128 *v33;
  __int128 *v34;

  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 64))(&v33);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
  v7 = *a2;
  v8 = a2[1];
  v9 = 0.0;
  v10 = 0.0;
  if (*a2 != v8)
  {
    v11 = *(_DWORD *)(v6 + 8);
    v26 = *(_DWORD *)(v6 + 4);
    v12 = a3 - 1;
    do
    {
      v13 = *v7;
      v14 = v7[1];
      v29 = *((_QWORD *)v7 + 4);
      v27 = v13;
      v28 = v14;
      v31 = 0;
      v32 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v7 + 5), *((_QWORD *)v7 + 6), (uint64_t)(*((_QWORD *)v7 + 6) - *((_QWORD *)v7 + 5)) >> 2);
      v15 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v27);
      if (v12 > 0xC)
        v16 = 4;
      else
        v16 = qword_191AC0CA0[v12];
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      v9 = v9 + (float)((float)(unint64_t)(v16 * v15) * 0.00000095367);
      v7 += 4;
    }
    while (v7 != v8);
    v10 = (double)(v15 * v11 * (uint64_t)v26) * 0.000000001;
  }
  v17 = v33;
  v18 = v34;
  if (v33 != v34)
  {
    v19 = a3 - 1;
    v20 = 0.0;
    do
    {
      v21 = *v17;
      v22 = v17[1];
      v29 = *((_QWORD *)v17 + 4);
      v27 = v21;
      v28 = v22;
      v31 = 0;
      v32 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v17 + 5), *((_QWORD *)v17 + 6), (uint64_t)(*((_QWORD *)v17 + 6) - *((_QWORD *)v17 + 5)) >> 2);
      v23 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v27);
      if (v19 > 0xC)
        v24 = 4;
      else
        v24 = qword_191AC0CA0[v19];
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      v20 = v20 + (float)((float)(unint64_t)(v24 * v23) * 0.00000095367);
      v17 += 4;
    }
    while (v17 != v18);
  }
  *(_QWORD *)&v27 = &v33;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  return v10;
}

void sub_1916767C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  a11 = (void **)&a20;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void Espresso::generic_elementwise_kernel::backpropable(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v4;
  __int16 v5;
  char v6;
  void *__p[3];

  v4 = *(_DWORD *)(a1 + 280) - 100;
  if (v4 > 0x11)
    goto LABEL_8;
  if (((1 << v4) & 0x20CF1) != 0)
  {
    Espresso::check_backpropable_result_t::not_backpropable_on_all_inputs((Espresso::check_backpropable_result_t *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3)), a3);
    return;
  }
  if (*(_DWORD *)(a1 + 280) == 101)
  {
    v5 = 256;
    v6 = 1;
    std::vector<BOOL>::vector(__p, &v5, 3);
    std::vector<BOOL>::vector(a3, (uint64_t)__p);
    if (__p[0])
      operator delete(__p[0]);
  }
  else
  {
LABEL_8:
    Espresso::base_kernel::backpropable(a2, a3);
  }
}

void sub_1916768BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::generic_elementwise_kernel::build_grads_for_inputs(uint64_t a1, Espresso::sequential_builder *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  int *v10;
  uint64_t v11;
  __int128 **v12;
  __int128 *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string::size_type v17;
  __int128 *v18;
  int v19;
  uint64_t v20;
  size_t v21;
  std::string *v22;
  const void *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  size_t v36;
  std::string *p_s;
  const void *v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  Espresso::sequential_builder *v42;
  uint64_t v43;
  uint64_t v44;
  std::string *v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  std::string::size_type v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 *v54;
  std::string::size_type v55;
  __int128 v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  size_t v73;
  std::string *v74;
  const void *v75;
  __int128 v76;
  uint64_t v77;
  size_t v78;
  std::string *v79;
  const void *v80;
  __int128 v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t ii;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  void *v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  std::string **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t j;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t k;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  __int128 v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  __int128 v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  __int128 v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t i;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t m;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t n;
  std::string *v148;
  std::string *v149;
  std::string *v150;
  std::string *v151;
  std::string *v152;
  std::string *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  std::string v156;
  std::string v157;
  std::string *v158;
  std::string *v159;
  std::string *v160;
  std::string *v161;
  std::string *v162;
  std::string *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  std::string v166;
  std::string *v167;
  std::string *v168;
  std::string *v169;
  std::string *v170;
  std::string *v171;
  std::string *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  std::string *v175;
  std::string *v176;
  std::string *v177;
  std::string *v178;
  std::string *v179;
  std::string *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  std::string *v183;
  std::string *v184;
  std::string *v185;
  std::string *v186;
  std::string *v187;
  std::string *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  std::string *v191;
  std::string *v192;
  std::string *v193;
  std::string *v194;
  std::string *v195;
  std::string *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  std::string *v199;
  std::string *v200;
  std::string *v201;
  std::string *v202;
  std::string *v203;
  std::string *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  std::string *v207;
  std::string *v208;
  std::string *v209;
  std::string *v210;
  std::string *v211;
  std::string *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  std::string *v215;
  std::string *v216;
  std::string *v217;
  std::string *v218;
  std::string *v219;
  std::string *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  std::string *v223;
  std::string *v224;
  std::string *v225;
  std::string *v226;
  std::string *v227;
  std::string *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  std::string *v231;
  std::string *v232;
  std::string *v233;
  std::string *v234;
  std::string *v235;
  std::string *v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  std::string *v239;
  std::string *v240;
  std::string *v241;
  std::string *v242;
  std::string *v243;
  std::string *v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  _BYTE v247[32];
  _BYTE v248[20];
  std::string __s;
  void *__p[2];
  std::string::size_type v251;
  std::string **v252;
  char v253;
  _QWORD v254[3];
  _QWORD *v255;
  _QWORD v256[3];
  _QWORD *v257;
  _QWORD v258[3];
  _QWORD *v259;
  _QWORD v260[3];
  _QWORD *v261;
  _BYTE v262[24];
  _BYTE *v263;
  _QWORD v264[3];
  _QWORD *v265;
  _BYTE v266[24];
  _BYTE *v267;
  _BYTE v268[24];
  _BYTE *v269;
  _BYTE v270[24];
  _BYTE *v271;
  _BYTE v272[24];
  _BYTE *v273;
  _BYTE v274[48];
  std::string v275;
  uint64_t v276;
  std::string v277;
  uint64_t v278;
  std::string v279;
  __int128 v280;
  _BYTE v281[24];
  std::string v282;
  __int128 v283;

  *(_QWORD *)&v283 = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a3 + 16);
  v4 = *v3;
  if (*v3 == v3[1] || (v6 = *(uint64_t **)(a3 + 8), v7 = *v6, *v6 == v6[1]))
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("No input given to elementwise layer.");
  v10 = (int *)(a1 + 280);
  v11 = *(unsigned int *)(a1 + 280);
  if ((int)v11 > 101)
  {
    if ((v11 - 114) < 2)
      goto LABEL_12;
    if ((_DWORD)v11 != 102)
    {
      if ((_DWORD)v11 != 119)
      {
LABEL_60:
        v40 = 0;
        while (1)
        {
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v4 + 24 * v40))
          {
            v41 = *v10;
            if ((_DWORD)v41)
            {
              if ((_DWORD)v41 != 1)
                Espresso::throw_exception_selector<Espresso::generic_error,int &>("Backward not supported for elementwise operation %d", v41);
              v42 = a2;
              memset(v247, 0, 24);
              v43 = **(_QWORD **)(a3 + 16);
              if (*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) != v43)
              {
                v44 = 0;
                v45 = 0;
                v46 = 0;
                do
                {
                  if (v40 == v46)
                  {
                    v47 = v7;
                    if ((unint64_t)v45 < *(_QWORD *)&v247[16])
                    {
                      if ((*(char *)(v7 + 23) & 0x80000000) == 0)
                      {
                        v48 = *(_OWORD *)v7;
                        v49 = *(_QWORD *)(v7 + 16);
                        goto LABEL_73;
                      }
                      std::string::__init_copy_ctor_external(v45, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
LABEL_77:
                      ++v45;
                      goto LABEL_78;
                    }
                  }
                  else
                  {
                    v47 = v43 + v44;
                    if ((unint64_t)v45 < *(_QWORD *)&v247[16])
                    {
                      if (*(char *)(v47 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(v45, *(const std::string::value_type **)(v43 + v44), *(_QWORD *)(v43 + v44 + 8));
                      }
                      else
                      {
                        v48 = *(_OWORD *)v47;
                        v49 = *(_QWORD *)(v47 + 16);
LABEL_73:
                        v45->__r_.__value_.__r.__words[2] = v49;
                        *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v48;
                      }
                      goto LABEL_77;
                    }
                  }
                  v45 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v247, v47);
LABEL_78:
                  *(_QWORD *)&v247[8] = v45;
                  ++v46;
                  v43 = **(_QWORD **)(a3 + 16);
                  v44 += 24;
                }
                while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - v43) >> 3) > v46);
              }
              v256[0] = &off_1E2DB1CE8;
              v256[1] = a1;
              v256[2] = v247;
              v257 = v256;
              a2 = v42;
              Espresso::maybe_broadcasted_elementwise_grad(v42, a3, v40, (uint64_t)v256);
              v50 = v257;
              if (v257 == v256)
              {
                v50 = v256;
                v51 = 4;
LABEL_88:
                (*(void (**)(void))(*v50 + 8 * v51))();
              }
              else if (v257)
              {
                v51 = 5;
                goto LABEL_88;
              }
              v279.__r_.__value_.__r.__words[0] = (std::string::size_type)v247;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v279);
              goto LABEL_90;
            }
            v254[0] = &off_1E2DB1D40;
            v254[1] = v7;
            v255 = v254;
            Espresso::maybe_broadcasted_elementwise_grad(a2, a3, v40, (uint64_t)v254);
            v52 = v255;
            if (v255 == v254)
            {
              v52 = v254;
              v53 = 4;
              goto LABEL_86;
            }
            if (v255)
            {
              v53 = 5;
LABEL_86:
              (*(void (**)(void))(*v52 + 8 * v53))();
            }
          }
LABEL_90:
          ++v40;
          v4 = **(_QWORD **)(a3 + 16);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - v4) >> 3) <= v40)
            return;
        }
      }
      goto LABEL_12;
    }
    std::string::basic_string[abi:ne180100]<0>(v247, "elementwise div");
    Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - **(_QWORD **)(a3 + 16)) >> 3), 2uLL, (uint64_t)v247, 1);
    Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 3), 1uLL, (uint64_t)v247, 0);
    v28 = **(_QWORD **)(a3 + 16) + 24;
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), **(_QWORD **)(a3 + 16)))
    {
      v264[0] = &off_1E2DB1B88;
      v264[1] = v7;
      v264[2] = v28;
      v265 = v264;
      Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 0, (uint64_t)v264);
      v29 = v265;
      if (v265 == v264)
      {
        v30 = 4;
        v29 = v264;
        goto LABEL_196;
      }
      if (v265)
      {
        v30 = 5;
LABEL_196:
        (*(void (**)(void))(*v29 + 8 * v30))();
      }
    }
    if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v28))goto LABEL_245;
    v263 = 0;
    v96 = operator new(0x20uLL);
    *v96 = &off_1E2DB1BE0;
    v96[1] = v7;
    v96[2] = a3;
    v96[3] = v28;
    v263 = v96;
    Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 1uLL, (uint64_t)v262);
    v97 = v263;
    if (v263 == v262)
    {
      v98 = 4;
      v97 = v262;
LABEL_244:
      (*(void (**)(void))(*v97 + 8 * v98))();
      goto LABEL_245;
    }
LABEL_241:
    if (v97)
    {
      v98 = 5;
      goto LABEL_244;
    }
LABEL_245:
    if ((v247[23] & 0x80000000) == 0)
      return;
    v107 = *(void **)v247;
    goto LABEL_414;
  }
  if (v11 > 0x21)
    goto LABEL_47;
  if (((1 << v11) & 0xF00380C) != 0)
  {
LABEL_12:
    std::to_string((std::string *)v247, v11);
    v15 = std::string::insert((std::string *)v247, 0, "elementwise op ");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v251 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((v247[23] & 0x80000000) != 0)
      operator delete(*(void **)v247);
    Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - **(_QWORD **)(a3 + 16)) >> 3), 1uLL, (uint64_t)__p, 1);
    Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 3), 1uLL, (uint64_t)__p, 0);
    if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), **(_QWORD **)(a3 + 16)))goto LABEL_412;
    v17 = **(_QWORD **)(a3 + 16);
    v18 = **(__int128 ***)(a3 + 24);
    Espresso::blob_grad_contrib_name((uint64_t)&__s, v17, a3);
    *(_QWORD *)v247 = 0;
    *(_QWORD *)&v247[8] = 1065353216;
    *(_QWORD *)&v247[16] = 897988541;
    v247[24] = 0;
    *(_QWORD *)&v248[12] = 0;
    v19 = *v10;
    if (*v10 <= 23)
    {
      switch(v19)
      {
        case 2:
          std::string::basic_string[abi:ne180100]<0>(&v279, "copy");
          v25 = *(_QWORD *)a3;
          LODWORD(v275.__r_.__value_.__l.__data_) = 0;
          if (*(char *)(v7 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v274, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
          }
          else
          {
            v26 = *(_OWORD *)v7;
            *(_QWORD *)&v274[16] = *(_QWORD *)(v7 + 16);
            *(_OWORD *)v274 = v26;
          }
          v170 = 0;
          v171 = 0;
          v172 = 0;
          v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v170;
          v282.__r_.__value_.__s.__data_[8] = 0;
          v170 = (std::string *)operator new(0x18uLL);
          v171 = v170;
          v172 = v170 + 1;
          v171 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v172, (__int128 *)v274, (__int128 *)&v274[24], v170);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v282, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v282 = __s;
          v167 = 0;
          v168 = 0;
          v169 = 0;
          v277.__r_.__value_.__r.__words[0] = (std::string::size_type)&v167;
          v277.__r_.__value_.__s.__data_[8] = 0;
          v167 = (std::string *)operator new(0x18uLL);
          v168 = v167;
          v169 = v167 + 1;
          v168 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v169, (__int128 *)&v282, &v283, v167);
          Espresso::sequential_builder::add<Espresso::copy_params_t>(&v173, (uint64_t *)a2, (uint64_t)&v279, v25, (uint64_t)&v275, (uint64_t)v170, (uint64_t)v171, (uint64_t *)&v167);
          v100 = v174;
          if (v174)
          {
            p_shared_owners = (unint64_t *)&v174->__shared_owners_;
            do
              v102 = __ldaxr(p_shared_owners);
            while (__stlxr(v102 - 1, p_shared_owners));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
          v277.__r_.__value_.__r.__words[0] = (std::string::size_type)&v167;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v277);
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v282.__r_.__value_.__l.__data_);
          v103 = &v170;
          goto LABEL_233;
        case 3:
          v62 = *((_OWORD *)v10 + 1);
          *(_OWORD *)v247 = *(_OWORD *)v10;
          *(_OWORD *)&v247[16] = v62;
          *(_OWORD *)v248 = *((_OWORD *)v10 + 2);
          *(_DWORD *)&v248[16] = v10[12];
          *(_DWORD *)&v247[12] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v279, "elementwise");
          v63 = *(_QWORD *)a3;
          if (*(char *)(v7 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v274, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
          }
          else
          {
            v64 = *(_OWORD *)v7;
            *(_QWORD *)&v274[16] = *(_QWORD *)(v7 + 16);
            *(_OWORD *)v274 = v64;
          }
          v178 = 0;
          v179 = 0;
          v180 = 0;
          v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v178;
          v282.__r_.__value_.__s.__data_[8] = 0;
          v178 = (std::string *)operator new(0x18uLL);
          v179 = v178;
          v180 = v178 + 1;
          v179 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v180, (__int128 *)v274, (__int128 *)&v274[24], v178);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v282, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v282 = __s;
          v175 = 0;
          v176 = 0;
          v177 = 0;
          v277.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175;
          v277.__r_.__value_.__s.__data_[8] = 0;
          v175 = (std::string *)operator new(0x18uLL);
          v176 = v175;
          v177 = v175 + 1;
          v176 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v177, (__int128 *)&v282, &v283, v175);
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v181, (uint64_t *)a2, (uint64_t)&v279, v63, (uint64_t)v247, (uint64_t)v178, (uint64_t)v179, (uint64_t *)&v175);
          v104 = v182;
          if (v182)
          {
            v105 = (unint64_t *)&v182->__shared_owners_;
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
          v277.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v277);
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v282.__r_.__value_.__l.__data_);
          v103 = &v178;
LABEL_233:
          v282.__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v282);
          if ((v274[23] & 0x80000000) != 0)
            operator delete(*(void **)v274);
          if ((SHIBYTE(v279.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_410;
          v99 = (void *)v279.__r_.__value_.__r.__words[0];
          break;
        case 11:
          if (*(char *)(v17 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v157, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
          }
          else
          {
            v65 = *(_OWORD *)v17;
            v157.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
            *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v65;
          }
          Espresso::build_grads_for_pow_input((uint64_t)&v157, v7, (uint64_t)&__s, (uint64_t *)a2, (uint64_t *)a3, 0.5);
          if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_410;
          v99 = (void *)v157.__r_.__value_.__r.__words[0];
          break;
        case 12:
          if (*(char *)(v17 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
          }
          else
          {
            v61 = *(_OWORD *)v17;
            v156.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
            *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v61;
          }
          Espresso::build_grads_for_pow_input((uint64_t)&v156, v7, (uint64_t)&__s, (uint64_t *)a2, (uint64_t *)a3, -0.5);
          if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_410;
          v99 = (void *)v156.__r_.__value_.__r.__words[0];
          break;
        case 13:
          if (*(char *)(v17 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
          }
          else
          {
            v60 = *(_OWORD *)v17;
            v166.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
            *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v60;
          }
          Espresso::build_grads_for_pow_input((uint64_t)&v166, v7, (uint64_t)&__s, (uint64_t *)a2, (uint64_t *)a3, *(float *)(a1 + 288));
          if ((SHIBYTE(v166.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_410;
          v99 = (void *)v166.__r_.__value_.__r.__words[0];
          break;
        default:
          goto LABEL_410;
      }
      goto LABEL_409;
    }
    if (v19 <= 113)
    {
      switch(v19)
      {
        case 24:
          v20 = *(_QWORD *)a3;
          if (*(char *)(*(_QWORD *)a3 + 23) >= 0)
            v21 = *(unsigned __int8 *)(*(_QWORD *)a3 + 23);
          else
            v21 = *(_QWORD *)(*(_QWORD *)a3 + 8);
          v22 = &v282;
          std::string::basic_string[abi:ne180100]((uint64_t)&v282, v21 + 5);
          if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v22 = (std::string *)v282.__r_.__value_.__r.__words[0];
          if (v21)
          {
            if (*(char *)(v20 + 23) >= 0)
              v23 = (const void *)v20;
            else
              v23 = *(const void **)v20;
            memmove(v22, v23, v21);
          }
          strcpy((char *)v22 + v21, ":sign");
          v279.__r_.__value_.__r.__words[2] = 897988541;
          LOBYTE(v280) = 0;
          *(_QWORD *)&v281[4] = 0;
          v279.__r_.__value_.__r.__words[0] = 38;
          v279.__r_.__value_.__l.__size_ = 1065353216;
          std::string::basic_string[abi:ne180100]<0>(v274, "elementwise");
          if (*(char *)(v17 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v277, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
          }
          else
          {
            v24 = *(_OWORD *)v17;
            v277.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
            *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v24;
          }
          v227 = 0;
          v226 = 0;
          v228 = 0;
          v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v226;
          v275.__r_.__value_.__s.__data_[8] = 0;
          v226 = (std::string *)operator new(0x18uLL);
          v227 = v226;
          v228 = v226 + 1;
          v227 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v228, (__int128 *)&v277, (__int128 *)&v278, v226);
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v275, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
          else
            v275 = v282;
          v224 = 0;
          v223 = 0;
          v225 = 0;
          v252 = &v223;
          v253 = 0;
          v223 = (std::string *)operator new(0x18uLL);
          v224 = v223;
          v225 = v223 + 1;
          v224 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v225, (__int128 *)&v275, (__int128 *)&v276, v223);
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v229, (uint64_t *)a2, (uint64_t)v274, (uint64_t)&v282, (uint64_t)&v279, (uint64_t)v226, (uint64_t)v227, (uint64_t *)&v223);
          v121 = v230;
          if (v230)
          {
            v122 = (unint64_t *)&v230->__shared_owners_;
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 - 1, v122));
            if (!v123)
            {
              ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
              std::__shared_weak_count::__release_weak(v121);
            }
          }
          v252 = &v223;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
          if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v275.__r_.__value_.__l.__data_);
          v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v226;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
          if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v277.__r_.__value_.__l.__data_);
          if ((v274[23] & 0x80000000) != 0)
            operator delete(*(void **)v274);
          *(_DWORD *)v247 = 1;
          std::string::basic_string[abi:ne180100]<0>(&v277, "elementwise");
          v124 = *(_QWORD *)a3;
          if (*(char *)(v7 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v274, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
          }
          else
          {
            v125 = *(_OWORD *)v7;
            *(_QWORD *)&v274[16] = *(_QWORD *)(v7 + 16);
            *(_OWORD *)v274 = v125;
          }
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external((std::string *)&v274[24], v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
          else
            *(std::string *)&v274[24] = v282;
          v219 = 0;
          v218 = 0;
          v220 = 0;
          v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
          v275.__r_.__value_.__s.__data_[8] = 0;
          v218 = (std::string *)operator new(0x30uLL);
          v219 = v218;
          v220 = v218 + 2;
          v219 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v220, (__int128 *)v274, (__int128 *)&v275, v218);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v275, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v275 = __s;
          v216 = 0;
          v215 = 0;
          v217 = 0;
          v252 = &v215;
          v253 = 0;
          v215 = (std::string *)operator new(0x18uLL);
          v216 = v215;
          v217 = v215 + 1;
          v216 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v217, (__int128 *)&v275, (__int128 *)&v276, v215);
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v221, (uint64_t *)a2, (uint64_t)&v277, v124, (uint64_t)v247, (uint64_t)v218, (uint64_t)v219, (uint64_t *)&v215);
          v136 = v222;
          if (v222)
          {
            v137 = (unint64_t *)&v222->__shared_owners_;
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            if (!v138)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
          v252 = &v215;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
          if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v275.__r_.__value_.__l.__data_);
          v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
          for (i = 0; i != -48; i -= 24)
          {
            if ((char)v274[i + 47] < 0)
              operator delete(*(void **)&v274[i + 24]);
          }
          goto LABEL_405;
        case 25:
          goto LABEL_36;
        case 26:
          *(_DWORD *)v247 = 102;
          std::string::basic_string[abi:ne180100]<0>(v274, "elementwise");
          v66 = *(_QWORD *)a3;
          if (*(char *)(v7 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v279, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
          }
          else
          {
            v67 = *(_OWORD *)v7;
            v279.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
            *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v67;
          }
          if (*(char *)(v17 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v280, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
          }
          else
          {
            v111 = *(_OWORD *)v17;
            *(_QWORD *)v281 = *(_QWORD *)(v17 + 16);
            v280 = v111;
          }
          v243 = 0;
          v242 = 0;
          v244 = 0;
          v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v242;
          v282.__r_.__value_.__s.__data_[8] = 0;
          v242 = (std::string *)operator new(0x30uLL);
          v243 = v242;
          v244 = v242 + 2;
          v243 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v244, (__int128 *)&v279, (__int128 *)&v281[8], v242);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v282, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v282 = __s;
          v240 = 0;
          v239 = 0;
          v241 = 0;
          v277.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
          v277.__r_.__value_.__s.__data_[8] = 0;
          v239 = (std::string *)operator new(0x18uLL);
          v240 = v239;
          v241 = v239 + 1;
          v240 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v241, (__int128 *)&v282, &v283, v239);
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v245, (uint64_t *)a2, (uint64_t)v274, v66, (uint64_t)v247, (uint64_t)v242, (uint64_t)v243, (uint64_t *)&v239);
          v113 = v246;
          if (v246)
          {
            v114 = (unint64_t *)&v246->__shared_owners_;
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
          }
          v277.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v277);
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v282.__r_.__value_.__l.__data_);
          v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v242;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v282);
          for (j = 0; j != -48; j -= 24)
          {
            if ((char)v281[j + 7] < 0)
              operator delete(*(void **)((char *)&v279 + j + 24));
          }
          goto LABEL_305;
        case 27:
          *(_DWORD *)v247 = 1;
          std::string::basic_string[abi:ne180100]<0>(v274, "elementwise");
          v68 = *(_QWORD *)a3;
          if (*(char *)(v7 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v279, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
          }
          else
          {
            v69 = *(_OWORD *)v7;
            v279.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
            *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v69;
          }
          if (*((char *)v18 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v280, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
          }
          else
          {
            v112 = *v18;
            *(_QWORD *)v281 = *((_QWORD *)v18 + 2);
            v280 = v112;
          }
          v235 = 0;
          v234 = 0;
          v236 = 0;
          v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v234;
          v282.__r_.__value_.__s.__data_[8] = 0;
          v234 = (std::string *)operator new(0x30uLL);
          v235 = v234;
          v236 = v234 + 2;
          v235 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v236, (__int128 *)&v279, (__int128 *)&v281[8], v234);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v282, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v282 = __s;
          v232 = 0;
          v231 = 0;
          v233 = 0;
          v277.__r_.__value_.__r.__words[0] = (std::string::size_type)&v231;
          v277.__r_.__value_.__s.__data_[8] = 0;
          v231 = (std::string *)operator new(0x18uLL);
          v232 = v231;
          v233 = v231 + 1;
          v232 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v233, (__int128 *)&v282, &v283, v231);
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v237, (uint64_t *)a2, (uint64_t)v274, v68, (uint64_t)v247, (uint64_t)v234, (uint64_t)v235, (uint64_t *)&v231);
          v117 = v238;
          if (v238)
          {
            v118 = (unint64_t *)&v238->__shared_owners_;
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          v277.__r_.__value_.__r.__words[0] = (std::string::size_type)&v231;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v277);
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v282.__r_.__value_.__l.__data_);
          v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v234;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v282);
          for (k = 0; k != -48; k -= 24)
          {
            if ((char)v281[k + 7] < 0)
              operator delete(*(void **)((char *)&v279 + k + 24));
          }
LABEL_305:
          if ((v274[23] & 0x80000000) == 0)
            goto LABEL_410;
          v99 = *(void **)v274;
          break;
        default:
          goto LABEL_410;
      }
      goto LABEL_409;
    }
    switch(v19)
    {
      case 'r':
        v72 = *(_QWORD *)a3;
        if (*(char *)(*(_QWORD *)a3 + 23) >= 0)
          v73 = *(unsigned __int8 *)(*(_QWORD *)a3 + 23);
        else
          v73 = *(_QWORD *)(*(_QWORD *)a3 + 8);
        v74 = &v282;
        std::string::basic_string[abi:ne180100]((uint64_t)&v282, v73 + 4);
        if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v74 = (std::string *)v282.__r_.__value_.__r.__words[0];
        if (v73)
        {
          if (*(char *)(v72 + 23) >= 0)
            v75 = (const void *)v72;
          else
            v75 = *(const void **)v72;
          memmove(v74, v75, v73);
        }
        strcpy((char *)v74 + v73, ":sin");
        v279.__r_.__value_.__r.__words[2] = 897988541;
        LOBYTE(v280) = 0;
        *(_QWORD *)&v281[4] = 0;
        v279.__r_.__value_.__r.__words[0] = 115;
        v279.__r_.__value_.__l.__size_ = 1065353216;
        std::string::basic_string[abi:ne180100]<0>(v274, "elementwise");
        if (*(char *)(v17 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v277, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
        }
        else
        {
          v76 = *(_OWORD *)v17;
          v277.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
          *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v76;
        }
        v194 = 0;
        v195 = 0;
        v196 = 0;
        v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
        v275.__r_.__value_.__s.__data_[8] = 0;
        v194 = (std::string *)operator new(0x18uLL);
        v195 = v194;
        v196 = v194 + 1;
        v195 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v196, (__int128 *)&v277, (__int128 *)&v278, v194);
        if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v275, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
        else
          v275 = v282;
        v191 = 0;
        v192 = 0;
        v193 = 0;
        v252 = &v191;
        v253 = 0;
        v191 = (std::string *)operator new(0x18uLL);
        v192 = v191;
        v193 = v191 + 1;
        v192 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v193, (__int128 *)&v275, (__int128 *)&v276, v191);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v197, (uint64_t *)a2, (uint64_t)v274, (uint64_t)&v282, (uint64_t)&v279, (uint64_t)v194, (uint64_t)v195, (uint64_t *)&v191);
        v126 = v198;
        if (v198)
        {
          v127 = (unint64_t *)&v198->__shared_owners_;
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        v252 = &v191;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
        if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v275.__r_.__value_.__l.__data_);
        v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
        if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v277.__r_.__value_.__l.__data_);
        if ((v274[23] & 0x80000000) != 0)
          operator delete(*(void **)v274);
        *(_DWORD *)v247 = 1;
        *(_DWORD *)&v247[8] = -1082130432;
        std::string::basic_string[abi:ne180100]<0>(&v277, "elementwise");
        v129 = *(_QWORD *)a3;
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v274, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
        }
        else
        {
          v130 = *(_OWORD *)v7;
          *(_QWORD *)&v274[16] = *(_QWORD *)(v7 + 16);
          *(_OWORD *)v274 = v130;
        }
        if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)&v274[24], v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
        else
          *(std::string *)&v274[24] = v282;
        v186 = 0;
        v187 = 0;
        v188 = 0;
        v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
        v275.__r_.__value_.__s.__data_[8] = 0;
        v186 = (std::string *)operator new(0x30uLL);
        v187 = v186;
        v188 = v186 + 2;
        v187 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v188, (__int128 *)v274, (__int128 *)&v275, v186);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v275, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v275 = __s;
        v183 = 0;
        v184 = 0;
        v185 = 0;
        v252 = &v183;
        v253 = 0;
        v183 = (std::string *)operator new(0x18uLL);
        v184 = v183;
        v185 = v183 + 1;
        v184 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v185, (__int128 *)&v275, (__int128 *)&v276, v183);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v189, (uint64_t *)a2, (uint64_t)&v277, v129, (uint64_t)v247, (uint64_t)v186, (uint64_t)v187, (uint64_t *)&v183);
        v140 = v190;
        if (v190)
        {
          v141 = (unint64_t *)&v190->__shared_owners_;
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
            std::__shared_weak_count::__release_weak(v140);
          }
        }
        v252 = &v183;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
        if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v275.__r_.__value_.__l.__data_);
        v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
        for (m = 0; m != -48; m -= 24)
        {
          if ((char)v274[m + 47] < 0)
            operator delete(*(void **)&v274[m + 24]);
        }
        break;
      case 's':
        v77 = *(_QWORD *)a3;
        if (*(char *)(*(_QWORD *)a3 + 23) >= 0)
          v78 = *(unsigned __int8 *)(*(_QWORD *)a3 + 23);
        else
          v78 = *(_QWORD *)(*(_QWORD *)a3 + 8);
        v79 = &v282;
        std::string::basic_string[abi:ne180100]((uint64_t)&v282, v78 + 4);
        if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v79 = (std::string *)v282.__r_.__value_.__r.__words[0];
        if (v78)
        {
          if (*(char *)(v77 + 23) >= 0)
            v80 = (const void *)v77;
          else
            v80 = *(const void **)v77;
          memmove(v79, v80, v78);
        }
        strcpy((char *)v79 + v78, ":cos");
        v279.__r_.__value_.__r.__words[2] = 897988541;
        LOBYTE(v280) = 0;
        *(_QWORD *)&v281[4] = 0;
        v279.__r_.__value_.__r.__words[0] = 114;
        v279.__r_.__value_.__l.__size_ = 1065353216;
        std::string::basic_string[abi:ne180100]<0>(v274, "elementwise");
        if (*(char *)(v17 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v277, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
        }
        else
        {
          v81 = *(_OWORD *)v17;
          v277.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
          *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v81;
        }
        v211 = 0;
        v210 = 0;
        v212 = 0;
        v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v210;
        v275.__r_.__value_.__s.__data_[8] = 0;
        v210 = (std::string *)operator new(0x18uLL);
        v211 = v210;
        v212 = v210 + 1;
        v211 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v212, (__int128 *)&v277, (__int128 *)&v278, v210);
        if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v275, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
        else
          v275 = v282;
        v208 = 0;
        v207 = 0;
        v209 = 0;
        v252 = &v207;
        v253 = 0;
        v207 = (std::string *)operator new(0x18uLL);
        v208 = v207;
        v209 = v207 + 1;
        v208 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v209, (__int128 *)&v275, (__int128 *)&v276, v207);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v213, (uint64_t *)a2, (uint64_t)v274, (uint64_t)&v282, (uint64_t)&v279, (uint64_t)v210, (uint64_t)v211, (uint64_t *)&v207);
        v131 = v214;
        if (v214)
        {
          v132 = (unint64_t *)&v214->__shared_owners_;
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
        v252 = &v207;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
        if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v275.__r_.__value_.__l.__data_);
        v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v210;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
        if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v277.__r_.__value_.__l.__data_);
        if ((v274[23] & 0x80000000) != 0)
          operator delete(*(void **)v274);
        *(_DWORD *)v247 = 1;
        std::string::basic_string[abi:ne180100]<0>(&v277, "elementwise");
        v134 = *(_QWORD *)a3;
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v274, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
        }
        else
        {
          v135 = *(_OWORD *)v7;
          *(_QWORD *)&v274[16] = *(_QWORD *)(v7 + 16);
          *(_OWORD *)v274 = v135;
        }
        if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)&v274[24], v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
        else
          *(std::string *)&v274[24] = v282;
        v202 = 0;
        v203 = 0;
        v204 = 0;
        v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
        v275.__r_.__value_.__s.__data_[8] = 0;
        v202 = (std::string *)operator new(0x30uLL);
        v203 = v202;
        v204 = v202 + 2;
        v203 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v204, (__int128 *)v274, (__int128 *)&v275, v202);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v275, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v275 = __s;
        v199 = 0;
        v200 = 0;
        v201 = 0;
        v252 = &v199;
        v253 = 0;
        v199 = (std::string *)operator new(0x18uLL);
        v200 = v199;
        v201 = v199 + 1;
        v200 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v201, (__int128 *)&v275, (__int128 *)&v276, v199);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v205, (uint64_t *)a2, (uint64_t)&v277, v134, (uint64_t)v247, (uint64_t)v202, (uint64_t)v203, (uint64_t *)&v199);
        v144 = v206;
        if (v206)
        {
          v145 = (unint64_t *)&v206->__shared_owners_;
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        v252 = &v199;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
        if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v275.__r_.__value_.__l.__data_);
        v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
        for (n = 0; n != -48; n -= 24)
        {
          if ((char)v274[n + 47] < 0)
            operator delete(*(void **)&v274[n + 24]);
        }
        break;
      case 'w':
LABEL_36:
        memset(&v274[12], 0, 24);
        *(_DWORD *)v274 = 14;
        *(_DWORD *)&v274[4] = *(_DWORD *)(a1 + 288);
        if (v19 == 25)
          v27 = 2139095039;
        else
          v27 = *(_DWORD *)(a1 + 292);
        *(_DWORD *)&v274[8] = v27;
        std::string::basic_string[abi:ne180100]<0>(&v282, "activation_grad");
        v70 = *(_QWORD *)a3;
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v279, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
        }
        else
        {
          v71 = *(_OWORD *)v7;
          v279.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
          *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v71;
        }
        if (*(char *)(v17 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v280, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
        }
        else
        {
          v85 = *(_OWORD *)v17;
          *(_QWORD *)v281 = *(_QWORD *)(v17 + 16);
          v280 = v85;
        }
        v161 = 0;
        v162 = 0;
        v163 = 0;
        v277.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161;
        v277.__r_.__value_.__s.__data_[8] = 0;
        v161 = (std::string *)operator new(0x30uLL);
        v162 = v161;
        v163 = v161 + 2;
        v162 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v163, (__int128 *)&v279, (__int128 *)&v281[8], v161);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v277, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v277 = __s;
        v158 = 0;
        v159 = 0;
        v160 = 0;
        v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v158;
        v275.__r_.__value_.__s.__data_[8] = 0;
        v158 = (std::string *)operator new(0x18uLL);
        v159 = v158;
        v160 = v158 + 1;
        v159 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v160, (__int128 *)&v277, (__int128 *)&v278, v158);
        Espresso::sequential_builder::add<Espresso::activation_params>(&v164, (uint64_t *)a2, (uint64_t)&v282, v70, (uint64_t)v274, (uint64_t)v161, (uint64_t)v162, (uint64_t *)&v158);
        v86 = v165;
        if (v165)
        {
          v87 = (unint64_t *)&v165->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v158;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
        if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v277.__r_.__value_.__l.__data_);
        v277.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v277);
        for (ii = 0; ii != -48; ii -= 24)
        {
          if ((char)v281[ii + 7] < 0)
            operator delete(*(void **)((char *)&v279 + ii + 24));
        }
        goto LABEL_407;
      default:
        goto LABEL_410;
    }
LABEL_405:
    if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v277.__r_.__value_.__l.__data_);
LABEL_407:
    if ((SHIBYTE(v282.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_410;
    v99 = (void *)v282.__r_.__value_.__r.__words[0];
LABEL_409:
    operator delete(v99);
LABEL_410:
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
LABEL_412:
    if ((SHIBYTE(v251) & 0x80000000) == 0)
      return;
    v107 = __p[0];
    goto LABEL_414;
  }
  if (((1 << v11) & 0xC00000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v247, "elementwise min/max");
    Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - **(_QWORD **)(a3 + 16)) >> 3), 2uLL, (uint64_t)v247, 1);
    Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 3), 1uLL, (uint64_t)v247, 0);
    v12 = *(__int128 ***)(a3 + 16);
    v13 = *v12;
    if (*((char *)*v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v279, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
      v12 = *(__int128 ***)(a3 + 16);
    }
    else
    {
      v14 = *v13;
      v279.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v14;
    }
    v54 = *v12;
    if (*((char *)v54 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v274, *((const std::string::value_type **)v54 + 3), *((_QWORD *)v54 + 4));
    }
    else
    {
      *(_OWORD *)v274 = *(__int128 *)((char *)v54 + 24);
      *(_QWORD *)&v274[16] = *((_QWORD *)v54 + 5);
    }
    if (fabsf(*(float *)(a1 + 288) + -1.0) > 0.000001 || fabsf(*(float *)(a1 + 292)) > 0.000001)
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("grad of elementwise min/max with alpha != 1 or beta != 0");
    if (*v10 == 22)
    {
      v55 = v279.__r_.__value_.__r.__words[2];
      v56 = *(_OWORD *)&v279.__r_.__value_.__l.__data_;
      v279 = *(std::string *)v274;
      *(_OWORD *)v274 = v56;
      *(_QWORD *)&v274[16] = v55;
    }
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), (uint64_t)&v279))
    {
      v269 = 0;
      v57 = operator new(0x20uLL);
      *v57 = &off_1E2DB1AD8;
      v57[1] = &v279;
      v57[2] = v274;
      v57[3] = v7;
      v269 = v57;
      Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 0, (uint64_t)v268);
      v58 = v269;
      if (v269 == v268)
      {
        v59 = 4;
        v58 = v268;
      }
      else
      {
        if (!v269)
          goto LABEL_145;
        v59 = 5;
      }
      (*(void (**)(void))(*v58 + 8 * v59))();
    }
LABEL_145:
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), (uint64_t)v274))
    {
      v267 = 0;
      v82 = operator new(0x20uLL);
      *v82 = &off_1E2DB1B30;
      v82[1] = &v279;
      v82[2] = v274;
      v82[3] = v7;
      v267 = v82;
      Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 1uLL, (uint64_t)v266);
      v83 = v267;
      if (v267 == v266)
      {
        v84 = 4;
        v83 = v266;
        goto LABEL_150;
      }
      if (v267)
      {
        v84 = 5;
LABEL_150:
        (*(void (**)(void))(*v83 + 8 * v84))();
      }
    }
    if ((v274[23] & 0x80000000) != 0)
      operator delete(*(void **)v274);
    if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v279.__r_.__value_.__l.__data_);
    goto LABEL_245;
  }
  if (v11 == 33)
  {
    std::string::basic_string[abi:ne180100]<0>(v247, "elementwise subtract");
    Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - **(_QWORD **)(a3 + 16)) >> 3), 2uLL, (uint64_t)v247, 1);
    Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 3), 1uLL, (uint64_t)v247, 0);
    v31 = **(_QWORD **)(a3 + 16);
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v31))
    {
      v260[0] = &off_1E2DB1C38;
      v260[1] = v7;
      v261 = v260;
      Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 0, (uint64_t)v260);
      v32 = v261;
      if (v261 == v260)
      {
        v33 = 4;
        v32 = v260;
        goto LABEL_238;
      }
      if (v261)
      {
        v33 = 5;
LABEL_238:
        (*(void (**)(void))(*v32 + 8 * v33))();
      }
    }
    if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v31 + 24))goto LABEL_245;
    v258[0] = &off_1E2DB1C90;
    v258[1] = v7;
    v259 = v258;
    Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 1uLL, (uint64_t)v258);
    v97 = v259;
    if (v259 == v258)
    {
      v98 = 4;
      v97 = v258;
      goto LABEL_244;
    }
    goto LABEL_241;
  }
LABEL_47:
  if ((_DWORD)v11 != 101)
    goto LABEL_60;
  std::string::basic_string[abi:ne180100]<0>(&v279, "elementwise if");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - **(_QWORD **)(a3 + 16)) >> 3), 3uLL, (uint64_t)&v279, 1);
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 3), 1uLL, (uint64_t)&v279, 0);
  v34 = **(__int128 ***)(a3 + 16);
  *(_QWORD *)&v247[20] = 0xFFFFFFFF00000001;
  v248[0] = 0;
  *(_DWORD *)&v247[28] = 0;
  memset(v247, 0, 20);
  std::operator+<char>();
  std::string::basic_string[abi:ne180100]<0>(__p, "fill");
  v35 = *(_QWORD *)a3;
  if (*(char *)(*(_QWORD *)a3 + 23) >= 0)
    v36 = *(unsigned __int8 *)(*(_QWORD *)a3 + 23);
  else
    v36 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  p_s = &__s;
  std::string::basic_string[abi:ne180100]((uint64_t)&__s, v36 + 10);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  if (v36)
  {
    if (*(char *)(v35 + 23) >= 0)
      v38 = (const void *)v35;
    else
      v38 = *(const void **)v35;
    memmove(p_s, v38, v36);
  }
  strcpy((char *)p_s + v36, ":container");
  if (*((char *)v34 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v282, *(const std::string::value_type **)v34, *((_QWORD *)v34 + 1));
  }
  else
  {
    v39 = *v34;
    v282.__r_.__value_.__r.__words[2] = *((_QWORD *)v34 + 2);
    *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v39;
  }
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v277.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151;
  v277.__r_.__value_.__s.__data_[8] = 0;
  v151 = (std::string *)operator new(0x18uLL);
  v152 = v151;
  v153 = v151 + 1;
  v152 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v153, (__int128 *)&v282, &v283, v151);
  if ((v274[23] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&v277, *(const std::string::value_type **)v274, *(std::string::size_type *)&v274[8]);
  else
    v277 = *(std::string *)v274;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
  v275.__r_.__value_.__s.__data_[8] = 0;
  v148 = (std::string *)operator new(0x18uLL);
  v149 = v148;
  v150 = v148 + 1;
  v149 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v150, (__int128 *)&v277, (__int128 *)&v278, v148);
  Espresso::sequential_builder::add<Espresso::fill_params_t>(&v154, (uint64_t *)a2, (uint64_t)__p, (uint64_t)&__s, (uint64_t)v247, (uint64_t)v151, (uint64_t)v152, (uint64_t *)&v148);
  v90 = v155;
  if (v155)
  {
    v91 = (unint64_t *)&v155->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v277.__r_.__value_.__l.__data_);
  v277.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v277);
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v282.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(v251) < 0)
    operator delete(__p[0]);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), (uint64_t)v34 + 24))
  {
    v273 = 0;
    v93 = operator new(0x20uLL);
    *v93 = &off_1E2DB1A28;
    v93[1] = v34;
    v93[2] = v7;
    v93[3] = v274;
    v273 = v93;
    Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 1uLL, (uint64_t)v272);
    v94 = v273;
    if (v273 == v272)
    {
      v95 = 4;
      v94 = v272;
    }
    else
    {
      if (!v273)
        goto LABEL_249;
      v95 = 5;
    }
    (*(void (**)(void))(*v94 + 8 * v95))();
  }
LABEL_249:
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), (uint64_t)(v34 + 3)))goto LABEL_255;
  v271 = 0;
  v108 = operator new(0x20uLL);
  *v108 = &off_1E2DB1A80;
  v108[1] = v34;
  v108[2] = v274;
  v108[3] = v7;
  v271 = v108;
  Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 2uLL, (uint64_t)v270);
  v109 = v271;
  if (v271 == v270)
  {
    v110 = 4;
    v109 = v270;
  }
  else
  {
    if (!v271)
      goto LABEL_255;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_255:
  if ((v274[23] & 0x80000000) != 0)
    operator delete(*(void **)v274);
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
  {
    v107 = (void *)v279.__r_.__value_.__r.__words[0];
LABEL_414:
    operator delete(v107);
  }
}

void sub_191678D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;
  uint64_t v74;

  STACK[0x570] = (unint64_t)&a72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x570]);
  v74 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x540] + v74 + 47) < 0)
      operator delete(*(void **)((char *)&STACK[0x540] + v74 + 24));
    v74 -= 24;
    if (v74 == -48)
    {
      if (*(char *)(v72 - 217) < 0)
        operator delete(*(void **)(v72 - 240));
      if (*(char *)(v72 - 121) < 0)
        operator delete(*(void **)(v72 - 144));
      if (SLOBYTE(STACK[0x3AF]) < 0)
        operator delete((void *)STACK[0x398]);
      if (SLOBYTE(STACK[0x3C7]) < 0)
        operator delete((void *)STACK[0x3B0]);
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::build_grads_for_pow_input(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, float a6)
{
  char *v12;
  size_t v13;
  std::string *v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t i;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  int v43;
  char v44;
  int v45;
  int v46;
  std::string v47;
  std::string **v48;
  char v49;
  std::string v50;
  std::string v51;
  std::string v52;
  uint64_t v53;
  std::string v54;
  __int128 v55;

  *(_QWORD *)&v55 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v47 = *(std::string *)a1;
  if (fabsf(a6 + -2.0) > 0.000001)
  {
    v42 = 0x358637BD00000000;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v40 = 13;
    v41 = a6 + -1.0;
    v12 = (char *)*a5;
    if (*(char *)(*a5 + 23) >= 0)
      v13 = *(unsigned __int8 *)(*a5 + 23);
    else
      v13 = *(_QWORD *)(*a5 + 8);
    v14 = &v50;
    std::string::basic_string[abi:ne180100]((uint64_t)&v50, v13 + 4);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = (std::string *)v50.__r_.__value_.__r.__words[0];
    if (v13)
    {
      if (v12[23] >= 0)
        v15 = v12;
      else
        v15 = *(char **)v12;
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, "/pow");
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    v47 = v50;
    std::string::basic_string[abi:ne180100]<0>(&v50, "elementwise");
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v54 = *(std::string *)a1;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    v52.__r_.__value_.__s.__data_[8] = 0;
    v35 = (std::string *)operator new(0x18uLL);
    v36 = v35;
    v37 = v35 + 1;
    v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v37, (__int128 *)&v54, &v55, v35);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v52, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
    else
      v52 = v47;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v48 = &v32;
    v49 = 0;
    v32 = (std::string *)operator new(0x18uLL);
    v33 = v32;
    v34 = v32 + 1;
    v33 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v34, (__int128 *)&v52, (__int128 *)&v53, v32);
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v38, a4, (uint64_t)&v50, (uint64_t)&v47, (uint64_t)&v40, (uint64_t)v35, (uint64_t)v36, (uint64_t *)&v32);
    v16 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v48 = &v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
  }
  v42 = 0x358637BD00000000;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v40 = 1;
  v41 = a6;
  std::string::basic_string[abi:ne180100]<0>(&v54, "elementwise");
  v19 = *a5;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v50 = *(std::string *)a2;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v51, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  else
    v51 = v47;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  v52.__r_.__value_.__s.__data_[8] = 0;
  v27 = (std::string *)operator new(0x30uLL);
  v28 = v27;
  v29 = v27 + 2;
  v28 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v29, (__int128 *)&v50, (__int128 *)&v52, v27);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v52 = *(std::string *)a3;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v48 = &v24;
  v49 = 0;
  v24 = (std::string *)operator new(0x18uLL);
  v25 = v24;
  v26 = v24 + 1;
  v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v26, (__int128 *)&v52, (__int128 *)&v53, v24);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v30, a4, (uint64_t)&v54, v19, (uint64_t)&v40, (uint64_t)v27, (uint64_t)v28, (uint64_t *)&v24);
  v20 = v31;
  if (v31)
  {
    v21 = (unint64_t *)&v31->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v48 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v51.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v50 + i * 8 + 24));
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
}

void sub_191679C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;

  *(_QWORD *)(v40 - 176) = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 176));
  if (*(char *)(v40 - 121) < 0)
    operator delete(*(void **)(v40 - 144));
  if (*(char *)(v40 - 201) < 0)
    operator delete(*(void **)(v40 - 224));
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::maybe_broadcasted_elementwise_grad(Espresso::sequential_builder *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  std::string::size_type v12;
  std::string::size_type v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  size_t v24;
  _BYTE *v25;
  char *v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  size_t v33;
  std::string *v34;
  std::string *v35;
  char *v36;
  size_t v37;
  std::string *v38;
  char *v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  uint64_t *v43;
  __int128 v44;
  uint64_t v45;
  size_t v46;
  std::string *v47;
  std::string *v48;
  char *v49;
  size_t v50;
  std::string *v51;
  char *v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  _QWORD *v57;
  unsigned int v58;
  uint64_t *v59;
  BOOL v60;
  unsigned int v61;
  int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  void *v67;
  uint64_t *v68;
  char *v69;
  size_t v70;
  std::string *v71;
  char *v72;
  std::string *v73;
  std::string::size_type v74;
  std::string *v75;
  __int128 v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t i;
  unint64_t v82;
  uint64_t v83;
  std::string *v84;
  size_t v85;
  std::string *v86;
  std::string *v87;
  uint64_t *v88;
  std::string *v89;
  std::string::size_type v90;
  std::string *v91;
  std::string::size_type v92;
  char v93;
  size_t v94;
  std::string *v95;
  void **v96;
  std::string *v97;
  std::string::size_type v98;
  std::string *v99;
  __int128 v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  int v104;
  std::string::size_type v105;
  std::string *p_p;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::string *v111;
  std::string *v112;
  std::string *v113;
  std::string *v114;
  std::string *v115;
  std::string *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  _BYTE v119[32];
  __int16 v120;
  int v121;
  std::string v122;
  void *v123[2];
  int64_t v124;
  std::string __str;
  std::string v126;
  void *v127[2];
  std::string::size_type v128;
  std::string v129;
  std::string v130;
  __int128 v131;
  __int128 v132;
  int v133;
  _DWORD v134[5];
  unsigned int v135;
  _DWORD v136[5];
  unsigned int v137;
  std::string v138;
  std::string *v139;
  std::string *v140;
  void **p_data;
  uint64_t v142;
  std::__shared_weak_count *v143;
  std::string v144;
  std::string **v145;
  char v146;
  std::string __p;
  std::string v148;
  std::string v149;
  uint64_t v150;
  std::string v151;
  uint64_t v152;
  std::string v153;
  std::string v154;
  std::string v155;
  __int128 v156;

  *(_QWORD *)&v156 = *MEMORY[0x1E0C80C00];
  v8 = **(_QWORD **)(a2 + 16) + 24 * a3;
  Espresso::blob_grad_contrib_name((uint64_t)&v138, v8, a2);
  v9 = Espresso::sequential_builder::blob_shape(a1, **(_QWORD **)(a2 + 24));
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v136, (const Espresso::layer_shape *)v9, 0);
  v10 = Espresso::sequential_builder::blob_shape(a1, v8);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v134, (const Espresso::layer_shape *)v10, 0);
  v11 = (int)v135;
  v12 = (int)v137;
  v131 = 0u;
  v132 = 0u;
  v133 = 1065353216;
  v109 = a4;
  v110 = a2;
  v108 = v8;
  if (v137 == v135)
  {
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v135)
    {
      v13 = 0;
      do
      {
        if (v134[v13] != v136[v13])
        {
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v131, (unint64_t *)&__p, &__p);
          v13 = __p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__r.__words[0] = ++v13;
      }
      while (v13 < v12);
    }
    v14 = (uint64_t *)a1;
  }
  else
  {
    if (v135 >= v137)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("elementwise op with input rank > output rank");
    v14 = (uint64_t *)a1;
    v15 = 0;
    v16 = (int)v137 - 1;
    if ((unint64_t)(int)v137 <= 1)
      v17 = 1;
    else
      v17 = (int)v137;
    v18 = 4 * (int)v135 - 4;
    do
    {
      v144.__r_.__value_.__r.__words[0] = v16;
      v19 = v136[v16];
      if (v19 >= 2)
      {
        if (v15 >= v11 || (v20 = *(_DWORD *)((char *)v134 + v18), v20 == 1))
        {
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v131, (unint64_t *)&v144, &v144);
        }
        else if (v20 != v19)
        {
          Espresso::layer_nd_shape::repr(&__p, (uint64_t)v134);
          v104 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          v105 = __p.__r_.__value_.__r.__words[0];
          Espresso::layer_nd_shape::repr((std::string *)v119, (uint64_t)v136);
          if (v104 >= 0)
            p_p = &__p;
          else
            p_p = (std::string *)v105;
          if (v119[23] >= 0)
            v107 = v119;
          else
            v107 = *(_BYTE **)v119;
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("cannot broadcast shape %s with %s", (uint64_t)p_p, (uint64_t)v107);
        }
      }
      ++v15;
      v18 -= 4;
      --v16;
    }
    while (v17 != v15);
  }
  v21 = *((_QWORD *)&v132 + 1);
  std::to_string(&v130, a3);
  v22 = a2;
  if (v11 >= v12 && !v21)
  {
    v23 = *(char **)a2;
    if (*(char *)(*(_QWORD *)v110 + 23) >= 0)
      v24 = *(unsigned __int8 *)(*(_QWORD *)v110 + 23);
    else
      v24 = *(_QWORD *)(*(_QWORD *)v110 + 8);
    v25 = v119;
    std::string::basic_string[abi:ne180100]((uint64_t)v119, v24 + 1);
    if (v119[23] < 0)
      v25 = *(_BYTE **)v119;
    if (v24)
    {
      if (v23[23] >= 0)
        v26 = v23;
      else
        v26 = *(char **)v23;
      memmove(v25, v26, v24);
    }
    *(_WORD *)&v25[v24] = 58;
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v130;
    else
      v27 = (std::string *)v130.__r_.__value_.__r.__words[0];
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v130.__r_.__value_.__r.__words[2]);
    else
      size = v130.__r_.__value_.__l.__size_;
    v29 = std::string::append((std::string *)v119, (const std::string::value_type *)v27, size);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = *(_QWORD *)(v109 + 24);
    if (!v31)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *, std::string *, std::string *))(*(_QWORD *)v31 + 48))(v31, v14, &v138, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v119[23] & 0x80000000) != 0)
    {
      v32 = *(void **)v119;
LABEL_198:
      operator delete(v32);
      goto LABEL_199;
    }
    goto LABEL_199;
  }
  if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
  else
    v33 = v138.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)&v129, v33 + 8);
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v129;
  else
    v34 = (std::string *)v129.__r_.__value_.__r.__words[0];
  if (v33)
  {
    if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v138;
    else
      v35 = (std::string *)v138.__r_.__value_.__r.__words[0];
    memmove(v34, v35, v33);
  }
  strcpy((char *)v34 + v33, ":bcasted");
  v36 = *(char **)a2;
  if (*(char *)(*(_QWORD *)v110 + 23) >= 0)
    v37 = *(unsigned __int8 *)(*(_QWORD *)v110 + 23);
  else
    v37 = *(_QWORD *)(*(_QWORD *)v110 + 8);
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v37 + 9);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &__p;
  else
    v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v37)
  {
    if (v36[23] >= 0)
      v39 = v36;
    else
      v39 = *(char **)v36;
    memmove(v38, v39, v37);
  }
  strcpy((char *)v38 + v37, ":bcasted_");
  if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &v130;
  else
    v40 = (std::string *)v130.__r_.__value_.__r.__words[0];
  if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
  else
    v41 = v130.__r_.__value_.__l.__size_;
  v42 = std::string::append(&__p, (const std::string::value_type *)v40, v41);
  v43 = v14;
  v44 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v128 = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)v127 = v44;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v45 = *(_QWORD *)(v109 + 24);
  if (!v45)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *, std::string *, void **))(*(_QWORD *)v45 + 48))(v45, v14, &v129, v127);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v126, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
  else
    v126 = v129;
  if (v21)
  {
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
    else
      __str = v138;
    if (v11 < v12)
    {
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
      else
        v46 = v138.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v46 + 8);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &__p;
      else
        v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v46)
      {
        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = &v138;
        else
          v48 = (std::string *)v138.__r_.__value_.__r.__words[0];
        memmove(v47, v48, v46);
      }
      strcpy((char *)v47 + v46, ":reduced");
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = __p;
      std::string::operator=(&v126, &__str);
    }
    v49 = *(char **)v110;
    if (*(char *)(*(_QWORD *)v110 + 23) >= 0)
      v50 = *(unsigned __int8 *)(*(_QWORD *)v110 + 23);
    else
      v50 = *(_QWORD *)(*(_QWORD *)v110 + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)&v122, v50 + 8);
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = &v122;
    else
      v51 = (std::string *)v122.__r_.__value_.__r.__words[0];
    if (v50)
    {
      if (v49[23] >= 0)
        v52 = v49;
      else
        v52 = *(char **)v49;
      memmove(v51, v52, v50);
    }
    strcpy((char *)v51 + v50, ":reduce_");
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &v130;
    else
      v53 = (std::string *)v130.__r_.__value_.__r.__words[0];
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
    else
      v54 = v130.__r_.__value_.__l.__size_;
    v55 = std::string::append(&v122, (const std::string::value_type *)v53, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v124 = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)v123 = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    if (!*((_QWORD *)&v132 + 1))
      goto LABEL_142;
    v57 = (_QWORD *)v132;
    if ((_QWORD)v132)
    {
      v58 = 0;
      v59 = (uint64_t *)v132;
      do
      {
        v58 += 1 << (v12 + ~*((_DWORD *)v59 + 4));
        v59 = (uint64_t *)*v59;
      }
      while (v59);
      v60 = v58 > 0x1F;
      v61 = (1 << v58) & 0x8001019E;
      if (v60 || v61 == 0)
      {
        v82 = 0;
        memset(v119, 0, 24);
        memset(&v144, 0, sizeof(v144));
        do
        {
          v83 = v57[2];
          if (v82)
            v84 = &v144;
          else
            v84 = &v129;
          std::string::operator=((std::string *)v119, v84);
          if (v82 == *((_QWORD *)&v132 + 1) - 1)
          {
            std::string::operator=(&v144, &__str);
          }
          else
          {
            if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v85 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
            else
              v85 = v129.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&__p, v85 + 8);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v86 = &__p;
            else
              v86 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if (v85)
            {
              if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v87 = &v129;
              else
                v87 = (std::string *)v129.__r_.__value_.__r.__words[0];
              memmove(v86, v87, v85);
            }
            strcpy((char *)v86 + v85, ":reduce_");
            std::to_string(&v155, v82);
            v88 = v43;
            if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v89 = &v155;
            else
              v89 = (std::string *)v155.__r_.__value_.__r.__words[0];
            if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v90 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
            else
              v90 = v155.__r_.__value_.__l.__size_;
            v91 = std::string::append(&__p, (const std::string::value_type *)v89, v90);
            v92 = v91->__r_.__value_.__r.__words[0];
            v154.__r_.__value_.__r.__words[0] = v91->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v154.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v91->__r_.__value_.__r.__words[1] + 7);
            v93 = HIBYTE(v91->__r_.__value_.__r.__words[2]);
            v91->__r_.__value_.__l.__size_ = 0;
            v91->__r_.__value_.__r.__words[2] = 0;
            v91->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v144.__r_.__value_.__l.__data_);
            v144.__r_.__value_.__r.__words[0] = v92;
            v144.__r_.__value_.__l.__size_ = v154.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v144.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v154.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v144.__r_.__value_.__s + 23) = v93;
            if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v155.__r_.__value_.__l.__data_);
            v43 = v88;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v124 >= 0)
            v94 = HIBYTE(v124);
          else
            v94 = (size_t)v123[1];
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v94 + 8);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v95 = &__p;
          else
            v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (v94)
          {
            if (v124 >= 0)
              v96 = v123;
            else
              v96 = (void **)v123[0];
            memmove(v95, v96, v94);
          }
          strcpy((char *)v95 + v94, ":reduce_");
          std::to_string(&v154, v82);
          if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v97 = &v154;
          else
            v97 = (std::string *)v154.__r_.__value_.__r.__words[0];
          if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v98 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
          else
            v98 = v154.__r_.__value_.__l.__size_;
          v99 = std::string::append(&__p, (const std::string::value_type *)v97, v98);
          v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
          v155.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v100;
          v99->__r_.__value_.__l.__size_ = 0;
          v99->__r_.__value_.__r.__words[2] = 0;
          v99->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p.__r_.__value_.__r.__words[0] = 0x358637BD00000000;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0x100000007uLL;
          v148.__r_.__value_.__r.__words[0] = 0;
          LODWORD(v148.__r_.__value_.__r.__words[1]) = 0;
          v148.__r_.__value_.__s.__data_[16] = 1;
          HIDWORD(v148.__r_.__value_.__r.__words[1]) = v83;
          std::string::basic_string[abi:ne180100]<0>(&v154, "reduce");
          if ((v119[23] & 0x80000000) != 0)
            std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)v119, *(std::string::size_type *)&v119[8]);
          else
            v151 = *(std::string *)v119;
          memset(&v153, 0, sizeof(v153));
          v149.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
          v149.__r_.__value_.__s.__data_[8] = 0;
          v153.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v153.__r_.__value_.__l.__size_ = v153.__r_.__value_.__r.__words[0];
          v153.__r_.__value_.__r.__words[2] = v153.__r_.__value_.__r.__words[0] + 24;
          v153.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v153.__r_.__value_.__r.__words[2], (__int128 *)&v151, (__int128 *)&v152, (std::string *)v153.__r_.__value_.__l.__data_);
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v149, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
          else
            v149 = v144;
          v139 = 0;
          v140 = 0;
          p_data = 0;
          v145 = &v139;
          v146 = 0;
          v139 = (std::string *)operator new(0x18uLL);
          v140 = v139;
          p_data = (void **)&v139[1].__r_.__value_.__l.__data_;
          v140 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v149, (__int128 *)&v150, v139);
          Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v142, v43, (uint64_t)&v154, (uint64_t)&v155, (uint64_t)&__p, (uint64_t)v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_, (uint64_t *)&v139);
          v101 = v143;
          if (v143)
          {
            p_shared_owners = (unint64_t *)&v143->__shared_owners_;
            do
              v103 = __ldaxr(p_shared_owners);
            while (__stlxr(v103 - 1, p_shared_owners));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
          v145 = &v139;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v145);
          if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v149.__r_.__value_.__l.__data_);
          v149.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
          v22 = v110;
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v151.__r_.__value_.__l.__data_);
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
          if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v155.__r_.__value_.__l.__data_);
          ++v82;
          v57 = (_QWORD *)*v57;
        }
        while (v57);
        if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_140;
        v67 = (void *)v144.__r_.__value_.__r.__words[0];
      }
      else
      {
        v63 = 0;
        HIDWORD(__p.__r_.__value_.__r.__words[1]) = 1;
        v148.__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[2] = 0;
        v148.__r_.__value_.__l.__size_ = 0xFFFFFFFF00000000;
        v148.__r_.__value_.__s.__data_[16] = 0;
        __p.__r_.__value_.__r.__words[0] = 0x358637BD00000000;
        do
        {
          v63 += 1 << (v12 + ~*((_DWORD *)v57 + 4));
          v57 = (_QWORD *)*v57;
        }
        while (v57);
        LODWORD(__p.__r_.__value_.__r.__words[1]) = v63;
        std::string::basic_string[abi:ne180100]<0>(v119, "reduce");
        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v155, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
        else
          v155 = v129;
        memset(&v144, 0, sizeof(v144));
        v154.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
        v154.__r_.__value_.__s.__data_[8] = 0;
        v144.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v144.__r_.__value_.__l.__size_ = v144.__r_.__value_.__r.__words[0];
        v144.__r_.__value_.__r.__words[2] = v144.__r_.__value_.__r.__words[0] + 24;
        v144.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v144.__r_.__value_.__r.__words[2], (__int128 *)&v155, &v156, (std::string *)v144.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v153, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          v153 = __str;
        memset(&v154, 0, sizeof(v154));
        v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
        v151.__r_.__value_.__s.__data_[8] = 0;
        v154.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v154.__r_.__value_.__l.__size_ = v154.__r_.__value_.__r.__words[0];
        v154.__r_.__value_.__r.__words[2] = v154.__r_.__value_.__r.__words[0] + 24;
        v154.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v154.__r_.__value_.__r.__words[2], (__int128 *)&v153, (__int128 *)&v154, (std::string *)v154.__r_.__value_.__l.__data_);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>((uint64_t *)&v151, v43, (uint64_t)v119, (uint64_t)v123, (uint64_t)&__p, (uint64_t)v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_, (uint64_t *)&v154);
        v64 = (std::__shared_weak_count *)v151.__r_.__value_.__l.__size_;
        if (v151.__r_.__value_.__l.__size_)
        {
          v65 = (unint64_t *)(v151.__r_.__value_.__l.__size_ + 8);
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v139 = &v154;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v153.__r_.__value_.__l.__data_);
        v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
        if ((SHIBYTE(v155.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_140;
        v67 = (void *)v155.__r_.__value_.__r.__words[0];
      }
      operator delete(v67);
    }
    else
    {
      memset(v119, 0, 24);
    }
LABEL_140:
    if ((v119[23] & 0x80000000) != 0)
      operator delete(*(void **)v119);
LABEL_142:
    if (SHIBYTE(v124) < 0)
      operator delete(v123[0]);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v122.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v11 < v12)
  {
    v68 = v43;
    *(_OWORD *)v119 = 0uLL;
    *(_OWORD *)&v119[16] = xmmword_191A93460;
    v121 = 1;
    v120 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v144, "reshape");
    v69 = *(char **)v22;
    if (*(char *)(*(_QWORD *)v22 + 23) >= 0)
      v70 = *(unsigned __int8 *)(*(_QWORD *)v22 + 23);
    else
      v70 = *(_QWORD *)(*(_QWORD *)v22 + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)&v154, v70 + 9);
    if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &v154;
    else
      v71 = (std::string *)v154.__r_.__value_.__r.__words[0];
    if (v70)
    {
      if (v69[23] >= 0)
        v72 = v69;
      else
        v72 = *(char **)v69;
      memmove(v71, v72, v70);
    }
    strcpy((char *)v71 + v70, ":squeeze_");
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v73 = &v130;
    else
      v73 = (std::string *)v130.__r_.__value_.__r.__words[0];
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v74 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
    else
      v74 = v130.__r_.__value_.__l.__size_;
    v75 = std::string::append(&v154, (const std::string::value_type *)v73, v74);
    v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v155.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
    else
      __p = v126;
    if (*(char *)(v108 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v108, *(_QWORD *)(v108 + 8));
    }
    else
    {
      v77 = *(_OWORD *)v108;
      v148.__r_.__value_.__r.__words[2] = *(_QWORD *)(v108 + 16);
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v77;
    }
    v114 = 0;
    v115 = 0;
    v116 = 0;
    v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
    v153.__r_.__value_.__s.__data_[8] = 0;
    v114 = (std::string *)operator new(0x30uLL);
    v115 = v114;
    v116 = v114 + 2;
    v115 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v116, (__int128 *)&__p, (__int128 *)&v149, v114);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v153, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
    else
      v153 = v138;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
    v151.__r_.__value_.__s.__data_[8] = 0;
    v111 = (std::string *)operator new(0x18uLL);
    v112 = v111;
    v113 = v111 + 1;
    v112 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v113, (__int128 *)&v153, (__int128 *)&v154, v111);
    Espresso::sequential_builder::add<Espresso::reshape_params>(&v117, v68, (uint64_t)&v144, (uint64_t)&v155, (uint64_t)v119, (uint64_t)v114, (uint64_t)v115, (uint64_t *)&v111);
    v78 = v118;
    if (v118)
    {
      v79 = (unint64_t *)&v118->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v151);
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v153.__r_.__value_.__l.__data_);
    v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v148.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&__p + i * 8 + 24));
    }
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v154.__r_.__value_.__l.__data_);
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128) < 0)
    operator delete(v127[0]);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
  {
    v32 = (void *)v129.__r_.__value_.__r.__words[0];
    goto LABEL_198;
  }
LABEL_199:
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v131);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
}

void sub_19167AE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a67;
  char a72;
  void *a73;
  char a74;
  char a75;
  void *a76;
  char a77;
  uint64_t v77;

  *(_QWORD *)(v77 - 192) = &STACK[0x208];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v77 - 192));
  if (*(char *)(v77 - 121) < 0)
    operator delete(*(void **)(v77 - 144));
  if (a30 < 0)
    operator delete(__p);
  if (a44 < 0)
    operator delete(a39);
  if (a38 < 0)
    operator delete(a33);
  if (a51 < 0)
    operator delete(a46);
  if (a58 < 0)
    operator delete(a53);
  if (a65 < 0)
    operator delete(a60);
  if (a72 < 0)
    operator delete(a67);
  if (a74 < 0)
    operator delete(a73);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a75);
  if (a77 < 0)
    operator delete(a76);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1D40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1D40;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  int v19;
  void *__p[2];
  char v21;
  std::string **v22;
  std::__shared_weak_count *v23;
  std::string **v24;
  std::string v25;
  uint64_t v26;
  std::string v27;
  __int128 v28;

  *(_QWORD *)&v28 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "copy");
  v19 = 0;
  v8 = *(__int128 **)(a1 + 8);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v27.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v13 = (std::string *)&v16;
  LOBYTE(v14) = 0;
  v16 = (std::string *)operator new(0x18uLL);
  v17 = v16;
  v18 = v16 + 1;
  v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (__int128 *)&v27, &v28, v16);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v25 = *(std::string *)a3;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v22 = &v13;
  LOBYTE(v23) = 0;
  v13 = (std::string *)operator new(0x18uLL);
  v14 = v13;
  v15 = v13 + 1;
  v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (__int128 *)&v25, (__int128 *)&v26, v13);
  Espresso::sequential_builder::add<Espresso::copy_params_t>((uint64_t *)&v22, a2, (uint64_t)__p, a4, (uint64_t)&v19, (uint64_t)v16, (uint64_t)v17, (uint64_t *)&v13);
  v10 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v24 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(__p[0]);
}

void sub_19167B4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  a26 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v31 - 57) < 0)
    operator delete(*(void **)(v31 - 80));
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_9"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DB1CE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB1CE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  _OWORD v22[3];
  int v23;
  std::string **v24;
  std::__shared_weak_count *v25;
  std::string **v26;
  std::string v27;
  __int128 v28;

  *(_QWORD *)&v28 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_OWORD *)(v8 + 296);
  v22[0] = *(_OWORD *)(v8 + 280);
  v22[1] = v9;
  v22[2] = *(_OWORD *)(v8 + 312);
  v23 = *(_DWORD *)(v8 + 328);
  HIDWORD(v22[0]) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  v10 = *(uint64_t **)(a1 + 16);
  v18 = 0;
  v19 = 0;
  v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *v10, v10[1], 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3));
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v27 = *(std::string *)a3;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v24 = &v14;
  LOBYTE(v25) = 0;
  v14 = (std::string *)operator new(0x18uLL);
  v15 = v14;
  v16 = v14 + 1;
  v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v16, (__int128 *)&v27, &v28, v14);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v24, a2, (uint64_t)__p, a4, (uint64_t)v22, v17, v18, (uint64_t *)&v14);
  v11 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v26 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v21 < 0)
    operator delete(__p[0]);
}

void sub_19167B7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  *(_QWORD *)(v21 - 64) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 64));
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_8"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1C90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1C90;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  void *__p[2];
  char v20;
  _QWORD v21[3];
  char v22;
  int v23;
  int v24;
  std::string **v25;
  std::__shared_weak_count *v26;
  std::string **v27;
  std::string v28;
  uint64_t v29;
  std::string v30;
  __int128 v31;

  *(_QWORD *)&v31 = *MEMORY[0x1E0C80C00];
  v21[2] = 897988541;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v21[0] = 1;
  v21[1] = 3212836864;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  v8 = *(__int128 **)(a1 + 8);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v30.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v13 = (std::string *)&v16;
  LOBYTE(v14) = 0;
  v16 = (std::string *)operator new(0x18uLL);
  v17 = v16;
  v18 = v16 + 1;
  v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (__int128 *)&v30, &v31, v16);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v28 = *(std::string *)a3;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v25 = &v13;
  LOBYTE(v26) = 0;
  v13 = (std::string *)operator new(0x18uLL);
  v14 = v13;
  v15 = v13 + 1;
  v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (__int128 *)&v28, (__int128 *)&v29, v13);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v25, a2, (uint64_t)__p, a4, (uint64_t)v21, (uint64_t)v16, (uint64_t)v17, (uint64_t *)&v13);
  v10 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v27 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v20 < 0)
    operator delete(__p[0]);
}

void sub_19167BB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  *(_QWORD *)(v29 - 128) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 128));
  if (*(char *)(v29 - 73) < 0)
    operator delete(*(void **)(v29 - 96));
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1C38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1C38;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  void *__p[2];
  char v20;
  int v21;
  std::string **v22;
  std::__shared_weak_count *v23;
  std::string **v24;
  std::string v25;
  uint64_t v26;
  std::string v27;
  __int128 v28;

  *(_QWORD *)&v28 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "copy");
  v8 = *(__int128 **)(a1 + 8);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v27.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v13 = (std::string *)&v16;
  LOBYTE(v14) = 0;
  v16 = (std::string *)operator new(0x18uLL);
  v17 = v16;
  v18 = v16 + 1;
  v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (__int128 *)&v27, &v28, v16);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v25 = *(std::string *)a3;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v22 = &v13;
  LOBYTE(v23) = 0;
  v13 = (std::string *)operator new(0x18uLL);
  v14 = v13;
  v15 = v13 + 1;
  v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (__int128 *)&v25, (__int128 *)&v26, v13);
  Espresso::sequential_builder::add<Espresso::copy_params_t>((uint64_t *)&v22, a2, (uint64_t)__p, a4, (uint64_t)&v21, (uint64_t)v16, (uint64_t)v17, (uint64_t *)&v13);
  v10 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v24 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (v20 < 0)
    operator delete(__p[0]);
}

void sub_19167BE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  a26 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v31 - 57) < 0)
    operator delete(*(void **)(v31 - 80));
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DB1BE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB1BE0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  std::string *v9;
  const std::string::value_type *v10;
  size_t v11;
  void **v12;
  const void *v13;
  __int128 *v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t i;
  __int128 *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t j;
  std::string *v28;
  std::string *v29;
  void **p_data;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  void *__p[2];
  char v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  _QWORD v41[3];
  char v42;
  int v43;
  int v44;
  std::string v45;
  void ***v46;
  std::__shared_weak_count *v47;
  void ***v48;
  std::string v49;
  uint64_t v50;
  std::string v51;
  std::string v52;
  std::string v53;
  __int128 v54;
  _BYTE v55[24];
  std::string v56;
  __int128 v57;

  *(_QWORD *)&v57 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a3 + 23) >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  v9 = &v45;
  std::string::basic_string[abi:ne180100]((uint64_t)&v45, v8 + 4);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if (v8)
  {
    if (*(char *)(a3 + 23) >= 0)
      v10 = (const std::string::value_type *)a3;
    else
      v10 = *(const std::string::value_type **)a3;
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "/mul");
  v41[2] = 897988541;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v41[0] = 1;
  v41[1] = 3212836864;
  std::string::basic_string[abi:ne180100]<0>(&v51, "elementwise");
  if (*(char *)(a4 + 23) >= 0)
    v11 = *(unsigned __int8 *)(a4 + 23);
  else
    v11 = *(_QWORD *)(a4 + 8);
  v12 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v11 + 4);
  if (v38 < 0)
    v12 = (void **)__p[0];
  if (v11)
  {
    if (*(char *)(a4 + 23) >= 0)
      v13 = (const void *)a4;
    else
      v13 = *(const void **)a4;
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, "/mul");
  v14 = (__int128 *)a1[1];
  if (*((char *)v14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
  }
  else
  {
    v15 = *v14;
    v53.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v15;
  }
  v16 = **(__int128 ***)(a1[2] + 24);
  if (*((char *)v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v54, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    *(_QWORD *)v55 = *((_QWORD *)v16 + 2);
    v54 = v17;
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v31 = (std::string *)&v34;
  LOBYTE(v32) = 0;
  v34 = (std::string *)operator new(0x30uLL);
  v35 = v34;
  v36 = v34 + 2;
  v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, (__int128 *)&v53, (__int128 *)&v55[8], v34);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v56, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  else
    v56 = v45;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v28 = (std::string *)&v31;
  LOBYTE(v29) = 0;
  v31 = (std::string *)operator new(0x18uLL);
  v32 = v31;
  v33 = v31 + 1;
  v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v33, (__int128 *)&v56, &v57, v31);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v39, a2, (uint64_t)&v51, (uint64_t)__p, (uint64_t)v41, (uint64_t)v34, (uint64_t)v35, (uint64_t *)&v31);
  v18 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v28 = (std::string *)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  for (i = 0; i != -48; i -= 24)
  {
    if ((char)v55[i + 7] < 0)
      operator delete(*(void **)((char *)&v53 + i + 24));
  }
  if (v38 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  v53.__r_.__value_.__r.__words[2] = 897988541;
  LOBYTE(v54) = 0;
  *(_QWORD *)&v55[4] = 0;
  v53.__r_.__value_.__r.__words[0] = 102;
  v53.__r_.__value_.__l.__size_ = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v51, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  else
    v51 = v45;
  v22 = (__int128 *)a1[3];
  if (*((char *)v22 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
  }
  else
  {
    v23 = *v22;
    v52.__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 2);
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v23;
  }
  memset(&v56, 0, sizeof(v56));
  v28 = &v56;
  LOBYTE(v29) = 0;
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  v56.__r_.__value_.__l.__size_ = v56.__r_.__value_.__r.__words[0];
  v56.__r_.__value_.__r.__words[2] = v56.__r_.__value_.__r.__words[0] + 48;
  v56.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v56.__r_.__value_.__r.__words[2], (__int128 *)&v51, (__int128 *)&v53, (std::string *)v56.__r_.__value_.__l.__data_);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v49 = *(std::string *)a3;
  v28 = 0;
  v29 = 0;
  p_data = 0;
  v46 = (void ***)&v28;
  LOBYTE(v47) = 0;
  v28 = (std::string *)operator new(0x18uLL);
  v29 = v28;
  p_data = (void **)&v28[1].__r_.__value_.__l.__data_;
  v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v49, (__int128 *)&v50, v28);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v46, a2, (uint64_t)__p, a4, (uint64_t)&v53, (uint64_t)v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_, (uint64_t *)&v28);
  v24 = v47;
  if (v47)
  {
    v25 = (unint64_t *)&v47->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v48 = (void ***)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v52.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v51 + j * 8 + 24));
  }
  if (v38 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
}

void sub_19167C58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;

  a43 = (void *)(v48 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  v50 = 0;
  v51 = v48 - 224;
  while (1)
  {
    if (*(char *)(v51 + v50 + 47) < 0)
      operator delete(*(void **)(v51 + v50 + 24));
    v50 -= 24;
    if (v50 == -48)
    {
      if (a24 < 0)
        operator delete(__p);
      if (a39 < 0)
        operator delete(a34);
      _Unwind_Resume(a1);
    }
  }
}

void sub_19167C744()
{
  JUMPOUT(0x19167C73CLL);
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DB1B88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB1B88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  __int128 *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t i;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  void *__p[2];
  char v23;
  _QWORD v24[3];
  char v25;
  int v26;
  int v27;
  std::string **v28;
  std::__shared_weak_count *v29;
  std::string **v30;
  std::string v31;
  uint64_t v32;
  std::string v33;
  std::string v34;
  __int128 v35;

  *((_QWORD *)&v35 + 1) = *MEMORY[0x1E0C80C00];
  v24[2] = 897988541;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v24[0] = 102;
  v24[1] = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  v8 = *(__int128 **)(a1 + 8);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v33.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  }
  v10 = *(__int128 **)(a1 + 16);
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v34.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v16 = (std::string *)&v19;
  LOBYTE(v17) = 0;
  v19 = (std::string *)operator new(0x30uLL);
  v20 = v19;
  v21 = v19 + 2;
  v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v21, (__int128 *)&v33, &v35, v19);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v31 = *(std::string *)a3;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v28 = &v16;
  LOBYTE(v29) = 0;
  v16 = (std::string *)operator new(0x18uLL);
  v17 = v16;
  v18 = v16 + 1;
  v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (__int128 *)&v31, (__int128 *)&v32, v16);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v28, a2, (uint64_t)__p, a4, (uint64_t)v24, (uint64_t)v19, (uint64_t)v20, (uint64_t *)&v16);
  v12 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v30 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v34.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v33 + i * 8 + 24));
  }
  if (v23 < 0)
    operator delete(__p[0]);
}

void sub_19167CA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  a32 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  v39 = 0;
  v40 = v37 - 128;
  while (1)
  {
    if (*(char *)(v40 + v39 + 47) < 0)
      operator delete(*(void **)(v40 + v39 + 24));
    v39 -= 24;
    if (v39 == -48)
    {
      if (a21 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DB1B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB1B30;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(_QWORD *a1, uint64_t *a2, uint64_t a3, const void **a4)
{
  size_t v8;
  std::string *v9;
  const void *v10;
  __int128 *v11;
  __int128 v12;
  __int128 *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  size_t v19;
  std::string *v20;
  const void *v21;
  __int128 *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t j;
  std::string *v28;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  void *__p;
  char v35;
  char v36;
  std::string *v37;
  std::string *v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  std::string *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  _QWORD v45[3];
  char v46;
  int v47;
  int v48;
  std::string v49;
  std::string **v50;
  std::__shared_weak_count *v51;
  std::string **v52;
  std::string v53;
  uint64_t v54;
  std::string v55;
  std::string v56;
  std::string v57;
  __int128 v58;
  _BYTE v59[24];
  std::string v60;
  __int128 v61;

  *(_QWORD *)&v61 = *MEMORY[0x1E0C80C00];
  if (*((char *)a4 + 23) >= 0)
    v8 = *((unsigned __int8 *)a4 + 23);
  else
    v8 = (size_t)a4[1];
  v9 = &v49;
  std::string::basic_string[abi:ne180100]((uint64_t)&v49, v8 + 5);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)v49.__r_.__value_.__r.__words[0];
  if (v8)
  {
    if (*((char *)a4 + 23) >= 0)
      v10 = a4;
    else
      v10 = *a4;
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, ":less");
  v45[2] = 897988541;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v45[0] = 103;
  v45[1] = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v55, "elementwise");
  v11 = (__int128 *)a1[1];
  if (*((char *)v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
  }
  else
  {
    v12 = *v11;
    v57.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v12;
  }
  v13 = (__int128 *)a1[2];
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v58, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
  }
  else
  {
    v14 = *v13;
    *(_QWORD *)v59 = *((_QWORD *)v13 + 2);
    v58 = v14;
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v37 = (std::string *)&v40;
  LOBYTE(v38) = 0;
  v40 = (std::string *)operator new(0x30uLL);
  v41 = v40;
  v42 = v40 + 2;
  v41 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v42, (__int128 *)&v57, (__int128 *)&v59[8], v40);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v60, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    v60 = v49;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  __p = &v37;
  v35 = 0;
  v37 = (std::string *)operator new(0x18uLL);
  v38 = v37;
  v39 = v37 + 1;
  v38 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v39, (__int128 *)&v60, &v61, v37);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v43, a2, (uint64_t)&v55, (uint64_t)&v49, (uint64_t)v45, (uint64_t)v40, (uint64_t)v41, (uint64_t *)&v37);
  v15 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  __p = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  for (i = 0; i != -48; i -= 24)
  {
    if ((char)v59[i + 7] < 0)
      operator delete(*(void **)((char *)&v57 + i + 24));
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  v57.__r_.__value_.__r.__words[2] = 897988541;
  LOBYTE(v58) = 0;
  *(_QWORD *)&v59[4] = 0;
  v57.__r_.__value_.__r.__words[0] = 1;
  v57.__r_.__value_.__l.__size_ = 1065353216;
  if (*((char *)a4 + 23) >= 0)
    v19 = *((unsigned __int8 *)a4 + 23);
  else
    v19 = (size_t)a4[1];
  v20 = &v60;
  std::string::basic_string[abi:ne180100]((uint64_t)&v60, v19 + 2);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = (std::string *)v60.__r_.__value_.__r.__words[0];
  if (v19)
  {
    if (*((char *)a4 + 23) >= 0)
      v21 = a4;
    else
      v21 = *a4;
    memmove(v20, v21, v19);
  }
  strcpy((char *)v20 + v19, ":b");
  std::string::basic_string[abi:ne180100]<0>(&__p, "elementwise");
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v55, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    v55 = v49;
  v22 = (__int128 *)a1[3];
  if (*((char *)v22 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
  }
  else
  {
    v23 = *v22;
    v56.__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 2);
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v23;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v28 = (std::string *)&v31;
  LOBYTE(v29) = 0;
  v31 = (std::string *)operator new(0x30uLL);
  v32 = v31;
  v33 = v31 + 2;
  v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v33, (__int128 *)&v55, (__int128 *)&v57, v31);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v53 = *(std::string *)a3;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v50 = &v28;
  LOBYTE(v51) = 0;
  v28 = (std::string *)operator new(0x18uLL);
  v29 = v28;
  v30 = v28 + 1;
  v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v30, (__int128 *)&v53, (__int128 *)&v54, v28);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v50, a2, (uint64_t)&__p, (uint64_t)&v60, (uint64_t)&v57, (uint64_t)v31, (uint64_t)v32, (uint64_t *)&v28);
  v24 = v51;
  if (v51)
  {
    v25 = (unint64_t *)&v51->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v52 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v56.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v55 + j * 8 + 24));
  }
  if (v36 < 0)
    operator delete(__p);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
}

void sub_19167D1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,char *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;

  a45 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  v52 = 0;
  v53 = v50 - 224;
  while (1)
  {
    if (*(char *)(v53 + v52 + 47) < 0)
      operator delete(*(void **)(v53 + v52 + 24));
    v52 -= 24;
    if (v52 == -48)
    {
      if (a20 < 0)
        operator delete(__p);
      if (*(char *)(v50 - 89) < 0)
        operator delete(*(void **)(v50 - 112));
      if (a41 < 0)
        operator delete(a36);
      _Unwind_Resume(a1);
    }
  }
}

void sub_19167D358()
{
  JUMPOUT(0x19167D350);
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DB1AD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB1AD8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(_QWORD *a1, uint64_t *a2, uint64_t a3, const void **a4)
{
  size_t v8;
  std::string *v9;
  const void *v10;
  __int128 *v11;
  __int128 v12;
  __int128 *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  size_t v19;
  std::string *v20;
  const void *v21;
  __int128 *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t j;
  std::string *v28;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  void *__p;
  char v35;
  char v36;
  std::string *v37;
  std::string *v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  std::string *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  _QWORD v45[3];
  char v46;
  int v47;
  int v48;
  std::string v49;
  std::string **v50;
  std::__shared_weak_count *v51;
  std::string **v52;
  std::string v53;
  uint64_t v54;
  std::string v55;
  std::string v56;
  std::string v57;
  __int128 v58;
  _BYTE v59[24];
  std::string v60;
  __int128 v61;

  *(_QWORD *)&v61 = *MEMORY[0x1E0C80C00];
  if (*((char *)a4 + 23) >= 0)
    v8 = *((unsigned __int8 *)a4 + 23);
  else
    v8 = (size_t)a4[1];
  v9 = &v49;
  std::string::basic_string[abi:ne180100]((uint64_t)&v49, v8 + 8);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)v49.__r_.__value_.__r.__words[0];
  if (v8)
  {
    if (*((char *)a4 + 23) >= 0)
      v10 = a4;
    else
      v10 = *a4;
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, ":greater");
  v45[2] = 897988541;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v45[0] = 105;
  v45[1] = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v55, "elementwise");
  v11 = (__int128 *)a1[1];
  if (*((char *)v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
  }
  else
  {
    v12 = *v11;
    v57.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v12;
  }
  v13 = (__int128 *)a1[2];
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v58, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
  }
  else
  {
    v14 = *v13;
    *(_QWORD *)v59 = *((_QWORD *)v13 + 2);
    v58 = v14;
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v37 = (std::string *)&v40;
  LOBYTE(v38) = 0;
  v40 = (std::string *)operator new(0x30uLL);
  v41 = v40;
  v42 = v40 + 2;
  v41 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v42, (__int128 *)&v57, (__int128 *)&v59[8], v40);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v60, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    v60 = v49;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  __p = &v37;
  v35 = 0;
  v37 = (std::string *)operator new(0x18uLL);
  v38 = v37;
  v39 = v37 + 1;
  v38 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v39, (__int128 *)&v60, &v61, v37);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v43, a2, (uint64_t)&v55, (uint64_t)&v49, (uint64_t)v45, (uint64_t)v40, (uint64_t)v41, (uint64_t *)&v37);
  v15 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  __p = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  for (i = 0; i != -48; i -= 24)
  {
    if ((char)v59[i + 7] < 0)
      operator delete(*(void **)((char *)&v57 + i + 24));
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  v57.__r_.__value_.__r.__words[2] = 897988541;
  LOBYTE(v58) = 0;
  *(_QWORD *)&v59[4] = 0;
  v57.__r_.__value_.__r.__words[0] = 1;
  v57.__r_.__value_.__l.__size_ = 1065353216;
  if (*((char *)a4 + 23) >= 0)
    v19 = *((unsigned __int8 *)a4 + 23);
  else
    v19 = (size_t)a4[1];
  v20 = &v60;
  std::string::basic_string[abi:ne180100]((uint64_t)&v60, v19 + 2);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = (std::string *)v60.__r_.__value_.__r.__words[0];
  if (v19)
  {
    if (*((char *)a4 + 23) >= 0)
      v21 = a4;
    else
      v21 = *a4;
    memmove(v20, v21, v19);
  }
  strcpy((char *)v20 + v19, ":a");
  std::string::basic_string[abi:ne180100]<0>(&__p, "elementwise");
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v55, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    v55 = v49;
  v22 = (__int128 *)a1[3];
  if (*((char *)v22 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
  }
  else
  {
    v23 = *v22;
    v56.__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 2);
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v23;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v28 = (std::string *)&v31;
  LOBYTE(v29) = 0;
  v31 = (std::string *)operator new(0x30uLL);
  v32 = v31;
  v33 = v31 + 2;
  v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v33, (__int128 *)&v55, (__int128 *)&v57, v31);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v53 = *(std::string *)a3;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v50 = &v28;
  LOBYTE(v51) = 0;
  v28 = (std::string *)operator new(0x18uLL);
  v29 = v28;
  v30 = v28 + 1;
  v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v30, (__int128 *)&v53, (__int128 *)&v54, v28);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v50, a2, (uint64_t)&__p, (uint64_t)&v60, (uint64_t)&v57, (uint64_t)v31, (uint64_t)v32, (uint64_t *)&v28);
  v24 = v51;
  if (v51)
  {
    v25 = (unint64_t *)&v51->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v52 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v56.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v55 + j * 8 + 24));
  }
  if (v36 < 0)
    operator delete(__p);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
}

void sub_19167D9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,char *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;

  a45 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  v52 = 0;
  v53 = v50 - 224;
  while (1)
  {
    if (*(char *)(v53 + v52 + 47) < 0)
      operator delete(*(void **)(v53 + v52 + 24));
    v52 -= 24;
    if (v52 == -48)
    {
      if (a20 < 0)
        operator delete(__p);
      if (*(char *)(v50 - 89) < 0)
        operator delete(*(void **)(v50 - 112));
      if (a41 < 0)
        operator delete(a36);
      _Unwind_Resume(a1);
    }
  }
}

void sub_19167DB60()
{
  JUMPOUT(0x19167DB58);
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DB1A80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB1A80;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  __int128 *v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t i;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  void *__p[2];
  char v25;
  _QWORD v26[3];
  char v27;
  int v28;
  int v29;
  std::string **v30;
  std::__shared_weak_count *v31;
  std::string **v32;
  std::string v33;
  uint64_t v34;
  std::string v35;
  std::string v36;
  std::string v37;
  __int128 v38;

  *(_QWORD *)&v38 = *MEMORY[0x1E0C80C00];
  v26[2] = 897988541;
  v28 = 0;
  v29 = 0;
  v26[0] = 101;
  v26[1] = 1065353216;
  v27 = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  v8 = (__int128 *)a1[1];
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v35.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
  }
  v10 = (__int128 *)a1[2];
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v36.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v11;
  }
  v12 = (__int128 *)a1[3];
  if (*((char *)v12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
  }
  else
  {
    v13 = *v12;
    v37.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v13;
  }
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v18 = (std::string *)&v21;
  LOBYTE(v19) = 0;
  v21 = (std::string *)operator new(0x48uLL);
  v22 = v21;
  v23 = v21 + 3;
  v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v23, (__int128 *)&v35, &v38, v21);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v33 = *(std::string *)a3;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v30 = &v18;
  LOBYTE(v31) = 0;
  v18 = (std::string *)operator new(0x18uLL);
  v19 = v18;
  v20 = v18 + 1;
  v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, (__int128 *)&v33, (__int128 *)&v34, v18);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v30, a2, (uint64_t)__p, a4, (uint64_t)v26, (uint64_t)v21, (uint64_t)v22, (uint64_t *)&v18);
  v14 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v32 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v37.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v37.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v25 < 0)
    operator delete(__p[0]);
}

void sub_19167DEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  a32 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  v39 = 0;
  v40 = v37 - 144;
  while (1)
  {
    if (*(char *)(v40 + v39 + 71) < 0)
      operator delete(*(void **)(v40 + v39 + 48));
    v39 -= 24;
    if (v39 == -72)
    {
      if (a21 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DB1A28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB1A28;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  __int128 *v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t i;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  void *__p[2];
  char v25;
  _QWORD v26[3];
  char v27;
  int v28;
  int v29;
  std::string **v30;
  std::__shared_weak_count *v31;
  std::string **v32;
  std::string v33;
  uint64_t v34;
  std::string v35;
  std::string v36;
  std::string v37;
  __int128 v38;

  *(_QWORD *)&v38 = *MEMORY[0x1E0C80C00];
  v26[2] = 897988541;
  v28 = 0;
  v29 = 0;
  v26[0] = 101;
  v26[1] = 1065353216;
  v27 = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  v8 = (__int128 *)a1[1];
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v35.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
  }
  v10 = (__int128 *)a1[2];
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v36.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v11;
  }
  v12 = (__int128 *)a1[3];
  if (*((char *)v12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
  }
  else
  {
    v13 = *v12;
    v37.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v13;
  }
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v18 = (std::string *)&v21;
  LOBYTE(v19) = 0;
  v21 = (std::string *)operator new(0x48uLL);
  v22 = v21;
  v23 = v21 + 3;
  v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v23, (__int128 *)&v35, &v38, v21);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v33 = *(std::string *)a3;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v30 = &v18;
  LOBYTE(v31) = 0;
  v18 = (std::string *)operator new(0x18uLL);
  v19 = v18;
  v20 = v18 + 1;
  v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, (__int128 *)&v33, (__int128 *)&v34, v18);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v30, a2, (uint64_t)__p, a4, (uint64_t)v26, (uint64_t)v21, (uint64_t)v22, (uint64_t *)&v18);
  v14 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v32 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v37.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v37.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v25 < 0)
    operator delete(__p[0]);
}

void sub_19167E360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  a32 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  v39 = 0;
  v40 = v37 - 144;
  while (1)
  {
    if (*(char *)(v40 + v39 + 71) < 0)
      operator delete(*(void **)(v40 + v39 + 48));
    v39 -= 24;
    if (v39 == -72)
    {
      if (a21 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a3);
    std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(a1, a2, &a2[a3], a3);
  }
  return a1;
}

_QWORD *std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(_QWORD *result, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = result[1];
  v5 = v4 + a4;
  result[1] = v4 + a4;
  if (v4)
  {
    v6 = v5 - 1;
    if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      goto LABEL_9;
  }
  else
  {
    v6 = v5 - 1;
  }
  v7 = v6 >> 6;
  if (v5 >= 0x41)
    v8 = v7;
  else
    v8 = 0;
  *(_QWORD *)(*result + 8 * v8) = 0;
LABEL_9:
  if (a2 != a3)
  {
    v9 = v4 & 0x3F;
    v10 = (uint64_t *)(*result + 8 * (v4 >> 6));
    do
    {
      v11 = 1 << v9;
      if (*a2)
        v12 = *v10 | v11;
      else
        v12 = *v10 & ~v11;
      *v10 = v12;
      ++a2;
      v10 += v9 == 63;
      if (v9 == 63)
        v9 = 0;
      else
        ++v9;
    }
    while (a2 != a3);
  }
  return result;
}

void Espresso::shape_error_wrapper(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  const char *v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  std::string *v9;
  const void *p_p;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  void *v16;
  unsigned __int8 v17;
  unint64_t v18;
  _BYTE v19[24];
  std::string v20;
  std::string v21;
  std::string v22;
  void *__p;
  _BYTE v24[15];
  unsigned __int8 v25;
  _QWORD v26[5];

  v26[2] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "generic_elementwise_kernel: cannot broadcast:\n");
  v4 = (uint64_t)(a1[1] - *a1) >> 6;
  if (v4 >= a2)
    v4 = a2;
  if (v4)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if ((v25 & 0x80u) == 0)
        v8 = v25;
      else
        v8 = *(_QWORD *)v24;
      std::string::basic_string[abi:ne180100]((uint64_t)&v21, v8 + 1);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v21;
      else
        v9 = (std::string *)v21.__r_.__value_.__r.__words[0];
      if (v8)
      {
        if ((v25 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        memmove(v9, p_p, v8);
      }
      *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 9;
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v19, (const Espresso::layer_shape *)(*a1 + v6), 0);
      Espresso::layer_nd_shape::repr(&v20, (uint64_t)v19);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v20;
      else
        v11 = (std::string *)v20.__r_.__value_.__r.__words[0];
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
      else
        size = v20.__r_.__value_.__l.__size_;
      v13 = std::string::append(&v21, (const std::string::value_type *)v11, size);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v15 = std::string::append(&v22, "\n");
      v16 = (void *)v15->__r_.__value_.__r.__words[0];
      v26[0] = v15->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
      v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if ((char)v25 < 0)
        operator delete(__p);
      __p = v16;
      *(_QWORD *)v24 = v26[0];
      *(_QWORD *)&v24[7] = *(_QWORD *)((char *)v26 + 7);
      v25 = v17;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      ++v7;
      v18 = (uint64_t)(a1[1] - *a1) >> 6;
      if (v18 >= a2)
        v18 = a2;
      v6 += 64;
    }
    while (v7 < v18);
  }
  if ((v25 & 0x80u) == 0)
    v5 = (const char *)&__p;
  else
    v5 = (const char *)__p;
  Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v5);
}

void sub_19167E77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a30 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a24 < 0)
    operator delete(a19);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

void Espresso::generic_split_kernel::top_shapes_for_bottom_shapes(_DWORD *a1@<X0>, _OWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  const char *v14;
  int v15;
  int v16;
  int (*v17)(_DWORD *);
  int v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  _BYTE v25[32];
  uint64_t v26;
  void *__p;
  _BYTE *v28;
  uint64_t v29;
  _BYTE v30[32];
  uint64_t v31;
  void *v32;
  _BYTE *v33;
  uint64_t v34;
  _BYTE v35[20];
  unsigned int v36;
  _BYTE v37[32];
  uint64_t v38;
  void *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t *v42;
  char v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  __int128 v55;

  *((_QWORD *)&v55 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  *(_OWORD *)v37 = **a2;
  *(_OWORD *)&v37[16] = v7;
  v38 = v6;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v39, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v35, (const Espresso::layer_shape *)v37, 0);
  if (*(_DWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 320))(a1) + 16))
  {
    v8 = a1[73];
    if (v8 <= 0)
    {
      v9 = *(_DWORD *)&v37[8];
      if (*(int *)&v37[8] >= 1)
        v9 = *(_DWORD *)&v37[8] - 1;
      v8 = (v9 >> 1) + 1;
    }
    *(_OWORD *)&v30[16] = *(_OWORD *)&v37[16];
    v31 = v38;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v32, v39, (uint64_t)v40, (v40 - (_BYTE *)v39) >> 2);
    *(_QWORD *)v30 = *(_QWORD *)v37;
    *(_DWORD *)&v30[8] = v8;
    *(_QWORD *)&v30[12] = *(_QWORD *)&v37[12];
    *(_OWORD *)&v25[16] = *(_OWORD *)&v37[16];
    v26 = v38;
    __p = 0;
    v28 = 0;
    v29 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v39, (uint64_t)v40, (v40 - (_BYTE *)v39) >> 2);
    *(_QWORD *)v25 = *(_QWORD *)v37;
    *(_DWORD *)&v25[8] = *(_DWORD *)&v37[8] - v8;
    *(_QWORD *)&v25[12] = *(_QWORD *)&v37[12];
    v44 = *(_OWORD *)v30;
    v45 = *(_OWORD *)&v30[16];
    v46 = v31;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v47, v32, (uint64_t)v33, (v33 - (_BYTE *)v32) >> 2);
    v50 = *(_OWORD *)v25;
    v51 = *(_OWORD *)&v25[16];
    v52 = v26;
    v53 = 0;
    v54[0] = 0;
    v54[1] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v53, __p, (uint64_t)v28, (v28 - (_BYTE *)__p) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v42 = a3;
    v43 = 0;
    v10 = operator new(0x80uLL);
    *a3 = (uint64_t)v10;
    a3[1] = (uint64_t)v10;
    a3[2] = (uint64_t)v10 + 128;
    v11 = 0;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v44, &v55, (uint64_t)v10);
    do
    {
      v12 = (void *)v54[v11 - 1];
      if (v12)
      {
        v54[v11] = v12;
        operator delete(v12);
      }
      v11 -= 8;
    }
    while (v11 != -16);
    if (__p)
    {
      v28 = __p;
      operator delete(__p);
    }
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
  }
  else
  {
    v13 = 0;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v14 = "generic_split_kernel: Number of top blobs in split kernel does not evenly divide n axis";
    while (v13 < (*(int (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1))
    {
      v44 = *(_OWORD *)v37;
      v45 = *(_OWORD *)&v37[16];
      v46 = v38;
      v48 = 0;
      v49 = 0;
      v47 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v47, v39, (uint64_t)v40, (v40 - (_BYTE *)v39) >> 2);
      if (a1[71] == 3)
      {
        v15 = *(_DWORD *)&v37[12];
        if (v15 % (*(int (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1))
          goto LABEL_35;
        v16 = *(_DWORD *)&v37[12];
        HIDWORD(v44) = (v16 - 1) / (*(int (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1) + 1;
      }
      else
      {
        v17 = *(int (**)(_DWORD *))(*(_QWORD *)a1 + 72);
        if (v36 > 3)
        {
          v20 = *(_DWORD *)&v37[8];
          if (v20 % v17(a1))
          {
            v14 = "generic_split_kernel: Number of top blobs in split kernel does not evenly divide channels axis.";
LABEL_35:
            Espresso::throw_exception_selector<Espresso::invalid_state_error>(v14);
          }
          v21 = *(_DWORD *)&v37[8];
          DWORD2(v44) = (v21 - 1) / (*(int (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1) + 1;
        }
        else
        {
          v18 = *(_DWORD *)v37;
          if (v18 % v17(a1))
          {
            v24 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1);
            Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int &,int &,int &,int &,int &>(v24, *(int *)v37, *(int *)&v37[4], *(int *)&v37[8], *(int *)&v37[12]);
          }
          v19 = *(_DWORD *)v37;
          LODWORD(v44) = (v19 - 1) / (*(int (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1) + 1;
        }
      }
      v22 = a3[1];
      if (v22 >= a3[2])
      {
        v23 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, &v44);
      }
      else
      {
        std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, &v44);
        v23 = v22 + 64;
      }
      a3[1] = v23;
      if (v47)
      {
        v48 = v47;
        operator delete(v47);
      }
      ++v13;
    }
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
}

void sub_19167EC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void **a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  void *v43;

  *(_QWORD *)(v37 + 8) = v38;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a37);
  v41 = 0;
  v42 = v39 - 208;
  while (1)
  {
    v43 = *(void **)(v42 + v41 + 104);
    if (v43)
    {
      *(_QWORD *)(v42 + v41 + 112) = v43;
      operator delete(v43);
    }
    v41 -= 64;
    if (v41 == -128)
    {
      if (__p)
        operator delete(__p);
      if (a22)
        operator delete(a22);
      if (a34)
        operator delete(a34);
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::generic_split_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __int128 *v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  _DWORD v23[10];
  __int16 v24;
  char v25;
  std::string v26;
  std::string v27;
  void *v28[2];
  char v29;
  std::string **v30;
  char v31;
  std::string v32;
  __int128 v33;

  *(_QWORD *)&v33 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v28, "split");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - **(_QWORD **)(a3 + 16)) >> 3), 1uLL, (uint64_t)v28, 1);
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 3), *(int *)(a1 + 280), (uint64_t)v28, 0);
  v6 = **(__int128 ***)(a3 + 16);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v27.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), (uint64_t)&v27))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v26, (std::string::size_type)&v27, a3);
    v24 = 0;
    v23[0] = 0;
    v23[8] = 0;
    v25 = *(_BYTE *)(a1 + 288);
    std::string::basic_string[abi:ne180100]<0>(__p, "concat");
    v9 = *(_QWORD *)a3;
    v8 = *(uint64_t **)(a3 + 8);
    v17 = 0;
    v18 = 0;
    v16 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *v8, v8[1], 0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3));
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v32, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
    else
      v32 = v26;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v30 = &v13;
    v31 = 0;
    v13 = (std::string *)operator new(0x18uLL);
    v14 = v13;
    v15 = v13 + 1;
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (__int128 *)&v32, &v33, v13);
    Espresso::sequential_builder::add<Espresso::concat_params>(&v21, a2, (uint64_t)__p, v9, (uint64_t)v23, v16, v17, (uint64_t *)&v13);
    v10 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v30 = &v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
    if (v20 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (v29 < 0)
    operator delete(v28[0]);
}

void sub_19167EFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  *(_QWORD *)(v36 - 80) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 80));
  if (a20 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  if (*(char *)(v36 - 97) < 0)
    operator delete(*(void **)(v36 - 120));
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int &,int &,int &,int &,int &>(int a1, int a2, int a3, int a4, int a5)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("generic_split_kernel: Number of top blobs (%d) in split kernel does not evenly divide width axis (%d, %d, %d, %d).", a1, a2, a3, a4, a5);
}

void Espresso::generic_general_padding_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, int **a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  int *v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  int *v14;
  int v15;
  __int128 v16[2];
  uint64_t v17;
  void *__p;
  void *v19;
  uint64_t v20;
  __int128 v21;

  *((_QWORD *)&v21 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  v16[0] = **a2;
  v16[1] = v7;
  v17 = v6;
  __p = 0;
  v19 = 0;
  v20 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v8 = (int *)operator new(0x40uLL);
  *a3 = v8;
  a3[1] = v8;
  a3[2] = v8 + 16;
  a3[1] = (int *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v16, &v21, (uint64_t)v8);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  v9 = *(_DWORD *)(a1 + 308);
  if (v9 < 1 || (v10 = *(_DWORD *)(a1 + 312), v10 < 1))
  {
    v12 = *(_DWORD *)(a1 + 324);
    if (v12 <= 0)
    {
      v14 = *a3;
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 328);
      v14 = *a3;
      if (v13 >= 1)
      {
        *v14 = v12;
        v14[1] = v13;
      }
    }
    v15 = v14[1];
    *v14 += *(__int16 *)(a1 + 290) + *(__int16 *)(a1 + 288);
    v14[1] = *(__int16 *)(a1 + 294) + *(__int16 *)(a1 + 292) + v15;
  }
  else
  {
    v11 = *a3;
    *v11 = v9;
    v11[1] = v10;
  }
}

void sub_19167F1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

int32x2_t Espresso::generic_crop_kernel::top_shapes_for_bottom_shapes@<D0>(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  char *v8;
  int32x2_t v9;
  int32x2_t result;
  __int128 v11[2];
  uint64_t v12;
  void *__p;
  void *v14;
  uint64_t v15;
  __int128 v16;

  *((_QWORD *)&v16 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  v11[0] = **a2;
  v11[1] = v7;
  v12 = v6;
  __p = 0;
  v14 = 0;
  v15 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = v8 + 64;
  *(_QWORD *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, v11, &v16, (uint64_t)v8);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  v9.i32[0] = *(_DWORD *)(a1 + 280);
  v9.i32[1] = *(_DWORD *)(a1 + 292);
  result = vmax_s32(vsub_s32(**(int32x2_t **)a3, vadd_s32(*(int32x2_t *)(a1 + 284), v9)), 0);
  **(int32x2_t **)a3 = result;
  return result;
}

void sub_19167F33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_deconvolution_kernel::input_blob_type(Espresso::generic_deconvolution_kernel *this, uint64_t a2)
{
  if (a2 == 1)
    return 1;
  else
    return 2 * (a2 == 2);
}

double Espresso::generic_deconvolution_kernel::weights_blob_shape@<D0>(Espresso::generic_deconvolution_kernel *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  double result;

  v2 = *((_DWORD *)this + 106);
  if (v2 <= 1)
    v2 = 1;
  v3 = v2 * *((_DWORD *)this + 86);
  v4 = *((_DWORD *)this + 105);
  if (v4 <= 1)
    v4 = 1;
  v5 = v3 / v4;
  v6 = *((_DWORD *)this + 87);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)a2 = *((_QWORD *)this + 44);
  *(_DWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = v6;
  result = NAN;
  *(_QWORD *)(a2 + 16) = 0xFFFFFFFF00000001;
  return result;
}

void Espresso::generic_deconvolution_kernel::create_weights_blob(Espresso::generic_deconvolution_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  int v3;
  int v4;

  v2 = *((_DWORD *)this + 106);
  if (v2 <= 1)
    v2 = 1;
  v3 = v2 * *((_DWORD *)this + 86);
  v4 = *((_DWORD *)this + 105);
  if (v4 <= 1)
    v4 = 1;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 88), *((_DWORD *)this + 89), v3 / v4, *((_DWORD *)this + 87));
}

void Espresso::generic_deconvolution_kernel::create_shuffled_weights_blob(Espresso::generic_deconvolution_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  int v3;
  BOOL v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v2 = *((_DWORD *)this + 106);
  if (v2 <= 1)
    v2 = 1;
  v3 = v2 * *((_DWORD *)this + 86);
  v5 = v3 - 1;
  v4 = v3 < 1;
  v6 = v3 + 2;
  if (!v4)
    v6 = v5;
  v7 = (v6 >> 2) + 1;
  v8 = *((_DWORD *)this + 105);
  if (v8 <= 1)
    v8 = 1;
  v9 = v7 / v8;
  v10 = *((_DWORD *)this + 87);
  v11 = v10 - 1;
  v4 = v10 < 1;
  v12 = v10 + 2;
  if (!v4)
    v12 = v11;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,6>,std::allocator<Espresso::blob<float,6>>,int &,int &,int &,int &,int &,int &,void>(a2, 4, 4, *((_DWORD *)this + 88), *((_DWORD *)this + 89), v9, (v12 >> 2) + 1);
}

void Espresso::generic_deconvolution_kernel::get_shuffled_weights_shape(Espresso::generic_deconvolution_kernel *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = *((_DWORD *)this + 106);
  if (v4 <= 1)
    v4 = 1;
  v5 = v4 * *((_DWORD *)this + 86);
  v7 = v5 - 1;
  v6 = v5 < 1;
  v8 = v5 + 2;
  if (!v6)
    v8 = v7;
  v9 = (v8 >> 2) + 1;
  v10 = *((_DWORD *)this + 105);
  if (v10 <= 1)
    v10 = 1;
  v11 = v9 / v10;
  v12 = *((_DWORD *)this + 87);
  v13 = v12 - 1;
  v6 = v12 < 1;
  v14 = v12 + 2;
  if (!v6)
    v14 = v13;
  v15 = (v14 >> 2) + 1;
  v16 = operator new(0x18uLL);
  v17 = *((_QWORD *)this + 44);
  *v16 = 0x400000004;
  v16[1] = v17;
  *((_DWORD *)v16 + 4) = v11;
  *((_DWORD *)v16 + 5) = v15;
  *(_OWORD *)a2 = *(_OWORD *)v16;
  *(_DWORD *)(a2 + 16) = v11;
  *(_DWORD *)(a2 + 20) = 6;
  operator delete(v16);
}

_QWORD *Espresso::generic_deconvolution_kernel::dequantized_weights_from_ranges@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float *v14;
  uint64_t v15;
  unsigned int v16;

  if (this[63] && (v3 = this, this[65]))
  {
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 472))(this);
    v4 = *((unsigned int *)v3 + 86);
    if ((int)v4 >= 1)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = *a2;
      v9 = *(int *)(*a2 + 12) * (uint64_t)*(int *)(*a2 + 8) * *(int *)(*a2 + 16);
      v10 = *(_QWORD *)(v3[63] + 16);
      v11 = (*(_DWORD *)(*a2 + 12) * *(_DWORD *)(*a2 + 8) * *(_DWORD *)(*a2 + 16));
      do
      {
        if ((int)v11 >= 1)
        {
          v12 = *(float *)(v10 + 4 * v7);
          v13 = *(float *)(v10 + 4 * (v7 + v4)) - v12;
          v14 = (float *)(*(_QWORD *)(v8 + 24) + v6);
          this = (_QWORD *)(*(_QWORD *)(v3[65] + 24) + v5);
          v15 = v11;
          do
          {
            v16 = *(unsigned __int8 *)this;
            this = (_QWORD *)((char *)this + 1);
            *v14++ = v12 + (float)((float)((float)v16 * 0.0039216) * v13);
            --v15;
          }
          while (v15);
        }
        ++v7;
        v6 += 4 * v9;
        v5 += v9;
      }
      while (v7 != v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

BOOL Espresso::generic_convolution_grad_kernel::input_blob_type(Espresso::generic_convolution_grad_kernel *this, uint64_t a2)
{
  return a2 == 1;
}

uint64_t Espresso::generic_convolution_grad_kernel::clear_weights(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  v3 = *(_QWORD *)(this + 280);
  v2 = *(_QWORD *)(this + 288);
  if (v2 != v3)
  {
    do
    {
      v2 -= 16;
      this = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
    }
    while (v2 != v3);
    v2 = *(_QWORD *)(v1 + 280);
  }
  *(_QWORD *)(v1 + 288) = v3;
  while (v3 != v2)
  {
    v3 -= 16;
    this = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  }
  *(_QWORD *)(v1 + 288) = v2;
  return this;
}

void Espresso::generic_convolution_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  __int128 v4;
  const void *v5;
  char *v6;
  __int128 v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;

  *((_QWORD *)&v12 + 1) = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)a1;
  v4 = *(_OWORD *)(*(_QWORD *)a1 + 144);
  v7[0] = *(_OWORD *)(*(_QWORD *)a1 + 128);
  v7[1] = v4;
  v5 = (const void *)v3[21];
  v8 = v3[20];
  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v5, v3[22], (uint64_t)(v3[22] - (_QWORD)v5) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_19167F768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_convolution_weights_grad_kernel::input_blob_type(Espresso::generic_convolution_weights_grad_kernel *this, uint64_t a2)
{
  return a2 == 2;
}

void Espresso::generic_convolution_weights_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  int8x16_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;
  __int128 v11;

  *((_QWORD *)&v11 + 1) = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7 = 0;
  v4 = vextq_s8(*(int8x16_t *)(a1 + 344), (int8x16_t)vrev64q_s32(*(int32x4_t *)(a1 + 344)), 8uLL);
  v5 = 0xFFFFFFFF00000001;
  v9 = 0;
  v10 = 0;
  __p = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v3 = (char *)operator new(0x40uLL);
  *a2 = v3;
  a2[1] = v3;
  a2[2] = v3 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), (__int128 *)v4.i8, &v11, (uint64_t)v3);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_19167F890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_pool_grad_kernel::top_shapes_for_bottom_shapes(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  const void *v5;
  char *v6;
  __int128 v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;

  *((_QWORD *)&v12 + 1) = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (a1[1] - *a1 != 128)
    Espresso::throw_exception_selector<Espresso::generic_error>("generic_pool_grad_kernel: need the input blob of corresponding pool kernel as the second input to compute the top shape");
  v4 = *(_OWORD *)(v3 + 80);
  v7[0] = *(_OWORD *)(v3 + 64);
  v7[1] = v4;
  v5 = *(const void **)(v3 + 104);
  v8 = *(_QWORD *)(v3 + 96);
  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v5, *(_QWORD *)(v3 + 112), (uint64_t)(*(_QWORD *)(v3 + 112) - (_QWORD)v5) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_19167F9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double Espresso::generic_pool_grad_kernel::on_resized(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  if (*(_DWORD *)(a1 + 336))
  {
    result = *(double *)(*(_QWORD *)(*(_QWORD *)a3 + 16) + 8);
    *(double *)(a1 + 284) = result;
  }
  return result;
}

void Espresso::generic_activation_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  __int128 v6;
  const void *v7;
  __int128 *v8;
  __int128 v9;
  const void *v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  void *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p;
  void *v25;
  uint64_t v26;
  __int128 v27[2];
  uint64_t v28;
  _QWORD v29[3];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  __int128 v35;

  *((_QWORD *)&v35 + 1) = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 280) == 17)
  {
    v5 = *a2;
    v6 = (*a2)[17];
    v21 = (*a2)[16];
    v22 = v6;
    v7 = (const void *)*((_QWORD *)v5 + 37);
    v23 = *((_QWORD *)v5 + 36);
    __p = 0;
    v25 = 0;
    v26 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v7, *((_QWORD *)v5 + 38), (uint64_t)(*((_QWORD *)v5 + 38) - (_QWORD)v7) >> 2);
    v8 = *a2;
    v9 = (*a2)[17];
    v27[0] = (*a2)[16];
    v27[1] = v9;
    v10 = (const void *)*((_QWORD *)v8 + 37);
    v28 = *((_QWORD *)v8 + 36);
    memset(v29, 0, sizeof(v29));
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v29, v10, *((_QWORD *)v8 + 38), (uint64_t)(*((_QWORD *)v8 + 38) - (_QWORD)v10) >> 2);
    v11 = *a2;
    v12 = *((_QWORD *)*a2 + 4);
    v13 = (*a2)[1];
    v30 = **a2;
    v31 = v13;
    v34[0] = 0;
    v34[1] = 0;
    v32 = v12;
    v33 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v33, *((const void **)v11 + 5), *((_QWORD *)v11 + 6), (uint64_t)(*((_QWORD *)v11 + 6) - *((_QWORD *)v11 + 5)) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v14 = (char *)operator new(0xC0uLL);
    *a3 = v14;
    a3[1] = v14;
    a3[2] = v14 + 192;
    v15 = 0;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v21, &v35, (uint64_t)v14);
    do
    {
      v16 = (void *)v34[v15 - 1];
      if (v16)
      {
        v34[v15] = v16;
        operator delete(v16);
      }
      v15 -= 8;
    }
    while (v15 != -24);
  }
  else
  {
    v17 = *a2;
    v18 = *((_QWORD *)*a2 + 4);
    v19 = (*a2)[1];
    v21 = **a2;
    v22 = v19;
    v23 = v18;
    __p = 0;
    v25 = 0;
    v26 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v17 + 5), *((_QWORD *)v17 + 6), (uint64_t)(*((_QWORD *)v17 + 6) - *((_QWORD *)v17 + 5)) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v20 = (char *)operator new(0x40uLL);
    *a3 = v20;
    a3[1] = v20;
    a3[2] = v20 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v21, v27, (uint64_t)v20);
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
  }
}

void sub_19167FC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_bias_kernel::supports_weight_key()
{
  return 0;
}

void Espresso::generic_bias_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  _BYTE v7[12];
  uint64_t v8;
  int v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  void *__p[2];
  uint64_t v18;
  __int128 v19;

  *(_QWORD *)&v19 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 308))
  {
    *(_DWORD *)v7 = *(_DWORD *)(a1 + 304);
    v8 = 0;
    *(_QWORD *)&v7[4] = 0;
    v9 = 1;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v7, 0, (uint64_t)&v12);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v10 = a2;
    v11 = 0;
    v3 = (char *)operator new(0x40uLL);
    *a2 = v3;
    a2[1] = v3;
    a2[2] = v3 + 64;
    v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), (__int128 *)&v12, &v19, (uint64_t)v3);
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 304);
    v16 = 0u;
    *(_OWORD *)__p = 0u;
    v18 = 0;
    v12 = 0x100000001;
    v13 = v5;
    v14 = 0x100000001;
    v15 = -1;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    *(_QWORD *)v7 = a2;
    v7[8] = 0;
    v6 = (char *)operator new(0x40uLL);
    *a2 = v6;
    a2[1] = v6;
    a2[2] = v6 + 64;
    v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), (__int128 *)&v12, &v19, (uint64_t)v6);
  }
  a2[1] = v4;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19167FE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = v21;
  *(_QWORD *)(v20 + 8) = v22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_batchnorm_kernel::input_blob_type(Espresso::generic_batchnorm_kernel *this, unint64_t a2)
{
  if (a2 >= 2 && !*((_DWORD *)this + 77))
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("inference mode batchnorm has at most 2 inputs");
  if (a2 == 1)
    return 1;
  else
    return 2 * (a2 == 2);
}

float Espresso::generic_batchnorm_kernel::estimated_compute_resources(uint64_t a1, __int128 **a2, int a3)
{
  int v5;

  Espresso::base_kernel::estimated_compute_resources(a1, a2, a3);
  if (*(_DWORD *)(a1 + 308))
    v5 = 7;
  else
    v5 = 4;
  return (double)*(int *)*a2
       * (double)*((int *)*a2 + 1)
       * (double)*((int *)*a2 + 2)
       * (double)*((int *)*a2 + 3)
       * (double)v5
       * 0.000000001;
}

void Espresso::generic_batchnorm_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, _QWORD *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  vImagePixelCount v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  std::string v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72[2];
  uint64_t v73;
  std::__shared_weak_count *v74;
  void *data;
  vImagePixelCount height;
  uint64_t v77[2];
  uint64_t v78;
  uint64_t v79;
  vImage_Buffer dest;
  vImage_Buffer src;

  v78 = 0;
  v79 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v78, *a6, a6[1]);
  if (*((char *)a3 + 23) < 0)
  {
    v11 = a3[1];
    if (v11 != 16)
    {
      if (v11 != 20)
        goto LABEL_97;
      v10 = (_QWORD *)*a3;
      goto LABEL_11;
    }
    if (*(_QWORD *)*a3 != 0x726F6E6863746162 || *(_QWORD *)(*a3 + 8) != 0x736D617261705F6DLL)
      goto LABEL_97;
  }
  else
  {
    if (*((_BYTE *)a3 + 23) != 16)
    {
      v10 = a3;
      if (*((_BYTE *)a3 + 23) != 20)
        goto LABEL_97;
LABEL_11:
      v12 = *v10;
      v13 = v10[1];
      v14 = *((_DWORD *)v10 + 4);
      if (v12 == 0x726F6E6863746162 && v13 == 0x736D617261705F6DLL && v14 == 909207135)
      {
        v17 = (std::__shared_weak_count *)v79;
        v72[0] = v78;
        v72[1] = v79;
        if (v79)
        {
          v18 = (unint64_t *)(v79 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v73, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v72, 4 * *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v22 = *(std::__shared_weak_count **)(a1 + 16);
        v70 = *(_QWORD *)(a1 + 8);
        v71 = v22;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        if (*((char *)a3 + 23) < 0)
          std::string::__init_copy_ctor_external(&v69, (const std::string::value_type *)*a3, a3[1]);
        else
          v69 = *(std::string *)a3;
        v67 = v73;
        v68 = v74;
        if (v74)
        {
          v40 = (unint64_t *)&v74->__shared_owners_;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        Espresso::base_kernel::set_parameter_blob<unsigned short,1>(a1, &v70, (__int128 *)&v69, &v67);
        v42 = v68;
        if (v68)
        {
          v43 = (unint64_t *)&v68->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        v45 = v71;
        if (v71)
        {
          v46 = (unint64_t *)&v71->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v65, (int *)(v73 + 8));
        v48 = v65;
        v49 = *(void **)(v65 + 16);
        v50 = *(int *)(v73 + 8);
        src.data = *(void **)(v73 + 16);
        src.height = 1;
        src.width = v50;
        src.rowBytes = 2 * v50;
        dest.data = v49;
        dest.height = 1;
        dest.width = v50;
        dest.rowBytes = 4 * v50;
        vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        v63 = v48;
        v64 = v66;
        if (v66)
        {
          v51 = (unint64_t *)&v66->__shared_owners_;
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 392))(a1, &v63);
        v53 = v64;
        if (v64)
        {
          v54 = (unint64_t *)&v64->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v56 = v66;
        if (v66)
        {
          v57 = (unint64_t *)&v66->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v37 = v74;
        if (v74)
        {
          v59 = (unint64_t *)&v74->__shared_owners_;
          do
            v39 = __ldaxr(v59);
          while (__stlxr(v39 - 1, v59));
          goto LABEL_95;
        }
      }
      goto LABEL_97;
    }
    if (*a3 != 0x726F6E6863746162 || a3[1] != 0x736D617261705F6DLL)
      goto LABEL_97;
  }
  v27 = (std::__shared_weak_count *)v79;
  v77[0] = v78;
  v77[1] = v79;
  if (v79)
  {
    v28 = (unint64_t *)(v79 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&src, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v77, 4 * *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
  if (v27)
  {
    v30 = (unint64_t *)&v27->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  data = src.data;
  height = src.height;
  if (src.height)
  {
    v32 = (unint64_t *)(src.height + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 392))(a1, &data);
  v34 = (std::__shared_weak_count *)height;
  if (height)
  {
    v35 = (unint64_t *)(height + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)src.height;
  if (src.height)
  {
    v38 = (unint64_t *)(src.height + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
LABEL_95:
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_97:
  v60 = (std::__shared_weak_count *)v79;
  if (v79)
  {
    v61 = (unint64_t *)(v79 + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
}

void sub_191680468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 128);
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_batchnorm_kernel::supports_weight_key(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t v3;

  if (*((char *)a2 + 23) < 0)
  {
    v3 = a2[1];
    if (v3 != 16)
    {
      if (v3 != 20)
        return 0;
      a2 = (_QWORD *)*a2;
      return *a2 == 0x726F6E6863746162 && a2[1] == 0x736D617261705F6DLL && *((_DWORD *)a2 + 4) == 909207135;
    }
    return *(_QWORD *)*a2 == 0x726F6E6863746162 && *(_QWORD *)(*a2 + 8) == 0x736D617261705F6DLL;
  }
  else
  {
    v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 16)
    {
      if (v2 != 20)
        return 0;
      return *a2 == 0x726F6E6863746162 && a2[1] == 0x736D617261705F6DLL && *((_DWORD *)a2 + 4) == 909207135;
    }
    return *a2 == 0x726F6E6863746162 && a2[1] == 0x736D617261705F6DLL;
  }
}

void Espresso::generic_batchnorm_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  std::string::size_type *v6;
  std::string::size_type v7;
  std::string::size_type v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t i;
  uint64_t j;
  void *v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t k;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::string *v40;
  std::string *v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  std::string *v45;
  void *__p[2];
  char v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::string v50;
  std::string v51;
  std::string **v52;
  char v53;
  std::string v54;
  std::string v55;
  std::string v56;
  uint64_t v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  __int128 v65;

  *(_QWORD *)&v65 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 304;
  v6 = *(std::string::size_type **)(a3 + 16);
  v7 = *v6;
  v8 = v6[1] - *v6;
  if (*(_DWORD *)(a1 + 308))
  {
    if (v8 != 72)
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("in order to take gradient of a training mode batchnorm layer, 3 inputs (x, gamma, beta) are needed");
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v7)|| std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v7 + 24)|| std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v7 + 48))
    {
      v9 = **(__int128 ***)(a3 + 8);
      Espresso::blob_grad_contrib_name((uint64_t)&v51, v7, a3);
      Espresso::blob_grad_contrib_name((uint64_t)&v64, v7 + 24, a3);
      Espresso::blob_grad_contrib_name((uint64_t)&v50, v7 + 48, a3);
      v10 = **(_QWORD **)(a3 + 24);
      std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm_grad");
      v11 = *(_QWORD *)a3;
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v12 = *v9;
        v58.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v12;
      }
      if (*(char *)(v10 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)(v10 + 24), *(_QWORD *)(v10 + 32));
      }
      else
      {
        v16 = *(_OWORD *)(v10 + 24);
        v59.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 40);
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v16;
      }
      if (*(char *)(v10 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(v10 + 48), *(_QWORD *)(v10 + 56));
      }
      else
      {
        v17 = *(_OWORD *)(v10 + 48);
        v60.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 64);
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v17;
      }
      if (*(char *)(v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
      }
      else
      {
        v18 = *(_OWORD *)v7;
        v61.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v18;
      }
      if (*(char *)(v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)(v7 + 24), *(_QWORD *)(v7 + 32));
      }
      else
      {
        v19 = *(_OWORD *)(v7 + 24);
        v62.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 40);
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v19;
      }
      if (*(char *)(v7 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)(v7 + 48), *(_QWORD *)(v7 + 56));
      }
      else
      {
        v20 = *(_OWORD *)(v7 + 48);
        v63.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 64);
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v20;
      }
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
      v54.__r_.__value_.__s.__data_[8] = 0;
      v43 = (std::string *)operator new(0x90uLL);
      v44 = v43;
      v45 = v43 + 6;
      v44 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v45, (__int128 *)&v58, (__int128 *)&v64, v43);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v54, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
      else
        v54 = v51;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v55, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
      else
        v55 = v64;
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v56, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
      else
        v56 = v50;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v52 = &v40;
      v53 = 0;
      v40 = (std::string *)operator new(0x48uLL);
      v41 = v40;
      v42 = v40 + 3;
      v41 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v42, (__int128 *)&v54, (__int128 *)&v57, v40);
      Espresso::sequential_builder::add<Espresso::batchnorm_params>(&v48, a2, (uint64_t)__p, v11, v5, (uint64_t)v43, (uint64_t)v44, (uint64_t *)&v40);
      v21 = v49;
      if (v49)
      {
        p_shared_owners = (unint64_t *)&v49->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v52 = &v40;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
      for (i = 0; i != -9; i -= 3)
      {
        if (SHIBYTE(v56.__r_.__value_.__r.__words[i + 2]) < 0)
          operator delete(*(void **)((char *)&v56.__r_.__value_.__l.__data_ + i * 8));
      }
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
      for (j = 0; j != -18; j -= 3)
      {
        if (SHIBYTE(v63.__r_.__value_.__r.__words[j + 2]) < 0)
          operator delete(*(void **)((char *)&v63.__r_.__value_.__l.__data_ + j * 8));
      }
      if (v47 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      {
        v26 = (void *)v51.__r_.__value_.__r.__words[0];
LABEL_81:
        operator delete(v26);
      }
    }
  }
  else
  {
    if (v8 != 48)
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("in order to take gradient of a inference mode batchnorm layer, 2 inputs (x, batchnorm_corf) are needed");
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v7 + 24))
    {
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("It's invalid to take gradient wrt batchnorm coefficient of inference mode batchnorm");
    }
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v7))
    {
      v13 = **(__int128 ***)(a3 + 8);
      Espresso::blob_grad_contrib_name((uint64_t)&v54, v7, a3);
      std::string::basic_string[abi:ne180100]<0>(&v51, "batchnorm_grad");
      v14 = *(_QWORD *)a3;
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
      }
      else
      {
        v15 = *v13;
        v58.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v15;
      }
      if (*(char *)(v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)(v7 + 24), *(_QWORD *)(v7 + 32));
      }
      else
      {
        v27 = *(_OWORD *)(v7 + 24);
        v59.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 40);
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v27;
      }
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
      v64.__r_.__value_.__s.__data_[8] = 0;
      v35 = (std::string *)operator new(0x30uLL);
      v36 = v35;
      v37 = v35 + 2;
      v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v37, (__int128 *)&v58, (__int128 *)&v60, v35);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v64, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
      else
        v64 = v54;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
      v50.__r_.__value_.__s.__data_[8] = 0;
      v32 = (std::string *)operator new(0x18uLL);
      v33 = v32;
      v34 = v32 + 1;
      v33 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v34, (__int128 *)&v64, &v65, v32);
      Espresso::sequential_builder::add<Espresso::batchnorm_params>(&v38, a2, (uint64_t)&v51, v14, v5, (uint64_t)v35, (uint64_t)v36, (uint64_t *)&v32);
      v28 = v39;
      if (v39)
      {
        v29 = (unint64_t *)&v39->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
      for (k = 0; k != -6; k -= 3)
      {
        if (SHIBYTE(v59.__r_.__value_.__r.__words[k + 2]) < 0)
          operator delete(*(void **)((char *)&v58 + k * 8 + 24));
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      {
        v26 = (void *)v54.__r_.__value_.__r.__words[0];
        goto LABEL_81;
      }
    }
  }
}

uint64_t Espresso::generic_batchnorm_kernel::get_batchnorm_params_shape@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 4 * *(_DWORD *)(this + 304);
  *(_QWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 20) = 1;
  return this;
}

uint64_t Espresso::generic_batchnorm_grad_kernel::input_blob_type(Espresso::generic_batchnorm_grad_kernel *this, uint64_t a2)
{
  unsigned int v2;

  v2 = 2 * (a2 == 5);
  if (a2 == 4)
    v2 = 1;
  if (*((_DWORD *)this + 77))
    return v2;
  else
    return a2 == 1;
}

void Espresso::generic_batchnorm_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  char *v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p;
  void *v25;
  uint64_t v26;
  __int128 v27[2];
  uint64_t v28;
  _QWORD v29[3];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  __int128 v35;

  *((_QWORD *)&v35 + 1) = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 308) && !*(_DWORD *)(a1 + 312))
  {
    v9 = *a2;
    v10 = *((_QWORD *)*a2 + 4);
    v11 = (*a2)[1];
    v21 = **a2;
    v22 = v11;
    v23 = v10;
    __p = 0;
    v25 = 0;
    v26 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v9 + 5), *((_QWORD *)v9 + 6), (uint64_t)(*((_QWORD *)v9 + 6) - *((_QWORD *)v9 + 5)) >> 2);
    v12 = *a2;
    v13 = *((_QWORD *)*a2 + 12);
    v14 = (*a2)[5];
    v27[0] = (*a2)[4];
    v27[1] = v14;
    v28 = v13;
    memset(v29, 0, sizeof(v29));
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v29, *((const void **)v12 + 13), *((_QWORD *)v12 + 14), (uint64_t)(*((_QWORD *)v12 + 14) - *((_QWORD *)v12 + 13)) >> 2);
    v15 = *a2;
    v16 = *((_QWORD *)*a2 + 12);
    v17 = (*a2)[5];
    v30 = (*a2)[4];
    v31 = v17;
    v34[0] = 0;
    v34[1] = 0;
    v32 = v16;
    v33 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v33, *((const void **)v15 + 13), *((_QWORD *)v15 + 14), (uint64_t)(*((_QWORD *)v15 + 14) - *((_QWORD *)v15 + 13)) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v18 = (char *)operator new(0xC0uLL);
    *a3 = v18;
    a3[1] = v18;
    a3[2] = v18 + 192;
    v19 = 0;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v21, &v35, (uint64_t)v18);
    do
    {
      v20 = (void *)v34[v19 - 1];
      if (v20)
      {
        v34[v19] = v20;
        operator delete(v20);
      }
      v19 -= 8;
    }
    while (v19 != -24);
  }
  else
  {
    v5 = *a2;
    v6 = *((_QWORD *)*a2 + 4);
    v7 = (*a2)[1];
    v21 = **a2;
    v22 = v7;
    v23 = v6;
    __p = 0;
    v25 = 0;
    v26 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v8 = (char *)operator new(0x40uLL);
    *a3 = v8;
    a3[1] = v8;
    a3[2] = v8 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v21, v27, (uint64_t)v8);
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
  }
}

void sub_191681130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  void *v38;

  v35 = v34;
  *(_QWORD *)(v33 + 8) = v35;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  v37 = 0;
  while (1)
  {
    v38 = *(void **)((char *)&a32 + v37);
    if (v38)
    {
      *(uint64_t *)((char *)&a33 + v37) = (uint64_t)v38;
      operator delete(v38);
    }
    v37 -= 64;
    if (v37 == -192)
      _Unwind_Resume(a1);
  }
}

void Espresso::generic_l2_normalize_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  __int128 *v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  size_t v17;
  std::string *v18;
  char *v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::string **v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t ii;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  size_t v44;
  std::string *v45;
  char *v46;
  std::string *p_s;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  size_t v55;
  std::string *v56;
  std::string *v57;
  char *v58;
  size_t v59;
  std::string *v60;
  char *v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  size_t v73;
  std::string *v74;
  const std::string::value_type *v75;
  char *v76;
  size_t v77;
  std::string *v78;
  char *v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  size_t v87;
  std::string *v88;
  const std::string::value_type *v89;
  char *v90;
  size_t v91;
  std::string *v92;
  char *v93;
  std::string *v94;
  std::string::size_type v95;
  std::string *v96;
  __int128 v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  size_t v101;
  std::string *v102;
  const std::string::value_type *v103;
  char *v104;
  size_t v105;
  std::string *v106;
  char *v107;
  std::string *v108;
  std::string::size_type v109;
  std::string *v110;
  __int128 v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  size_t v115;
  std::string *v116;
  const std::string::value_type *v117;
  char *v118;
  size_t v119;
  std::string *v120;
  char *v121;
  std::string *v122;
  std::string::size_type v123;
  std::string *v124;
  __int128 v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t i;
  size_t v131;
  std::string *v132;
  std::string *v133;
  char *v134;
  size_t v135;
  std::string *v136;
  char *v137;
  std::string *v138;
  std::string::size_type v139;
  std::string *v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  size_t v145;
  std::string *v146;
  std::string *v147;
  char *v148;
  size_t v149;
  std::string *v150;
  char *v151;
  std::string *v152;
  std::string::size_type v153;
  std::string *v154;
  __int128 v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t j;
  size_t v160;
  std::string *v161;
  std::string *p_sz;
  char *v163;
  size_t v164;
  std::string *v165;
  char *v166;
  std::string *v167;
  std::string::size_type v168;
  std::string *v169;
  __int128 v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t k;
  size_t v175;
  std::string *v176;
  std::string *v177;
  char *v178;
  size_t v179;
  std::string *v180;
  char *v181;
  std::string *v182;
  std::string::size_type v183;
  std::string *v184;
  __int128 v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t m;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t n;
  std::string *v195;
  std::string *v196;
  std::string *v197;
  std::string *v198;
  std::string *v199;
  std::string *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  std::string *v203;
  std::string *v204;
  std::string *v205;
  std::string *v206;
  std::string *v207;
  std::string *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  std::string *v211;
  std::string *v212;
  std::string *v213;
  std::string *v214;
  std::string *v215;
  std::string *v216;
  std::string v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  std::string *v220;
  std::string *v221;
  std::string *v222;
  std::string *v223;
  std::string *v224;
  std::string *v225;
  std::string v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  std::string *v229;
  std::string *v230;
  std::string *v231;
  std::string *v232;
  std::string *v233;
  std::string *v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  std::string *v237;
  std::string *v238;
  std::string *v239;
  std::string *v240;
  std::string *v241;
  std::string *v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  std::string *v245;
  std::string *v246;
  std::string *v247;
  std::string *v248;
  std::string *v249;
  std::string *v250;
  std::string v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  std::string *v254;
  std::string *v255;
  std::string *v256;
  std::string *v257;
  std::string *v258;
  std::string *v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  std::string v262;
  std::string *v263;
  std::string *v264;
  std::string *v265;
  std::string *v266;
  std::string *v267;
  std::string *v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  std::string v271;
  std::string *v272;
  std::string *v273;
  std::string *v274;
  std::string *v275;
  std::string *v276;
  std::string *v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  std::string v280;
  uint64_t v281;
  int v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  char v287;
  std::string *v288;
  std::string *v289;
  std::string *v290;
  std::string *v291;
  std::string *v292;
  std::string *v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  std::string v296;
  std::string *v297;
  std::string *v298;
  std::string *v299;
  std::string *v300;
  std::string *v301;
  std::string *v302;
  uint64_t v303;
  std::__shared_weak_count *v304;
  std::string __s;
  std::string *v306;
  std::string *v307;
  std::string *v308;
  std::string *v309;
  std::string *v310;
  std::string *v311;
  uint64_t v312;
  std::__shared_weak_count *v313;
  uint64_t v314;
  int v315;
  std::string v316;
  void *__p[2];
  char v318;
  std::string *v319;
  std::string *v320;
  std::string *v321;
  std::string *v322;
  std::string *v323;
  std::string *v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  std::string *v327;
  std::string *v328;
  std::string *v329;
  std::string *v330;
  std::string *v331;
  std::string *v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  std::string __sz;
  void *v336[2];
  char v337;
  std::string **v338;
  char v339;
  std::string v340;
  _BYTE v341[40];
  _QWORD v342[2];
  uint64_t v343;
  std::string v344;
  uint64_t v345;
  std::string v346;
  std::string v347;
  std::string v348;
  _BYTE v349[28];
  std::string v350;
  uint64_t v351;
  std::string v352;
  _BYTE v353[28];
  std::string v354;
  uint64_t v355;
  std::string v356;
  uint64_t v357;
  std::string v358;
  uint64_t v359;
  std::string v360;
  _BYTE v361[4];
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  std::string v365;
  uint64_t v366;
  std::string v367;
  _BYTE v368[4];
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  std::string v372;
  _BYTE v373[4];
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;

  v377 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v336, "l2 normalize");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((a3[2][1] - *a3[2]) >> 3), 1uLL, (uint64_t)v336, 1);
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((a3[3][1] - *a3[3]) >> 3), 1uLL, (uint64_t)v336, 0);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3[5], *a3[2]))
  {
    v6 = (__int128 *)*a3[1];
    v7 = *a3[2];
    Espresso::blob_grad_contrib_name((uint64_t)&__sz, v7, (uint64_t)a3);
    v8 = *(unsigned int *)(a1 + 284);
    v9 = a1 + 280;
    switch((int)v8)
    {
      case 0:
        std::string::basic_string[abi:ne180100]<0>(&v340, "copy");
        v10 = (uint64_t)*a3;
        LODWORD(v352.__r_.__value_.__l.__data_) = 0;
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v372, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v11 = *v6;
          v372.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)&v372.__r_.__value_.__l.__data_ = v11;
        }
        v331 = 0;
        v330 = 0;
        v332 = 0;
        v367.__r_.__value_.__r.__words[0] = (std::string::size_type)&v330;
        v367.__r_.__value_.__s.__data_[8] = 0;
        v330 = (std::string *)operator new(0x18uLL);
        v331 = v330;
        v332 = v330 + 1;
        v331 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v332, (__int128 *)&v372, (__int128 *)v373, v330);
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v367, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        else
          v367 = __sz;
        v328 = 0;
        v327 = 0;
        v329 = 0;
        v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327;
        v360.__r_.__value_.__s.__data_[8] = 0;
        v327 = (std::string *)operator new(0x18uLL);
        v328 = v327;
        v329 = v327 + 1;
        v328 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v329, (__int128 *)&v367, (__int128 *)v368, v327);
        Espresso::sequential_builder::add<Espresso::copy_params_t>(&v333, a2, (uint64_t)&v340, v10, (uint64_t)&v352, (uint64_t)v330, (uint64_t)v331, (uint64_t *)&v327);
        v32 = v334;
        if (v334)
        {
          p_shared_owners = (unint64_t *)&v334->__shared_owners_;
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
        if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v367.__r_.__value_.__l.__data_);
        v31 = &v330;
        goto LABEL_60;
      case 1:
        std::string::basic_string[abi:ne180100]<0>(__p, "_submean");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)*a3[1], (const void **)__p, (uint64_t)&v316);
        v314 = 0x2358637BDLL;
        v315 = *(_DWORD *)(a1 + 288);
        std::string::basic_string[abi:ne180100]<0>(&v340, "l2_normalize");
        v16 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0)
          v17 = *((unsigned __int8 *)*a3 + 23);
        else
          v17 = (*a3)[1];
        v18 = &v367;
        std::string::basic_string[abi:ne180100]((uint64_t)&v367, v17 + 1);
        if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v18 = (std::string *)v367.__r_.__value_.__r.__words[0];
        if (v17)
        {
          if (v16[23] >= 0)
            v19 = v16;
          else
            v19 = *(char **)v16;
          memmove(v18, v19, v17);
        }
        *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 58;
        if ((v316.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = &v316;
        else
          v20 = (std::string *)v316.__r_.__value_.__r.__words[0];
        if ((v316.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v316.__r_.__value_.__r.__words[2]);
        else
          size = v316.__r_.__value_.__l.__size_;
        v22 = std::string::append(&v367, (const std::string::value_type *)v20, size);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v372.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v372.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v360, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v24 = *v6;
          v360.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)&v360.__r_.__value_.__l.__data_ = v24;
        }
        v310 = 0;
        v309 = 0;
        v311 = 0;
        v352.__r_.__value_.__r.__words[0] = (std::string::size_type)&v309;
        v352.__r_.__value_.__s.__data_[8] = 0;
        v309 = (std::string *)operator new(0x18uLL);
        v310 = v309;
        v311 = v309 + 1;
        v310 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v311, (__int128 *)&v360, (__int128 *)v361, v309);
        if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v352, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
        else
          v352 = v316;
        v307 = 0;
        v306 = 0;
        v308 = 0;
        v348.__r_.__value_.__r.__words[0] = (std::string::size_type)&v306;
        v348.__r_.__value_.__s.__data_[8] = 0;
        v306 = (std::string *)operator new(0x18uLL);
        v307 = v306;
        v308 = v306 + 1;
        v307 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v308, (__int128 *)&v352, (__int128 *)v353, v306);
        Espresso::sequential_builder::add<Espresso::l2_norm_params>(&v312, a2, (uint64_t)&v340, (uint64_t)&v372, (uint64_t)&v314, (uint64_t)v309, (uint64_t)v310, (uint64_t *)&v306);
        v40 = v313;
        if (v313)
        {
          v41 = (unint64_t *)&v313->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        v348.__r_.__value_.__r.__words[0] = (std::string::size_type)&v306;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v348);
        if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v352.__r_.__value_.__l.__data_);
        v352.__r_.__value_.__r.__words[0] = (std::string::size_type)&v309;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v352);
        if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v360.__r_.__value_.__l.__data_);
        if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v372.__r_.__value_.__l.__data_);
        if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v367.__r_.__value_.__l.__data_);
        if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v340.__r_.__value_.__l.__data_);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v7, (const void **)__p, (uint64_t)&__s);
        std::string::basic_string[abi:ne180100]<0>(&v340, "l2_normalize");
        v43 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0)
          v44 = *((unsigned __int8 *)*a3 + 23);
        else
          v44 = (*a3)[1];
        v45 = &v367;
        std::string::basic_string[abi:ne180100]((uint64_t)&v367, v44 + 1);
        if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v45 = (std::string *)v367.__r_.__value_.__r.__words[0];
        if (v44)
        {
          if (v43[23] >= 0)
            v46 = v43;
          else
            v46 = *(char **)v43;
          memmove(v45, v46, v44);
        }
        *(_WORD *)((char *)&v45->__r_.__value_.__l.__data_ + v44) = 58;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_s = &__s;
        else
          p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v48 = __s.__r_.__value_.__l.__size_;
        v49 = std::string::append(&v367, (const std::string::value_type *)p_s, v48);
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v372.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v372.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v360, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
        }
        else
        {
          v51 = *(_OWORD *)v7;
          v360.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
          *(_OWORD *)&v360.__r_.__value_.__l.__data_ = v51;
        }
        v301 = 0;
        v300 = 0;
        v302 = 0;
        v352.__r_.__value_.__r.__words[0] = (std::string::size_type)&v300;
        v352.__r_.__value_.__s.__data_[8] = 0;
        v300 = (std::string *)operator new(0x18uLL);
        v301 = v300;
        v302 = v300 + 1;
        v301 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v302, (__int128 *)&v360, (__int128 *)v361, v300);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v352, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v352 = __s;
        v298 = 0;
        v297 = 0;
        v299 = 0;
        v348.__r_.__value_.__r.__words[0] = (std::string::size_type)&v297;
        v348.__r_.__value_.__s.__data_[8] = 0;
        v297 = (std::string *)operator new(0x18uLL);
        v298 = v297;
        v299 = v297 + 1;
        v298 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v299, (__int128 *)&v352, (__int128 *)v353, v297);
        Espresso::sequential_builder::add<Espresso::l2_norm_params>(&v303, a2, (uint64_t)&v340, (uint64_t)&v372, (uint64_t)&v314, (uint64_t)v300, (uint64_t)v301, (uint64_t *)&v297);
        v52 = v304;
        if (v304)
        {
          v53 = (unint64_t *)&v304->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v348.__r_.__value_.__r.__words[0] = (std::string::size_type)&v297;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v348);
        if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v352.__r_.__value_.__l.__data_);
        v352.__r_.__value_.__r.__words[0] = (std::string::size_type)&v300;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v352);
        if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v360.__r_.__value_.__l.__data_);
        if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v372.__r_.__value_.__l.__data_);
        if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v367.__r_.__value_.__l.__data_);
        if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v340.__r_.__value_.__l.__data_);
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v55 = __s.__r_.__value_.__l.__size_;
        v56 = &v296;
        std::string::basic_string[abi:ne180100]((uint64_t)&v296, v55 + 7);
        if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v56 = (std::string *)v296.__r_.__value_.__r.__words[0];
        if (v55)
        {
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v57 = &__s;
          else
            v57 = (std::string *)__s.__r_.__value_.__r.__words[0];
          memmove(v56, v57, v55);
        }
        strcpy((char *)v56 + v55, "_square");
        v340.__r_.__value_.__r.__words[0] = 13;
        v340.__r_.__value_.__l.__size_ = 0x40000000;
        v340.__r_.__value_.__r.__words[2] = 897988541;
        v341[0] = 0;
        memset(&v341[4], 0, 24);
        std::string::basic_string[abi:ne180100]<0>(&v372, "elementwise");
        v58 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0)
          v59 = *((unsigned __int8 *)*a3 + 23);
        else
          v59 = (*a3)[1];
        v60 = &v360;
        std::string::basic_string[abi:ne180100]((uint64_t)&v360, v59 + 1);
        if ((v360.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v60 = (std::string *)v360.__r_.__value_.__r.__words[0];
        if (v59)
        {
          if (v58[23] >= 0)
            v61 = v58;
          else
            v61 = *(char **)v58;
          memmove(v60, v61, v59);
        }
        *(_WORD *)((char *)&v60->__r_.__value_.__l.__data_ + v59) = 58;
        if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = &v296;
        else
          v62 = (std::string *)v296.__r_.__value_.__r.__words[0];
        if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = HIBYTE(v296.__r_.__value_.__r.__words[2]);
        else
          v63 = v296.__r_.__value_.__l.__size_;
        v64 = std::string::append(&v360, (const std::string::value_type *)v62, v63);
        v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v367.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v352, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v352 = __s;
        v292 = 0;
        v291 = 0;
        v293 = 0;
        v348.__r_.__value_.__r.__words[0] = (std::string::size_type)&v291;
        v348.__r_.__value_.__s.__data_[8] = 0;
        v291 = (std::string *)operator new(0x18uLL);
        v292 = v291;
        v293 = v291 + 1;
        v292 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v293, (__int128 *)&v352, (__int128 *)v353, v291);
        if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v348, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
        else
          v348 = v296;
        v289 = 0;
        v288 = 0;
        v290 = 0;
        v346.__r_.__value_.__r.__words[0] = (std::string::size_type)&v288;
        v346.__r_.__value_.__s.__data_[8] = 0;
        v288 = (std::string *)operator new(0x18uLL);
        v289 = v288;
        v290 = v288 + 1;
        v289 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v290, (__int128 *)&v348, (__int128 *)v349, v288);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v294, a2, (uint64_t)&v372, (uint64_t)&v367, (uint64_t)&v340, (uint64_t)v291, (uint64_t)v292, (uint64_t *)&v288);
        v66 = v295;
        if (v295)
        {
          v67 = (unint64_t *)&v295->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v346.__r_.__value_.__r.__words[0] = (std::string::size_type)&v288;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v346);
        if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v348.__r_.__value_.__l.__data_);
        v348.__r_.__value_.__r.__words[0] = (std::string::size_type)&v291;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v348);
        if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v352.__r_.__value_.__l.__data_);
        if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v367.__r_.__value_.__l.__data_);
        if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v360.__r_.__value_.__l.__data_);
        if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v372.__r_.__value_.__l.__data_);
        v69 = *(_DWORD *)(a1 + 288);
        if (v69 <= 2)
        {
          v70 = 0;
          if ((v69 & 0x80000000) == 0)
          {
            v71 = v69 + 1;
            v72 = 1;
            do
            {
              v70 += v72;
              v72 *= 2;
              --v71;
            }
            while (v71);
          }
        }
        else
        {
          v70 = 31;
        }
        v281 = 0x358637BD00000001;
        v282 = v70;
        v283 = 1;
        v285 = 0;
        v284 = 0;
        v286 = 0xFFFFFFFF00000000;
        v287 = 0;
        if (*(char *)(v7 + 23) >= 0)
          v73 = *(unsigned __int8 *)(v7 + 23);
        else
          v73 = *(_QWORD *)(v7 + 8);
        v74 = &v280;
        std::string::basic_string[abi:ne180100]((uint64_t)&v280, v73 + 5);
        if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v74 = (std::string *)v280.__r_.__value_.__r.__words[0];
        if (v73)
        {
          if (*(char *)(v7 + 23) >= 0)
            v75 = (const std::string::value_type *)v7;
          else
            v75 = *(const std::string::value_type **)v7;
          memmove(v74, v75, v73);
        }
        strcpy((char *)v74 + v73, "_var_");
        std::string::basic_string[abi:ne180100]<0>(&v372, "reduce");
        v76 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0)
          v77 = *((unsigned __int8 *)*a3 + 23);
        else
          v77 = (*a3)[1];
        v78 = &v360;
        std::string::basic_string[abi:ne180100]((uint64_t)&v360, v77 + 1);
        if ((v360.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v78 = (std::string *)v360.__r_.__value_.__r.__words[0];
        if (v77)
        {
          if (v76[23] >= 0)
            v79 = v76;
          else
            v79 = *(char **)v76;
          memmove(v78, v79, v77);
        }
        *(_WORD *)((char *)&v78->__r_.__value_.__l.__data_ + v77) = 58;
        if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v80 = &v280;
        else
          v80 = (std::string *)v280.__r_.__value_.__r.__words[0];
        if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = HIBYTE(v280.__r_.__value_.__r.__words[2]);
        else
          v81 = v280.__r_.__value_.__l.__size_;
        v82 = std::string::append(&v360, (const std::string::value_type *)v80, v81);
        v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
        v367.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v83;
        v82->__r_.__value_.__l.__size_ = 0;
        v82->__r_.__value_.__r.__words[2] = 0;
        v82->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v352, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
        else
          v352 = v296;
        v276 = 0;
        v275 = 0;
        v277 = 0;
        v348.__r_.__value_.__r.__words[0] = (std::string::size_type)&v275;
        v348.__r_.__value_.__s.__data_[8] = 0;
        v275 = (std::string *)operator new(0x18uLL);
        v276 = v275;
        v277 = v275 + 1;
        v276 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v277, (__int128 *)&v352, (__int128 *)v353, v275);
        if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v348, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
        else
          v348 = v280;
        v273 = 0;
        v272 = 0;
        v274 = 0;
        v346.__r_.__value_.__r.__words[0] = (std::string::size_type)&v272;
        v346.__r_.__value_.__s.__data_[8] = 0;
        v272 = (std::string *)operator new(0x18uLL);
        v273 = v272;
        v274 = v272 + 1;
        v273 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v274, (__int128 *)&v348, (__int128 *)v349, v272);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v278, a2, (uint64_t)&v372, (uint64_t)&v367, (uint64_t)&v281, (uint64_t)v275, (uint64_t)v276, (uint64_t *)&v272);
        v84 = v279;
        if (v279)
        {
          v85 = (unint64_t *)&v279->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        v346.__r_.__value_.__r.__words[0] = (std::string::size_type)&v272;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v346);
        if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v348.__r_.__value_.__l.__data_);
        v348.__r_.__value_.__r.__words[0] = (std::string::size_type)&v275;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v348);
        if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v352.__r_.__value_.__l.__data_);
        if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v367.__r_.__value_.__l.__data_);
        if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v360.__r_.__value_.__l.__data_);
        if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v372.__r_.__value_.__l.__data_);
        if (*(char *)(v7 + 23) >= 0)
          v87 = *(unsigned __int8 *)(v7 + 23);
        else
          v87 = *(_QWORD *)(v7 + 8);
        v88 = &v271;
        std::string::basic_string[abi:ne180100]((uint64_t)&v271, v87 + 4);
        if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v88 = (std::string *)v271.__r_.__value_.__r.__words[0];
        if (v87)
        {
          if (*(char *)(v7 + 23) >= 0)
            v89 = (const std::string::value_type *)v7;
          else
            v89 = *(const std::string::value_type **)v7;
          memmove(v88, v89, v87);
        }
        strcpy((char *)v88 + v87, "_var");
        v372.__r_.__value_.__r.__words[0] = 0;
        v372.__r_.__value_.__l.__size_ = 869711765;
        v372.__r_.__value_.__r.__words[2] = 897988541;
        v373[0] = 0;
        v374 = 0;
        v376 = 0;
        v375 = 0;
        std::string::basic_string[abi:ne180100]<0>(&v367, "elementwise");
        v90 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0)
          v91 = *((unsigned __int8 *)*a3 + 23);
        else
          v91 = (*a3)[1];
        v92 = &v352;
        std::string::basic_string[abi:ne180100]((uint64_t)&v352, v91 + 1);
        if ((v352.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v92 = (std::string *)v352.__r_.__value_.__r.__words[0];
        if (v91)
        {
          if (v90[23] >= 0)
            v93 = v90;
          else
            v93 = *(char **)v90;
          memmove(v92, v93, v91);
        }
        *(_WORD *)((char *)&v92->__r_.__value_.__l.__data_ + v91) = 58;
        if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v94 = &v271;
        else
          v94 = (std::string *)v271.__r_.__value_.__r.__words[0];
        if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v95 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
        else
          v95 = v271.__r_.__value_.__l.__size_;
        v96 = std::string::append(&v352, (const std::string::value_type *)v94, v95);
        v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        v360.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v360.__r_.__value_.__l.__data_ = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v348, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
        else
          v348 = v280;
        v267 = 0;
        v266 = 0;
        v268 = 0;
        v346.__r_.__value_.__r.__words[0] = (std::string::size_type)&v266;
        v346.__r_.__value_.__s.__data_[8] = 0;
        v266 = (std::string *)operator new(0x18uLL);
        v267 = v266;
        v268 = v266 + 1;
        v267 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v268, (__int128 *)&v348, (__int128 *)v349, v266);
        if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v346, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
        else
          v346 = v271;
        v264 = 0;
        v263 = 0;
        v265 = 0;
        v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&v263;
        v262.__r_.__value_.__s.__data_[8] = 0;
        v263 = (std::string *)operator new(0x18uLL);
        v264 = v263;
        v265 = v263 + 1;
        v264 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v265, (__int128 *)&v346, (__int128 *)&v347, v263);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v269, a2, (uint64_t)&v367, (uint64_t)&v360, (uint64_t)&v372, (uint64_t)v266, (uint64_t)v267, (uint64_t *)&v263);
        v98 = v270;
        if (v270)
        {
          v99 = (unint64_t *)&v270->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&v263;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
        if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v346.__r_.__value_.__l.__data_);
        v346.__r_.__value_.__r.__words[0] = (std::string::size_type)&v266;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v346);
        if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v348.__r_.__value_.__l.__data_);
        if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v360.__r_.__value_.__l.__data_);
        if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v352.__r_.__value_.__l.__data_);
        if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v367.__r_.__value_.__l.__data_);
        if (*(char *)(v7 + 23) >= 0)
          v101 = *(unsigned __int8 *)(v7 + 23);
        else
          v101 = *(_QWORD *)(v7 + 8);
        v102 = &v262;
        std::string::basic_string[abi:ne180100]((uint64_t)&v262, v101 + 4);
        if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v102 = (std::string *)v262.__r_.__value_.__r.__words[0];
        if (v101)
        {
          if (*(char *)(v7 + 23) >= 0)
            v103 = (const std::string::value_type *)v7;
          else
            v103 = *(const std::string::value_type **)v7;
          memmove(v102, v103, v101);
        }
        strcpy((char *)v102 + v101, "_std");
        v367.__r_.__value_.__r.__words[0] = 11;
        v367.__r_.__value_.__l.__size_ = 1065353216;
        v367.__r_.__value_.__r.__words[2] = 897988541;
        v368[0] = 0;
        v369 = 0;
        v371 = 0;
        v370 = 0;
        std::string::basic_string[abi:ne180100]<0>(&v360, "elementwise");
        v104 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0)
          v105 = *((unsigned __int8 *)*a3 + 23);
        else
          v105 = (*a3)[1];
        v106 = &v348;
        std::string::basic_string[abi:ne180100]((uint64_t)&v348, v105 + 1);
        if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v106 = (std::string *)v348.__r_.__value_.__r.__words[0];
        if (v105)
        {
          if (v104[23] >= 0)
            v107 = v104;
          else
            v107 = *(char **)v104;
          memmove(v106, v107, v105);
        }
        *(_WORD *)((char *)&v106->__r_.__value_.__l.__data_ + v105) = 58;
        if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v108 = &v262;
        else
          v108 = (std::string *)v262.__r_.__value_.__r.__words[0];
        if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v109 = HIBYTE(v262.__r_.__value_.__r.__words[2]);
        else
          v109 = v262.__r_.__value_.__l.__size_;
        v110 = std::string::append(&v348, (const std::string::value_type *)v108, v109);
        v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
        v352.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v352.__r_.__value_.__l.__data_ = v111;
        v110->__r_.__value_.__l.__size_ = 0;
        v110->__r_.__value_.__r.__words[2] = 0;
        v110->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v346, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
        else
          v346 = v271;
        v258 = 0;
        v257 = 0;
        v259 = 0;
        v365.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
        v365.__r_.__value_.__s.__data_[8] = 0;
        v257 = (std::string *)operator new(0x18uLL);
        v258 = v257;
        v259 = v257 + 1;
        v258 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v259, (__int128 *)&v346, (__int128 *)&v347, v257);
        if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v365, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
        else
          v365 = v262;
        v255 = 0;
        v254 = 0;
        v256 = 0;
        v251.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
        v251.__r_.__value_.__s.__data_[8] = 0;
        v254 = (std::string *)operator new(0x18uLL);
        v255 = v254;
        v256 = v254 + 1;
        v255 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v256, (__int128 *)&v365, (__int128 *)&v366, v254);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v260, a2, (uint64_t)&v360, (uint64_t)&v352, (uint64_t)&v367, (uint64_t)v257, (uint64_t)v258, (uint64_t *)&v254);
        v112 = v261;
        if (v261)
        {
          v113 = (unint64_t *)&v261->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        v251.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
        if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v365.__r_.__value_.__l.__data_);
        v365.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v365);
        if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v346.__r_.__value_.__l.__data_);
        if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v352.__r_.__value_.__l.__data_);
        if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v348.__r_.__value_.__l.__data_);
        if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v360.__r_.__value_.__l.__data_);
        if (*((char *)v6 + 23) >= 0)
          v115 = *((unsigned __int8 *)v6 + 23);
        else
          v115 = *((_QWORD *)v6 + 1);
        v116 = &v365;
        std::string::basic_string[abi:ne180100]((uint64_t)&v365, v115 + 9);
        if ((v365.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v116 = (std::string *)v365.__r_.__value_.__r.__words[0];
        if (v115)
        {
          if (*((char *)v6 + 23) >= 0)
            v117 = (const std::string::value_type *)v6;
          else
            v117 = *(const std::string::value_type **)v6;
          memmove(v116, v117, v115);
        }
        strcpy((char *)v116 + v115, "_by_x_sub");
        v360.__r_.__value_.__r.__words[0] = 1;
        v360.__r_.__value_.__l.__size_ = 1065353216;
        v360.__r_.__value_.__r.__words[2] = 897988541;
        v361[0] = 1;
        v362 = 0;
        v364 = 0;
        v363 = 0;
        std::string::basic_string[abi:ne180100]<0>(&v348, "elementwise");
        v118 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0)
          v119 = *((unsigned __int8 *)*a3 + 23);
        else
          v119 = (*a3)[1];
        v120 = &v251;
        std::string::basic_string[abi:ne180100]((uint64_t)&v251, v119 + 1);
        if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v120 = (std::string *)v251.__r_.__value_.__r.__words[0];
        if (v119)
        {
          if (v118[23] >= 0)
            v121 = v118;
          else
            v121 = *(char **)v118;
          memmove(v120, v121, v119);
        }
        *(_WORD *)((char *)&v120->__r_.__value_.__l.__data_ + v119) = 58;
        if ((v365.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v122 = &v365;
        else
          v122 = (std::string *)v365.__r_.__value_.__r.__words[0];
        if ((v365.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v123 = HIBYTE(v365.__r_.__value_.__r.__words[2]);
        else
          v123 = v365.__r_.__value_.__l.__size_;
        v124 = std::string::append(&v251, (const std::string::value_type *)v122, v123);
        v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
        v346.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v346.__r_.__value_.__l.__data_ = v125;
        v124->__r_.__value_.__l.__size_ = 0;
        v124->__r_.__value_.__r.__words[2] = 0;
        v124->__r_.__value_.__r.__words[0] = 0;
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v352, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v126 = *v6;
          v352.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)&v352.__r_.__value_.__l.__data_ = v126;
        }
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)v353, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          *(std::string *)v353 = __s;
        v248 = 0;
        v249 = 0;
        v250 = 0;
        v358.__r_.__value_.__r.__words[0] = (std::string::size_type)&v248;
        v358.__r_.__value_.__s.__data_[8] = 0;
        v248 = (std::string *)operator new(0x30uLL);
        v249 = v248;
        v250 = v248 + 2;
        v249 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v250, (__int128 *)&v352, (__int128 *)&v353[24], v248);
        if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v358, v365.__r_.__value_.__l.__data_, v365.__r_.__value_.__l.__size_);
        else
          v358 = v365;
        v245 = 0;
        v246 = 0;
        v247 = 0;
        v356.__r_.__value_.__r.__words[0] = (std::string::size_type)&v245;
        v356.__r_.__value_.__s.__data_[8] = 0;
        v245 = (std::string *)operator new(0x18uLL);
        v246 = v245;
        v247 = v245 + 1;
        v246 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v247, (__int128 *)&v358, (__int128 *)&v359, v245);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v252, a2, (uint64_t)&v348, (uint64_t)&v346, (uint64_t)&v360, (uint64_t)v248, (uint64_t)v249, (uint64_t *)&v245);
        v127 = v253;
        if (v253)
        {
          v128 = (unint64_t *)&v253->__shared_owners_;
          do
            v129 = __ldaxr(v128);
          while (__stlxr(v129 - 1, v128));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
        }
        v356.__r_.__value_.__r.__words[0] = (std::string::size_type)&v245;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
        if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v358.__r_.__value_.__l.__data_);
        v358.__r_.__value_.__r.__words[0] = (std::string::size_type)&v248;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v358);
        for (i = 0; i != -48; i -= 24)
        {
          if ((char)v353[i + 23] < 0)
            operator delete(*(void **)((char *)&v352 + i + 24));
        }
        if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v346.__r_.__value_.__l.__data_);
        if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v251.__r_.__value_.__l.__data_);
        if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v348.__r_.__value_.__l.__data_);
        if ((v365.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v131 = HIBYTE(v365.__r_.__value_.__r.__words[2]);
        else
          v131 = v365.__r_.__value_.__l.__size_;
        v132 = &v251;
        std::string::basic_string[abi:ne180100]((uint64_t)&v251, v131 + 5);
        if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v132 = (std::string *)v251.__r_.__value_.__r.__words[0];
        if (v131)
        {
          if ((v365.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v133 = &v365;
          else
            v133 = (std::string *)v365.__r_.__value_.__r.__words[0];
          memmove(v132, v133, v131);
        }
        strcpy((char *)v132 + v131, "_mean");
        std::string::basic_string[abi:ne180100]<0>(&v352, "reduce");
        v134 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0)
          v135 = *((unsigned __int8 *)*a3 + 23);
        else
          v135 = (*a3)[1];
        v136 = &v346;
        std::string::basic_string[abi:ne180100]((uint64_t)&v346, v135 + 1);
        if ((v346.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v136 = (std::string *)v346.__r_.__value_.__r.__words[0];
        if (v135)
        {
          if (v134[23] >= 0)
            v137 = v134;
          else
            v137 = *(char **)v134;
          memmove(v136, v137, v135);
        }
        *(_WORD *)((char *)&v136->__r_.__value_.__l.__data_ + v135) = 58;
        if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v138 = &v251;
        else
          v138 = (std::string *)v251.__r_.__value_.__r.__words[0];
        if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v139 = HIBYTE(v251.__r_.__value_.__r.__words[2]);
        else
          v139 = v251.__r_.__value_.__l.__size_;
        v140 = std::string::append(&v346, (const std::string::value_type *)v138, v139);
        v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
        v348.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v348.__r_.__value_.__l.__data_ = v141;
        v140->__r_.__value_.__l.__size_ = 0;
        v140->__r_.__value_.__r.__words[2] = 0;
        v140->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v358, v365.__r_.__value_.__l.__data_, v365.__r_.__value_.__l.__size_);
        else
          v358 = v365;
        v240 = 0;
        v241 = 0;
        v242 = 0;
        v356.__r_.__value_.__r.__words[0] = (std::string::size_type)&v240;
        v356.__r_.__value_.__s.__data_[8] = 0;
        v240 = (std::string *)operator new(0x18uLL);
        v241 = v240;
        v242 = v240 + 1;
        v241 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v242, (__int128 *)&v358, (__int128 *)&v359, v240);
        if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v356, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
        else
          v356 = v251;
        v237 = 0;
        v238 = 0;
        v239 = 0;
        v354.__r_.__value_.__r.__words[0] = (std::string::size_type)&v237;
        v354.__r_.__value_.__s.__data_[8] = 0;
        v237 = (std::string *)operator new(0x18uLL);
        v238 = v237;
        v239 = v237 + 1;
        v238 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v239, (__int128 *)&v356, (__int128 *)&v357, v237);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v243, a2, (uint64_t)&v352, (uint64_t)&v348, (uint64_t)&v281, (uint64_t)v240, (uint64_t)v241, (uint64_t *)&v237);
        v142 = v244;
        if (v244)
        {
          v143 = (unint64_t *)&v244->__shared_owners_;
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        v354.__r_.__value_.__r.__words[0] = (std::string::size_type)&v237;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v354);
        if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v356.__r_.__value_.__l.__data_);
        v356.__r_.__value_.__r.__words[0] = (std::string::size_type)&v240;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
        if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v358.__r_.__value_.__l.__data_);
        if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v348.__r_.__value_.__l.__data_);
        if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v346.__r_.__value_.__l.__data_);
        if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v352.__r_.__value_.__l.__data_);
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v145 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v145 = __s.__r_.__value_.__l.__size_;
        v146 = &v358;
        std::string::basic_string[abi:ne180100]((uint64_t)&v358, v145 + 4);
        if ((v358.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v146 = (std::string *)v358.__r_.__value_.__r.__words[0];
        if (v145)
        {
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v147 = &__s;
          else
            v147 = (std::string *)__s.__r_.__value_.__r.__words[0];
          memmove(v146, v147, v145);
        }
        strcpy((char *)v146 + v145, "_mul");
        std::string::basic_string[abi:ne180100]<0>(&v348, "elementwise");
        v148 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0)
          v149 = *((unsigned __int8 *)*a3 + 23);
        else
          v149 = (*a3)[1];
        v150 = &v356;
        std::string::basic_string[abi:ne180100]((uint64_t)&v356, v149 + 1);
        if ((v356.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v150 = (std::string *)v356.__r_.__value_.__r.__words[0];
        if (v149)
        {
          if (v148[23] >= 0)
            v151 = v148;
          else
            v151 = *(char **)v148;
          memmove(v150, v151, v149);
        }
        *(_WORD *)((char *)&v150->__r_.__value_.__l.__data_ + v149) = 58;
        if ((v358.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v152 = &v358;
        else
          v152 = (std::string *)v358.__r_.__value_.__r.__words[0];
        if ((v358.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v153 = HIBYTE(v358.__r_.__value_.__r.__words[2]);
        else
          v153 = v358.__r_.__value_.__l.__size_;
        v154 = std::string::append(&v356, (const std::string::value_type *)v152, v153);
        v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
        v346.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v346.__r_.__value_.__l.__data_ = v155;
        v154->__r_.__value_.__l.__size_ = 0;
        v154->__r_.__value_.__r.__words[2] = 0;
        v154->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v352, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v352 = __s;
        if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)v353, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
        else
          *(std::string *)v353 = v251;
        v232 = 0;
        v233 = 0;
        v234 = 0;
        v354.__r_.__value_.__r.__words[0] = (std::string::size_type)&v232;
        v354.__r_.__value_.__s.__data_[8] = 0;
        v232 = (std::string *)operator new(0x30uLL);
        v233 = v232;
        v234 = v232 + 2;
        v233 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v234, (__int128 *)&v352, (__int128 *)&v353[24], v232);
        if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v354, v358.__r_.__value_.__l.__data_, v358.__r_.__value_.__l.__size_);
        else
          v354 = v358;
        v229 = 0;
        v230 = 0;
        v231 = 0;
        v226.__r_.__value_.__r.__words[0] = (std::string::size_type)&v229;
        v226.__r_.__value_.__s.__data_[8] = 0;
        v229 = (std::string *)operator new(0x18uLL);
        v230 = v229;
        v231 = v229 + 1;
        v230 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v231, (__int128 *)&v354, (__int128 *)&v355, v229);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v235, a2, (uint64_t)&v348, (uint64_t)&v346, (uint64_t)&v360, (uint64_t)v232, (uint64_t)v233, (uint64_t *)&v229);
        v156 = v236;
        if (v236)
        {
          v157 = (unint64_t *)&v236->__shared_owners_;
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
          }
        }
        v226.__r_.__value_.__r.__words[0] = (std::string::size_type)&v229;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
        if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v354.__r_.__value_.__l.__data_);
        v354.__r_.__value_.__r.__words[0] = (std::string::size_type)&v232;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v354);
        for (j = 0; j != -48; j -= 24)
        {
          if ((char)v353[j + 23] < 0)
            operator delete(*(void **)((char *)&v352 + j + 24));
        }
        if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v346.__r_.__value_.__l.__data_);
        if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v356.__r_.__value_.__l.__data_);
        if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v348.__r_.__value_.__l.__data_);
        if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v160 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
        else
          v160 = __sz.__r_.__value_.__l.__size_;
        v161 = &v356;
        std::string::basic_string[abi:ne180100]((uint64_t)&v356, v160 + 4);
        if ((v356.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v161 = (std::string *)v356.__r_.__value_.__r.__words[0];
        if (v160)
        {
          if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_sz = &__sz;
          else
            p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
          memmove(v161, p_sz, v160);
        }
        strcpy((char *)v161 + v160, "_rhs");
        v352.__r_.__value_.__r.__words[0] = 102;
        v352.__r_.__value_.__l.__size_ = 1065353216;
        v352.__r_.__value_.__r.__words[2] = 897988541;
        v353[0] = 0;
        memset(&v353[4], 0, 24);
        std::string::basic_string[abi:ne180100]<0>(&v346, "elementwise");
        v163 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0)
          v164 = *((unsigned __int8 *)*a3 + 23);
        else
          v164 = (*a3)[1];
        v165 = &v226;
        std::string::basic_string[abi:ne180100]((uint64_t)&v226, v164 + 1);
        if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v165 = (std::string *)v226.__r_.__value_.__r.__words[0];
        if (v164)
        {
          if (v163[23] >= 0)
            v166 = v163;
          else
            v166 = *(char **)v163;
          memmove(v165, v166, v164);
        }
        *(_WORD *)((char *)&v165->__r_.__value_.__l.__data_ + v164) = 58;
        if ((v356.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v167 = &v356;
        else
          v167 = (std::string *)v356.__r_.__value_.__r.__words[0];
        if ((v356.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v168 = HIBYTE(v356.__r_.__value_.__r.__words[2]);
        else
          v168 = v356.__r_.__value_.__l.__size_;
        v169 = std::string::append(&v226, (const std::string::value_type *)v167, v168);
        v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
        v354.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v354.__r_.__value_.__l.__data_ = v170;
        v169->__r_.__value_.__l.__size_ = 0;
        v169->__r_.__value_.__r.__words[2] = 0;
        v169->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v348, v358.__r_.__value_.__l.__data_, v358.__r_.__value_.__l.__size_);
        else
          v348 = v358;
        if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)v349, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
        else
          *(std::string *)v349 = v271;
        v223 = 0;
        v224 = 0;
        v225 = 0;
        v350.__r_.__value_.__r.__words[0] = (std::string::size_type)&v223;
        v350.__r_.__value_.__s.__data_[8] = 0;
        v223 = (std::string *)operator new(0x30uLL);
        v224 = v223;
        v225 = v223 + 2;
        v224 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v225, (__int128 *)&v348, (__int128 *)&v349[24], v223);
        if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v350, v356.__r_.__value_.__l.__data_, v356.__r_.__value_.__l.__size_);
        else
          v350 = v356;
        v220 = 0;
        v221 = 0;
        v222 = 0;
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v220;
        v217.__r_.__value_.__s.__data_[8] = 0;
        v220 = (std::string *)operator new(0x18uLL);
        v221 = v220;
        v222 = v220 + 1;
        v221 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v222, (__int128 *)&v350, (__int128 *)&v351, v220);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v227, a2, (uint64_t)&v346, (uint64_t)&v354, (uint64_t)&v352, (uint64_t)v223, (uint64_t)v224, (uint64_t *)&v220);
        v171 = v228;
        if (v228)
        {
          v172 = (unint64_t *)&v228->__shared_owners_;
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v220;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v350.__r_.__value_.__l.__data_);
        v350.__r_.__value_.__r.__words[0] = (std::string::size_type)&v223;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v350);
        for (k = 0; k != -48; k -= 24)
        {
          if ((char)v349[k + 23] < 0)
            operator delete(*(void **)((char *)&v348 + k + 24));
        }
        if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v354.__r_.__value_.__l.__data_);
        if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v226.__r_.__value_.__l.__data_);
        if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v346.__r_.__value_.__l.__data_);
        if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v175 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
        else
          v175 = __sz.__r_.__value_.__l.__size_;
        v176 = &v354;
        std::string::basic_string[abi:ne180100]((uint64_t)&v354, v175 + 8);
        if ((v354.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v176 = (std::string *)v354.__r_.__value_.__r.__words[0];
        if (v175)
        {
          if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v177 = &__sz;
          else
            v177 = (std::string *)__sz.__r_.__value_.__r.__words[0];
          memmove(v176, v177, v175);
        }
        strcpy((char *)v176 + v175, "_unscale");
        v348.__r_.__value_.__r.__words[0] = 33;
        v348.__r_.__value_.__l.__size_ = 1065353216;
        v348.__r_.__value_.__r.__words[2] = 897988541;
        v349[0] = 0;
        memset(&v349[4], 0, 24);
        std::string::basic_string[abi:ne180100]<0>(&v226, "elementwise");
        v178 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0)
          v179 = *((unsigned __int8 *)*a3 + 23);
        else
          v179 = (*a3)[1];
        v180 = &v217;
        std::string::basic_string[abi:ne180100]((uint64_t)&v217, v179 + 1);
        if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v180 = (std::string *)v217.__r_.__value_.__r.__words[0];
        if (v179)
        {
          if (v178[23] >= 0)
            v181 = v178;
          else
            v181 = *(char **)v178;
          memmove(v180, v181, v179);
        }
        *(_WORD *)((char *)&v180->__r_.__value_.__l.__data_ + v179) = 58;
        if ((v354.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v182 = &v354;
        else
          v182 = (std::string *)v354.__r_.__value_.__r.__words[0];
        if ((v354.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v183 = HIBYTE(v354.__r_.__value_.__r.__words[2]);
        else
          v183 = v354.__r_.__value_.__l.__size_;
        v184 = std::string::append(&v217, (const std::string::value_type *)v182, v183);
        v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
        v350.__r_.__value_.__r.__words[2] = v184->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v350.__r_.__value_.__l.__data_ = v185;
        v184->__r_.__value_.__l.__size_ = 0;
        v184->__r_.__value_.__r.__words[2] = 0;
        v184->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v346, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
        else
          v346 = v316;
        if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v347, v356.__r_.__value_.__l.__data_, v356.__r_.__value_.__l.__size_);
        else
          v347 = v356;
        v214 = 0;
        v215 = 0;
        v216 = 0;
        v344.__r_.__value_.__r.__words[0] = (std::string::size_type)&v214;
        v344.__r_.__value_.__s.__data_[8] = 0;
        v214 = (std::string *)operator new(0x30uLL);
        v215 = v214;
        v216 = v214 + 2;
        v215 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v216, (__int128 *)&v346, (__int128 *)&v348, v214);
        if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v344, v354.__r_.__value_.__l.__data_, v354.__r_.__value_.__l.__size_);
        else
          v344 = v354;
        v211 = 0;
        v212 = 0;
        v213 = 0;
        v338 = &v211;
        v339 = 0;
        v211 = (std::string *)operator new(0x18uLL);
        v212 = v211;
        v213 = v211 + 1;
        v212 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v213, (__int128 *)&v344, (__int128 *)&v345, v211);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v218, a2, (uint64_t)&v226, (uint64_t)&v350, (uint64_t)&v348, (uint64_t)v214, (uint64_t)v215, (uint64_t *)&v211);
        v186 = v219;
        if (v219)
        {
          v187 = (unint64_t *)&v219->__shared_owners_;
          do
            v188 = __ldaxr(v187);
          while (__stlxr(v188 - 1, v187));
          if (!v188)
          {
            ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
            std::__shared_weak_count::__release_weak(v186);
          }
        }
        v338 = &v211;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v338);
        if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v344.__r_.__value_.__l.__data_);
        v344.__r_.__value_.__r.__words[0] = (std::string::size_type)&v214;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v344);
        for (m = 0; m != -6; m -= 3)
        {
          if (SHIBYTE(v347.__r_.__value_.__r.__words[m + 2]) < 0)
            operator delete(*(void **)((char *)&v346 + m * 8 + 24));
        }
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v350.__r_.__value_.__l.__data_);
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v217.__r_.__value_.__l.__data_);
        if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v226.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v226, "elementwise");
        v190 = (uint64_t)*a3;
        if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v346, v354.__r_.__value_.__l.__data_, v354.__r_.__value_.__l.__size_);
        else
          v346 = v354;
        if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v347, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
        else
          v347 = v262;
        v206 = 0;
        v207 = 0;
        v208 = 0;
        v350.__r_.__value_.__r.__words[0] = (std::string::size_type)&v206;
        v350.__r_.__value_.__s.__data_[8] = 0;
        v206 = (std::string *)operator new(0x30uLL);
        v207 = v206;
        v208 = v206 + 2;
        v207 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v208, (__int128 *)&v346, (__int128 *)&v348, v206);
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v350, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        else
          v350 = __sz;
        v203 = 0;
        v204 = 0;
        v205 = 0;
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v203;
        v217.__r_.__value_.__s.__data_[8] = 0;
        v203 = (std::string *)operator new(0x18uLL);
        v204 = v203;
        v205 = v203 + 1;
        v204 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v205, (__int128 *)&v350, (__int128 *)&v351, v203);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v209, a2, (uint64_t)&v226, v190, (uint64_t)&v352, (uint64_t)v206, (uint64_t)v207, (uint64_t *)&v203);
        v191 = v210;
        if (v210)
        {
          v192 = (unint64_t *)&v210->__shared_owners_;
          do
            v193 = __ldaxr(v192);
          while (__stlxr(v193 - 1, v192));
          if (!v193)
          {
            ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
            std::__shared_weak_count::__release_weak(v191);
          }
        }
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v203;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v350.__r_.__value_.__l.__data_);
        v350.__r_.__value_.__r.__words[0] = (std::string::size_type)&v206;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v350);
        for (n = 0; n != -6; n -= 3)
        {
          if (SHIBYTE(v347.__r_.__value_.__r.__words[n + 2]) < 0)
            operator delete(*(void **)((char *)&v346 + n * 8 + 24));
        }
        if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v226.__r_.__value_.__l.__data_);
        if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v354.__r_.__value_.__l.__data_);
        if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v356.__r_.__value_.__l.__data_);
        if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v358.__r_.__value_.__l.__data_);
        if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v251.__r_.__value_.__l.__data_);
        if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v365.__r_.__value_.__l.__data_);
        if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v262.__r_.__value_.__l.__data_);
        if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v271.__r_.__value_.__l.__data_);
        if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v280.__r_.__value_.__l.__data_);
        if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v296.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v316.__r_.__value_.__l.__data_);
        if ((v318 & 0x80000000) == 0)
          goto LABEL_629;
        v35 = __p[0];
        break;
      case 2:
        std::string::basic_string[abi:ne180100]<0>(&v340, "l2_normalize");
        v12 = (uint64_t)*a3;
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v372, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v13 = *v6;
          v372.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)&v372.__r_.__value_.__l.__data_ = v13;
        }
        v323 = 0;
        v322 = 0;
        v324 = 0;
        v367.__r_.__value_.__r.__words[0] = (std::string::size_type)&v322;
        v367.__r_.__value_.__s.__data_[8] = 0;
        v322 = (std::string *)operator new(0x18uLL);
        v323 = v322;
        v324 = v322 + 1;
        v323 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v324, (__int128 *)&v372, (__int128 *)v373, v322);
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v367, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        else
          v367 = __sz;
        v320 = 0;
        v319 = 0;
        v321 = 0;
        v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v319;
        v360.__r_.__value_.__s.__data_[8] = 0;
        v319 = (std::string *)operator new(0x18uLL);
        v320 = v319;
        v321 = v319 + 1;
        v320 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v321, (__int128 *)&v367, (__int128 *)v368, v319);
        Espresso::sequential_builder::add<Espresso::l2_norm_params>(&v325, a2, (uint64_t)&v340, v12, v9, (uint64_t)v322, (uint64_t)v323, (uint64_t *)&v319);
        v28 = v326;
        if (v326)
        {
          v29 = (unint64_t *)&v326->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v319;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
        if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v367.__r_.__value_.__l.__data_);
        v31 = &v322;
LABEL_60:
        v367.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v367);
        if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v372.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v340.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_629;
        v35 = (void *)v340.__r_.__value_.__r.__words[0];
        break;
      case 3:
        std::string::basic_string[abi:ne180100]<0>(&v372, "l2_normalize_grad");
        v14 = (uint64_t)*a3;
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v340, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v15 = *v6;
          v340.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)&v340.__r_.__value_.__l.__data_ = v15;
        }
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v341, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
        }
        else
        {
          v25 = *(_OWORD *)v7;
          *(_QWORD *)&v341[16] = *(_QWORD *)(v7 + 16);
          *(_OWORD *)v341 = v25;
        }
        v26 = (__int128 *)*a3[3];
        if (*((char *)v26 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v341[24], *(const std::string::value_type **)v26, *((_QWORD *)v26 + 1));
        }
        else
        {
          v27 = *v26;
          v342[0] = *((_QWORD *)v26 + 2);
          *(_OWORD *)&v341[24] = v27;
        }
        v198 = 0;
        v199 = 0;
        v200 = 0;
        v367.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
        v367.__r_.__value_.__s.__data_[8] = 0;
        v198 = (std::string *)operator new(0x48uLL);
        v199 = v198;
        v200 = v198 + 3;
        v199 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v200, (__int128 *)&v340, (__int128 *)&v343, v198);
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v367, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        else
          v367 = __sz;
        v195 = 0;
        v196 = 0;
        v197 = 0;
        v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
        v360.__r_.__value_.__s.__data_[8] = 0;
        v195 = (std::string *)operator new(0x18uLL);
        v196 = v195;
        v197 = v195 + 1;
        v196 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v197, (__int128 *)&v367, (__int128 *)v368, v195);
        Espresso::sequential_builder::add<Espresso::l2_norm_params>(&v201, a2, (uint64_t)&v372, v14, v9, (uint64_t)v198, (uint64_t)v199, (uint64_t *)&v195);
        v36 = v202;
        if (v202)
        {
          v37 = (unint64_t *)&v202->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
        if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v367.__r_.__value_.__l.__data_);
        v367.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v367);
        for (ii = 0; ii != -9; ii -= 3)
        {
          if (SHIBYTE(v342[ii]) < 0)
            operator delete(*(void **)&v341[ii * 8 + 24]);
        }
        if ((SHIBYTE(v372.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_629;
        v35 = (void *)v372.__r_.__value_.__r.__words[0];
        break;
      default:
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("l2_normalize grad with mode %d", v8);
    }
    operator delete(v35);
LABEL_629:
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__sz.__r_.__value_.__l.__data_);
  }
  if (v337 < 0)
    operator delete(v336[0]);
}

void sub_191683CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a72;
  char a73;
  uint64_t v74;

  STACK[0x610] = (unint64_t)&a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x610]);
  v74 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x5A0] + v74 + 47) < 0)
      operator delete(*(void **)((char *)&STACK[0x5A0] + v74 + 24));
    v74 -= 24;
    if (v74 == -48)
    {
      if (a47 < 0)
        operator delete(__p);
      if (SLOBYTE(STACK[0x687]) < 0)
        operator delete((void *)STACK[0x670]);
      if (SLOBYTE(STACK[0x6A7]) < 0)
        operator delete((void *)STACK[0x690]);
      if (SLOBYTE(STACK[0x6C7]) < 0)
        operator delete((void *)STACK[0x6B0]);
      if (a73 < 0)
        operator delete(a72);
      if (SLOBYTE(STACK[0x727]) < 0)
        operator delete((void *)STACK[0x710]);
      if (SLOBYTE(STACK[0x25F]) < 0)
        operator delete((void *)STACK[0x248]);
      if (SLOBYTE(STACK[0x2B7]) < 0)
        operator delete((void *)STACK[0x2A0]);
      if (SLOBYTE(STACK[0x30F]) < 0)
        operator delete((void *)STACK[0x2F8]);
      if (SLOBYTE(STACK[0x397]) < 0)
        operator delete((void *)STACK[0x380]);
      if (SLOBYTE(STACK[0x3EF]) < 0)
        operator delete((void *)STACK[0x3D8]);
      if (SLOBYTE(STACK[0x457]) < 0)
        operator delete((void *)STACK[0x440]);
      if (SLOBYTE(STACK[0x46F]) < 0)
        operator delete((void *)STACK[0x458]);
      if (SLOBYTE(STACK[0x507]) < 0)
        operator delete((void *)STACK[0x4F0]);
      if (SLOBYTE(STACK[0x51F]) < 0)
        operator delete((void *)STACK[0x508]);
      _Unwind_Resume(a1);
    }
  }
}

void sub_19168498C()
{
  JUMPOUT(0x191684984);
}

void Espresso::generic_l2_normalize_grad_kernel::top_shapes_for_bottom_shapes(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  char *v6;
  __int128 v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;

  *((_QWORD *)&v12 + 1) = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *((_QWORD *)*a1 + 4);
  v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  v8 = v4;
  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((_QWORD *)v3 + 6), (uint64_t)(*((_QWORD *)v3 + 6) - *((_QWORD *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_191684A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_inner_product_grad_kernel::input_blob_type(Espresso::generic_inner_product_grad_kernel *this, uint64_t a2)
{
  return a2 == 1;
}

BOOL Espresso::generic_inner_product_weights_grad_kernel::input_blob_type(Espresso::generic_inner_product_weights_grad_kernel *this, uint64_t a2)
{
  return a2 == 2;
}

void Espresso::generic_inner_product_weights_grad_kernel::top_shapes_for_bottom_shapes(int32x2_t *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  int32x2_t v11;
  __int128 v12;
  __int128 v13;
  void *__p[2];
  uint64_t v15;
  __int128 v16;

  *(_QWORD *)&v16 = *MEMORY[0x1E0C80C00];
  if (a1[43].i8[0])
  {
    v6 = (_QWORD *)a1[38];
    v7 = 0;
    v8 = 0x200000000;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v6, 0, (uint64_t)&v11);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v9 = a2;
    v10 = 0;
    v3 = (char *)operator new(0x40uLL);
    *a2 = v3;
    a2[1] = v3;
    a2[2] = v3 + 64;
    v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), (__int128 *)&v11, &v16, (uint64_t)v3);
  }
  else
  {
    v15 = 0;
    v13 = 0u;
    *(_OWORD *)__p = 0u;
    v11 = vrev64_s32(a1[38]);
    v12 = xmmword_191A8D8A0;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    v6 = a2;
    LOBYTE(v7) = 0;
    v5 = (char *)operator new(0x40uLL);
    *a2 = v5;
    a2[1] = v5;
    a2[2] = v5 + 64;
    v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), (__int128 *)&v11, &v16, (uint64_t)v5);
  }
  a2[1] = v4;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_191684C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = v21;
  *(_QWORD *)(v20 + 8) = v22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_dropout_kernel::top_shapes_for_bottom_shapes(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  __int128 *v4;
  uint64_t v5;
  __int128 v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  char *v10;
  uint64_t v11;
  void *v12;
  __int128 v13[2];
  uint64_t v14;
  _QWORD v15[3];
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  __int128 v21;

  *((_QWORD *)&v21 + 1) = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *((_QWORD *)*a1 + 4);
  v6 = (*a1)[1];
  v13[0] = **a1;
  v13[1] = v6;
  v14 = v5;
  memset(v15, 0, sizeof(v15));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v15, *((const void **)v4 + 5), *((_QWORD *)v4 + 6), (uint64_t)(*((_QWORD *)v4 + 6) - *((_QWORD *)v4 + 5)) >> 2);
  v7 = *a1;
  v8 = *((_QWORD *)*a1 + 4);
  v9 = (*a1)[1];
  v16 = **a1;
  v17 = v9;
  v20[0] = 0;
  v20[1] = 0;
  v18 = v8;
  v19 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v19, *((const void **)v7 + 5), *((_QWORD *)v7 + 6), (uint64_t)(*((_QWORD *)v7 + 6) - *((_QWORD *)v7 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v10 = (char *)operator new(0x80uLL);
  *a2 = v10;
  a2[1] = v10;
  a2[2] = v10 + 128;
  v11 = 0;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v13, &v21, (uint64_t)v10);
  do
  {
    v12 = (void *)v20[v11 - 1];
    if (v12)
    {
      v20[v11] = v12;
      operator delete(v12);
    }
    v11 -= 8;
  }
  while (v11 != -16);
}

void sub_191684D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  void *v30;

  v27 = v26;
  *(_QWORD *)(v25 + 8) = v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  v29 = 0;
  while (1)
  {
    v30 = *(void **)((char *)&a24 + v29);
    if (v30)
    {
      *(uint64_t *)((char *)&a25 + v29) = (uint64_t)v30;
      operator delete(v30);
    }
    v29 -= 64;
    if (v29 == -128)
      _Unwind_Resume(a1);
  }
}

uint64_t Espresso::generic_dropout_kernel::number_of_top_blobs(Espresso::generic_dropout_kernel *this)
{
  return 2;
}

void Espresso::generic_dropout_kernel::backpropable(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char v4;
  void *__p[3];

  std::vector<BOOL>::vector(__p, 1uLL);
  *(_QWORD *)__p[0] |= 1uLL;
  if (a1[1] - *a1 == 48)
  {
    v4 = 0;
    std::vector<BOOL>::push_back((uint64_t *)__p, &v4);
  }
  std::vector<BOOL>::vector(a2, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
}

void sub_191684E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::generic_dropout_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string::size_type v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t i;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  void *__p[2];
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  _QWORD v26[3];
  char v27;
  int v28;
  int v29;
  std::string v30;
  std::string **v31;
  char v32;
  std::string v33;
  uint64_t v34;
  std::string v35;
  std::string v36;
  __int128 v37;

  *((_QWORD *)&v37 + 1) = *MEMORY[0x1E0C80C00];
  v6 = **(_QWORD **)(a3 + 16);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v6))
  {
    if (!*(_DWORD *)(a1 + 292))
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("do_scale must be true to backprop dropout op");
    Espresso::blob_grad_contrib_name((uint64_t)&v30, v6, a3);
    v7 = **(__int128 ***)(a3 + 8);
    v8 = **(_QWORD **)(a3 + 24);
    v26[2] = 897988541;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v26[0] = 1;
    v26[1] = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    v9 = *(_QWORD *)a3;
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v10 = *v7;
      v35.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v10;
    }
    if (*(char *)(v8 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v8 + 24), *(_QWORD *)(v8 + 32));
    }
    else
    {
      v11 = *(_OWORD *)(v8 + 24);
      v36.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 40);
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v11;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
    v33.__r_.__value_.__s.__data_[8] = 0;
    v19 = (std::string *)operator new(0x30uLL);
    v20 = v19;
    v21 = v19 + 2;
    v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v21, (__int128 *)&v35, &v37, v19);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v33, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
    else
      v33 = v30;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v31 = &v16;
    v32 = 0;
    v16 = (std::string *)operator new(0x18uLL);
    v17 = v16;
    v18 = v16 + 1;
    v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (__int128 *)&v33, (__int128 *)&v34, v16);
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v24, a2, (uint64_t)__p, v9, (uint64_t)v26, (uint64_t)v19, (uint64_t)v20, (uint64_t *)&v16);
    v12 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v31 = &v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v36.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v35 + i * 8 + 24));
    }
    if (v23 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
}

const char *Espresso::generic_dropout_kernel::kernel_type_str(Espresso::generic_dropout_kernel *this)
{
  return "dropout";
}

void Espresso::generic_load_constant_kernel_impl::~generic_load_constant_kernel_impl(Espresso::generic_load_constant_kernel_impl *this)
{
  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::abstract_kernel_with_weights<Espresso::load_constant_params>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

void Espresso::generic_context_transfer_kernel_impl::~generic_context_transfer_kernel_impl(Espresso::generic_context_transfer_kernel_impl *this)
{
  Espresso::generic_context_transfer_kernel::~generic_context_transfer_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::generic_context_transfer_kernel_impl::__launch(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  char v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (***v34)(_QWORD);
  int v35;
  uint64_t (***v36)(_QWORD);
  Espresso *v37;
  const char *v38;
  _QWORD *v40;
  std::string::size_type v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int (***v50)(_QWORD);
  unsigned int (***v51)(_QWORD);
  __int128 v52;
  std::__shared_weak_count *size;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  NSObject *v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  std::runtime_error *exception;
  std::runtime_error *v72;
  int v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  int v78;
  std::string *v79;
  std::string::size_type v80;
  std::string *v81;
  __int128 v82;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string buf;
  uint64_t v89;
  std::__shared_weak_count *v90;
  __int128 v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  __int128 v94;

  v4 = *a4;
  v5 = a4[1];
  if (v5 - *a4 != a3[1] - *a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid configuration");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v5 != v4)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = (_QWORD *)(v4 + 16 * v9);
      v13 = (_QWORD *)(*a3 + 16 * v9);
      v14 = *v13;
      v94 = *(_OWORD *)v12;
      if (*((_QWORD *)&v94 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v92 = 0;
      v93 = 0;
      v17 = (*(uint64_t (**)(uint64_t, _QWORD *, __int128 *, uint64_t *))(*(_QWORD *)v14 + 144))(v14, a2, &v94, &v92);
      v18 = v93;
      if (v93)
      {
        p_shared_owners = (unint64_t *)&v93->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
      if (!*((_QWORD *)&v94 + 1))
        goto LABEL_16;
      v22 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        if ((v17 & 1) != 0)
          goto LABEL_100;
      }
      else
      {
LABEL_16:
        if ((v17 & 1) != 0)
          goto LABEL_100;
      }
      v24 = *v12;
      v91 = *(_OWORD *)v13;
      if (*((_QWORD *)&v91 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v89 = 0;
      v90 = 0;
      v27 = (*(uint64_t (**)(uint64_t, _QWORD *, __int128 *, uint64_t *))(*(_QWORD *)v24 + 152))(v24, a2, &v91, &v89);
      v28 = v90;
      if (v90)
      {
        v29 = (unint64_t *)&v90->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
      if (!*((_QWORD *)&v91 + 1))
        goto LABEL_29;
      v32 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
        if ((v27 & 1) != 0)
          goto LABEL_100;
      }
      else
      {
LABEL_29:
        if ((v27 & 1) != 0)
          goto LABEL_100;
      }
      v34 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*v13 + 72) + 8);
      v35 = (**v34)(v34);
      v36 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*v12 + 72) + 8);
      v37 = (Espresso *)(**v36)(v36);
      if (v35 == 100 || v35 == 0)
      {
        v40 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], v9);
        if (v40)
        {
          v41 = v40[21];
          buf.__r_.__value_.__r.__words[0] = v40[20];
          buf.__r_.__value_.__l.__size_ = v41;
          if (v41)
          {
            v42 = (unint64_t *)(v41 + 8);
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          if ((v11 & 1) != 0)
          {
LABEL_61:
            v11 = 1;
            goto LABEL_62;
          }
        }
        else
        {
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
          if ((v11 & 1) != 0)
            goto LABEL_61;
        }
        v50 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*v12 + 72) + 8);
        if ((**v50)(v50) == 10006
          || (v51 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*v12 + 72) + 8), (**v51)(v51) == 10007))
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
          goto LABEL_61;
        }
        v11 = 0;
LABEL_62:
        if (buf.__r_.__value_.__r.__words[0])
        {
          (*(void (**)(_QWORD, _QWORD *, std::string *))(*(_QWORD *)*v12 + 40))(*v12, a2, &buf);
          v10 = 1;
        }
        else
        {
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v13 + 56))(&v87);
          v52 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
          *(_OWORD *)&v87.__r_.__value_.__l.__data_ = 0uLL;
          size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v52;
          if (size)
          {
            v54 = (unint64_t *)&size->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          v56 = (std::__shared_weak_count *)v87.__r_.__value_.__l.__size_;
          if (v87.__r_.__value_.__l.__size_)
          {
            v57 = (unint64_t *)(v87.__r_.__value_.__l.__size_ + 8);
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          (*(void (**)(_QWORD, _QWORD *, std::string *))(*(_QWORD *)*v12 + 40))(*v12, a2, &buf);
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
          (*(void (**)(_QWORD, _QWORD *, std::string *))(*(_QWORD *)*v13 + 48))(*v13, a2, &buf);
        }
        v59 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
        if (!buf.__r_.__value_.__l.__size_)
          goto LABEL_100;
        v60 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
LABEL_98:
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
        goto LABEL_100;
      }
      if ((_DWORD)v37 != 100 && (_DWORD)v37 != 0)
      {
        if (*(_QWORD *)(a1 + 328))
        {
          v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          v73 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 312) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 312)
                                                                                                + 8));
          std::to_string(&v85, v73);
          v74 = std::string::insert(&v85, 0, "Invalid configuration dst=");
          v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          v86.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          v76 = std::string::append(&v86, " src=");
          v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v87.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          v78 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 328) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 328)
                                                                                                + 8));
          std::to_string(&v84, v78);
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = &v84;
          else
            v79 = (std::string *)v84.__r_.__value_.__r.__words[0];
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v80 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
          else
            v80 = v84.__r_.__value_.__l.__size_;
          v81 = std::string::append(&v87, (const std::string::value_type *)v79, v80);
          v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
          buf.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v82;
          v81->__r_.__value_.__l.__size_ = 0;
          v81->__r_.__value_.__r.__words[2] = 0;
          v81->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v72, &buf);
          __cxa_throw(v72, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        Espresso::espresso_os_log_subsystem(v37, v38);
        v62 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_error_impl(&dword_190DAF000, v62, OS_LOG_TYPE_ERROR, "Blob copy not implemented", (uint8_t *)&buf, 2u);
        }

        goto LABEL_100;
      }
      v45 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], v9);
      if (!v45)
        break;
      v46 = v45[20];
      v47 = v45[21];
      buf.__r_.__value_.__r.__words[0] = v46;
      buf.__r_.__value_.__l.__size_ = v47;
      if (v47)
      {
        v48 = (unint64_t *)(v47 + 8);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      if (!v46 || *(_BYTE *)(a1 + 344))
        goto LABEL_84;
LABEL_95:
      (*(void (**)(_QWORD, _QWORD *, std::string *))(*(_QWORD *)*v13 + 48))(*v13, a2, &buf);
      v59 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_)
      {
        v70 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
        do
          v61 = __ldaxr(v70);
        while (__stlxr(v61 - 1, v70));
        goto LABEL_98;
      }
LABEL_100:
      ++v9;
      v4 = *a4;
      if (v9 >= (a4[1] - *a4) >> 4)
        goto LABEL_104;
    }
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
LABEL_84:
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v12 + 192))(&v87);
    v63 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = 0uLL;
    v64 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v63;
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = (std::__shared_weak_count *)v87.__r_.__value_.__l.__size_;
    if (v87.__r_.__value_.__l.__size_)
    {
      v68 = (unint64_t *)(v87.__r_.__value_.__l.__size_ + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, std::string *))(*(_QWORD *)*v12 + 40))(*v12, a2, &buf);
    goto LABEL_95;
  }
  v11 = 0;
  v10 = 0;
LABEL_104:
  if ((*(_BYTE *)(a1 + 346) != 0) | v10 & 1)
  {
    if ((v11 & 1) == 0)
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  }
}

void sub_191685A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44)
{
  void *v44;
  int v45;

  if (a42 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v45 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
  }
  else if (!v45)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v44);
  goto LABEL_14;
}

void Espresso::generic_reshape_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  Espresso::build_grads_for_reshape_kernels(a2, a3, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_191685B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::build_grads_for_reshape_kernels(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t i;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _QWORD v24[2];
  __int128 v25;
  __int16 v26;
  int v27;
  std::string v28;
  std::string **v29;
  char v30;
  std::string v31;
  uint64_t v32;
  std::string v33;
  std::string v34;
  __int128 v35;

  *((_QWORD *)&v35 + 1) = *MEMORY[0x1E0C80C00];
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) - **(_QWORD **)(a2 + 24)) >> 3), 1uLL, a3, 0);
  v5 = **(_QWORD **)(a2 + 16);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a2 + 40), v5))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v28, **(_QWORD **)(a2 + 16), a2);
    v24[0] = 0;
    v24[1] = 0;
    v25 = xmmword_191A93460;
    v27 = 1;
    v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
    v6 = *(_QWORD *)a2;
    v7 = **(__int128 ***)(a2 + 8);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v33.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v8;
    }
    if (*(char *)(v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
    }
    else
    {
      v9 = *(_OWORD *)v5;
      v34.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v9;
    }
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
    v31.__r_.__value_.__s.__data_[8] = 0;
    v17 = (std::string *)operator new(0x30uLL);
    v18 = v17;
    v19 = v17 + 2;
    v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v19, (__int128 *)&v33, &v35, v17);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v31, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
    else
      v31 = v28;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v29 = &v14;
    v30 = 0;
    v14 = (std::string *)operator new(0x18uLL);
    v15 = v14;
    v16 = v14 + 1;
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v16, (__int128 *)&v31, (__int128 *)&v32, v14);
    Espresso::sequential_builder::add<Espresso::reshape_params>(&v22, a1, (uint64_t)__p, v6, (uint64_t)v24, (uint64_t)v17, (uint64_t)v18, (uint64_t *)&v14);
    v10 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v29 = &v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v34.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v33 + i * 8 + 24));
    }
    if (v21 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_191685E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)(v35 - 144) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 144));
  v37 = 0;
  v38 = v35 - 112;
  while (1)
  {
    if (*(char *)(v38 + v37 + 47) < 0)
      operator delete(*(void **)(v38 + v37 + 24));
    v37 -= 24;
    if (v37 == -48)
    {
      if (a21 < 0)
        operator delete(__p);
      if (a34 < 0)
        operator delete(a29);
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int &>(int a1, int a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("Mismatch between input rank & target rank %d %d", a1, a2);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int &,int &,int &,int &,int &,int &,int &,int &,int &>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("generic_reshape_kernel: Invalid bottom shape (%d %d %d %d %d) for reshape to (%d %d %d %d %d)", a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void Espresso::generic_reshape_like_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, Espresso::layer_shape **a2@<X1>, _QWORD *a3@<X8>)
{
  Espresso::layer_shape *v4;
  const Espresso::layer_shape *v5;
  const Espresso::layer_shape *v7;
  uint64_t v8;
  Espresso::layer_nd_shape *v10;
  uint64_t v11;
  Espresso::layer_nd_shape *v12;
  unsigned int *v13;
  uint64_t v14;
  _BYTE *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::vector<int>::pointer begin;
  Espresso::layer_shape *v23;
  unint64_t v24;
  int64_t v25;
  __int128 *v26;
  int v27;
  uint64_t v28;
  char *v29;
  __int128 *v30;
  std::string *v31;
  _BYTE v32[24];
  std::string v33;
  std::string *v34;
  _QWORD *v35;
  char v36;
  __int128 *v37;
  void *__p[2];
  __int128 v39;
  uint64_t v40;
  void *v41;
  _BYTE *v42;
  std::vector<int> v43;
  Espresso::layer_nd_shape *v44;
  Espresso::layer_nd_shape *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  __int128 v53;

  *((_QWORD *)&v53 + 1) = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = a2[1];
  if ((unint64_t)(v5 - *a2 - 385) <= 0xFFFFFFFFFFFFFEFELL)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_reshape_like_kernel: Must have between 2 and 6 inputs.");
  v7 = (Espresso::layer_shape *)((char *)v4 + 64);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v8 = v5 - (Espresso::layer_shape *)((char *)v4 + 64);
  if (!v8)
  {
    v12 = 0;
    memset(&v43, 0, sizeof(v43));
LABEL_31:
    LODWORD(v24) = 0;
    v23 = *a2;
    v47 = 0uLL;
    LODWORD(v48) = 0;
    goto LABEL_32;
  }
  std::vector<Espresso::layer_nd_shape>::__vallocate[abi:ne180100](&v44, v8 >> 6);
  v10 = v45;
  do
  {
    v11 = Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v10, v7, 0);
    v7 = (const Espresso::layer_shape *)((char *)v7 + 64);
    v10 = (Espresso::layer_nd_shape *)(v11 + 24);
  }
  while (v7 != v5);
  v45 = v10;
  v12 = v44;
  memset(&v43, 0, sizeof(v43));
  if (v10 == v44)
    goto LABEL_31;
  v13 = (unsigned int *)(a1 + 280);
  if ((unint64_t)((v10 - v44) / 24) <= 1)
    v14 = 1;
  else
    v14 = (v10 - v44) / 24;
  v15 = (_BYTE *)(a1 + 320);
  v16 = "generic_reshape_like_kernel: begins[i] should be less than ends[i]";
  v17 = (uint64_t)v44;
  do
  {
    Espresso::layer_nd_shape::shape_vector((std::vector<int> *)__p, v17);
    v18 = (int)*v13;
    if ((v18 & 0x80000000) != 0)
      v19 = v18 + (((char *)__p[1] - (char *)__p[0]) >> 2);
    else
      v19 = *v13;
    if (*v15)
    {
      v20 = ((char *)__p[1] - (char *)__p[0]) >> 2;
    }
    else
    {
      v21 = (int)v13[5];
      if ((v21 & 0x80000000) != 0)
        v20 = v21 + (((char *)__p[1] - (char *)__p[0]) >> 2);
      else
        v20 = v13[5];
    }
    if (v20 <= v19)
      goto LABEL_43;
    if (v20 > *(int *)(v17 + 20))
    {
      v16 = "generic_reshape_like_kernel: ends[i] should be less than rank inputs[i + 1]";
LABEL_43:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v16);
    }
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v43, v43.__end_, (char *)__p[0] + 4 * v19, (char *)__p[0] + 4 * v20, v20 - v19);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v17 += 24;
    ++v15;
    ++v13;
    --v14;
  }
  while (v14);
  begin = v43.__begin_;
  v23 = *a2;
  v47 = 0uLL;
  *(_QWORD *)&v48 = 0;
  v24 = v43.__end_ - v43.__begin_;
  if (v43.__end_ != v43.__begin_)
  {
    if (v24 <= 1)
      v25 = 1;
    else
      v25 = v43.__end_ - v43.__begin_;
    v26 = &v47;
    do
    {
      v27 = *begin++;
      *(_DWORD *)v26 = v27;
      v26 = (__int128 *)((char *)v26 + 4);
      --v25;
    }
    while (v25);
  }
LABEL_32:
  DWORD1(v48) = v24;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v47, 0, (uint64_t)__p);
  v28 = Espresso::layer_shape::total_dim(v23);
  if (v28 != Espresso::layer_shape::total_dim((Espresso::layer_shape *)__p))
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v35, v23, 0);
    Espresso::layer_nd_shape::repr((std::string *)&v47, (uint64_t)&v35);
    if ((SBYTE7(v48) & 0x80u) == 0)
      v30 = &v47;
    else
      v30 = (__int128 *)v47;
    v37 = v30;
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v32, (const Espresso::layer_shape *)__p, 0);
    Espresso::layer_nd_shape::repr(&v33, (uint64_t)v32);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v33;
    else
      v31 = (std::string *)v33.__r_.__value_.__r.__words[0];
    v34 = v31;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>("reshape_like input and output have different sizes: %s -> %s", &v37, &v34);
  }
  v47 = *(_OWORD *)__p;
  v48 = v39;
  v49 = v40;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v50, v41, (uint64_t)v42, (v42 - (_BYTE *)v41) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v35 = a3;
  v36 = 0;
  v29 = (char *)operator new(0x40uLL);
  *a3 = v29;
  a3[1] = v29;
  a3[2] = v29 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v47, &v53, (uint64_t)v29);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (v43.__begin_)
  {
    v43.__end_ = v43.__begin_;
    operator delete(v43.__begin_);
  }
  if (v12)
    operator delete(v12);
}

void sub_19168634C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  void *v35;
  uint64_t v36;

  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  if (a29)
    operator delete(a29);
  if (a32)
    operator delete(a32);
  if (v35)
    operator delete(v35);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::generic_reshape_like_kernel::has_dynamic_top_shape(Espresso::generic_reshape_like_kernel *this)
{
  return 0;
}

const char *Espresso::generic_reshape_like_kernel::kernel_type_str(Espresso::generic_reshape_like_kernel *this)
{
  return "reshape_like";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::reshape_like_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(std::vector<int> *a1, int *__dst, char *__src, char *a4, uint64_t a5)
{
  int *v6;
  std::allocator<int> *p_end_cap;
  int *value;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  std::vector<int>::pointer v22;
  char *v23;
  std::vector<int>::pointer v24;
  int *v25;
  int v26;
  int *v27;
  uint64_t v28;
  int *v29;
  int v30;
  std::__split_buffer<int> __v;

  if (a5 < 1)
    return;
  v6 = (int *)__src;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  value = a1->__end_cap_.__value_;
  end = a1->__end_;
  if (a5 > value - end)
  {
    begin = a1->__begin_;
    v13 = a5 + end - a1->__begin_;
    if (v13 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = __dst - begin;
    v15 = (char *)value - (char *)begin;
    if (v15 >> 1 > v13)
      v13 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v13;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
    else
      v17 = 0;
    v27 = (int *)(v16 + 4 * v14);
    __v.__first_ = (std::__split_buffer<int>::pointer)v16;
    __v.__begin_ = v27;
    __v.__end_cap_.__value_ = (int *)(v16 + 4 * v17);
    v28 = 4 * a5;
    v29 = &v27[a5];
    do
    {
      v30 = *v6++;
      *v27++ = v30;
      v28 -= 4;
    }
    while (v28);
    __v.__end_ = v29;
    std::vector<int>::__swap_out_circular_buffer(a1, &__v, __dst);
    if (__v.__first_)
      operator delete(__v.__first_);
    return;
  }
  v18 = (char *)end - (char *)__dst;
  v19 = end - __dst;
  if (v19 >= a5)
  {
    v20 = &__src[4 * a5];
    v22 = a1->__end_;
LABEL_17:
    v23 = (char *)&__dst[a5];
    v24 = &v22[-a5];
    v25 = v22;
    if (v24 < end)
    {
      v25 = v22;
      do
      {
        v26 = *v24++;
        *v25++ = v26;
      }
      while (v24 < end);
    }
    a1->__end_ = v25;
    if (v22 != (std::vector<int>::pointer)v23)
      memmove(&v22[-(((char *)v22 - v23) >> 2)], __dst, (char *)v22 - v23);
    if (v20 != (char *)v6)
      memmove(__dst, v6, v20 - (char *)v6);
    return;
  }
  v20 = &__src[4 * v19];
  v21 = a4 - v20;
  if (a4 != v20)
    memmove(a1->__end_, &__src[4 * v19], a4 - v20);
  v22 = (std::vector<int>::pointer)((char *)end + v21);
  a1->__end_ = (std::vector<int>::pointer)((char *)end + v21);
  if (v18 >= 1)
    goto LABEL_17;
}

char *std::vector<Espresso::layer_nd_shape>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  char *result;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v3 = 3 * a2;
  result = (char *)operator new(24 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

void Espresso::generic_tile_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int32x4_t v5;
  char *v6;
  __int128 v8;
  uint64_t v9;
  char *v10;
  __int128 v11[2];
  uint64_t v12;
  void *__p;
  void *v14;
  uint64_t v15;
  int32x4_t v16;
  _BYTE v17[24];
  void *v18[2];
  uint64_t v19;
  __int128 v20;

  *((_QWORD *)&v20 + 1) = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (a2[1] - *a2 == 128)
  {
    v19 = 0;
    *(_OWORD *)v18 = 0u;
    *(_OWORD *)&v17[8] = 0u;
    v5.i64[0] = 0x100000001;
    v5.i64[1] = 0x100000001;
    v16 = v5;
    *(_QWORD *)v17 = 0xFFFFFFFF00000001;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *(_QWORD *)&v11[0] = a3;
    BYTE8(v11[0]) = 0;
    v6 = (char *)operator new(0x40uLL);
    *a3 = v6;
    a3[1] = v6;
    a3[2] = v6 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)v16.i8, &v20, (uint64_t)v6);
  }
  else
  {
    v8 = *(_OWORD *)(v4 + 16);
    v9 = *(_QWORD *)(v4 + 32);
    v16 = *(int32x4_t *)v4;
    *(_OWORD *)v17 = v8;
    *(_QWORD *)&v17[16] = v9;
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v18, *(const void **)(v4 + 40), *(_QWORD *)(v4 + 48), (uint64_t)(*(_QWORD *)(v4 + 48) - *(_QWORD *)(v4 + 40)) >> 2);
    v16 = vmulq_s32(v16, *(int32x4_t *)(a1 + 280));
    *(_DWORD *)v17 *= *(_DWORD *)(a1 + 296);
    v11[0] = (__int128)v16;
    v11[1] = *(_OWORD *)v17;
    v12 = *(_QWORD *)&v17[16];
    __p = 0;
    v14 = 0;
    v15 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v18[0], (uint64_t)v18[1], ((char *)v18[1] - (char *)v18[0]) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v10 = (char *)operator new(0x40uLL);
    *a3 = v10;
    a3[1] = v10;
    a3[2] = v10 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v11, (__int128 *)v16.i8, (uint64_t)v10);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
}

void sub_19168680C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_flatten_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  int v12;
  int *v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  std::runtime_error *exception;
  _DWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  unsigned int v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  void *__p[2];
  uint64_t v40;
  __int128 v41;

  *(_QWORD *)&v41 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (a2[1] - v4 != 64)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid argument");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_DWORD *)(a1 + 280) == 2)
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v29, (const Espresso::layer_shape *)v4, 0);
    v7 = *(_DWORD *)(a1 + 284);
    v8 = v7;
    if (v7 < (signed int)-v31 || v7 > (int)v31)
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Invalid rank and axis pair %d %zu", v7, v31);
    v10 = v31 & (v7 >> 31);
    v11 = v10 + v7;
    v12 = 1;
    if (v10 + (int)v8 >= 1)
    {
      v13 = (int *)&v29;
      v14 = (v10 + v8);
      do
      {
        v15 = *v13++;
        v12 *= v15;
        --v14;
      }
      while (v14);
    }
    if (v31 <= v11)
    {
      v17 = 1;
    }
    else
    {
      v16 = (int *)&v29 + v8 + v10;
      v17 = 1;
      do
      {
        v18 = *v16++;
        v17 *= v18;
        ++v11;
      }
      while (v31 > v11);
    }
    v26[0] = v12;
    v26[1] = v17;
    v27 = 0;
    v28 = 0x200000000;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v26, 0, (uint64_t)&v34);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v32 = a3;
    v33 = 0;
    v24 = (char *)operator new(0x40uLL);
    *a3 = v24;
    a3[1] = v24;
    a3[2] = v24 + 64;
    v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)&v34, &v41, (uint64_t)v24);
  }
  else
  {
    v19 = *(_DWORD *)(v4 + 4) * *(_DWORD *)v4 * *(_DWORD *)(v4 + 8);
    v20 = *(_DWORD *)(v4 + 20);
    v21 = *(_QWORD *)(v4 + 12);
    v34 = 0x100000001;
    v35 = v19;
    v36 = v21;
    v37 = v20;
    v38 = 0u;
    *(_OWORD *)__p = 0u;
    v40 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v29 = a3;
    v30 = 0;
    v22 = (char *)operator new(0x40uLL);
    *a3 = v22;
    a3[1] = v22;
    a3[2] = v22 + 64;
    v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)&v34, &v41, (uint64_t)v22);
  }
  a3[1] = v23;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_191686AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = v25;
  *(_QWORD *)(v24 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_flatten_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v6;
  char *v7;
  __int128 v8;
  const void *v9;
  int v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  const void **v14;
  size_t v15;
  std::string *p_p;
  const void *v17;
  char *v18;
  size_t v19;
  std::string *v20;
  char *v21;
  __int128 *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  std::string *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  std::string *v45;
  std::string *v46;
  std::string *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  std::string __p;
  uint64_t v57;
  std::__shared_weak_count *v58;
  _BYTE v59[12];
  __int128 v60;
  int v61;
  __int16 v62;
  int v63;
  std::string v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void *v71[2];
  char v72;
  std::string **v73;
  char v74;
  std::string v75;
  uint64_t v76;
  std::string v77;
  uint64_t v78;
  std::string v79;
  uint64_t v80;
  std::string v81;
  __int128 v82;

  *(_QWORD *)&v82 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v71, "flatten");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3[2] + 8) - *(_QWORD *)a3[2]) >> 3), 1uLL, (uint64_t)v71, 1);
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3[3] + 8) - *(_QWORD *)a3[3]) >> 3), 1uLL, (uint64_t)v71, 0);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)a3[5], *(_QWORD *)a3[2]))
  {
    v6 = (uint64_t **)(a2[10] + 184);
    *(_QWORD *)v59 = *(_QWORD *)a3[2];
    v7 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, *(_QWORD **)v59, (__int128 **)v59);
    v8 = *(_OWORD *)(v7 + 72);
    v65 = *(_OWORD *)(v7 + 56);
    v66 = v8;
    v9 = (const void *)*((_QWORD *)v7 + 12);
    v67 = *((_QWORD *)v7 + 11);
    v68 = 0;
    v69 = 0;
    v70 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, v9, *((_QWORD *)v7 + 13), (uint64_t)(*((_QWORD *)v7 + 13) - (_QWORD)v9) >> 2);
    Espresso::blob_grad_contrib_name((uint64_t)&v64, *(_QWORD *)a3[2], (uint64_t)a3);
    v10 = *(_DWORD *)(a1 + 280);
    if (v10 == 1)
    {
      v14 = *(const void ***)a3[1];
      if (*((char *)v14 + 23) >= 0)
        v15 = *((unsigned __int8 *)v14 + 23);
      else
        v15 = (size_t)v14[1];
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v15 + 9);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v15)
      {
        if (*((char *)v14 + 23) >= 0)
          v17 = v14;
        else
          v17 = *v14;
        memmove(p_p, v17, v15);
      }
      strcpy((char *)p_p + v15, "_reshaped");
      v62 = 1;
      v63 = 1;
      v61 = 0;
      *(_DWORD *)v59 = DWORD2(v65);
      *(_QWORD *)&v59[4] = v65;
      v60 = xmmword_191A937A0;
      std::string::basic_string[abi:ne180100]<0>(&v81, "reshape");
      v18 = (char *)*a3;
      if (*(char *)(*a3 + 23) >= 0)
        v19 = *(unsigned __int8 *)(*a3 + 23);
      else
        v19 = *(_QWORD *)(*a3 + 8);
      v20 = &v79;
      std::string::basic_string[abi:ne180100]((uint64_t)&v79, v19 + 8);
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v20 = (std::string *)v79.__r_.__value_.__r.__words[0];
      if (v19)
      {
        if (v18[23] >= 0)
          v21 = v18;
        else
          v21 = *(char **)v18;
        memmove(v20, v21, v19);
      }
      strcpy((char *)v20 + v19, "_reshape");
      v22 = *(__int128 **)a3[1];
      if (*((char *)v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
      }
      else
      {
        v23 = *v22;
        v77.__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 2);
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v23;
      }
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
      v75.__r_.__value_.__s.__data_[8] = 0;
      v45 = (std::string *)operator new(0x18uLL);
      v46 = v45;
      v47 = v45 + 1;
      v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v47, (__int128 *)&v77, (__int128 *)&v78, v45);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v75, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v75 = __p;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v73 = &v42;
      v74 = 0;
      v42 = (std::string *)operator new(0x18uLL);
      v43 = v42;
      v44 = v42 + 1;
      v43 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v44, (__int128 *)&v75, (__int128 *)&v76, v42);
      Espresso::sequential_builder::add<Espresso::reshape_params>(&v48, a2, (uint64_t)&v81, (uint64_t)&v79, (uint64_t)v59, (uint64_t)v45, (uint64_t)v46, (uint64_t *)&v42);
      v27 = v49;
      if (v49)
      {
        p_shared_owners = (unint64_t *)&v49->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v73 = &v42;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      LODWORD(v75.__r_.__value_.__r.__words[2]) = 4;
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = xmmword_191A93610;
      std::string::basic_string[abi:ne180100]<0>(&v81, "transpose");
      v30 = *a3;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v79, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v79 = __p;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
      v77.__r_.__value_.__s.__data_[8] = 0;
      v37 = (std::string *)operator new(0x18uLL);
      v38 = v37;
      v39 = v37 + 1;
      v38 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v39, (__int128 *)&v79, (__int128 *)&v80, v37);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v77, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
      else
        v77 = v64;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v73 = &v34;
      v74 = 0;
      v34 = (std::string *)operator new(0x18uLL);
      v35 = v34;
      v36 = v34 + 1;
      v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, (__int128 *)&v77, (__int128 *)&v78, v34);
      Espresso::sequential_builder::add<Espresso::transpose_params_t>(&v40, a2, (uint64_t)&v81, v30, (uint64_t)&v75, (uint64_t)v37, (uint64_t)v38, (uint64_t *)&v34);
      v31 = v41;
      if (v41)
      {
        v32 = (unint64_t *)&v41->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v73 = &v34;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
    }
    else
    {
      if (v10)
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported flatten param");
      v62 = 1;
      v63 = 1;
      *(_QWORD *)v59 = v65;
      v61 = 0;
      *(_DWORD *)&v59[8] = DWORD2(v65);
      v60 = xmmword_191A937A0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "reshape");
      v11 = *a3;
      v12 = *(__int128 **)a3[1];
      if (*((char *)v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
      }
      else
      {
        v13 = *v12;
        v81.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
        *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v13;
      }
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
      v79.__r_.__value_.__s.__data_[8] = 0;
      v53 = (std::string *)operator new(0x18uLL);
      v54 = v53;
      v55 = v53 + 1;
      v54 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v55, (__int128 *)&v81, &v82, v53);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v79, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
      else
        v79 = v64;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
      v77.__r_.__value_.__s.__data_[8] = 0;
      v50 = (std::string *)operator new(0x18uLL);
      v51 = v50;
      v52 = v50 + 1;
      v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v52, (__int128 *)&v79, (__int128 *)&v80, v50);
      Espresso::sequential_builder::add<Espresso::reshape_params>(&v57, a2, (uint64_t)&__p, v11, (uint64_t)v59, (uint64_t)v53, (uint64_t)v54, (uint64_t *)&v50);
      v24 = v58;
      if (v58)
      {
        v25 = (unint64_t *)&v58->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    }
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
}

void sub_1916872F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57)
{
  uint64_t v57;

  *(_QWORD *)(v57 - 160) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 160));
  if (*(char *)(v57 - 105) < 0)
    operator delete(*(void **)(v57 - 128));
  if (*(char *)(v57 - 73) < 0)
    operator delete(*(void **)(v57 - 96));
  if (a37 < 0)
    operator delete(__p);
  if (a50 < 0)
    operator delete(a45);
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  if (*(char *)(v57 - 209) < 0)
    operator delete(*(void **)(v57 - 232));
  _Unwind_Resume(a1);
}

void Espresso::generic_reduce_kernel::build_grads_for_inputs(uint64_t a1, Espresso::sequential_builder *a2, uint64_t a3)
{
  uint64_t v6;
  std::string::size_type v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  size_t v18;
  std::string *v19;
  const std::string::value_type *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  char *v26;
  size_t v27;
  std::string *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t i;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::string v38;
  void *v39;
  char v40;
  std::string *v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  std::string *v45;
  std::string *v46;
  void *__p[2];
  char v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string *v54;
  std::string *v55;
  std::string *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::string v62;
  std::string *v63;
  std::string *v64;
  std::string *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  std::string *v71;
  char *v72;
  char *v73;
  _QWORD v74[3];
  char v75;
  int v76;
  char v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  void *v87;
  void *v88;
  uint64_t v89;
  std::string __sz;
  void *v91[2];
  char v92;
  std::string **v93;
  char v94;
  std::string v95;
  uint64_t v96;
  std::string v97;
  std::string v98;
  std::string v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v91, "reduce");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - **(_QWORD **)(a3 + 16)) >> 3), 1uLL, (uint64_t)v91, 1);
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 3), 1uLL, (uint64_t)v91, 0);
  v6 = **(_QWORD **)(a3 + 8);
  v7 = **(_QWORD **)(a3 + 16);
  Espresso::blob_grad_contrib_name((uint64_t)&__sz, v7, a3);
  v8 = Espresso::sequential_builder::blob_shape(a2, v6);
  v9 = *((_OWORD *)v8 + 1);
  v10 = *((_QWORD *)v8 + 4);
  v84 = *(_OWORD *)v8;
  v85 = v9;
  v86 = v10;
  v87 = 0;
  v89 = 0;
  v88 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v87, *((const void **)v8 + 5), *((_QWORD *)v8 + 6), (uint64_t)(*((_QWORD *)v8 + 6) - *((_QWORD *)v8 + 5)) >> 2);
  v11 = Espresso::sequential_builder::blob_shape(a2, v7);
  v12 = *((_OWORD *)v11 + 1);
  v13 = *((_QWORD *)v11 + 4);
  v78 = *(_OWORD *)v11;
  v79 = v12;
  v80 = v13;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v81, *((const void **)v11 + 5), *((_QWORD *)v11 + 6), (uint64_t)(*((_QWORD *)v11 + 6) - *((_QWORD *)v11 + 5)) >> 2);
  if (*(_DWORD *)(a1 + 280) > 1u)
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("reduce_grad with mode other than REDUCE_MODE_SUM and REDUCE_MODE_AVG is not implemented");
  v74[0] = -1;
  v74[1] = -1;
  v74[2] = 0xFFFFFFFF00000001;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v14 = *(_OWORD *)v6;
    v99.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v14;
  }
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  v97.__r_.__value_.__s.__data_[8] = 0;
  v71 = (std::string *)operator new(0x18uLL);
  v72 = (char *)v71;
  v73 = (char *)&v71[1];
  v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v73, (__int128 *)&v99, &v100, v71);
  v72 = (char *)v15;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v99.__r_.__value_.__l.__data_);
    v15 = (std::string *)v72;
  }
  v77 = 0;
  v75 = 1;
  if (v15 >= (std::string *)v73)
  {
    v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v71, v7);
  }
  else
  {
    if (*(char *)(v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      v16 = *(_OWORD *)v7;
      v15->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    }
    v17 = v15 + 1;
  }
  v72 = (char *)v17;
  if (*(_DWORD *)(a1 + 280))
  {
    if (*(char *)(v6 + 23) >= 0)
      v18 = *(unsigned __int8 *)(v6 + 23);
    else
      v18 = *(_QWORD *)(v6 + 8);
    v19 = &v62;
    std::string::basic_string[abi:ne180100]((uint64_t)&v62, v18 + 12);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = (std::string *)v62.__r_.__value_.__r.__words[0];
    if (v18)
    {
      if (*(char *)(v6 + 23) >= 0)
        v20 = (const std::string::value_type *)v6;
      else
        v20 = *(const std::string::value_type **)v6;
      memmove(v19, v20, v18);
    }
    strcpy((char *)v19 + v18, "/broadcasted");
    std::string::basic_string[abi:ne180100]<0>(&v99, "broadcast");
    v21 = *(_QWORD *)a3;
    v58 = 0;
    v59 = 0;
    v57 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v57, (uint64_t)v71, (uint64_t)v72, 0xAAAAAAAAAAAAAAABLL * ((v72 - (char *)v71) >> 3));
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v97, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
    else
      v97 = v62;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    v53.__r_.__value_.__s.__data_[8] = 0;
    v54 = (std::string *)operator new(0x18uLL);
    v55 = v54;
    v56 = v54 + 1;
    v55 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v56, (__int128 *)&v97, (__int128 *)&v98, v54);
    Espresso::sequential_builder::add<Espresso::broadcast_params_t>(&v60, (uint64_t *)a2, (uint64_t)&v99, v21, (uint64_t)v74, v57, v58, (uint64_t *)&v54);
    v23 = v61;
    if (v61)
    {
      p_shared_owners = (unint64_t *)&v61->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    Espresso::get_blob_count((uint64_t)&v53, (uint64_t *)a2, v7);
    Espresso::get_blob_count((uint64_t)&v52, (uint64_t *)a2, **(_QWORD **)(a3 + 24));
    v99.__r_.__value_.__r.__words[2] = 897988541;
    LOBYTE(v100) = 0;
    v101 = 0;
    v99.__r_.__value_.__r.__words[0] = 102;
    v99.__r_.__value_.__l.__size_ = 1065353216;
    v26 = *(char **)a3;
    if (*(char *)(*(_QWORD *)a3 + 23) >= 0)
      v27 = *(unsigned __int8 *)(*(_QWORD *)a3 + 23);
    else
      v27 = *(_QWORD *)(*(_QWORD *)a3 + 8);
    v28 = &v51;
    std::string::basic_string[abi:ne180100]((uint64_t)&v51, v27 + 6);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = (std::string *)v51.__r_.__value_.__r.__words[0];
    if (v27)
    {
      if (v26[23] >= 0)
        v29 = v26;
      else
        v29 = *(char **)v26;
      memmove(v28, v29, v27);
    }
    strcpy((char *)v28 + v27, "/ratio");
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v97, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
    else
      v97 = v52;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v98, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
    else
      v98 = v53;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    v95.__r_.__value_.__s.__data_[8] = 0;
    v44 = (std::string *)operator new(0x30uLL);
    v45 = v44;
    v46 = v44 + 2;
    v45 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v46, (__int128 *)&v97, (__int128 *)&v99, v44);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v95, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
    else
      v95 = v51;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v93 = &v41;
    v94 = 0;
    v41 = (std::string *)operator new(0x18uLL);
    v42 = v41;
    v43 = v41 + 1;
    v42 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v43, (__int128 *)&v95, (__int128 *)&v96, v41);
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v49, (uint64_t *)a2, (uint64_t)__p, (uint64_t)&v51, (uint64_t)&v99, (uint64_t)v44, (uint64_t)v45, (uint64_t *)&v41);
    v30 = v50;
    if (v50)
    {
      v31 = (unint64_t *)&v50->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v93 = &v41;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v98.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v97 + i * 8 + 24));
    }
    if (v48 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v38, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    else
      v38 = __sz;
    Espresso::sequential_builder::elementwise_op(1u, (uint64_t *)a2, (uint64_t)&v62, (uint64_t)&v51, (uint64_t)&v38, (uint64_t)&v39);
    if (v40 < 0)
      operator delete(v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    {
      v34 = (void *)v62.__r_.__value_.__r.__words[0];
LABEL_95:
      operator delete(v34);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v99, "broadcast");
    v22 = *(_QWORD *)a3;
    v67 = 0;
    v68 = 0;
    v66 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v66, (uint64_t)v71, (uint64_t)v72, 0xAAAAAAAAAAAAAAABLL * ((v72 - (char *)v71) >> 3));
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v97, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    else
      v97 = __sz;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
    v62.__r_.__value_.__s.__data_[8] = 0;
    v63 = (std::string *)operator new(0x18uLL);
    v64 = v63;
    v65 = v63 + 1;
    v64 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v65, (__int128 *)&v97, (__int128 *)&v98, v63);
    Espresso::sequential_builder::add<Espresso::broadcast_params_t>(&v69, (uint64_t *)a2, (uint64_t)&v99, v22, (uint64_t)v74, v66, v67, (uint64_t *)&v63);
    v35 = v70;
    if (v70)
    {
      v36 = (unint64_t *)&v70->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    {
      v34 = (void *)v99.__r_.__value_.__r.__words[0];
      goto LABEL_95;
    }
  }
  v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__sz.__r_.__value_.__l.__data_);
  if (v92 < 0)
    operator delete(v91[0]);
}

void sub_191687E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a69;
  uint64_t v69;
  void *v71;

  *(_QWORD *)(v69 - 176) = &a50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 176));
  if (*(char *)(v69 - 105) < 0)
    operator delete(*(void **)(v69 - 128));
  *(_QWORD *)(v69 - 128) = &a55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 128));
  if (__p)
  {
    a69 = (uint64_t)__p;
    operator delete(__p);
  }
  v71 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v71;
    operator delete(v71);
  }
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  if (*(char *)(v69 - 225) < 0)
    operator delete(*(void **)(v69 - 248));
  _Unwind_Resume(a1);
}

void sub_1916880E8()
{
  JUMPOUT(0x1916880E0);
}

void sub_1916880F0()
{
  JUMPOUT(0x191688064);
}

void sub_1916880F8()
{
  JUMPOUT(0x191688074);
}

void Espresso::sequential_builder::add<Espresso::broadcast_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1916882F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::get_blob_count(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  size_t v6;
  std::string *v7;
  const std::string::value_type *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  size_t v12;
  std::string::value_type *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::string v39;
  uint64_t v40;
  std::string **v41;
  char v42;
  std::string v43;
  uint64_t v44;
  std::string v45;
  uint64_t v46;
  std::string v47;
  __int128 v48;

  *(_QWORD *)&v48 = *MEMORY[0x1E0C80C00];
  v40 = 0x1FFFFFFFFLL;
  if (*(char *)(a3 + 23) >= 0)
    v6 = *(unsigned __int8 *)(a3 + 23);
  else
    v6 = *(_QWORD *)(a3 + 8);
  v7 = &v39;
  std::string::basic_string[abi:ne180100]((uint64_t)&v39, v6 + 6);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*(char *)(a3 + 23) >= 0)
      v8 = (const std::string::value_type *)a3;
    else
      v8 = *(const std::string::value_type **)a3;
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "/shape");
  std::string::basic_string[abi:ne180100]<0>(__p, "get_shape");
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v47 = *(std::string *)a3;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  v45.__r_.__value_.__s.__data_[8] = 0;
  v34 = (std::string *)operator new(0x18uLL);
  v35 = v34;
  v36 = v34 + 1;
  v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, (__int128 *)&v47, &v48, v34);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v45, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  else
    v45 = v39;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  v43.__r_.__value_.__s.__data_[8] = 0;
  v31 = (std::string *)operator new(0x18uLL);
  v32 = v31;
  v33 = v31 + 1;
  v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v33, (__int128 *)&v45, (__int128 *)&v46, v31);
  Espresso::sequential_builder::add<Espresso::get_shape_params_t>(&v37, a2, (uint64_t)__p, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)v34, (uint64_t)v35, (uint64_t *)&v31);
  v9 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  v27 = 0;
  v28 = 0;
  v29 = 0xFFFFFFFF00000000;
  v30 = 0;
  __p[0] = (void *)0x358637BD00000002;
  __p[1] = (void *)0x10000001FLL;
  if (*(char *)(a3 + 23) >= 0)
    v12 = *(unsigned __int8 *)(a3 + 23);
  else
    v12 = *(_QWORD *)(a3 + 8);
  std::string::basic_string[abi:ne180100](a1, v12 + 6);
  if (*(char *)(a1 + 23) >= 0)
    v13 = (std::string::value_type *)a1;
  else
    v13 = *(std::string::value_type **)a1;
  if (v12)
  {
    if (*(char *)(a3 + 23) >= 0)
      v14 = (const void *)a3;
    else
      v14 = *(const void **)a3;
    memmove(v13, v14, v12);
  }
  strcpy(&v13[v12], "/count");
  std::string::basic_string[abi:ne180100]<0>(&v47, "reduce");
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v45, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  else
    v45 = v39;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  v43.__r_.__value_.__s.__data_[8] = 0;
  v21 = (std::string *)operator new(0x18uLL);
  v22 = v21;
  v23 = v21 + 1;
  v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v23, (__int128 *)&v45, (__int128 *)&v46, v21);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v43 = *(std::string *)a1;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v41 = &v18;
  v42 = 0;
  v18 = (std::string *)operator new(0x18uLL);
  v19 = v18;
  v20 = v18 + 1;
  v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, (__int128 *)&v43, (__int128 *)&v44, v18);
  Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v24, a2, (uint64_t)&v47, a1, (uint64_t)__p, (uint64_t)v21, (uint64_t)v22, (uint64_t *)&v18);
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v41 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
}

void sub_191688838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)(v40 - 144) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 144));
  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  if (*(char *)(v39 + 23) < 0)
    operator delete(*(void **)v39);
  if (a39 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191688984()
{
  JUMPOUT(0x19168897CLL);
}

void Espresso::sequential_builder::add<Espresso::get_shape_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_191688B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::generic_transpose_kernel::build_grads_for_inputs(int *a1, uint64_t *a2, uint64_t a3)
{
  __int128 **v3;
  __int128 *v4;
  __int128 v8;
  std::vector<int>::pointer begin;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[2];
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;
  int v27;
  std::vector<int> v28;
  std::string v29;
  std::string v30;
  std::string **v31;
  char v32;
  std::string v33;
  __int128 v34;

  *(_QWORD *)&v34 = *MEMORY[0x1E0C80C00];
  v3 = *(__int128 ***)(a3 + 16);
  v4 = *v3;
  if (*v3 == v3[1] || **(_QWORD **)(a3 + 24) == *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8))
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("No input given to transpose layer.");
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v8 = *v4;
    v30.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v8;
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), (uint64_t)&v30))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v29, (std::string::size_type)&v30, a3);
    std::vector<int>::vector(&v28, 5uLL);
    begin = v28.__begin_;
    v28.__begin_[a1[70]] = 0;
    begin[a1[71]] = 1;
    begin[a1[72]] = 2;
    begin[a1[73]] = 3;
    begin[a1[74]] = 4;
    v10 = begin[4];
    v26 = *(_OWORD *)begin;
    v27 = v10;
    std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
    v12 = *(_QWORD *)a3;
    v11 = *(uint64_t **)(a3 + 8);
    v20 = 0;
    v21 = 0;
    v19 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, *v11, v11[1], 0xAAAAAAAAAAAAAAABLL * ((v11[1] - *v11) >> 3));
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v33, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
    else
      v33 = v29;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v31 = &v16;
    v32 = 0;
    v16 = (std::string *)operator new(0x18uLL);
    v17 = v16;
    v18 = v16 + 1;
    v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (__int128 *)&v33, &v34, v16);
    Espresso::sequential_builder::add<Espresso::transpose_params_t>(&v24, a2, (uint64_t)__p, v12, (uint64_t)&v26, v19, v20, (uint64_t *)&v16);
    v13 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v31 = &v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
    if (v23 < 0)
      operator delete(__p[0]);
    if (v28.__begin_)
    {
      v28.__end_ = v28.__begin_;
      operator delete(v28.__begin_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_191688EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  *(_QWORD *)(v36 - 80) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 80));
  if (a21 < 0)
    operator delete(__p);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  if (a36 < 0)
    operator delete(a31);
  if (*(char *)(v36 - 105) < 0)
    operator delete(*(void **)(v36 - 128));
  _Unwind_Resume(a1);
}

const char *Espresso::generic_prediction_smoothing_kernel::kernel_type_str(Espresso::generic_prediction_smoothing_kernel *this)
{
  return "prediction_smoothing";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::prediction_smoothing_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::generic_space_to_depth_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, _OWORD **a2@<X1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  signed int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  std::runtime_error *exception;
  uint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::runtime_error *v19;
  std::string *v20;
  __int128 v21;
  std::runtime_error *v22;
  std::string v23;
  int __val[4];
  __int128 v25;
  uint64_t v26;
  void *v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE v30[32];
  uint64_t v31;
  void *__p;
  void *v33;
  uint64_t v34;
  __int128 v35;

  *((_QWORD *)&v35 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  *(_OWORD *)__val = **a2;
  v25 = v7;
  v26 = v6;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v27, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  v8 = *(_DWORD *)(a1 + 280);
  if (v8 <= 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v15 = a1;
    v16 = exception;
    std::to_string(&v23, *(_DWORD *)(v15 + 280));
    v17 = std::string::insert(&v23, 0, "Invalid block_size ");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    *(_QWORD *)&v30[16] = *((_QWORD *)&v17->__r_.__value_.__l + 2);
    *(_OWORD *)v30 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v16, (const std::string *)v30);
    __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = v8 * v8;
  if (*(_DWORD *)(a1 + 284))
  {
    v10 = __val[2] / v9;
    if (__val[2] != __val[2] / v9 * v9)
    {
      v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v23, __val[2]);
      v20 = std::string::insert(&v23, 0, "Shape error b.k=");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      *(_QWORD *)&v30[16] = *((_QWORD *)&v20->__r_.__value_.__l + 2);
      *(_OWORD *)v30 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v19, (const std::string *)v30);
      __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *(int32x2_t *)__val = vmul_s32(*(int32x2_t *)__val, vdup_n_s32(v8));
    __val[2] /= v9;
    if (v10 <= 0)
    {
LABEL_15:
      v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v22, "Zero shape error");
      __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    v11 = __val[0] / v8;
    v12 = __val[1] / v8;
    __val[0] = v11;
    __val[1] = v12;
    __val[2] *= v9;
    if (v11 <= 0 || v12 <= 0)
      goto LABEL_15;
  }
  *(_OWORD *)v30 = *(_OWORD *)__val;
  *(_OWORD *)&v30[16] = v25;
  v31 = v26;
  __p = 0;
  v33 = 0;
  v34 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v27, (uint64_t)v28, (v28 - (_BYTE *)v27) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v23.__r_.__value_.__s.__data_[8] = 0;
  v13 = (char *)operator new(0x40uLL);
  *a3 = v13;
  a3[1] = v13;
  a3[2] = v13 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)v30, &v35, (uint64_t)v13);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

void sub_191689284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v33;
  int v34;

  if (a29 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v34 & 1) == 0)
    {
LABEL_8:
      if (a21)
        operator delete(a21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

void Espresso::generic_space_to_batch_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  std::runtime_error *exception;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  std::runtime_error *v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  void *__p;
  _BYTE *v33;
  uint64_t v34;
  _BYTE v35[32];
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  __int128 v40;

  *((_QWORD *)&v40 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  v29 = **a2;
  v30 = v7;
  v31 = v6;
  __p = 0;
  v33 = 0;
  v34 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  v8 = 0;
  v9 = a1 + 280;
  v10 = 1;
  do
  {
    v11 = *(_DWORD *)(v9 + 4 * v8);
    if (!v11)
      break;
    if (v11 < 0)
    {
      v14 = v8;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v26, v14);
      v16 = std::string::insert(&v26, 0, "Invalid block_shape[");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v18 = std::string::append(&v27, "] ");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v25, *(_DWORD *)(v9 + 4 * v14));
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v25;
      else
        v20 = (std::string *)v25.__r_.__value_.__r.__words[0];
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      else
        size = v25.__r_.__value_.__l.__size_;
      v22 = std::string::append(&v28, (const std::string::value_type *)v20, size);
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      *(_QWORD *)&v35[16] = *((_QWORD *)&v22->__r_.__value_.__l + 2);
      *(_OWORD *)v35 = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)v35);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v10 *= v11;
    ++v8;
  }
  while (v8 != 3);
  if (*(_BYTE *)(a1 + 316))
  {
    *(int32x2_t *)&v29 = vrev64_s32(vmla_s32(vneg_s32(vadd_s32(*(int32x2_t *)(a1 + 292), *(int32x2_t *)(a1 + 304))), *(int32x2_t *)(a1 + 280), (int32x2_t)__PAIR64__(v29, DWORD1(v29))));
    SHIDWORD(v29) /= v10;
  }
  else
  {
    v12 = (*(_DWORD *)(a1 + 292) + DWORD1(v29) + *(_DWORD *)(a1 + 304)) / *(_DWORD *)(a1 + 280);
    LODWORD(v29) = (*(_DWORD *)(a1 + 296) + (int)v29 + *(_DWORD *)(a1 + 308)) / *(_DWORD *)(a1 + 284);
    DWORD1(v29) = v12;
    HIDWORD(v29) *= v10;
    if ((int)v29 <= 0 || v12 <= 0)
    {
      v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v24, "Zero shape error");
      __cxa_throw(v24, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  *(_OWORD *)v35 = v29;
  *(_OWORD *)&v35[16] = v30;
  v36 = v31;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v37, __p, (uint64_t)v33, (v33 - (_BYTE *)__p) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v28.__r_.__value_.__s.__data_[8] = 0;
  v13 = (char *)operator new(0x40uLL);
  *a3 = v13;
  a3[1] = v13;
  a3[2] = v13 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)v35, &v40, (uint64_t)v13);
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
}

void sub_191689680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  void *v41;

  __cxa_free_exception(v41);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::generic_slice_kernel::build_grads_for_inputs(uint64_t a1, Espresso::sequential_builder *a2, uint64_t a3)
{
  _QWORD *v6;
  size_t size;
  std::string *v8;
  std::string *v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  __int128 *v13;
  std::string *v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  size_t v18;
  __int128 *v19;
  std::string *v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t j;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t i;
  std::string *v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::string *v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  std::string *v45;
  std::string *v46;
  void *v47[2];
  char v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  std::string v54;
  void *__p;
  char v56;
  std::string v57;
  std::string v58;
  void *v59[2];
  char v60;
  std::string **v61;
  char v62;
  __int128 v63;
  char v64;
  std::string v65;
  std::string v66;
  std::string v67;
  __int128 v68;

  *(_QWORD *)&v68 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v59, "slice");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 3), 1uLL, (uint64_t)v59, 0);
  v6 = **(_QWORD ***)(a3 + 16);
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), (uint64_t)v6))goto LABEL_85;
  Espresso::blob_grad_contrib_name((uint64_t)&v58, (std::string::size_type)v6, a3);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    size = v58.__r_.__value_.__l.__size_;
  v8 = &v57;
  std::string::basic_string[abi:ne180100]((uint64_t)&v57, size + 10);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v57.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v58;
    else
      v9 = (std::string *)v58.__r_.__value_.__r.__words[0];
    memmove(v8, v9, size);
  }
  strcpy((char *)v8 + size, "@container");
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v54, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    v54 = v57;
  Espresso::sequential_builder::constant_like(a2, v6, (uint64_t)&v54, (uint64_t)&__p, 0.0);
  if (v56 < 0)
    operator delete(__p);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  v52 = *(_QWORD *)(a1 + 296);
  v51 = *(_OWORD *)(a1 + 280);
  v53 = 0;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - **(_QWORD **)(a3 + 16)) >> 3);
  if (v10 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "slice_update");
    v17 = *(_QWORD *)a3;
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    else
      v18 = v58.__r_.__value_.__l.__size_;
    v19 = &v63;
    std::string::basic_string[abi:ne180100]((uint64_t)&v63, v18 + 10);
    if (v64 < 0)
      v19 = (__int128 *)v63;
    if (v18)
    {
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v58;
      else
        v20 = (std::string *)v58.__r_.__value_.__r.__words[0];
      memmove(v19, v20, v18);
    }
    strcpy((char *)v19 + v18, "@container");
    v21 = **(__int128 ***)(a3 + 8);
    if (*((char *)v21 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
    }
    else
    {
      v22 = *v21;
      v65.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 2);
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v22;
    }
    v23 = **(_QWORD **)(a3 + 16);
    if (*(char *)(v23 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(v23 + 24), *(_QWORD *)(v23 + 32));
    }
    else
    {
      v24 = *(_OWORD *)(v23 + 24);
      v66.__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 + 40);
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v24;
    }
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    v67.__r_.__value_.__s.__data_[8] = 0;
    v36 = (std::string *)operator new(0x48uLL);
    v37 = v36;
    v38 = v36 + 3;
    v37 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v38, &v63, (__int128 *)&v67, v36);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v67, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
    else
      v67 = v58;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v61 = &v33;
    v62 = 0;
    v33 = (std::string *)operator new(0x18uLL);
    v34 = v33;
    v35 = v33 + 1;
    v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v35, (__int128 *)&v67, &v68, v33);
    Espresso::sequential_builder::add<Espresso::slice_update_params_t>(&v39, (uint64_t *)a2, (uint64_t)v47, v17, (uint64_t)&v51, (uint64_t)v36, (uint64_t)v37, (uint64_t *)&v33);
    v29 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v61 = &v33;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    for (i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v66.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v66.__r_.__value_.__l.__data_ + i * 8));
    }
    goto LABEL_79;
  }
  if (v10 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "slice_update");
    v11 = *(_QWORD *)a3;
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    else
      v12 = v58.__r_.__value_.__l.__size_;
    v13 = &v63;
    std::string::basic_string[abi:ne180100]((uint64_t)&v63, v12 + 10);
    if (v64 < 0)
      v13 = (__int128 *)v63;
    if (v12)
    {
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v58;
      else
        v14 = (std::string *)v58.__r_.__value_.__r.__words[0];
      memmove(v13, v14, v12);
    }
    strcpy((char *)v13 + v12, "@container");
    v15 = **(__int128 ***)(a3 + 8);
    if (*((char *)v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
    }
    else
    {
      v16 = *v15;
      v65.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v16;
    }
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    v67.__r_.__value_.__s.__data_[8] = 0;
    v44 = (std::string *)operator new(0x30uLL);
    v45 = v44;
    v46 = v44 + 2;
    v45 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v46, &v63, (__int128 *)&v66, v44);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v67, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
    else
      v67 = v58;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v61 = &v41;
    v62 = 0;
    v41 = (std::string *)operator new(0x18uLL);
    v42 = v41;
    v43 = v41 + 1;
    v42 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v43, (__int128 *)&v67, &v68, v41);
    Espresso::sequential_builder::add<Espresso::slice_update_params_t>(&v49, (uint64_t *)a2, (uint64_t)v47, v11, (uint64_t)&v51, (uint64_t)v44, (uint64_t)v45, (uint64_t *)&v41);
    v25 = v50;
    if (v50)
    {
      v26 = (unint64_t *)&v50->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v61 = &v41;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    for (j = 0; j != -6; j -= 3)
    {
      if (SHIBYTE(v65.__r_.__value_.__r.__words[j + 2]) < 0)
        operator delete(*(void **)((char *)&v65.__r_.__value_.__l.__data_ + j * 8));
    }
LABEL_79:
    if (v48 < 0)
      operator delete(v47[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
LABEL_85:
  if (v60 < 0)
    operator delete(v59[0]);
}

void sub_191689E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;

  *(_QWORD *)(v50 - 96) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 96));
  v52 = 0;
  v53 = v50 - 168;
  while (1)
  {
    if (*(char *)(v53 + v52 + 71) < 0)
      operator delete(*(void **)(v53 + v52 + 48));
    v52 -= 24;
    if (v52 == -72)
    {
      if (a29 < 0)
        operator delete(__p);
      if (a50 < 0)
        operator delete(a45);
      if (*(char *)(v50 - 209) < 0)
        operator delete(*(void **)(v50 - 232));
      if (*(char *)(v50 - 185) < 0)
        operator delete(*(void **)(v50 - 208));
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::sequential_builder::add<Espresso::slice_update_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_19168A238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::generic_broadcast_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  __int128 v19;
  const void *v20;
  char *v21;
  char *v22;
  __int128 v23[2];
  uint64_t v24;
  void *__p;
  void *v26;
  uint64_t v27;
  __int128 v28;
  _BYTE v29[24];
  void *v30[2];
  uint64_t v31;
  __int128 v32;

  *((_QWORD *)&v32 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = (a2[1] - *a2) >> 6;
  if (v6 != 1)
  {
    if (v6 == 2 && !*(_BYTE *)(a1 + 312))
    {
      v19 = *(_OWORD *)(v5 + 80);
      v28 = *(_OWORD *)(v5 + 64);
      *(_OWORD *)v29 = v19;
      v20 = *(const void **)(v5 + 104);
      *(_QWORD *)&v29[16] = *(_QWORD *)(v5 + 96);
      v30[0] = 0;
      v30[1] = 0;
      v31 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v30, v20, *(_QWORD *)(v5 + 112), (uint64_t)(*(_QWORD *)(v5 + 112) - (_QWORD)v20) >> 2);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(_QWORD *)&v23[0] = a3;
      BYTE8(v23[0]) = 0;
      v21 = (char *)operator new(0x40uLL);
      *a3 = v21;
      a3[1] = v21;
      a3[2] = v21 + 64;
      v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v28, &v32, (uint64_t)v21);
    }
    else
    {
      v31 = 0;
      *(_OWORD *)v30 = 0u;
      *(_OWORD *)&v29[8] = 0u;
      *(_QWORD *)&v7 = 0x100000001;
      *((_QWORD *)&v7 + 1) = 0x100000001;
      v28 = v7;
      *(_QWORD *)v29 = 0xFFFFFFFF00000001;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      *(_QWORD *)&v23[0] = a3;
      BYTE8(v23[0]) = 0;
      v8 = (char *)operator new(0x40uLL);
      *a3 = v8;
      a3[1] = v8;
      a3[2] = v8 + 64;
      v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v28, &v32, (uint64_t)v8);
    }
    a3[1] = v9;
    goto LABEL_30;
  }
  v10 = *(_OWORD *)(v5 + 16);
  v11 = *(_QWORD *)(v5 + 32);
  v28 = *(_OWORD *)v5;
  *(_OWORD *)v29 = v10;
  *(_QWORD *)&v29[16] = v11;
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v30, *(const void **)(v5 + 40), *(_QWORD *)(v5 + 48), (uint64_t)(*(_QWORD *)(v5 + 48) - *(_QWORD *)(v5 + 40)) >> 2);
  v12 = *(_DWORD *)(a1 + 280);
  if (v12 >= 1)
  {
    v13 = v28;
    if ((_DWORD)v28 != 1 && v12 != (_DWORD)v28)
    {
      v22 = "Bcast shape error 1 != w: %d";
      goto LABEL_39;
    }
    LODWORD(v28) = *(_DWORD *)(a1 + 280);
  }
  v14 = *(_DWORD *)(a1 + 284);
  if (v14 >= 1)
  {
    v13 = DWORD1(v28);
    if (DWORD1(v28) != 1 && v14 != DWORD1(v28))
    {
      v22 = "Bcast shape error 1 != h: %d";
      goto LABEL_39;
    }
    DWORD1(v28) = *(_DWORD *)(a1 + 284);
  }
  v15 = *(_DWORD *)(a1 + 288);
  if (v15 >= 1)
  {
    v13 = DWORD2(v28);
    if (DWORD2(v28) != 1 && v15 != DWORD2(v28))
    {
      v22 = "Bcast shape error 1 != k: %d";
      goto LABEL_39;
    }
    DWORD2(v28) = *(_DWORD *)(a1 + 288);
  }
  v16 = *(_DWORD *)(a1 + 292);
  if (v16 >= 1)
  {
    v13 = HIDWORD(v28);
    if (HIDWORD(v28) != 1 && v16 != HIDWORD(v28))
    {
      v22 = "Bcast shape error 1 != n: %d";
      goto LABEL_39;
    }
    HIDWORD(v28) = *(_DWORD *)(a1 + 292);
  }
  v17 = *(_DWORD *)(a1 + 296);
  if (v17 >= 1)
  {
    v13 = *(unsigned int *)v29;
    if (*(_DWORD *)v29 == 1 || v17 == *(_DWORD *)v29)
    {
      *(_DWORD *)v29 = *(_DWORD *)(a1 + 296);
      goto LABEL_26;
    }
    v22 = "Bcast shape error 1 != seq: %d";
LABEL_39:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &>(v22, v13);
  }
LABEL_26:
  if (*(int *)(a1 + 300) >= 1)
    *(_DWORD *)&v29[4] = *(_DWORD *)(a1 + 300);
  v23[0] = v28;
  v23[1] = *(_OWORD *)v29;
  v24 = *(_QWORD *)&v29[16];
  __p = 0;
  v26 = 0;
  v27 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v30[0], (uint64_t)v30[1], ((char *)v30[1] - (char *)v30[0]) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v18 = (char *)operator new(0x40uLL);
  *a3 = v18;
  a3[1] = v18;
  a3[2] = v18 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v23, &v28, (uint64_t)v18);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
LABEL_30:
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
}

void sub_19168A5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = v26;
  *(_QWORD *)(v25 + 8) = v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a11);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &>(char *a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>(a1, a2);
}

_QWORD *Espresso::generic_cast_kernel::blob_options@<X0>(_QWORD *this@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  _QWORD *v5;

  if ((a2 & 1) != 0)
  {
    v4 = *((_DWORD *)this + 70);
    if ((v4 | 2) == 7)
    {
      *((_DWORD *)this + 71) = v4;
      v4 = 3;
      *((_DWORD *)this + 70) = 3;
    }
    v5 = operator new(0x70uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1E2DBE228;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *((_DWORD *)v5 + 12) = 1065353216;
    v5[7] = 0x1FFFFFFFFLL;
    v5[12] = 0;
    v5[13] = 0;
    v5[8] = 0;
    v5[9] = 0;
    *((_BYTE *)v5 + 88) = 0;
    v5[10] = 0;
    a3[1] = v5;
    *((_BYTE *)v5 + 32) = 1;
    *((_DWORD *)v5 + 9) = v4;
    v5[3] = &off_1E2D9B4D8;
    this = v5 + 3;
    *a3 = this;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

void Espresso::generic_cast_kernel::get_runtime_type_config(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v7;
  void **v8;
  uint64_t v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void **v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)&v16, *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  if (v17 != v16)
  {
    v7 = 0;
    do
    {
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 24))(&v14, a1, 1, v7);
      v8 = v14;
      if (v14)
      {
        if (*((_BYTE *)v14 + 8))
          *(_DWORD *)(v16 + 40 * v7 + 8) = *((_DWORD *)v14 + 3);
        if (*((_BYTE *)v8 + 16))
        {
          v9 = v16;
          v10 = (void **)(v16 + 40 * v7);
          *(_OWORD *)v10 = *(_OWORD *)(v8 + 3);
          if (v10 != v8 + 3)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v9 + 40 * v7 + 16), (char *)v8[5], (uint64_t)v8[6], ((_BYTE *)v8[6] - (_BYTE *)v8[5]) >> 2);
        }
      }
      v11 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      ++v7;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v17 - v16) >> 3) > v7);
  }
  std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<std::vector<Espresso::blob_numerical_properties> const&,std::vector<Espresso::blob_numerical_properties>&,0>(a4, a2, &v16);
  v14 = (void **)&v16;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](&v14);
}

void sub_19168A88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  a10 = (void **)&a12;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void Espresso::generic_compute_stats_kernel::top_shapes_for_bottom_shapes(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  __int128 v13[2];
  uint64_t v14;
  void *__p;
  void *v16;
  uint64_t v17;
  __int128 v18;

  *((_QWORD *)&v18 + 1) = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v5 = **a1;
  v6 = (*a1)[1];
  v7 = *((_QWORD *)*a1 + 4);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v8, *((const void **)v3 + 5), *((_QWORD *)v3 + 6), (uint64_t)(*((_QWORD *)v3 + 6) - *((_QWORD *)v3 + 5)) >> 2);
  *(_QWORD *)&v5 = 0x100000005;
  v13[0] = v5;
  v13[1] = v6;
  v14 = v7;
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v8, (uint64_t)v9, (v9 - (_BYTE *)v8) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v11 = a2;
  v12 = 0;
  v4 = (char *)operator new(0x40uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v13, &v18, (uint64_t)v4);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
}

void sub_19168A9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = v26;
  *(_QWORD *)(v25 + 8) = v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14)
    operator delete(a14);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_compute_stats_kernel::kernel_type_str(Espresso::generic_compute_stats_kernel *this)
{
  return "compute_stats";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::compute_stats_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::generic_patch_extractor_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  int v9;
  int v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int8x8_t v17;
  int v18;
  char *v19;
  std::runtime_error *exception;
  std::runtime_error *v21;
  std::string *v22;
  __int128 v23;
  std::string v24;
  std::string v25;
  __int128 v26;
  void *__p[2];
  uint64_t v28;
  __int128 v29;

  *((_QWORD *)&v29 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v7 = a2[1] - v5;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "generic_patch_extractor_kernel: requires at least one input");
    goto LABEL_24;
  }
  v9 = *(_DWORD *)(a1 + 280);
  if (v9)
  {
    if (v7 > 0x7F)
    {
      v10 = *(_DWORD *)(v5 + 76);
      if ((*(_BYTE *)(v5 + 72) & 1) != 0)
        v10 *= *(_DWORD *)(v5 + 12);
      goto LABEL_12;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "generic_patch_extractor_kernel: sparse mode requires two inputs");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 328))(&v25, a1);
  size = (std::__shared_weak_count *)v25.__r_.__value_.__l.__size_;
  v10 = *(_DWORD *)(v25.__r_.__value_.__r.__words[0] + 20);
  if (v25.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v25.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v5 = *a2;
  v9 = *(_DWORD *)(a1 + 280);
LABEL_12:
  v14 = *(_DWORD *)(v5 + 8);
  v15 = (v9 & 0xFFFFFFFE) == 6;
  v16 = *(_DWORD *)(a1 + 292);
  if (v16 != 3)
  {
    if (v16 != 2)
    {
      v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v24, *(_DWORD *)(a1 + 292));
      v22 = std::string::insert(&v24, 0, "generic_patch_extractor_kernel: invalid axis=");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v21, &v25);
      __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v14 *= v10;
    v10 = 1;
  }
  v17 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v15), 0x1FuLL)), (int8x8_t)0x100000001, *(int8x8_t *)(a1 + 284));
  v18 = *(_DWORD *)(v5 + 20);
  if (v18 == -1)
  {
    if (*(_DWORD *)(v5 + 16) == 1)
      v18 = 4;
    else
      v18 = 5;
  }
  v25.__r_.__value_.__l.__data_ = (std::string::pointer)v17;
  v25.__r_.__value_.__l.__size_ = __PAIR64__(v10, v14);
  LODWORD(v25.__r_.__value_.__r.__words[2]) = 1;
  HIDWORD(v25.__r_.__value_.__r.__words[2]) = v18;
  v26 = 0u;
  *(_OWORD *)__p = 0u;
  v28 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v24.__r_.__value_.__s.__data_[8] = 0;
  v19 = (char *)operator new(0x40uLL);
  *a3 = v19;
  a3[1] = v19;
  a3[2] = v19 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)&v25, &v29, (uint64_t)v19);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19168ACE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v25;
  int v26;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v26 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

const char *Espresso::generic_patch_extractor_kernel::kernel_type_str(Espresso::generic_patch_extractor_kernel *this)
{
  return "patch_extractor";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::patch_extractor_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::generic_patch_extractor_kernel::get_coordinates_for_dense_mode(Espresso::generic_patch_extractor_kernel *this@<X0>, const Espresso::layer_shape *a2@<X1>, uint64_t *a3@<X8>, int8x16_t a4@<Q3>)
{
  int v5;
  int v7;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int32x4_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int32x4_t v24;
  int8x16_t v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  std::runtime_error *exception;

  v5 = *((_DWORD *)this + 76);
  if (v5 <= 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "generic_patch_extractor_kernel: invalid dense_stride_x");
    goto LABEL_39;
  }
  v7 = *((_DWORD *)this + 77);
  if (v7 < 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "generic_patch_extractor_kernel: invalid dense_stride_y");
LABEL_39:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = *((_DWORD *)a2 + 4) * *((_DWORD *)a2 + 3);
  if (v9 < 1)
  {
    v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = *((_DWORD *)this + 74);
    v13 = *(_DWORD *)a2;
    v14 = *((_DWORD *)a2 + 1);
    v15.i64[0] = 0x100000001;
    v15.i64[1] = 0x100000001;
    do
    {
      if (v12 < v13)
      {
        v16 = *((_DWORD *)this + 75);
        v17 = v7 + v16;
        if (v14 <= v7 + v16)
          v18 = v7 + v16;
        else
          v18 = v14;
        if (v17 >= v14)
          v19 = 1;
        else
          v19 = 2;
        v20 = v18 - (v17 < v14) - v17;
        v21 = *((_DWORD *)this + 74);
        do
        {
          if (v16 < v14)
          {
            v22 = 0;
            v23 = v19 + v20 / v7;
            v24 = (int32x4_t)v11;
            do
            {
              v25 = (int8x16_t)v24;
              v26 = v22;
              v24 = vaddq_s32(v24, v15);
              v22 += 4;
            }
            while (((v23 + 3) & 0xFFFFFFFC) != v22);
            a4.i32[0] = v23 - 1;
            a4 = (int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v26), (int8x16_t)xmmword_191A761E0), (uint32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.i8, 0));
            v11 = vaddvq_s32((int32x4_t)vbslq_s8(a4, v25, (int8x16_t)v24));
          }
          v21 += v5;
        }
        while (v21 < v13);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a3, 1, 1, 5, v11);
  v27 = *((_DWORD *)this + 71);
  v28 = *((_DWORD *)this + 72);
  if (*((_DWORD *)this + 70) == 2)
  {
    if (*((int *)this + 78) > 0)
      v27 = *((_DWORD *)this + 78);
    if (*((int *)this + 79) > 0)
      v28 = *((_DWORD *)this + 79);
  }
  v29 = *((_DWORD *)a2 + 4) * *((_DWORD *)a2 + 3);
  if (v29 >= 1)
  {
    v30 = 0;
    v31 = 0;
    v32 = *((_DWORD *)this + 74);
    v33 = *(_DWORD *)a2;
    v34 = *((_DWORD *)a2 + 1);
    v35 = *a3;
    do
    {
      if (v32 < v33)
      {
        v36 = *((_DWORD *)this + 75);
        v37 = *((_DWORD *)this + 76);
        v38 = v32;
        do
        {
          if (v36 < v34)
          {
            v39 = *(_QWORD *)(v35 + 24);
            v40 = *((_DWORD *)this + 77);
            v41 = v31;
            v42 = 4 * v31 + 4;
            v43 = v36;
            do
            {
              *(float *)(v39 + 4 * (v42 - 3)) = (float)v38;
              *(float *)(v39 + 4 * (v42 - 2)) = (float)v43;
              *(float *)(v39 + 4 * (v42 - 1)) = (float)(v38 + v27);
              *(float *)(v39 + 4 * v42) = (float)(v28 + v43);
              ++v41;
              v42 += 4;
              v43 += v40;
            }
            while (v43 < v34);
            v31 = v41;
          }
          v38 += v37;
        }
        while (v38 < v33);
      }
      ++v30;
    }
    while (v30 != v29);
  }
}

void sub_19168B000(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::generic_crop_and_resize_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  const void *v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  __int128 v14;
  const void *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  _BYTE *v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void *__p;
  void *v30;
  uint64_t v31;
  __int128 v32;

  *((_QWORD *)&v32 + 1) = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)*a2;
  if (!*(_DWORD *)(a1 + 280) && a2[1] - (_QWORD)v6 == 64)
    *(_DWORD *)(a1 + 280) = 1;
  v18 = *(_OWORD *)v6;
  v19 = *((_OWORD *)v6 + 1);
  v20 = v6[4];
  v21 = 0;
  v22 = 0;
  v23 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v21, (const void *)v6[5], v6[6], (uint64_t)(v6[6] - v6[5]) >> 2);
  switch(*(_DWORD *)(a1 + 280))
  {
    case 0:
      *(_QWORD *)&v18 = *(_QWORD *)(a1 + 284);
      v7 = (_QWORD *)*a2;
      v8 = *(_OWORD *)(*a2 + 80);
      v26 = *(_OWORD *)(*a2 + 64);
      v27 = v8;
      v9 = (const void *)v7[13];
      v28 = v7[12];
      __p = 0;
      v30 = 0;
      v31 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v9, v7[14], (uint64_t)(v7[14] - (_QWORD)v9) >> 2);
      if ((_DWORD)v27 != 1 && HIDWORD(v26) != 1)
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,unsigned long const&>("generic_crop_and_resize_kernel: One of RoI input's batch dimension or seq dimension must be 1. Instead they are %d %d.", HIDWORD(v26), v27);
      v10 = DWORD1(v26);
      if (DWORD1(v26) != 1)
      {
        v17 = "generic_crop_and_resize_kernel: RoI input's height dimension must be 1. Instead it is %d.";
        goto LABEL_36;
      }
      v10 = v26;
      if ((_DWORD)v26 != 1)
      {
        v17 = "generic_crop_and_resize_kernel: RoI input's width dimension must be 1. Instead it is %d.";
        goto LABEL_36;
      }
      v10 = DWORD2(v26);
      if ((DWORD2(v26) - 6) <= 0xFFFFFFFD)
      {
        v17 = "generic_crop_and_resize_kernel: RoI input's channel dimension must be either 4 or 5. Instead it is %d.";
LABEL_36:
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &>(v17, v10);
      }
      LODWORD(v19) = v27;
      if (DWORD2(v26) == 5)
        HIDWORD(v18) = 1;
LABEL_21:
      if (__p)
      {
        v30 = __p;
        operator delete(__p);
      }
LABEL_24:
      if (*(_BYTE *)(a1 + 312))
        SDWORD2(v18) /= (int)v18 * DWORD1(v18) / *(_DWORD *)(a1 + 316) / *(_DWORD *)(a1 + 316);
      v26 = v18;
      v27 = v19;
      v28 = v20;
      __p = 0;
      v30 = 0;
      v31 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v21, (uint64_t)v22, (v22 - (_BYTE *)v21) >> 2);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v24 = a3;
      v25 = 0;
      v16 = (char *)operator new(0x40uLL);
      *a3 = v16;
      a3[1] = v16;
      a3[2] = v16 + 64;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v26, &v32, (uint64_t)v16);
      if (__p)
      {
        v30 = __p;
        operator delete(__p);
      }
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      return;
    case 1:
      *(_QWORD *)&v18 = *(_QWORD *)(a1 + 284);
      goto LABEL_24;
    case 2:
      v11 = *(_DWORD *)(a1 + 288);
      if (v11 != -1)
      {
        if (v11 <= 1)
          v11 = 1;
        DWORD1(v18) = v11;
      }
      v12 = *(_DWORD *)(a1 + 284);
      if (v12 != -1)
      {
        if (v12 <= 1)
          v12 = 1;
        LODWORD(v18) = v12;
      }
      goto LABEL_24;
    case 3:
      v13 = (_QWORD *)*a2;
      v14 = *(_OWORD *)(*a2 + 80);
      v26 = *(_OWORD *)(*a2 + 64);
      v27 = v14;
      v15 = (const void *)v13[13];
      v28 = v13[12];
      __p = 0;
      v30 = 0;
      v31 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v15, v13[14], (uint64_t)(v13[14] - (_QWORD)v15) >> 2);
      *(_QWORD *)&v18 = *(_QWORD *)(a1 + 284);
      DWORD2(v18) = *(_DWORD *)(*a2 + 8);
      HIDWORD(v18) = DWORD1(v26);
      LODWORD(v19) = 1;
      goto LABEL_21;
    default:
      Espresso::throw_exception_selector<Espresso::generic_error>("generic_crop_and_resize_kernel: mode not valid");
  }
}

void sub_19168B330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL Espresso::generic_crop_and_resize_kernel::has_dynamic_top_shape(Espresso::generic_crop_and_resize_kernel *this)
{
  if (*((_DWORD *)this + 70) != 2)
    return 0;
  if (*((_DWORD *)this + 72))
    return *((_DWORD *)this + 71) == 0;
  return 1;
}

void Espresso::generic_dynamic_quantize_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  unint64_t v13;
  int v14;
  __int128 v15;
  _BYTE v16[24];
  void *__p[2];
  uint64_t v18;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 6);
  if (*(_DWORD *)(a1 + 284))
  {
    v18 = 0;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)&v16[8] = 0u;
    *(_QWORD *)&v6 = 0x100000001;
    *((_QWORD *)&v6 + 1) = 0x100000001;
    v15 = v6;
    *(_QWORD *)v16 = 0x100000001;
    v7 = a3[1];
    if (v7 >= a3[2])
    {
      v8 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, &v15);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, &v15);
      v8 = v7 + 64;
    }
    a3[1] = v8;
  }
  else
  {
    v9 = *a2;
    v10 = *((_QWORD *)*a2 + 4);
    v11 = (*a2)[1];
    v15 = **a2;
    *(_OWORD *)v16 = v11;
    *(_QWORD *)&v16[16] = v10;
    __p[0] = 0;
    __p[1] = 0;
    v18 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, *((const void **)v9 + 5), *((_QWORD *)v9 + 6), (uint64_t)(*((_QWORD *)v9 + 6) - *((_QWORD *)v9 + 5)) >> 2);
    v12 = *((_DWORD *)*a2 + 5);
    if (v12 == -1 || v12 >= 4)
      DWORD2(v15) = 1;
    else
      LODWORD(v15) = 1;
    v13 = a3[1];
    v14 = 3;
    do
    {
      if (v13 >= a3[2])
      {
        v13 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, &v15);
      }
      else
      {
        std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, &v15);
        v13 += 64;
      }
      a3[1] = v13;
      --v14;
    }
    while (v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_19168B530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_dynamic_quantize_kernel::number_of_top_blobs(Espresso::generic_dynamic_quantize_kernel *this)
{
  if (*((_DWORD *)this + 71))
    return 2;
  else
    return 4;
}

void Espresso::generic_quantized_gather_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  std::vector<int>::pointer v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  char *v17;
  _BYTE v18[20];
  int v19;
  std::vector<int> v20;
  std::vector<int> v21;
  _QWORD *v22;
  char v23;
  __int128 __x;
  int v25;
  void *__p;
  void *v27;
  __int128 v28;

  *(_QWORD *)&v28 = *MEMORY[0x1E0C80C00];
  memset(&v21, 0, sizeof(v21));
  v5 = *(unsigned int *)(a1 + 308);
  v6 = *(unsigned int *)(a1 + 304);
  v7 = operator new(0x10uLL);
  *v7 = v5;
  v7[1] = v6;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__x, *a2, 0);
  Espresso::layer_nd_shape::shape_vector(&v20, (uint64_t)&__x);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__x, *a2, 0);
  if (v25 == -1)
  {
    *(_DWORD *)v18 = 1;
    *(_QWORD *)&v18[12] = 0;
    *(_QWORD *)&v18[4] = 0;
    v19 = 1;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v18, 0, (uint64_t)&__x);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v22 = a3;
    v23 = 0;
    v8 = (char *)operator new(0x40uLL);
    *a3 = v8;
    a3[1] = v8;
    a3[2] = v8 + 64;
    v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &__x, &v28, (uint64_t)v8);
  }
  else
  {
    LODWORD(__x) = 0;
    std::vector<int>::resize(&v21, v25 + 1, (std::vector<int>::const_reference)&__x);
    begin = v20.__begin_;
    if (v20.__end_ == v20.__begin_)
    {
      end = v20.__begin_;
    }
    else
    {
      memmove(v21.__begin_, v20.__begin_, (char *)v20.__end_ - (char *)v20.__begin_);
      begin = v20.__begin_;
      end = v20.__end_;
    }
    v12 = v21.__begin_;
    *(std::vector<int>::pointer)((char *)v21.__begin_ + (char *)end - (char *)begin) = v7[1];
    memset(v18, 0, sizeof(v18));
    v13 = (char *)v21.__end_ - (char *)v12;
    if (v21.__end_ != v12)
    {
      v14 = v13 >> 2;
      if ((unint64_t)(v13 >> 2) <= 1)
        v14 = 1;
      v15 = (int *)v18;
      do
      {
        v16 = *v12++;
        *v15++ = v16;
        --v14;
      }
      while (v14);
    }
    v19 = (unint64_t)v13 >> 2;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v18, 0, (uint64_t)&__x);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v22 = a3;
    v23 = 0;
    v17 = (char *)operator new(0x40uLL);
    *a3 = v17;
    a3[1] = v17;
    a3[2] = v17 + 64;
    v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &__x, &v28, (uint64_t)v17);
  }
  a3[1] = v9;
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  if (v20.__begin_)
  {
    v20.__end_ = v20.__begin_;
    operator delete(v20.__begin_);
  }
  operator delete(v7);
  if (v21.__begin_)
  {
    v21.__end_ = v21.__begin_;
    operator delete(v21.__begin_);
  }
}

void sub_19168B7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = v28;
  *(_QWORD *)(v27 + 8) = v29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a12)
    operator delete(a12);
  operator delete(v26);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void Espresso::generic_spatial_transformer_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  char *v9;
  __int128 v10;
  unint64_t v11;
  __int128 v12;
  void *__p[2];
  uint64_t v14;
  __int128 v15;

  *(_QWORD *)&v15 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 300) >= 2u)
    Espresso::throw_exception_selector<Espresso::generic_error>("generic_spatial_transformer_kernel: padding_mode must be CONSTANT or CLAMP.");
  v4 = *a2;
  if ((unint64_t)(a2[1] - *a2) <= 0x7F)
    Espresso::throw_exception_selector<Espresso::generic_error>("generic_spatial_transformer_kernel: requires two inputs");
  v5 = *(_DWORD *)(v4 + 76);
  if ((*(_BYTE *)(v4 + 72) & 1) != 0)
    v5 *= *(_DWORD *)(v4 + 12);
  v6 = *(_QWORD *)(a1 + 284);
  v7 = *(_DWORD *)(v4 + 8);
  v8 = *(_DWORD *)(a1 + 292);
  if (v8 != 3)
  {
    if (v8 != 2)
      Espresso::throw_exception_selector<Espresso::generic_error,int>(v8);
    v7 *= v5;
    v5 = 1;
  }
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = __PAIR64__(v5, v7);
  v11 = 0xFFFFFFFF00000001;
  v12 = 0u;
  *(_OWORD *)__p = 0u;
  v14 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v9 = (char *)operator new(0x40uLL);
  *a3 = v9;
  a3[1] = v9;
  a3[2] = v9 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v10, &v15, (uint64_t)v9);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19168B980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::generic_error,int>(int a1)
{
  Espresso::throw_exception_with_format<Espresso::generic_error>("generic_spatial_transformer_kernel: invalid axis=%d", a1);
}

void Espresso::generic_topk_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v6;
  uint64_t *v7;
  __int128 v8;
  void *v9;
  __int128 *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  uint64_t v34;
  __int128 v35;
  void *v36;
  const char *v37;
  uint64_t *v38;
  char v39;
  signed int v40;
  __int128 v41;
  __int128 v42;
  uint64_t *v43;
  void *__p[2];
  uint64_t v45;
  __int128 v46;

  *((_QWORD *)&v46 + 1) = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = (uint64_t *)*((_QWORD *)*a2 + 4);
  v8 = (*a2)[1];
  v41 = **a2;
  v42 = v8;
  v43 = v7;
  __p[0] = 0;
  __p[1] = 0;
  v45 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, *((const void **)v6 + 5), *((_QWORD *)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 2);
  a3[2] = 0;
  *a3 = 0;
  a3[1] = 0;
  v38 = a3;
  v39 = 0;
  v9 = operator new(0x40uLL);
  *a3 = (uint64_t)v9;
  a3[1] = (uint64_t)v9;
  a3[2] = (uint64_t)v9 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v41, &v46, (uint64_t)v9);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_BYTE *)(a1 + 294))
  {
    v10 = *a2;
    v12 = a3[1];
    v11 = a3[2];
    if (v12 >= v11)
    {
      v14 = (uint64_t)(v12 - *a3) >> 6;
      if ((unint64_t)(v14 + 1) >> 58)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v15 = v11 - *a3;
      v16 = v15 >> 5;
      if (v15 >> 5 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0)
        v17 = 0x3FFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v43 = a3 + 2;
      if (v17)
        v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v17);
      else
        v18 = 0;
      v19 = v17 + (v14 << 6);
      *(_QWORD *)&v41 = v17;
      *((_QWORD *)&v41 + 1) = v19;
      *(_QWORD *)&v42 = v19;
      *((_QWORD *)&v42 + 1) = v17 + (v18 << 6);
      v20 = *v10;
      v21 = v10[1];
      *(_QWORD *)(v19 + 32) = *((_QWORD *)v10 + 4);
      *(_OWORD *)v19 = v20;
      *(_OWORD *)(v19 + 16) = v21;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_QWORD *)(v19 + 40) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v19 + 40), *((const void **)v10 + 5), *((_QWORD *)v10 + 6), (uint64_t)(*((_QWORD *)v10 + 6) - *((_QWORD *)v10 + 5)) >> 2);
      *(_QWORD *)&v42 = v42 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v41);
      v13 = a3[1];
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v41);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, *a2);
      v13 = v12 + 64;
    }
    a3[1] = v13;
  }
  if (*(_BYTE *)(a1 + 285))
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v38, (const Espresso::layer_shape *)*a2, 0);
    v22 = *(_DWORD *)(a1 + 288);
    if ((v22 & 0x80000000) != 0 && (v22 += v40, (v22 & 0x80000000) != 0) || (int)v22 >= v40)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis argument in topk_kernel_cpu.");
    v23 = *(_DWORD *)(a1 + 280);
    if (v23 != -1)
    {
      v24 = *((_DWORD *)&v38 + v22);
      v25 = v22;
LABEL_31:
      if (v24 >= v23)
        v29 = v23;
      else
        v29 = v24;
      *((_DWORD *)&v38 + v25) = v29;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v38, 0, (uint64_t)&v41);
      v30 = *a3;
      v31 = v41;
      v32 = v42;
      *(_QWORD *)(v30 + 32) = v43;
      *(_OWORD *)v30 = v31;
      *(_OWORD *)(v30 + 16) = v32;
      v33 = *(void **)(v30 + 40);
      if (v33)
      {
        *(_QWORD *)(v30 + 48) = v33;
        operator delete(v33);
        *(_QWORD *)(v30 + 40) = 0;
        *(_QWORD *)(v30 + 48) = 0;
        *(_QWORD *)(v30 + 56) = 0;
      }
      *(_OWORD *)(v30 + 40) = *(_OWORD *)__p;
      *(_QWORD *)(v30 + 56) = v45;
      if (*(_BYTE *)(a1 + 294))
      {
        Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v38, 0, (uint64_t)&v41);
        v34 = *a3;
        v35 = v42;
        *(_OWORD *)(v34 + 64) = v41;
        *(_OWORD *)(v34 + 80) = v35;
        *(_QWORD *)(v34 + 96) = v43;
        v36 = *(void **)(v34 + 104);
        if (v36)
        {
          *(_QWORD *)(v34 + 112) = v36;
          operator delete(v36);
          *(_QWORD *)(v34 + 104) = 0;
          *(_QWORD *)(v34 + 112) = 0;
          *(_QWORD *)(v34 + 120) = 0;
        }
        *(_OWORD *)(v34 + 104) = *(_OWORD *)__p;
        *(_QWORD *)(v34 + 120) = v45;
      }
      return;
    }
    if ((char *)a2[1] - (char *)*a2 == 64)
    {
      if (*(_BYTE *)(a1 + 293))
      {
        if (*(_BYTE *)(a1 + 285))
        {
          v25 = v22;
          v24 = *((_DWORD *)&v38 + v22);
          v23 = v24;
          goto LABEL_31;
        }
        v37 = "topk_kernel_cpu with k == -1 (sort) requires single_axis_topk == true.";
      }
      else
      {
        v37 = "topk_kernel_cpu with k == -1 (sort) requires sort == true.";
      }
    }
    else
    {
      v37 = "topk_kernel_cpu with k == -1 (sort) does not support support dynamic k.";
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v37);
  }
  v26 = *((_DWORD *)*a2 + 5);
  v27 = *(_DWORD *)(a1 + 280);
  v28 = (_DWORD *)*a3;
  if (v26 == -1 || v26 >= 4)
  {
    v28[2] = v27;
    if (*(_BYTE *)(a1 + 294))
      v28[18] = v27;
  }
  else
  {
    *v28 = v27;
    if (*(_BYTE *)(a1 + 294))
      v28[16] = v27;
  }
}

void sub_19168BD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&a13);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void Espresso::generic_gather_kernel::top_shapes_for_bottom_shapes(_DWORD *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD v16[4];
  char v17;
  __int128 v18[2];
  uint64_t v19;
  void *__p;
  void *v21;
  uint64_t v22;
  __int128 v23;

  *((_QWORD *)&v23 + 1) = *MEMORY[0x1E0C80C00];
  memset(v16, 0, 24);
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v16, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 6);
  v6 = *a2;
  v7 = *((_QWORD *)*a2 + 4);
  v8 = (*a2)[1];
  v10 = **a2;
  v11 = v8;
  v12 = v7;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v13, *((const void **)v6 + 5), *((_QWORD *)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 2);
  if (a1[70] != -1)
    LODWORD(v10) = 1;
  if (a1[71] != -1)
    DWORD1(v10) = 1;
  if (a1[72] != -1)
    DWORD2(v10) = 1;
  if (a1[73] != -1)
    HIDWORD(v10) = 1;
  if (a1[74] != -1)
    LODWORD(v11) = 1;
  v18[0] = v10;
  v18[1] = v11;
  v19 = v12;
  __p = 0;
  v21 = 0;
  v22 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v13, (uint64_t)v14, (v14 - (_BYTE *)v13) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v16[3] = a3;
  v17 = 0;
  v9 = (char *)operator new(0x40uLL);
  *a3 = v9;
  a3[1] = v9;
  a3[2] = v9 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v18, &v23, (uint64_t)v9);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  *(_QWORD *)&v10 = v16;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
}

void sub_19168BF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = v30;
  *(_QWORD *)(v29 + 8) = v31;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a21);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14)
  {
    a15 = (uint64_t)a14;
    operator delete(a14);
  }
  a9 = &a18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void Espresso::generic_general_concat_kernel::build_grads_for_inputs(uint64_t a1, Espresso::sequential_builder *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  std::string::size_type *v9;
  std::string::size_type v10;
  std::string::size_type v11;
  unsigned int v12;
  char *v13;
  char *v14;
  size_t v15;
  std::string *v16;
  char *v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string v32;
  void *__p[2];
  std::string::size_type v34;
  void *v35[2];
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::string v39;
  int v40;
  __int128 v41;
  int v42;
  std::string **v43;
  char v44;
  std::string v45;
  __int128 v46;

  *(_QWORD *)&v46 = *MEMORY[0x1E0C80C00];
  v41 = xmmword_191A82A80;
  v42 = 1;
  v6 = Espresso::sequential_builder::blob_shape(a2, **(_QWORD **)(a3 + 8));
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v39, (const Espresso::layer_shape *)v6, 0);
  v7 = SHIDWORD(v39.__r_.__value_.__r.__words[2]);
  if (*(_BYTE *)(a1 + 284))
    v8 = HIDWORD(v39.__r_.__value_.__r.__words[2]) + ~*(_DWORD *)(a1 + 280);
  else
    v8 = *(_DWORD *)(a1 + 280);
  v40 = v8;
  v9 = *(std::string::size_type **)(a3 + 16);
  v10 = *v9;
  v11 = v9[1];
  if (*v9 != v11)
  {
    v12 = 0;
    do
    {
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v10))
      {
        v13 = Espresso::sequential_builder::blob_shape(a2, v10);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v39, (const Espresso::layer_shape *)v13, 0);
        *(_QWORD *)&v41 = __PAIR64__(*((_DWORD *)&v39.__r_.__value_.__l.__data_ + v7 + ~v40) + v12, v12);
        Espresso::blob_grad_contrib_name((uint64_t)&v39, v10, a3);
        std::string::basic_string[abi:ne180100]<0>(v35, "slice");
        v14 = *(char **)a3;
        if (*(char *)(*(_QWORD *)a3 + 23) >= 0)
          v15 = *(unsigned __int8 *)(*(_QWORD *)a3 + 23);
        else
          v15 = *(_QWORD *)(*(_QWORD *)a3 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v32, v15 + 1);
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = &v32;
        else
          v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
        if (v15)
        {
          if (v14[23] >= 0)
            v17 = v14;
          else
            v17 = *(char **)v14;
          memmove(v16, v17, v15);
        }
        *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 58;
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v39;
        else
          v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        else
          size = v39.__r_.__value_.__l.__size_;
        v20 = std::string::append(&v32, (const std::string::value_type *)v18, size);
        v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v34 = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        v22 = *(uint64_t **)(a3 + 8);
        v30 = 0;
        v31 = 0;
        v29 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, *v22, v22[1], 0xAAAAAAAAAAAAAAABLL * ((v22[1] - *v22) >> 3));
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v45, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
        else
          v45 = v39;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v43 = &v26;
        v44 = 0;
        v26 = (std::string *)operator new(0x18uLL);
        v27 = v26;
        v28 = v26 + 1;
        v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v28, (__int128 *)&v45, &v46, v26);
        Espresso::sequential_builder::add<Espresso::slice_params_t>(&v37, (uint64_t *)a2, (uint64_t)v35, (uint64_t)__p, (uint64_t)&v40, v29, v30, (uint64_t *)&v26);
        v23 = v38;
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v43 = &v26;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
        if (SHIBYTE(v34) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (v36 < 0)
          operator delete(v35[0]);
        v12 = DWORD1(v41);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
      }
      v10 += 24;
    }
    while (v10 != v11);
  }
}

void sub_19168C378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  *(_QWORD *)(v41 - 128) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 128));
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(a1);
}

void Espresso::generic_store_global_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::string v22;
  std::string v23;
  char v24;
  __int128 v25;
  unint64_t v26;
  int v27;
  std::string __str;
  std::string **v29;
  char v30;
  std::string v31;
  uint64_t v32;
  std::string v33;
  __int128 v34;

  *(_QWORD *)&v34 = *MEMORY[0x1E0C80C00];
  Espresso::global_grad_name((uint64_t)&__str, (const void **)(a1 + 280));
  if (!*(_BYTE *)(a1 + 304))
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("non array mode load global grad");
  v6 = *(unsigned int *)(a1 + 332);
  if ((_DWORD)v6 != 4)
    Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("non array op %d", v6);
  memset(&v23, 0, sizeof(v23));
  v25 = xmmword_191A935B0;
  v26 = 0xFFFFFFFF00000001;
  v24 = 1;
  v27 = 5;
  std::string::operator=(&v23, &__str);
  Espresso::blob_grad_contrib_name((uint64_t)&v22, **(_QWORD **)(a3 + 16), a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "load_global");
  v7 = *(_QWORD *)a3;
  v8 = **(_QWORD **)(a3 + 16);
  if (*(char *)(v8 + 47) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v8 + 24), *(_QWORD *)(v8 + 32));
  else
    v33 = *(std::string *)(v8 + 24);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  v31.__r_.__value_.__s.__data_[8] = 0;
  v15 = (std::string *)operator new(0x18uLL);
  v16 = v15;
  v17 = v15 + 1;
  v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v17, (__int128 *)&v33, &v34, v15);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v31, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    v31 = v22;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v29 = &v12;
  v30 = 0;
  v12 = (std::string *)operator new(0x18uLL);
  v13 = v12;
  v14 = v12 + 1;
  v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, (__int128 *)&v31, (__int128 *)&v32, v12);
  Espresso::sequential_builder::add<Espresso::load_global_params_t>(&v20, a2, (uint64_t)__p, v7, (uint64_t)&v23, (uint64_t)v15, (uint64_t)v16, (uint64_t *)&v12);
  v9 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v29 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_19168C71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  *(_QWORD *)(v34 - 112) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 112));
  if (*(char *)(v34 - 57) < 0)
    operator delete(*(void **)(v34 - 80));
  if (a20 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v34 - 129) < 0)
    operator delete(*(void **)(v34 - 152));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::load_global_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_19168C9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::generic_copy_kernel::backpropable(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if (*(_DWORD *)(a1 + 280) == 1)
    Espresso::check_backpropable_result_t::not_backpropable_on_all_inputs((Espresso::check_backpropable_result_t *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3)), a3);
  else
    Espresso::base_kernel::backpropable(a2, a3);
}

void Espresso::generic_copy_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __int128 *v6;
  std::string::size_type v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  void *__p[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string v23;
  void *v24[2];
  char v25;
  std::string **v26;
  char v27;
  std::string v28;
  uint64_t v29;
  std::string v30;
  __int128 v31;

  *(_QWORD *)&v31 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v24, "copy");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - **(_QWORD **)(a3 + 16)) >> 3), 1uLL, (uint64_t)v24, 1);
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 3), 1uLL, (uint64_t)v24, 0);
  v6 = **(__int128 ***)(a3 + 8);
  v7 = **(_QWORD **)(a3 + 16);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v7))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v23, v7, a3);
    std::string::basic_string[abi:ne180100]<0>(__p, "copy");
    v8 = *(_QWORD *)a3;
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v9 = *v6;
      v30.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
    }
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    v28.__r_.__value_.__s.__data_[8] = 0;
    v16 = (std::string *)operator new(0x18uLL);
    v17 = v16;
    v18 = v16 + 1;
    v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (__int128 *)&v30, &v31, v16);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v28, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    else
      v28 = v23;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v26 = &v13;
    v27 = 0;
    v13 = (std::string *)operator new(0x18uLL);
    v14 = v13;
    v15 = v13 + 1;
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (__int128 *)&v28, (__int128 *)&v29, v13);
    Espresso::sequential_builder::add<Espresso::copy_params_t>(&v21, a2, (uint64_t)__p, v8, a1 + 280, (uint64_t)v16, (uint64_t)v17, (uint64_t *)&v13);
    v10 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v26 = &v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (v20 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (v25 < 0)
    operator delete(v24[0]);
}

void sub_19168CDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36)
{
  uint64_t v36;

  *(_QWORD *)(v36 - 128) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 128));
  if (*(char *)(v36 - 73) < 0)
    operator delete(*(void **)(v36 - 96));
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::generic_copy_kernel::get_runtime_type_config@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  return std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a2, a1, a1);
}

void Espresso::generic_scatter_kernel::top_shapes_for_bottom_shapes(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  char *v6;
  __int128 v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;

  *((_QWORD *)&v12 + 1) = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *((_QWORD *)*a1 + 4);
  v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  v8 = v4;
  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((_QWORD *)v3 + 6), (uint64_t)(*((_QWORD *)v3 + 6) - *((_QWORD *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_19168CF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_scatter_kernel::backpropable(_QWORD *a1@<X8>)
{
  __int16 v2;
  char v3;
  void *__p[3];

  v2 = 1;
  v3 = 1;
  std::vector<BOOL>::vector(__p, &v2, 3);
  std::vector<BOOL>::vector(a1, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
}

void sub_19168CFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::generic_scatter_kernel::build_grads_for_inputs(_BYTE *a1, uint64_t *a2, char **a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type v9;
  __int128 *v10;
  __int128 *v11;
  char *v12;
  size_t v13;
  std::string *v14;
  char *v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string *v29;
  char *v30;
  size_t v31;
  std::string *v32;
  char *v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t i;
  __int128 v45;
  char *v46;
  size_t v47;
  std::string *v48;
  char *v49;
  int v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t j;
  std::string *v67;
  std::string *v68;
  std::string *v69;
  std::string *v70;
  std::string *v71;
  std::string *v72;
  std::string v73;
  uint64_t v74;
  uint64_t v75;
  std::string *v76;
  std::string *v77;
  std::string *v78;
  std::string *v79;
  std::string *v80;
  std::string *v81;
  std::string v82;
  std::string v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  std::string *v86;
  std::string *v87;
  std::string *v88;
  std::string *v89;
  std::string *v90;
  std::string *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  _BYTE __p[28];
  int v95;
  char v96;
  std::string *v97;
  std::string *v98;
  std::string *v99;
  std::string *v100;
  std::string *v101;
  std::string *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  std::string v105;
  std::string v106;
  uint64_t v107[2];
  std::string *v108;
  std::string v109;
  uint64_t v110;
  std::string v111;
  uint64_t v112;
  std::string v113;
  std::string v114;
  std::string v115;
  uint64_t v116;
  std::string v117;
  uint64_t v118;
  std::string v119;
  __int128 v120;

  *(_QWORD *)&v120 = *MEMORY[0x1E0C80C00];
  if (!a1[301])
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("scatter::build_grads_for_inputs with simple_scatter == false is not implemented");
  if (a1[302])
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("scatter::build_grads_for_inputs with nd_mode == true is not implemented");
  v6 = a3[2];
  v8 = *(_QWORD *)v6;
  v7 = *((_QWORD *)v6 + 1);
  std::string::basic_string[abi:ne180100]<0>(&v113, "scatter");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3), 3uLL, (uint64_t)&v113, 1);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  v9 = *(_QWORD *)a3[2];
  v10 = *(__int128 **)a3[1];
  v11 = (__int128 *)(v9 + 24);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3[5], v9))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v106, v9, (uint64_t)a3);
    if (a1[300])
    {
      std::string::basic_string[abi:ne180100]<0>(&v113, "copy");
      v12 = *a3;
      if ((*a3)[23] >= 0)
        v13 = (*a3)[23];
      else
        v13 = *((_QWORD *)*a3 + 1);
      v14 = &v105;
      std::string::basic_string[abi:ne180100]((uint64_t)&v105, v13 + 1);
      if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = (std::string *)v105.__r_.__value_.__r.__words[0];
      if (v13)
      {
        if (v12[23] >= 0)
          v15 = v12;
        else
          v15 = *(char **)v12;
        memmove(v14, v15, v13);
      }
      *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 64;
      v16 = *(char *)(v9 + 23);
      if (v16 >= 0)
        v17 = (const std::string::value_type *)v9;
      else
        v17 = *(const std::string::value_type **)v9;
      if (v16 >= 0)
        v18 = *(unsigned __int8 *)(v9 + 23);
      else
        v18 = *(_QWORD *)(v9 + 8);
      v19 = std::string::append(&v105, v17, v18);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      LODWORD(v82.__r_.__value_.__l.__data_) = 0;
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v21 = *v10;
        v119.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v21;
      }
      v100 = 0;
      v101 = 0;
      v102 = 0;
      v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
      v117.__r_.__value_.__s.__data_[8] = 0;
      v100 = (std::string *)operator new(0x18uLL);
      v101 = v100;
      v102 = v100 + 1;
      v101 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v102, (__int128 *)&v119, &v120, v100);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v117, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
      else
        v117 = v106;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
      v83.__r_.__value_.__s.__data_[8] = 0;
      v97 = (std::string *)operator new(0x18uLL);
      v98 = v97;
      v99 = v97 + 1;
      v98 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v99, (__int128 *)&v117, (__int128 *)&v118, v97);
      Espresso::sequential_builder::add<Espresso::copy_params_t>(&v103, a2, (uint64_t)&v113, (uint64_t)__p, (uint64_t)&v82, (uint64_t)v100, (uint64_t)v101, (uint64_t *)&v97);
      v22 = v104;
      if (v104)
      {
        p_shared_owners = (unint64_t *)&v104->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v117.__r_.__value_.__l.__data_);
      v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_109;
      v25 = (void *)v113.__r_.__value_.__r.__words[0];
    }
    else
    {
      *(_QWORD *)&__p[20] = 0xFFFFFFFF00000001;
      v95 = 0;
      memset(__p, 0, 20);
      v96 = 0;
      std::operator+<char>();
      std::string::basic_string[abi:ne180100]<0>(&v113, "fill");
      if (*(char *)(v9 + 71) < 0)
        std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)(v9 + 48), *(_QWORD *)(v9 + 56));
      else
        v119 = *(std::string *)(v9 + 48);
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
      v117.__r_.__value_.__s.__data_[8] = 0;
      v89 = (std::string *)operator new(0x18uLL);
      v90 = v89;
      v91 = v89 + 1;
      v90 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v91, (__int128 *)&v119, &v120, v89);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v117, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
      else
        v117 = v105;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
      v83.__r_.__value_.__s.__data_[8] = 0;
      v86 = (std::string *)operator new(0x18uLL);
      v87 = v86;
      v88 = v86 + 1;
      v87 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v88, (__int128 *)&v117, (__int128 *)&v118, v86);
      Espresso::sequential_builder::add<Espresso::fill_params_t>(&v92, a2, (uint64_t)&v113, (uint64_t)&v105, (uint64_t)__p, (uint64_t)v89, (uint64_t)v90, (uint64_t *)&v86);
      v26 = v93;
      if (v93)
      {
        v27 = (unint64_t *)&v93->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v117.__r_.__value_.__l.__data_);
      v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
      v29 = (std::string *)(a1 + 280);
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v113.__r_.__value_.__l.__data_);
      v119 = *v29;
      std::string::basic_string[abi:ne180100]<0>(&v117, "scatter");
      v30 = *a3;
      if ((*a3)[23] >= 0)
        v31 = (*a3)[23];
      else
        v31 = *((_QWORD *)*a3 + 1);
      v32 = &v82;
      std::string::basic_string[abi:ne180100]((uint64_t)&v82, v31 + 1);
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v32 = (std::string *)v82.__r_.__value_.__r.__words[0];
      if (v31)
      {
        if (v30[23] >= 0)
          v33 = v30;
        else
          v33 = *(char **)v30;
        memmove(v32, v33, v31);
      }
      *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v31) = 64;
      v34 = *(char *)(v9 + 23);
      if (v34 >= 0)
        v35 = (const std::string::value_type *)v9;
      else
        v35 = *(const std::string::value_type **)v9;
      if (v34 >= 0)
        v36 = *(unsigned __int8 *)(v9 + 23);
      else
        v36 = *(_QWORD *)(v9 + 8);
      v37 = std::string::append(&v82, v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v39 = *v10;
        v113.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v39;
      }
      if (*(char *)(v9 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)(v9 + 24), *(_QWORD *)(v9 + 32));
      }
      else
      {
        v40 = *v11;
        v114.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 40);
        *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v40;
      }
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v115, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
      else
        v115 = v105;
      v79 = 0;
      v80 = 0;
      v81 = 0;
      v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
      v111.__r_.__value_.__s.__data_[8] = 0;
      v79 = (std::string *)operator new(0x48uLL);
      v80 = v79;
      v81 = v79 + 3;
      v80 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v81, (__int128 *)&v113, (__int128 *)&v116, v79);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v111, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
      else
        v111 = v106;
      v76 = 0;
      v77 = 0;
      v78 = 0;
      v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
      v73.__r_.__value_.__s.__data_[8] = 0;
      v76 = (std::string *)operator new(0x18uLL);
      v77 = v76;
      v78 = v76 + 1;
      v77 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v78, (__int128 *)&v111, (__int128 *)&v112, v76);
      Espresso::sequential_builder::add<Espresso::scatter_params_t>(&v84, a2, (uint64_t)&v117, (uint64_t)&v83, (uint64_t)&v119, (uint64_t)v79, (uint64_t)v80, (uint64_t *)&v76);
      v41 = v85;
      if (v85)
      {
        v42 = (unint64_t *)&v85->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
      for (i = 0; i != -9; i -= 3)
      {
        if (SHIBYTE(v115.__r_.__value_.__r.__words[i + 2]) < 0)
          operator delete(*(void **)((char *)&v115.__r_.__value_.__l.__data_ + i * 8));
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v117.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_109;
      v25 = (void *)v105.__r_.__value_.__r.__words[0];
    }
    operator delete(v25);
LABEL_109:
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3[5], v9 + 48))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v83, v9 + 48, (uint64_t)a3);
    *(_QWORD *)&v45 = 0x100000001;
    *((_QWORD *)&v45 + 1) = 0x100000001;
    *(_OWORD *)__p = v45;
    *(_QWORD *)&__p[16] = 4294967294;
    __p[24] = 1;
    std::string::basic_string[abi:ne180100]<0>(&v82, "array_gather");
    v46 = *a3;
    if ((*a3)[23] >= 0)
      v47 = (*a3)[23];
    else
      v47 = *((_QWORD *)*a3 + 1);
    v48 = &v73;
    std::string::basic_string[abi:ne180100]((uint64_t)&v73, v47 + 1);
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v48 = (std::string *)v73.__r_.__value_.__r.__words[0];
    if (v47)
    {
      if (v46[23] >= 0)
        v49 = v46;
      else
        v49 = *(char **)v46;
      memmove(v48, v49, v47);
    }
    *(_WORD *)((char *)&v48->__r_.__value_.__l.__data_ + v47) = 64;
    v50 = *(char *)(v9 + 71);
    if (v50 >= 0)
      v51 = (const std::string::value_type *)(v9 + 48);
    else
      v51 = *(const std::string::value_type **)(v9 + 48);
    if (v50 >= 0)
      v52 = *(unsigned __int8 *)(v9 + 71);
    else
      v52 = *(_QWORD *)(v9 + 56);
    v53 = std::string::append(&v73, v51, v52);
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v111.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v55 = *v10;
      v113.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v55;
    }
    if (*(char *)(v9 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)(v9 + 24), *(_QWORD *)(v9 + 32));
    }
    else
    {
      v56 = *v11;
      v114.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 40);
      *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v56;
    }
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
    v106.__r_.__value_.__s.__data_[8] = 0;
    v70 = (std::string *)operator new(0x30uLL);
    v71 = v70;
    v72 = v70 + 2;
    v71 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v72, (__int128 *)&v113, (__int128 *)&v115, v70);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v109, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
    else
      v109 = v83;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    v106.__r_.__value_.__s.__data_[8] = 0;
    v67 = (std::string *)operator new(0x18uLL);
    v68 = v67;
    v69 = v67 + 1;
    v68 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v69, (__int128 *)&v109, (__int128 *)&v110, v67);
    memset(&v119, 0, sizeof(v119));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v119, (uint64_t)v70, (uint64_t)v71, 0xAAAAAAAAAAAAAAABLL * (((char *)v71 - (char *)v70) >> 3));
    memset(&v117, 0, sizeof(v117));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v117, (uint64_t)v67, (uint64_t)v68, 0xAAAAAAAAAAAAAAABLL * (((char *)v68 - (char *)v67) >> 3));
    v57 = a2[12];
    LODWORD(v106.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v57, (uint64_t)(a2 + 14), (uint64_t)&v82, (uint64_t)__p, (int *)&v106);
    v58 = (std::__shared_weak_count *)v75;
    v107[0] = v74;
    v107[1] = v75;
    if (v75)
    {
      v59 = (unint64_t *)(v75 + 8);
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    memset(&v106, 0, sizeof(v106));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v106, (uint64_t)v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v119.__r_.__value_.__l.__size_ - v119.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v105, 0, sizeof(v105));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, (uint64_t)v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v117.__r_.__value_.__l.__size_ - v117.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v107, (uint64_t)&v82, (uint64_t)&v111, (uint64_t)(a2 + 7), (std::string **)&v106, (std::string **)&v105);
    v108 = &v105;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
    v108 = &v106;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
    if (v58)
    {
      v61 = (unint64_t *)&v58->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (*a2)
      Espresso::sequential_builder::add_shape_from_kernel(a2, v74, (__int128 **)&v119, (uint64_t *)&v117);
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    v63 = (std::__shared_weak_count *)v75;
    if (v75)
    {
      v64 = (unint64_t *)(v75 + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v109.__r_.__value_.__l.__data_);
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    for (j = 0; j != -6; j -= 3)
    {
      if (SHIBYTE(v114.__r_.__value_.__r.__words[j + 2]) < 0)
        operator delete(*(void **)((char *)&v113 + j * 8 + 24));
    }
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v111.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
  }
}

void sub_19168DCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *a68;
  char a72;
  void *a73;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;

  a73 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a73);
  v75 = 0;
  v76 = v73 - 240;
  while (1)
  {
    if (*(char *)(v76 + v75 + 71) < 0)
      operator delete(*(void **)(v76 + v75 + 48));
    v75 -= 24;
    if (v75 == -72)
    {
      if (a37 < 0)
        operator delete(__p);
      if (a31 < 0)
        operator delete(a26);
      if (*(char *)(v73 - 137) < 0)
        operator delete(*(void **)(v73 - 160));
      if (a67 < 0)
        operator delete(a62);
      if (a72 < 0)
        operator delete(a68);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t Espresso::generic_scatter_kernel::get_output_to_input_blob_aliases@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  return std::unordered_map<int,int>::unordered_map(a1, (int *)v3, 1);
}

_QWORD *Espresso::generic_load_random_kernel::top_shapes_for_bottom_shapes@<X0>(_QWORD *result@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  __int128 v14;

  v5 = *a2;
  v6 = a2[1];
  if (v5 == v6)
  {
    v7 = *((_DWORD *)result + 78);
    v14 = *(_OWORD *)(result + 37);
    if (*((int *)result + 80) <= 0)
      v8 = -1;
    else
      v8 = *((_DWORD *)result + 80);
    v9 = *((int *)result + 79);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if ((_DWORD)v9)
    {
      std::vector<Espresso::layer_shape>::__vallocate[abi:ne180100](a3, v9);
      v10 = a3[1];
      v11 = v10 + (v9 << 6);
      v12 = v9 << 6;
      v13 = (_QWORD *)(v10 + 40);
      do
      {
        *(_OWORD *)(v13 - 5) = v14;
        *((_DWORD *)v13 - 6) = v7;
        *((_DWORD *)v13 - 5) = v8;
        *((_OWORD *)v13 - 1) = 0uLL;
        v13[1] = 0;
        v13[2] = 0;
        *v13 = 0;
        result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v13, 0, 0, 0);
        v13 += 8;
        v12 -= 64;
      }
      while (v12);
      a3[1] = v11;
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a3, v5, v6, ((char *)v6 - (char *)v5) >> 6);
  }
  return result;
}

void sub_19168E258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Espresso::generic_load_random_kernel::backpropable(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  Espresso::check_backpropable_result_t::not_backpropable_on_all_inputs((Espresso::check_backpropable_result_t *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3)), a2);
}

void Espresso::generic_range_kernel::top_shapes_for_bottom_shapes(float *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v4;
  __int128 v5;
  char *v6;
  unsigned int v7;
  __int128 v8;
  int v9;
  __int128 v10;
  void *__p[2];
  uint64_t v12;
  __int128 v13;

  *(_QWORD *)&v13 = *MEMORY[0x1E0C80C00];
  v4 = 1;
  if (a2[1] == *a2)
    v4 = vcvtps_s32_f32((float)(a1[70] - a1[71]) / a1[72]);
  v7 = v4;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v8 = v5;
  v9 = 1;
  LOBYTE(v5) = 0;
  BYTE4(v5) = 0;
  BYTE8(v5) = 0;
  BYTE12(v5) = 0;
  v10 = v5;
  *(_OWORD *)__p = v5;
  v12 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v6 = (char *)operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)&v7, &v13, (uint64_t)v6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19168E398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_matrix_band_part_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const Espresso::layer_shape *v5;
  const Espresso::layer_shape *v8;
  BOOL v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  _BYTE v13[20];
  unsigned int v14;
  _QWORD *v15;
  char v16;
  __int128 v17[2];
  uint64_t v18;
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;

  *((_QWORD *)&v22 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *(const Espresso::layer_shape **)a2;
  if (*(_QWORD *)(a2 + 8) - (_QWORD)v5 != 64)
    Espresso::throw_exception_selector<Espresso::generic_error>("matrix_band_part takes exactly one input blob.");
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v13, v5, 0);
  if (v14 <= 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Rank of the input must be atleast 2 for matrix_band_part");
  v8 = *(const Espresso::layer_shape **)a2;
  v9 = v14 >= 4 && *(_DWORD *)(a1 + 288) == 0;
  if (v9 && (*(_DWORD *)v8 != 1 || *((_DWORD *)v8 + 1) != 1))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Only 2d matrices are supported by matrix_band_part");
  v10 = *((_OWORD *)v8 + 1);
  v11 = *((_QWORD *)v8 + 4);
  v17[0] = *(_OWORD *)v8;
  v17[1] = v10;
  v18 = v11;
  __p = 0;
  v20 = 0;
  v21 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v8 + 5), *((_QWORD *)v8 + 6), (uint64_t)(*((_QWORD *)v8 + 6) - *((_QWORD *)v8 + 5)) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = a3;
  v16 = 0;
  v12 = (char *)operator new(0x40uLL);
  *a3 = v12;
  a3[1] = v12;
  a3[2] = v12 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v17, &v22, (uint64_t)v12);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_19168E530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 8) = v22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_batch_matmul_kernel::build_grads_for_inputs(_BYTE *a1, uint64_t *a2, char **a3)
{
  std::string::size_type v6;
  _OWORD *v7;
  __int128 *v8;
  char v9;
  char *v10;
  size_t v11;
  std::string *v12;
  char *v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  char *v18;
  size_t v19;
  std::string *v20;
  char *v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t i;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t j;
  char v37;
  char *v38;
  size_t v39;
  std::string *v40;
  char *v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  size_t v48;
  std::string *v49;
  char *v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t k;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t m;
  std::string *v66;
  std::string *v67;
  std::string *v68;
  std::string *v69;
  std::string *v70;
  std::string *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  std::string *v74;
  std::string *v75;
  std::string *v76;
  std::string *v77;
  std::string *v78;
  std::string *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::string *v82;
  std::string *v83;
  std::string *v84;
  std::string *v85;
  std::string *v86;
  std::string *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  std::string *v90;
  std::string *v91;
  std::string *v92;
  std::string *v93;
  std::string *v94;
  std::string *v95;
  std::string v96;
  __int128 __p;
  std::string::size_type v98;
  void *v99[2];
  char v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  char v103;
  char v104;
  char v105;
  std::string v106;
  std::string **v107;
  char v108;
  std::string v109;
  uint64_t v110;
  std::string v111;
  std::string v112;
  __int128 v113[2];

  *((_QWORD *)&v113[0] + 1) = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a3[2];
  v7 = (_OWORD *)(v6 + 24);
  v8 = *(__int128 **)a3[1];
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3[5], v6))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v106, v6, (uint64_t)a3);
    v103 = a1[280];
    v104 = 0;
    v9 = a1[282];
    v105 = v9 ^ 1;
    if (a1[281])
    {
      v104 = v9;
      v105 = 1;
      std::string::basic_string[abi:ne180100]<0>(v99, "batch_matmul");
      v10 = *a3;
      if ((*a3)[23] >= 0)
        v11 = (*a3)[23];
      else
        v11 = *((_QWORD *)*a3 + 1);
      v12 = &v96;
      std::string::basic_string[abi:ne180100]((uint64_t)&v96, v11 + 1);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if (v11)
      {
        if (v10[23] >= 0)
          v13 = v10;
        else
          v13 = *(char **)v10;
        memmove(v12, v13, v11);
      }
      *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 58;
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v106;
      else
        v14 = (std::string *)v106.__r_.__value_.__r.__words[0];
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        size = v106.__r_.__value_.__l.__size_;
      v16 = std::string::append(&v96, (const std::string::value_type *)v14, size);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v98 = v16->__r_.__value_.__r.__words[2];
      __p = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v111, *(const std::string::value_type **)(v6 + 24), *(_QWORD *)(v6 + 32));
      }
      else
      {
        *(_OWORD *)&v111.__r_.__value_.__l.__data_ = *v7;
        v111.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 40);
      }
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v27 = *v8;
        v112.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v27;
      }
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
      v109.__r_.__value_.__s.__data_[8] = 0;
      v93 = (std::string *)operator new(0x30uLL);
      v94 = v93;
      v95 = v93 + 2;
      v94 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v95, (__int128 *)&v111, v113, v93);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v109, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
      else
        v109 = v106;
      v90 = 0;
      v91 = 0;
      v92 = 0;
      v107 = &v90;
      v108 = 0;
      v90 = (std::string *)operator new(0x18uLL);
      v91 = v90;
      v92 = v90 + 1;
      v91 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v92, (__int128 *)&v109, (__int128 *)&v110, v90);
      Espresso::sequential_builder::add<Espresso::batch_matmul_params_t>(&v101, a2, (uint64_t)v99, (uint64_t)&__p, (uint64_t)&v103, (uint64_t)v93, (uint64_t)v94, (uint64_t *)&v90);
      v28 = v102;
      if (v102)
      {
        p_shared_owners = (unint64_t *)&v102->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v107 = &v90;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
      for (i = 0; i != -6; i -= 3)
      {
        if (SHIBYTE(v112.__r_.__value_.__r.__words[i + 2]) < 0)
          operator delete(*(void **)((char *)&v111 + i * 8 + 24));
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v99, "batch_matmul");
      v18 = *a3;
      if ((*a3)[23] >= 0)
        v19 = (*a3)[23];
      else
        v19 = *((_QWORD *)*a3 + 1);
      v20 = &v96;
      std::string::basic_string[abi:ne180100]((uint64_t)&v96, v19 + 1);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v20 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if (v19)
      {
        if (v18[23] >= 0)
          v21 = v18;
        else
          v21 = *(char **)v18;
        memmove(v20, v21, v19);
      }
      *(_WORD *)((char *)&v20->__r_.__value_.__l.__data_ + v19) = 58;
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v106;
      else
        v22 = (std::string *)v106.__r_.__value_.__r.__words[0];
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v23 = v106.__r_.__value_.__l.__size_;
      v24 = std::string::append(&v96, (const std::string::value_type *)v22, v23);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v98 = v24->__r_.__value_.__r.__words[2];
      __p = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v111, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v26 = *v8;
        v111.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v26;
      }
      if (*(char *)(v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)(v6 + 24), *(_QWORD *)(v6 + 32));
      }
      else
      {
        v32 = *v7;
        v112.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 40);
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v32;
      }
      v85 = 0;
      v86 = 0;
      v87 = 0;
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
      v109.__r_.__value_.__s.__data_[8] = 0;
      v85 = (std::string *)operator new(0x30uLL);
      v86 = v85;
      v87 = v85 + 2;
      v86 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v87, (__int128 *)&v111, v113, v85);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v109, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
      else
        v109 = v106;
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v107 = &v82;
      v108 = 0;
      v82 = (std::string *)operator new(0x18uLL);
      v83 = v82;
      v84 = v82 + 1;
      v83 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v84, (__int128 *)&v109, (__int128 *)&v110, v82);
      Espresso::sequential_builder::add<Espresso::batch_matmul_params_t>(&v88, a2, (uint64_t)v99, (uint64_t)&__p, (uint64_t)&v103, (uint64_t)v85, (uint64_t)v86, (uint64_t *)&v82);
      v33 = v89;
      if (v89)
      {
        v34 = (unint64_t *)&v89->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v107 = &v82;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
      for (j = 0; j != -6; j -= 3)
      {
        if (SHIBYTE(v112.__r_.__value_.__r.__words[j + 2]) < 0)
          operator delete(*(void **)((char *)&v111 + j * 8 + 24));
      }
    }
    if (SHIBYTE(v98) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    if (v100 < 0)
      operator delete(v99[0]);
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3[5], (uint64_t)v7))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v106, (std::string::size_type)v7, (uint64_t)a3);
    v103 = a1[280];
    v37 = a1[281];
    v104 = v37 ^ 1;
    v105 = 0;
    if (a1[282])
    {
      v104 = 1;
      v105 = v37;
      std::string::basic_string[abi:ne180100]<0>(v99, "batch_matmul");
      v38 = *a3;
      if ((*a3)[23] >= 0)
        v39 = (*a3)[23];
      else
        v39 = *((_QWORD *)*a3 + 1);
      v40 = &v96;
      std::string::basic_string[abi:ne180100]((uint64_t)&v96, v39 + 1);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v40 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if (v39)
      {
        if (v38[23] >= 0)
          v41 = v38;
        else
          v41 = *(char **)v38;
        memmove(v40, v41, v39);
      }
      *(_WORD *)((char *)&v40->__r_.__value_.__l.__data_ + v39) = 58;
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v106;
      else
        v42 = (std::string *)v106.__r_.__value_.__r.__words[0];
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v43 = v106.__r_.__value_.__l.__size_;
      v44 = std::string::append(&v96, (const std::string::value_type *)v42, v43);
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v98 = v44->__r_.__value_.__r.__words[2];
      __p = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v111, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v46 = *v8;
        v111.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v46;
      }
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
      }
      else
      {
        v56 = *(_OWORD *)v6;
        v112.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v56;
      }
      v77 = 0;
      v78 = 0;
      v79 = 0;
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
      v109.__r_.__value_.__s.__data_[8] = 0;
      v77 = (std::string *)operator new(0x30uLL);
      v78 = v77;
      v79 = v77 + 2;
      v78 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v79, (__int128 *)&v111, v113, v77);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v109, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
      else
        v109 = v106;
      v74 = 0;
      v75 = 0;
      v76 = 0;
      v107 = &v74;
      v108 = 0;
      v74 = (std::string *)operator new(0x18uLL);
      v75 = v74;
      v76 = v74 + 1;
      v75 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v76, (__int128 *)&v109, (__int128 *)&v110, v74);
      Espresso::sequential_builder::add<Espresso::batch_matmul_params_t>(&v80, a2, (uint64_t)v99, (uint64_t)&__p, (uint64_t)&v103, (uint64_t)v77, (uint64_t)v78, (uint64_t *)&v74);
      v57 = v81;
      if (v81)
      {
        v58 = (unint64_t *)&v81->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v107 = &v74;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
      for (k = 0; k != -6; k -= 3)
      {
        if (SHIBYTE(v112.__r_.__value_.__r.__words[k + 2]) < 0)
          operator delete(*(void **)((char *)&v111 + k * 8 + 24));
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v99, "batch_matmul");
      v47 = *a3;
      if ((*a3)[23] >= 0)
        v48 = (*a3)[23];
      else
        v48 = *((_QWORD *)*a3 + 1);
      v49 = &v96;
      std::string::basic_string[abi:ne180100]((uint64_t)&v96, v48 + 1);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v49 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if (v48)
      {
        if (v47[23] >= 0)
          v50 = v47;
        else
          v50 = *(char **)v47;
        memmove(v49, v50, v48);
      }
      *(_WORD *)((char *)&v49->__r_.__value_.__l.__data_ + v48) = 58;
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v106;
      else
        v51 = (std::string *)v106.__r_.__value_.__r.__words[0];
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v52 = v106.__r_.__value_.__l.__size_;
      v53 = std::string::append(&v96, (const std::string::value_type *)v51, v52);
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v98 = v53->__r_.__value_.__r.__words[2];
      __p = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v111, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
      }
      else
      {
        v55 = *(_OWORD *)v6;
        v111.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
        *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v55;
      }
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v61 = *v8;
        v112.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v61;
      }
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
      v109.__r_.__value_.__s.__data_[8] = 0;
      v69 = (std::string *)operator new(0x30uLL);
      v70 = v69;
      v71 = v69 + 2;
      v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v71, (__int128 *)&v111, v113, v69);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v109, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
      else
        v109 = v106;
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v107 = &v66;
      v108 = 0;
      v66 = (std::string *)operator new(0x18uLL);
      v67 = v66;
      v68 = v66 + 1;
      v67 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v68, (__int128 *)&v109, (__int128 *)&v110, v66);
      Espresso::sequential_builder::add<Espresso::batch_matmul_params_t>(&v72, a2, (uint64_t)v99, (uint64_t)&__p, (uint64_t)&v103, (uint64_t)v69, (uint64_t)v70, (uint64_t *)&v66);
      v62 = v73;
      if (v73)
      {
        v63 = (unint64_t *)&v73->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v107 = &v66;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
      for (m = 0; m != -6; m -= 3)
      {
        if (SHIBYTE(v112.__r_.__value_.__r.__words[m + 2]) < 0)
          operator delete(*(void **)((char *)&v111 + m * 8 + 24));
      }
    }
    if (SHIBYTE(v98) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    if (v100 < 0)
      operator delete(v99[0]);
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
  }
}

void sub_19168F0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;

  *(_QWORD *)(v57 - 192) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 192));
  v59 = 0;
  v60 = v57 - 160;
  while (1)
  {
    if (*(char *)(v60 + v59 + 47) < 0)
      operator delete(*(void **)(v60 + v59 + 24));
    v59 -= 24;
    if (v59 == -48)
    {
      if (a51 < 0)
        operator delete(__p);
      if (a45 < 0)
        operator delete(a40);
      if (a57 < 0)
        operator delete(a52);
      if (*(char *)(v57 - 209) < 0)
        operator delete(*(void **)(v57 - 232));
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::sequential_builder::add<Espresso::batch_matmul_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_19168F5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::generic_fill_kernel::blob_options(char a1@<W1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  if ((a1 & 1) != 0)
  {
    v4 = operator new(0x70uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E2DBE228;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_DWORD *)v4 + 12) = 1065353216;
    v4[7] = 0x1FFFFFFFFLL;
    v4[12] = 0;
    v4[13] = 0;
    v4[8] = 0;
    v4[9] = 0;
    *((_BYTE *)v4 + 88) = 0;
    v4[10] = 0;
    a2[1] = v4;
    *((_BYTE *)v4 + 32) = 1;
    v4[3] = &off_1E2D9B4D8;
    *a2 = v4 + 3;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void Espresso::generic_fill_kernel::backpropable(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  Espresso::check_backpropable_result_t::not_backpropable_on_all_inputs((Espresso::check_backpropable_result_t *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3)), a2);
}

void Espresso::generic_tensor_zero_pad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  std::vector<int>::size_type v13;
  int v14;
  std::vector<int>::pointer v15;
  std::vector<int>::pointer v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  std::vector<int>::pointer v24;
  int64_t v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  char *v29;
  void *v30;
  char *v31;
  _QWORD v32[2];
  int v33;
  int v34;
  std::vector<int> v35;
  std::vector<int> v36;
  uint64_t v37;
  char v38;
  int v39;
  uint64_t v40;
  char v41;
  __int128 v42[2];
  uint64_t v43;
  void *__p;
  void *v45;
  uint64_t v46;
  __int128 v47;

  *((_QWORD *)&v47 + 1) = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if ((unint64_t)(a2[1] - v4) >= 0x41)
  {
    v6 = *(_OWORD *)(v4 + 16);
    v7 = *(_QWORD *)(v4 + 32);
    v42[0] = *(_OWORD *)v4;
    v42[1] = v6;
    v43 = v7;
    __p = 0;
    v45 = 0;
    v46 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v4 + 40), *(_QWORD *)(v4 + 48), (uint64_t)(*(_QWORD *)(v4 + 48) - *(_QWORD *)(v4 + 40)) >> 2);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v37 = a3;
    v38 = 0;
    v8 = (char *)operator new(0x40uLL);
    *(_QWORD *)a3 = v8;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v8 + 64;
    v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, v42, &v47, (uint64_t)v8);
LABEL_33:
    *(_QWORD *)(a3 + 8) = v9;
    v30 = __p;
    if (!__p)
      return;
    v45 = __p;
    goto LABEL_35;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v37, (const Espresso::layer_shape *)v4, 0);
  if (!v39)
  {
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v37, 0, (uint64_t)v42);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v36.__begin_ = (std::vector<int>::pointer)a3;
    LOBYTE(v36.__end_) = 0;
    v31 = (char *)operator new(0x40uLL);
    *(_QWORD *)a3 = v31;
    *(_QWORD *)(a3 + 8) = v31;
    *(_QWORD *)(a3 + 16) = v31 + 64;
    v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, v42, &v47, (uint64_t)v31);
    goto LABEL_33;
  }
  Espresso::layer_nd_shape::shape_vector(&v36, (uint64_t)&v37);
  begin = v36.__begin_;
  end = v36.__end_;
  v13 = v36.__end_ - v36.__begin_;
  std::vector<int>::vector(&v35, v13);
  if (end != begin)
  {
    v14 = *(unsigned __int8 *)(a1 + 544);
    v15 = v36.__begin_;
    v16 = v35.__begin_;
    if (v13 <= 1)
      v17 = 1;
    else
      v17 = v13;
    v18 = (int *)(a1 + 292);
    do
    {
      v19 = *(v18 - 1);
      v20 = *v18;
      v21 = v19 & ~(v19 >> 31);
      v22 = v20 & ~(v20 >> 31);
      if (v14)
      {
        if (v19 >= 1 && v20 >= 1)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("constant_pad_kernel: values in pads cannot be both positive when 'pad_to_given_size_mode' flag is set.");
        if (v21 <= v22)
          v21 = v20 & ~(v20 >> 31);
        if (v21 <= *v15)
          v21 = *v15;
      }
      else
      {
        v21 += v22 + *v15;
      }
      v18 += 2;
      *v16++ = v21;
      ++v15;
      --v17;
    }
    while (v17);
  }
  v32[0] = 0;
  v32[1] = 0;
  v33 = 0;
  v24 = v35.__begin_;
  v25 = (char *)v35.__end_ - (char *)v35.__begin_;
  if (v35.__end_ != v35.__begin_)
  {
    v26 = v25 >> 2;
    if ((unint64_t)(v25 >> 2) <= 1)
      v26 = 1;
    v27 = v32;
    do
    {
      v28 = *v24++;
      *v27++ = v28;
      --v26;
    }
    while (v26);
  }
  v34 = (unint64_t)v25 >> 2;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v32, 0, (uint64_t)v42);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v40 = a3;
  v41 = 0;
  v29 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v29;
  *(_QWORD *)(a3 + 8) = v29;
  *(_QWORD *)(a3 + 16) = v29 + 64;
  *(_QWORD *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, v42, &v47, (uint64_t)v29);
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  if (v35.__begin_)
  {
    v35.__end_ = v35.__begin_;
    operator delete(v35.__begin_);
  }
  v30 = v36.__begin_;
  if (v36.__begin_)
  {
    v36.__end_ = v36.__begin_;
LABEL_35:
    operator delete(v30);
  }
}

void sub_19168F9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = v30;
  *(_QWORD *)(v29 + 8) = v31;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_tensor_zero_pad_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  int *v9;
  uint64_t i;
  int v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  const char *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  void *__p[2];
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::string v29;
  _QWORD v30[2];
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  std::string v39;
  void *v40[2];
  char v41;
  std::string **v42;
  char v43;
  std::string v44;
  uint64_t v45;
  std::string v46;
  __int128 v47;

  *(_QWORD *)&v47 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v40, "tensor_zero_pad");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - **(_QWORD **)(a3 + 16)) >> 3), 1uLL, (uint64_t)v40, 1);
  v6 = **(__int128 ***)(a3 + 16);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v39.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v7;
  }
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), (uint64_t)&v39))goto LABEL_31;
  if (*(_BYTE *)(a1 + 544))
  {
    v18 = "backprop tensor_zero_pad when pad_to_given_size_mode is true";
    goto LABEL_38;
  }
  if (!*(_BYTE *)(a1 + 280))
  {
    v18 = "backprop tensor_zero_pad when nd_mode is false";
LABEL_38:
    Espresso::throw_exception_selector<Espresso::not_implemented_error>(v18);
  }
  v8 = 0;
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  v33 = 1;
  v32 = xmmword_191AD0DEC;
  v35 = 1;
  v34 = xmmword_191AD0DEC;
  v36 = 0u;
  v37 = 0u;
  v38 = 0xFFFFFFFF00000000;
  v9 = (int *)(a1 + 292);
  for (i = 65; i != 70; ++i)
  {
    v11 = *v9;
    *(_DWORD *)((char *)v30 + v8) = *(v9 - 1);
    if (v11)
      *(_DWORD *)((char *)&v32 + v8) = -v11;
    else
      *((_BYTE *)v30 + i) = 1;
    v9 += 2;
    v8 += 4;
  }
  Espresso::blob_grad_contrib_name((uint64_t)&v29, (std::string::size_type)&v39, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice");
  v12 = *(_QWORD *)a3;
  v13 = **(__int128 ***)(a3 + 8);
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
  }
  else
  {
    v14 = *v13;
    v46.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v14;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  v44.__r_.__value_.__s.__data_[8] = 0;
  v22 = (std::string *)operator new(0x18uLL);
  v23 = v22;
  v24 = v22 + 1;
  v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v24, (__int128 *)&v46, &v47, v22);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v44, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    v44 = v29;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v42 = &v19;
  v43 = 0;
  v19 = (std::string *)operator new(0x18uLL);
  v20 = v19;
  v21 = v19 + 1;
  v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v21, (__int128 *)&v44, (__int128 *)&v45, v19);
  Espresso::sequential_builder::add<Espresso::general_slice_params_t>(&v27, a2, (uint64_t)__p, v12, (uint64_t)v30, (uint64_t)v22, (uint64_t)v23, (uint64_t *)&v19);
  v15 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v42 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (v26 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
LABEL_31:
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (v41 < 0)
    operator delete(v40[0]);
}

void sub_19168FDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  *(_QWORD *)(v29 - 112) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 112));
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 153) < 0)
    operator delete(*(void **)(v29 - 176));
  if (*(char *)(v29 - 129) < 0)
    operator delete(*(void **)(v29 - 152));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::general_slice_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1916900C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::generic_squeeze_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "squeeze");
  Espresso::build_grads_for_reshape_kernels(a2, a3, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_1916901A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v6 = *(_DWORD *)(a4 - 4);
  v7 = *(_DWORD *)(a2 - 4);
  v8 = *(_DWORD *)(a6 - 4);
  if (v6 >= v7)
  {
    if (v8 < v6)
    {
      *(_DWORD *)(a4 - 4) = v8;
      *(_DWORD *)(a6 - 4) = v6;
      v9 = *(_DWORD *)(a4 - 4);
      v10 = *(_DWORD *)(a2 - 4);
      if (v9 < v10)
      {
        *(_DWORD *)(a2 - 4) = v9;
        *(_DWORD *)(a4 - 4) = v10;
      }
    }
  }
  else
  {
    if (v8 >= v6)
    {
      *(_DWORD *)(a2 - 4) = v6;
      *(_DWORD *)(a4 - 4) = v7;
      v11 = *(_DWORD *)(a6 - 4);
      if (v11 >= v7)
        return;
      *(_DWORD *)(a4 - 4) = v11;
    }
    else
    {
      *(_DWORD *)(a2 - 4) = v8;
    }
    *(_DWORD *)(a6 - 4) = v7;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(a1, a2, a3, a4, a5, a6);
  v12 = *(_DWORD *)(a8 - 4);
  v13 = *(_DWORD *)(a6 - 4);
  if (v12 < v13)
  {
    *(_DWORD *)(a6 - 4) = v12;
    *(_DWORD *)(a8 - 4) = v13;
    v14 = *(_DWORD *)(a6 - 4);
    v15 = *(_DWORD *)(a4 - 4);
    if (v14 < v15)
    {
      *(_DWORD *)(a4 - 4) = v14;
      *(_DWORD *)(a6 - 4) = v15;
      v16 = *(_DWORD *)(a4 - 4);
      v17 = *(_DWORD *)(a2 - 4);
      if (v16 < v17)
      {
        *(_DWORD *)(a2 - 4) = v16;
        *(_DWORD *)(a4 - 4) = v17;
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(a1, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_DWORD *)(a10 - 4);
  v15 = *(_DWORD *)(a8 - 4);
  if (v14 < v15)
  {
    *(_DWORD *)(a8 - 4) = v14;
    *(_DWORD *)(a10 - 4) = v15;
    v16 = *(_DWORD *)(a8 - 4);
    v17 = *(_DWORD *)(a6 - 4);
    if (v16 < v17)
    {
      *(_DWORD *)(a6 - 4) = v16;
      *(_DWORD *)(a8 - 4) = v17;
      v18 = *(_DWORD *)(a6 - 4);
      v19 = *(_DWORD *)(a4 - 4);
      if (v18 < v19)
      {
        *(_DWORD *)(a4 - 4) = v18;
        *(_DWORD *)(a6 - 4) = v19;
        v20 = *(_DWORD *)(a4 - 4);
        v21 = *(_DWORD *)(a2 - 4);
        if (v20 < v21)
        {
          *(_DWORD *)(a2 - 4) = v20;
          *(_DWORD *)(a4 - 4) = v21;
        }
      }
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  char v17;

  v6 = 1;
  switch((a2 - (uint64_t)a4) >> 2)
  {
    case 0:
    case 1:
      return v6 & 1;
    case 2:
      v7 = *(_DWORD *)(a2 - 4);
      if (*a4 < v7)
      {
        *(_DWORD *)(a2 - 4) = *a4;
        *a4 = v7;
      }
      goto LABEL_18;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(a1, a2, a2 - 4, a2 - 4, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8, a2 - 12, a2 - 12, a3, (uint64_t)(a4 + 1));
LABEL_18:
      v6 = 1;
      return v6 & 1;
    default:
      v8 = a2 - 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8);
      v10 = (_DWORD *)(a2 - 12);
      if ((_DWORD *)(a2 - 12) == a4)
        goto LABEL_14;
      v11 = 0;
      v9 = a2 - 12;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)(v9 - 4);
    v9 -= 4;
    v12 = v13;
    if (v13 < *(_DWORD *)(v8 - 4))
    {
      v14 = v10;
      while (1)
      {
        *(v14 - 1) = *v14;
        if (v14 + 1 == (_DWORD *)a2)
          break;
        v15 = v14 + 1;
        v16 = v14[1];
        ++v14;
        if (v12 >= v16)
          goto LABEL_12;
      }
      v15 = (_DWORD *)a2;
LABEL_12:
      *(v15 - 1) = v12;
      if (++v11 == 8)
        break;
    }
    v8 = (uint64_t)v10;
    v10 = (_DWORD *)v9;
    if ((_DWORD *)v9 == a4)
    {
LABEL_14:
      v17 = 1;
      goto LABEL_20;
    }
  }
  v17 = 0;
  LOBYTE(v9) = v9 == (_QWORD)a4;
LABEL_20:
  v6 = v17 | v9;
  return v6 & 1;
}

void Espresso::generic_expand_dims_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
  Espresso::build_grads_for_reshape_kernels(a2, a3, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_191690548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::generic_array_gather_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  unint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  _DWORD *v34;
  std::vector<int>::const_iterator v35;
  int v36;
  _DWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  int *begin;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  std::vector<int> __x;
  std::vector<int> __dst;
  int v69;
  int v70;
  unsigned int v71;
  std::vector<int> v72;
  _QWORD v73[3];
  _BYTE v74[32];
  uint64_t v75;
  void *__p;
  void *v77;
  uint64_t v78;
  __int128 v79;

  *((_QWORD *)&v79 + 1) = *MEMORY[0x1E0C80C00];
  memset(v73, 0, sizeof(v73));
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v73, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 6);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v72, (const Espresso::layer_shape *)*a2, 0);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v69, (const Espresso::layer_shape *)(*a2 + 4), 0);
  if (*(_BYTE *)(a1 + 304))
  {
    v6 = *(_DWORD *)(a1 + 300);
    if (v6 < 0)
      *(_DWORD *)(a1 + 300) = HIDWORD(v72.__end_cap_.__value_) + v6;
    if (v71)
      v7 = *(&v69 + (int)v71 - 1);
    else
      v7 = 1;
    memset(v74, 0, 24);
    std::vector<int>::reserve((std::vector<int> *)v74, SHIDWORD(v72.__end_cap_.__value_) + (uint64_t)v7 - 1);
    if (*(_DWORD *)(a1 + 300))
    {
      v12 = 0;
      v13 = *(_DWORD **)&v74[8];
      do
      {
        if ((unint64_t)v13 >= *(_QWORD *)&v74[16])
        {
          v15 = *(_DWORD **)v74;
          v16 = ((uint64_t)v13 - *(_QWORD *)v74) >> 2;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v18 = *(_QWORD *)&v74[16] - *(_QWORD *)v74;
          if ((uint64_t)(*(_QWORD *)&v74[16] - *(_QWORD *)v74) >> 1 > v17)
            v17 = v18 >> 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v19);
            v13 = *(_DWORD **)&v74[8];
            v15 = *(_DWORD **)v74;
          }
          else
          {
            v20 = 0;
          }
          v21 = (_DWORD *)(v19 + 4 * v16);
          *v21 = *((_DWORD *)&v72.__begin_ + v12);
          v14 = v21 + 1;
          while (v13 != v15)
          {
            v22 = *--v13;
            *--v21 = v22;
          }
          *(_QWORD *)v74 = v21;
          *(_QWORD *)&v74[8] = v14;
          *(_QWORD *)&v74[16] = v19 + 4 * v20;
          if (v15)
            operator delete(v15);
        }
        else
        {
          *v13 = *((_DWORD *)&v72.__begin_ + v12);
          v14 = v13 + 1;
        }
        *(_QWORD *)&v74[8] = v14;
        ++v12;
        v13 = v14;
      }
      while (v12 < *(int *)(a1 + 300));
    }
    if (v71)
    {
      v23 = 0;
      v24 = *(_DWORD **)&v74[8];
      do
      {
        if ((unint64_t)v24 >= *(_QWORD *)&v74[16])
        {
          v26 = *(_DWORD **)v74;
          v27 = ((uint64_t)v24 - *(_QWORD *)v74) >> 2;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v29 = *(_QWORD *)&v74[16] - *(_QWORD *)v74;
          if ((uint64_t)(*(_QWORD *)&v74[16] - *(_QWORD *)v74) >> 1 > v28)
            v28 = v29 >> 1;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
            v30 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v30);
            v24 = *(_DWORD **)&v74[8];
            v26 = *(_DWORD **)v74;
          }
          else
          {
            v31 = 0;
          }
          v32 = (_DWORD *)(v30 + 4 * v27);
          *v32 = *(&v69 + v23);
          v25 = v32 + 1;
          while (v24 != v26)
          {
            v33 = *--v24;
            *--v32 = v33;
          }
          *(_QWORD *)v74 = v32;
          *(_QWORD *)&v74[8] = v25;
          *(_QWORD *)&v74[16] = v30 + 4 * v31;
          if (v26)
            operator delete(v26);
        }
        else
        {
          *v24 = *(&v69 + v23);
          v25 = v24 + 1;
        }
        *(_QWORD *)&v74[8] = v25;
        ++v23;
        v24 = v25;
      }
      while (v23 < (int)v71);
    }
    else
    {
      v34 = *(_DWORD **)&v74[8];
      if (*(_QWORD *)&v74[8] >= *(_QWORD *)&v74[16])
      {
        v37 = *(_DWORD **)v74;
        v38 = (uint64_t)(*(_QWORD *)&v74[8] - *(_QWORD *)v74) >> 2;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v40 = *(_QWORD *)&v74[16] - *(_QWORD *)v74;
        if ((uint64_t)(*(_QWORD *)&v74[16] - *(_QWORD *)v74) >> 1 > v39)
          v39 = v40 >> 1;
        v41 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL;
        v42 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v41)
          v42 = v39;
        if (v42)
        {
          v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v42);
          v34 = *(_DWORD **)&v74[8];
          v37 = *(_DWORD **)v74;
        }
        else
        {
          v43 = 0;
        }
        v44 = (_DWORD *)(v42 + 4 * v38);
        v45 = v42 + 4 * v43;
        *v44 = 1;
        v25 = v44 + 1;
        while (v34 != v37)
        {
          v46 = *--v34;
          *--v44 = v46;
        }
        *(_QWORD *)v74 = v44;
        *(_QWORD *)&v74[8] = v25;
        *(_QWORD *)&v74[16] = v45;
        if (v37)
          operator delete(v37);
      }
      else
      {
        **(_DWORD **)&v74[8] = 1;
        v25 = v34 + 1;
      }
      *(_QWORD *)&v74[8] = v25;
    }
    v47 = *(int *)(a1 + 300) + 1;
    if (v47 >= HIDWORD(v72.__end_cap_.__value_))
    {
      v48 = v25;
    }
    else
    {
      do
      {
        if ((unint64_t)v25 >= *(_QWORD *)&v74[16])
        {
          v49 = *(_DWORD **)v74;
          v50 = ((uint64_t)v25 - *(_QWORD *)v74) >> 2;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 62)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v52 = *(_QWORD *)&v74[16] - *(_QWORD *)v74;
          if ((uint64_t)(*(_QWORD *)&v74[16] - *(_QWORD *)v74) >> 1 > v51)
            v51 = v52 >> 1;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
            v53 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
          {
            v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v53);
            v25 = *(_DWORD **)&v74[8];
            v49 = *(_DWORD **)v74;
          }
          else
          {
            v54 = 0;
          }
          v55 = (_DWORD *)(v53 + 4 * v50);
          *v55 = *((_DWORD *)&v72.__begin_ + v47);
          v48 = v55 + 1;
          while (v25 != v49)
          {
            v56 = *--v25;
            *--v55 = v56;
          }
          *(_QWORD *)v74 = v55;
          *(_QWORD *)&v74[8] = v48;
          *(_QWORD *)&v74[16] = v53 + 4 * v54;
          if (v49)
            operator delete(v49);
        }
        else
        {
          *v25 = *((_DWORD *)&v72.__begin_ + v47);
          v48 = v25 + 1;
        }
        *(_QWORD *)&v74[8] = v48;
        ++v47;
        v25 = v48;
      }
      while (v47 < SHIDWORD(v72.__end_cap_.__value_));
    }
    memset(&__dst, 0, sizeof(__dst));
    v57 = *(void **)v74;
    v58 = (uint64_t)v48 - *(_QWORD *)v74;
    if (v48 == *(_DWORD **)v74)
    {
      HIDWORD(__dst.__end_cap_.__value_) = (unint64_t)v58 >> 2;
    }
    else
    {
      v59 = (unint64_t)v58 >> 2;
      if ((unint64_t)(v58 >> 2) <= 1)
        v60 = 1;
      else
        v60 = v58 >> 2;
      memcpy(&__dst, *(const void **)v74, 4 * v60);
      HIDWORD(__dst.__end_cap_.__value_) = v59;
    }
    v72 = __dst;
    *(_QWORD *)&v74[8] = v57;
    v61 = v57;
    goto LABEL_129;
  }
  v8 = *a2;
  v9 = *((_QWORD *)*a2 + 4);
  v10 = (*a2)[1];
  *(_OWORD *)v74 = **a2;
  *(_OWORD *)&v74[16] = v10;
  v75 = v9;
  __p = 0;
  v77 = 0;
  v78 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v8 + 5), *((_QWORD *)v8 + 6), (uint64_t)(*((_QWORD *)v8 + 6) - *((_QWORD *)v8 + 5)) >> 2);
  if (*(_DWORD *)(a1 + 280) != -1)
    *(_DWORD *)v74 = 1;
  if (*(_DWORD *)(a1 + 284) != -1)
    *(_DWORD *)&v74[4] = 1;
  if (*(_DWORD *)(a1 + 288) != -1)
    *(_DWORD *)&v74[8] = 1;
  if (*(_DWORD *)(a1 + 292) != -1)
    *(_DWORD *)&v74[12] = 1;
  if (*(_DWORD *)(a1 + 296) != -1)
    *(_DWORD *)&v74[16] = 1;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__dst, (const Espresso::layer_shape *)v74, 0);
  v72 = __dst;
  if (HIDWORD(__dst.__end_cap_.__value_) != 5)
  {
    Espresso::layer_nd_shape::shape_vector(&__dst, (uint64_t)&v72);
    v35.__i_ = __dst.__begin_;
    v36 = v71;
    if (v71 > 3)
    {
      if (v71 == 5)
      {
LABEL_83:
        v36 = v70 * v69;
        goto LABEL_121;
      }
      if (v71 == 4)
      {
LABEL_81:
        v36 = v69;
        goto LABEL_121;
      }
      v36 = 0;
    }
    else if (v71 && v71 != 1)
    {
      if (v71 != 2)
        goto LABEL_83;
      goto LABEL_81;
    }
LABEL_121:
    LODWORD(__x.__begin_) = v36;
    std::vector<int>::insert(&__dst, v35, (std::vector<int>::value_type *)&__x);
    memset(&__x, 0, sizeof(__x));
    begin = __dst.__begin_;
    v63 = (char *)__dst.__end_ - (char *)__dst.__begin_;
    if (__dst.__end_ == __dst.__begin_)
    {
      HIDWORD(__x.__end_cap_.__value_) = (unint64_t)v63 >> 2;
      v72 = __x;
      if (!__dst.__end_)
        goto LABEL_127;
    }
    else
    {
      v64 = v63 >> 2;
      v65 = (unint64_t)v63 >> 2;
      if ((unint64_t)(v63 >> 2) <= 1)
        v64 = 1;
      memcpy(&__x, __dst.__begin_, 4 * v64);
      HIDWORD(__x.__end_cap_.__value_) = v65;
      v72 = __x;
    }
    __dst.__end_ = begin;
    operator delete(begin);
    goto LABEL_127;
  }
  v11 = v71;
  if (v71 > 3)
  {
    if (v71 == 5)
    {
LABEL_82:
      v11 = v70 * v69;
      goto LABEL_119;
    }
    if (v71 != 4)
    {
      v11 = 0;
      goto LABEL_119;
    }
  }
  else
  {
    if (!v71 || v71 == 1)
      goto LABEL_119;
    if (v71 != 2)
      goto LABEL_82;
  }
  v11 = v69;
LABEL_119:
  LODWORD(v72.__begin_) = v11;
LABEL_127:
  v61 = __p;
  if (!__p)
    goto LABEL_130;
  v77 = __p;
LABEL_129:
  operator delete(v61);
LABEL_130:
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v72, 0, (uint64_t)v74);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  __dst.__begin_ = (std::vector<int>::pointer)a3;
  LOBYTE(__dst.__end_) = 0;
  v66 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v66;
  *(_QWORD *)(a3 + 8) = v66;
  *(_QWORD *)(a3 + 16) = v66 + 64;
  *(_QWORD *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, (__int128 *)v74, &v79, (uint64_t)v66);
  if (__p)
  {
    v77 = __p;
    operator delete(__p);
  }
  *(_QWORD *)v74 = v73;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v74);
}

void sub_191690CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  a25 = &a22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  _Unwind_Resume(a1);
}

void Espresso::generic_array_gather_kernel::backpropable(_QWORD *a1@<X8>)
{
  __int16 v2;
  void *__p[3];

  v2 = 1;
  std::vector<BOOL>::vector(__p, &v2, 2);
  std::vector<BOOL>::vector(a1, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
}

void sub_191690DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::generic_array_gather_kernel::build_grads_for_inputs(uint64_t a1, Espresso::net **a2, uint64_t *a3)
{
  __int128 *v5;
  std::string::size_type v6;
  char *v7;
  size_t v8;
  void **v9;
  char *v10;
  size_t size;
  std::string *v12;
  std::string *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t i;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  void *__p;
  char v38;
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  unint64_t v55;
  int v56;
  char v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  std::string v64;
  void *v65[2];
  char v66;
  std::string v67;
  std::string **v68;
  char v69;
  std::string v70;
  uint64_t v71;
  std::string v72;
  std::string v73;
  std::string v74;
  uint64_t v75;
  std::string v76;
  __int128 v77;

  *(_QWORD *)&v77 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 304))
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("array_gather::build_grads_for_inputs with simple_gather == false is not implemented");
  if (*(_DWORD *)(a1 + 300))
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("array_gather::build_grads_for_inputs with axis != 0 is not implemented");
  v5 = *(__int128 **)a3[1];
  v6 = *(_QWORD *)a3[2];
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)a3[5], v6))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v67, v6, (uint64_t)a3);
    v7 = (char *)*a3;
    if (*(char *)(*a3 + 23) >= 0)
      v8 = *(unsigned __int8 *)(*a3 + 23);
    else
      v8 = *(_QWORD *)(*a3 + 8);
    v9 = v65;
    std::string::basic_string[abi:ne180100]((uint64_t)v65, v8 + 5);
    if (v66 < 0)
      v9 = (void **)v65[0];
    if (v8)
    {
      if (v7[23] >= 0)
        v10 = v7;
      else
        v10 = *(char **)v7;
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, ":init");
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
    else
      size = v67.__r_.__value_.__l.__size_;
    v12 = &v64;
    std::string::basic_string[abi:ne180100]((uint64_t)&v64, size + 5);
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = (std::string *)v64.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v67;
      else
        v13 = (std::string *)v67.__r_.__value_.__r.__words[0];
      memmove(v12, v13, size);
    }
    strcpy((char *)v12 + size, ":init");
    v14 = Espresso::sequential_builder::blob_shape((Espresso::sequential_builder *)a2, v6);
    v15 = *(_OWORD *)v14;
    v16 = *((_QWORD *)v14 + 4);
    v59 = *((_OWORD *)v14 + 1);
    v58 = v15;
    v60 = v16;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, *((const void **)v14 + 5), *((_QWORD *)v14 + 6), (uint64_t)(*((_QWORD *)v14 + 6) - *((_QWORD *)v14 + 5)) >> 2);
    v54 = 0uLL;
    v55 = 0xFFFFFFFF00000001;
    v57 = 1;
    v56 = 0;
    v53 = 0;
    v51 = 0;
    v52 = 0;
    v50 = 0;
    v17 = (char *)v6;
    if (*(char *)(v6 + 23) < 0)
      v17 = *(char **)v6;
    if (Espresso::net::is_blob_dynamic(a2[10], v17))
    {
      v57 = 0;
      v51 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v50, v6);
    }
    else
    {
      v54 = v58;
      v18 = DWORD1(v59);
      if ((_DWORD)v59 == 1)
        v19 = 4;
      else
        v19 = 5;
      if (DWORD1(v59) == -1)
        v18 = v19;
      v55 = __PAIR64__(v18, v59);
    }
    std::string::basic_string[abi:ne180100]<0>(&v72, "fill");
    v45 = 0;
    v46 = 0;
    v47 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v45, (uint64_t)v50, (uint64_t)v51, 0xAAAAAAAAAAAAAAABLL * (((char *)v51 - v50) >> 3));
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v76, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
    else
      v76 = v64;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v38 = 0;
    v42 = (std::string *)operator new(0x18uLL);
    v43 = v42;
    v44 = v42 + 1;
    v43 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v44, (__int128 *)&v76, &v77, v42);
    Espresso::sequential_builder::add<Espresso::fill_params_t>(&v48, (uint64_t *)a2, (uint64_t)&v72, (uint64_t)v65, (uint64_t)&v53, v45, v46, (uint64_t *)&v42);
    __p = &v42;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
    *(_QWORD *)&v20 = 0x100000001;
    *((_QWORD *)&v20 + 1) = 0x100000001;
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v20;
    LODWORD(v76.__r_.__value_.__r.__words[2]) = -2;
    v76.__r_.__value_.__s.__data_[22] = 0;
    WORD2(v76.__r_.__value_.__r.__words[2]) = 257;
    std::string::basic_string[abi:ne180100]<0>(&__p, "scatter");
    v21 = *a3;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v72, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
    else
      v72 = v64;
    if (*(char *)(v6 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)(v6 + 24), *(_QWORD *)(v6 + 32));
    }
    else
    {
      v22 = *(_OWORD *)(v6 + 24);
      v73.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 40);
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v22;
    }
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
    }
    else
    {
      v23 = *v5;
      v74.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v23;
    }
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
    v70.__r_.__value_.__s.__data_[8] = 0;
    v34 = (std::string *)operator new(0x48uLL);
    v35 = v34;
    v36 = v34 + 3;
    v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, (__int128 *)&v72, (__int128 *)&v75, v34);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v70, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
    else
      v70 = v67;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v68 = &v31;
    v69 = 0;
    v31 = (std::string *)operator new(0x18uLL);
    v32 = v31;
    v33 = v31 + 1;
    v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v33, (__int128 *)&v70, (__int128 *)&v71, v31);
    Espresso::sequential_builder::add<Espresso::scatter_params_t>(&v40, (uint64_t *)a2, (uint64_t)&__p, v21, (uint64_t)&v76, (uint64_t)v34, (uint64_t)v35, (uint64_t *)&v31);
    v24 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v68 = &v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    for (i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v74.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v74.__r_.__value_.__l.__data_ + i * 8));
    }
    if (v39 < 0)
      operator delete(__p);
    v28 = v49;
    if (v49)
    {
      v29 = (unint64_t *)&v49->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    if (v61)
    {
      v62 = v61;
      operator delete(v61);
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (v66 < 0)
      operator delete(v65[0]);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
  }
}

void sub_191691454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  *(_QWORD *)(v63 - 192) = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v63 - 192));
  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a51 < 0)
    operator delete(a46);
  if (a57 < 0)
    operator delete(a52);
  if (a63 < 0)
    operator delete(a58);
  _Unwind_Resume(a1);
}

void Espresso::generic_multinomial_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, _QWORD *a3@<X8>)
{
  const Espresso::layer_shape *v5;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  _DWORD v11[5];
  int v12;
  _QWORD *v13;
  char v14;
  __int128 v15[2];
  void *__p;
  void *v17;
  __int128 v18;

  *(_QWORD *)&v18 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (v5 == a2[1])
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_multinomial_kernel: one input blob required");
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v11, v5, 0);
  v7 = *(_DWORD *)(a1 + 280);
  v8 = v12;
  if (v12 > 3)
  {
    v12 -= 2;
    v9 = (v8 - 1);
  }
  else
  {
    if (v12 <= 0)
      ++v12;
    v9 = v8 - 1;
  }
  v11[v9] = v7;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v11, 0, (uint64_t)v15);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v13 = a3;
  v14 = 0;
  v10 = (char *)operator new(0x40uLL);
  *a3 = v10;
  a3[1] = v10;
  a3[2] = v10 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v15, &v18, (uint64_t)v10);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_191691750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = v21;
  *(_QWORD *)(v20 + 8) = v22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a12);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_gumbel_max_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, _QWORD *a3@<X8>)
{
  const Espresso::layer_shape *v5;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  const Espresso::layer_shape **v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  __int128 v30;
  signed int v31;
  void *__p;
  void *v33;
  __int128 v34;

  *(_QWORD *)&v34 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (v5 == a2[1])
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_gumbel_max_kernel: atleast one input blob required");
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v26, v5, 0);
  v7 = *(unsigned __int8 *)(a1 + 289);
  if (*(_BYTE *)(a1 + 289))
    v8 = 0;
  else
    v8 = HIDWORD(v27) > 3;
  if (v8)
  {
    if (SHIDWORD(v27) == 5)
    {
      v9 = (DWORD1(v26) * v26);
      v10 = (HIDWORD(v26) * v27 * DWORD2(v26));
    }
    else if (SHIDWORD(v27) == 4)
    {
      v9 = v26;
      v10 = (DWORD2(v26) * HIDWORD(v26) * DWORD1(v26));
    }
    else
    {
      v9 = 0;
LABEL_23:
      v10 = 0;
    }
  }
  else
  {
    switch(HIDWORD(v27))
    {
      case 1:
        v9 = 1;
        if (!HIDWORD(v27))
          goto LABEL_23;
        break;
      case 2:
        v9 = v26;
        if (!HIDWORD(v27))
          goto LABEL_23;
        break;
      case 3:
        v9 = (DWORD1(v26) * v26);
        if (!HIDWORD(v27))
          goto LABEL_23;
        break;
      case 4:
        v9 = (DWORD1(v26) * v26 * DWORD2(v26));
        if (!HIDWORD(v27))
          goto LABEL_23;
        break;
      case 5:
        v9 = (DWORD1(v26) * v26 * DWORD2(v26) * HIDWORD(v26));
        if (!HIDWORD(v27))
          goto LABEL_23;
        break;
      default:
        v9 = 0;
        if (!HIDWORD(v27))
          goto LABEL_23;
        break;
    }
    v10 = *((unsigned int *)&v26 + SHIDWORD(v27) - 1);
  }
  v12 = a2;
  v11 = (int *)*a2;
  if ((unint64_t)(v12[1] - (const Espresso::layer_shape *)v11) <= 0x40)
  {
    v19 = *(_DWORD *)(a1 + 280);
  }
  else
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v30, (const Espresso::layer_shape *)(v11 + 16), 0);
    if (v31 <= 2)
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,int const&,int const&,int const&,int const&,int &,int &,int &>(v11[16], v11[17], v11[18], v11[19], v11[20], v9, *(_DWORD *)(a1 + 280), v10);
    v13 = (int)v30;
    v14 = v31 - 2;
    if (v14 < 2)
    {
      v14 = 1;
      v18 = 2;
    }
    else
    {
      v15 = (int *)&v30 + 1;
      v16 = v31 - 3;
      do
      {
        v17 = *v15++;
        v13 *= v17;
        --v16;
      }
      while (v16);
      v18 = (v31 - 1);
    }
    v19 = *((_DWORD *)&v30 + v14);
    v20 = *((int *)&v30 + v18);
    if (v13 != (int)v9)
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>("generic_gumbel_max_kernel: random uniform input (%d, %d, %d) doesn't match logits (%d, %d) batch size", v13, v19, v20, v9, v10);
    v21 = *(_DWORD *)(a1 + 280);
    if (v19 != v21)
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,unsigned long &,int &>(v13, v19, *((_DWORD *)&v30 + v18), v19, v21);
    if ((_DWORD)v20 != (_DWORD)v10)
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>("generic_gumbel_max_kernel: random uniform input (%d, %d, %d) doesn't match logits (%d, %d) class size", v13, v19, v20, v9, v10);
    v7 = *(unsigned __int8 *)(a1 + 289);
  }
  v25 = v27;
  v24 = v26;
  if (v7 || SHIDWORD(v27) <= 3)
  {
    if (SHIDWORD(v27) <= 0)
      HIDWORD(v25) = HIDWORD(v27) + 1;
    v22 = HIDWORD(v27) - 1;
  }
  else
  {
    HIDWORD(v25) = HIDWORD(v27) - 2;
    v22 = (HIDWORD(v27) - 1);
  }
  *((_DWORD *)&v24 + v22) = v19;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v24, 0, (uint64_t)&v30);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v28 = a3;
  v29 = 0;
  v23 = (char *)operator new(0x40uLL);
  *a3 = v23;
  a3[1] = v23;
  a3[2] = v23 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v30, &v34, (uint64_t)v23);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
}

void sub_191691AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v24 + 8) = v25;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,int const&,int const&,int const&,int const&,int &,int &,int &>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>("generic_gumbel_max_kernel: random uniform input (%d, %d, %d, %d, %d) should have the shape (%d, %d, %d)", a1, a2, a3, a4, a5, a6, a7, a8);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>(a1, a2, a3, a4, a5, a6);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,unsigned long &,int &>(int a1, int a2, int a3, int a4, int a5)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>("generic_gumbel_max_kernel: random uniform input (%d, %d, %d) doesn't have required samples i.e. %d != %d", a1, a2, a3, a4, a5);
}

void Espresso::generic_general_slice_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, uint64_t a3@<X8>)
{
  const Espresso::layer_shape *v5;
  uint64_t v7;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  std::vector<int>::pointer begin;
  int64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  char *v26;
  std::vector<int>::pointer v27;
  __int128 v28;
  int v29;
  char *v30;
  void *v31;
  __int128 v32;
  int v33;
  __int128 v34;
  char *v35;
  _QWORD v36[2];
  uint64_t v37;
  std::vector<int> v38;
  void *__p;
  void *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  void *v45[3];
  void *v46[3];
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  int v58;
  uint64_t v59;
  char v60;
  std::vector<int> __x;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;

  *((_QWORD *)&v65 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v7 = a2[1] - v5;
  if (!v7)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_general_slice_kernel: at least one bottom blob required");
  if (*(_BYTE *)(a1 + 355))
  {
    if (v7 != 128)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("generic_general_slice_kernel: expects 2 bottoms when use_static_sizes == true. Got %zu", v7 >> 6);
    goto LABEL_12;
  }
  if ((unint64_t)v7 < 0x41)
    goto LABEL_12;
  v9 = *(int *)(a1 + 376);
  if ((_DWORD)v9 == -1)
  {
    v64 = 0;
    v63 = 0u;
    v62 = 0u;
    *(_QWORD *)&v32 = 0x100000001;
    *((_QWORD *)&v32 + 1) = 0x100000001;
    *(_OWORD *)&__x.__begin_ = v32;
    LODWORD(__x.__end_cap_.__value_) = 1;
    v33 = *((_DWORD *)v5 + 5);
    if (v33 == -1)
    {
      if (*((_DWORD *)v5 + 4) == 1)
        v33 = 4;
      else
        v33 = 5;
    }
    goto LABEL_79;
  }
  if (!(_DWORD)v9)
  {
LABEL_12:
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v56, v5, 0);
    v11 = v58;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, (const void *)(a1 + 280), a1 + 280 + 4 * v58, v58);
    v50 = 0;
    v51 = 0;
    v52 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v50, (const void *)(a1 + 300), a1 + 300 + 4 * v11, v11);
    v47 = 0;
    v48 = 0;
    v49 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v47, (const void *)(a1 + 320), a1 + 320 + 4 * v11, v11);
    memset(v46, 0, sizeof(v46));
    std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL *,BOOL *>(v46, (_BYTE *)(a1 + 340), (_BYTE *)(a1 + 340 + v11), v11);
    memset(v45, 0, sizeof(v45));
    std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL *,BOOL *>(v45, (_BYTE *)(a1 + 345), (_BYTE *)(a1 + 345 + v11), v11);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL *,BOOL *>(&v42, (_BYTE *)(a1 + 350), (_BYTE *)(a1 + 350 + v11), v11);
    __p = 0;
    v40 = 0;
    v41 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)(a1 + 356), a1 + 356 + 4 * v11, v11);
    v12 = v42;
    if (!*(_BYTE *)(a1 + 355) || !(_DWORD)v11)
      goto LABEL_26;
    v13 = 0;
    v14 = "general_slice_kernel: strides must be 1 when use_static_sizes == true.";
    v15 = 1;
    do
    {
      while (1)
      {
        if (*((_DWORD *)v47 + v13) != 1)
          goto LABEL_83;
        v16 = v13 >> 6;
        v17 = 1 << v13;
        if ((*(_QWORD *)&v42[8 * (v13 >> 6)] & (1 << v13)) != 0)
        {
          v14 = "general_slice_kernel: squeeze_masks must be false when use_static_sizes == true.";
          goto LABEL_83;
        }
        if ((*((_QWORD *)v46[0] + v16) & v17) != 0)
        {
          v14 = "general_slice_kernel: begin_masks must be false when use_static_sizes == true.";
          goto LABEL_83;
        }
        if (*(int *)(a1 + 356 + 4 * v13) > 0)
          break;
        if ((*((_QWORD *)v45[0] + v16) & v17) == 0)
        {
          v14 = "general_slice_kernel: end_masks must be true for the index for which static_sizes is not positive, when "
                "use_static_sizes == true.";
LABEL_83:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v14);
        }
        v15 = 0;
        if (++v13 == v11)
          goto LABEL_47;
      }
      ++v13;
    }
    while (v11 != v13);
    if ((v15 & 1) == 0)
    {
LABEL_47:
      v64 = 0;
      v63 = 0u;
      v62 = 0u;
      *(_QWORD *)&v28 = 0x100000001;
      *((_QWORD *)&v28 + 1) = 0x100000001;
      *(_OWORD *)&__x.__begin_ = v28;
      LODWORD(__x.__end_cap_.__value_) = 1;
      v29 = *((_DWORD *)*a2 + 5);
      if (v29 == -1)
      {
        if (*((_DWORD *)*a2 + 4) == 1)
          v29 = 4;
        else
          v29 = 5;
      }
      HIDWORD(__x.__end_cap_.__value_) = v29;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      v38.__begin_ = (std::vector<int>::pointer)a3;
      LOBYTE(v38.__end_) = 0;
      v30 = (char *)operator new(0x40uLL);
      *(_QWORD *)a3 = v30;
      *(_QWORD *)(a3 + 8) = v30;
      *(_QWORD *)(a3 + 16) = v30 + 64;
      *(_QWORD *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, (__int128 *)&__x, &v65, (uint64_t)v30);
      v27 = (std::vector<int>::pointer)v63;
      if ((_QWORD)v63)
      {
        *((_QWORD *)&v63 + 1) = v63;
        goto LABEL_53;
      }
    }
    else
    {
LABEL_26:
      if (v43 > 0x3F || (v43 & 0x3F) != 0)
      {
        v18 = 0;
        v19 = v42;
        do
        {
          v11 -= (*(_QWORD *)v19 >> v18) & 1;
          v19 += 8 * (v18 == 63);
          if (v18 == 63)
            v18 = 0;
          else
            ++v18;
        }
        while (v19 != &v42[8 * (v43 >> 6)] || v18 != (v43 & 0x3F));
      }
      LODWORD(__x.__begin_) = -1;
      std::vector<int>::vector(&v38, v11, (const std::vector<int>::value_type *)&__x);
      Espresso::layer_nd_shape::shape_vector(&__x, (uint64_t)&v56);
      NDLayers::slice_nd_shape_computation(v53, v54, (uint64_t)&v50, (uint64_t *)&v47, (uint64_t *)v46, (uint64_t *)v45, (uint64_t *)&v42, (uint64_t *)&__x, &v38, *(_BYTE *)(a1 + 355), (int **)&__p);
      if (__x.__begin_)
      {
        __x.__end_ = __x.__begin_;
        operator delete(__x.__begin_);
      }
      v36[0] = 0;
      v36[1] = 0;
      v37 = 0;
      begin = v38.__begin_;
      v22 = (char *)v38.__end_ - (char *)v38.__begin_;
      if (v38.__end_ != v38.__begin_)
      {
        v23 = v22 >> 2;
        if ((unint64_t)(v22 >> 2) <= 1)
          v23 = 1;
        v24 = v36;
        do
        {
          v25 = *begin++;
          *v24++ = v25;
          --v23;
        }
        while (v23);
      }
      HIDWORD(v37) = (unint64_t)v22 >> 2;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v36, 0, (uint64_t)&__x);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v59 = a3;
      v60 = 0;
      v26 = (char *)operator new(0x40uLL);
      *(_QWORD *)a3 = v26;
      *(_QWORD *)(a3 + 8) = v26;
      *(_QWORD *)(a3 + 16) = v26 + 64;
      *(_QWORD *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, (__int128 *)&__x, &v65, (uint64_t)v26);
      if ((_QWORD)v63)
      {
        *((_QWORD *)&v63 + 1) = v63;
        operator delete((void *)v63);
      }
      v27 = v38.__begin_;
      if (v38.__begin_)
      {
        v38.__end_ = v38.__begin_;
LABEL_53:
        operator delete(v27);
      }
    }
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    if (v12)
      operator delete(v12);
    if (v45[0])
      operator delete(v45[0]);
    if (v46[0])
      operator delete(v46[0]);
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }
    v31 = (void *)v53;
    if (v53)
    {
      v54 = (uint64_t)v53;
LABEL_68:
      operator delete(v31);
      return;
    }
    return;
  }
  v10 = (_BYTE *)(a1 + 345);
  while (*(v10 - 5) && *v10)
  {
    ++v10;
    if (!--v9)
      goto LABEL_12;
  }
  v64 = 0;
  v63 = 0u;
  v62 = 0u;
  *(_QWORD *)&v34 = 0x100000001;
  *((_QWORD *)&v34 + 1) = 0x100000001;
  *(_OWORD *)&__x.__begin_ = v34;
  LODWORD(__x.__end_cap_.__value_) = 1;
  v33 = *((_DWORD *)v5 + 5);
  if (v33 == -1)
  {
    if (*((_DWORD *)v5 + 4) == 1)
      v33 = 4;
    else
      v33 = 5;
  }
LABEL_79:
  HIDWORD(__x.__end_cap_.__value_) = v33;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v56 = a3;
  v57 = 0;
  v35 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v35;
  *(_QWORD *)(a3 + 8) = v35;
  *(_QWORD *)(a3 + 16) = v35 + 64;
  *(_QWORD *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, (__int128 *)&__x, &v65, (uint64_t)v35);
  v31 = (void *)v63;
  if ((_QWORD)v63)
  {
    *((_QWORD *)&v63 + 1) = v63;
    goto LABEL_68;
  }
}

void sub_1916921A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v39;

  *(_QWORD *)(v35 + 8) = v36;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 184));
  v39 = *(void **)(v37 - 104);
  if (v39)
  {
    *(_QWORD *)(v37 - 96) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_general_slice_kernel::backpropable(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  unsigned __int8 v4;
  void *__p[3];

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v4 = 0;
  std::vector<BOOL>::vector(__p, v3, &v4);
  *(_QWORD *)__p[0] |= 1uLL;
  std::vector<BOOL>::vector(a2, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
}

void sub_191692374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::generic_general_slice_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  __int128 *v6;
  __int128 v7;
  size_t size;
  std::string *v9;
  std::string *v10;
  char *v11;
  size_t v12;
  std::string *v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  unint64_t v28;
  const std::string::value_type **v29;
  __int128 v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  void *__p[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  int v50;
  std::string *v51;
  std::string *v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  std::string *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::string v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  char v65;
  std::string v66;
  std::string v67;
  std::string **v68;
  char v69;
  std::string v70;
  std::string v71;
  std::string v72;
  uint64_t v73;
  std::string v74;
  __int128 v75;

  *(_QWORD *)&v75 = *MEMORY[0x1E0C80C00];
  v6 = *(__int128 **)a3[2];
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v67.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v7;
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)a3[5], (uint64_t)&v67))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v66, (std::string::size_type)&v67, (uint64_t)a3);
    v61 = 0;
    v62 = 0;
    v63 = 0xFFFFFFFF00000001;
    v64 = 0;
    v60 = 0;
    v65 = 0;
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    else
      size = v66.__r_.__value_.__l.__size_;
    v9 = &v59;
    std::string::basic_string[abi:ne180100]((uint64_t)&v59, size + 10);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v66;
      else
        v10 = (std::string *)v66.__r_.__value_.__r.__words[0];
      memmove(v9, v10, size);
    }
    strcpy((char *)v9 + size, ":container");
    std::string::basic_string[abi:ne180100]<0>(__p, "fill");
    v11 = (char *)*a3;
    if (*(char *)(*a3 + 23) >= 0)
      v12 = *(unsigned __int8 *)(*a3 + 23);
    else
      v12 = *(_QWORD *)(*a3 + 8);
    v13 = &v70;
    std::string::basic_string[abi:ne180100]((uint64_t)&v70, v12 + 10);
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)v70.__r_.__value_.__r.__words[0];
    if (v12)
    {
      if (v11[23] >= 0)
        v14 = v11;
      else
        v14 = *(char **)v11;
      memmove(v13, v14, v12);
    }
    strcpy((char *)v13 + v12, ":container");
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v74, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
    else
      v74 = v67;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    v72.__r_.__value_.__s.__data_[8] = 0;
    v54 = (std::string *)operator new(0x18uLL);
    v55 = v54;
    v56 = v54 + 1;
    v55 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v56, (__int128 *)&v74, &v75, v54);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v72, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
    else
      v72 = v59;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v68 = &v51;
    v69 = 0;
    v51 = (std::string *)operator new(0x18uLL);
    v52 = v51;
    v53 = v51 + 1;
    v52 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v53, (__int128 *)&v72, (__int128 *)&v73, v51);
    Espresso::sequential_builder::add<Espresso::fill_params_t>(&v57, a2, (uint64_t)__p, (uint64_t)&v70, (uint64_t)&v60, (uint64_t)v54, (uint64_t)v55, (uint64_t *)&v51);
    v15 = v58;
    if (v58)
    {
      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v68 = &v51;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (SBYTE7(v44) < 0)
      operator delete(__p[0]);
    v18 = *(_OWORD *)(a1 + 360);
    v47 = *(_OWORD *)(a1 + 344);
    v48 = v18;
    v19 = *(_DWORD *)(a1 + 376);
    v20 = *(_OWORD *)(a1 + 296);
    *(_OWORD *)__p = *(_OWORD *)(a1 + 280);
    v44 = v20;
    v21 = *(_OWORD *)(a1 + 328);
    v45 = *(_OWORD *)(a1 + 312);
    v46 = v21;
    v49 = v19;
    v50 = 1;
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v70, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
    else
      v70 = v59;
    v22 = *(__int128 **)a3[1];
    if (*((char *)v22 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
    }
    else
    {
      v23 = *v22;
      v71.__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 2);
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v23;
    }
    memset(&v74, 0, sizeof(v74));
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
    v72.__r_.__value_.__s.__data_[8] = 0;
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v74.__r_.__value_.__l.__size_ = v74.__r_.__value_.__r.__words[0];
    v74.__r_.__value_.__r.__words[2] = v74.__r_.__value_.__r.__words[0] + 48;
    v24 = 0;
    v74.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v74.__r_.__value_.__r.__words[2], (__int128 *)&v70, (__int128 *)&v72, (std::string *)v74.__r_.__value_.__l.__data_);
    do
    {
      if (SHIBYTE(v71.__r_.__value_.__r.__words[v24 + 2]) < 0)
        operator delete(*(void **)((char *)&v70 + v24 * 8 + 24));
      v24 -= 3;
    }
    while (v24 != -6);
    v25 = *(_QWORD *)a3[2];
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3[2] + 8) - v25) >> 3) >= 2)
    {
      v26 = 0;
      v27 = (std::string *)v74.__r_.__value_.__l.__size_;
      v28 = 1;
      do
      {
        v29 = (const std::string::value_type **)(v25 + v26 + 24);
        if ((unint64_t)v27 >= v74.__r_.__value_.__r.__words[2])
        {
          v27 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v74.__r_.__value_.__l.__data_, (uint64_t)v29);
        }
        else
        {
          if (*(char *)(v25 + v26 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(v27, *v29, *(_QWORD *)(v25 + v26 + 32));
          }
          else
          {
            v30 = *(_OWORD *)v29;
            v27->__r_.__value_.__r.__words[2] = *(_QWORD *)(v25 + v26 + 40);
            *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v30;
          }
          ++v27;
        }
        v74.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
        ++v28;
        v25 = *(_QWORD *)a3[2];
        v26 += 24;
      }
      while (v28 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3[2] + 8) - v25) >> 3));
    }
    std::string::basic_string[abi:ne180100]<0>(&v70, "general_slice_update");
    v31 = *a3;
    v39 = 0;
    v40 = 0;
    v38 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, (uint64_t)v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74.__r_.__value_.__l.__size_ - v74.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v72, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
    else
      v72 = v66;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v68 = &v35;
    v69 = 0;
    v35 = (std::string *)operator new(0x18uLL);
    v36 = v35;
    v37 = v35 + 1;
    v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v37, (__int128 *)&v72, (__int128 *)&v73, v35);
    Espresso::sequential_builder::add<Espresso::general_slice_update_params_t>(&v41, a2, (uint64_t)&v70, v31, (uint64_t)__p, v38, v39, (uint64_t *)&v35);
    v32 = v42;
    if (v42)
    {
      v33 = (unint64_t *)&v42->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v68 = &v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
}

void sub_191692A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  *(_QWORD *)(v57 - 144) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 144));
  if (*(char *)(v57 - 169) < 0)
    operator delete(*(void **)(v57 - 192));
  *(_QWORD *)(v57 - 192) = v57 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 192));
  if (a46 < 0)
    operator delete(__p);
  if (a57 < 0)
    operator delete(a52);
  if (*(char *)(v57 - 217) < 0)
    operator delete(*(void **)(v57 - 240));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::general_slice_update_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_191692E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL *,BOOL *>(_QWORD *result, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (!a4)
    return result;
  v7 = result;
  result = std::vector<BOOL>::__vallocate[abi:ne180100](result, a4);
  v8 = v7[1];
  v9 = v8 + a4;
  v7[1] = v8 + a4;
  if (v8)
  {
    v10 = v9 - 1;
    if (((v9 - 1) ^ (v8 - 1)) < 0x40)
      goto LABEL_10;
  }
  else
  {
    v10 = v9 - 1;
  }
  v11 = v10 >> 6;
  if (v9 >= 0x41)
    v12 = v11;
  else
    v12 = 0;
  *(_QWORD *)(*v7 + 8 * v12) = 0;
LABEL_10:
  if (a2 != a3)
  {
    v13 = v8 & 0x3F;
    v14 = (uint64_t *)(*v7 + 8 * (v8 >> 6));
    do
    {
      v15 = 1 << v13;
      if (*a2)
        v16 = *v14 | v15;
      else
        v16 = *v14 & ~v15;
      *v14 = v16;
      ++a2;
      v14 += v13 == 63;
      if (v13 == 63)
        v13 = 0;
      else
        ++v13;
    }
    while (a2 != a3);
  }
  return result;
}

void sub_191692F60(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD v9[3];
  char v10;
  _QWORD *v11;
  _QWORD *v12;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)v6[1];
    v11 = v7;
    v12 = v7;
    v9[0] = v6 + 2;
    v9[1] = &v11;
    v9[2] = &v12;
    v10 = 0;
    if (a2 == a3)
    {
      v8 = v7;
    }
    else
    {
      v8 = v7;
      do
      {
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
        v8 = v12 + 3;
        v12 += 3;
        a2 += 24;
      }
      while (a2 != a3);
    }
    v10 = 1;
    result = (_QWORD *)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
    v6[1] = v8;
  }
  return result;
}

void sub_19169304C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::generic_split_nd_kernel::top_shapes_for_bottom_shapes(_DWORD *a1@<X0>, const Espresso::layer_shape **a2@<X1>, _QWORD *a3@<X8>)
{
  const Espresso::layer_shape *v4;
  uint64_t i;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  std::vector<int>::pointer begin;
  uint64_t v13;
  int64x2_t v14;
  uint64x2_t v15;
  int64x2_t v16;
  int32x2_t v17;
  int v18;
  int v19;
  uint64_t v20;
  std::vector<int>::pointer v21;
  int *v22;
  int v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  std::vector<int>::pointer v29;
  unint64_t v30;
  char *v31;
  int v32;
  std::vector<int>::pointer v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  char *v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  void *v56;
  _QWORD *v57;
  char **v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD v61[2];
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  std::vector<int> v68;
  std::vector<int> v69;
  _BYTE v70[20];
  int v71;

  v4 = *a2;
  if (a2[1] == v4)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_split_nd_kernel: atleast one bottom blob required");
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v70, v4, 0);
  Espresso::layer_nd_shape::shape_vector(&v69, (uint64_t)v70);
  memset(&v68, 0, sizeof(v68));
  if ((int)a1[72] < 1 || (int)a1[73] < 1)
  {
    v8 = (v71 & ((int)a1[70] >> 31)) + a1[70];
    if (v8 < 0 || v8 >= v71)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_split_nd_kernel: Invalid value of the argument 'axis'.");
    i = a1[71];
    v9 = v69.__begin_[v8];
    std::vector<int>::resize(&v68, (int)i);
    if ((int)i >= 1)
    {
      v10 = 0;
      v11 = v9 / (int)i;
      begin = v68.__begin_;
      v13 = v9 % (int)i;
      v14 = (int64x2_t)xmmword_191A82A80;
      v15 = (uint64x2_t)vdupq_n_s64(i - 1);
      v16 = vdupq_n_s64(2uLL);
      do
      {
        v17 = vmovn_s64((int64x2_t)vcgeq_u64(v15, (uint64x2_t)v14));
        if ((v17.i8[0] & 1) != 0)
        {
          if (v10 >= v13)
            v18 = v9 / (int)i;
          else
            v18 = v11 + 1;
          begin[v10] = v18;
        }
        if ((v17.i8[4] & 1) != 0)
        {
          if (v10 + 1 >= v13)
            v19 = v9 / (int)i;
          else
            v19 = v11 + 1;
          begin[v10 + 1] = v19;
        }
        v10 += 2;
        v14 = vaddq_s64(v14, v16);
      }
      while (((i + 1) & 0x1FFFFFFFELL) != v10);
    }
  }
  else
  {
    for (i = 0; i != 128; ++i)
    {
      if ((int)a1[i + 72] < 1)
        break;
    }
    v20 = i;
    std::vector<int>::resize(&v68, i);
    if ((_DWORD)i)
    {
      v21 = v68.__begin_;
      v22 = a1 + 72;
      do
      {
        v23 = *v22++;
        *v21++ = v23;
        --v20;
      }
      while (v20);
    }
  }
  std::vector<int>::vector((std::vector<int> *)v61, v71);
  v24 = (int)i;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v58 = &v65;
  LOBYTE(v59) = 0;
  if ((_DWORD)i)
  {
    if ((i & 0x80000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((int)i);
    v65 = v25;
    v66 = v25;
    v67 = &v25[24 * v26];
    v27 = &v25[24 * v24];
    v28 = 24 * v24;
    do
    {
      *(_QWORD *)v25 = 0;
      *((_QWORD *)v25 + 1) = 0;
      *((_QWORD *)v25 + 2) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v25, *(const void **)&v61[0], *((uint64_t *)&v61[0] + 1), (uint64_t)(*((_QWORD *)&v61[0] + 1) - *(_QWORD *)&v61[0]) >> 2);
      v25 += 24;
      v28 -= 24;
    }
    while (v28);
    v66 = v27;
  }
  if (*(_QWORD *)&v61[0])
  {
    *((_QWORD *)&v61[0] + 1) = *(_QWORD *)&v61[0];
    operator delete(*(void **)&v61[0]);
  }
  std::vector<Espresso::layer_shape>::vector(a3, v24);
  v29 = v68.__begin_;
  v30 = (unint64_t)((char *)v68.__end_ - (char *)v68.__begin_) >> 2;
  v31 = v65;
  if ((_DWORD)v30 != -1431655765 * ((unint64_t)(v66 - v65) >> 3))
    goto LABEL_65;
  v32 = a1[70];
  v33 = v69.__begin_;
  v34 = (unint64_t)((char *)v69.__end_ - (char *)v69.__begin_) >> 2;
  if ((int)v30 < 1)
  {
    v45 = v34 & (v32 >> 31);
    v38 = "Invalid value of the argument 'axis'.";
    v40 = (v45 + v32);
    if (v45 + v32 >= 0 && (int)v40 < (int)v34)
    {
      v43 = 0;
      goto LABEL_49;
    }
LABEL_66:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v38);
  }
  v35 = 0;
  v36 = ((unint64_t)((char *)v68.__end_ - (char *)v68.__begin_) >> 2);
  v37 = 8 * (2 * v36 + v30);
  v38 = "Mismatch between ranks of input and output tensors.";
  do
  {
    if ((int)(v69.__end_ - v69.__begin_) != (uint64_t)(*(_QWORD *)&v65[v35 + 8] - *(_QWORD *)&v65[v35]) >> 2)
      goto LABEL_66;
    v35 += 24;
  }
  while (v37 != v35);
  v39 = v34 & (v32 >> 31);
  v38 = "Invalid value of the argument 'axis'.";
  v40 = (v39 + v32);
  if (v39 + v32 < 0 || (int)v40 >= (int)v34)
    goto LABEL_66;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 4 * v36;
  do
  {
    if (&v31[v41] != (char *)&v69)
    {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v31[v41], (char *)v69.__begin_, (uint64_t)v69.__end_, v69.__end_ - v69.__begin_);
      v29 = v68.__begin_;
      v31 = v65;
    }
    *(_DWORD *)(*(_QWORD *)&v31[v41] + 4 * v40) = v29[v42 / 4];
    v43 += v29[v42 / 4];
    v42 += 4;
    v41 += 24;
  }
  while (v44 != v42);
  v33 = v69.__begin_;
LABEL_49:
  if (v43 != v33[v40])
  {
LABEL_65:
    v38 = "Split layer: Invalid number or size of splits.";
    goto LABEL_66;
  }
  if ((int)v24 >= 1)
  {
    v46 = 0;
    do
    {
      v47 = &v65[24 * v46];
      v59 = 0;
      v60 = 0;
      v58 = 0;
      v48 = *(int **)v47;
      v49 = *((_QWORD *)v47 + 1) - *(_QWORD *)v47;
      if (v49)
      {
        v50 = v49 >> 2;
        if ((unint64_t)(v49 >> 2) <= 1)
          v50 = 1;
        v51 = &v58;
        do
        {
          v52 = *v48++;
          *v51++ = v52;
          --v50;
        }
        while (v50);
      }
      HIDWORD(v60) = (unint64_t)v49 >> 2;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v58, 0, (uint64_t)v61);
      v53 = *a3 + (v46 << 6);
      v54 = v61[0];
      v55 = v61[1];
      *(_QWORD *)(v53 + 32) = v62;
      *(_OWORD *)v53 = v54;
      *(_OWORD *)(v53 + 16) = v55;
      v57 = (_QWORD *)(v53 + 40);
      v56 = *(void **)(v53 + 40);
      if (v56)
      {
        *(_QWORD *)(v53 + 48) = v56;
        operator delete(v56);
        *v57 = 0;
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v53 + 56) = 0;
      }
      *(_OWORD *)v57 = v63;
      *(_QWORD *)(v53 + 56) = v64;
      ++v46;
    }
    while (v46 != v24);
  }
  *(_QWORD *)&v61[0] = &v65;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v61);
  if (v68.__begin_)
  {
    v68.__end_ = v68.__begin_;
    operator delete(v68.__begin_);
  }
  if (v69.__begin_)
  {
    v69.__end_ = v69.__begin_;
    operator delete(v69.__begin_);
  }
}

void sub_1916934FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  a13 = &a21;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  v27 = *(void **)(v25 - 128);
  if (v27)
  {
    *(_QWORD *)(v25 - 120) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_split_nd_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __int128 *v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  int v23;
  __int16 v24;
  std::string v25;
  std::string v26;
  void *v27[2];
  char v28;
  std::string **v29;
  char v30;
  std::string v31;
  __int128 v32;

  *(_QWORD *)&v32 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v27, "split_nd");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - **(_QWORD **)(a3 + 16)) >> 3), 1uLL, (uint64_t)v27, 1);
  v6 = **(__int128 ***)(a3 + 16);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), (uint64_t)&v26))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v25, (std::string::size_type)&v26, a3);
    v24 = 1;
    v23 = *(_DWORD *)(a1 + 280);
    std::string::basic_string[abi:ne180100]<0>(__p, "general_concat");
    v9 = *(_QWORD *)a3;
    v8 = *(uint64_t **)(a3 + 8);
    v17 = 0;
    v18 = 0;
    v16 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *v8, v8[1], 0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3));
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v31, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    else
      v31 = v25;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v29 = &v13;
    v30 = 0;
    v13 = (std::string *)operator new(0x18uLL);
    v14 = v13;
    v15 = v13 + 1;
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (__int128 *)&v31, &v32, v13);
    Espresso::sequential_builder::add<Espresso::general_concat_params_t>(&v21, a2, (uint64_t)__p, v9, (uint64_t)&v23, v16, v17, (uint64_t *)&v13);
    v10 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v29 = &v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    if (v20 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (v28 < 0)
    operator delete(v27[0]);
}

void sub_191693808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  *(_QWORD *)(v36 - 80) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 80));
  if (a21 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  if (*(char *)(v36 - 97) < 0)
    operator delete(*(void **)(v36 - 120));
  _Unwind_Resume(a1);
}

void Espresso::generic_softmax_nd_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  Espresso::build_softmax_grad(a2, a3, *(_DWORD *)(a1 + 280));
}

void Espresso::generic_sliding_windows_kernel::top_shapes_for_bottom_shapes(int *a1@<X0>, const Espresso::layer_shape **a2@<X1>, _QWORD *a3@<X8>)
{
  const Espresso::layer_shape *v5;
  int v8;
  std::vector<int>::pointer begin;
  unint64_t v10;
  std::vector<int>::pointer v11;
  std::vector<int>::pointer end;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  const char *v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  std::vector<int> v33;
  std::vector<int> __p;
  _BYTE v35[24];
  _QWORD *v36;
  char v37;
  __int128 v38[2];
  void *v39;
  void *v40;
  __int128 v41;

  *(_QWORD *)&v41 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (a2[1] == v5)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_sliding_windows_kernel: atleast one bottom blob required");
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v35, v5, 0);
  Espresso::layer_nd_shape::shape_vector(&__p, (uint64_t)v35);
  v8 = *((_DWORD *)*a2 + 5);
  if (v8 == -1)
  {
    if (*((_DWORD *)*a2 + 4) == 1)
      v8 = 4;
    else
      v8 = 5;
  }
  std::vector<int>::vector(&v33, v8 + 1);
  begin = __p.__begin_;
  v10 = (unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2;
  v11 = v33.__begin_;
  end = v33.__end_;
  v13 = (char *)v33.__end_ - (char *)v33.__begin_;
  v14 = v33.__end_ - v33.__begin_;
  if (v14 - 1 != (int)v10)
  {
    v17 = "Sliding Windows Layer: Mismatch between ranks of input and output tensors.";
    goto LABEL_38;
  }
  v15 = a1[71];
  if (v15 < 1)
  {
    v17 = "Sliding Windows Layer: Window size can't be less than 1";
    goto LABEL_38;
  }
  v16 = a1[72];
  if (v16 < 1)
  {
    v17 = "Sliding Windows Layer: Step can't be less than 1";
    goto LABEL_38;
  }
  v17 = "Sliding Windows Layer: Invalid value of the argument 'axis'.";
  v18 = (v10 & (a1[70] >> 31)) + a1[70];
  if ((v18 & 0x80000000) != 0 || (int)v18 >= (int)v10)
LABEL_38:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v17);
  v19 = __p.__begin_[v18];
  v20 = __OFSUB__(v19, v15);
  v21 = v19 - v15;
  if (v21 < 0 != v20)
  {
    v17 = "Sliding Windows Layer: Window Size can't be larger than the dimension length.";
    goto LABEL_38;
  }
  v22 = v21 / v16;
  if (v22 < 0)
  {
    v17 = "Sliding Windows Layer: Invalid values in arguments (axis, window_size, step)";
    goto LABEL_38;
  }
  v33.__begin_[v18] = v22 + 1;
  v23 = (v18 + 1);
  v11[v23] = v15;
  if (end == v11)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    goto LABEL_25;
  }
  v24 = 0;
  if (v14 <= 1)
    v14 = 1;
  do
  {
    v25 = v24;
    if (v24 >= v18)
    {
      if (v24 <= v23)
        goto LABEL_20;
      v25 = v24 - 1;
    }
    v11[v24] = begin[v25];
LABEL_20:
    ++v24;
  }
  while (v14 != v24);
  v29 = 0;
  v30 = 0;
  v26 = &v29;
  v31 = 0;
  do
  {
    v27 = *v11++;
    *(_DWORD *)v26 = v27;
    v26 = (uint64_t *)((char *)v26 + 4);
    --v14;
  }
  while (v14);
LABEL_25:
  v32 = v13 >> 2;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v29, 0, (uint64_t)v38);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v36 = a3;
  v37 = 0;
  v28 = (char *)operator new(0x40uLL);
  *a3 = v28;
  a3[1] = v28;
  a3[2] = v28 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v38, &v41, (uint64_t)v28);
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v33.__begin_)
  {
    v33.__end_ = v33.__begin_;
    operator delete(v33.__begin_);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_191693B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v26;

  *(_QWORD *)(v22 + 8) = v23;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a22);
  v26 = *(void **)(v24 - 64);
  if (v26)
  {
    *(_QWORD *)(v24 - 56) = v26;
    operator delete(v26);
  }
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void Espresso::generic_reverse_seq_kernel::top_shapes_for_bottom_shapes(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  char *v6;
  __int128 v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;

  *((_QWORD *)&v12 + 1) = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if ((unint64_t)(a1[1] - *a1) <= 0x7F)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_reverse_seq_kernel: atleast two bottom blobs required");
  v4 = *(_OWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 32);
  v7[0] = *(_OWORD *)v3;
  v7[1] = v4;
  v8 = v5;
  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v3 + 40), *(_QWORD *)(v3 + 48), (uint64_t)(*(_QWORD *)(v3 + 48) - *(_QWORD *)(v3 + 40)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_191693CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_reverse_seq_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t i;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  void *__p[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::string v27;
  std::string v28;
  void *v29[2];
  char v30;
  std::string **v31;
  char v32;
  std::string v33;
  uint64_t v34;
  std::string v35;
  std::string v36;
  __int128 v37;

  *((_QWORD *)&v37 + 1) = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v29, "reverse_seq");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - **(_QWORD **)(a3 + 16)) >> 3), 2uLL, (uint64_t)v29, 1);
  v6 = **(__int128 ***)(a3 + 16);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v28.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v7;
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), (uint64_t)&v28))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v27, (std::string::size_type)&v28, a3);
    std::string::basic_string[abi:ne180100]<0>(__p, "reverse_seq");
    v8 = *(_QWORD *)a3;
    v9 = **(__int128 ***)(a3 + 8);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v35.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v10;
    }
    v11 = **(_QWORD **)(a3 + 16);
    if (*(char *)(v11 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v11 + 24), *(_QWORD *)(v11 + 32));
    }
    else
    {
      v12 = *(_OWORD *)(v11 + 24);
      v36.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 40);
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v12;
    }
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
    v33.__r_.__value_.__s.__data_[8] = 0;
    v20 = (std::string *)operator new(0x30uLL);
    v21 = v20;
    v22 = v20 + 2;
    v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v22, (__int128 *)&v35, &v37, v20);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v33, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      v33 = v27;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v31 = &v17;
    v32 = 0;
    v17 = (std::string *)operator new(0x18uLL);
    v18 = v17;
    v19 = v17 + 1;
    v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v19, (__int128 *)&v33, (__int128 *)&v34, v17);
    Espresso::sequential_builder::add<Espresso::reverse_seq_params_t>(&v25, a2, (uint64_t)__p, v8, a1 + 280, (uint64_t)v20, (uint64_t)v21, (uint64_t *)&v17);
    v13 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v31 = &v17;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v36.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v35 + i * 8 + 24));
    }
    if (v24 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (v30 < 0)
    operator delete(v29[0]);
}

void sub_191694014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41)
{
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;

  *(_QWORD *)(v41 - 144) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 144));
  v43 = 0;
  v44 = v41 - 112;
  while (1)
  {
    if (*(char *)(v44 + v43 + 47) < 0)
      operator delete(*(void **)(v44 + v43 + 24));
    v43 -= 24;
    if (v43 == -48)
    {
      if (a20 < 0)
        operator delete(__p);
      if (a28 < 0)
        operator delete(a23);
      if (a34 < 0)
        operator delete(a29);
      if (a40 < 0)
        operator delete(a35);
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::sequential_builder::add<Espresso::reverse_seq_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_191694320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::generic_cross_entropy_kernel::top_shapes_for_bottom_shapes(_QWORD *a1@<X8>)
{
  __int128 v2;
  char *v3;
  __int128 v4;
  unint64_t v5;
  __int128 v6;
  void *__p[2];
  uint64_t v8;
  __int128 v9;

  *((_QWORD *)&v9 + 1) = *MEMORY[0x1E0C80C00];
  v8 = 0;
  *(_OWORD *)__p = 0u;
  v6 = 0u;
  *(_QWORD *)&v2 = 0x100000001;
  *((_QWORD *)&v2 + 1) = 0x100000001;
  v4 = v2;
  v5 = 0xFFFFFFFF00000001;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (char *)operator new(0x40uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 64;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a1 + 2), &v4, &v9, (uint64_t)v3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_191694478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_non_maximum_suppression_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, uint64_t *a3@<X8>)
{
  const Espresso::layer_shape *v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  const Espresso::layer_shape **v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  const char *v120;
  const char *v121;
  const char *v122;
  const Espresso::layer_shape **v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *__p;
  _BYTE *v129;
  uint64_t v130;
  void *v131;
  _BYTE *v132;
  uint64_t v133;
  void *v134;
  _BYTE *v135;
  uint64_t v136;
  void *v137;
  _BYTE *v138;
  uint64_t v139;
  _DWORD v140[5];
  int v141;
  _DWORD v142[5];
  int v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t *v148;
  __int128 __src;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((unint64_t)(a2[1] - v5) <= 0x7F)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("non_maximum_suppression_kernel: must have at least 2 inputs.");
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v142, v5, 0);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v140, (const Espresso::layer_shape *)((char *)*a2 + 64), 0);
  v8 = *(unsigned __int8 *)(a1 + 307);
  if (*(_BYTE *)(a1 + 307))
  {
    if (v143 != 4 || v141 != 4)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("non_maximum_suppression_kernel  with ANE layout: first two inputs must have rank 4.");
    v9 = 1;
    v10 = 3;
  }
  else
  {
    if (v143 != 3 || v141 != 3)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("non_maximum_suppression_kernel: first two inputs must have rank 3.");
    v9 = 2;
    v10 = 1;
  }
  v123 = a2;
  v11 = v142[0];
  if (v142[0] != v140[0] || (v124 = v140[v10], v142[v10] != v124) || v142[v9] != 4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("non_maximum_suppression_kernel: invalid input shape.");
  v12 = *(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312);
  v14 = v140[1];
  v13 = v140[2];
  v15 = *(_DWORD *)(a1 + 280);
  if (v124 >= 10)
    v16 = 10;
  else
    v16 = v140[v10];
  if ((a2[1] - *a2) >> 6 > (unint64_t)((uint64_t)((v12 << 30) + 0x400000000) >> 32))
    v15 = v16;
  v137 = 0;
  v138 = 0;
  if (v15 <= 1)
    v17 = 1;
  else
    v17 = v15;
  v139 = 0;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  __p = 0;
  v129 = 0;
  v130 = 0;
  if (v8)
  {
    *(_QWORD *)((char *)&__src + 4) = 0x100000004;
    LODWORD(__src) = v142[0];
    HIDWORD(__src) = v17;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v137, (char *)&__src, (uint64_t)&v150, 4uLL);
    *(_QWORD *)&__src = __PAIR64__(v14, v11);
    DWORD2(__src) = 1;
    HIDWORD(__src) = v17;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v134, (char *)&__src, (uint64_t)&v150, 4uLL);
    v18 = v123;
    *(_QWORD *)((char *)&__src + 4) = 0x100000001;
    LODWORD(__src) = v11;
    HIDWORD(__src) = v17;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v131, (char *)&__src, (uint64_t)&v150, 4uLL);
  }
  else
  {
    *(_QWORD *)&__src = __PAIR64__(v17, v142[0]);
    DWORD2(__src) = 4;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v137, (char *)&__src, (uint64_t)&__src + 12, 3uLL);
    *(_QWORD *)&__src = __PAIR64__(v17, v11);
    DWORD2(__src) = v13;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v134, (char *)&__src, (uint64_t)&__src + 12, 3uLL);
    LODWORD(__src) = v11;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&__p, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
    v18 = v123;
    *(_QWORD *)&__src = __PAIR64__(v17, v11);
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v131, (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v19 = (int *)v137;
  v20 = v138 - (_BYTE *)v137;
  if (v138 != v137)
  {
    v21 = v20 >> 2;
    if ((unint64_t)(v20 >> 2) <= 1)
      v21 = 1;
    v22 = &v125;
    do
    {
      v23 = *v19++;
      *(_DWORD *)v22 = v23;
      v22 = (uint64_t *)((char *)v22 + 4);
      --v21;
    }
    while (v21);
  }
  HIDWORD(v127) = (unint64_t)v20 >> 2;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v125, 0, (uint64_t)&__src);
  v24 = a3[2];
  v25 = a3[1];
  if (v25 >= v24)
  {
    v28 = (uint64_t)(v25 - *a3) >> 6;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 58)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v30 = v24 - *a3;
    if (v30 >> 5 > v29)
      v29 = v30 >> 5;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFC0)
      v31 = 0x3FFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    v148 = a3 + 2;
    v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v31);
    v33 = &v32[64 * v28];
    v144 = v32;
    v145 = v33;
    v147 = &v32[64 * v34];
    v35 = v150;
    v36 = v151;
    *(_OWORD *)v33 = __src;
    *((_OWORD *)v33 + 1) = v35;
    *((_QWORD *)v33 + 4) = v36;
    *((_QWORD *)v33 + 5) = 0;
    *((_QWORD *)v33 + 6) = 0;
    *((_QWORD *)v33 + 7) = 0;
    *(_OWORD *)(v33 + 40) = v152;
    *((_QWORD *)v33 + 7) = v153;
    v152 = 0uLL;
    v153 = 0;
    v146 = v33 + 64;
    std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v144);
    v37 = a3[1];
    std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v144);
    v38 = (void *)v152;
    a3[1] = v37;
    if (v38)
    {
      *((_QWORD *)&v152 + 1) = v38;
      operator delete(v38);
    }
  }
  else
  {
    v26 = v150;
    v27 = v151;
    *(_OWORD *)v25 = __src;
    *(_OWORD *)(v25 + 16) = v26;
    *(_QWORD *)(v25 + 32) = v27;
    *(_QWORD *)(v25 + 40) = 0;
    *(_QWORD *)(v25 + 48) = 0;
    *(_QWORD *)(v25 + 56) = 0;
    *(_OWORD *)(v25 + 40) = v152;
    *(_QWORD *)(v25 + 56) = v153;
    v152 = 0uLL;
    v153 = 0;
    a3[1] = v25 + 64;
  }
  if (!*(_BYTE *)(a1 + 304))
  {
    v125 = 0;
    v126 = 0;
    v127 = 0;
    v39 = (int *)v134;
    v40 = v135 - (_BYTE *)v134;
    if (v135 != v134)
    {
      v41 = v40 >> 2;
      if ((unint64_t)(v40 >> 2) <= 1)
        v41 = 1;
      v42 = &v125;
      do
      {
        v43 = *v39++;
        *(_DWORD *)v42 = v43;
        v42 = (uint64_t *)((char *)v42 + 4);
        --v41;
      }
      while (v41);
    }
    HIDWORD(v127) = (unint64_t)v40 >> 2;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v125, 0, (uint64_t)&__src);
    v44 = a3[1];
    v45 = a3[2];
    if (v44 >= v45)
    {
      v48 = (uint64_t)(v44 - *a3) >> 6;
      v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 58)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v50 = v45 - *a3;
      if (v50 >> 5 > v49)
        v49 = v50 >> 5;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFC0)
        v51 = 0x3FFFFFFFFFFFFFFLL;
      else
        v51 = v49;
      v148 = a3 + 2;
      v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v51);
      v53 = &v52[64 * v48];
      v144 = v52;
      v145 = v53;
      v147 = &v52[64 * v54];
      v55 = v150;
      v56 = v151;
      *(_OWORD *)v53 = __src;
      *((_OWORD *)v53 + 1) = v55;
      *((_QWORD *)v53 + 4) = v56;
      *((_QWORD *)v53 + 5) = 0;
      *((_QWORD *)v53 + 6) = 0;
      *((_QWORD *)v53 + 7) = 0;
      *(_OWORD *)(v53 + 40) = v152;
      *((_QWORD *)v53 + 7) = v153;
      v152 = 0uLL;
      v153 = 0;
      v146 = v53 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v144);
      v57 = a3[1];
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v144);
      v58 = (void *)v152;
      a3[1] = v57;
      if (v58)
      {
        *((_QWORD *)&v152 + 1) = v58;
        operator delete(v58);
      }
    }
    else
    {
      v46 = v150;
      v47 = v151;
      *(_OWORD *)v44 = __src;
      *(_OWORD *)(v44 + 16) = v46;
      *(_QWORD *)(v44 + 32) = v47;
      *(_QWORD *)(v44 + 40) = 0;
      *(_QWORD *)(v44 + 48) = 0;
      *(_QWORD *)(v44 + 56) = 0;
      *(_OWORD *)(v44 + 40) = v152;
      *(_QWORD *)(v44 + 56) = v153;
      v152 = 0uLL;
      v153 = 0;
      a3[1] = v44 + 64;
    }
  }
  if (!*(_BYTE *)(a1 + 306))
  {
    v125 = 0;
    v126 = 0;
    v127 = 0;
    v59 = (int *)v131;
    v60 = v132 - (_BYTE *)v131;
    if (v132 != v131)
    {
      v61 = v60 >> 2;
      if ((unint64_t)(v60 >> 2) <= 1)
        v61 = 1;
      v62 = &v125;
      do
      {
        v63 = *v59++;
        *(_DWORD *)v62 = v63;
        v62 = (uint64_t *)((char *)v62 + 4);
        --v61;
      }
      while (v61);
    }
    HIDWORD(v127) = (unint64_t)v60 >> 2;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v125, 0, (uint64_t)&__src);
    v64 = a3[1];
    v65 = a3[2];
    if (v64 >= v65)
    {
      v68 = (uint64_t)(v64 - *a3) >> 6;
      v69 = v68 + 1;
      if ((unint64_t)(v68 + 1) >> 58)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v70 = v65 - *a3;
      if (v70 >> 5 > v69)
        v69 = v70 >> 5;
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFC0)
        v71 = 0x3FFFFFFFFFFFFFFLL;
      else
        v71 = v69;
      v148 = a3 + 2;
      v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v71);
      v73 = &v72[64 * v68];
      v144 = v72;
      v145 = v73;
      v147 = &v72[64 * v74];
      v75 = v150;
      v76 = v151;
      *(_OWORD *)v73 = __src;
      *((_OWORD *)v73 + 1) = v75;
      *((_QWORD *)v73 + 4) = v76;
      *((_QWORD *)v73 + 5) = 0;
      *((_QWORD *)v73 + 6) = 0;
      *((_QWORD *)v73 + 7) = 0;
      *(_OWORD *)(v73 + 40) = v152;
      *((_QWORD *)v73 + 7) = v153;
      v152 = 0uLL;
      v153 = 0;
      v146 = v73 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v144);
      v77 = a3[1];
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v144);
      v78 = (void *)v152;
      a3[1] = v77;
      if (v78)
      {
        *((_QWORD *)&v152 + 1) = v78;
        operator delete(v78);
      }
    }
    else
    {
      v66 = v150;
      v67 = v151;
      *(_OWORD *)v64 = __src;
      *(_OWORD *)(v64 + 16) = v66;
      *(_QWORD *)(v64 + 32) = v67;
      *(_QWORD *)(v64 + 40) = 0;
      *(_QWORD *)(v64 + 48) = 0;
      *(_QWORD *)(v64 + 56) = 0;
      *(_OWORD *)(v64 + 40) = v152;
      *(_QWORD *)(v64 + 56) = v153;
      v152 = 0uLL;
      v153 = 0;
      a3[1] = v64 + 64;
    }
  }
  if (!*(_BYTE *)(a1 + 305))
  {
    if (*(_BYTE *)(a1 + 307))
    {
      v121 = "non_maximum_suppression_kernel: no_count must be true if ane_layout is true.";
LABEL_130:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>(v121);
    }
    v125 = 0;
    v126 = 0;
    v127 = 0;
    v79 = (int *)__p;
    v80 = v129 - (_BYTE *)__p;
    if (v129 != __p)
    {
      v81 = v80 >> 2;
      if ((unint64_t)(v80 >> 2) <= 1)
        v81 = 1;
      v82 = &v125;
      do
      {
        v83 = *v79++;
        *(_DWORD *)v82 = v83;
        v82 = (uint64_t *)((char *)v82 + 4);
        --v81;
      }
      while (v81);
    }
    HIDWORD(v127) = (unint64_t)v80 >> 2;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v125, 0, (uint64_t)&__src);
    v84 = a3[1];
    v85 = a3[2];
    if (v84 >= v85)
    {
      v88 = (uint64_t)(v84 - *a3) >> 6;
      v89 = v88 + 1;
      if ((unint64_t)(v88 + 1) >> 58)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v90 = v85 - *a3;
      if (v90 >> 5 > v89)
        v89 = v90 >> 5;
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFC0)
        v91 = 0x3FFFFFFFFFFFFFFLL;
      else
        v91 = v89;
      v148 = a3 + 2;
      v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v91);
      v93 = &v92[64 * v88];
      v144 = v92;
      v145 = v93;
      v147 = &v92[64 * v94];
      v95 = v150;
      v96 = v151;
      *(_OWORD *)v93 = __src;
      *((_OWORD *)v93 + 1) = v95;
      *((_QWORD *)v93 + 4) = v96;
      *((_QWORD *)v93 + 5) = 0;
      *((_QWORD *)v93 + 6) = 0;
      *((_QWORD *)v93 + 7) = 0;
      *(_OWORD *)(v93 + 40) = v152;
      *((_QWORD *)v93 + 7) = v153;
      v152 = 0uLL;
      v153 = 0;
      v146 = v93 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v144);
      v97 = a3[1];
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v144);
      v98 = (void *)v152;
      a3[1] = v97;
      if (v98)
      {
        *((_QWORD *)&v152 + 1) = v98;
        operator delete(v98);
      }
    }
    else
    {
      v86 = v150;
      v87 = v151;
      *(_OWORD *)v84 = __src;
      *(_OWORD *)(v84 + 16) = v86;
      *(_QWORD *)(v84 + 32) = v87;
      *(_QWORD *)(v84 + 40) = 0;
      *(_QWORD *)(v84 + 48) = 0;
      *(_QWORD *)(v84 + 56) = 0;
      *(_OWORD *)(v84 + 40) = v152;
      *(_QWORD *)(v84 + 56) = v153;
      v152 = 0uLL;
      v153 = 0;
      a3[1] = v84 + 64;
    }
  }
  if ((v18[1] - *v18) >> 6 < (unint64_t)((uint64_t)((v12 << 30) + 0x200000000) >> 32))
  {
    v121 = "non_maximum_suppression_kernel: expected additional inputs from expected_gather_bottom_count.";
    goto LABEL_130;
  }
  if ((int)(v12 >> 2) >= 1)
  {
    v99 = 0;
    v100 = (v12 >> 2);
    v101 = 128;
    v122 = "Gather index out of bounds of rank.";
    while (1)
    {
      if (v99 + 2 >= (v18[1] - *v18) >> 6)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v125, (const Espresso::layer_shape *)((char *)*v18 + v101), 0);
      v102 = *(_QWORD *)(a1 + 312);
      if (v99 >= (*(_QWORD *)(a1 + 320) - v102) >> 2)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v103 = *(_DWORD *)(v102 + 4 * v99) + (HIDWORD(v127) & (*(int *)(v102 + 4 * v99) >> 31));
      if ((int)v103 < 1 || SHIDWORD(v127) <= (unint64_t)v103)
        goto LABEL_119;
      if (*((_DWORD *)&v125 + v103) != v124)
        break;
      if ((_DWORD)v125 != (_DWORD)v11)
      {
        v120 = "Gather batch dimension expected to match NMS batch.";
LABEL_118:
        v122 = v120;
LABEL_119:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>(v122);
      }
      *((_DWORD *)&v125 + v103) = v17;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v125, 0, (uint64_t)&__src);
      v104 = a3[1];
      v105 = a3[2];
      if (v104 >= v105)
      {
        v108 = v11;
        v109 = (uint64_t)(v104 - *a3) >> 6;
        v110 = v109 + 1;
        if ((unint64_t)(v109 + 1) >> 58)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v111 = v105 - *a3;
        if (v111 >> 5 > v110)
          v110 = v111 >> 5;
        if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFC0)
          v112 = 0x3FFFFFFFFFFFFFFLL;
        else
          v112 = v110;
        v148 = a3 + 2;
        v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v112);
        v114 = &v113[64 * v109];
        v144 = v113;
        v145 = v114;
        v147 = &v113[64 * v115];
        v116 = v150;
        v117 = v151;
        *(_OWORD *)v114 = __src;
        *((_OWORD *)v114 + 1) = v116;
        *((_QWORD *)v114 + 4) = v117;
        *((_QWORD *)v114 + 5) = 0;
        *((_QWORD *)v114 + 6) = 0;
        *((_QWORD *)v114 + 7) = 0;
        *(_OWORD *)(v114 + 40) = v152;
        *((_QWORD *)v114 + 7) = v153;
        v152 = 0uLL;
        v153 = 0;
        v146 = v114 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v144);
        v118 = a3[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v144);
        v119 = (void *)v152;
        a3[1] = v118;
        v11 = v108;
        v18 = v123;
        if (v119)
        {
          *((_QWORD *)&v152 + 1) = v119;
          operator delete(v119);
        }
      }
      else
      {
        v106 = v150;
        v107 = v151;
        *(_OWORD *)v104 = __src;
        *(_OWORD *)(v104 + 16) = v106;
        *(_QWORD *)(v104 + 32) = v107;
        *(_QWORD *)(v104 + 40) = 0;
        *(_QWORD *)(v104 + 48) = 0;
        *(_QWORD *)(v104 + 56) = 0;
        *(_OWORD *)(v104 + 40) = v152;
        *(_QWORD *)(v104 + 56) = v153;
        v152 = 0uLL;
        v153 = 0;
        a3[1] = v104 + 64;
      }
      ++v99;
      v101 += 64;
      if (v100 == v99)
        goto LABEL_107;
    }
    v120 = "Gather index dimensions expected to match number of boxes.";
    goto LABEL_118;
  }
LABEL_107:
  if (__p)
  {
    v129 = __p;
    operator delete(__p);
  }
  if (v131)
  {
    v132 = v131;
    operator delete(v131);
  }
  if (v134)
  {
    v135 = v134;
    operator delete(v134);
  }
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
}

void sub_191694F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 120);
  if (v29)
  {
    *(_QWORD *)(v27 - 112) = v29;
    operator delete(v29);
  }
  *(_QWORD *)(v27 - 160) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 160));
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(a1);
}

void Espresso::generic_non_maximum_suppression_kernel::backpropable(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  Espresso::check_backpropable_result_t::not_backpropable_on_all_inputs((Espresso::check_backpropable_result_t *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3)), a2);
}

BOOL Espresso::generic_non_maximum_suppression_kernel::has_dynamic_top_shape(Espresso::generic_non_maximum_suppression_kernel *this, unint64_t a2)
{
  return ((uint64_t)(*((_QWORD *)this + 40) - *((_QWORD *)this + 39)) >> 2) + 4 < a2;
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_15:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_15;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_17:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *v12 = &v9[v17];
  return result;
}

uint64_t Espresso::generic_sgd_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(_DWORD *)(result + 288))
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (__int128 *)(*a2 + v6);
      if (v7 >= a3[2])
      {
        result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v9);
        v7 = result;
      }
      else
      {
        result = (uint64_t)std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v9);
        v7 += 64;
      }
      a3[1] = v7;
      ++v8;
      v10 = *(int *)(v5 + 288);
      v6 += 64;
    }
    while (v8 < v10);
    if (*(_BYTE *)(v5 + 280) && (_DWORD)v10)
    {
      v11 = 0;
      v12 = v10 << 7;
      do
      {
        v13 = (__int128 *)(*a2 + v12);
        if (v7 >= a3[2])
        {
          result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v13);
          v7 = result;
        }
        else
        {
          result = (uint64_t)std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v13);
          v7 += 64;
        }
        a3[1] = v7;
        ++v11;
        v12 += 64;
      }
      while (v11 < *(int *)(v5 + 288));
    }
  }
  return result;
}

void sub_191695288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_adam_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  unint64_t v10;
  unint64_t i;
  __int128 *v12;
  unint64_t j;
  __int128 *v14;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(_DWORD *)(result + 292))
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (__int128 *)(*a2 + v6);
      if (v7 >= a3[2])
      {
        result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v9);
        v7 = result;
      }
      else
      {
        result = (uint64_t)std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v9);
        v7 += 64;
      }
      a3[1] = v7;
      ++v8;
      v10 = *(int *)(v5 + 292);
      v6 += 64;
    }
    while (v8 < v10);
    if ((_DWORD)v10)
    {
      for (i = 0; i < v10; ++i)
      {
        v12 = (__int128 *)(*a2 + ((i + 2 * (int)v10) << 6));
        if (v7 >= a3[2])
        {
          result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v12);
          v7 = result;
        }
        else
        {
          result = (uint64_t)std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v12);
          v7 += 64;
        }
        a3[1] = v7;
        v10 = *(int *)(v5 + 292);
      }
      if ((_DWORD)v10)
      {
        for (j = 0; j < v10; ++j)
        {
          v14 = (__int128 *)(*a2 + ((j + 3 * (int)v10) << 6));
          if (v7 >= a3[2])
          {
            result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v14);
            v7 = result;
          }
          else
          {
            result = (uint64_t)std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v14);
            v7 += 64;
          }
          a3[1] = v7;
          v10 = *(int *)(v5 + 292);
        }
      }
    }
  }
  return result;
}

void sub_1916953F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Espresso::generic_scatter_nd_kernel::top_shapes_for_bottom_shapes(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  char *v6;
  __int128 v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;

  *((_QWORD *)&v12 + 1) = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (a1[1] - *a1 != 192)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: three inputs required");
  v4 = *(_OWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 32);
  v7[0] = *(_OWORD *)v3;
  v7[1] = v4;
  v8 = v5;
  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v3 + 40), *(_QWORD *)(v3 + 48), (uint64_t)(*(_QWORD *)(v3 + 48) - *(_QWORD *)(v3 + 40)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_191695508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_gather_nd_kernel::top_shapes_for_bottom_shapes(_DWORD *a1@<X0>, const Espresso::layer_shape **a2@<X1>, _QWORD *a3@<X8>)
{
  const Espresso::layer_shape *v5;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  std::vector<int>::pointer v13;
  uint64_t v14;
  std::vector<int>::pointer v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  std::vector<int>::size_type v21;
  char *v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;
  std::vector<int>::pointer begin;
  uint64_t v27;
  std::vector<int>::pointer v28;
  int v29;
  int v30;
  uint64_t v31;
  std::vector<int>::pointer v32;
  std::vector<int>::pointer v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  std::vector<int>::size_type v39;
  char *v40;
  std::vector<int>::pointer v41;
  int *v42;
  char *v43;
  int *v44;
  int *v45;
  std::vector<int>::pointer v46;
  int64_t v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  char *v51;
  const char *v52;
  const char *v53;
  _QWORD v54[3];
  std::vector<int> v55;
  std::vector<int> __src;
  std::vector<int> v57;
  _QWORD *v58;
  char v59;
  __int128 __x;
  int v61;
  void *__p;
  void *v63;
  __int128 v64;

  *(_QWORD *)&v64 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (a2[1] - v5 != 128)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("gather_nd_kernel: two inputs required");
  memset(&v57, 0, sizeof(v57));
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__x, v5, 0);
  Espresso::layer_nd_shape::shape_vector(&__src, (uint64_t)&__x);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__x, (const Espresso::layer_shape *)((char *)*a2 + 64), 0);
  Espresso::layer_nd_shape::shape_vector(&v55, (uint64_t)&__x);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__x, *a2, 0);
  v8 = v61;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__x, (const Espresso::layer_shape *)((char *)*a2 + 64), 0);
  v9 = a1[72];
  if ((v9 & 0x80000000) != 0)
  {
    v52 = "gather_nd_kernel: Negative batch_dims not permitted.";
    goto LABEL_71;
  }
  v10 = v61;
  v11 = a1[70];
  if (v11)
  {
    if (v11 == 2)
    {
      if ((_DWORD)v9)
      {
        v24 = "gather_nd_kernel: In TORCH_GATHER mode, batch_dims not supported.";
      }
      else
      {
        v24 = "gather_nd_kernel: In TORCH_GATHER mode, Invalid value of the argument 'axis'.";
        v25 = (v8 & ((int)a1[71] >> 31)) + a1[71];
        if ((v25 & 0x80000000) == 0 && v8 > v25)
        {
          if ((_DWORD)v8 == v61)
          {
            if ((_DWORD)v8)
            {
              begin = __src.__begin_;
              v27 = v8;
              v28 = v55.__begin_;
              do
              {
                if (v25 && *begin != *v28)
                  Espresso::throw_exception_selector<Espresso::invalid_state_error>("gather_nd_kernel: In TORCH_GATHER mode, Invalid input shapes. Shapes can only differ in axis dimension.");
                ++begin;
                ++v28;
                --v25;
                --v27;
              }
              while (v27);
            }
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v57, (char *)v55.__begin_, (uint64_t)v55.__end_, v55.__end_ - v55.__begin_);
            goto LABEL_46;
          }
          v24 = "gather_nd_kernel: In TORCH_GATHER mode, inputs should have the same rank.";
        }
      }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>(v24);
    }
    if (v11 == 1)
    {
      v12 = v61 - 1;
      v13 = v55.__begin_;
      v14 = v55.__begin_[v12];
      if (v8 < (int)v14 + (int)v9)
      {
        v52 = "gather_nd_kernel: In TF_GATHER_ND mode, invalid indices. indices.shape[-1] <= params.rank";
      }
      else
      {
        if (v61 > v9)
        {
          if ((_DWORD)v9)
          {
            v15 = __src.__begin_;
            v16 = a1[72];
            do
            {
              v18 = *v15++;
              v17 = v18;
              v19 = *v13++;
              if (v17 != v19)
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("gather_nd_kernel: Leading batch dims must match between params and indices shape.");
              --v16;
            }
            while (v16);
          }
          v20 = v14 + v9;
          v21 = v12 + v8 - v20;
          if (v12 + v8 == v20)
          {
            LODWORD(v54[0]) = 1;
            *(_QWORD *)((char *)&v54[1] + 4) = 0;
            *(_QWORD *)((char *)v54 + 4) = 0;
            HIDWORD(v54[2]) = 1;
            Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v54, v21, (uint64_t)&__x);
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            v58 = a3;
            v59 = 0;
            v22 = (char *)operator new(0x40uLL);
            *a3 = v22;
            a3[1] = v22;
            a3[2] = v22 + 64;
            v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &__x, &v64, (uint64_t)v22);
            goto LABEL_52;
          }
          LODWORD(__x) = 0;
          std::vector<int>::resize(&v57, v21, (std::vector<int>::const_reference)&__x);
          v41 = v55.__begin_;
          if (v55.__end_ - 1 != v55.__begin_)
          {
            memmove(v57.__begin_, v55.__begin_, (char *)(v55.__end_ - 1) - (char *)v55.__begin_);
            v41 = v55.__begin_;
          }
          v42 = &__src.__begin_[v41[v12] + a1[72]];
          v43 = (char *)((char *)__src.__end_ - (char *)v42);
          if (__src.__end_ == v42)
            goto LABEL_46;
          v44 = &v57.__begin_[v10 - 1];
          goto LABEL_45;
        }
        v52 = "gather_nd_kernel: In TF_GATHER_ND mode, invalid batch_dims. Must have batch_dims < indices.rank";
      }
    }
    else
    {
      v52 = "gather_nd_kernel: Invalid MODE";
    }
LABEL_71:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v52);
  }
  v29 = a1[71];
  v30 = v8 & (v29 >> 31);
  v31 = (v30 + v29);
  if (v30 + v29 < 0 || v8 <= v31)
  {
    v53 = "gather_nd_kernel: In TF_GATHER mode, Invalid value of the argument 'axis'.";
    goto LABEL_76;
  }
  if (v9 > v31)
  {
    v53 = "gather_nd_kernel: In TF_GATHER mode, batch_dims must be less than or equal to axis.";
    goto LABEL_76;
  }
  if ((_DWORD)v9 && v61 < v9)
  {
    v53 = "gather_nd_kernel: In TF_GATHER mode, invalid batch_dims. Must have batch_dims <= indices.rank";
LABEL_76:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v53);
  }
  if ((_DWORD)v9)
  {
    v32 = __src.__begin_;
    v33 = v55.__begin_;
    v34 = a1[72];
    do
    {
      v36 = *v32++;
      v35 = v36;
      v37 = *v33++;
      if (v35 != v37)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("gather_nd_kernel: Leading batch dims must match between params and indices shape.");
      --v34;
    }
    while (v34);
  }
  v38 = v8 + v61 - 1;
  v39 = v38 - v9;
  if (v38 == v9)
  {
    memset(v54, 0, sizeof(v54));
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v54, v39, (uint64_t)&__x);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v58 = a3;
    v59 = 0;
    v40 = (char *)operator new(0x40uLL);
    *a3 = v40;
    a3[1] = v40;
    a3[2] = v40 + 64;
    v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &__x, &v64, (uint64_t)v40);
    goto LABEL_52;
  }
  LODWORD(__x) = 0;
  std::vector<int>::resize(&v57, v39, (std::vector<int>::const_reference)&__x);
  if ((_DWORD)v31)
    memmove(v57.__begin_, __src.__begin_, 4 * v31);
  v45 = &v55.__begin_[a1[72]];
  if (v55.__end_ != v45)
    memmove(&v57.__begin_[v31], v45, (char *)v55.__end_ - (char *)v45);
  v42 = &__src.__begin_[v31 + 1];
  v43 = (char *)((char *)__src.__end_ - (char *)v42);
  if (__src.__end_ != v42)
  {
    v44 = (int *)((char *)&v57.__begin_[v31] + (((char *)v55.__end_ - (char *)v55.__begin_) << 30 >> 30) + -4 * a1[72]);
LABEL_45:
    memmove(v44, v42, (size_t)v43);
  }
LABEL_46:
  memset(v54, 0, 20);
  v46 = v57.__begin_;
  v47 = (char *)v57.__end_ - (char *)v57.__begin_;
  if (v57.__end_ != v57.__begin_)
  {
    v48 = v47 >> 2;
    if ((unint64_t)(v47 >> 2) <= 1)
      v48 = 1;
    v49 = v54;
    do
    {
      v50 = *v46++;
      *v49++ = v50;
      --v48;
    }
    while (v48);
  }
  HIDWORD(v54[2]) = (unint64_t)v47 >> 2;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v54, 0, (uint64_t)&__x);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v58 = a3;
  v59 = 0;
  v51 = (char *)operator new(0x40uLL);
  *a3 = v51;
  a3[1] = v51;
  a3[2] = v51 + 64;
  v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &__x, &v64, (uint64_t)v51);
LABEL_52:
  a3[1] = v23;
  if (__p)
  {
    v63 = __p;
    operator delete(__p);
  }
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
  if (__src.__begin_)
  {
    __src.__end_ = __src.__begin_;
    operator delete(__src.__begin_);
  }
  if (v57.__begin_)
  {
    v57.__end_ = v57.__begin_;
    operator delete(v57.__begin_);
  }
}

void sub_191695A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(v30 + 8) = v31;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(a1);
}

void Espresso::generic_gather_nd_kernel::backpropable(_QWORD *a1@<X8>)
{
  __int16 v2;
  void *__p[3];

  v2 = 1;
  std::vector<BOOL>::vector(__p, &v2, 2);
  std::vector<BOOL>::vector(a1, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
}

void sub_191695BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::generic_nonzero_kernel::top_shapes_for_bottom_shapes(_QWORD *a1@<X8>)
{
  __int128 v2;
  char *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;
  __int128 v11;

  *((_QWORD *)&v11 + 1) = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7 = 0;
  *(_QWORD *)&v2 = 0x100000001;
  *((_QWORD *)&v2 + 1) = 0x100000001;
  v4 = v2;
  v5 = 0x200000001;
  v9 = 0;
  v10 = 0;
  __p = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (char *)operator new(0x40uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 64;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a1 + 2), &v4, &v11, (uint64_t)v3);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_191695C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_nonzero_kernel::backpropable(_QWORD *a1@<X8>)
{
  Espresso::check_backpropable_result_t::not_backpropable_on_all_inputs((Espresso::check_backpropable_result_t *)1, a1);
}

void Espresso::generic_one_hot_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  void *v42;
  _DWORD *v43;
  unint64_t v44;
  int v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  char *v51;
  _QWORD v52[2];
  int v53;
  int v54;
  _DWORD v55[6];
  void *__p;
  _DWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  char v60;
  __int128 v61[2];
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  __int128 v66;

  *(_QWORD *)&v66 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = *(_DWORD *)(v6 + 20);
  if (v7 == -1)
  {
    if (*(_DWORD *)(v6 + 16) == 1)
      v7 = 4;
    else
      v7 = 5;
  }
  v8 = *(_DWORD *)(a1 + 292);
  if (a2[1] - v6 != 64 && *(int *)(a1 + 280) < 1)
  {
    v39 = *(_OWORD *)(v6 + 16);
    v40 = *(_QWORD *)(v6 + 32);
    v61[0] = *(_OWORD *)v6;
    v61[1] = v39;
    v62 = v40;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v63, *(const void **)(v6 + 40), *(_QWORD *)(v6 + 48), (uint64_t)(*(_QWORD *)(v6 + 48) - *(_QWORD *)(v6 + 40)) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    __p = a3;
    LOBYTE(v57) = 0;
    v41 = (char *)operator new(0x40uLL);
    *a3 = v41;
    a3[1] = v41;
    a3[2] = v41 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v61, &v66, (uint64_t)v41);
    v42 = v63;
    if (!v63)
      return;
    v64 = v63;
    goto LABEL_74;
  }
  __p = 0;
  v57 = 0;
  v58 = 0;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v55, (const Espresso::layer_shape *)v6, 0);
  v9 = ((v7 + 1) & (v8 >> 31)) + v8;
  if (v7 <= 0)
  {
    v22 = v57;
  }
  else
  {
    v10 = 0;
    v11 = v57;
    do
    {
      v12 = v58;
      if (v10 == v9)
      {
        if ((unint64_t)v11 >= v58)
        {
          v14 = __p;
          v15 = ((char *)v11 - (_BYTE *)__p) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            goto LABEL_76;
          v17 = v58 - (_QWORD)__p;
          if ((uint64_t)(v58 - (_QWORD)__p) >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
            v14 = __p;
            v11 = v57;
          }
          else
          {
            v19 = 0;
          }
          v20 = (_DWORD *)(v18 + 4 * v15);
          *v20 = *(_DWORD *)(a1 + 280);
          v13 = v20 + 1;
          while (v11 != v14)
          {
            v21 = *--v11;
            *--v20 = v21;
          }
          v12 = v18 + 4 * v19;
          __p = v20;
          v57 = v13;
          v58 = v12;
          if (v14)
          {
            operator delete(v14);
            v12 = v58;
          }
        }
        else
        {
          *v11 = *(_DWORD *)(a1 + 280);
          v13 = v11 + 1;
        }
        v57 = v13;
        v11 = v13;
      }
      if ((unint64_t)v11 >= v12)
      {
        v23 = __p;
        v24 = ((char *)v11 - (_BYTE *)__p) >> 2;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 62)
LABEL_76:
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v26 = v12 - (_QWORD)__p;
        if (v26 >> 1 > v25)
          v25 = v26 >> 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v27);
          v23 = __p;
          v11 = v57;
        }
        else
        {
          v28 = 0;
        }
        v29 = (_DWORD *)(v27 + 4 * v24);
        *v29 = v55[v10];
        v22 = v29 + 1;
        while (v11 != v23)
        {
          v30 = *--v11;
          *--v29 = v30;
        }
        __p = v29;
        v57 = v22;
        v58 = v27 + 4 * v28;
        if (v23)
          operator delete(v23);
      }
      else
      {
        *v11 = v55[v10];
        v22 = v11 + 1;
      }
      v57 = v22;
      ++v10;
      v11 = v22;
    }
    while (v10 != v7);
  }
  if ((_DWORD)v9 == v7)
  {
    if ((unint64_t)v22 >= v58)
    {
      v32 = __p;
      v33 = ((char *)v22 - (_BYTE *)__p) >> 2;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v35 = v58 - (_QWORD)__p;
      if ((uint64_t)(v58 - (_QWORD)__p) >> 1 > v34)
        v34 = v35 >> 1;
      v36 = (unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL;
      v37 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v36)
        v37 = v34;
      if (v37)
      {
        v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v37);
        v32 = __p;
        v22 = v57;
      }
      else
      {
        v38 = 0;
      }
      v43 = (_DWORD *)(v37 + 4 * v33);
      v44 = v37 + 4 * v38;
      *v43 = *(_DWORD *)(a1 + 280);
      v31 = v43 + 1;
      while (v22 != v32)
      {
        v45 = *--v22;
        *--v43 = v45;
      }
      __p = v43;
      v57 = v31;
      v58 = v44;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *v22 = *(_DWORD *)(a1 + 280);
      v31 = v22 + 1;
    }
    v57 = v31;
    v22 = v31;
  }
  v52[0] = 0;
  v52[1] = 0;
  v53 = 0;
  v46 = (int *)__p;
  v47 = (char *)v22 - (_BYTE *)__p;
  if (v22 != __p)
  {
    v48 = v47 >> 2;
    if ((unint64_t)(v47 >> 2) <= 1)
      v48 = 1;
    v49 = v52;
    do
    {
      v50 = *v46++;
      *v49++ = v50;
      --v48;
    }
    while (v48);
  }
  v54 = (unint64_t)v47 >> 2;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v52, 0, (uint64_t)v61);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v59 = a3;
  v60 = 0;
  v51 = (char *)operator new(0x40uLL);
  *a3 = v51;
  a3[1] = v51;
  a3[2] = v51 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v61, &v66, (uint64_t)v51);
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  v42 = __p;
  if (__p)
  {
    v57 = __p;
LABEL_74:
    operator delete(v42);
  }
}

void sub_191696144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = v28;
  *(_QWORD *)(v27 + 8) = v29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_one_hot_kernel::backpropable(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  Espresso::check_backpropable_result_t::not_backpropable_on_all_inputs((Espresso::check_backpropable_result_t *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3)), a2);
}

void Espresso::generic_cumsum_kernel::top_shapes_for_bottom_shapes(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  char *v6;
  __int128 v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;

  *((_QWORD *)&v12 + 1) = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *((_QWORD *)*a1 + 4);
  v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  v8 = v4;
  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((_QWORD *)v3 + 6), (uint64_t)(*((_QWORD *)v3 + 6) - *((_QWORD *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_1916962C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_dev_op_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  int *v2;
  int *v3;
  unint64_t v5;
  int v6;
  int v7;
  int32x4_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(int **)(result + 320);
  v3 = *(int **)(result + 328);
  if (v2 != v3)
  {
    v5 = 0;
    do
    {
      v6 = *v2;
      v7 = v2[5];
      v8 = *(int32x4_t *)(v2 + 1);
      v15 = 0;
      v13 = 0u;
      v14 = 0u;
      v9 = (int8x16_t)vrev64q_s32(v8);
      v10 = vextq_s8(v9, v9, 8uLL);
      v11 = v6;
      v12 = v7;
      if (v5 >= a2[2])
      {
        result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a2, (__int128 *)v10.i8);
        v5 = result;
      }
      else
      {
        result = (uint64_t)std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a2, (__int128 *)v10.i8);
        v5 += 64;
      }
      a2[1] = v5;
      v2 += 6;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1916963C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::generic_sparse_inner_product_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  __int128 v15[2];
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;
  __int128 v20;

  *((_QWORD *)&v20 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v7 = **a2;
  v8 = (*a2)[1];
  v9 = *((_QWORD *)*a2 + 4);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v10, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  DWORD1(v7) = *(_DWORD *)(a1 + 304);
  v15[0] = v7;
  v15[1] = v8;
  v16 = v9;
  __p = 0;
  v18 = 0;
  v19 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v10, (uint64_t)v11, (v11 - (_BYTE *)v10) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v13 = a3;
  v14 = 0;
  v6 = (char *)operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v15, &v20, (uint64_t)v6);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
}

void sub_191696514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14)
    operator delete(a14);
  _Unwind_Resume(a1);
}

void Espresso::generic_sparse_inner_product_kernel::build_grads_for_inputs(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  __int128 *v6;
  std::string::size_type v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _DWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type v25;
  uint64_t v26;
  std::string::size_type v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::string *v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  std::string *v42;
  std::string *v43;
  void *__p[2];
  char v45;
  void *lpsrc;
  uint64_t v47;
  _DWORD *v48;
  std::__shared_weak_count *v49;
  std::string v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::string *v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::string **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[2];
  void ***v64;
  std::string v65;
  uint64_t v66;
  std::string v67;
  __int128 v68;

  *(_QWORD *)&v68 = *MEMORY[0x1E0C80C00];
  v6 = **(__int128 ***)(a3 + 8);
  v7 = **(_QWORD **)(a3 + 16);
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), v7))return;
  Espresso::blob_grad_contrib_name((uint64_t)&v50, v7, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "sparse_inner_product");
  v8 = *(_QWORD *)a3;
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v9 = *v6;
    v67.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v9;
  }
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v60 = &v41;
  LOBYTE(v61) = 0;
  v41 = (std::string *)operator new(0x18uLL);
  v42 = v41;
  v43 = v41 + 1;
  v42 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v43, (__int128 *)&v67, &v68, v41);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v65, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  else
    v65 = v50;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v60 = &v38;
  LOBYTE(v61) = 0;
  v38 = (std::string *)operator new(0x18uLL);
  v39 = v38;
  v40 = v38 + 1;
  v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v40, (__int128 *)&v65, (__int128 *)&v66, v38);
  v55 = 0;
  v56 = 0;
  v54 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v54, (uint64_t)v41, (uint64_t)v42, 0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (char *)v41) >> 3));
  v51 = 0;
  v52 = 0;
  v53 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v51, (uint64_t)v38, (uint64_t)v39, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)v38) >> 3));
  v10 = a2[12];
  LODWORD(v60) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, (uint64_t)(a2 + 14), (uint64_t)__p, (uint64_t)(a1 + 76), (int *)&v60);
  v11 = (std::__shared_weak_count *)v47;
  v63[0] = (uint64_t)lpsrc;
  v63[1] = v47;
  if (v47)
  {
    v12 = (unint64_t *)(v47 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v60 = 0;
  v61 = 0;
  v62 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v60, (uint64_t)v54, (uint64_t)v55, 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - v54) >> 3));
  v57 = 0;
  v58 = 0;
  v59 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v57, v51, v52, 0xAAAAAAAAAAAAAAABLL * ((v52 - v51) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v63, (uint64_t)__p, v8, (uint64_t)(a2 + 7), (std::string **)&v60, &v57);
  v64 = (void ***)&v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  v64 = (void ***)&v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (__int128 **)&v54, &v51);
  v60 = (std::string **)&v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  v60 = (std::string **)&v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  if (!lpsrc
  {
    v48 = 0;
    v49 = 0;
    goto LABEL_25;
  }
  v48 = v16;
  v49 = (std::__shared_weak_count *)v47;
  if (v47)
  {
    v17 = (unint64_t *)(v47 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
LABEL_25:
    v19 = (std::__shared_weak_count *)v47;
    if (v47)
    {
      v20 = (unint64_t *)(v47 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v60 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  v60 = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (v45 < 0)
    operator delete(__p[0]);
  (*(void (**)(std::string **__return_ptr, _DWORD *))(*(_QWORD *)a1 + 400))(&v57, a1);
  v22 = v48;
  v48[77] = a1[76];
  v22[76] = a1[77];
  v23 = a1[78];
  if ((_DWORD)v23)
  {
    v24 = 0;
    v25 = v57->__r_.__value_.__r.__words[2];
    v26 = 4 * v23;
    v27 = v25 + 4 * v23;
    do
    {
      v28 = *(_DWORD *)(v25 + v24);
      *(_DWORD *)(v25 + v24) = *(_DWORD *)(v27 + v24);
      *(_DWORD *)(v27 + v24) = v28;
      v24 += 4;
    }
    while (v26 != v24);
  }
  v54 = 0;
  v55 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v60, "coo");
  (*(void (**)(_DWORD *, char **, std::string ***, std::string::size_type, uint64_t, _QWORD))(*(_QWORD *)v22 + 168))(v22, &v54, &v60, v57->__r_.__value_.__r.__words[2], 4 * SLODWORD(v57->__r_.__value_.__r.__words[1]), 0);
  if (SHIBYTE(v62) < 0)
    operator delete(v60);
  v29 = v55;
  if (v55)
  {
    v30 = (unint64_t *)&v55->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v58;
  if (v58)
  {
    v33 = (unint64_t *)&v58->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v49;
  if (v49)
  {
    v36 = (unint64_t *)&v49->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
}

void sub_191696AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  *(_QWORD *)(v38 - 128) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 128));
  if (*(char *)(v38 - 73) < 0)
    operator delete(*(void **)(v38 - 96));
  if (a21 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(a1);
}

void Espresso::generic_sparse_inner_product_kernel::get_coo_weights(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::abstract_kernel_with_named_weights<Espresso::rnn_arch_params>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

void Espresso::generic_rnn_arch_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  void *v34;
  std::runtime_error *exception;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *__p;
  _BYTE *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  void *v48;
  _BYTE *v49;
  uint64_t v50;
  _QWORD *v51;
  char v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  int v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  int v75;
  int v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;

  *((_QWORD *)&v89 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  v45 = **a2;
  v46 = v7;
  v47 = v6;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v48, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  v8 = *(_DWORD *)(a1 + 440);
  if (v8 == 1)
  {
    v37 = v45;
    v39 = v46;
    v41 = v47;
    __p = 0;
    v43 = 0;
    v44 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v48, (uint64_t)v49, (v49 - (_BYTE *)v48) >> 2);
    v14 = *(_DWORD *)(a1 + 380);
    if (*(_BYTE *)(a1 + 456))
    {
      v15 = DWORD1(v45);
      LODWORD(v37) = *(_DWORD *)(a1 + 380);
      if (!*(_DWORD *)(a1 + 448))
        DWORD2(v37) = 1;
      v16 = *(_DWORD *)(a1 + 452);
      if (v16 == 1)
      {
        LODWORD(v37) = 2 * v14;
        v17 = 2;
        v16 = 1;
        v18 = 1;
      }
      else
      {
        v18 = 1;
        v17 = 2;
      }
      v19 = 1;
    }
    else
    {
      v18 = HIDWORD(v45);
      v17 = DWORD1(v46);
      DWORD2(v37) = *(_DWORD *)(a1 + 380);
      DWORD1(v39) = 5;
      if (!*(_DWORD *)(a1 + 448))
        LODWORD(v39) = 1;
      v16 = *(_DWORD *)(a1 + 452);
      if (v16 == 1)
      {
        DWORD2(v37) = 2 * v14;
        v16 = 1;
        v19 = *(_DWORD *)(a1 + 380);
        v15 = 1;
      }
      else
      {
        v15 = 1;
        v19 = *(_DWORD *)(a1 + 380);
      }
      v14 = 1;
    }
    if (*(_DWORD *)(a1 + 304))
    {
      v53 = v37;
      v54 = v39;
      v55 = v41;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v56, __p, (uint64_t)v43, (v43 - (_BYTE *)__p) >> 2);
      v59 = v14;
      v60 = v15;
      v61 = v19;
      v62 = v18;
      v63 = 1;
      v64 = v17;
      v65 = 0u;
      v66 = 0u;
      v67 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      v51 = a3;
      v52 = 0;
      v26 = (char *)operator new(0x80uLL);
      *a3 = v26;
      a3[1] = v26;
      a3[2] = v26 + 128;
      v27 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v53, &v68, (uint64_t)v26);
      do
      {
        v28 = *(void **)((char *)&v66 + v27);
        if (v28)
        {
          *(_QWORD *)((char *)&v66 + v27 + 8) = v28;
          operator delete(v28);
        }
        v27 -= 64;
      }
      while (v27 != -128);
    }
    else if (v16 == 1)
    {
      v53 = v37;
      v54 = v39;
      v55 = v41;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v56, __p, (uint64_t)v43, (v43 - (_BYTE *)__p) >> 2);
      v59 = v14;
      v60 = v15;
      v61 = v19;
      v62 = v18;
      v63 = 1;
      v64 = v17;
      v65 = 0u;
      v66 = 0u;
      v67 = 0;
      *(_QWORD *)&v68 = __PAIR64__(v15, v14);
      *((_QWORD *)&v68 + 1) = __PAIR64__(v18, v19);
      v69 = 1;
      v70 = v17;
      v71 = 0u;
      v72 = 0u;
      v73 = 0;
      *(_QWORD *)&v74 = __PAIR64__(v15, v14);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v18, v19);
      v75 = 1;
      v76 = v17;
      v77 = 0u;
      v78 = 0u;
      v79 = 0;
      v80 = v14;
      v81 = v15;
      v82 = v19;
      v83 = v18;
      v84 = 1;
      v85 = v17;
      v86 = 0u;
      v87 = 0u;
      v88 = 0;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v51 = a3;
      v52 = 0;
      v29 = (char *)operator new(0x140uLL);
      *a3 = v29;
      a3[1] = v29;
      a3[2] = v29 + 320;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v53, &v89, (uint64_t)v29);
      v30 = 40;
      do
      {
        v31 = *(_QWORD **)((char *)&v50 + v30 * 8);
        if (v31)
        {
          (&v51)[v30] = v31;
          operator delete(v31);
        }
        v30 -= 8;
      }
      while (v30 * 8);
    }
    else
    {
      v53 = v37;
      v54 = v39;
      v55 = v41;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v56, __p, (uint64_t)v43, (v43 - (_BYTE *)__p) >> 2);
      v59 = v14;
      v60 = v15;
      v61 = v19;
      v62 = v18;
      v63 = 1;
      v64 = v17;
      v65 = 0u;
      v66 = 0u;
      v67 = 0;
      *(_QWORD *)&v68 = __PAIR64__(v15, v14);
      *((_QWORD *)&v68 + 1) = __PAIR64__(v18, v19);
      v69 = 1;
      v70 = v17;
      v71 = 0u;
      v72 = 0u;
      v73 = 0;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v51 = a3;
      v52 = 0;
      v32 = (char *)operator new(0xC0uLL);
      *a3 = v32;
      a3[1] = v32;
      a3[2] = v32 + 192;
      v33 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v53, &v74, (uint64_t)v32);
      do
      {
        v34 = *(void **)((char *)&v72 + v33);
        if (v34)
        {
          *(_QWORD *)((char *)&v72 + v33 + 8) = v34;
          operator delete(v34);
        }
        v33 -= 64;
      }
      while (v33 != -192);
    }
  }
  else
  {
    if (v8)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid enum");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v36 = v45;
    v38 = v46;
    v40 = v47;
    __p = 0;
    v43 = 0;
    v44 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v48, (uint64_t)v49, (v49 - (_BYTE *)v48) >> 2);
    v9 = *(_DWORD *)(a1 + 380);
    if (*(_BYTE *)(a1 + 456))
    {
      v10 = DWORD1(v45);
      LODWORD(v36) = *(_DWORD *)(a1 + 380);
      v11 = 1;
      v12 = 2;
      v13 = 1;
    }
    else
    {
      DWORD2(v36) = *(_DWORD *)(a1 + 380);
      v10 = 1;
      v12 = 5;
      v11 = HIDWORD(v45);
      v13 = DWORD2(v36);
      v9 = 1;
    }
    DWORD1(v38) = v12;
    if (*(_DWORD *)(a1 + 304))
    {
      v53 = v36;
      v54 = v38;
      v55 = v40;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v56, __p, (uint64_t)v43, (v43 - (_BYTE *)__p) >> 2);
      v59 = v9;
      v60 = v10;
      v61 = v13;
      v62 = v11;
      v63 = 1;
      v64 = v12;
      v65 = 0u;
      v66 = 0u;
      v67 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      v51 = a3;
      v52 = 0;
      v20 = (char *)operator new(0x80uLL);
      *a3 = v20;
      a3[1] = v20;
      a3[2] = v20 + 128;
      v21 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v53, &v68, (uint64_t)v20);
      do
      {
        v22 = *(void **)((char *)&v66 + v21);
        if (v22)
        {
          *(_QWORD *)((char *)&v66 + v21 + 8) = v22;
          operator delete(v22);
        }
        v21 -= 64;
      }
      while (v21 != -128);
    }
    else
    {
      v53 = v36;
      v54 = v38;
      v55 = v40;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v56, __p, (uint64_t)v43, (v43 - (_BYTE *)__p) >> 2);
      v59 = v9;
      v60 = v10;
      v61 = v13;
      v62 = v11;
      v63 = 1;
      v64 = v12;
      v65 = 0u;
      v66 = 0u;
      v67 = 0;
      *(_QWORD *)&v68 = __PAIR64__(v10, v9);
      *((_QWORD *)&v68 + 1) = __PAIR64__(v11, v13);
      v69 = 1;
      v70 = v12;
      v71 = 0u;
      v72 = 0u;
      v73 = 0;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v51 = a3;
      v52 = 0;
      v23 = (char *)operator new(0xC0uLL);
      *a3 = v23;
      a3[1] = v23;
      a3[2] = v23 + 192;
      v24 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v53, &v74, (uint64_t)v23);
      do
      {
        v25 = *(void **)((char *)&v72 + v24);
        if (v25)
        {
          *(_QWORD *)((char *)&v72 + v24 + 8) = v25;
          operator delete(v25);
        }
        v24 -= 64;
      }
      while (v24 != -192);
    }
  }
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
}

void sub_19169733C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;

  v29 = v28;
  *(_QWORD *)(v27 + 8) = v29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a25);
  v31 = 0;
  while (1)
  {
    v32 = *(void **)(&a27 + v31 + 168);
    if (v32)
    {
      *(_QWORD *)(&a27 + v31 + 176) = v32;
      operator delete(v32);
    }
    v31 -= 64;
    if (v31 == -192)
    {
      if (__p)
        operator delete(__p);
      if (a22)
        operator delete(a22);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t Espresso::generic_rnn_arch_kernel::number_of_top_blobs(Espresso::generic_rnn_arch_kernel *this)
{
  if (*((_DWORD *)this + 76))
    return 2;
  else
    return 3;
}

void Espresso::generic_rnn_arch_kernel::weight_names_and_shapes(_QWORD *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

_QWORD *Espresso::generic_sequence_reverse_kernel::top_shapes_for_bottom_shapes@<X0>(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  std::runtime_error *exception;

  v2 = *a1;
  v3 = a1[1];
  if ((char *)v3 - (char *)v2 != 64)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unsupported number of inputs");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a2, v2, v3, 1uLL);
}

void sub_19169759C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::generic_sequence_reverse_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __int128 *v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string v23;
  std::string v24;
  void *v25[2];
  char v26;
  std::string **v27;
  char v28;
  std::string v29;
  __int128 v30;

  *(_QWORD *)&v30 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v25, "generic_sequence_reverse_kernel");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) - **(_QWORD **)(a3 + 16)) >> 3), 1uLL, (uint64_t)v25, 1);
  v6 = **(__int128 ***)(a3 + 16);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v24.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a3 + 40), (uint64_t)&v24))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v23, (std::string::size_type)&v24, a3);
    std::string::basic_string[abi:ne180100]<0>(__p, "sequence_reverse");
    v9 = *(_QWORD *)a3;
    v8 = *(uint64_t **)(a3 + 8);
    v17 = 0;
    v18 = 0;
    v16 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *v8, v8[1], 0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3));
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v29, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    else
      v29 = v23;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v27 = &v13;
    v28 = 0;
    v13 = (std::string *)operator new(0x18uLL);
    v14 = v13;
    v15 = v13 + 1;
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (__int128 *)&v29, &v30, v13);
    Espresso::sequential_builder::add<Espresso::sequence_reverse_params>(&v21, a2, (uint64_t)__p, v9, a1 + 280, v16, v17, (uint64_t *)&v13);
    v10 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v27 = &v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    if (v20 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v26 < 0)
    operator delete(v25[0]);
}

void sub_19169781C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  *(_QWORD *)(v34 - 80) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 80));
  if (a20 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v34 - 97) < 0)
    operator delete(*(void **)(v34 - 120));
  _Unwind_Resume(a1);
}

const char *Espresso::generic_sequence_reverse_kernel::kernel_type_str(Espresso::generic_sequence_reverse_kernel *this)
{
  return "sequence_reverse";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::sequence_reverse_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::sequential_builder::add<Espresso::sequence_reverse_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_191697AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::generic_sequence_concat_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, int **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int *v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  int *v15;
  uint64_t i;
  int v17;
  unint64_t v18;
  int *v19;
  int v20;
  _DWORD *v21;
  uint64_t j;
  std::runtime_error *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::runtime_error *v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::runtime_error *v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::runtime_error *exception;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  std::string::size_type size;
  std::string *v57;
  __int128 v58;
  std::runtime_error *v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  std::string::size_type v65;
  std::string *v66;
  __int128 v67;
  std::runtime_error *v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  std::string::size_type v74;
  std::string *v75;
  __int128 v76;
  std::runtime_error *v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  std::runtime_error *v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  std::string::size_type v92;
  std::string *v93;
  __int128 v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  _BYTE v99[32];
  uint64_t v100;
  void *__p;
  void *v102;
  uint64_t v103;
  __int128 v104;

  *((_QWORD *)&v104 + 1) = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = *(_QWORD *)(*a2 + 32);
  v8 = *(_OWORD *)(*a2 + 16);
  *(_OWORD *)v99 = *(_OWORD *)*a2;
  *(_OWORD *)&v99[16] = v8;
  v100 = v7;
  __p = 0;
  v102 = 0;
  v103 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v6 + 40), *(_QWORD *)(v6 + 48), (uint64_t)(*(_QWORD *)(v6 + 48) - *(_QWORD *)(v6 + 40)) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v98.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v98.__r_.__value_.__s.__data_[8] = 0;
  v9 = (int *)operator new(0x40uLL);
  *a3 = v9;
  a3[1] = v9;
  a3[2] = v9 + 16;
  a3[1] = (int *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)v99, &v104, (uint64_t)v9);
  if (__p)
  {
    v102 = __p;
    operator delete(__p);
  }
  v10 = (_OWORD *)*a2;
  v11 = a2[1] - *a2;
  if (*(_DWORD *)(a1 + 280))
  {
    if ((unint64_t)v11 >= 0x41)
    {
      v12 = v11 >> 6;
      v13 = *a3;
      v14 = **a3;
      if (v12 <= 2)
        v12 = 2;
      v15 = (int *)(v10 + 5);
      for (i = 1; i != v12; ++i)
      {
        if (*(v15 - 4) != v14)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v96, *(_DWORD *)(*a2 + (i << 6)));
          v51 = std::string::insert(&v96, 0, "Mismatching size w:");
          v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v97.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          v53 = std::string::append(&v97, "/");
          v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v98.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v95, **a3);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v55 = &v95;
          else
            v55 = (std::string *)v95.__r_.__value_.__r.__words[0];
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          else
            size = v95.__r_.__value_.__l.__size_;
          v57 = std::string::append(&v98, (const std::string::value_type *)v55, size);
          v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          *(_QWORD *)&v99[16] = *((_QWORD *)&v57->__r_.__value_.__l + 2);
          *(_OWORD *)v99 = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)v99);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (*(v15 - 3) != v13[1])
        {
          v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v96, *(_DWORD *)(*a2 + (i << 6) + 4));
          v42 = std::string::insert(&v96, 0, "Mismatching size h:");
          v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          v97.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          v44 = std::string::append(&v97, "/");
          v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v98.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v95, (*a3)[1]);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v46 = &v95;
          else
            v46 = (std::string *)v95.__r_.__value_.__r.__words[0];
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v47 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          else
            v47 = v95.__r_.__value_.__l.__size_;
          v48 = std::string::append(&v98, (const std::string::value_type *)v46, v47);
          v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          *(_QWORD *)&v99[16] = *((_QWORD *)&v48->__r_.__value_.__l + 2);
          *(_OWORD *)v99 = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v41, (const std::string *)v99);
          __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (*(v15 - 2) != v13[2])
        {
          v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v96, *(_DWORD *)(*a2 + (i << 6) + 8));
          v33 = std::string::insert(&v96, 0, "Mismatching size n:");
          v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
          v97.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v34;
          v33->__r_.__value_.__l.__size_ = 0;
          v33->__r_.__value_.__r.__words[2] = 0;
          v33->__r_.__value_.__r.__words[0] = 0;
          v35 = std::string::append(&v97, "/");
          v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v98.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v95, (*a3)[2]);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v37 = &v95;
          else
            v37 = (std::string *)v95.__r_.__value_.__r.__words[0];
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          else
            v38 = v95.__r_.__value_.__l.__size_;
          v39 = std::string::append(&v98, (const std::string::value_type *)v37, v38);
          v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          *(_QWORD *)&v99[16] = *((_QWORD *)&v39->__r_.__value_.__l + 2);
          *(_OWORD *)v99 = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v32, (const std::string *)v99);
          __cxa_throw(v32, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (*(v15 - 1) != v13[3])
        {
          v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v96, *(_DWORD *)(*a2 + (i << 6) + 12));
          v24 = std::string::insert(&v96, 0, "Mismatching size n:");
          v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v97.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          v26 = std::string::append(&v97, "/");
          v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v98.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v95, (*a3)[3]);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v28 = &v95;
          else
            v28 = (std::string *)v95.__r_.__value_.__r.__words[0];
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          else
            v29 = v95.__r_.__value_.__l.__size_;
          v30 = std::string::append(&v98, (const std::string::value_type *)v28, v29);
          v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          *(_QWORD *)&v99[16] = *((_QWORD *)&v30->__r_.__value_.__l + 2);
          *(_OWORD *)v99 = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v23, (const std::string *)v99);
          __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v17 = *v15;
        v15 += 16;
        v13[4] += v17;
      }
    }
  }
  else if ((unint64_t)v11 >= 0x41)
  {
    v18 = v11 >> 6;
    v19 = *a3;
    v20 = **a3;
    if (v18 <= 2)
      v18 = 2;
    v21 = v10 + 5;
    for (j = 1; j != v18; ++j)
    {
      if (*(v21 - 4) != v20)
      {
        v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v96, *(_DWORD *)(*a2 + (j << 6)));
        v87 = std::string::insert(&v96, 0, "Mismatching size w:");
        v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v88;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        v89 = std::string::append(&v97, "/");
        v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v90;
        v89->__r_.__value_.__l.__size_ = 0;
        v89->__r_.__value_.__r.__words[2] = 0;
        v89->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v95, **a3);
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v91 = &v95;
        else
          v91 = (std::string *)v95.__r_.__value_.__r.__words[0];
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v92 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        else
          v92 = v95.__r_.__value_.__l.__size_;
        v93 = std::string::append(&v98, (const std::string::value_type *)v91, v92);
        v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
        *(_QWORD *)&v99[16] = *((_QWORD *)&v93->__r_.__value_.__l + 2);
        *(_OWORD *)v99 = v94;
        v93->__r_.__value_.__l.__size_ = 0;
        v93->__r_.__value_.__r.__words[2] = 0;
        v93->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v86, (const std::string *)v99);
        __cxa_throw(v86, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (*(v21 - 3) != v19[1])
      {
        v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v96, *(_DWORD *)(*a2 + (j << 6) + 4));
        v78 = std::string::insert(&v96, 0, "Mismatching size h:");
        v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v79;
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        v80 = std::string::append(&v97, "/");
        v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v81;
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v95, (*a3)[1]);
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v82 = &v95;
        else
          v82 = (std::string *)v95.__r_.__value_.__r.__words[0];
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v83 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        else
          v83 = v95.__r_.__value_.__l.__size_;
        v84 = std::string::append(&v98, (const std::string::value_type *)v82, v83);
        v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
        *(_QWORD *)&v99[16] = *((_QWORD *)&v84->__r_.__value_.__l + 2);
        *(_OWORD *)v99 = v85;
        v84->__r_.__value_.__l.__size_ = 0;
        v84->__r_.__value_.__r.__words[2] = 0;
        v84->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v77, (const std::string *)v99);
        __cxa_throw(v77, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (*(v21 - 1) != v19[3])
      {
        v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v96, *(_DWORD *)(*a2 + (j << 6) + 12));
        v69 = std::string::insert(&v96, 0, "Mismatching size n:");
        v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        v71 = std::string::append(&v97, "/");
        v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v95, (*a3)[3]);
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v73 = &v95;
        else
          v73 = (std::string *)v95.__r_.__value_.__r.__words[0];
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v74 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        else
          v74 = v95.__r_.__value_.__l.__size_;
        v75 = std::string::append(&v98, (const std::string::value_type *)v73, v74);
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        *(_QWORD *)&v99[16] = *((_QWORD *)&v75->__r_.__value_.__l + 2);
        *(_OWORD *)v99 = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v68, (const std::string *)v99);
        __cxa_throw(v68, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (*v21 != v19[4])
      {
        v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v96, *(_DWORD *)(*a2 + (j << 6) + 16));
        v60 = std::string::insert(&v96, 0, "Mismatching size seq:");
        v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        v62 = std::string::append(&v97, "/");
        v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v95, (*a3)[4]);
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v64 = &v95;
        else
          v64 = (std::string *)v95.__r_.__value_.__r.__words[0];
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        else
          v65 = v95.__r_.__value_.__l.__size_;
        v66 = std::string::append(&v98, (const std::string::value_type *)v64, v65);
        v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        *(_QWORD *)&v99[16] = *((_QWORD *)&v66->__r_.__value_.__l + 2);
        *(_OWORD *)v99 = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v59, (const std::string *)v99);
        __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v19[2] += *(v21 - 2);
      v21 += 16;
    }
  }
}

void sub_1916984E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  void *v44;
  char v45;

  if (a40 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if ((v45 & 1) != 0)
    __cxa_free_exception(v44);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_sequence_concat_kernel::kernel_type_str(Espresso::generic_sequence_concat_kernel *this)
{
  return "sequence_concat";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::sequence_concat_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

_QWORD *Espresso::generic_sequence_repeat_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  _QWORD *result;
  std::runtime_error *exception;

  v4 = *a2;
  v5 = a2[1];
  if ((char *)v5 - (char *)v4 != 64)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unsupported number of inputs");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a3, v4, v5, 1uLL);
  *(_DWORD *)(*a3 + 16) *= *(_DWORD *)(a1 + 280);
  return result;
}

void sub_191698720(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_sequence_repeat_kernel::kernel_type_str(Espresso::generic_sequence_repeat_kernel *this)
{
  return "sequence_repeat";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::sequence_repeat_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::generic_grid_sampling_kernel::top_shapes_for_bottom_shapes(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  char *v6;
  __int128 v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;

  *((_QWORD *)&v12 + 1) = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *((_QWORD *)*a1 + 4);
  v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  v8 = v4;
  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((_QWORD *)v3 + 6), (uint64_t)(*((_QWORD *)v3 + 6) - *((_QWORD *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_191698824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_resample_kernel::top_shapes_for_bottom_shapes(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  __int128 *v4;
  uint64_t v5;
  __int128 v6;
  __int128 *v7;
  __int128 v8;
  const void *v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *__p;
  _BYTE *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  __int128 v34[2];
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  __int128 v39;

  *((_QWORD *)&v39 + 1) = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *((_QWORD *)*a1 + 4);
  v6 = (*a1)[1];
  v26 = **a1;
  v27 = v6;
  v28 = v5;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v29, *((const void **)v4 + 5), *((_QWORD *)v4 + 6), (uint64_t)(*((_QWORD *)v4 + 6) - *((_QWORD *)v4 + 5)) >> 2);
  v7 = *a1;
  v8 = (*a1)[5];
  v20 = (*a1)[4];
  v21 = v8;
  v9 = (const void *)*((_QWORD *)v7 + 13);
  v22 = *((_QWORD *)v7 + 12);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v23, v9, *((_QWORD *)v7 + 14), (uint64_t)(*((_QWORD *)v7 + 14) - (_QWORD)v9) >> 2);
  if (DWORD1(v27) != 4 && (_QWORD)v27 != 0xFFFFFFFF00000001)
  {
    v13 = "resample_kernel: 1st input must be rank 4";
    goto LABEL_24;
  }
  if (DWORD1(v21) != 4 && (_QWORD)v21 != 0xFFFFFFFF00000001)
  {
    v13 = "resample_kernel: 2nd input must be rank 4";
    goto LABEL_24;
  }
  v10 = v20;
  v11 = DWORD2(v20);
  if ((_DWORD)v20 != 2 && DWORD2(v20) != 2)
  {
    v13 = "resample_kernel: either width or channel dimemsion of 2nd input must be 2";
LABEL_24:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v13);
  }
  if ((_DWORD)v20 == 2)
  {
    v10 = DWORD1(v20);
  }
  else if (DWORD2(v20) == 2)
  {
    v11 = DWORD1(v20);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  *((_QWORD *)&v14 + 1) = *((_QWORD *)&v26 + 1);
  v15 = v27;
  v16 = v28;
  __p = 0;
  v18 = 0;
  v19 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v29, (uint64_t)v30, (v30 - (_BYTE *)v29) >> 2);
  *(_QWORD *)&v14 = __PAIR64__(v11, v10);
  v34[0] = v14;
  v34[1] = v15;
  v35 = v16;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v36, __p, (uint64_t)v18, (v18 - (_BYTE *)__p) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v32 = a2;
  v33 = 0;
  v12 = (char *)operator new(0x40uLL);
  *a2 = v12;
  a2[1] = v12;
  a2[2] = v12 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v34, &v39, (uint64_t)v12);
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
}

void sub_191698AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v36;

  v34 = v32;
  *(_QWORD *)(v31 + 8) = v34;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 128));
  v36 = *(void **)(v33 - 72);
  if (v36)
  {
    *(_QWORD *)(v33 - 64) = v36;
    operator delete(v36);
  }
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a30)
    operator delete(a30);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_resample_kernel::kernel_type_str(Espresso::generic_resample_kernel *this)
{
  return "resample";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::resample_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::generic_local_correlation_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  __int128 v15[2];
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;
  __int128 v20;

  *((_QWORD *)&v20 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v7 = **a2;
  v8 = (*a2)[1];
  v9 = *((_QWORD *)*a2 + 4);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v10, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  DWORD2(v7) = ((2 * *(_DWORD *)(a1 + 284)) | 1) * ((2 * *(_DWORD *)(a1 + 280)) | 1);
  v15[0] = v7;
  v15[1] = v8;
  v16 = v9;
  __p = 0;
  v18 = 0;
  v19 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v10, (uint64_t)v11, (v11 - (_BYTE *)v10) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v13 = a3;
  v14 = 0;
  v6 = (char *)operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v15, &v20, (uint64_t)v6);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
}

void sub_191698C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14)
    operator delete(a14);
  _Unwind_Resume(a1);
}

void Espresso::generic_bahdanau_attention_kernel::top_shapes_for_bottom_shapes(const Espresso::layer_shape **a1@<X1>, _QWORD *a2@<X8>)
{
  unsigned int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void *__p;
  _BYTE *v13;
  _DWORD v14[3];
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  _QWORD v26[2];
  unsigned int v27;
  _DWORD v28[5];
  unsigned int v29;
  _QWORD *v30;
  char v31;
  __int128 v32[2];
  uint64_t v33;
  _QWORD v34[3];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  __int128 v40;

  *((_QWORD *)&v40 + 1) = *MEMORY[0x1E0C80C00];
  if (a1[1] - *a1 != 192)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_bahdanau_attention_kernel: Needs 3 bottom blobs");
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v28, (const Espresso::layer_shape *)((char *)*a1 + 64), 1);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v26, *a1, 1);
  v4 = v29;
  if (v29 != v27)
  {
    if (v27 > v29)
      v4 = v27;
    v5 = (int)v4;
    Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)v28, (int)v4);
    Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)v26, v5);
  }
  v22 = v26[0];
  v23 = v28[2];
  v24 = 0;
  v25 = 3;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v22, 1, (uint64_t)&v17);
  v14[0] = v28[0];
  v14[1] = HIDWORD(v26[0]);
  v14[2] = 1;
  v15 = 0;
  v16 = 3;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v14, 1, (uint64_t)&v9);
  DWORD1(v10) = v27;
  DWORD1(v18) = v27;
  v32[0] = v17;
  v32[1] = v18;
  v33 = v19;
  memset(v34, 0, sizeof(v34));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v34, v20, (uint64_t)v21, (v21 - (_BYTE *)v20) >> 2);
  v35 = v9;
  v36 = v10;
  v37 = v11;
  v38 = 0;
  v39[0] = 0;
  v39[1] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v38, __p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v30 = a2;
  v31 = 0;
  v6 = (char *)operator new(0x80uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 128;
  v7 = 0;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v32, &v40, (uint64_t)v6);
  do
  {
    v8 = (void *)v39[v7 - 1];
    if (v8)
    {
      v39[v7] = v8;
      operator delete(v8);
    }
    v7 -= 8;
  }
  while (v7 != -16);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

void sub_191698F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  void *v33;

  v29 = v27;
  *(_QWORD *)(v26 + 8) = v29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 192));
  v31 = 0;
  v32 = v28 - 176;
  while (1)
  {
    v33 = *(void **)(v32 + v31 + 104);
    if (v33)
    {
      *(_QWORD *)(v32 + v31 + 112) = v33;
      operator delete(v33);
    }
    v31 -= 64;
    if (v31 == -128)
    {
      if (__p)
        operator delete(__p);
      if (a25)
        operator delete(a25);
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::generic_self_attention_kernel::top_shapes_for_bottom_shapes(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  const Espresso::layer_shape *v5;
  uint64_t v6;
  __int128 v7;
  const Espresso::layer_shape *v8;
  uint64_t v9;
  __int128 v10;
  const Espresso::layer_shape *v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  char v24[8];
  int v25;
  _QWORD *v26;
  char v27;
  _BYTE v28[32];
  uint64_t v29;
  void *__p;
  void *v31;
  uint64_t v32;
  __int128 v33[2];
  uint64_t v34;
  _QWORD v35[3];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[3];
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  __int128 v45;

  *((_QWORD *)&v45 + 1) = *MEMORY[0x1E0C80C00];
  if ((unint64_t)((char *)a1[1] - (char *)*a1) <= 0xBF)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_self_attention_kernel: Needs at least 3 bottom blobs");
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v24, (const Espresso::layer_shape *)(*a1 + 4), 1);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v22, (const Espresso::layer_shape *)*a1, 1);
  *(_QWORD *)v28 = v22;
  *(_DWORD *)&v28[8] = v25;
  *(_QWORD *)&v28[12] = 0;
  *(_DWORD *)&v28[20] = 3;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v28, 1, (uint64_t)&v17);
  DWORD1(v18) = v23;
  if ((char *)a1[1] - (char *)*a1 == 192)
  {
    *(_OWORD *)v28 = v17;
    *(_OWORD *)&v28[16] = v18;
    v29 = v19;
    __p = 0;
    v31 = 0;
    v32 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v20, (uint64_t)v21, (v21 - (_BYTE *)v20) >> 2);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v26 = a2;
    v27 = 0;
    v4 = (char *)operator new(0x40uLL);
    *a2 = v4;
    a2[1] = v4;
    a2[2] = v4 + 64;
    a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), (__int128 *)v28, v33, (uint64_t)v4);
    if (__p)
    {
      v31 = __p;
      operator delete(__p);
    }
  }
  else
  {
    *(_OWORD *)v28 = v17;
    *(_OWORD *)&v28[16] = v18;
    v29 = v19;
    __p = 0;
    v31 = 0;
    v32 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v20, (uint64_t)v21, (v21 - (_BYTE *)v20) >> 2);
    v5 = (const Espresso::layer_shape *)*a1;
    v6 = *((_QWORD *)*a1 + 4);
    v7 = (*a1)[1];
    v33[0] = **a1;
    v33[1] = v7;
    v34 = v6;
    memset(v35, 0, sizeof(v35));
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v35, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
    v8 = (const Espresso::layer_shape *)*a1;
    v9 = *((_QWORD *)*a1 + 12);
    v10 = (*a1)[5];
    v36 = (*a1)[4];
    v37 = v10;
    v38 = v9;
    memset(v39, 0, sizeof(v39));
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v39, *((const void **)v8 + 13), *((_QWORD *)v8 + 14), (uint64_t)(*((_QWORD *)v8 + 14) - *((_QWORD *)v8 + 13)) >> 2);
    v11 = (const Espresso::layer_shape *)*a1;
    v12 = *((_QWORD *)*a1 + 20);
    v13 = (*a1)[9];
    v40 = (*a1)[8];
    v41 = v13;
    v44[0] = 0;
    v44[1] = 0;
    v42 = v12;
    v43 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v43, *((const void **)v11 + 21), *((_QWORD *)v11 + 22), (uint64_t)(*((_QWORD *)v11 + 22) - *((_QWORD *)v11 + 21)) >> 2);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v26 = a2;
    v27 = 0;
    v14 = (char *)operator new(0x100uLL);
    *a2 = v14;
    a2[1] = v14;
    a2[2] = v14 + 256;
    v15 = 0;
    a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), (__int128 *)v28, &v45, (uint64_t)v14);
    do
    {
      v16 = (void *)v44[v15 - 1];
      if (v16)
      {
        v44[v15] = v16;
        operator delete(v16);
      }
      v15 -= 8;
    }
    while (v15 != -32);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

void sub_19169924C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  void *v60;

  v57 = v56;
  *(_QWORD *)(v55 + 8) = v57;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a23);
  v59 = 0;
  while (1)
  {
    v60 = *(void **)((char *)&a54 + v59);
    if (v60)
    {
      *(uint64_t *)((char *)&a55 + v59) = (uint64_t)v60;
      operator delete(v60);
    }
    v59 -= 64;
    if (v59 == -256)
    {
      if (__p)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t Espresso::generic_conv3d_kernel::input_blob_type(Espresso::generic_conv3d_kernel *this, uint64_t a2)
{
  if (a2 == 1)
    return 1;
  else
    return 2 * (a2 == 2);
}

void Espresso::abstract_kernel_with_weights<Espresso::conv3d_params_t>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

void Espresso::generic_conv3d_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  _OWORD v17[2];
  uint64_t v18;
  void *__p;
  _BYTE *v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];
  int v24[4];
  __int128 v25;
  int v26;
  _BYTE v27[24];
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  __int128 v32[2];
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  __int128 v37;

  *((_QWORD *)&v37 + 1) = *MEMORY[0x1E0C80C00];
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v28, *a2, 0);
  *(_OWORD *)v27 = v28;
  *(_QWORD *)&v27[16] = v29;
  if (HIDWORD(v29) != 5)
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Input tensor rank to conv3d must be 5");
  v6 = HIDWORD(v28);
  v5 = v29;
  v7 = DWORD2(v28);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
  v9 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)v24 = *(_OWORD *)(v8 + 64);
  v25 = v9;
  v26 = *(_DWORD *)(v8 + 96);
  v10 = *(_OWORD *)(v8 + 16);
  v21 = *(_OWORD *)v8;
  v22 = v10;
  v11 = *(_OWORD *)(v8 + 48);
  v23[0] = *(_OWORD *)(v8 + 32);
  v23[1] = v11;
  v12 = SHIWORD(v24[1]);
  if (SHIWORD(v24[1]) <= 1)
    v12 = 1;
  v13 = SLOWORD(v24[2]);
  if (SLOWORD(v24[2]) <= 1)
    v13 = 1;
  v14 = SHIWORD(v24[2]);
  if (SHIWORD(v24[2]) <= 1)
    v14 = 1;
  *(_QWORD *)&v27[12] = __ROR8__(Espresso::padding_params_t::get_output_size((Espresso::padding_params_t *)((char *)v23 + 12), v5, v6, v7, SLOWORD(v24[0]), SHIWORD(v24[0]), SLOWORD(v24[1]), ((int)v22 - 1) * v12 + 1, (DWORD1(v22) - 1) * v13 + 1, (DWORD2(v22) - 1) * v14 + 1), 32);
  *(_DWORD *)&v27[4] = DWORD2(v21);
  *(_DWORD *)&v27[8] = v15;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v27, 0, (uint64_t)v17);
  v32[0] = v17[0];
  v32[1] = v17[1];
  v33 = v18;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v34, __p, (uint64_t)v20, (v20 - (_BYTE *)__p) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v30 = a3;
  v31 = 0;
  v16 = (char *)operator new(0x40uLL);
  *a3 = v16;
  a3[1] = v16;
  a3[2] = v16 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v32, &v37, (uint64_t)v16);
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_191699568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;

  *(_QWORD *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 160));
  v21 = *(void **)(v19 - 104);
  if (v21)
  {
    *(_QWORD *)(v19 - 96) = v21;
    operator delete(v21);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float Espresso::generic_conv3d_kernel::estimated_compute_resources(uint64_t a1, __int128 **a2, int a3)
{
  float v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  float v14;
  _QWORD v16[3];
  void **v17;

  v5 = Espresso::base_kernel::estimated_compute_resources(a1, a2, a3);
  v6 = *((_DWORD *)*a2 + 3);
  v7 = *((_DWORD *)*a2 + 4);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 **, float))(*(_QWORD *)a1 + 64))(v16, a1, a2, v5);
  v9 = *(_DWORD *)v16[0];
  v8 = *(_DWORD *)(v16[0] + 4);
  v10 = *(_DWORD *)(v16[0] + 8);
  v11 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
  v12 = v11[20];
  if (v12 <= 1)
    v12 = 1;
  if (v7 <= 1)
    v13 = 1;
  else
    v13 = v7;
  v14 = ((double)(v13 * v6) * (double)v11[2] * (double)v9 * (double)v8 * (double)v10
       + (double)v11[2]
       * (double)(v11[3] / v12)
       * (double)v11[4]
       * (double)v11[5]
       * (double)v11[6]
       * (double)(v13 * v6)
       * (double)v9
       * (double)v8
       * (double)v10
       * 2.0)
      * 0.000000001;
  v17 = (void **)v16;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v17);
  return v14;
}

void sub_191699744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Espresso::generic_conv3d_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 **a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  unsigned __int8 *v18;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  vImagePixelCount v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  void *v93;
  vImagePixelCount v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::string v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114[2];
  void *v115;
  vImagePixelCount v116;
  uint64_t v117[2];
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  std::string v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  uint64_t v127[2];
  uint64_t v128;
  std::__shared_weak_count *v129;
  void *data;
  vImagePixelCount height;
  uint64_t v132[2];
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  void *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  vImage_Buffer dest;
  vImage_Buffer src;

  v139 = 0;
  v140 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v139, *a6, a6[1]);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 448))(&v133, a1);
  v10 = v133;
  v11 = HIDWORD(v133);
  v12 = v134;
  v13 = v135;
  v14 = v136;
  if (*((char *)a3 + 23) < 0)
  {
    v18 = a3[1];
    if (v18 != (unsigned __int8 *)1)
    {
      if (v18 != (unsigned __int8 *)5)
        goto LABEL_165;
      if (*(_DWORD *)*a3 != 828792663 || (*a3)[4] != 54)
      {
        v17 = *a3;
        goto LABEL_20;
      }
      goto LABEL_63;
    }
    v30 = **a3;
    if (v30 == 87)
      goto LABEL_76;
    if (v30 != 98)
      goto LABEL_165;
    goto LABEL_43;
  }
  v15 = *((unsigned __int8 *)a3 + 23);
  if (v15 == 1)
  {
    v29 = *(unsigned __int8 *)a3;
    if (v29 != 98)
    {
      if (v29 != 87)
        goto LABEL_165;
LABEL_76:
      v52 = (std::__shared_weak_count *)v140;
      v132[0] = v139;
      v132[1] = v140;
      if (v140)
      {
        v53 = (unint64_t *)(v140 + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<float,5>(&src, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v132, v10, v11, v12, v13, v14, (a4 & 0x3F) == 0);
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v56 = __ldaxr(p_shared_owners);
        while (__stlxr(v56 - 1, p_shared_owners));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      data = src.data;
      height = src.height;
      if (src.height)
      {
        v57 = (unint64_t *)(src.height + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 400))(a1, &data);
      v59 = (std::__shared_weak_count *)height;
      if (height)
      {
        v60 = (unint64_t *)(height + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v41 = (std::__shared_weak_count *)src.height;
      if (!src.height)
        goto LABEL_165;
      v62 = (unint64_t *)(src.height + 8);
      do
        v43 = __ldaxr(v62);
      while (__stlxr(v43 - 1, v62));
      goto LABEL_163;
    }
LABEL_43:
    v31 = (std::__shared_weak_count *)v140;
    v117[0] = v139;
    v117[1] = v140;
    if (v140)
    {
      v32 = (unint64_t *)(v140 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&src, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v117, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
    if (v31)
    {
      v34 = (unint64_t *)&v31->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v115 = src.data;
    v116 = src.height;
    if (src.height)
    {
      v36 = (unint64_t *)(src.height + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 392))(a1, &v115);
    v38 = (std::__shared_weak_count *)v116;
    if (v116)
    {
      v39 = (unint64_t *)(v116 + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)src.height;
    if (!src.height)
      goto LABEL_165;
    v42 = (unint64_t *)(src.height + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
LABEL_163:
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    goto LABEL_165;
  }
  if (v15 != 5)
    goto LABEL_165;
  v16 = *(_DWORD *)a3 == 828792663 && *((_BYTE *)a3 + 4) == 54;
  v17 = a3;
  if (v16)
  {
LABEL_63:
    v44 = (std::__shared_weak_count *)v140;
    v127[0] = v139;
    v127[1] = v140;
    if (v140)
    {
      v45 = (unint64_t *)(v140 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<unsigned short,5>(&v128, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v127, v10, v11, v12, v13, v14, (a4 & 0x3F) == 0);
    if (v44)
    {
      v47 = (unint64_t *)&v44->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v49 = *(std::__shared_weak_count **)(a1 + 16);
    v125 = *(_QWORD *)(a1 + 8);
    v126 = v49;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    if (*((char *)a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v124, (const std::string::value_type *)*a3, (std::string::size_type)a3[1]);
    else
      v124 = *(std::string *)a3;
    v122 = v128;
    v123 = v129;
    if (v129)
    {
      v63 = (unint64_t *)&v129->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    Espresso::base_kernel::set_parameter_blob<unsigned short,5>(a1, &v125, (__int128 *)&v124, &v122);
    v65 = v123;
    if (v123)
    {
      v66 = (unint64_t *)&v123->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v124.__r_.__value_.__l.__data_);
    v68 = v126;
    if (v126)
    {
      v69 = (unint64_t *)&v126->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int const*&,void>(&v120, v128 + 8);
    v71 = 0;
    v72 = v120;
    v73 = *(void **)(v120 + 32);
    v74 = *(int *)(v128 + 8);
    do
    {
      v74 *= *(int *)(v128 + 12 + v71);
      v71 += 4;
    }
    while (v71 != 16);
    src.data = *(void **)(v128 + 32);
    src.height = 1;
    src.width = v74;
    src.rowBytes = 2 * v74;
    dest.data = v73;
    dest.height = 1;
    dest.width = v74;
    dest.rowBytes = 4 * v74;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    v118 = v72;
    v119 = v121;
    if (v121)
    {
      v75 = (unint64_t *)&v121->__shared_owners_;
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 400))(a1, &v118);
    v77 = v119;
    if (v119)
    {
      v78 = (unint64_t *)&v119->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = v121;
    if (v121)
    {
      v81 = (unint64_t *)&v121->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v41 = v129;
    if (!v129)
      goto LABEL_165;
    v83 = (unint64_t *)&v129->__shared_owners_;
    do
      v43 = __ldaxr(v83);
    while (__stlxr(v43 - 1, v83));
    goto LABEL_163;
  }
LABEL_20:
  if (*v17 == 828792674 && *((_BYTE *)v17 + 4) == 54)
  {
    v21 = (std::__shared_weak_count *)v140;
    v114[0] = v139;
    v114[1] = v140;
    if (v140)
    {
      v22 = (unint64_t *)(v140 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v128, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v114, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
    if (v21)
    {
      v24 = (unint64_t *)&v21->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v26 = *(std::__shared_weak_count **)(a1 + 16);
    v112 = *(_QWORD *)(a1 + 8);
    v113 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    if (*((char *)a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v111, (const std::string::value_type *)*a3, (std::string::size_type)a3[1]);
    else
      v111 = *(std::string *)a3;
    v109 = v128;
    v110 = v129;
    if (v129)
    {
      v84 = (unint64_t *)&v129->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    Espresso::base_kernel::set_parameter_blob<unsigned short,1>(a1, &v112, (__int128 *)&v111, &v109);
    v86 = v110;
    if (v110)
    {
      v87 = (unint64_t *)&v110->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v111.__r_.__value_.__l.__data_);
    v89 = v113;
    if (v113)
    {
      v90 = (unint64_t *)&v113->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v120, (int *)(v128 + 8));
    v92 = v120;
    v93 = *(void **)(v120 + 16);
    v94 = *(int *)(v128 + 8);
    src.data = *(void **)(v128 + 16);
    src.height = 1;
    src.width = v94;
    src.rowBytes = 2 * v94;
    dest.data = v93;
    dest.height = 1;
    dest.width = v94;
    dest.rowBytes = 4 * v94;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    v107 = v92;
    v108 = v121;
    if (v121)
    {
      v95 = (unint64_t *)&v121->__shared_owners_;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 392))(a1, &v107);
    v97 = v108;
    if (v108)
    {
      v98 = (unint64_t *)&v108->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v100 = v121;
    if (v121)
    {
      v101 = (unint64_t *)&v121->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v41 = v129;
    if (v129)
    {
      v103 = (unint64_t *)&v129->__shared_owners_;
      do
        v43 = __ldaxr(v103);
      while (__stlxr(v43 - 1, v103));
      goto LABEL_163;
    }
  }
LABEL_165:
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  v104 = (std::__shared_weak_count *)v140;
  if (v140)
  {
    v105 = (unint64_t *)(v140 + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
}

void sub_19169A050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45)
{
  uint64_t v45;
  void *v47;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 240);
  v47 = *(void **)(v45 - 152);
  if (v47)
  {
    *(_QWORD *)(v45 - 144) = v47;
    operator delete(v47);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 128);
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_conv3d_kernel::supports_weight_key(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = (char)a2[23];
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 == 1)
    {
      v3 = *a2;
      return v3 == 87 || v3 == 98;
    }
    return 0;
  }
  if (*((_QWORD *)a2 + 1) != 1)
    return 0;
  v3 = **(unsigned __int8 **)a2;
  return v3 == 87 || v3 == 98;
}

void Espresso::generic_conv3d_kernel::get_biases(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_conv3d_kernel::get_weights(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t Espresso::generic_conv3d_kernel::get_biases_shape@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *(_DWORD *)(this + 312);
  *(_QWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 20) = 1;
  return this;
}

void Espresso::generic_conv3d_kernel::create_biases_blob(Espresso::generic_conv3d_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 78), 1, 1, 1);
}

double Espresso::generic_conv3d_kernel::weights_blob_shape@<D0>(Espresso::generic_conv3d_kernel *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  double result;
  int v6;

  v2 = *((_DWORD *)this + 82);
  v3 = *((_DWORD *)this + 79);
  v4 = *((_DWORD *)this + 96);
  if (v4 <= 1)
    v4 = 1;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  result = *((double *)this + 40);
  v6 = *((_DWORD *)this + 78);
  *(_QWORD *)(a2 + 56) = 0;
  *(double *)a2 = result;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = v3 / v4;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = -1;
  return result;
}

void Espresso::generic_conv3d_kernel::create_weights_blob(Espresso::generic_conv3d_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;

  v2 = *((_DWORD *)this + 96);
  if (v2 <= 1)
    v2 = 1;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int &,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 80), *((_DWORD *)this + 81), *((_DWORD *)this + 82), *((_DWORD *)this + 79) / v2, *((_DWORD *)this + 78));
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<float,5>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, int a9, int a10, int a11, char a12)
{
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::runtime_error *exception;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  std::runtime_error *v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = *a6;
  v20 = a6[1];
  v62 = *a6;
  v63 = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *a1 = 0;
  a1[1] = 0;
  if (!*(_BYTE *)(a2 + 73))
  {
LABEL_11:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int &,int &,int &,int &,int &,void>(&v69, a7, a8, a9, a10, a11);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v69);
    size = (std::__shared_weak_count *)v69.__r_.__value_.__l.__size_;
    if (v69.__r_.__value_.__l.__size_)
    {
      v24 = (unint64_t *)(v69.__r_.__value_.__l.__size_ + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v26 = 0;
    v27 = *(int *)(*a1 + 8);
    do
    {
      v27 *= *(int *)(*a1 + 12 + v26);
      v26 += 4;
    }
    while (v26 != 16);
    if (a5 != 4 * v27)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v66, a5);
      v41 = std::string::insert(&v66, 0, "Unexpected size s=");
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      v43 = std::string::append(&v67, "/blob=");
      v44 = 0;
      v45 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v45;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v46 = *(int *)(*a1 + 8);
      do
      {
        v46 *= *(int *)(*a1 + 12 + v44);
        v44 += 4;
      }
      while (v44 != 16);
      std::to_string(&v65, 4 * v46);
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &v65;
      else
        v47 = (std::string *)v65.__r_.__value_.__r.__words[0];
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
      else
        v48 = v65.__r_.__value_.__l.__size_;
      v49 = std::string::append(&v68, (const std::string::value_type *)v47, v48);
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v69);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*a1 + 32), a4, a5);
    v28 = (std::__shared_weak_count *)v63;
    if (!v63)
      goto LABEL_35;
LABEL_31:
    v36 = (unint64_t *)&v28->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    goto LABEL_35;
  }
  if (!v19 || (a12 & 1) != 0)
  {
    if (!v19)
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(a2 + 123))
  {
    goto LABEL_11;
  }
  v29 = (char *)operator new(0x68uLL);
  *((_QWORD *)v29 + 1) = 0;
  *((_QWORD *)v29 + 2) = 0;
  *(_QWORD *)v29 = &off_1E2DBECE0;
  *((_QWORD *)v29 + 3) = &off_1E2DA1210;
  *(_OWORD *)(v29 + 72) = 0u;
  *(_OWORD *)(v29 + 88) = 0u;
  *((_DWORD *)v29 + 8) = a7;
  *((_DWORD *)v29 + 9) = a8;
  *((_DWORD *)v29 + 10) = a9;
  *((_DWORD *)v29 + 11) = a10;
  *((_DWORD *)v29 + 12) = a11;
  *((_QWORD *)v29 + 7) = a4;
  v29[64] = 0;
  v69.__r_.__value_.__r.__words[0] = (std::string::size_type)(v29 + 24);
  v69.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v69);
  v30 = (std::__shared_weak_count *)v69.__r_.__value_.__l.__size_;
  if (v69.__r_.__value_.__l.__size_)
  {
    v31 = (unint64_t *)(v69.__r_.__value_.__l.__size_ + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = 0;
  v34 = *a1;
  v35 = *(int *)(*a1 + 8);
  do
  {
    v35 *= *(int *)(*a1 + 12 + v33);
    v33 += 4;
  }
  while (v33 != 16);
  if (a5 != 4 * v35)
  {
    v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v66, a5);
    v52 = std::string::insert(&v66, 0, "Unexpected size s=");
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    v54 = std::string::append(&v67, "/blob=");
    v55 = 0;
    v56 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v56;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    v57 = *(int *)(*a1 + 8);
    do
    {
      v57 *= *(int *)(*a1 + 12 + v55);
      v55 += 4;
    }
    while (v55 != 16);
    std::to_string(&v65, 4 * v57);
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &v65;
    else
      v58 = (std::string *)v65.__r_.__value_.__r.__words[0];
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    else
      v59 = v65.__r_.__value_.__l.__size_;
    v60 = std::string::append(&v68, (const std::string::value_type *)v58, v59);
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v51, &v69);
    __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v28 = (std::__shared_weak_count *)v63;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v34 + 48), v62, v63);
  if (v63)
    goto LABEL_31;
LABEL_35:
  if (a3)
  {
    v38 = (unint64_t *)&a3->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_19169A764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void *v38;
  int v39;
  uint64_t v40;

  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  if (a18 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v39 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v38);
  goto LABEL_14;
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<unsigned short,5>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, int a9, int a10, int a11, char a12)
{
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  Espresso *v24;
  void *v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::runtime_error *exception;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::runtime_error *v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  uint64_t v66;
  uint64_t v67;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = *a6;
  v20 = a6[1];
  v66 = *a6;
  v67 = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *a1 = 0;
  a1[1] = 0;
  if (!*(_BYTE *)(a2 + 73))
  {
LABEL_11:
    v23 = (char *)operator new(0x68uLL);
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = 0;
    *(_QWORD *)v23 = &off_1E2DBF098;
    *((_QWORD *)v23 + 3) = &off_1E2DA1430;
    *(_OWORD *)(v23 + 72) = 0u;
    *(_OWORD *)(v23 + 88) = 0u;
    *((_DWORD *)v23 + 8) = a7;
    *((_DWORD *)v23 + 9) = a8;
    *((_DWORD *)v23 + 10) = a9;
    *((_DWORD *)v23 + 11) = a10;
    *((_DWORD *)v23 + 12) = a11;
    v24 = (Espresso *)(2 * a7 * (uint64_t)a8 * a9 * a10 * a11);
    v25 = Espresso::kern_alloc_uninitialized(v24);
    bzero(v25, (size_t)v24);
    *((_QWORD *)v23 + 7) = v25;
    v23[64] = 1;
    v73.__r_.__value_.__r.__words[0] = (std::string::size_type)(v23 + 24);
    v73.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v73);
    size = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
    if (v73.__r_.__value_.__l.__size_)
    {
      v27 = (unint64_t *)(v73.__r_.__value_.__l.__size_ + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v29 = 0;
    v30 = *(int *)(*a1 + 8);
    do
    {
      v30 *= *(int *)(*a1 + 12 + v29);
      v29 += 4;
    }
    while (v29 != 16);
    if (a5 != 2 * v30)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v70, a5);
      v44 = std::string::insert(&v70, 0, "Unexpected size s=");
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      v46 = std::string::append(&v71, "/blob=");
      v47 = 0;
      v48 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v72.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v48;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      v49 = *(int *)(*a1 + 8);
      do
      {
        v49 *= *(int *)(*a1 + 12 + v47);
        v47 += 4;
      }
      while (v47 != 16);
      std::to_string(&v69, 2 * v49);
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v69;
      else
        v50 = (std::string *)v69.__r_.__value_.__r.__words[0];
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      else
        v51 = v69.__r_.__value_.__l.__size_;
      v52 = std::string::append(&v72, (const std::string::value_type *)v50, v51);
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v73.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v73);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*a1 + 32), a4, a5);
    v31 = (std::__shared_weak_count *)v67;
    if (!v67)
      goto LABEL_35;
LABEL_31:
    v39 = (unint64_t *)&v31->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    goto LABEL_35;
  }
  if (!v19 || (a12 & 1) != 0)
  {
    if (!v19)
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(a2 + 123))
  {
    goto LABEL_11;
  }
  v32 = (char *)operator new(0x68uLL);
  *((_QWORD *)v32 + 1) = 0;
  *((_QWORD *)v32 + 2) = 0;
  *(_QWORD *)v32 = &off_1E2DBF098;
  *((_QWORD *)v32 + 3) = &off_1E2DA1430;
  *(_OWORD *)(v32 + 72) = 0u;
  *(_OWORD *)(v32 + 88) = 0u;
  *((_DWORD *)v32 + 8) = a7;
  *((_DWORD *)v32 + 9) = a8;
  *((_DWORD *)v32 + 10) = a9;
  *((_DWORD *)v32 + 11) = a10;
  *((_DWORD *)v32 + 12) = a11;
  *((_QWORD *)v32 + 7) = a4;
  v32[64] = 0;
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)(v32 + 24);
  v73.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v73);
  v33 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
  if (v73.__r_.__value_.__l.__size_)
  {
    v34 = (unint64_t *)(v73.__r_.__value_.__l.__size_ + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = 0;
  v37 = *a1;
  v38 = *(int *)(*a1 + 8);
  do
  {
    v38 *= *(int *)(*a1 + 12 + v36);
    v36 += 4;
  }
  while (v36 != 16);
  if (a5 != 2 * v38)
  {
    v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v70, a5);
    v55 = std::string::insert(&v70, 0, "Unexpected size s=");
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = std::string::append(&v71, "/blob=");
    v58 = 0;
    v59 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v59;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    v60 = *(int *)(*a1 + 8);
    do
    {
      v60 *= *(int *)(*a1 + 12 + v58);
      v58 += 4;
    }
    while (v58 != 16);
    std::to_string(&v69, 2 * v60);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = &v69;
    else
      v61 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v62 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      v62 = v69.__r_.__value_.__l.__size_;
    v63 = std::string::append(&v72, (const std::string::value_type *)v61, v62);
    v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v54, &v73);
    __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v31 = (std::__shared_weak_count *)v67;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v37 + 48), v66, v67);
  if (v67)
    goto LABEL_31;
LABEL_35:
  if (a3)
  {
    v41 = (unint64_t *)&a3->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_19169ADA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  int v40;
  uint64_t v41;

  if (*(char *)(v41 - 89) < 0)
    operator delete(*(void **)(v41 - 112));
  if (a20 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v40 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](a10);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v39);
  goto LABEL_14;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int const*&,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;

  v4 = (char *)operator new(0x68uLL);
  v5 = v4;
  v6 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DBECE0;
  *((_QWORD *)v4 + 3) = &off_1E2DA1210;
  v7 = v4 + 24;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  v8 = 1;
  do
  {
    v9 = *(int *)(a2 + v6);
    *(_DWORD *)&v4[v6 + 32] = v9;
    v8 *= v9;
    v6 += 4;
  }
  while (v6 != 20);
  v10 = 4 * v8;
  v11 = Espresso::kern_alloc_uninitialized((Espresso *)(4 * v8));
  bzero(v11, v10);
  *((_QWORD *)v5 + 7) = v11;
  v5[64] = 1;
  *a1 = v7;
  a1[1] = v5;
}

void sub_19169AF70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_weak_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

unint64_t Espresso::padding_params_t::get_output_size(Espresso::padding_params_t *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  int v10;
  signed int v11;
  signed int v12;
  signed int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;

  switch(*(_WORD *)this)
  {
    case 0xFFFF:
    case 0:
      a2 = (a2 - a8 + *((__int16 *)this + 4) + *((__int16 *)this + 5)) / a5 + 1;
      a3 = (a3 - a9 + *((__int16 *)this + 6) + *((__int16 *)this + 7)) / a6 + 1;
      break;
    case 1:
    case 4:
      a2 = (a2 - 1) / a5 + 1;
      a3 = (a3 - 1) / a6 + 1;
      break;
    case 2:
      a2 = (a2 - a8) / a5 + 1;
      a3 = (a3 - a9) / a6 + 1;
      break;
    case 3:
      if (a8 >= 0)
        v10 = a8;
      else
        v10 = a8 + 1;
      v11 = v10 & 0xFFFFFFFE;
      v12 = (a9 + (a9 < 0)) & 0xFFFFFFFE;
      if (v12 <= v11)
        v12 = v11;
      v13 = (a10 + (a10 < 0)) & 0xFFFFFFFE;
      if (v13 <= v12)
        v13 = v12;
      if (a5 <= 1)
        v14 = 1;
      else
        v14 = a5;
      if (a6 <= 1)
        v15 = 1;
      else
        v15 = a6;
      if (a5 < 0)
        v14 = 1;
      v16 = ~v13;
      v17 = (v16 + a2) / v14;
      if (a5 >= 0)
        a2 = v17 + 1;
      else
        a2 = ~v17;
      if (a6 < 0)
        v18 = 1;
      else
        v18 = v15;
      v19 = (v16 + a3) / v18;
      if (a6 >= 0)
        a3 = v19 + 1;
      else
        a3 = ~v19;
      break;
    default:
      return a2 & ~(a2 >> 31) | ((unint64_t)(a3 & ~(a3 >> 31)) << 32);
  }
  return a2 & ~(a2 >> 31) | ((unint64_t)(a3 & ~(a3 >> 31)) << 32);
}

void Espresso::generic_pool3d_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  int v9;
  int v10;
  __int128 *v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *__p;
  _BYTE *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  __int128 v40;

  *((_QWORD *)&v40 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  v26 = **a2;
  v27 = v7;
  v28 = v6;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v29, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  v20 = v26;
  v21 = v27;
  v22 = v28;
  __p = 0;
  v24 = 0;
  v25 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v29, (uint64_t)v30, (v30 - (_BYTE *)v29) >> 2);
  v8 = v26;
  v9 = DWORD1(v26);
  v10 = DWORD2(v26);
  v11 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
  *(_OWORD *)((char *)v19 + 12) = *(__int128 *)((char *)v11 + 44);
  v17 = *v11;
  v18 = v11[1];
  v19[0] = v11[2];
  if (DWORD2(v19[1]))
  {
    *(_QWORD *)&v20 = 0x100000001;
    DWORD2(v20) = 1;
    if (WORD2(v19[0]) == 2
      || (v12 = "Invalid configuration : Global 3d pooling with non-zero padding.", !*(_QWORD *)((char *)v19 + 14))
      && __PAIR32__(WORD3(v19[1]), 0) == (unsigned __int16)(WORD6(v19[0]) | WORD2(v19[0])))
    {
      v34 = v20;
      v35 = v21;
      v36 = v22;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v37, __p, (uint64_t)v24, (v24 - (_BYTE *)__p) >> 2);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v32 = a3;
      v33 = 0;
      v13 = (char *)operator new(0x40uLL);
      *a3 = v13;
      a3[1] = v13;
      a3[2] = v13 + 64;
      v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v34, &v40, (uint64_t)v13);
      goto LABEL_8;
    }
LABEL_16:
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>(v12);
  }
  if (LODWORD(v19[0]))
  {
    v12 = "Unsupported top shape style.";
    goto LABEL_16;
  }
  *(_QWORD *)&v20 = Espresso::padding_params_t::get_output_size((Espresso::padding_params_t *)((char *)v19 + 4), v8, v9, v10, v18, SDWORD1(v18), SDWORD2(v18), SDWORD1(v17), SDWORD2(v17), SHIDWORD(v17));
  DWORD2(v20) = v15;
  v34 = v20;
  v35 = v21;
  v36 = v22;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v37, __p, (uint64_t)v24, (v24 - (_BYTE *)__p) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v32 = a3;
  v33 = 0;
  v16 = (char *)operator new(0x40uLL);
  *a3 = v16;
  a3[1] = v16;
  a3[2] = v16 + 64;
  v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v34, &v40, (uint64_t)v16);
LABEL_8:
  a3[1] = v14;
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
}

void sub_19169B3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v37;

  *(_QWORD *)(v33 + 8) = v34;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 144));
  v37 = *(void **)(v35 - 88);
  if (v37)
  {
    *(_QWORD *)(v35 - 80) = v37;
    operator delete(v37);
  }
  if (__p)
    operator delete(__p);
  if (a32)
    operator delete(a32);
  _Unwind_Resume(a1);
}

double Espresso::generic_pool3d_kernel::on_resized(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3;
  double result;

  if (*(_DWORD *)(a1 + 336))
  {
    v3 = **a3;
    result = *(double *)(v3 + 8);
    *(double *)(a1 + 284) = result;
    *(_DWORD *)(a1 + 292) = *(_DWORD *)(v3 + 16);
  }
  return result;
}

void Espresso::generic_hierarchical_inner_product_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 **a3@<X8>)
{
  int v5;
  __int128 *v6;
  __int128 *v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  Espresso::inner_product_top_shape(a3, a1 + 280, *a2);
  if (*(_DWORD *)(a1 + 332) == 100002)
  {
    v5 = (int)*(float *)(a1 + 336);
    v6 = *a3;
    v7 = a3[1];
    v8 = *((_DWORD *)*a3 + 5);
    v9 = v8 > 3 || v8 == -1;
    v10 = 8;
    if (!v9)
      v10 = 0;
    *(_DWORD *)((char *)v6 + v10) = v5;
    if (v7 >= a3[2])
    {
      v11 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)a3, v6);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v6);
      v11 = (uint64_t)(v7 + 4);
    }
    a3[1] = (__int128 *)v11;
  }
}

void sub_19169B500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_hierarchical_inner_product_kernel::kernel_type_str(Espresso::generic_hierarchical_inner_product_kernel *this)
{
  return "hierarchical_inner_product";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::generic_argsort_kernel::backpropable(_QWORD *a1@<X8>)
{
  Espresso::check_backpropable_result_t::not_backpropable_on_all_inputs((Espresso::check_backpropable_result_t *)1, a1);
}

void Espresso::generic_slice_update_kernel::top_shapes_for_bottom_shapes(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  char *v6;
  __int128 v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;

  *((_QWORD *)&v12 + 1) = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *((_QWORD *)*a1 + 4);
  v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  v8 = v4;
  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((_QWORD *)v3 + 6), (uint64_t)(*((_QWORD *)v3 + 6) - *((_QWORD *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_19169B618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_fused_convolution_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  int v7;
  unint64_t v8;
  __int128 *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  uint64_t *v40;
  void *__p[2];
  uint64_t v42;
  __int128 v43;
  char *v44;
  char *v45;
  uint64_t *v46;

  v6 = *(_DWORD *)(a1 + 320);
  v7 = *(unsigned __int8 *)(a1 + 451);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (*(_BYTE *)(a1 + 448))
  {
    v8 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, (__int128 *)(*(_QWORD *)a2 + 64));
    a3[1] = v8;
  }
  else
  {
    v8 = 0;
  }
  if (*(_BYTE *)(a1 + 449))
  {
    v9 = (__int128 *)(*(_QWORD *)a2 + 128);
    if (v8 >= a3[2])
    {
      v8 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v9);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v9);
      v8 += 64;
    }
    a3[1] = v8;
  }
  if (*(_BYTE *)(a1 + 450))
  {
    if (v7)
    {
      v34 = v6;
      v36 = 0;
      v35 = 0;
      v37 = 1;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v34, 0, (uint64_t)&v38);
      v10 = a3[2];
      v11 = a3[1];
      if (v11 >= v10)
      {
        v16 = (uint64_t)(v11 - *a3) >> 6;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 58)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v18 = v10 - *a3;
        if (v18 >> 5 > v17)
          v17 = v18 >> 5;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFC0)
          v19 = 0x3FFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        v46 = a3 + 2;
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v19);
        v21 = &v20[64 * v16];
        *(_QWORD *)&v43 = v20;
        *((_QWORD *)&v43 + 1) = v21;
        v45 = &v20[64 * v22];
        v23 = v39;
        v24 = v40;
        *(_OWORD *)v21 = v38;
        *((_OWORD *)v21 + 1) = v23;
        *((_QWORD *)v21 + 4) = v24;
        *((_QWORD *)v21 + 5) = 0;
        *((_QWORD *)v21 + 6) = 0;
        *((_QWORD *)v21 + 7) = 0;
        *(_OWORD *)(v21 + 40) = *(_OWORD *)__p;
        *((_QWORD *)v21 + 7) = v42;
        __p[0] = 0;
        __p[1] = 0;
        v42 = 0;
        v44 = v21 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v43);
        v25 = a3[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v43);
        v26 = __p[0];
        a3[1] = v25;
        if (v26)
        {
          __p[1] = v26;
          operator delete(v26);
        }
      }
      else
      {
        v12 = v39;
        v13 = v40;
        *(_OWORD *)v11 = v38;
        *(_OWORD *)(v11 + 16) = v12;
        *(_QWORD *)(v11 + 32) = v13;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 56) = 0;
        *(_OWORD *)(v11 + 40) = *(_OWORD *)__p;
        *(_QWORD *)(v11 + 56) = v42;
        __p[0] = 0;
        __p[1] = 0;
        v42 = 0;
        a3[1] = v11 + 64;
      }
    }
    else
    {
      v43 = 0uLL;
      v14 = a3[2];
      if (v8 >= v14)
      {
        v27 = (uint64_t)(v8 - *a3) >> 6;
        if ((unint64_t)(v27 + 1) >> 58)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v28 = v14 - *a3;
        v29 = v28 >> 5;
        if (v28 >> 5 <= (unint64_t)(v27 + 1))
          v29 = v27 + 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFC0)
          v30 = 0x3FFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        v40 = a3 + 2;
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v30);
        v32 = &v31[64 * v27];
        *(_QWORD *)&v38 = v31;
        *((_QWORD *)&v38 + 1) = v32;
        *((_QWORD *)&v39 + 1) = &v31[64 * v33];
        *(_QWORD *)v32 = 0x100000001;
        *((_DWORD *)v32 + 2) = v6;
        *(_QWORD *)(v32 + 12) = 0x100000001;
        *((_DWORD *)v32 + 5) = -1;
        *(_OWORD *)(v32 + 24) = 0u;
        *(_OWORD *)(v32 + 40) = 0u;
        *((_QWORD *)v32 + 7) = 0;
        *(_QWORD *)&v39 = v32 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v38);
        v15 = a3[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v38);
      }
      else
      {
        *(_QWORD *)v8 = 0x100000001;
        *(_DWORD *)(v8 + 8) = v6;
        *(_QWORD *)(v8 + 12) = 0x100000001;
        *(_DWORD *)(v8 + 20) = -1;
        *(_OWORD *)(v8 + 24) = v43;
        v15 = v8 + 64;
        *(_QWORD *)(v8 + 48) = 0;
        *(_QWORD *)(v8 + 56) = 0;
        *(_QWORD *)(v8 + 40) = 0;
        a3[1] = v8 + 64;
      }
      a3[1] = v15;
    }
  }
}

void sub_19169B948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::generic_fused_convolution_grad_kernel *this, Espresso::unpack_options *a2)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  size_t v19;
  std::string *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  size_t v28;
  void **v29;
  const void *v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t i;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  void *v56;
  size_t v57;
  unsigned __int8 v58;
  std::string *v59;
  std::string *v60;
  std::string *v61;
  std::string *v62;
  std::string *v63;
  void **p_data;
  uint64_t v65;
  std::__shared_weak_count *v66;
  std::string *v67;
  std::string *v68;
  std::string *v69;
  std::string *v70;
  std::string *v71;
  std::string *v72;
  void *v73[2];
  char v74;
  void *__p[2];
  char v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79[2];
  uint64_t v80[2];
  uint64_t v81;
  std::__shared_weak_count *v82;
  _QWORD *v83[7];
  char v84;
  Espresso::net *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::string **v90;
  std::__shared_weak_count *v91;
  std::string **v92;
  _QWORD v93[3];
  _QWORD *v94;
  std::string v95;
  uint64_t v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  uint64_t v102;
  std::string v103;
  uint64_t v104;
  std::string v105;
  __int128 v106;

  *(_QWORD *)&v106 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v56, "convolution");
  v4 = *((_DWORD *)this + 80);
  v93[0] = &off_1E2DB1EF8;
  v93[1] = this;
  v94 = v93;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v80[0] = *((_QWORD *)this + 1);
  v80[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v79[0] = 0;
  v79[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v81, v80, 0, v79);
  v8 = (unsigned __int8 *)this + 280;
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (*((_BYTE *)this + 450))
  {
    LODWORD(v62) = v4;
    BYTE4(v62) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v97, "bias_grad");
    std::string::basic_string[abi:ne180100]<0>(v73, "bias");
    if (!v94)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(void **__return_ptr, _QWORD *, Espresso::unpack_options *, void **))(*v94 + 48))(__p, v94, a2, v73);
    v11 = (__int128 *)*((_QWORD *)a2 + 3);
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *v11;
      v105.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v12;
    }
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v67 = (std::string *)&v70;
    LOBYTE(v68) = 0;
    v70 = (std::string *)operator new(0x18uLL);
    v71 = v70;
    v72 = v70 + 1;
    v71 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v72, (__int128 *)&v105, &v106, v70);
    v14 = *(_QWORD *)a2
        + 24
        * (int)Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>((unsigned __int8 *)this + 280, 2, v13);
    if (*(char *)(v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
    }
    else
    {
      v15 = *(_OWORD *)v14;
      v103.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 16);
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v15;
    }
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    v101.__r_.__value_.__s.__data_[8] = 0;
    v67 = (std::string *)operator new(0x18uLL);
    v68 = v67;
    v69 = v67 + 1;
    v68 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v69, (__int128 *)&v103, (__int128 *)&v104, v67);
    Espresso::sequential_builder::add<Espresso::bias_params>(&v77, &v81, (uint64_t)&v97, (uint64_t)__p, (uint64_t)&v62, (uint64_t)v70, (uint64_t)v71, (uint64_t *)&v67);
    v16 = v78;
    if (v78)
    {
      v17 = (unint64_t *)&v78->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    if (v76 < 0)
      operator delete(__p[0]);
    if (v74 < 0)
      operator delete(v73[0]);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)this + 449))
  {
    if ((v58 & 0x80u) == 0)
      v19 = v58;
    else
      v19 = v57;
    v20 = &v97;
    std::string::basic_string[abi:ne180100]((uint64_t)&v97, v19 + 13);
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v20 = (std::string *)v97.__r_.__value_.__r.__words[0];
    if (v19)
    {
      if ((v58 & 0x80u) == 0)
        v21 = &v56;
      else
        v21 = v56;
      memmove(v20, v21, v19);
    }
    strcpy((char *)v20 + v19, "_weights_grad");
    std::string::basic_string[abi:ne180100]<0>(v73, "weights");
    if (!v94)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(void **__return_ptr, _QWORD *, Espresso::unpack_options *, void **))(*v94 + 48))(__p, v94, a2, v73);
    memset(&v105, 0, sizeof(v105));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
    v23 = *(_QWORD *)a2
        + 24
        * (int)Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>((unsigned __int8 *)this + 280, 1, v22);
    if (*(char *)(v23 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)v23, *(_QWORD *)(v23 + 8));
    }
    else
    {
      v24 = *(_OWORD *)v23;
      v101.__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 + 16);
      *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v24;
    }
    memset(&v103, 0, sizeof(v103));
    v62 = &v103;
    LOBYTE(v63) = 0;
    v103.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v103.__r_.__value_.__l.__size_ = v103.__r_.__value_.__r.__words[0];
    v103.__r_.__value_.__r.__words[2] = v103.__r_.__value_.__r.__words[0] + 24;
    v103.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v103.__r_.__value_.__r.__words[2], (__int128 *)&v101, (__int128 *)&v102, (std::string *)v103.__r_.__value_.__l.__data_);
    Espresso::sequential_builder::add<Espresso::convolution_uniforms>(&v65, &v81, (uint64_t)&v97, (uint64_t)__p, (uint64_t)this + 280, (uint64_t)v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_, (uint64_t *)&v103);
    v25 = v66;
    if (v66)
    {
      v26 = (unint64_t *)&v66->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v62 = &v103;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
    if (v76 < 0)
      operator delete(__p[0]);
    if (v74 < 0)
      operator delete(v73[0]);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)this + 448))
  {
    if ((v58 & 0x80u) == 0)
      v28 = v58;
    else
      v28 = v57;
    v29 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v28 + 5);
    if (v76 < 0)
      v29 = (void **)__p[0];
    if (v28)
    {
      if ((v58 & 0x80u) == 0)
        v30 = &v56;
      else
        v30 = v56;
      memmove(v29, v30, v28);
    }
    strcpy((char *)v29 + v28, "_grad");
    std::string::basic_string[abi:ne180100]<0>(&v101, "data");
    if (!v94)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(void **__return_ptr, _QWORD *, Espresso::unpack_options *, std::string *))(*v94 + 48))(v73, v94, a2, &v101);
    v31 = (__int128 *)*((_QWORD *)a2 + 3);
    if (*((char *)v31 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)v31, *((_QWORD *)v31 + 1));
      v31 = (__int128 *)*((_QWORD *)a2 + 3);
    }
    else
    {
      v32 = *v31;
      v97.__r_.__value_.__r.__words[2] = *((_QWORD *)v31 + 2);
      *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v32;
    }
    if (*((char *)v31 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v98, *((const std::string::value_type **)v31 + 6), *((_QWORD *)v31 + 7));
      v31 = (__int128 *)*((_QWORD *)a2 + 3);
    }
    else
    {
      v98 = *(std::string *)((_BYTE *)v31 + 2);
    }
    if (*((char *)v31 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v99, *((const std::string::value_type **)v31 + 3), *((_QWORD *)v31 + 4));
      v31 = (__int128 *)*((_QWORD *)a2 + 3);
    }
    else
    {
      v33 = *(__int128 *)((char *)v31 + 24);
      v99.__r_.__value_.__r.__words[2] = *((_QWORD *)v31 + 5);
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v33;
    }
    if (*((char *)v31 + 95) < 0)
    {
      std::string::__init_copy_ctor_external(&v100, *((const std::string::value_type **)v31 + 9), *((_QWORD *)v31 + 10));
    }
    else
    {
      v34 = *(__int128 *)((char *)v31 + 72);
      v100.__r_.__value_.__r.__words[2] = *((_QWORD *)v31 + 11);
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v34;
    }
    v62 = 0;
    v63 = 0;
    p_data = 0;
    v59 = (std::string *)&v62;
    LOBYTE(v60) = 0;
    v62 = (std::string *)operator new(0x60uLL);
    v63 = v62;
    p_data = (void **)&v62[4].__r_.__value_.__l.__data_;
    v63 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v97, (__int128 *)&v101, v62);
    v36 = *(_QWORD *)a2
        + 24 * (int)Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>(v8, 0, v35);
    if (*(char *)(v36 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)v36, *(_QWORD *)(v36 + 8));
    }
    else
    {
      v37 = *(_OWORD *)v36;
      v95.__r_.__value_.__r.__words[2] = *(_QWORD *)(v36 + 16);
      *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v37;
    }
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v90 = &v59;
    LOBYTE(v91) = 0;
    v59 = (std::string *)operator new(0x18uLL);
    v60 = v59;
    v61 = v59 + 1;
    v60 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v61, (__int128 *)&v95, (__int128 *)&v96, v59);
    Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&v90, &v81, (uint64_t)__p, (uint64_t)v73, (uint64_t)v8, (uint64_t)v62, (uint64_t)v63, (uint64_t *)&v59);
    v38 = v91;
    if (v91)
    {
      v39 = (unint64_t *)&v91->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v92 = &v59;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    for (i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v100.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v100.__r_.__value_.__l.__data_ + i * 8));
    }
    if (v74 < 0)
      operator delete(v73[0]);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    if (v76 < 0)
      operator delete(__p[0]);
  }
  insert_network_layers(*((Espresso::net **)a2 + 6), v85, *((_QWORD *)a2 + 8));
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v89);
  v42 = v88;
  if (v88)
  {
    v43 = (unint64_t *)&v88->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v87;
  if (v87)
  {
    v46 = (unint64_t *)&v87->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v86;
  if (v86)
  {
    v49 = (unint64_t *)&v86->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (v84 < 0)
    operator delete(v83[5]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v83, v83[1]);
  v51 = v82;
  if (v82)
  {
    v52 = (unint64_t *)&v82->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v94;
  if (v94 == v93)
  {
    v55 = 4;
    v54 = v93;
  }
  else
  {
    if (!v94)
      goto LABEL_131;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_131:
  if ((char)v58 < 0)
    operator delete(v56);
}

void sub_19169C35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t a73;
  uint64_t v73;
  _QWORD *v75;
  uint64_t v76;

  if (a35 < 0)
    operator delete(__p);
  if (*(char *)(v73 - 137) < 0)
    operator delete(*(void **)(v73 - 160));
  if (a41 < 0)
    operator delete(a36);
  Espresso::sequential_builder::~sequential_builder(&a48);
  v75 = (_QWORD *)a73;
  if ((char *)a73 == &a72)
  {
    v76 = 4;
    v75 = &a72;
  }
  else
  {
    if (!a73)
      goto LABEL_12;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_12:
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_fused_convolution_grad_kernel::should_unpack(uint64_t a1, uint64_t a2)
{
  unsigned int (***v2)(_QWORD);

  v2 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 16) + 8);
  return (**v2)(v2) != 80000;
}

uint64_t Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>@<X0>(unsigned __int8 *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 2:
      if (!a1[170])
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("has_bias_grad is false");
      return a1[169] + a1[168];
    case 1:
      if (!a1[169])
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("has_weights_grad is false");
      return a1[168];
    case 0:
      if (!a1[168])
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("has_data_grad is false");
      return 0;
  }
  return a3;
}

void std::__function::__func<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1EF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1EF8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 296))(*(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso37generic_fused_convolution_grad_kernel6unpackERNS_14unpack_optionsEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::target_type()
{
}

void Espresso::generic_fused_inner_product_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  int v7;
  unint64_t v8;
  __int128 *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  uint64_t *v40;
  void *__p[2];
  uint64_t v42;
  __int128 v43;
  char *v44;
  char *v45;
  uint64_t *v46;

  v6 = *(_DWORD *)(a1 + 280);
  v7 = *(unsigned __int8 *)(a1 + 320);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (*(_BYTE *)(a1 + 412))
  {
    v8 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, (__int128 *)(*(_QWORD *)a2 + 64));
    a3[1] = v8;
  }
  else
  {
    v8 = 0;
  }
  if (*(_BYTE *)(a1 + 413))
  {
    v9 = (__int128 *)(*(_QWORD *)a2 + 128);
    if (v8 >= a3[2])
    {
      v8 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v9);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v9);
      v8 += 64;
    }
    a3[1] = v8;
  }
  if (*(_BYTE *)(a1 + 414))
  {
    if (v7)
    {
      v34 = v6;
      v36 = 0;
      v35 = 0;
      v37 = 1;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v34, 0, (uint64_t)&v38);
      v10 = a3[2];
      v11 = a3[1];
      if (v11 >= v10)
      {
        v16 = (uint64_t)(v11 - *a3) >> 6;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 58)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v18 = v10 - *a3;
        if (v18 >> 5 > v17)
          v17 = v18 >> 5;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFC0)
          v19 = 0x3FFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        v46 = a3 + 2;
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v19);
        v21 = &v20[64 * v16];
        *(_QWORD *)&v43 = v20;
        *((_QWORD *)&v43 + 1) = v21;
        v45 = &v20[64 * v22];
        v23 = v39;
        v24 = v40;
        *(_OWORD *)v21 = v38;
        *((_OWORD *)v21 + 1) = v23;
        *((_QWORD *)v21 + 4) = v24;
        *((_QWORD *)v21 + 5) = 0;
        *((_QWORD *)v21 + 6) = 0;
        *((_QWORD *)v21 + 7) = 0;
        *(_OWORD *)(v21 + 40) = *(_OWORD *)__p;
        *((_QWORD *)v21 + 7) = v42;
        __p[0] = 0;
        __p[1] = 0;
        v42 = 0;
        v44 = v21 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v43);
        v25 = a3[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v43);
        v26 = __p[0];
        a3[1] = v25;
        if (v26)
        {
          __p[1] = v26;
          operator delete(v26);
        }
      }
      else
      {
        v12 = v39;
        v13 = v40;
        *(_OWORD *)v11 = v38;
        *(_OWORD *)(v11 + 16) = v12;
        *(_QWORD *)(v11 + 32) = v13;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 56) = 0;
        *(_OWORD *)(v11 + 40) = *(_OWORD *)__p;
        *(_QWORD *)(v11 + 56) = v42;
        __p[0] = 0;
        __p[1] = 0;
        v42 = 0;
        a3[1] = v11 + 64;
      }
    }
    else
    {
      v43 = 0uLL;
      v14 = a3[2];
      if (v8 >= v14)
      {
        v27 = (uint64_t)(v8 - *a3) >> 6;
        if ((unint64_t)(v27 + 1) >> 58)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v28 = v14 - *a3;
        v29 = v28 >> 5;
        if (v28 >> 5 <= (unint64_t)(v27 + 1))
          v29 = v27 + 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFC0)
          v30 = 0x3FFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        v40 = a3 + 2;
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v30);
        v32 = &v31[64 * v27];
        *(_QWORD *)&v38 = v31;
        *((_QWORD *)&v38 + 1) = v32;
        *((_QWORD *)&v39 + 1) = &v31[64 * v33];
        *(_QWORD *)v32 = 0x100000001;
        *((_DWORD *)v32 + 2) = v6;
        *(_QWORD *)(v32 + 12) = 0x100000001;
        *((_DWORD *)v32 + 5) = -1;
        *(_OWORD *)(v32 + 24) = 0u;
        *(_OWORD *)(v32 + 40) = 0u;
        *((_QWORD *)v32 + 7) = 0;
        *(_QWORD *)&v39 = v32 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v38);
        v15 = a3[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v38);
      }
      else
      {
        *(_QWORD *)v8 = 0x100000001;
        *(_DWORD *)(v8 + 8) = v6;
        *(_QWORD *)(v8 + 12) = 0x100000001;
        *(_DWORD *)(v8 + 20) = -1;
        *(_OWORD *)(v8 + 24) = v43;
        v15 = v8 + 64;
        *(_QWORD *)(v8 + 48) = 0;
        *(_QWORD *)(v8 + 56) = 0;
        *(_QWORD *)(v8 + 40) = 0;
        a3[1] = v8 + 64;
      }
      a3[1] = v15;
    }
  }
}

void sub_19169CA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::generic_fused_inner_product_grad_kernel *this, Espresso::unpack_options *a2)
{
  unsigned __int8 *v4;
  int v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  size_t v20;
  std::string *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  size_t v29;
  void **v30;
  const void *v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t i;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  size_t v58;
  unsigned __int8 v59;
  std::string *v60;
  std::string *v61;
  std::string *v62;
  std::string *v63;
  std::string *v64;
  void **p_data;
  uint64_t v66;
  std::__shared_weak_count *v67;
  std::string *v68;
  std::string *v69;
  std::string *v70;
  std::string *v71;
  std::string *v72;
  std::string *v73;
  void *v74[2];
  char v75;
  void *__p[2];
  char v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80[2];
  uint64_t v81[2];
  uint64_t v82;
  std::__shared_weak_count *v83;
  _QWORD *v84[7];
  char v85;
  Espresso::net *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::string **v91;
  std::__shared_weak_count *v92;
  std::string **v93;
  _QWORD v94[3];
  _QWORD *v95;
  std::string v96;
  uint64_t v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  std::string v102;
  uint64_t v103;
  std::string v104;
  uint64_t v105;
  std::string v106;
  __int128 v107;

  *(_QWORD *)&v107 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v57, "inner_product");
  v4 = (unsigned __int8 *)this + 280;
  v5 = *((_DWORD *)this + 70);
  v6 = *((_BYTE *)this + 320);
  v94[0] = &off_1E2DB1F50;
  v94[1] = this;
  v95 = v94;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v81[0] = *((_QWORD *)this + 1);
  v81[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v80[0] = 0;
  v80[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v82, v81, 0, v80);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*((_BYTE *)this + 414))
  {
    LODWORD(v63) = v5;
    BYTE4(v63) = v6;
    std::string::basic_string[abi:ne180100]<0>(&v98, "bias_grad");
    std::string::basic_string[abi:ne180100]<0>(v74, "bias");
    if (!v95)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(void **__return_ptr, _QWORD *, Espresso::unpack_options *, void **))(*v95 + 48))(__p, v95, a2, v74);
    v12 = (__int128 *)*((_QWORD *)a2 + 3);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      v106.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v13;
    }
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v68 = (std::string *)&v71;
    LOBYTE(v69) = 0;
    v71 = (std::string *)operator new(0x18uLL);
    v72 = v71;
    v73 = v71 + 1;
    v72 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v73, (__int128 *)&v106, &v107, v71);
    v15 = *(_QWORD *)a2
        + 24
        * (int)Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>((unsigned __int8 *)this + 280, 2, v14);
    if (*(char *)(v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v104.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 16);
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v16;
    }
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
    v102.__r_.__value_.__s.__data_[8] = 0;
    v68 = (std::string *)operator new(0x18uLL);
    v69 = v68;
    v70 = v68 + 1;
    v69 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v70, (__int128 *)&v104, (__int128 *)&v105, v68);
    Espresso::sequential_builder::add<Espresso::bias_params>(&v78, &v82, (uint64_t)&v98, (uint64_t)__p, (uint64_t)&v63, (uint64_t)v71, (uint64_t)v72, (uint64_t *)&v68);
    v17 = v79;
    if (v79)
    {
      v18 = (unint64_t *)&v79->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    if (v77 < 0)
      operator delete(__p[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)this + 413))
  {
    if ((v59 & 0x80u) == 0)
      v20 = v59;
    else
      v20 = v58;
    v21 = &v98;
    std::string::basic_string[abi:ne180100]((uint64_t)&v98, v20 + 13);
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v98.__r_.__value_.__r.__words[0];
    if (v20)
    {
      if ((v59 & 0x80u) == 0)
        v22 = &v57;
      else
        v22 = v57;
      memmove(v21, v22, v20);
    }
    strcpy((char *)v21 + v20, "_weights_grad");
    std::string::basic_string[abi:ne180100]<0>(v74, "weights");
    if (!v95)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(void **__return_ptr, _QWORD *, Espresso::unpack_options *, void **))(*v95 + 48))(__p, v95, a2, v74);
    memset(&v106, 0, sizeof(v106));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v106, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
    v24 = *(_QWORD *)a2
        + 24
        * (int)Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>((unsigned __int8 *)this + 280, 1, v23);
    if (*(char *)(v24 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)v24, *(_QWORD *)(v24 + 8));
    }
    else
    {
      v25 = *(_OWORD *)v24;
      v102.__r_.__value_.__r.__words[2] = *(_QWORD *)(v24 + 16);
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v25;
    }
    memset(&v104, 0, sizeof(v104));
    v63 = &v104;
    LOBYTE(v64) = 0;
    v104.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v104.__r_.__value_.__l.__size_ = v104.__r_.__value_.__r.__words[0];
    v104.__r_.__value_.__r.__words[2] = v104.__r_.__value_.__r.__words[0] + 24;
    v104.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v104.__r_.__value_.__r.__words[2], (__int128 *)&v102, (__int128 *)&v103, (std::string *)v104.__r_.__value_.__l.__data_);
    Espresso::sequential_builder::add<Espresso::inner_product_uniforms>(&v66, &v82, (uint64_t)&v98, (uint64_t)__p, (uint64_t)this + 280, (uint64_t)v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_, (uint64_t *)&v104);
    v26 = v67;
    if (v67)
    {
      v27 = (unint64_t *)&v67->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v63 = &v104;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v102.__r_.__value_.__l.__data_);
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
    if (v77 < 0)
      operator delete(__p[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)this + 412))
  {
    if ((v59 & 0x80u) == 0)
      v29 = v59;
    else
      v29 = v58;
    v30 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v29 + 5);
    if (v77 < 0)
      v30 = (void **)__p[0];
    if (v29)
    {
      if ((v59 & 0x80u) == 0)
        v31 = &v57;
      else
        v31 = v57;
      memmove(v30, v31, v29);
    }
    strcpy((char *)v30 + v29, "_grad");
    std::string::basic_string[abi:ne180100]<0>(&v102, "data");
    if (!v95)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(void **__return_ptr, _QWORD *, Espresso::unpack_options *, std::string *))(*v95 + 48))(v74, v95, a2, &v102);
    v32 = (__int128 *)*((_QWORD *)a2 + 3);
    if (*((char *)v32 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)v32, *((_QWORD *)v32 + 1));
      v32 = (__int128 *)*((_QWORD *)a2 + 3);
    }
    else
    {
      v33 = *v32;
      v98.__r_.__value_.__r.__words[2] = *((_QWORD *)v32 + 2);
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v33;
    }
    if (*((char *)v32 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v99, *((const std::string::value_type **)v32 + 6), *((_QWORD *)v32 + 7));
      v32 = (__int128 *)*((_QWORD *)a2 + 3);
    }
    else
    {
      v99 = *(std::string *)((_BYTE *)v32 + 2);
    }
    if (*((char *)v32 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v100, *((const std::string::value_type **)v32 + 3), *((_QWORD *)v32 + 4));
      v32 = (__int128 *)*((_QWORD *)a2 + 3);
    }
    else
    {
      v34 = *(__int128 *)((char *)v32 + 24);
      v100.__r_.__value_.__r.__words[2] = *((_QWORD *)v32 + 5);
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v34;
    }
    if (*((char *)v32 + 95) < 0)
    {
      std::string::__init_copy_ctor_external(&v101, *((const std::string::value_type **)v32 + 9), *((_QWORD *)v32 + 10));
    }
    else
    {
      v35 = *(__int128 *)((char *)v32 + 72);
      v101.__r_.__value_.__r.__words[2] = *((_QWORD *)v32 + 11);
      *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v35;
    }
    v63 = 0;
    v64 = 0;
    p_data = 0;
    v60 = (std::string *)&v63;
    LOBYTE(v61) = 0;
    v63 = (std::string *)operator new(0x60uLL);
    v64 = v63;
    p_data = (void **)&v63[4].__r_.__value_.__l.__data_;
    v64 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v98, (__int128 *)&v102, v63);
    v37 = *(_QWORD *)a2
        + 24 * (int)Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>(v4, 0, v36);
    if (*(char *)(v37 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)v37, *(_QWORD *)(v37 + 8));
    }
    else
    {
      v38 = *(_OWORD *)v37;
      v96.__r_.__value_.__r.__words[2] = *(_QWORD *)(v37 + 16);
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v38;
    }
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v91 = &v60;
    LOBYTE(v92) = 0;
    v60 = (std::string *)operator new(0x18uLL);
    v61 = v60;
    v62 = v60 + 1;
    v61 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v62, (__int128 *)&v96, (__int128 *)&v97, v60);
    Espresso::sequential_builder::add<Espresso::inner_product_uniforms>((uint64_t *)&v91, &v82, (uint64_t)__p, (uint64_t)v74, (uint64_t)v4, (uint64_t)v63, (uint64_t)v64, (uint64_t *)&v60);
    v39 = v92;
    if (v92)
    {
      v40 = (unint64_t *)&v92->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v93 = &v60;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
    for (i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v101.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v101.__r_.__value_.__l.__data_ + i * 8));
    }
    if (v75 < 0)
      operator delete(v74[0]);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v102.__r_.__value_.__l.__data_);
    if (v77 < 0)
      operator delete(__p[0]);
  }
  insert_network_layers(*((Espresso::net **)a2 + 6), v86, *((_QWORD *)a2 + 8));
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v90);
  v43 = v89;
  if (v89)
  {
    v44 = (unint64_t *)&v89->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v88;
  if (v88)
  {
    v47 = (unint64_t *)&v88->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v87;
  if (v87)
  {
    v50 = (unint64_t *)&v87->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v85 < 0)
    operator delete(v84[5]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v84, v84[1]);
  v52 = v83;
  if (v83)
  {
    v53 = (unint64_t *)&v83->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v95;
  if (v95 == v94)
  {
    v56 = 4;
    v55 = v94;
  }
  else
  {
    if (!v95)
      goto LABEL_131;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_131:
  if ((char)v59 < 0)
    operator delete(v57);
}

void sub_19169D46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t a73;
  uint64_t v73;
  _QWORD *v75;
  uint64_t v76;

  if (a35 < 0)
    operator delete(__p);
  if (*(char *)(v73 - 137) < 0)
    operator delete(*(void **)(v73 - 160));
  if (a41 < 0)
    operator delete(a36);
  Espresso::sequential_builder::~sequential_builder(&a48);
  v75 = (_QWORD *)a73;
  if ((char *)a73 == &a72)
  {
    v76 = 4;
    v75 = &a72;
  }
  else
  {
    if (!a73)
      goto LABEL_12;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_12:
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_fused_inner_product_grad_kernel::should_unpack(uint64_t a1, uint64_t a2)
{
  unsigned int (***v2)(_QWORD);

  v2 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 16) + 8);
  return (**v2)(v2) != 80000;
}

uint64_t Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>@<X0>(unsigned __int8 *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 2:
      if (!a1[134])
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("has_bias_grad is false");
      return a1[133] + a1[132];
    case 1:
      if (!a1[133])
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("has_weights_grad is false");
      return a1[132];
    case 0:
      if (!a1[132])
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("has_data_grad is false");
      return 0;
  }
  return a3;
}

void std::__function::__func<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1F50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1F50;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 296))(*(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso39generic_fused_inner_product_grad_kernel6unpackERNS_14unpack_optionsEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::target_type()
{
}

void Espresso::generic_deconv3d_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  int32x2_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int32x2_t v10;
  int v13;
  int32x2_t v14;
  uint16x4_t v15;
  int v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  char *v22;
  _OWORD v23[2];
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  __int128 v33[2];
  uint64_t v34;
  void *__p;
  void *v36;
  uint64_t v37;
  __int128 v38;

  *((_QWORD *)&v38 + 1) = *MEMORY[0x1E0C80C00];
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v29, *a2, 0);
  v27 = v29;
  v28 = v30;
  if (HIDWORD(v30) != 5)
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Input tensor rank to conv3d must be 5");
  v5 = v30;
  v6 = *(int32x2_t *)((char *)&v29 + 8);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
  v8 = *(_DWORD *)(v7 + 8);
  v9 = *(_DWORD *)(v7 + 84);
  v10 = *(int32x2_t *)(v7 + 88);
  if (v9 < 1 || (int)*(_QWORD *)(v7 + 88) < 1 || (int)HIDWORD(*(_QWORD *)(v7 + 88)) <= 0)
  {
    v13 = *(__int16 *)(v7 + 70);
    if (v13 <= 1)
      v13 = 1;
    v14 = vrev64_s32(v6);
    v15 = *(uint16x4_t *)(v7 + 58);
    v16 = (*(_DWORD *)(v7 + 16) - 1) * v13;
    v17.i32[0] = *(__int16 *)(v7 + 72);
    v17.i32[1] = *(__int16 *)(v7 + 74);
    v18 = vmul_s32(vadd_s32(*(int32x2_t *)(v7 + 20), (int32x2_t)-1), vmax_s32(v17, (int32x2_t)0x100000001));
    v19.i32[0] = *(__int16 *)(v7 + 66);
    v19.i32[1] = *(__int16 *)(v7 + 68);
    switch(*(_WORD *)(v7 + 44))
    {
      case 0xFFFF:
      case 0:
        v20.i32[0] = vmovl_u16(*(uint16x4_t *)(v7 + 56)).u32[0];
        v21.i32[0] = vmovl_u16(v15).u32[0];
        v9 = (v5 - 1) * v15.i16[3] - (*(__int16 *)(v7 + 52) + *(__int16 *)(v7 + 54)) + v16 + 1;
        v20.i32[1] = v15.u16[1];
        v21.i32[1] = v15.u16[2];
        v10 = vsub_s32(v18, (int32x2_t)vmvn_s8((int8x8_t)vsub_s32(vmul_s32(vadd_s32(v14, (int32x2_t)-1), v19), vsra_n_s32(vshr_n_s32(vshl_n_s32(v20, 0x10uLL), 0x10uLL), vshl_n_s32(v21, 0x10uLL), 0x10uLL))));
        break;
      case 1:
      case 4:
        v9 = v5 * v15.i16[3];
        v10 = vmul_s32(v14, v19);
        break;
      case 2:
      case 3:
        v9 = v16 + v5 * v15.i16[3];
        v10 = vmla_s32(v18, v14, v19);
        break;
      default:
        v9 = 0;
        v10 = 0;
        break;
    }
  }
  LODWORD(v28) = v9;
  *((int32x2_t *)&v27 + 1) = vrev64_s32(v10);
  DWORD1(v27) = v8;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v27, 0, (uint64_t)v23);
  v33[0] = v23[0];
  v33[1] = v23[1];
  v34 = v24;
  __p = 0;
  v36 = 0;
  v37 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v25, (uint64_t)v26, (v26 - (_BYTE *)v25) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v31 = a3;
  v32 = 0;
  v22 = (char *)operator new(0x40uLL);
  *a3 = v22;
  a3[1] = v22;
  a3[2] = v22 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v33, &v38, (uint64_t)v22);
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void sub_19169DB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = v32;
  *(_QWORD *)(v31 + 8) = v33;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a23);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14)
    operator delete(a14);
  _Unwind_Resume(a1);
}

void Espresso::generic_deconv3d_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 **a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  unsigned __int8 *v18;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  vImagePixelCount v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  void *v93;
  vImagePixelCount v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::string v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114[2];
  void *v115;
  vImagePixelCount v116;
  uint64_t v117[2];
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  std::string v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  uint64_t v127[2];
  uint64_t v128;
  std::__shared_weak_count *v129;
  void *data;
  vImagePixelCount height;
  uint64_t v132[2];
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  void *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  vImage_Buffer dest;
  vImage_Buffer src;

  v139 = 0;
  v140 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v139, *a6, a6[1]);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 448))(&v133, a1);
  v10 = v133;
  v11 = HIDWORD(v133);
  v12 = v134;
  v13 = v135;
  v14 = v136;
  if (*((char *)a3 + 23) < 0)
  {
    v18 = a3[1];
    if (v18 != (unsigned __int8 *)1)
    {
      if (v18 != (unsigned __int8 *)5)
        goto LABEL_165;
      if (*(_DWORD *)*a3 != 828792663 || (*a3)[4] != 54)
      {
        v17 = *a3;
        goto LABEL_20;
      }
      goto LABEL_63;
    }
    v30 = **a3;
    if (v30 == 87)
      goto LABEL_76;
    if (v30 != 98)
      goto LABEL_165;
    goto LABEL_43;
  }
  v15 = *((unsigned __int8 *)a3 + 23);
  if (v15 == 1)
  {
    v29 = *(unsigned __int8 *)a3;
    if (v29 != 98)
    {
      if (v29 != 87)
        goto LABEL_165;
LABEL_76:
      v52 = (std::__shared_weak_count *)v140;
      v132[0] = v139;
      v132[1] = v140;
      if (v140)
      {
        v53 = (unint64_t *)(v140 + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<float,5>(&src, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v132, v10, v11, v12, v13, v14, (a4 & 0x3F) == 0);
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v56 = __ldaxr(p_shared_owners);
        while (__stlxr(v56 - 1, p_shared_owners));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      data = src.data;
      height = src.height;
      if (src.height)
      {
        v57 = (unint64_t *)(src.height + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 400))(a1, &data);
      v59 = (std::__shared_weak_count *)height;
      if (height)
      {
        v60 = (unint64_t *)(height + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v41 = (std::__shared_weak_count *)src.height;
      if (!src.height)
        goto LABEL_165;
      v62 = (unint64_t *)(src.height + 8);
      do
        v43 = __ldaxr(v62);
      while (__stlxr(v43 - 1, v62));
      goto LABEL_163;
    }
LABEL_43:
    v31 = (std::__shared_weak_count *)v140;
    v117[0] = v139;
    v117[1] = v140;
    if (v140)
    {
      v32 = (unint64_t *)(v140 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&src, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v117, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
    if (v31)
    {
      v34 = (unint64_t *)&v31->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v115 = src.data;
    v116 = src.height;
    if (src.height)
    {
      v36 = (unint64_t *)(src.height + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 392))(a1, &v115);
    v38 = (std::__shared_weak_count *)v116;
    if (v116)
    {
      v39 = (unint64_t *)(v116 + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)src.height;
    if (!src.height)
      goto LABEL_165;
    v42 = (unint64_t *)(src.height + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
LABEL_163:
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    goto LABEL_165;
  }
  if (v15 != 5)
    goto LABEL_165;
  v16 = *(_DWORD *)a3 == 828792663 && *((_BYTE *)a3 + 4) == 54;
  v17 = a3;
  if (v16)
  {
LABEL_63:
    v44 = (std::__shared_weak_count *)v140;
    v127[0] = v139;
    v127[1] = v140;
    if (v140)
    {
      v45 = (unint64_t *)(v140 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<unsigned short,5>(&v128, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v127, v10, v11, v12, v13, v14, (a4 & 0x3F) == 0);
    if (v44)
    {
      v47 = (unint64_t *)&v44->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v49 = *(std::__shared_weak_count **)(a1 + 16);
    v125 = *(_QWORD *)(a1 + 8);
    v126 = v49;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    if (*((char *)a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v124, (const std::string::value_type *)*a3, (std::string::size_type)a3[1]);
    else
      v124 = *(std::string *)a3;
    v122 = v128;
    v123 = v129;
    if (v129)
    {
      v63 = (unint64_t *)&v129->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    Espresso::base_kernel::set_parameter_blob<unsigned short,5>(a1, &v125, (__int128 *)&v124, &v122);
    v65 = v123;
    if (v123)
    {
      v66 = (unint64_t *)&v123->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v124.__r_.__value_.__l.__data_);
    v68 = v126;
    if (v126)
    {
      v69 = (unint64_t *)&v126->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int const*&,void>(&v120, v128 + 8);
    v71 = 0;
    v72 = v120;
    v73 = *(void **)(v120 + 32);
    v74 = *(int *)(v128 + 8);
    do
    {
      v74 *= *(int *)(v128 + 12 + v71);
      v71 += 4;
    }
    while (v71 != 16);
    src.data = *(void **)(v128 + 32);
    src.height = 1;
    src.width = v74;
    src.rowBytes = 2 * v74;
    dest.data = v73;
    dest.height = 1;
    dest.width = v74;
    dest.rowBytes = 4 * v74;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    v118 = v72;
    v119 = v121;
    if (v121)
    {
      v75 = (unint64_t *)&v121->__shared_owners_;
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 400))(a1, &v118);
    v77 = v119;
    if (v119)
    {
      v78 = (unint64_t *)&v119->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = v121;
    if (v121)
    {
      v81 = (unint64_t *)&v121->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v41 = v129;
    if (!v129)
      goto LABEL_165;
    v83 = (unint64_t *)&v129->__shared_owners_;
    do
      v43 = __ldaxr(v83);
    while (__stlxr(v43 - 1, v83));
    goto LABEL_163;
  }
LABEL_20:
  if (*v17 == 828792674 && *((_BYTE *)v17 + 4) == 54)
  {
    v21 = (std::__shared_weak_count *)v140;
    v114[0] = v139;
    v114[1] = v140;
    if (v140)
    {
      v22 = (unint64_t *)(v140 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v128, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v114, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
    if (v21)
    {
      v24 = (unint64_t *)&v21->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v26 = *(std::__shared_weak_count **)(a1 + 16);
    v112 = *(_QWORD *)(a1 + 8);
    v113 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    if (*((char *)a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v111, (const std::string::value_type *)*a3, (std::string::size_type)a3[1]);
    else
      v111 = *(std::string *)a3;
    v109 = v128;
    v110 = v129;
    if (v129)
    {
      v84 = (unint64_t *)&v129->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    Espresso::base_kernel::set_parameter_blob<unsigned short,1>(a1, &v112, (__int128 *)&v111, &v109);
    v86 = v110;
    if (v110)
    {
      v87 = (unint64_t *)&v110->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v111.__r_.__value_.__l.__data_);
    v89 = v113;
    if (v113)
    {
      v90 = (unint64_t *)&v113->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v120, (int *)(v128 + 8));
    v92 = v120;
    v93 = *(void **)(v120 + 16);
    v94 = *(int *)(v128 + 8);
    src.data = *(void **)(v128 + 16);
    src.height = 1;
    src.width = v94;
    src.rowBytes = 2 * v94;
    dest.data = v93;
    dest.height = 1;
    dest.width = v94;
    dest.rowBytes = 4 * v94;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    v107 = v92;
    v108 = v121;
    if (v121)
    {
      v95 = (unint64_t *)&v121->__shared_owners_;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 392))(a1, &v107);
    v97 = v108;
    if (v108)
    {
      v98 = (unint64_t *)&v108->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v100 = v121;
    if (v121)
    {
      v101 = (unint64_t *)&v121->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v41 = v129;
    if (v129)
    {
      v103 = (unint64_t *)&v129->__shared_owners_;
      do
        v43 = __ldaxr(v103);
      while (__stlxr(v43 - 1, v103));
      goto LABEL_163;
    }
  }
LABEL_165:
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  v104 = (std::__shared_weak_count *)v140;
  if (v140)
  {
    v105 = (unint64_t *)(v140 + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
}

void sub_19169E460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45)
{
  uint64_t v45;
  void *v47;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 240);
  v47 = *(void **)(v45 - 152);
  if (v47)
  {
    *(_QWORD *)(v45 - 144) = v47;
    operator delete(v47);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 128);
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_deconv3d_kernel::supports_weight_key(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = (char)a2[23];
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 == 1)
    {
      v3 = *a2;
      return v3 == 87 || v3 == 98;
    }
    return 0;
  }
  if (*((_QWORD *)a2 + 1) != 1)
    return 0;
  v3 = **(unsigned __int8 **)a2;
  return v3 == 87 || v3 == 98;
}

const char *Espresso::generic_deconv3d_kernel::kernel_type_str(Espresso::generic_deconv3d_kernel *this)
{
  return "deconv3d";
}

double Espresso::generic_deconv3d_kernel::weights_blob_shape@<D0>(Espresso::generic_deconv3d_kernel *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  double result;
  int v6;

  v2 = *((_DWORD *)this + 82);
  v3 = *((_DWORD *)this + 78);
  v4 = *((_DWORD *)this + 96);
  if (v4 <= 1)
    v4 = 1;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  result = *((double *)this + 40);
  v6 = *((_DWORD *)this + 79);
  *(_QWORD *)(a2 + 56) = 0;
  *(double *)a2 = result;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = v3 / v4;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = -1;
  return result;
}

void Espresso::generic_deconv3d_kernel::create_weights_blob(Espresso::generic_deconv3d_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;

  v2 = *((_DWORD *)this + 96);
  if (v2 <= 1)
    v2 = 1;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int &,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 80), *((_DWORD *)this + 81), *((_DWORD *)this + 82), *((_DWORD *)this + 78) / v2, *((_DWORD *)this + 79));
}

void Espresso::generic_general_slice_update_kernel::top_shapes_for_bottom_shapes(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  char *v6;
  __int128 v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;

  *((_QWORD *)&v12 + 1) = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *((_QWORD *)*a1 + 4);
  v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  v8 = v4;
  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((_QWORD *)v3 + 6), (uint64_t)(*((_QWORD *)v3 + 6) - *((_QWORD *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_19169E750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const char *Espresso::generic_general_slice_update_kernel::kernel_type_str(Espresso::generic_general_slice_update_kernel *this)
{
  return "general_slice_update";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::general_slice_update_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::generic_resize_nearest_neighbor_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  char *v9;
  uint64_t v10;
  char *v11;
  const char *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void *__p;
  _BYTE *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  _BYTE *v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  __int128 v33;

  *((_QWORD *)&v33 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  v19 = **a2;
  v20 = v7;
  v21 = v6;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v22, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  *((_QWORD *)&v13 + 1) = *((_QWORD *)&v19 + 1);
  v14 = v20;
  v15 = v21;
  __p = 0;
  v17 = 0;
  v18 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v22, (uint64_t)v23, (v23 - (_BYTE *)v22) >> 2);
  v8 = *(_DWORD *)(a1 + 280);
  if (v8)
  {
    if (v8 == 1)
    {
      *(int32x2_t *)&v13 = vmax_s32(*(int32x2_t *)(a1 + 284), (int32x2_t)0x100000001);
      v27 = v13;
      v28 = v14;
      v29 = v15;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v30, __p, (uint64_t)v17, (v17 - (_BYTE *)__p) >> 2);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v25 = a3;
      v26 = 0;
      v9 = (char *)operator new(0x40uLL);
      *a3 = v9;
      a3[1] = v9;
      a3[2] = v9 + 64;
      v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v27, &v33, (uint64_t)v9);
      goto LABEL_8;
    }
    v12 = "resize_nearest_neighbor_kernel: mode not valid";
LABEL_19:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v12);
  }
  if (DWORD1(v20) != 4)
  {
    v12 = "resize_nearest_neighbor_kernel: input must be rank 4.";
    goto LABEL_19;
  }
  if (*(int *)(a1 + 284) < 1)
  {
    v12 = "resize_nearest_neighbor_kernel: output width must be at least 1.";
    goto LABEL_19;
  }
  if (*(int *)(a1 + 288) < 1)
  {
    v12 = "resize_nearest_neighbor_kernel: output height must be at least 1.";
    goto LABEL_19;
  }
  *(_QWORD *)&v13 = *(_QWORD *)(a1 + 284);
  v27 = v13;
  v28 = v14;
  v29 = v15;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v30, __p, (uint64_t)v17, (v17 - (_BYTE *)__p) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v25 = a3;
  v26 = 0;
  v11 = (char *)operator new(0x40uLL);
  *a3 = v11;
  a3[1] = v11;
  a3[2] = v11 + 64;
  v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v27, &v33, (uint64_t)v11);
LABEL_8:
  a3[1] = v10;
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
}

void sub_19169E9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void **a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;

  *(_QWORD *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a25);
  v29 = *(void **)(v27 - 72);
  if (v29)
  {
    *(_QWORD *)(v27 - 64) = v29;
    operator delete(v29);
  }
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_resize_nearest_neighbor_kernel::has_dynamic_top_shape(Espresso::generic_resize_nearest_neighbor_kernel *this)
{
  if (*((_DWORD *)this + 70) != 1)
    return 0;
  if (*((_DWORD *)this + 72))
    return *((_DWORD *)this + 71) == 0;
  return 1;
}

const char *Espresso::generic_resize_nearest_neighbor_kernel::kernel_type_str(Espresso::generic_resize_nearest_neighbor_kernel *this)
{
  return "resize_nearest_neighbor";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::resize_nearest_neighbor_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::generic_einsum_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, _QWORD *a3@<X8>)
{
  const Espresso::layer_shape *v5;
  std::vector<int>::size_type v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  char *v13;
  std::string::size_type v14;
  int64_t size;
  std::string *p_str;
  _BYTE *v17;
  std::string *v18;
  _BYTE *v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string::size_type v23;
  unint64_t v24;
  int v25;
  std::string *v26;
  int v27;
  _QWORD *v28;
  _QWORD **v29;
  _QWORD *v30;
  _QWORD **v31;
  int v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  std::string *v37;
  int v38;
  _QWORD *v39;
  _QWORD **v40;
  _QWORD *v41;
  _QWORD **v42;
  int v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  std::string *p_p;
  int v49;
  _QWORD *v50;
  _QWORD **v51;
  _QWORD *v52;
  _QWORD **v53;
  int v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _OWORD *v58;
  void *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v64;
  void *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL4 v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  void *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v92;
  void *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  _DWORD *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  _BOOL4 v103;
  int v104;
  int v105;
  int v106;
  int v107;
  char *v108;
  _OWORD *v109;
  void *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  unsigned int *v117;
  void *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  BOOL v124;
  _DWORD *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BOOL4 v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  unsigned int v143;
  int v144;
  int v145;
  char *v146;
  const char *v147;
  std::string __p;
  std::string v149;
  std::string v150;
  uint64_t *v151;
  _QWORD *v152[2];
  std::string v153;
  std::string v154;
  std::string v155;
  std::vector<int> v156;
  std::vector<int> v157;
  std::string::value_type v158;
  std::string __str;
  void *v160;
  void *v161;
  __int128 v162;

  *(_QWORD *)&v162 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (a2[1] - v5 != 128)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_einsum_kernel: must have 2 inputs");
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__str, v5, 0);
  Espresso::layer_nd_shape::shape_vector(&v157, (uint64_t)&__str);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__str, (const Espresso::layer_shape *)((char *)*a2 + 64), 0);
  Espresso::layer_nd_shape::shape_vector(&v156, (uint64_t)&__str);
  v8 = v157.__end_ - v157.__begin_;
  if (v8 != v156.__end_ - v156.__begin_)
  {
    v147 = "generic_einsum_kernel: inputs must be of the same rank";
LABEL_250:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v147);
  }
  if (*(_QWORD *)(a1 + 312) == *(_QWORD *)(a1 + 304)
    || *(_QWORD *)(a1 + 336) == *(_QWORD *)(a1 + 328)
    || *(_QWORD *)(a1 + 360) == *(_QWORD *)(a1 + 352))
  {
    if (*(char *)(a1 + 303) < 0)
    {
      v10 = *(char **)(a1 + 280);
      v9 = *(_QWORD *)(a1 + 288);
    }
    else
    {
      v9 = *(unsigned __int8 *)(a1 + 303);
      v10 = (char *)(a1 + 280);
    }
    if (v9 < 2)
      goto LABEL_14;
    v11 = &v10[v9];
    v12 = v10;
    while (1)
    {
      v13 = (char *)memchr(v12, 45, v9 - 1);
      if (!v13)
        goto LABEL_14;
      if (*(_WORD *)v13 == 15917)
        break;
      v12 = v13 + 1;
      v9 = v11 - (_BYTE *)v12;
      if (v11 - (_BYTE *)v12 < 2)
        goto LABEL_14;
    }
    if (v13 == v11 || (v14 = v13 - v10, v14 == -1))
LABEL_14:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_einsum_kernel: invalid equation");
    std::string::basic_string(&__str, (const std::string *)(a1 + 280), 0, v14, (std::allocator<char> *)&v155);
    std::string::basic_string(&v155, (const std::string *)(a1 + 280), v14 + 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v154);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (size < 1)
      goto LABEL_28;
    v17 = (char *)p_str + size;
    v18 = p_str;
    while (1)
    {
      v19 = memchr(v18, 44, size);
      if (!v19)
        goto LABEL_28;
      if (*v19 == 44)
        break;
      v18 = (std::string *)(v19 + 1);
      size = v17 - (_BYTE *)v18;
      if (v17 - (_BYTE *)v18 < 1)
        goto LABEL_28;
    }
    if (v19 == v17 || (v20 = v19 - (_BYTE *)p_str, v20 == -1))
LABEL_28:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_einsum_kernel: invalid equation");
    std::string::basic_string(&v154, &__str, 0, v20, (std::allocator<char> *)&v153);
    std::string::basic_string(&v153, &__str, v20 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v151);
    v21 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
    if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = v154.__r_.__value_.__l.__size_;
    if (v21 != v8)
      goto LABEL_247;
    v22 = HIBYTE(v153.__r_.__value_.__r.__words[2]);
    if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = v153.__r_.__value_.__l.__size_;
    if (v22 != v8)
      goto LABEL_247;
    v23 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
    if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v23 = v155.__r_.__value_.__l.__size_;
    if (v23 != v8)
LABEL_247:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_einsum_kernel: invalid equation, inputs and output not of the same rank");
    std::vector<int>::resize((std::vector<int> *)(a1 + 304), v8);
    std::vector<int>::resize((std::vector<int> *)(a1 + 328), v8);
    std::vector<int>::resize((std::vector<int> *)(a1 + 352), v8);
    v152[0] = 0;
    v152[1] = 0;
    v151 = (uint64_t *)v152;
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v150, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
    else
      v150 = v154;
    if (*(_QWORD *)(a1 + 312) == *(_QWORD *)(a1 + 304))
    {
      v25 = 0;
    }
    else
    {
      v24 = 0;
      v25 = 0;
      do
      {
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = &v150;
        else
          v26 = (std::string *)v150.__r_.__value_.__r.__words[0];
        v27 = v26->__r_.__value_.__s.__data_[v24];
        v158 = v26->__r_.__value_.__s.__data_[v24];
        v28 = v152[0];
        if (!v152[0])
          goto LABEL_57;
        v29 = v152;
        do
        {
          v30 = v28;
          v31 = v29;
          v32 = *((char *)v28 + 28);
          v33 = v28 + 1;
          if (v32 >= v27)
          {
            v33 = v30;
            v29 = (_QWORD **)v30;
          }
          v28 = (_QWORD *)*v33;
        }
        while (v28);
        if (v29 == v152)
          goto LABEL_57;
        if (v32 < v27)
          v30 = v31;
        if (v27 < *((char *)v30 + 28))
LABEL_57:
          *((_DWORD *)std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(&v151, v27, &v158)+ 8) = v25++;
        v34 = std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(&v151, v27, &v158);
        v35 = *(_QWORD *)(a1 + 304);
        *(_DWORD *)(v35 + 4 * v24++) = *((_DWORD *)v34 + 8);
      }
      while (v24 < (*(_QWORD *)(a1 + 312) - v35) >> 2);
    }
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v150.__r_.__value_.__l.__data_);
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v149, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
    else
      v149 = v153;
    if (*(_QWORD *)(a1 + 336) != *(_QWORD *)(a1 + 328))
    {
      v36 = 0;
      do
      {
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v149;
        else
          v37 = (std::string *)v149.__r_.__value_.__r.__words[0];
        v38 = v37->__r_.__value_.__s.__data_[v36];
        v158 = v37->__r_.__value_.__s.__data_[v36];
        v39 = v152[0];
        if (!v152[0])
          goto LABEL_80;
        v40 = v152;
        do
        {
          v41 = v39;
          v42 = v40;
          v43 = *((char *)v39 + 28);
          v44 = v39 + 1;
          if (v43 >= v38)
          {
            v44 = v41;
            v40 = (_QWORD **)v41;
          }
          v39 = (_QWORD *)*v44;
        }
        while (v39);
        if (v40 == v152)
          goto LABEL_80;
        if (v43 < v38)
          v41 = v42;
        if (v38 < *((char *)v41 + 28))
LABEL_80:
          *((_DWORD *)std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(&v151, v38, &v158)+ 8) = v25++;
        v45 = std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(&v151, v38, &v158);
        v46 = *(_QWORD *)(a1 + 328);
        *(_DWORD *)(v46 + 4 * v36++) = *((_DWORD *)v45 + 8);
      }
      while (v36 < (*(_QWORD *)(a1 + 336) - v46) >> 2);
    }
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v149.__r_.__value_.__l.__data_);
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
    else
      __p = v155;
    if (*(_QWORD *)(a1 + 360) != *(_QWORD *)(a1 + 352))
    {
      v47 = 0;
      do
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v49 = p_p->__r_.__value_.__s.__data_[v47];
        v158 = p_p->__r_.__value_.__s.__data_[v47];
        v50 = v152[0];
        if (!v152[0])
          goto LABEL_101;
        v51 = v152;
        do
        {
          v52 = v50;
          v53 = v51;
          v54 = *((char *)v50 + 28);
          v55 = v50 + 1;
          if (v54 >= v49)
          {
            v55 = v52;
            v51 = (_QWORD **)v52;
          }
          v50 = (_QWORD *)*v55;
        }
        while (v50);
        if (v51 == v152)
          goto LABEL_101;
        if (v54 < v49)
          v52 = v53;
        if (v49 < *((char *)v52 + 28))
LABEL_101:
          *((_DWORD *)std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(&v151, v49, &v158)+ 8) = v25++;
        v56 = std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(&v151, v49, &v158);
        v57 = *(_QWORD *)(a1 + 352);
        *(_DWORD *)(v57 + 4 * v47++) = *((_DWORD *)v56 + 8);
      }
      while (v47 < (*(_QWORD *)(a1 + 360) - v57) >> 2);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::__tree<int>::destroy(v152[0]);
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v153.__r_.__value_.__l.__data_);
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v154.__r_.__value_.__l.__data_);
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v58 = operator new(0x10uLL);
  v59 = v58;
  *v58 = xmmword_191A761E0;
  v60 = *(uint64_t **)(a1 + 304);
  if (*(_QWORD *)(a1 + 312) - (_QWORD)v60 != 16)
    goto LABEL_152;
  v62 = *v60;
  v61 = v60[1];
  if (v62 != *(_QWORD *)v58 || v61 != *((_QWORD *)v58 + 1))
    goto LABEL_152;
  v64 = operator new(0x10uLL);
  v65 = v64;
  *v64 = xmmword_191A937B0;
  v66 = *(uint64_t **)(a1 + 328);
  if (*(_QWORD *)(a1 + 336) - (_QWORD)v66 != 16
    || ((v68 = *v66, v67 = v66[1], v68 == *(_QWORD *)v64) ? (v69 = v67 == *((_QWORD *)v64 + 1)) : (v69 = 0), !v69))
  {
LABEL_151:
    operator delete(v65);
LABEL_152:
    operator delete(v59);
    goto LABEL_153;
  }
  v70 = operator new(0x10uLL);
  *(_OWORD *)v70 = xmmword_191A937C0;
  v71 = *(uint64_t **)(a1 + 352);
  if (*(_QWORD *)(a1 + 360) - (_QWORD)v71 != 16)
  {
    operator delete(v70);
    goto LABEL_151;
  }
  v73 = *v71;
  v72 = v71[1];
  v75 = v73 != *v70 || v72 != v70[1];
  operator delete(v70);
  operator delete(v65);
  operator delete(v59);
  if (v75)
  {
LABEL_153:
    v86 = operator new(0xCuLL);
    v87 = v86;
    *v86 = 0x100000000;
    *((_DWORD *)v86 + 2) = 2;
    v88 = *(uint64_t **)(a1 + 304);
    if (*(_QWORD *)(a1 + 312) - (_QWORD)v88 != 12)
      goto LABEL_184;
    v89 = *v88;
    v90 = *((unsigned int *)v88 + 2);
    if (v89 != *v86 || v90 != *((_DWORD *)v86 + 2))
      goto LABEL_184;
    v92 = (unsigned int *)operator new(0xCuLL);
    v93 = v92;
    *(_QWORD *)v92 = 0x100000002;
    v92[2] = 3;
    v94 = *(uint64_t **)(a1 + 328);
    if (*(_QWORD *)(a1 + 336) - (_QWORD)v94 != 12
      || ((v95 = *v94, v96 = *((unsigned int *)v94 + 2), v95 == *(_QWORD *)v92) ? (v97 = v96 == v92[2]) : (v97 = 0), !v97))
    {
LABEL_183:
      operator delete(v93);
LABEL_184:
      operator delete(v87);
      goto LABEL_185;
    }
    v98 = operator new(0xCuLL);
    *(_QWORD *)v98 = 0x100000000;
    v98[2] = 3;
    v99 = *(uint64_t **)(a1 + 352);
    if (*(_QWORD *)(a1 + 360) - (_QWORD)v99 != 12)
    {
      operator delete(v98);
      goto LABEL_183;
    }
    v100 = *v99;
    v101 = *((unsigned int *)v99 + 2);
    v103 = v100 != *(_QWORD *)v98 || v101 != v98[2];
    operator delete(v98);
    operator delete(v93);
    operator delete(v87);
    if (v103)
    {
LABEL_185:
      v109 = operator new(0x14uLL);
      v110 = v109;
      *((_DWORD *)v109 + 4) = 4;
      *v109 = xmmword_191AACBA4;
      v111 = *(uint64_t **)(a1 + 304);
      if (*(_QWORD *)(a1 + 312) - (_QWORD)v111 != 20)
        goto LABEL_253;
      v112 = *v111;
      v113 = v111[1];
      v114 = *((unsigned int *)v111 + 4);
      v115 = v112 == *(_QWORD *)v109 && v113 == *((_QWORD *)v109 + 1);
      if (!v115 || v114 != *((_DWORD *)v109 + 4))
        goto LABEL_253;
      v117 = (unsigned int *)operator new(0x14uLL);
      v118 = v117;
      v117[4] = 5;
      *(_OWORD *)v117 = xmmword_191AACBB8;
      v119 = *(uint64_t **)(a1 + 328);
      if (*(_QWORD *)(a1 + 336) - (_QWORD)v119 != 20
        || ((v120 = *v119, v121 = v119[1], v122 = *((unsigned int *)v119 + 4), v120 == *(_QWORD *)v117)
          ? (v123 = v121 == *((_QWORD *)v117 + 1))
          : (v123 = 0),
            v123 ? (v124 = v122 == v117[4]) : (v124 = 0),
            !v124))
      {
LABEL_252:
        operator delete(v118);
LABEL_253:
        operator delete(v110);
        goto LABEL_254;
      }
      v125 = operator new(0x14uLL);
      v125[4] = 5;
      *(_OWORD *)v125 = xmmword_191AACBCC;
      v126 = *(uint64_t **)(a1 + 352);
      if (*(_QWORD *)(a1 + 360) - (_QWORD)v126 != 20)
      {
        operator delete(v125);
        goto LABEL_252;
      }
      v127 = *v126;
      v128 = v126[1];
      v129 = *((unsigned int *)v126 + 4);
      v132 = v127 != *(_QWORD *)v125 || v128 != *((_QWORD *)v125 + 1) || v129 != v125[4];
      operator delete(v125);
      operator delete(v118);
      operator delete(v110);
      if (v132)
LABEL_254:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_einsum_kernel: invalid or unsupported equation");
      v133 = *v157.__begin_;
      v134 = *v156.__begin_;
      if (*v157.__begin_ == *v156.__begin_
        || (v133 <= v134 ? (v135 = *v156.__begin_) : (v135 = *v157.__begin_), v134 * v133 == v135))
      {
        v136 = v157.__begin_[1];
        v137 = v156.__begin_[1];
        if (v136 == v137 || (v136 <= v137 ? (v138 = v156.__begin_[1]) : (v138 = v157.__begin_[1]), v137 * v136 == v138))
        {
          v139 = v157.__begin_[3];
          v140 = v156.__begin_[3];
          if (v139 == v140
            || (v139 <= v140 ? (v141 = v156.__begin_[3]) : (v141 = v157.__begin_[3]), v140 * v139 == v141))
          {
            if (v157.__begin_[4] == v156.__begin_[2])
            {
              if (v133 <= v134)
                v133 = *v156.__begin_;
              v142 = v157.__begin_[2];
              v143 = v156.__begin_[4];
              if (v136 <= v137)
                v144 = v156.__begin_[1];
              else
                v144 = v157.__begin_[1];
              if (v139 <= v140)
                v145 = v156.__begin_[3];
              else
                v145 = v157.__begin_[3];
              v155.__r_.__value_.__r.__words[0] = __PAIR64__(v144, v133);
              v155.__r_.__value_.__l.__size_ = __PAIR64__(v145, v142);
              v155.__r_.__value_.__r.__words[2] = v143 | 0x500000000;
              Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v155, 0, (uint64_t)&__str);
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              v154.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
              v154.__r_.__value_.__s.__data_[8] = 0;
              v146 = (char *)operator new(0x40uLL);
              *a3 = v146;
              a3[1] = v146;
              a3[2] = v146 + 64;
              v85 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)&__str, &v162, (uint64_t)v146);
              goto LABEL_239;
            }
          }
        }
      }
      goto LABEL_246;
    }
    v104 = v157.__begin_[1];
    v105 = v156.__begin_[1];
    if (v104 == v105 || (v104 <= v105 ? (v106 = v156.__begin_[1]) : (v106 = v157.__begin_[1]), v105 * v104 == v106))
    {
      if (v157.__begin_[2] == *v156.__begin_)
      {
        if (v104 <= v105)
          v104 = v156.__begin_[1];
        v107 = v156.__begin_[2];
        LODWORD(v155.__r_.__value_.__l.__data_) = *v157.__begin_;
        *(_OWORD *)((char *)v155.__r_.__value_.__r.__words + 4) = __PAIR64__(v107, v104);
        HIDWORD(v155.__r_.__value_.__r.__words[2]) = 3;
        Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v155, 0, (uint64_t)&__str);
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        v154.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
        v154.__r_.__value_.__s.__data_[8] = 0;
        v108 = (char *)operator new(0x40uLL);
        *a3 = v108;
        a3[1] = v108;
        a3[2] = v108 + 64;
        v85 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)&__str, &v162, (uint64_t)v108);
        goto LABEL_239;
      }
    }
LABEL_246:
    v147 = "generic_einsum_kernel: invalid input dims";
    goto LABEL_250;
  }
  v76 = *v157.__begin_;
  v77 = *v156.__begin_;
  if (*v157.__begin_ != *v156.__begin_)
  {
    v78 = v76 <= v77 ? *v156.__begin_ : *v157.__begin_;
    if (v77 * v76 != v78)
      goto LABEL_246;
  }
  v79 = v157.__begin_[2];
  v80 = v156.__begin_[2];
  if (v79 != v80)
  {
    v81 = v79 <= v80 ? v156.__begin_[2] : v157.__begin_[2];
    if (v80 * v79 != v81)
      goto LABEL_246;
  }
  if (v157.__begin_[3] != v156.__begin_[1])
    goto LABEL_246;
  if (v76 <= v77)
    v76 = *v156.__begin_;
  if (v79 <= v80)
    v82 = v156.__begin_[2];
  else
    v82 = v157.__begin_[2];
  v83 = v156.__begin_[3];
  v155.__r_.__value_.__r.__words[0] = __PAIR64__(v157.__begin_[1], v76);
  v155.__r_.__value_.__l.__size_ = __PAIR64__(v83, v82);
  v155.__r_.__value_.__r.__words[2] = 0x400000000;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v155, 0, (uint64_t)&__str);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v154.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v154.__r_.__value_.__s.__data_[8] = 0;
  v84 = (char *)operator new(0x40uLL);
  *a3 = v84;
  a3[1] = v84;
  a3[2] = v84 + 64;
  v85 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)&__str, &v162, (uint64_t)v84);
LABEL_239:
  a3[1] = v85;
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  if (v156.__begin_)
  {
    v156.__end_ = v156.__begin_;
    operator delete(v156.__begin_);
  }
  if (v157.__begin_)
  {
    v157.__end_ = v157.__begin_;
    operator delete(v157.__begin_);
  }
}

void sub_19169F6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *__p,uint64_t a52)
{
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v56;
  void *v57;

  *(_QWORD *)(v52 + 8) = v53;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  v56 = *(void **)(v54 - 128);
  if (v56)
  {
    *(_QWORD *)(v54 - 120) = v56;
    operator delete(v56);
  }
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  v57 = *(void **)(v54 - 200);
  if (v57)
  {
    *(_QWORD *)(v54 - 192) = v57;
    operator delete(v57);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(uint64_t **a1, char a2, _BYTE *a3)
{
  char *v5;
  uint64_t **v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = v5[28];
        if (v8 <= a2)
          break;
        v5 = (char *)*v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (char *)v7[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = v7;
    v7 = operator new(0x28uLL);
    *((_BYTE *)v7 + 28) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = v7;
    v10 = (uint64_t *)**a1;
    v11 = v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t Espresso::generic_furthest_point_sampling_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[5];

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 64)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_furthest_point_sampling_kernel: Needs 1 bottom blob.");
  v5 = v4[5];
  if ((v5 - 3) >= 3 && (_DWORD)v5 != -1)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("generic_furthest_point_sampling_kernel: Input blob must be rank 3, 4, or 5. Got %d.", v5);
  if (v4[1] != 1 || v4[3] != 1 || v4[4] != 1)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_furthest_point_sampling_kernel: Input blob h, n, and seq must be 1.");
  if (*(int *)(a1 + 288) <= -3)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_furthest_point_sampling_kernel: Invalid seed. Select -2 for no randomness, -1 for default seed, or 0 or greater for a layer-specific seed.");
  v7 = *(_DWORD *)(a1 + 280);
  if (v7 > *v4)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_furthest_point_sampling_kernel: Cannot request more centroids than input tensor holds");
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v12[4] = a3 + 2;
  v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(1uLL);
  v12[0] = v8;
  v12[1] = v8;
  v12[3] = &v8[64 * v9];
  *(_DWORD *)v8 = v7;
  *(_OWORD *)(v8 + 4) = xmmword_191A937D0;
  *((_DWORD *)v8 + 5) = -1;
  *((_QWORD *)v8 + 7) = 0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  v12[2] = v8 + 64;
  std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, v12);
  v10 = a3[1];
  result = std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v12);
  a3[1] = v10;
  return result;
}

void sub_19169FA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::generic_degamma_kernel::top_shapes_for_bottom_shapes@<X0>(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a2, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 6);
}

uint64_t Espresso::generic_tunneled_ane_op_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int32x4_t v17;
  uint64_t v18;
  int v19;
  int32x4_t v20;
  int v21;
  int8x16_t v22;
  int8x16_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  std::string::size_type v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v40;
  std::string::const_iterator v41;
  std::string *v42;
  std::string::size_type size;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  std::string::const_iterator v58;
  std::string *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  std::string::size_type v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  std::string::size_type v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  std::string::size_type v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  const char *v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  int __val[4];
  uint64_t __vala;
  std::string v100;
  std::string v101;
  std::string v102;
  std::string v103;
  std::string v104;
  std::string v105;
  std::string v106;
  std::string v107;
  std::string v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string v112;
  std::string v113;
  std::string v114;
  std::string v115;
  char *v116;
  uint64_t *v117;

  v4 = *(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304);
  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel must have top shapes");
  v6 = *(_QWORD *)(a1 + 280);
  v7 = *(_QWORD *)(a1 + 288) - v6;
  if (!v7 || (v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3), v10 = *a2, v9 = a2[1], v8 != (v9 - *a2) >> 6))
    Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel must have bottom shapes with size matching bottom shapes in context.");
  if (v9 != v10)
  {
    v11 = 0;
    if (v8 <= 1)
      v8 = 1;
    v12 = (int *)(v6 + 16);
    v13 = (_DWORD *)(v10 + 8);
    do
    {
      if (*v12 != *(v13 - 2)
        || *(v12 - 1) != *(v13 - 1)
        || *(v12 - 2) != *v13
        || *(v12 - 3) != v13[1]
        || *(v12 - 4) != v13[2])
      {
        v40 = *(_QWORD *)(a1 + 280);
        __vala = v11;
        std::to_string(&v105, *(v12 - 4));
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v105;
        else
          v41.__i_ = (std::__wrap_iter<const char *>::iterator_type)v105.__r_.__value_.__r.__words[0];
        std::string::insert(&v105, v41, 40);
        v106 = v105;
        memset(&v105, 0, sizeof(v105));
        std::string::push_back(&v106, 44);
        v107 = v106;
        memset(&v106, 0, sizeof(v106));
        std::to_string(&v104, *(_DWORD *)(v40 + 24 * __vala + 4));
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &v104;
        else
          v42 = (std::string *)v104.__r_.__value_.__r.__words[0];
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        else
          size = v104.__r_.__value_.__l.__size_;
        v44 = std::string::append(&v107, (const std::string::value_type *)v42, size);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v108.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v108, 44);
        v109 = v108;
        memset(&v108, 0, sizeof(v108));
        std::to_string(&v103, *(_DWORD *)(v40 + 24 * __vala + 8));
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v103;
        else
          v46 = (std::string *)v103.__r_.__value_.__r.__words[0];
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
        else
          v47 = v103.__r_.__value_.__l.__size_;
        v48 = std::string::append(&v109, (const std::string::value_type *)v46, v47);
        v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v110.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v110, 44);
        v111 = v110;
        memset(&v110, 0, sizeof(v110));
        std::to_string(&v102, *(_DWORD *)(v40 + 24 * __vala + 12));
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v50 = &v102;
        else
          v50 = (std::string *)v102.__r_.__value_.__r.__words[0];
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
        else
          v51 = v102.__r_.__value_.__l.__size_;
        v52 = std::string::append(&v111, (const std::string::value_type *)v50, v51);
        v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        v112.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v112, 44);
        v113 = v112;
        memset(&v112, 0, sizeof(v112));
        std::to_string(&v101, *v12);
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = &v101;
        else
          v54 = (std::string *)v101.__r_.__value_.__r.__words[0];
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
        else
          v55 = v101.__r_.__value_.__l.__size_;
        v56 = std::string::append(&v113, (const std::string::value_type *)v54, v55);
        v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v114.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v114, 41);
        v115 = v114;
        memset(&v114, 0, sizeof(v114));
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v101.__r_.__value_.__l.__data_);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v113.__r_.__value_.__l.__data_);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v102.__r_.__value_.__l.__data_);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v109.__r_.__value_.__l.__data_);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v108.__r_.__value_.__l.__data_);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        std::to_string(&v104, *(_DWORD *)(*a2 + (__vala << 6) + 16));
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v104;
        else
          v58.__i_ = (std::__wrap_iter<const char *>::iterator_type)v104.__r_.__value_.__r.__words[0];
        std::string::insert(&v104, v58, 40);
        v105 = v104;
        memset(&v104, 0, sizeof(v104));
        std::string::push_back(&v105, 44);
        v106 = v105;
        memset(&v105, 0, sizeof(v105));
        std::to_string(&v103, *(_DWORD *)(*a2 + (__vala << 6) + 12));
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = &v103;
        else
          v59 = (std::string *)v103.__r_.__value_.__r.__words[0];
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v60 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
        else
          v60 = v103.__r_.__value_.__l.__size_;
        v61 = std::string::append(&v106, (const std::string::value_type *)v59, v60);
        v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v107.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v107, 44);
        v108 = v107;
        memset(&v107, 0, sizeof(v107));
        std::to_string(&v102, *(_DWORD *)(*a2 + (__vala << 6) + 8));
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = &v102;
        else
          v63 = (std::string *)v102.__r_.__value_.__r.__words[0];
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v64 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
        else
          v64 = v102.__r_.__value_.__l.__size_;
        v65 = std::string::append(&v108, (const std::string::value_type *)v63, v64);
        v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        v109.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v109, 44);
        v110 = v109;
        memset(&v109, 0, sizeof(v109));
        std::to_string(&v101, *(_DWORD *)(*a2 + (__vala << 6) + 4));
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = &v101;
        else
          v67 = (std::string *)v101.__r_.__value_.__r.__words[0];
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
        else
          v68 = v101.__r_.__value_.__l.__size_;
        v69 = std::string::append(&v110, (const std::string::value_type *)v67, v68);
        v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        v111.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v111, 44);
        v112 = v111;
        memset(&v111, 0, sizeof(v111));
        std::to_string(&v100, *(_DWORD *)(*a2 + (__vala << 6)));
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v71 = &v100;
        else
          v71 = (std::string *)v100.__r_.__value_.__r.__words[0];
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v72 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
        else
          v72 = v100.__r_.__value_.__l.__size_;
        v73 = std::string::append(&v112, (const std::string::value_type *)v71, v72);
        v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v113.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v113, 41);
        v114 = v113;
        memset(&v113, 0, sizeof(v113));
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v100.__r_.__value_.__l.__data_);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v101.__r_.__value_.__l.__data_);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v109.__r_.__value_.__l.__data_);
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v102.__r_.__value_.__l.__data_);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v108.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        std::to_string(&v108, __vala);
        v75 = std::string::insert(&v108, 0, "tunneled_ane_op_kernel has inconsistent bottom shape at index ");
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v109.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        v77 = std::string::append(&v109, " actual: ");
        v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v110.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v79 = &v114;
        else
          v79 = (std::string *)v114.__r_.__value_.__r.__words[0];
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v80 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
        else
          v80 = v114.__r_.__value_.__l.__size_;
        v81 = std::string::append(&v110, (const std::string::value_type *)v79, v80);
        v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
        v111.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v82;
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        v83 = std::string::append(&v111, " declared: ");
        v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
        v112.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v84;
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v85 = &v115;
        else
          v85 = (std::string *)v115.__r_.__value_.__r.__words[0];
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v86 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
        else
          v86 = v115.__r_.__value_.__l.__size_;
        v87 = std::string::append(&v112, (const std::string::value_type *)v85, v86);
        v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        v113.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v88;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v89 = &v113;
        else
          v89 = (std::string *)v113.__r_.__value_.__r.__words[0];
        Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v89);
      }
      ++v11;
      v12 += 6;
      v13 += 16;
    }
    while (v8 != v11);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<Espresso::layer_shape>::reserve(a3, 0xAAAAAAAAAAAAAAABLL * (v4 >> 3));
  v14 = *(_QWORD *)(a1 + 304);
  if (*(_QWORD *)(a1 + 312) != v14)
  {
    v15 = 0;
    v16 = 0;
    v17.i64[0] = 0x100000001;
    v17.i64[1] = 0x100000001;
    do
    {
      v18 = v14 + v15;
      v19 = *(_DWORD *)(v18 + 20);
      if ((v19 - 6) <= 0xFFFFFFFA)
      {
        std::to_string(&v114, v19);
        v90 = std::string::insert(&v114, 0, "tunneled_ane_op_kernel: Unsupported top rank ");
        v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        v115.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v92 = &v115;
        else
          v92 = (std::string *)v115.__r_.__value_.__r.__words[0];
        Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v92);
      }
      v20 = *(int32x4_t *)(v18 + 4);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v17, v20))) & 1) != 0 || (v21 = *(_DWORD *)v18, *(int *)v18 <= 0))
        Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel: Unsupported non positive dimension.");
      v22 = (int8x16_t)vrev64q_s32(v20);
      v23 = vextq_s8(v22, v22, 8uLL);
      v24 = a3[1];
      v25 = a3[2];
      if (v24 >= v25)
      {
        *(int8x16_t *)__val = v23;
        v27 = (uint64_t)(v24 - *a3) >> 6;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 58)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v29 = v25 - *a3;
        if (v29 >> 5 > v28)
          v28 = v29 >> 5;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFC0)
          v30 = 0x3FFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        v117 = a3 + 2;
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v30);
        v32 = (std::string::size_type)&v31[64 * v27];
        v115.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        v115.__r_.__value_.__l.__size_ = v32;
        v116 = &v31[64 * v33];
        *(_OWORD *)v32 = *(_OWORD *)__val;
        *(_DWORD *)(v32 + 16) = v21;
        *(_DWORD *)(v32 + 20) = v19;
        *(_OWORD *)(v32 + 24) = 0u;
        *(_OWORD *)(v32 + 40) = 0u;
        *(_QWORD *)(v32 + 56) = 0;
        v115.__r_.__value_.__r.__words[2] = v32 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v115);
        v26 = a3[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v115);
        v17.i64[0] = 0x100000001;
        v17.i64[1] = 0x100000001;
      }
      else
      {
        *(int8x16_t *)v24 = v23;
        *(_DWORD *)(v24 + 16) = v21;
        *(_DWORD *)(v24 + 20) = v19;
        v26 = v24 + 64;
        *(_OWORD *)(v24 + 24) = 0u;
        *(_OWORD *)(v24 + 40) = 0u;
        *(_QWORD *)(v24 + 56) = 0;
        a3[1] = v24 + 64;
      }
      a3[1] = v26;
      v14 = *(_QWORD *)(a1 + 304);
      ++v16;
      v15 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 312) - v14) >> 3) > v16);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 3) != (a2[1] - *a2) >> 6)
  {
    v93 = "tunneled_ane_op_kernel: Inconsistent name bindings size for inputs.";
    goto LABEL_178;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 496) - *(_QWORD *)(a1 + 488)) >> 3) != (a3[1] - *a3) >> 6)
  {
    v93 = "tunneled_ane_op_kernel: Inconsistent name bindings size for outputs.";
    goto LABEL_178;
  }
  if (*(_QWORD *)(a1 + 424) != *(_QWORD *)(a1 + 416) || *(_QWORD *)(a1 + 448) != *(_QWORD *)(a1 + 440))
  {
    v93 = "tunneled_ane_op_kernel: Custom layouts not yet supported.";
    goto LABEL_178;
  }
  if (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    v93 = "tunneled_ane_op_kernel: Compilation options not yet supported.";
LABEL_178:
    Espresso::throw_exception_selector<Espresso::generic_error>(v93);
  }
  Espresso::validate_foreign_network_storage_blob(a1 + 336);
  v34 = *(_QWORD *)(a1 + 512);
  v35 = *(_QWORD *)(a1 + 520);
  if (v34 != v35)
  {
    v36 = v34 + 24;
    do
    {
      if (*(char *)(v36 - 1) < 0)
      {
        if (!*(_QWORD *)(v36 - 16))
LABEL_170:
          Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel: 'target_file_path' must be set for each weight file");
      }
      else if (!*(_BYTE *)(v36 - 1))
      {
        goto LABEL_170;
      }
      Espresso::validate_foreign_network_storage_blob(v36);
      v37 = v36 + 80;
      v36 += 104;
    }
    while (v37 != v35);
  }
  result = *(unsigned int *)(a1 + 328);
  if ((_DWORD)result != 1)
  {
    std::to_string(&v114, result);
    v94 = std::string::insert(&v114, 0, "tunneled_ane_op_kernel: Unsupported blob format type: ");
    v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    v115.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v96 = &v115;
    else
      v96 = (std::string *)v115.__r_.__value_.__r.__words[0];
    Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v96);
  }
  return result;
}

void sub_1916A06D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a67;
  uint64_t v67;

  if (*(char *)(v67 - 185) < 0)
    operator delete(*(void **)(v67 - 208));
  if (*(char *)(v67 - 217) < 0)
    operator delete(*(void **)(v67 - 240));
  if (a67 < 0)
    operator delete(__p);
  if (a60 < 0)
    operator delete(a55);
  if (a53 < 0)
    operator delete(a48);
  if (a46 < 0)
    operator delete(a41);
  if (*(char *)(v67 - 153) < 0)
    operator delete(*(void **)(v67 - 176));
  if (*(char *)(v67 - 121) < 0)
    operator delete(*(void **)(v67 - 144));
  _Unwind_Resume(a1);
}

uint64_t Espresso::validate_foreign_network_storage_blob(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  const char *v10;
  std::string v11;
  __int128 v12;
  int64_t v13;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result == 1)
  {
    v2 = *(unsigned __int8 *)(result + 55);
    if ((v2 & 0x80u) != 0)
      v2 = *(_QWORD *)(result + 40);
    if (v2)
      goto LABEL_28;
LABEL_18:
    v6 = *(unsigned __int8 *)(result + 79);
    if ((v6 & 0x80u) != 0)
      v6 = *(_QWORD *)(result + 64);
    if (v6)
      Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel: storage is not raw blob-based but blob name is set");
    if (v1 != 2)
    {
      if (v1 != 1)
      {
        std::to_string(&v11, *(_DWORD *)result);
        v8 = std::string::insert(&v11, 0, "tunneled_ane_op_kernel: Unsupported blob storage type: ");
        v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v13 = v8->__r_.__value_.__r.__words[2];
        v12 = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        if (v13 >= 0)
          v10 = (const char *)&v12;
        else
          v10 = (const char *)v12;
        Espresso::throw_exception_selector<Espresso::generic_error>(v10);
      }
      v7 = *(unsigned __int8 *)(result + 31);
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(result + 16);
      if (!v7)
        Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel: file blob has empty path");
    }
    return result;
  }
  v3 = *(unsigned __int8 *)(result + 31);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(result + 16);
  if (v3)
    Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel: storage is not file-based but file path is set");
  if (v1 == 2)
    goto LABEL_18;
  v4 = *(unsigned __int8 *)(result + 55);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(result + 40);
  if (v4)
LABEL_28:
    Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel: storage is not inline but contents are set");
  if (v1 != 3)
    goto LABEL_18;
  v5 = *(unsigned __int8 *)(result + 79);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(result + 64);
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel: raw blob name is empty");
  return result;
}

void sub_1916A0C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *Espresso::generic_tunneled_ane_unit_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  int v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int *v19;
  int v20;
  uint64_t v21;
  int v22;
  int *v23;
  int v24;
  uint64_t v25;
  int v26;
  int *v27;
  int v28;
  uint64_t v29;
  int v30;
  int *v31;
  int v32;
  int v33;
  uint64_t v35;
  int v36;
  int *v37;
  int v38;
  __int128 *v39;
  int v40;
  int v41;
  int *v42;
  int v43;
  int *v44;
  int *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t i;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int v73;
  uint64_t v74;
  unsigned int *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t j;
  int v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  std::string::size_type v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _DWORD *v101;
  int v102;
  BOOL v103;
  int v104;
  const char *v105;
  uint64_t v106;
  int v107;
  BOOL v108;
  int v109;
  std::string *v112;
  const char *v113;
  std::string *v114;
  __int128 v115;
  std::string *v116;
  int *v117;
  std::string::const_iterator v118;
  std::string *v119;
  std::string::size_type v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  std::string::size_type v124;
  std::string *v125;
  __int128 v126;
  std::string *v127;
  std::string::size_type v128;
  std::string *v129;
  __int128 v130;
  std::string *v131;
  std::string::size_type v132;
  std::string *v133;
  __int128 v134;
  std::string::const_iterator v135;
  std::string *v136;
  std::string::size_type v137;
  std::string *v138;
  __int128 v139;
  std::string *v140;
  std::string::size_type v141;
  std::string *v142;
  __int128 v143;
  std::string *v144;
  std::string::size_type v145;
  std::string *v146;
  __int128 v147;
  std::string *v148;
  std::string::size_type v149;
  std::string *v150;
  __int128 v151;
  std::string *v152;
  __int128 v153;
  std::string *v154;
  std::string::size_type v155;
  std::string *v156;
  __int128 v157;
  std::string *v158;
  std::string *v159;
  __int128 v160;
  std::string *v161;
  __int128 v162;
  std::string *v163;
  std::string::size_type size;
  std::string *v165;
  __int128 v166;
  std::string *v167;
  std::string *v168;
  __int128 v169;
  std::string *v170;
  std::string *v171;
  __int128 v172;
  std::string *v173;
  uint64_t *v174;
  uint64_t *v175;
  std::string v176;
  std::string v177;
  std::string v178;
  std::string v179;
  std::string v180;
  std::string v181;
  std::string v182;
  std::string v183;
  std::string v184;
  std::string v185;
  std::string v186;
  std::string v187;
  std::string v188;
  std::string v189;
  std::string v190;
  std::string v191;
  char *v192;
  uint64_t *v193;

  v4 = a3;
  v5 = *(_DWORD *)(a1 + 448);
  if (!v5)
  {
    v7 = *(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304);
    if (!v7)
      Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel must have declared top shapes when using explicit shape propagation");
    v8 = *(_QWORD *)(a1 + 280);
    v9 = *(_QWORD *)(a1 + 288) - v8;
    if (!v9
      || (v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3), v12 = *a2, v11 = a2[1], v10 != ((char *)v11 - (char *)*a2) >> 6))
    {
      Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel must have declared bottom shapes with size matching bottom shapes in context.");
    }
    v13 = *(_QWORD *)(a1 + 328);
    if (v10 != (*(_QWORD *)(a1 + 336) - v13) >> 5)
      Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel must have declared bottom layouts with size matching bottom shapes in context.");
    v14 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
    if (v14 != (uint64_t)(*(_QWORD *)(a1 + 360) - *(_QWORD *)(a1 + 352)) >> 5)
      Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel must have declared top layouts with size matching top shapes in context.");
    v175 = v4;
    if (v11 != v12)
    {
      v15 = 0;
      if (v10 <= 1)
        v16 = 1;
      else
        v16 = v10;
      do
      {
        v17 = v8 + 24 * v15;
        v20 = *(_DWORD *)(v17 + 16);
        v19 = (int *)(v17 + 16);
        v18 = v20;
        if (v20 < 1)
          goto LABEL_148;
        v21 = v8 + 24 * v15;
        v24 = *(_DWORD *)(v21 + 12);
        v23 = (int *)(v21 + 12);
        v22 = v24;
        if (v24 < 1)
          goto LABEL_148;
        v25 = v8 + 24 * v15;
        v28 = *(_DWORD *)(v25 + 8);
        v27 = (int *)(v25 + 8);
        v26 = v28;
        if (v28 < 1)
          goto LABEL_148;
        v29 = v8 + 24 * v15;
        v32 = *(_DWORD *)(v29 + 4);
        v31 = (int *)(v29 + 4);
        v30 = v32;
        v33 = *(_DWORD *)(v8 + 24 * v15);
        if (v32 < 1 || v33 <= 0)
LABEL_148:
          Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel: Unsupported non positive dimension.");
        v35 = v8 + 24 * v15;
        v38 = *(_DWORD *)(v35 + 20);
        v37 = (int *)(v35 + 20);
        v36 = v38;
        if ((v38 - 6) <= 0xFFFFFFFA)
        {
          std::to_string(&v190, v36);
          v114 = std::string::insert(&v190, 0, "tunneled_ane_unit_kernel: Unsupported bottom rank ");
          v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
          v191.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v115;
          v114->__r_.__value_.__l.__size_ = 0;
          v114->__r_.__value_.__r.__words[2] = 0;
          v114->__r_.__value_.__r.__words[0] = 0;
          if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v116 = &v191;
          else
            v116 = (std::string *)v191.__r_.__value_.__r.__words[0];
          Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v116);
        }
        v39 = &v12[4 * v15];
        v40 = *((_DWORD *)v39 + 4);
        v41 = *((_DWORD *)v39 + 5);
        v42 = (int *)(v39 + 1);
        if (v40 == 1)
          v43 = 4;
        else
          v43 = 5;
        if (v41 != -1)
          v43 = *((_DWORD *)v39 + 5);
        if (v36 != v43)
        {
          std::to_string(&v188, v41);
          v159 = std::string::insert(&v188, 0, "tunneled_ane_unit_kernel: Rank. Actual bottom rank: ");
          v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
          v189.__r_.__value_.__r.__words[2] = v159->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v160;
          v159->__r_.__value_.__l.__size_ = 0;
          v159->__r_.__value_.__r.__words[2] = 0;
          v159->__r_.__value_.__r.__words[0] = 0;
          v161 = std::string::append(&v189, " declared bottom rank: ");
          v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
          v190.__r_.__value_.__r.__words[2] = v161->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v162;
          v161->__r_.__value_.__l.__size_ = 0;
          v161->__r_.__value_.__r.__words[2] = 0;
          v161->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v187, *v37);
          if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v163 = &v187;
          else
            v163 = (std::string *)v187.__r_.__value_.__r.__words[0];
          if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v187.__r_.__value_.__r.__words[2]);
          else
            size = v187.__r_.__value_.__l.__size_;
          v165 = std::string::append(&v190, (const std::string::value_type *)v163, size);
          v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
          v191.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v166;
          v165->__r_.__value_.__l.__size_ = 0;
          v165->__r_.__value_.__r.__words[2] = 0;
          v165->__r_.__value_.__r.__words[0] = 0;
          if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v167 = &v191;
          else
            v167 = (std::string *)v191.__r_.__value_.__r.__words[0];
          Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v167);
        }
        v44 = (int *)&v12[4 * v15];
        v47 = *((_DWORD *)v39 + 1);
        v45 = (int *)v39 + 1;
        v46 = v47;
        if (v18 != *v44 || v22 != v46 || v26 != v45[1] || v30 != v45[2] || v33 != v40)
        {
          v117 = v42;
          std::to_string(&v181, v33);
          if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v118.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v181;
          else
            v118.__i_ = (std::__wrap_iter<const char *>::iterator_type)v181.__r_.__value_.__r.__words[0];
          std::string::insert(&v181, v118, 40);
          v182 = v181;
          memset(&v181, 0, sizeof(v181));
          std::string::push_back(&v182, 44);
          v183 = v182;
          memset(&v182, 0, sizeof(v182));
          std::to_string(&v180, *v31);
          if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v119 = &v180;
          else
            v119 = (std::string *)v180.__r_.__value_.__r.__words[0];
          if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v120 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
          else
            v120 = v180.__r_.__value_.__l.__size_;
          v121 = std::string::append(&v183, (const std::string::value_type *)v119, v120);
          v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
          v184.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v122;
          v121->__r_.__value_.__l.__size_ = 0;
          v121->__r_.__value_.__r.__words[2] = 0;
          v121->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v184, 44);
          v185 = v184;
          memset(&v184, 0, sizeof(v184));
          std::to_string(&v179, *v27);
          if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v123 = &v179;
          else
            v123 = (std::string *)v179.__r_.__value_.__r.__words[0];
          if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v124 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
          else
            v124 = v179.__r_.__value_.__l.__size_;
          v125 = std::string::append(&v185, (const std::string::value_type *)v123, v124);
          v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
          v186.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v126;
          v125->__r_.__value_.__l.__size_ = 0;
          v125->__r_.__value_.__r.__words[2] = 0;
          v125->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v186, 44);
          v187 = v186;
          memset(&v186, 0, sizeof(v186));
          std::to_string(&v178, *v23);
          if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v127 = &v178;
          else
            v127 = (std::string *)v178.__r_.__value_.__r.__words[0];
          if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v128 = HIBYTE(v178.__r_.__value_.__r.__words[2]);
          else
            v128 = v178.__r_.__value_.__l.__size_;
          v129 = std::string::append(&v187, (const std::string::value_type *)v127, v128);
          v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
          v188.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v130;
          v129->__r_.__value_.__l.__size_ = 0;
          v129->__r_.__value_.__r.__words[2] = 0;
          v129->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v188, 44);
          v189 = v188;
          memset(&v188, 0, sizeof(v188));
          std::to_string(&v177, *v19);
          if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v131 = &v177;
          else
            v131 = (std::string *)v177.__r_.__value_.__r.__words[0];
          if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v132 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
          else
            v132 = v177.__r_.__value_.__l.__size_;
          v133 = std::string::append(&v189, (const std::string::value_type *)v131, v132);
          v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
          v190.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v134;
          v133->__r_.__value_.__l.__size_ = 0;
          v133->__r_.__value_.__r.__words[2] = 0;
          v133->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v190, 41);
          v191 = v190;
          memset(&v190, 0, sizeof(v190));
          if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v177.__r_.__value_.__l.__data_);
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v189.__r_.__value_.__l.__data_);
          if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v188.__r_.__value_.__l.__data_);
          if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v178.__r_.__value_.__l.__data_);
          if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v187.__r_.__value_.__l.__data_);
          if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v186.__r_.__value_.__l.__data_);
          if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v179.__r_.__value_.__l.__data_);
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v185.__r_.__value_.__l.__data_);
          if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v184.__r_.__value_.__l.__data_);
          if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v180.__r_.__value_.__l.__data_);
          if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v183.__r_.__value_.__l.__data_);
          if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v182.__r_.__value_.__l.__data_);
          if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v181.__r_.__value_.__l.__data_);
          std::to_string(&v180, *v117);
          if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v135.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v180;
          else
            v135.__i_ = (std::__wrap_iter<const char *>::iterator_type)v180.__r_.__value_.__r.__words[0];
          std::string::insert(&v180, v135, 40);
          v181 = v180;
          memset(&v180, 0, sizeof(v180));
          std::string::push_back(&v181, 44);
          v182 = v181;
          memset(&v181, 0, sizeof(v181));
          std::to_string(&v179, v45[2]);
          if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v136 = &v179;
          else
            v136 = (std::string *)v179.__r_.__value_.__r.__words[0];
          if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v137 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
          else
            v137 = v179.__r_.__value_.__l.__size_;
          v138 = std::string::append(&v182, (const std::string::value_type *)v136, v137);
          v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
          v183.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v183.__r_.__value_.__l.__data_ = v139;
          v138->__r_.__value_.__l.__size_ = 0;
          v138->__r_.__value_.__r.__words[2] = 0;
          v138->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v183, 44);
          v184 = v183;
          memset(&v183, 0, sizeof(v183));
          std::to_string(&v178, v45[1]);
          if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v140 = &v178;
          else
            v140 = (std::string *)v178.__r_.__value_.__r.__words[0];
          if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v141 = HIBYTE(v178.__r_.__value_.__r.__words[2]);
          else
            v141 = v178.__r_.__value_.__l.__size_;
          v142 = std::string::append(&v184, (const std::string::value_type *)v140, v141);
          v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
          v185.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v143;
          v142->__r_.__value_.__l.__size_ = 0;
          v142->__r_.__value_.__r.__words[2] = 0;
          v142->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v185, 44);
          v186 = v185;
          memset(&v185, 0, sizeof(v185));
          std::to_string(&v177, *v45);
          if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v144 = &v177;
          else
            v144 = (std::string *)v177.__r_.__value_.__r.__words[0];
          if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v145 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
          else
            v145 = v177.__r_.__value_.__l.__size_;
          v146 = std::string::append(&v186, (const std::string::value_type *)v144, v145);
          v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
          v187.__r_.__value_.__r.__words[2] = v146->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v147;
          v146->__r_.__value_.__l.__size_ = 0;
          v146->__r_.__value_.__r.__words[2] = 0;
          v146->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v187, 44);
          v188 = v187;
          memset(&v187, 0, sizeof(v187));
          std::to_string(&v176, *v44);
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v148 = &v176;
          else
            v148 = (std::string *)v176.__r_.__value_.__r.__words[0];
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v149 = HIBYTE(v176.__r_.__value_.__r.__words[2]);
          else
            v149 = v176.__r_.__value_.__l.__size_;
          v150 = std::string::append(&v188, (const std::string::value_type *)v148, v149);
          v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
          v189.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v151;
          v150->__r_.__value_.__l.__size_ = 0;
          v150->__r_.__value_.__r.__words[2] = 0;
          v150->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v189, 41);
          v190 = v189;
          memset(&v189, 0, sizeof(v189));
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v176.__r_.__value_.__l.__data_);
          if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v188.__r_.__value_.__l.__data_);
          if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v187.__r_.__value_.__l.__data_);
          if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v177.__r_.__value_.__l.__data_);
          if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v186.__r_.__value_.__l.__data_);
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v185.__r_.__value_.__l.__data_);
          if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v178.__r_.__value_.__l.__data_);
          if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v184.__r_.__value_.__l.__data_);
          if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v183.__r_.__value_.__l.__data_);
          if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v179.__r_.__value_.__l.__data_);
          if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v182.__r_.__value_.__l.__data_);
          if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v181.__r_.__value_.__l.__data_);
          if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v180.__r_.__value_.__l.__data_);
          std::operator+<char>();
          v152 = std::string::append(&v187, " Declared shape: ");
          v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
          v188.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v153;
          v152->__r_.__value_.__l.__size_ = 0;
          v152->__r_.__value_.__r.__words[2] = 0;
          v152->__r_.__value_.__r.__words[0] = 0;
          if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v154 = &v191;
          else
            v154 = (std::string *)v191.__r_.__value_.__r.__words[0];
          if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v155 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
          else
            v155 = v191.__r_.__value_.__l.__size_;
          v156 = std::string::append(&v188, (const std::string::value_type *)v154, v155);
          v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
          v189.__r_.__value_.__r.__words[2] = v156->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v157;
          v156->__r_.__value_.__l.__size_ = 0;
          v156->__r_.__value_.__r.__words[2] = 0;
          v156->__r_.__value_.__r.__words[0] = 0;
          if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v158 = &v189;
          else
            v158 = (std::string *)v189.__r_.__value_.__r.__words[0];
          Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v158);
        }
        v48 = v13 + 32 * v15;
        v4 = v175;
        if (*(_BYTE *)v48)
        {
          v49 = *(unsigned __int8 *)(v48 + 31);
          v50 = *(_QWORD *)(v48 + 16);
          if ((v49 & 0x80u) != 0)
            v49 = v50;
          if (v49)
            Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel: bottom layout cannot both inherit from espresso and be specified.");
        }
        else
        {
          v51 = (_QWORD *)(v48 + 8);
          v52 = *(char *)(v48 + 31);
          if (v52 < 0)
          {
            if (*(_QWORD *)(v13 + 32 * v15 + 16) != 5)
LABEL_291:
              Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel: layout expected to be string of length 5 and a permutation of NDCHW");
            v51 = (_QWORD *)*v51;
          }
          else if (v52 != 5)
          {
            goto LABEL_291;
          }
          v53 = 0;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = 0;
          for (i = 0; i != 5; ++i)
          {
            v59 = *((char *)v51 + i);
            if (v59 <= 71)
            {
              if (v59 == 67)
              {
                v57 = 1;
              }
              else
              {
                if (v59 != 68)
LABEL_151:
                  Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel: layout string contains character not in NDCHW");
                v54 = 1;
              }
            }
            else
            {
              switch(v59)
              {
                case 'H':
                  v56 = 1;
                  break;
                case 'N':
                  v53 = 1;
                  break;
                case 'W':
                  v55 = 1;
                  break;
                default:
                  goto LABEL_151;
              }
            }
          }
          if ((v53 & v54 & v57 & v56 & v55 & 1) == 0)
            Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel: layout string must contain all characters in NDCHW");
        }
        ++v15;
      }
      while (v15 != v16);
    }
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    result = std::vector<Espresso::layer_shape>::reserve(v4, v14);
    v60 = *(_QWORD *)(a1 + 304);
    v61 = *(_QWORD *)(a1 + 312);
    if (v61 - v60 != 24)
    {
      v105 = "tunneled_ane_unit_kernel: Must have a single top.";
      goto LABEL_305;
    }
    if (v61 != v60)
    {
      v62 = 0;
      v174 = v4 + 2;
      while (1)
      {
        v63 = (int *)(v60 + 24 * v62);
        v64 = v63[4];
        if (v64 < 1
          || (v65 = *(_DWORD *)(v60 + 24 * v62 + 12), v65 < 1)
          || (v66 = *(_DWORD *)(v60 + 24 * v62 + 8), v66 < 1)
          || ((v67 = *(_DWORD *)(v60 + 24 * v62 + 4), v68 = *v63, v67 >= 1) ? (v69 = v68 < 1) : (v69 = 1), v69))
        {
          v113 = "tunneled_ane_unit_kernel: Unsupported non positive dimension for top.";
          goto LABEL_295;
        }
        v70 = *(unsigned int *)(v60 + 24 * v62 + 20);
        if ((v70 - 6) <= 0xFFFFFFFA)
        {
          std::to_string(&v190, v70);
          v168 = std::string::insert(&v190, 0, "tunneled_ane_unit_kernel: Unsupported top rank ");
          v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
          v191.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v169;
          v168->__r_.__value_.__l.__size_ = 0;
          v168->__r_.__value_.__r.__words[2] = 0;
          v168->__r_.__value_.__r.__words[0] = 0;
          if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v170 = &v191;
          else
            v170 = (std::string *)v191.__r_.__value_.__r.__words[0];
          Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v170);
        }
        if ((_DWORD)v70 != 5)
          break;
LABEL_76:
        v74 = *(_QWORD *)(a1 + 352);
        v75 = (unsigned int *)(v74 + 32 * v62);
        v76 = *v75;
        if ((_DWORD)v76 == -1)
        {
          v79 = v75 + 2;
          v80 = *((char *)v75 + 31);
          if (v80 < 0)
          {
            if (*(_QWORD *)(v74 + 32 * v62 + 16) != 5)
              goto LABEL_293;
            v79 = (_QWORD *)*v79;
          }
          else if (v80 != 5)
          {
LABEL_293:
            v113 = "tunneled_ane_unit_kernel: layout expected to be string of length 5 and a permutation of NDCHW";
            goto LABEL_295;
          }
          v81 = 0;
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v85 = 0;
          for (j = 0; j != 5; ++j)
          {
            v87 = *((char *)v79 + j);
            if (v87 <= 71)
            {
              if (v87 == 67)
              {
                v85 = 1;
              }
              else
              {
                if (v87 != 68)
                {
LABEL_152:
                  v113 = "tunneled_ane_unit_kernel: layout string contains character not in NDCHW";
                  goto LABEL_295;
                }
                v82 = 1;
              }
            }
            else
            {
              switch(v87)
              {
                case 'H':
                  v84 = 1;
                  break;
                case 'N':
                  v81 = 1;
                  break;
                case 'W':
                  v83 = 1;
                  break;
                default:
                  goto LABEL_152;
              }
            }
          }
          if ((v81 & v82 & v85 & v84 & v83 & 1) != 0)
            goto LABEL_102;
          v113 = "tunneled_ane_unit_kernel: layout string must contain all characters in NDCHW";
LABEL_295:
          Espresso::throw_exception_selector<Espresso::generic_error>(v113);
        }
        v77 = *((unsigned __int8 *)v75 + 31);
        v78 = *((_QWORD *)v75 + 2);
        if ((v77 & 0x80u) == 0)
          v78 = v77;
        if (v78)
        {
          v113 = "tunneled_ane_unit_kernel: top layout cannot be inherited and specified.";
          goto LABEL_295;
        }
        if ((v76 & 0x80000000) != 0 || ((uint64_t)(*(_QWORD *)(a1 + 336) - *(_QWORD *)(a1 + 328)) >> 5) - 1 < v76)
        {
          v113 = "tunneled_ane_unit_kernel: Invalid index to inherit layout from bottom blob.";
          goto LABEL_295;
        }
LABEL_102:
        v88 = v4[1];
        v89 = v4[2];
        if (v88 >= v89)
        {
          v91 = *v4;
          v92 = (uint64_t)(v88 - *v4) >> 6;
          v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 58)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v94 = v89 - v91;
          if (v94 >> 5 > v93)
            v93 = v94 >> 5;
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFC0)
            v95 = 0x3FFFFFFFFFFFFFFLL;
          else
            v95 = v93;
          v193 = v174;
          v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v95);
          v97 = (std::string::size_type)&v96[64 * v92];
          v191.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
          v191.__r_.__value_.__l.__size_ = v97;
          v192 = &v96[64 * v98];
          *(_DWORD *)v97 = v64;
          *(_DWORD *)(v97 + 4) = v65;
          *(_DWORD *)(v97 + 8) = v66;
          *(_DWORD *)(v97 + 12) = v67;
          *(_DWORD *)(v97 + 16) = v68;
          *(_DWORD *)(v97 + 20) = v70;
          *(_OWORD *)(v97 + 24) = 0u;
          *(_OWORD *)(v97 + 40) = 0u;
          *(_QWORD *)(v97 + 56) = 0;
          v191.__r_.__value_.__r.__words[2] = v97 + 64;
          v4 = v175;
          std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(v175, &v191);
          v90 = v175[1];
          result = (_QWORD *)std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v191);
        }
        else
        {
          *(_DWORD *)v88 = v64;
          *(_DWORD *)(v88 + 4) = v65;
          *(_DWORD *)(v88 + 8) = v66;
          *(_DWORD *)(v88 + 12) = v67;
          *(_DWORD *)(v88 + 16) = v68;
          *(_DWORD *)(v88 + 20) = v70;
          v90 = v88 + 64;
          *(_OWORD *)(v88 + 24) = 0u;
          *(_OWORD *)(v88 + 40) = 0u;
          *(_QWORD *)(v88 + 56) = 0;
          v4[1] = v88 + 64;
        }
        v4[1] = v90;
        v60 = *(_QWORD *)(a1 + 304);
        if (++v62 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 312) - v60) >> 3))
          goto LABEL_112;
      }
      v71 = 0;
      v72 = 1;
      while (2)
      {
        v73 = v68;
        switch(v71)
        {
          case 0:
            goto LABEL_74;
          case 1:
            v73 = v67;
            goto LABEL_74;
          case 2:
            v73 = v66;
            goto LABEL_74;
          case 3:
            v73 = v65;
LABEL_74:
            v72 &= v73 == 1;
            if (5 - v70 != ++v71)
              continue;
            if ((v72 & 1) != 0)
              goto LABEL_76;
            v113 = "tunneled_ane_unit_kernel: dimensions not mapped to rank specified by layout must be 1";
            break;
          default:
            v113 = "tunneled_ane_unit_kernel: Unexpected error";
            goto LABEL_295;
        }
        goto LABEL_295;
      }
    }
LABEL_112:
    if (*(char *)(a1 + 423) < 0)
    {
      if (*(_QWORD *)(a1 + 408))
        goto LABEL_114;
    }
    else if (*(_BYTE *)(a1 + 423))
    {
LABEL_114:
      if (*(char *)(a1 + 399) < 0)
      {
        if (*(_QWORD *)(a1 + 384))
        {
LABEL_116:
          v99 = a1 + 424;
          if (*(char *)(a1 + 447) < 0)
          {
            v106 = *(_QWORD *)(a1 + 432);
            if (v106 != 4)
            {
              if (v106 == 5)
              {
                v107 = *(unsigned __int8 *)(*(_QWORD *)v99 + 4);
                v108 = **(_DWORD **)v99 == 1953384789;
                v109 = 56;
              }
              else
              {
                if (v106 != 7)
                  goto LABEL_144;
                v107 = *(_DWORD *)(*(_QWORD *)v99 + 3);
                v108 = **(_DWORD **)v99 == 1634692166;
                v109 = 909210721;
              }
              if (v108 && v107 == v109)
                return result;
LABEL_144:
              std::operator+<char>();
              if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v112 = &v191;
              else
                v112 = (std::string *)v191.__r_.__value_.__r.__words[0];
              Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v112);
            }
            v101 = *(_DWORD **)v99;
          }
          else
          {
            v100 = *(unsigned __int8 *)(a1 + 447);
            v101 = (_DWORD *)(a1 + 424);
            if (v100 != 4)
            {
              if (v100 == 5)
              {
                v102 = *(unsigned __int8 *)(a1 + 428);
                v103 = *(_DWORD *)v99 == 1953384789;
                v104 = 56;
              }
              else
              {
                if (v100 != 7)
                  goto LABEL_144;
                v102 = *(_DWORD *)(a1 + 427);
                v103 = *(_DWORD *)v99 == 1634692166;
                v104 = 909210721;
              }
              if (v103 && v102 == v104)
                return result;
              goto LABEL_144;
            }
          }
          if (*v101 == 947154505)
            return result;
          goto LABEL_144;
        }
      }
      else if (*(_BYTE *)(a1 + 399))
      {
        goto LABEL_116;
      }
      v105 = "tunneled_ane_unit_kernel: Must specify unit_template.unit_type.";
LABEL_305:
      Espresso::throw_exception_selector<Espresso::generic_error>(v105);
    }
    v105 = "tunneled_ane_unit_kernel: Must specify unit_template.unit_params.";
    goto LABEL_305;
  }
  if (v5 != 1)
  {
    std::to_string(&v190, v5);
    v171 = std::string::insert(&v190, 0, "Unknown shape propagation type ");
    v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
    v191.__r_.__value_.__r.__words[2] = v171->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v172;
    v171->__r_.__value_.__l.__size_ = 0;
    v171->__r_.__value_.__r.__words[2] = 0;
    v171->__r_.__value_.__r.__words[0] = 0;
    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v173 = &v191;
    else
      v173 = (std::string *)v191.__r_.__value_.__r.__words[0];
    Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v173);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 6);
}

void sub_1916A1CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (*(char *)(v56 - 185) < 0)
    operator delete(*(void **)(v56 - 208));
  if (*(char *)(v56 - 217) < 0)
    operator delete(*(void **)(v56 - 240));
  if (a56 < 0)
    operator delete(__p);
  if (*(char *)(v56 - 153) < 0)
    operator delete(*(void **)(v56 - 176));
  if (*(char *)(v56 - 121) < 0)
    operator delete(*(void **)(v56 - 144));
  _Unwind_Resume(a1);
}

void Espresso::generic_plane_rw_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v4;
  uint64_t v5;
  __int128 v6;
  char *v7;
  void *v8;
  int v9;
  __int128 *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  int v16;
  __int128 *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  void *__p;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  _BYTE v29[40];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;

  *((_QWORD *)&v37 + 1) = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 284))
  {
    v4 = *a2;
    v5 = *((_QWORD *)*a2 + 4);
    v6 = (*a2)[1];
    *(_OWORD *)v29 = **a2;
    *(_OWORD *)&v29[16] = v6;
    *(_QWORD *)&v29[32] = v5;
    v30 = 0uLL;
    v31 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v30, *((const void **)v4 + 5), *((_QWORD *)v4 + 6), (uint64_t)(*((_QWORD *)v4 + 6) - *((_QWORD *)v4 + 5)) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v7 = (char *)operator new(0x40uLL);
    *a3 = v7;
    a3[1] = v7;
    a3[2] = v7 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)v29, (__int128 *)&v32, (uint64_t)v7);
    v8 = (void *)v30;
    if (!(_QWORD)v30)
      return;
    *((_QWORD *)&v30 + 1) = v30;
    goto LABEL_37;
  }
  v9 = *(_DWORD *)(a1 + 280);
  if (v9 > 875836533)
  {
    if (v9 <= 1886859823)
    {
      if (v9 != 875836534)
      {
        if (v9 != 1882468912 && v9 != 1885745712)
          goto LABEL_39;
        goto LABEL_31;
      }
LABEL_16:
      v11 = *a2;
      v22 = **a2;
      __p = 0;
      v25 = 0;
      v26 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v11 + 5), *((_QWORD *)v11 + 6), (uint64_t)(*((_QWORD *)v11 + 6) - *((_QWORD *)v11 + 5)) >> 2);
      *(_OWORD *)&v29[24] = 0u;
      v30 = 0u;
      v31 = 0;
      *(_QWORD *)v29 = v22;
      *(_OWORD *)&v29[8] = xmmword_191A8D8A0;
      v34 = 0u;
      v35 = 0u;
      v36 = 0;
      v32 = v22;
      v33 = xmmword_191A937E0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      v27 = a3;
      v28 = 0;
      v12 = (char *)operator new(0x80uLL);
      *a3 = v12;
      a3[1] = v12;
      a3[2] = v12 + 128;
      v13 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)v29, &v37, (uint64_t)v12);
      do
      {
        v14 = *(void **)((char *)&v35 + v13);
        if (v14)
        {
          *(_QWORD *)((char *)&v35 + v13 + 8) = v14;
          operator delete(v14);
        }
        v13 -= 64;
      }
      while (v13 != -128);
      goto LABEL_35;
    }
    v15 = v9 == 1886859824 || v9 == 2019963440;
    v16 = 2016686640;
LABEL_26:
    if (!v15 && v9 != v16)
LABEL_39:
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported 4CC in plane_rw");
    goto LABEL_31;
  }
  if (v9 <= 875704421)
  {
    v15 = v9 == 641230384;
    v16 = 641234480;
    goto LABEL_26;
  }
  if (v9 != 875704422 && v9 != 875704438)
  {
    if (v9 != 875836518)
      goto LABEL_39;
    goto LABEL_16;
  }
LABEL_31:
  v18 = *a2;
  v23 = **a2;
  __p = 0;
  v25 = 0;
  v26 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v18 + 5), *((_QWORD *)v18 + 6), (uint64_t)(*((_QWORD *)v18 + 6) - *((_QWORD *)v18 + 5)) >> 2);
  *(_OWORD *)&v29[24] = 0u;
  v30 = 0u;
  v31 = 0;
  *(_QWORD *)v29 = v23;
  *(_OWORD *)&v29[8] = xmmword_191A8D8A0;
  v34 = 0uLL;
  v35 = 0uLL;
  v36 = 0;
  LODWORD(v32) = (int)v23 / 2;
  HIDWORD(v32) = SDWORD1(v23) / 2;
  v33 = xmmword_191A937E0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v27 = a3;
  v28 = 0;
  v19 = (char *)operator new(0x80uLL);
  *a3 = v19;
  a3[1] = v19;
  a3[2] = v19 + 128;
  v20 = 0;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)v29, &v37, (uint64_t)v19);
  do
  {
    v21 = *(void **)((char *)&v35 + v20);
    if (v21)
    {
      *(_QWORD *)((char *)&v35 + v20 + 8) = v21;
      operator delete(v21);
    }
    v20 -= 64;
  }
  while (v20 != -128);
LABEL_35:
  v8 = __p;
  if (!__p)
    return;
  v25 = __p;
LABEL_37:
  operator delete(v8);
}

void Espresso::generic_rnn_arch_kernel_impl::__launch(uint64_t a1, uint64_t *a2, uint64_t **a3, std::string::size_type **a4)
{
  int v7;
  std::string::size_type *v8;
  std::string::size_type v9;
  unint64_t *v10;
  unint64_t v11;
  std::string::size_type v12;
  std::string::size_type v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *size;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::runtime_error *exception;
  std::string *v88;
  __int128 v89;
  std::string v90;
  std::string v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  __int128 v96;
  _OWORD v97[8];
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  __int128 v107;

  v7 = *(_DWORD *)(a1 + 440);
  if (v7 == 1)
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)a1 + 392))(a1, a2, a3);
  }
  else
  {
    if (v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v90, *(_DWORD *)(a1 + 440));
      v88 = std::string::insert(&v90, 0, "Invalid value ");
      v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v89;
      v88->__r_.__value_.__l.__size_ = 0;
      v88->__r_.__value_.__r.__words[2] = 0;
      v88->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v91);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v8 = *a4;
    v9 = (*a4)[1];
    v91.__r_.__value_.__r.__words[0] = **a4;
    v91.__r_.__value_.__l.__size_ = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v8 = *a4;
    }
    v12 = v8[2];
    v13 = v8[3];
    v90.__r_.__value_.__r.__words[0] = v12;
    v90.__r_.__value_.__l.__size_ = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      *(_QWORD *)&v107 = v12;
      *((_QWORD *)&v107 + 1) = v13;
      do
        v16 = __ldxr(v14);
      while (__stxr(v16 + 1, v14));
    }
    else
    {
      v107 = v12;
    }
    v17 = *a3;
    v18 = (std::__shared_weak_count *)(*a3)[1];
    v105 = **a3;
    v106 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
      v17 = *a3;
    }
    v21 = (_DWORD *)(a1 + 304);
    v22 = v17[2];
    v23 = v17[3];
    *(_QWORD *)&v104 = v22;
    *((_QWORD *)&v104 + 1) = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      *((_QWORD *)&v103 + 1) = v23;
      do
        v26 = __ldxr(v24);
      while (__stxr(v26 + 1, v24));
    }
    else
    {
      *((_QWORD *)&v103 + 1) = 0;
    }
    *(_QWORD *)&v103 = v22;
    if (!*v21)
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v107, (*a4)[4], (*a4)[5]);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v103, (*a3)[4], (*a3)[5]);
      v82 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      v102 = v103;
      if (*((_QWORD *)&v103 + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      Espresso::axpby_closure::operator()((_QWORD *)(a1 + 688), (uint64_t)a2, &v107, &v102, 1, 1.0, 0.0);
      if (v82)
      {
        v85 = (unint64_t *)&v82->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
    }
    *(_DWORD *)(a1 + 616) = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v91.__r_.__value_.__l.__data_
                                                                              + 32))(v91.__r_.__value_.__r.__words[0]);
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
    v101 = v104;
    if (*((_QWORD *)&v104 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    Espresso::axpby_closure::operator()((_QWORD *)(a1 + 688), (uint64_t)a2, (__int128 *)&v90, &v101, 1, 1.0, 0.0);
    if (v27)
    {
      v30 = (unint64_t *)&v27->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v32 = (std::__shared_weak_count *)a2[1];
    v99 = *a2;
    v100 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v35 = *(_OWORD *)(a1 + 400);
    v36 = *(_OWORD *)(a1 + 416);
    v37 = *(_OWORD *)(a1 + 368);
    v97[5] = *(_OWORD *)(a1 + 384);
    v97[6] = v35;
    v97[7] = v36;
    v38 = *(_OWORD *)(a1 + 336);
    v39 = *(_OWORD *)(a1 + 352);
    v40 = *(_OWORD *)v21;
    v97[1] = *(_OWORD *)(a1 + 320);
    v97[2] = v38;
    v97[3] = v39;
    v97[4] = v37;
    v98 = *(_QWORD *)(a1 + 432);
    v97[0] = v40;
    v96 = *(_OWORD *)&v91.__r_.__value_.__l.__data_;
    if (v91.__r_.__value_.__l.__size_)
    {
      v41 = (unint64_t *)(v91.__r_.__value_.__l.__size_ + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v94 = v105;
    v95 = v106;
    if (v106)
    {
      v43 = (unint64_t *)&v106->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v93 = v104;
    if (*((_QWORD *)&v104 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v92 = v103;
    if (*((_QWORD *)&v103 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    (*(void (**)(uint64_t, uint64_t *, _QWORD, _OWORD *, __int128 *, uint64_t, uint64_t *, __int128 *, __int128 *, uint64_t))(*(_QWORD *)a1 + 400))(a1, &v99, 0, v97, &v96, 0xFFFFFFFFLL, &v94, &v93, &v92, 0xFFFFFFFFLL);
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
    if (*((_QWORD *)&v92 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
    if (*((_QWORD *)&v93 + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = v95;
    if (v95)
    {
      v56 = (unint64_t *)&v95->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
    if (*((_QWORD *)&v96 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = v100;
    if (v100)
    {
      v62 = (unint64_t *)&v100->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
    if (*((_QWORD *)&v103 + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
    if (*((_QWORD *)&v104 + 1))
    {
      v68 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = v106;
    if (v106)
    {
      v71 = (unint64_t *)&v106->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v73 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
    if (*((_QWORD *)&v107 + 1))
    {
      v74 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    size = (std::__shared_weak_count *)v90.__r_.__value_.__l.__size_;
    if (v90.__r_.__value_.__l.__size_)
    {
      v77 = (unint64_t *)(v90.__r_.__value_.__l.__size_ + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v79 = (std::__shared_weak_count *)v91.__r_.__value_.__l.__size_;
    if (v91.__r_.__value_.__l.__size_)
    {
      v80 = (unint64_t *)(v91.__r_.__value_.__l.__size_ + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
  }
}

void sub_1916A2C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  void *v31;
  int v32;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v32 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v32)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v31);
  goto LABEL_8;
}

void Espresso::generic_rnn_arch_kernel_impl::clear_weights(Espresso::generic_rnn_arch_kernel_impl *this)
{
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 88);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 90);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 92);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 94);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 96);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 98);
}

void Espresso::generic_rnn_arch_kernel_impl::on_resized(Espresso::generic_rnn_arch_kernel_impl *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t v4;
  uint64_t i;

  if (*((_QWORD *)this + 108))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>>>::__deallocate_node(*((_QWORD **)this + 107));
    *((_QWORD *)this + 107) = 0;
    v4 = *((_QWORD *)this + 106);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*((_QWORD *)this + 105) + 8 * i) = 0;
    }
    *((_QWORD *)this + 108) = 0;
  }
}

void Espresso::generic_rnn_arch_kernel_impl::__set_weight_raw_blob(uint64_t a1, uint64_t *a2, std::string::size_type a3, uint64_t a4, unint64_t a5, uint64_t *a6)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  char v22;
  int v23;
  int v24;
  uint64_t v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *size;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::string *v45;
  std::string::size_type v46;
  char v47;
  uint64_t v48;
  std::string::size_type v49;
  char v50;
  int v51;
  uint64_t v52;
  void *v53;
  uint64_t *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string *v66;
  std::string::size_type v67;
  char v68;
  uint64_t v69;
  std::string::size_type v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t v78;
  std::string::size_type v79;
  int v80;
  std::string *p_p;
  uint64_t v82;
  unsigned __int8 *v83;
  int v84;
  int v85;
  int v86;
  int v87;
  char v88;
  _BOOL4 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::string *v106;
  std::string::size_type v107;
  char v108;
  uint64_t v109;
  std::string::size_type v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  void *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::string *v126;
  std::string::size_type v127;
  char v128;
  uint64_t v129;
  std::string::size_type v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  unsigned __int8 *v135;
  unsigned __int8 *v136;
  uint64_t v137;
  uint64_t v138;
  std::string::size_type v139;
  int v140;
  std::string *v141;
  uint64_t v142;
  unsigned __int8 *v143;
  int v144;
  int v145;
  int v146;
  int v147;
  char v148;
  _BOOL4 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  unsigned __int8 *v155;
  unsigned __int8 *v156;
  uint64_t v157;
  uint64_t v158;
  std::string::size_type v159;
  int v160;
  std::string *v161;
  uint64_t v162;
  unsigned __int8 *v163;
  int v164;
  int v165;
  int v166;
  int v167;
  char v168;
  _BOOL4 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  unsigned __int8 *v175;
  unsigned __int8 *v176;
  uint64_t v177;
  uint64_t v178;
  std::string::size_type v179;
  int v180;
  std::string *v181;
  uint64_t v182;
  unsigned __int8 *v183;
  int v184;
  int v185;
  int v186;
  int v187;
  char v188;
  _BOOL4 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  unsigned __int8 *v195;
  unsigned __int8 *v196;
  uint64_t v197;
  uint64_t v198;
  std::string::size_type v199;
  int v200;
  std::string *v201;
  uint64_t v202;
  unsigned __int8 *v203;
  int v204;
  int v205;
  int v206;
  int v207;
  char v208;
  _BOOL4 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  unsigned __int8 *v215;
  unsigned __int8 *v216;
  uint64_t v217;
  uint64_t v218;
  std::string::size_type v219;
  int v220;
  std::string *v221;
  uint64_t v222;
  unsigned __int8 *v223;
  int v224;
  int v225;
  int v226;
  int v227;
  char v228;
  _BOOL4 v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  unsigned __int8 *v235;
  unsigned __int8 *v236;
  uint64_t v237;
  uint64_t v238;
  std::string::size_type v239;
  int v240;
  std::string *v241;
  uint64_t v242;
  unsigned __int8 *v243;
  int v244;
  int v245;
  int v246;
  int v247;
  char v248;
  _BOOL4 v249;
  uint64_t v250;
  std::string *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  unsigned __int8 *v256;
  uint64_t v257;
  unsigned __int8 *v258;
  int v259;
  int v260;
  int v261;
  int v262;
  char v263;
  _BOOL4 v264;
  uint64_t v265;
  std::string *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  unsigned __int8 *v271;
  uint64_t v272;
  unsigned __int8 *v273;
  int v274;
  int v275;
  int v276;
  int v277;
  char v278;
  _BOOL4 v279;
  uint64_t v280;
  uint64_t v281;
  std::string::size_type v282;
  int v283;
  std::string *v284;
  uint64_t v285;
  unsigned __int8 *v286;
  int v287;
  int v288;
  int v289;
  int v290;
  char v291;
  _BOOL4 v292;
  std::string *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  unsigned __int8 *v298;
  uint64_t v299;
  unsigned __int8 *v300;
  int v301;
  int v302;
  int v303;
  int v304;
  char v305;
  _BOOL4 v306;
  uint64_t v307;
  std::string *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  unsigned __int8 *v313;
  uint64_t v314;
  unsigned __int8 *v315;
  int v316;
  int v317;
  int v318;
  int v319;
  char v320;
  _BOOL4 v321;
  uint64_t v322;
  std::string *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  unsigned __int8 *v328;
  uint64_t v329;
  unsigned __int8 *v330;
  int v331;
  int v332;
  int v333;
  int v334;
  char v335;
  _BOOL4 v336;
  std::string *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  unsigned __int8 *v342;
  uint64_t v343;
  unsigned __int8 *v344;
  int v345;
  int v346;
  int v347;
  int v348;
  char v349;
  _BOOL4 v350;
  uint64_t v351;
  std::string *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  unsigned __int8 *v357;
  uint64_t v358;
  unsigned __int8 *v359;
  int v360;
  int v361;
  int v362;
  int v363;
  char v364;
  _BOOL4 v365;
  std::string *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  unsigned __int8 *v371;
  uint64_t v372;
  unsigned __int8 *v373;
  int v374;
  int v375;
  int v376;
  int v377;
  char v378;
  _BOOL4 v379;
  std::string *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  unsigned __int8 *v385;
  uint64_t v386;
  unsigned __int8 *v387;
  int v388;
  int v389;
  int v390;
  int v391;
  char v392;
  _BOOL4 v393;
  std::string *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  unsigned __int8 *v399;
  uint64_t v400;
  unsigned __int8 *v401;
  int v402;
  int v403;
  int v404;
  int v405;
  char v406;
  _BOOL4 v407;
  std::string *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  int v412;
  unsigned __int8 *v413;
  uint64_t v414;
  unsigned __int8 *v415;
  int v416;
  int v417;
  int v418;
  int v419;
  char v420;
  _BOOL4 v421;
  std::string *v422;
  __int128 v423;
  _BOOL4 v424;
  _BOOL4 v425;
  unint64_t *v426;
  unint64_t v427;
  uint64_t *v428;
  _BOOL4 v429;
  _BOOL4 v430;
  unint64_t *v431;
  unint64_t v432;
  _BOOL4 v433;
  uint64_t v434;
  uint64_t v435;
  size_t v436;
  _BOOL4 v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  _BOOL4 v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  _BOOL4 v446;
  int v447;
  uint64_t v448;
  unint64_t *v449;
  unint64_t v450;
  char v451;
  uint64_t *v452;
  _BOOL4 v453;
  uint64_t v454;
  unint64_t *v455;
  unint64_t v456;
  _BOOL4 v457;
  int v458;
  uint64_t v459;
  unint64_t *v460;
  unint64_t v461;
  char v462;
  _BOOL4 v463;
  uint64_t v464;
  unint64_t *v465;
  unint64_t v466;
  _BOOL4 v467;
  uint64_t v468;
  _BOOL4 v469;
  uint64_t v470;
  _BOOL4 v471;
  uint64_t v472;
  _BOOL4 v473;
  uint64_t v474;
  int v475;
  _BOOL4 v476;
  uint64_t v477;
  _BOOL4 v478;
  _BOOL4 v479;
  uint64_t v480;
  _BOOL4 v481;
  _BOOL4 v482;
  uint64_t v483;
  unint64_t *v484;
  unint64_t v485;
  char v486;
  uint64_t *v487;
  uint64_t v488;
  unint64_t *v489;
  unint64_t v490;
  __int128 *v491;
  _BOOL4 v492;
  uint64_t v493;
  _BOOL4 v494;
  uint64_t v495;
  unint64_t *v496;
  unint64_t v497;
  uint64_t *v498;
  uint64_t v499;
  unint64_t *v500;
  unint64_t v501;
  _BOOL4 v502;
  _BOOL4 v503;
  uint64_t v504;
  _BOOL4 v505;
  uint64_t v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  std::runtime_error *v510;
  std::string *v511;
  __int128 v512;
  std::runtime_error *exception;
  std::string *v514;
  __int128 v515;
  std::string *v516;
  __int128 v517;
  std::string *v518;
  std::string::size_type v519;
  std::string *v520;
  __int128 v521;
  const std::string::value_type *v522;
  std::string::size_type v523;
  std::string *v524;
  __int128 v525;
  std::string *v526;
  __int128 v527;
  const std::string::value_type *v528;
  std::string::size_type v529;
  std::string *v530;
  __int128 v531;
  std::string *v532;
  std::string::size_type v533;
  std::string *v534;
  __int128 v535;
  std::runtime_error *v536;
  std::string *v537;
  __int128 v538;
  std::string *v539;
  __int128 v540;
  std::string *v541;
  std::string::size_type v542;
  std::string *v543;
  __int128 v544;
  const std::string::value_type *v545;
  std::string::size_type v546;
  std::string *v547;
  __int128 v548;
  std::string *v549;
  __int128 v550;
  const std::string::value_type *v551;
  std::string::size_type v552;
  std::string *v553;
  __int128 v554;
  std::string *v555;
  std::string::size_type v556;
  std::string *v557;
  __int128 v558;
  std::runtime_error *v559;
  std::string *v560;
  __int128 v561;
  std::string *v562;
  __int128 v563;
  std::string *v564;
  std::string::size_type v565;
  std::string *v566;
  __int128 v567;
  const std::string::value_type *v568;
  std::string::size_type v569;
  std::string *v570;
  __int128 v571;
  std::string *v572;
  __int128 v573;
  const std::string::value_type *v574;
  std::string::size_type v575;
  std::string *v576;
  __int128 v577;
  std::string *v578;
  std::string::size_type v579;
  std::string *v580;
  __int128 v581;
  std::runtime_error *v582;
  std::string *v583;
  __int128 v584;
  std::string *v585;
  __int128 v586;
  std::string *v587;
  std::string::size_type v588;
  std::string *v589;
  __int128 v590;
  const std::string::value_type *v591;
  std::string::size_type v592;
  std::string *v593;
  __int128 v594;
  std::string *v595;
  __int128 v596;
  const std::string::value_type *v597;
  std::string::size_type v598;
  std::string *v599;
  __int128 v600;
  std::string *v601;
  std::string::size_type v602;
  std::string *v603;
  __int128 v604;
  uint64_t *v605;
  uint64_t **v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  int v614;
  int v618;
  uint64_t *v619;
  char v620;
  __int128 v621;
  uint64_t v622[2];
  uint64_t v623[2];
  uint64_t v624[2];
  uint64_t v625[2];
  _OWORD v626[8];
  int v627;
  _OWORD v628[8];
  int v629;
  __int128 v630;
  uint64_t v631[2];
  uint64_t v632[2];
  uint64_t v633[2];
  std::string v634;
  const std::string::value_type *v635;
  std::string::size_type v636;
  unsigned __int8 v637;
  const std::string::value_type *v638;
  std::string::size_type v639;
  unsigned __int8 v640;
  std::string v641;
  std::string v642;
  std::string v643;
  std::string v644;
  std::string v645;
  std::string lpsrc;
  uint64_t v647[2];
  _OWORD v648[8];
  int v649;
  _OWORD v650[8];
  int v651;
  std::string __p;
  _BYTE v653[64];
  __int128 v654;
  __int128 v655;
  _BYTE v656[36];
  void *v657;
  char v658;
  uint64_t v659;
  uint64_t v660;
  std::string v661;
  _QWORD v662[4];

  v662[1] = *MEMORY[0x1E0C80C00];
  v659 = 0;
  v660 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v659, *a6, a6[1]);
  v605 = a6;
  v9 = 0;
  v10 = 0;
  v662[0] = 0x100000000;
  v11 = a1 + 8;
  v612 = a1 + 488;
  v613 = a1 + 420;
  v610 = a1 + 428;
  v611 = a1 + 520;
  v608 = a1 + 584;
  v609 = a1 + 552;
  v606 = (uint64_t **)(a1 + 280);
  v607 = a4 & 0x3F;
  __asm { FMOV            V8.2S, #1.0 }
  while (2)
  {
    v620 = v9;
    v17 = *((int *)v662 + v10);
    v18 = std::string::basic_string[abi:ne180100]<0>(&v657, "");
    if ((_DWORD)v17 == 1)
      MEMORY[0x19401C808](v18, "_reverse");
    v19 = *(_DWORD *)(a1 + 304);
    switch(v19)
    {
      case 0:
      case 3:
        v20 = *(_DWORD *)(a1 + 380);
        v614 = *(_DWORD *)(a1 + 384);
        v21 = a1 + 16 * v17 + 624;
        if (!*(_QWORD *)v21)
        {
          *(_DWORD *)&v653[52] = -1;
          *(_QWORD *)&v653[56] = _D8;
          *(_QWORD *)((char *)&v655 + 4) = 0;
          if (v19)
            v22 = 1;
          else
            v22 = 2;
          v23 = v20;
          memset(&v656[4], 0, 32);
          *(_DWORD *)v653 = v20 << v22;
          *(_DWORD *)&v653[4] = v614;
          *(_QWORD *)&v653[12] = 0;
          *(_QWORD *)&v653[20] = _D8;
          *(_QWORD *)&v653[44] = 0;
          *(_QWORD *)&v653[28] = 0;
          v24 = *(_DWORD *)(a1 + 396);
          v653[40] = *(_BYTE *)(a1 + 456);
          *(_QWORD *)&v653[8] = v24 != 5;
          *(_DWORD *)&v653[36] = v24;
          Espresso::abstract_engine_factory::shared(&v645);
          v25 = v645.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__p, "inner_product");
          LODWORD(v644.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)v11 + 8))(*(_QWORD *)(*(_QWORD *)v11 + 8));
          Espresso::abstract_engine_factory::make_kernel_priv(v25, v11, (uint64_t)&__p, (uint64_t)v653, (int *)&v644);
          if (lpsrc.__r_.__value_.__r.__words[0]
          {
            v661.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
            v661.__r_.__value_.__l.__size_ = lpsrc.__r_.__value_.__l.__size_;
            if (lpsrc.__r_.__value_.__l.__size_)
            {
              v27 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
              do
                v28 = __ldxr(v27);
              while (__stxr(v28 + 1, v27));
            }
          }
          else
          {
            *(_OWORD *)&v661.__r_.__value_.__l.__data_ = 0uLL;
          }
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 16 * v17 + 624, (__int128 *)&v661);
          size = (std::__shared_weak_count *)v661.__r_.__value_.__l.__size_;
          if (v661.__r_.__value_.__l.__size_)
          {
            v37 = (unint64_t *)(v661.__r_.__value_.__l.__size_ + 8);
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          v39 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
          if (lpsrc.__r_.__value_.__l.__size_)
          {
            v40 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v42 = (std::__shared_weak_count *)v645.__r_.__value_.__l.__size_;
          if (v645.__r_.__value_.__l.__size_)
          {
            v43 = (unint64_t *)(v645.__r_.__value_.__l.__size_ + 8);
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          std::to_string(&__p, v17);
          v45 = std::string::insert(&__p, 0, "Wx_");
          v46 = v45->__r_.__value_.__r.__words[0];
          v661.__r_.__value_.__r.__words[0] = v45->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v661.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
          v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          v48 = *(_QWORD *)v21;
          if (*(char *)(*(_QWORD *)v21 + 199) < 0)
            operator delete(*(void **)(v48 + 176));
          v49 = v661.__r_.__value_.__r.__words[0];
          *(_QWORD *)(v48 + 176) = v46;
          *(_QWORD *)(v48 + 184) = v49;
          *(_QWORD *)(v48 + 191) = *(std::string::size_type *)((char *)v661.__r_.__value_.__r.__words + 7);
          *(_BYTE *)(v48 + 199) = v47;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v628[6] = *(_OWORD *)v656;
          v628[7] = *(_OWORD *)&v656[16];
          v629 = *(_DWORD *)&v656[32];
          v628[2] = *(_OWORD *)&v653[32];
          v628[3] = *(_OWORD *)&v653[48];
          v628[4] = v654;
          v628[5] = v655;
          v628[0] = *(_OWORD *)v653;
          v628[1] = *(_OWORD *)&v653[16];
          Espresso::generic_rnn_arch_kernel_impl::__initialize_dynamic_quantization(a1, (uint64_t)v628, v17, v613, v612, v611);
          v11 = a1 + 8;
          v20 = v23;
        }
        v619 = (uint64_t *)(a1 + 16 * v17 + 656);
        if (!*v619)
        {
          *(_DWORD *)&v653[52] = -1;
          *(_QWORD *)&v653[56] = _D8;
          *(_QWORD *)((char *)&v655 + 4) = 0;
          if (v19)
            v50 = 1;
          else
            v50 = 2;
          memset(&v656[4], 0, 32);
          *(_DWORD *)v653 = v20 << v50;
          *(_DWORD *)&v653[4] = v20;
          *(_QWORD *)&v653[20] = _D8;
          *(_QWORD *)&v653[44] = 0;
          *(_QWORD *)&v653[28] = 0;
          *(_QWORD *)&v653[8] = 0;
          v653[40] = *(_BYTE *)(a1 + 456);
          v51 = *(_DWORD *)(a1 + 396);
          *(_DWORD *)&v653[16] = 0;
          *(_DWORD *)&v653[36] = v51;
          Espresso::abstract_engine_factory::shared(&v645);
          v52 = v645.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__p, "inner_product");
          LODWORD(v644.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)v11 + 8))(*(_QWORD *)(*(_QWORD *)v11 + 8));
          Espresso::abstract_engine_factory::make_kernel_priv(v52, v11, (uint64_t)&__p, (uint64_t)v653, (int *)&v644);
          if (lpsrc.__r_.__value_.__r.__words[0]
          {
            v661.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
            v661.__r_.__value_.__l.__size_ = lpsrc.__r_.__value_.__l.__size_;
            v54 = (uint64_t *)(a1 + 16 * v17 + 656);
            if (lpsrc.__r_.__value_.__l.__size_)
            {
              v55 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
              do
                v56 = __ldxr(v55);
              while (__stxr(v56 + 1, v55));
            }
          }
          else
          {
            *(_OWORD *)&v661.__r_.__value_.__l.__data_ = 0uLL;
            v54 = (uint64_t *)(a1 + 16 * v17 + 656);
          }
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v54, (__int128 *)&v661);
          v57 = (std::__shared_weak_count *)v661.__r_.__value_.__l.__size_;
          if (v661.__r_.__value_.__l.__size_)
          {
            v58 = (unint64_t *)(v661.__r_.__value_.__l.__size_ + 8);
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          v60 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
          if (lpsrc.__r_.__value_.__l.__size_)
          {
            v61 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v63 = (std::__shared_weak_count *)v645.__r_.__value_.__l.__size_;
          if (v645.__r_.__value_.__l.__size_)
          {
            v64 = (unint64_t *)(v645.__r_.__value_.__l.__size_ + 8);
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          std::to_string(&__p, v17);
          v66 = std::string::insert(&__p, 0, "Wh_");
          v67 = v66->__r_.__value_.__r.__words[0];
          v661.__r_.__value_.__r.__words[0] = v66->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v661.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
          v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
          v66->__r_.__value_.__l.__size_ = 0;
          v66->__r_.__value_.__r.__words[2] = 0;
          v66->__r_.__value_.__r.__words[0] = 0;
          v69 = *v54;
          if (*(char *)(v69 + 199) < 0)
            operator delete(*(void **)(v69 + 176));
          v70 = v661.__r_.__value_.__r.__words[0];
          *(_QWORD *)(v69 + 176) = v67;
          *(_QWORD *)(v69 + 184) = v70;
          *(_QWORD *)(v69 + 191) = *(std::string::size_type *)((char *)v661.__r_.__value_.__r.__words + 7);
          *(_BYTE *)(v69 + 199) = v68;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v626[6] = *(_OWORD *)v656;
          v626[7] = *(_OWORD *)&v656[16];
          v627 = *(_DWORD *)&v656[32];
          v626[2] = *(_OWORD *)&v653[32];
          v626[3] = *(_OWORD *)&v653[48];
          v626[4] = v654;
          v626[5] = v655;
          v626[0] = *(_OWORD *)v653;
          v626[1] = *(_OWORD *)&v653[16];
          Espresso::generic_rnn_arch_kernel_impl::__initialize_dynamic_quantization(a1, (uint64_t)v626, v17, v610, v609, v608);
          v11 = a1 + 8;
        }
        std::operator+<char>();
        v71 = *(unsigned __int8 *)(a3 + 23);
        if ((v71 & 0x80u) == 0)
          v72 = *(unsigned __int8 *)(a3 + 23);
        else
          v72 = *(_QWORD *)(a3 + 8);
        v73 = v653[23];
        v74 = v653[23];
        if (v653[23] < 0)
          v73 = *(_QWORD *)&v653[8];
        if (v72 != v73)
          goto LABEL_97;
        if (v653[23] >= 0)
          v75 = v653;
        else
          v75 = *(unsigned __int8 **)v653;
        if ((v71 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v75, *(_QWORD *)(a3 + 8)))
            goto LABEL_97;
        }
        else if (*(_BYTE *)(a3 + 23))
        {
          v76 = (unsigned __int8 *)a3;
          while (*v76 == *v75)
          {
            ++v76;
            ++v75;
            if (!--v71)
              goto LABEL_120;
          }
LABEL_97:
          std::operator+<char>();
          v77 = *(unsigned __int8 *)(a3 + 23);
          if ((v77 & 0x80u) == 0)
            v78 = *(unsigned __int8 *)(a3 + 23);
          else
            v78 = *(_QWORD *)(a3 + 8);
          v79 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v80 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v79 = __p.__r_.__value_.__l.__size_;
          if (v78 == v79)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((v77 & 0x80) != 0)
            {
              v89 = memcmp(*(const void **)a3, p_p, *(_QWORD *)(a3 + 8)) == 0;
              if ((v80 & 0x80000000) == 0)
                goto LABEL_115;
            }
            else if (*(_BYTE *)(a3 + 23))
            {
              v82 = v77 - 1;
              v83 = (unsigned __int8 *)a3;
              do
              {
                v85 = *v83++;
                v84 = v85;
                v87 = p_p->__r_.__value_.__s.__data_[0];
                p_p = (std::string *)((char *)p_p + 1);
                v86 = v87;
                _CF = v82-- != 0;
                v88 = _CF;
                v89 = v84 == v86;
              }
              while (v84 == v86 && (v88 & 1) != 0);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_115:
                if ((v653[23] & 0x80) == 0)
                  goto LABEL_116;
                goto LABEL_121;
              }
            }
            else
            {
              v89 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_115;
            }
          }
          else
          {
            v89 = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_115;
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_115;
        }
LABEL_120:
        v89 = 1;
        if ((v74 & 0x80) == 0)
        {
LABEL_116:
          if (v89)
            goto LABEL_117;
          goto LABEL_122;
        }
LABEL_121:
        operator delete(*(void **)v653);
        if (v89)
        {
LABEL_117:
          v90 = *(_QWORD *)v21;
          std::string::basic_string[abi:ne180100]<0>(v653, "W_int8");
          (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v90 + 160))(v90, a2, v653, a4, a5, 0);
          goto LABEL_358;
        }
LABEL_122:
        std::operator+<char>();
        v91 = *(unsigned __int8 *)(a3 + 23);
        if ((v91 & 0x80u) == 0)
          v92 = *(unsigned __int8 *)(a3 + 23);
        else
          v92 = *(_QWORD *)(a3 + 8);
        v93 = v653[23];
        v94 = v653[23];
        if (v653[23] < 0)
          v93 = *(_QWORD *)&v653[8];
        if (v92 != v93)
          goto LABEL_249;
        if (v653[23] >= 0)
          v95 = v653;
        else
          v95 = *(unsigned __int8 **)v653;
        if ((v91 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v95, *(_QWORD *)(a3 + 8)))
            goto LABEL_249;
        }
        else if (*(_BYTE *)(a3 + 23))
        {
          v96 = (unsigned __int8 *)a3;
          while (*v96 == *v95)
          {
            ++v96;
            ++v95;
            if (!--v91)
              goto LABEL_272;
          }
LABEL_249:
          std::operator+<char>();
          v157 = *(unsigned __int8 *)(a3 + 23);
          if ((v157 & 0x80u) == 0)
            v158 = *(unsigned __int8 *)(a3 + 23);
          else
            v158 = *(_QWORD *)(a3 + 8);
          v159 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v160 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v159 = __p.__r_.__value_.__l.__size_;
          if (v158 == v159)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v161 = &__p;
            else
              v161 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((v157 & 0x80) != 0)
            {
              v169 = memcmp(*(const void **)a3, v161, *(_QWORD *)(a3 + 8)) == 0;
              if ((v160 & 0x80000000) == 0)
                goto LABEL_267;
            }
            else if (*(_BYTE *)(a3 + 23))
            {
              v162 = v157 - 1;
              v163 = (unsigned __int8 *)a3;
              do
              {
                v165 = *v163++;
                v164 = v165;
                v167 = v161->__r_.__value_.__s.__data_[0];
                v161 = (std::string *)((char *)v161 + 1);
                v166 = v167;
                _CF = v162-- != 0;
                v168 = _CF;
                v169 = v164 == v166;
              }
              while (v164 == v166 && (v168 & 1) != 0);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_267:
                if ((v653[23] & 0x80) == 0)
                  goto LABEL_268;
                goto LABEL_273;
              }
            }
            else
            {
              v169 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_267;
            }
          }
          else
          {
            v169 = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_267;
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_267;
        }
LABEL_272:
        v169 = 1;
        if ((v94 & 0x80) == 0)
        {
LABEL_268:
          if (v169)
            goto LABEL_269;
          goto LABEL_274;
        }
LABEL_273:
        operator delete(*(void **)v653);
        if (v169)
        {
LABEL_269:
          v170 = *v619;
          std::string::basic_string[abi:ne180100]<0>(v653, "W_int8");
          (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v170
                                                                                                 + 160))(v170, a2, v653, a4, a5, 0);
          goto LABEL_358;
        }
LABEL_274:
        std::operator+<char>();
        v171 = *(unsigned __int8 *)(a3 + 23);
        if ((v171 & 0x80u) == 0)
          v172 = *(unsigned __int8 *)(a3 + 23);
        else
          v172 = *(_QWORD *)(a3 + 8);
        v173 = v653[23];
        v174 = v653[23];
        if (v653[23] < 0)
          v173 = *(_QWORD *)&v653[8];
        if (v172 != v173)
          goto LABEL_337;
        if (v653[23] >= 0)
          v175 = v653;
        else
          v175 = *(unsigned __int8 **)v653;
        if ((v171 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v175, *(_QWORD *)(a3 + 8)))
            goto LABEL_337;
LABEL_362:
          v209 = 1;
          if ((v174 & 0x80) == 0)
            goto LABEL_356;
LABEL_363:
          operator delete(*(void **)v653);
          if (!v209)
            goto LABEL_364;
LABEL_357:
          v210 = *(_QWORD *)v21;
          std::string::basic_string[abi:ne180100]<0>(v653, "W_t_int8");
          (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v210
                                                                                                 + 160))(v210, a2, v653, a4, a5, 0);
LABEL_358:
          if ((v653[23] & 0x80000000) == 0)
            goto LABEL_827;
          goto LABEL_826;
        }
        if (!*(_BYTE *)(a3 + 23))
          goto LABEL_362;
        v176 = (unsigned __int8 *)a3;
        while (*v176 == *v175)
        {
          ++v176;
          ++v175;
          if (!--v171)
            goto LABEL_362;
        }
LABEL_337:
        std::operator+<char>();
        v197 = *(unsigned __int8 *)(a3 + 23);
        if ((v197 & 0x80u) == 0)
          v198 = *(unsigned __int8 *)(a3 + 23);
        else
          v198 = *(_QWORD *)(a3 + 8);
        v199 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v200 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v199 = __p.__r_.__value_.__l.__size_;
        if (v198 != v199)
        {
          v209 = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_355;
LABEL_361:
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_355;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v201 = &__p;
        else
          v201 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((v197 & 0x80) != 0)
        {
          v209 = memcmp(*(const void **)a3, v201, *(_QWORD *)(a3 + 8)) == 0;
          if (v200 < 0)
            goto LABEL_361;
        }
        else if (*(_BYTE *)(a3 + 23))
        {
          v202 = v197 - 1;
          v203 = (unsigned __int8 *)a3;
          do
          {
            v205 = *v203++;
            v204 = v205;
            v207 = v201->__r_.__value_.__s.__data_[0];
            v201 = (std::string *)((char *)v201 + 1);
            v206 = v207;
            _CF = v202-- != 0;
            v208 = _CF;
            v209 = v204 == v206;
          }
          while (v204 == v206 && (v208 & 1) != 0);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_361;
        }
        else
        {
          v209 = 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_361;
        }
LABEL_355:
        if ((v653[23] & 0x80) != 0)
          goto LABEL_363;
LABEL_356:
        if (v209)
          goto LABEL_357;
LABEL_364:
        std::operator+<char>();
        v211 = *(unsigned __int8 *)(a3 + 23);
        if ((v211 & 0x80u) == 0)
          v212 = *(unsigned __int8 *)(a3 + 23);
        else
          v212 = *(_QWORD *)(a3 + 8);
        v213 = v653[23];
        v214 = v653[23];
        if (v653[23] < 0)
          v213 = *(_QWORD *)&v653[8];
        if (v212 != v213)
          goto LABEL_429;
        if (v653[23] >= 0)
          v215 = v653;
        else
          v215 = *(unsigned __int8 **)v653;
        if ((v211 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v215, *(_QWORD *)(a3 + 8)))
            goto LABEL_429;
        }
        else if (*(_BYTE *)(a3 + 23))
        {
          v216 = (unsigned __int8 *)a3;
          while (*v216 == *v215)
          {
            ++v216;
            ++v215;
            if (!--v211)
              goto LABEL_452;
          }
LABEL_429:
          std::operator+<char>();
          v237 = *(unsigned __int8 *)(a3 + 23);
          if ((v237 & 0x80u) == 0)
            v238 = *(unsigned __int8 *)(a3 + 23);
          else
            v238 = *(_QWORD *)(a3 + 8);
          v239 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v240 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v239 = __p.__r_.__value_.__l.__size_;
          if (v238 == v239)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v241 = &__p;
            else
              v241 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((v237 & 0x80) != 0)
            {
              v249 = memcmp(*(const void **)a3, v241, *(_QWORD *)(a3 + 8)) == 0;
              if ((v240 & 0x80000000) == 0)
                goto LABEL_447;
            }
            else if (*(_BYTE *)(a3 + 23))
            {
              v242 = v237 - 1;
              v243 = (unsigned __int8 *)a3;
              do
              {
                v245 = *v243++;
                v244 = v245;
                v247 = v241->__r_.__value_.__s.__data_[0];
                v241 = (std::string *)((char *)v241 + 1);
                v246 = v247;
                _CF = v242-- != 0;
                v248 = _CF;
                v249 = v244 == v246;
              }
              while (v244 == v246 && (v248 & 1) != 0);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_447:
                if ((v653[23] & 0x80) == 0)
                  goto LABEL_448;
                goto LABEL_453;
              }
            }
            else
            {
              v249 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_447;
            }
          }
          else
          {
            v249 = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_447;
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_447;
        }
LABEL_452:
        v249 = 1;
        if ((v214 & 0x80) == 0)
        {
LABEL_448:
          if (v249)
            goto LABEL_449;
          goto LABEL_454;
        }
LABEL_453:
        operator delete(*(void **)v653);
        if (v249)
        {
LABEL_449:
          v250 = *v619;
          std::string::basic_string[abi:ne180100]<0>(v653, "W_t_int8");
          (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v250
                                                                                                 + 160))(v250, a2, v653, a4, a5, 0);
          goto LABEL_825;
        }
LABEL_454:
        std::operator+<char>();
        v251 = std::string::append(&__p, "_Qbias");
        *(std::string *)v653 = *v251;
        v251->__r_.__value_.__l.__size_ = 0;
        v251->__r_.__value_.__r.__words[2] = 0;
        v251->__r_.__value_.__r.__words[0] = 0;
        v252 = *(unsigned __int8 *)(a3 + 23);
        if ((v252 & 0x80u) == 0)
          v253 = *(unsigned __int8 *)(a3 + 23);
        else
          v253 = *(_QWORD *)(a3 + 8);
        v254 = v653[23];
        v255 = v653[23];
        if (v653[23] < 0)
          v254 = *(_QWORD *)&v653[8];
        if (v253 != v254)
        {
          v264 = 0;
          if ((v653[23] & 0x80000000) == 0)
            goto LABEL_472;
LABEL_477:
          operator delete(*(void **)v653);
          goto LABEL_472;
        }
        if (v653[23] >= 0)
          v256 = v653;
        else
          v256 = *(unsigned __int8 **)v653;
        if ((v252 & 0x80) != 0)
        {
          v264 = memcmp(*(const void **)a3, v256, *(_QWORD *)(a3 + 8)) == 0;
          if (v255 < 0)
            goto LABEL_477;
        }
        else if (*(_BYTE *)(a3 + 23))
        {
          v257 = v252 - 1;
          v258 = (unsigned __int8 *)a3;
          do
          {
            v260 = *v258++;
            v259 = v260;
            v262 = *v256++;
            v261 = v262;
            _CF = v257-- != 0;
            v263 = _CF;
            v264 = v259 == v261;
          }
          while (v259 == v261 && (v263 & 1) != 0);
          if ((v653[23] & 0x80000000) != 0)
            goto LABEL_477;
        }
        else
        {
          v264 = 1;
          if ((v653[23] & 0x80000000) != 0)
            goto LABEL_477;
        }
LABEL_472:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v264)
          {
LABEL_474:
            v265 = *(_QWORD *)(a1 + 16 * v17 + 520);
            if (!v265)
              goto LABEL_827;
            goto LABEL_744;
          }
        }
        else if (v264)
        {
          goto LABEL_474;
        }
        std::operator+<char>();
        v266 = std::string::append(&__p, "_Qrow_sums");
        *(std::string *)v653 = *v266;
        v266->__r_.__value_.__l.__size_ = 0;
        v266->__r_.__value_.__r.__words[2] = 0;
        v266->__r_.__value_.__r.__words[0] = 0;
        v267 = *(unsigned __int8 *)(a3 + 23);
        if ((v267 & 0x80u) == 0)
          v268 = *(unsigned __int8 *)(a3 + 23);
        else
          v268 = *(_QWORD *)(a3 + 8);
        v269 = v653[23];
        v270 = v653[23];
        if (v653[23] < 0)
          v269 = *(_QWORD *)&v653[8];
        if (v268 != v269)
        {
          v279 = 0;
          if ((v653[23] & 0x80000000) == 0)
            goto LABEL_592;
LABEL_506:
          operator delete(*(void **)v653);
          goto LABEL_592;
        }
        if (v653[23] >= 0)
          v271 = v653;
        else
          v271 = *(unsigned __int8 **)v653;
        if ((v267 & 0x80) != 0)
        {
          v279 = memcmp(*(const void **)a3, v271, *(_QWORD *)(a3 + 8)) == 0;
          goto LABEL_591;
        }
        if (*(_BYTE *)(a3 + 23))
        {
          v272 = v267 - 1;
          v273 = (unsigned __int8 *)a3;
          do
          {
            v275 = *v273++;
            v274 = v275;
            v277 = *v271++;
            v276 = v277;
            _CF = v272-- != 0;
            v278 = _CF;
            v279 = v274 == v276;
          }
          while (v274 == v276 && (v278 & 1) != 0);
LABEL_591:
          if (v270 < 0)
            goto LABEL_506;
          goto LABEL_592;
        }
        v279 = 1;
        if ((v653[23] & 0x80000000) != 0)
          goto LABEL_506;
LABEL_592:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v279)
          {
LABEL_594:
            v322 = *(_QWORD *)(a1 + 16 * v17 + 520);
            if (!v322)
              goto LABEL_827;
LABEL_800:
            std::string::basic_string[abi:ne180100]<0>(v653, "Qrow_sums");
            (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v322 + 160))(v322, a2, v653, a4, a5, 0);
            goto LABEL_825;
          }
        }
        else if (v279)
        {
          goto LABEL_594;
        }
        std::operator+<char>();
        v323 = std::string::append(&__p, "_Qscale");
        *(std::string *)v653 = *v323;
        v323->__r_.__value_.__l.__size_ = 0;
        v323->__r_.__value_.__r.__words[2] = 0;
        v323->__r_.__value_.__r.__words[0] = 0;
        v324 = *(unsigned __int8 *)(a3 + 23);
        if ((v324 & 0x80u) == 0)
          v325 = *(unsigned __int8 *)(a3 + 23);
        else
          v325 = *(_QWORD *)(a3 + 8);
        v326 = v653[23];
        v327 = v653[23];
        if (v653[23] < 0)
          v326 = *(_QWORD *)&v653[8];
        if (v325 != v326)
        {
          v336 = 0;
          if ((v653[23] & 0x80000000) == 0)
            goto LABEL_651;
LABEL_616:
          operator delete(*(void **)v653);
          goto LABEL_651;
        }
        if (v653[23] >= 0)
          v328 = v653;
        else
          v328 = *(unsigned __int8 **)v653;
        if ((v324 & 0x80) != 0)
        {
          v336 = memcmp(*(const void **)a3, v328, *(_QWORD *)(a3 + 8)) == 0;
          goto LABEL_650;
        }
        if (*(_BYTE *)(a3 + 23))
        {
          v329 = v324 - 1;
          v330 = (unsigned __int8 *)a3;
          do
          {
            v332 = *v330++;
            v331 = v332;
            v334 = *v328++;
            v333 = v334;
            _CF = v329-- != 0;
            v335 = _CF;
            v336 = v331 == v333;
          }
          while (v331 == v333 && (v335 & 1) != 0);
LABEL_650:
          if (v327 < 0)
            goto LABEL_616;
          goto LABEL_651;
        }
        v336 = 1;
        if ((v653[23] & 0x80000000) != 0)
          goto LABEL_616;
LABEL_651:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v336)
            goto LABEL_653;
LABEL_656:
          std::operator+<char>();
          v352 = std::string::append(&__p, "_Qbias");
          *(std::string *)v653 = *v352;
          v352->__r_.__value_.__l.__size_ = 0;
          v352->__r_.__value_.__r.__words[2] = 0;
          v352->__r_.__value_.__r.__words[0] = 0;
          v353 = *(unsigned __int8 *)(a3 + 23);
          if ((v353 & 0x80u) == 0)
            v354 = *(unsigned __int8 *)(a3 + 23);
          else
            v354 = *(_QWORD *)(a3 + 8);
          v355 = v653[23];
          v356 = v653[23];
          if (v653[23] < 0)
            v355 = *(_QWORD *)&v653[8];
          if (v354 == v355)
          {
            if (v653[23] >= 0)
              v357 = v653;
            else
              v357 = *(unsigned __int8 **)v653;
            if ((v353 & 0x80) != 0)
            {
              v365 = memcmp(*(const void **)a3, v357, *(_QWORD *)(a3 + 8)) == 0;
            }
            else if (*(_BYTE *)(a3 + 23))
            {
              v358 = v353 - 1;
              v359 = (unsigned __int8 *)a3;
              do
              {
                v361 = *v359++;
                v360 = v361;
                v363 = *v357++;
                v362 = v363;
                _CF = v358-- != 0;
                v364 = _CF;
                v365 = v360 == v362;
              }
              while (v360 == v362 && (v364 & 1) != 0);
            }
            else
            {
              v365 = 1;
            }
          }
          else
          {
            v365 = 0;
          }
          if (v356 < 0)
            operator delete(*(void **)v653);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (v365)
              goto LABEL_713;
            goto LABEL_716;
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!v365)
          {
LABEL_716:
            std::operator+<char>();
            v380 = std::string::append(&__p, "_Qrow_sums");
            *(std::string *)v653 = *v380;
            v380->__r_.__value_.__l.__size_ = 0;
            v380->__r_.__value_.__r.__words[2] = 0;
            v380->__r_.__value_.__r.__words[0] = 0;
            v381 = *(unsigned __int8 *)(a3 + 23);
            if ((v381 & 0x80u) == 0)
              v382 = *(unsigned __int8 *)(a3 + 23);
            else
              v382 = *(_QWORD *)(a3 + 8);
            v383 = v653[23];
            v384 = v653[23];
            if (v653[23] < 0)
              v383 = *(_QWORD *)&v653[8];
            if (v382 == v383)
            {
              if (v653[23] >= 0)
                v385 = v653;
              else
                v385 = *(unsigned __int8 **)v653;
              if ((v381 & 0x80) != 0)
              {
                v393 = memcmp(*(const void **)a3, v385, *(_QWORD *)(a3 + 8)) == 0;
              }
              else if (*(_BYTE *)(a3 + 23))
              {
                v386 = v381 - 1;
                v387 = (unsigned __int8 *)a3;
                do
                {
                  v389 = *v387++;
                  v388 = v389;
                  v391 = *v385++;
                  v390 = v391;
                  _CF = v386-- != 0;
                  v392 = _CF;
                  v393 = v388 == v390;
                }
                while (v388 == v390 && (v392 & 1) != 0);
              }
              else
              {
                v393 = 1;
              }
            }
            else
            {
              v393 = 0;
            }
            if (v384 < 0)
              operator delete(*(void **)v653);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v393)
            {
              v322 = *(_QWORD *)(a1 + 16 * v17 + 584);
              if (!v322)
                goto LABEL_827;
              goto LABEL_800;
            }
            std::operator+<char>();
            v408 = std::string::append(&__p, "_Qscale");
            *(std::string *)v653 = *v408;
            v408->__r_.__value_.__l.__size_ = 0;
            v408->__r_.__value_.__r.__words[2] = 0;
            v408->__r_.__value_.__r.__words[0] = 0;
            v409 = *(unsigned __int8 *)(a3 + 23);
            if ((v409 & 0x80u) == 0)
              v410 = *(unsigned __int8 *)(a3 + 23);
            else
              v410 = *(_QWORD *)(a3 + 8);
            v411 = v653[23];
            v412 = v653[23];
            if (v653[23] < 0)
              v411 = *(_QWORD *)&v653[8];
            if (v410 == v411)
            {
              if (v653[23] >= 0)
                v413 = v653;
              else
                v413 = *(unsigned __int8 **)v653;
              if ((v409 & 0x80) != 0)
              {
                v421 = memcmp(*(const void **)a3, v413, *(_QWORD *)(a3 + 8)) == 0;
              }
              else if (*(_BYTE *)(a3 + 23))
              {
                v414 = v409 - 1;
                v415 = (unsigned __int8 *)a3;
                do
                {
                  v417 = *v415++;
                  v416 = v417;
                  v419 = *v413++;
                  v418 = v419;
                  _CF = v414-- != 0;
                  v420 = _CF;
                  v421 = v416 == v418;
                }
                while (v416 == v418 && (v420 & 1) != 0);
              }
              else
              {
                v421 = 1;
              }
            }
            else
            {
              v421 = 0;
            }
            if (v412 < 0)
              operator delete(*(void **)v653);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v421)
            {
              v351 = *(_QWORD *)(a1 + 16 * v17 + 584);
              if (!v351)
                goto LABEL_827;
              goto LABEL_824;
            }
            std::operator+<char>();
            v430 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
            if ((v653[23] & 0x80000000) != 0)
              operator delete(*(void **)v653);
            if (v430)
            {
              v625[0] = v659;
              v625[1] = v660;
              if (v660)
              {
                v431 = (unint64_t *)(v660 + 8);
                do
                  v432 = __ldxr(v431);
                while (__stxr(v432 + 1, v431));
              }
              Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(v653, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v625, 3, v20, v607 == 0);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v625);
              std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,2>> &,void>(&__p, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t *)v653);
              v661.__r_.__value_.__r.__words[0] = a3;
              v428 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v606, (_QWORD *)a3, (__int128 **)&v661);
              goto LABEL_838;
            }
            std::operator+<char>();
            if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653))
            {
              v433 = 1;
            }
            else
            {
              std::operator+<char>();
              v433 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, (unsigned __int8 *)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            if ((v653[23] & 0x80000000) != 0)
              operator delete(*(void **)v653);
            if (v433)
            {
              *(_OWORD *)v653 = 0uLL;
              v434 = a1 + 16 * v17;
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v434 + 704, (__int128 *)v653);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v653);
              Espresso::blob<unsigned char,2>::make(v653, v20);
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v434 + 736, (__int128 *)v653);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v653);
              v435 = *(_QWORD *)(v434 + 736);
              v436 = a5;
              if (*(int *)(v435 + 12) * (uint64_t)*(int *)(v435 + 8) != a5)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::to_string(&v642, a5);
                v514 = std::string::insert(&v642, 0, "Unexpected size s=");
                v515 = *(_OWORD *)&v514->__r_.__value_.__l.__data_;
                v643.__r_.__value_.__r.__words[2] = v514->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v643.__r_.__value_.__l.__data_ = v515;
                v514->__r_.__value_.__l.__size_ = 0;
                v514->__r_.__value_.__r.__words[2] = 0;
                v514->__r_.__value_.__r.__words[0] = 0;
                v516 = std::string::append(&v643, "/blob=");
                v517 = *(_OWORD *)&v516->__r_.__value_.__l.__data_;
                v644.__r_.__value_.__r.__words[2] = v516->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v644.__r_.__value_.__l.__data_ = v517;
                v516->__r_.__value_.__l.__size_ = 0;
                v516->__r_.__value_.__r.__words[2] = 0;
                v516->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v641, *(int *)(*(_QWORD *)(v434 + 736) + 12) * (uint64_t)*(int *)(*(_QWORD *)(v434 + 736) + 8));
                if ((v641.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v518 = &v641;
                else
                  v518 = (std::string *)v641.__r_.__value_.__r.__words[0];
                if ((v641.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v519 = HIBYTE(v641.__r_.__value_.__r.__words[2]);
                else
                  v519 = v641.__r_.__value_.__l.__size_;
                v520 = std::string::append(&v644, (const std::string::value_type *)v518, v519);
                v521 = *(_OWORD *)&v520->__r_.__value_.__l.__data_;
                v645.__r_.__value_.__r.__words[2] = v520->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v645.__r_.__value_.__l.__data_ = v521;
                v520->__r_.__value_.__l.__size_ = 0;
                v520->__r_.__value_.__r.__words[2] = 0;
                v520->__r_.__value_.__r.__words[0] = 0;
                std::string::basic_string[abi:ne180100]<0>(&v638, " @ ");
                if ((v640 & 0x80u) == 0)
                  v522 = (const std::string::value_type *)&v638;
                else
                  v522 = v638;
                if ((v640 & 0x80u) == 0)
                  v523 = v640;
                else
                  v523 = v639;
                v524 = std::string::append(&v645, v522, v523);
                v525 = *(_OWORD *)&v524->__r_.__value_.__l.__data_;
                lpsrc.__r_.__value_.__r.__words[2] = v524->__r_.__value_.__r.__words[2];
                *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v525;
                v524->__r_.__value_.__l.__size_ = 0;
                v524->__r_.__value_.__r.__words[2] = 0;
                v524->__r_.__value_.__r.__words[0] = 0;
                v526 = std::string::append(&lpsrc, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
                v527 = *(_OWORD *)&v526->__r_.__value_.__l.__data_;
                v661.__r_.__value_.__r.__words[2] = v526->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v661.__r_.__value_.__l.__data_ = v527;
                v526->__r_.__value_.__l.__size_ = 0;
                v526->__r_.__value_.__r.__words[2] = 0;
                v526->__r_.__value_.__r.__words[0] = 0;
                std::string::basic_string[abi:ne180100]<0>(&v635, ":");
                if ((v637 & 0x80u) == 0)
                  v528 = (const std::string::value_type *)&v635;
                else
                  v528 = v635;
                if ((v637 & 0x80u) == 0)
                  v529 = v637;
                else
                  v529 = v636;
                v530 = std::string::append(&v661, v528, v529);
                v531 = *(_OWORD *)&v530->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v530->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v531;
                v530->__r_.__value_.__l.__size_ = 0;
                v530->__r_.__value_.__r.__words[2] = 0;
                v530->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v634, 9262);
                if ((v634.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v532 = &v634;
                else
                  v532 = (std::string *)v634.__r_.__value_.__r.__words[0];
                if ((v634.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v533 = HIBYTE(v634.__r_.__value_.__r.__words[2]);
                else
                  v533 = v634.__r_.__value_.__l.__size_;
                v534 = std::string::append(&__p, (const std::string::value_type *)v532, v533);
                v535 = *(_OWORD *)&v534->__r_.__value_.__l.__data_;
                *(_QWORD *)&v653[16] = *((_QWORD *)&v534->__r_.__value_.__l + 2);
                *(_OWORD *)v653 = v535;
                v534->__r_.__value_.__l.__size_ = 0;
                v534->__r_.__value_.__r.__words[2] = 0;
                v534->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, (const std::string *)v653);
                __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              goto LABEL_873;
            }
            std::operator+<char>();
            v437 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
            if ((v653[23] & 0x80000000) != 0)
              operator delete(*(void **)v653);
            if (v437)
            {
              v438 = *v619;
              std::string::basic_string[abi:ne180100]<0>(v653, "Q");
              (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v438 + 168))(v438, a2, v653, a4, a5, 0);
              if ((v653[23] & 0x80000000) != 0)
                operator delete(*(void **)v653);
              v439 = *(_QWORD *)v21;
              std::string::basic_string[abi:ne180100]<0>(v653, "Q");
              (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v439 + 168))(v439, a2, v653, a4, a5, 0);
              if ((v653[23] & 0x80000000) != 0)
                operator delete(*(void **)v653);
              Espresso::blob<float,1>::make(v653, 2);
              v440 = a1 + 16 * v17 + 768;
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v440, (__int128 *)v653);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v653);
              v435 = *(_QWORD *)v440;
              v436 = a5;
              if (a5 != 4 * *(int *)(*(_QWORD *)v440 + 8))
              {
                v536 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::to_string(&v642, a5);
                v537 = std::string::insert(&v642, 0, "Unexpected size s=");
                v538 = *(_OWORD *)&v537->__r_.__value_.__l.__data_;
                v643.__r_.__value_.__r.__words[2] = v537->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v643.__r_.__value_.__l.__data_ = v538;
                v537->__r_.__value_.__l.__size_ = 0;
                v537->__r_.__value_.__r.__words[2] = 0;
                v537->__r_.__value_.__r.__words[0] = 0;
                v539 = std::string::append(&v643, "/blob=");
                v540 = *(_OWORD *)&v539->__r_.__value_.__l.__data_;
                v644.__r_.__value_.__r.__words[2] = v539->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v644.__r_.__value_.__l.__data_ = v540;
                v539->__r_.__value_.__l.__size_ = 0;
                v539->__r_.__value_.__r.__words[2] = 0;
                v539->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v641, 4 * *(int *)(*(_QWORD *)v440 + 8));
                if ((v641.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v541 = &v641;
                else
                  v541 = (std::string *)v641.__r_.__value_.__r.__words[0];
                if ((v641.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v542 = HIBYTE(v641.__r_.__value_.__r.__words[2]);
                else
                  v542 = v641.__r_.__value_.__l.__size_;
                v543 = std::string::append(&v644, (const std::string::value_type *)v541, v542);
                v544 = *(_OWORD *)&v543->__r_.__value_.__l.__data_;
                v645.__r_.__value_.__r.__words[2] = v543->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v645.__r_.__value_.__l.__data_ = v544;
                v543->__r_.__value_.__l.__size_ = 0;
                v543->__r_.__value_.__r.__words[2] = 0;
                v543->__r_.__value_.__r.__words[0] = 0;
                std::string::basic_string[abi:ne180100]<0>(&v638, " @ ");
                if ((v640 & 0x80u) == 0)
                  v545 = (const std::string::value_type *)&v638;
                else
                  v545 = v638;
                if ((v640 & 0x80u) == 0)
                  v546 = v640;
                else
                  v546 = v639;
                v547 = std::string::append(&v645, v545, v546);
                v548 = *(_OWORD *)&v547->__r_.__value_.__l.__data_;
                lpsrc.__r_.__value_.__r.__words[2] = v547->__r_.__value_.__r.__words[2];
                *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v548;
                v547->__r_.__value_.__l.__size_ = 0;
                v547->__r_.__value_.__r.__words[2] = 0;
                v547->__r_.__value_.__r.__words[0] = 0;
                v549 = std::string::append(&lpsrc, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
                v550 = *(_OWORD *)&v549->__r_.__value_.__l.__data_;
                v661.__r_.__value_.__r.__words[2] = v549->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v661.__r_.__value_.__l.__data_ = v550;
                v549->__r_.__value_.__l.__size_ = 0;
                v549->__r_.__value_.__r.__words[2] = 0;
                v549->__r_.__value_.__r.__words[0] = 0;
                std::string::basic_string[abi:ne180100]<0>(&v635, ":");
                if ((v637 & 0x80u) == 0)
                  v551 = (const std::string::value_type *)&v635;
                else
                  v551 = v635;
                if ((v637 & 0x80u) == 0)
                  v552 = v637;
                else
                  v552 = v636;
                v553 = std::string::append(&v661, v551, v552);
                v554 = *(_OWORD *)&v553->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v553->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v554;
                v553->__r_.__value_.__l.__size_ = 0;
                v553->__r_.__value_.__r.__words[2] = 0;
                v553->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v634, 9270);
                if ((v634.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v555 = &v634;
                else
                  v555 = (std::string *)v634.__r_.__value_.__r.__words[0];
                if ((v634.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v556 = HIBYTE(v634.__r_.__value_.__r.__words[2]);
                else
                  v556 = v634.__r_.__value_.__l.__size_;
                v557 = std::string::append(&__p, (const std::string::value_type *)v555, v556);
                v558 = *(_OWORD *)&v557->__r_.__value_.__l.__data_;
                *(_QWORD *)&v653[16] = *((_QWORD *)&v557->__r_.__value_.__l + 2);
                *(_OWORD *)v653 = v558;
                v557->__r_.__value_.__l.__size_ = 0;
                v557->__r_.__value_.__r.__words[2] = 0;
                v557->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v536, (const std::string *)v653);
                __cxa_throw(v536, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              goto LABEL_873;
            }
            std::operator+<char>();
            v446 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
            if ((v653[23] & 0x80000000) != 0)
              operator delete(*(void **)v653);
            if (v446)
            {
              v447 = v20;
              v448 = *(_QWORD *)v21;
              std::string::basic_string[abi:ne180100]<0>(v653, "W");
              (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v448 + 160))(v448, a2, v653, a4, a5, 0);
              if ((v653[23] & 0x80000000) != 0)
                operator delete(*(void **)v653);
              v624[0] = v659;
              v624[1] = v660;
              if (v660)
              {
                v449 = (unint64_t *)(v660 + 8);
                do
                  v450 = __ldxr(v449);
                while (__stxr(v450 + 1, v449));
              }
              if (v19)
                v451 = 1;
              else
                v451 = 2;
              Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(v653, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v624, v614, v447 << v451, v607 == 0);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v624);
              std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,2>> &,void>(&__p, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t *)v653);
              v661.__r_.__value_.__r.__words[0] = a3;
              v452 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v606, (_QWORD *)a3, (__int128 **)&v661);
              goto LABEL_916;
            }
            std::operator+<char>();
            v457 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
            if ((v653[23] & 0x80000000) != 0)
              operator delete(*(void **)v653);
            if (v457)
            {
              v458 = v20;
              v459 = *v619;
              std::string::basic_string[abi:ne180100]<0>(v653, "W");
              (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v459 + 160))(v459, a2, v653, a4, a5, 0);
              if ((v653[23] & 0x80000000) != 0)
                operator delete(*(void **)v653);
              v623[0] = v659;
              v623[1] = v660;
              if (v660)
              {
                v460 = (unint64_t *)(v660 + 8);
                do
                  v461 = __ldxr(v460);
                while (__stxr(v461 + 1, v460));
              }
              if (v19)
                v462 = 1;
              else
                v462 = 2;
              Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(v653, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v623, v458, v458 << v462, v607 == 0);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v623);
              std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,2>> &,void>(&__p, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t *)v653);
              v661.__r_.__value_.__r.__words[0] = a3;
              v452 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v606, (_QWORD *)a3, (__int128 **)&v661);
              goto LABEL_916;
            }
            std::operator+<char>();
            v467 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
            if ((v653[23] & 0x80000000) != 0)
              operator delete(*(void **)v653);
            if (v467)
            {
              v468 = *(_QWORD *)v21;
              std::string::basic_string[abi:ne180100]<0>(v653, "W_f16");
              (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v468 + 160))(v468, a2, v653, a4, a5, 0);
              goto LABEL_825;
            }
            std::operator+<char>();
            v471 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
            if ((v653[23] & 0x80000000) != 0)
              operator delete(*(void **)v653);
            if (v471)
            {
              v472 = *v619;
              std::string::basic_string[abi:ne180100]<0>(v653, "W_f16");
              (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v472 + 160))(v472, a2, v653, a4, a5, 0);
              goto LABEL_993;
            }
            v475 = v20;
            std::operator+<char>();
            v476 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
            if ((v653[23] & 0x80000000) != 0)
              operator delete(*(void **)v653);
            if (v476)
            {
              v477 = *(_QWORD *)(a1 + 16 * v17 + 520);
              if (v477)
                goto LABEL_937;
              v622[0] = v659;
              v622[1] = v660;
              if (v660)
              {
                v484 = (unint64_t *)(v660 + 8);
                do
                  v485 = __ldxr(v484);
                while (__stxr(v485 + 1, v484));
              }
              if (v19)
                v486 = 1;
              else
                v486 = 2;
              Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(v653, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v622, v475 << v486, v607 == 0);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v622);
              std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,1>> &,void>(&__p, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t *)v653);
              v661.__r_.__value_.__r.__words[0] = a3;
              v487 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v606, (_QWORD *)a3, (__int128 **)&v661);
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v487 + 7), (__int128 *)&__p);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
              v488 = *(_QWORD *)v21;
              v621 = *(_OWORD *)v653;
              if (*(_QWORD *)&v653[8])
              {
                v489 = (unint64_t *)(*(_QWORD *)&v653[8] + 8);
                do
                  v490 = __ldxr(v489);
                while (__stxr(v490 + 1, v489));
              }
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v488 + 392))(v488, &v621);
              v491 = &v621;
              goto LABEL_980;
            }
            std::operator+<char>();
            v479 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
            if ((v653[23] & 0x80000000) != 0)
              operator delete(*(void **)v653);
            if (v479)
              goto LABEL_946;
            std::operator+<char>();
            v482 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
            if ((v653[23] & 0x80000000) != 0)
              operator delete(*(void **)v653);
            if (v482)
            {
              v483 = *v619;
              std::string::basic_string[abi:ne180100]<0>(v653, "w_f32_t");
              (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v483 + 160))(v483, a2, v653, a4, a5, 0);
              goto LABEL_993;
            }
            std::operator+<char>();
            v494 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
            if ((v653[23] & 0x80000000) != 0)
              operator delete(*(void **)v653);
            if (v494)
            {
LABEL_972:
              v495 = *(_QWORD *)v21;
              std::string::basic_string[abi:ne180100]<0>(v653, "w_f16_t");
              (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v495 + 160))(v495, a2, v653, a4, a5, 0);
              goto LABEL_993;
            }
            std::operator+<char>();
            v503 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
            if ((v653[23] & 0x80000000) != 0)
              operator delete(*(void **)v653);
            if (v503)
            {
              v504 = *v619;
              std::string::basic_string[abi:ne180100]<0>(v653, "w_f16_t");
              (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v504 + 160))(v504, a2, v653, a4, a5, 0);
              goto LABEL_993;
            }
LABEL_996:
            Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob((_DWORD *)a1, a2, (const std::string *)a3, a4, a5, v605);
            v11 = a1 + 8;
            goto LABEL_827;
          }
LABEL_713:
          v265 = *(_QWORD *)(a1 + 16 * v17 + 584);
          if (!v265)
            goto LABEL_827;
LABEL_744:
          std::string::basic_string[abi:ne180100]<0>(v653, "Qbias");
          (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v265
                                                                                                 + 160))(v265, a2, v653, a4, a5, 0);
          goto LABEL_825;
        }
        if (!v336)
          goto LABEL_656;
LABEL_653:
        v351 = *(_QWORD *)(a1 + 16 * v17 + 520);
        if (!v351)
          goto LABEL_827;
LABEL_824:
        std::string::basic_string[abi:ne180100]<0>(v653, "Qscale");
        (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v351 + 160))(v351, a2, v653, a4, a5, 0);
LABEL_825:
        if ((v653[23] & 0x80000000) != 0)
LABEL_826:
          operator delete(*(void **)v653);
LABEL_827:
        if (v658 < 0)
          operator delete(v657);
        v9 = 1;
        v10 = 1;
        if ((v620 & 1) == 0)
          continue;
        v507 = (std::__shared_weak_count *)v660;
        if (v660)
        {
          v508 = (unint64_t *)(v660 + 8);
          do
            v509 = __ldaxr(v508);
          while (__stlxr(v509 - 1, v508));
          if (!v509)
          {
            ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
            std::__shared_weak_count::__release_weak(v507);
          }
        }
        return;
      case 1:
        v29 = *(_DWORD *)(a1 + 380);
        v618 = *(_DWORD *)(a1 + 384);
        v30 = a1 + 16 * v17;
        v21 = v30 + 624;
        if (!*(_QWORD *)(v30 + 624))
        {
          *(_DWORD *)&v653[52] = -1;
          *(_QWORD *)&v653[56] = _D8;
          *(_QWORD *)((char *)&v655 + 4) = 0;
          memset(&v656[4], 0, 32);
          *(_DWORD *)v653 = v29;
          *(_DWORD *)&v653[4] = v618;
          *(_QWORD *)&v653[12] = 0;
          *(_QWORD *)&v653[20] = _D8;
          *(_QWORD *)&v653[44] = 0;
          *(_QWORD *)&v653[28] = 0;
          v31 = *(_DWORD *)(a1 + 396);
          v653[40] = *(_BYTE *)(a1 + 456);
          *(_QWORD *)&v653[8] = v31 != 5;
          *(_DWORD *)&v653[36] = v31;
          Espresso::abstract_engine_factory::shared(&v645);
          v32 = v645.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__p, "inner_product");
          LODWORD(v644.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)v11 + 8))(*(_QWORD *)(*(_QWORD *)v11 + 8));
          Espresso::abstract_engine_factory::make_kernel_priv(v32, v11, (uint64_t)&__p, (uint64_t)v653, (int *)&v644);
          if (lpsrc.__r_.__value_.__r.__words[0]
          {
            v661.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
            v661.__r_.__value_.__l.__size_ = lpsrc.__r_.__value_.__l.__size_;
            if (lpsrc.__r_.__value_.__l.__size_)
            {
              v34 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
          }
          else
          {
            *(_OWORD *)&v661.__r_.__value_.__l.__data_ = 0uLL;
          }
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v30 + 624, (__int128 *)&v661);
          v97 = (std::__shared_weak_count *)v661.__r_.__value_.__l.__size_;
          if (v661.__r_.__value_.__l.__size_)
          {
            v98 = (unint64_t *)(v661.__r_.__value_.__l.__size_ + 8);
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          v100 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
          if (lpsrc.__r_.__value_.__l.__size_)
          {
            v101 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v103 = (std::__shared_weak_count *)v645.__r_.__value_.__l.__size_;
          if (v645.__r_.__value_.__l.__size_)
          {
            v104 = (unint64_t *)(v645.__r_.__value_.__l.__size_ + 8);
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
            }
          }
          std::to_string(&__p, v17);
          v106 = std::string::insert(&__p, 0, "Wx_");
          v107 = v106->__r_.__value_.__r.__words[0];
          v661.__r_.__value_.__r.__words[0] = v106->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v661.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v106->__r_.__value_.__r.__words[1] + 7);
          v108 = HIBYTE(v106->__r_.__value_.__r.__words[2]);
          v106->__r_.__value_.__l.__size_ = 0;
          v106->__r_.__value_.__r.__words[2] = 0;
          v106->__r_.__value_.__r.__words[0] = 0;
          v109 = *(_QWORD *)v21;
          if (*(char *)(*(_QWORD *)v21 + 199) < 0)
            operator delete(*(void **)(v109 + 176));
          v110 = v661.__r_.__value_.__r.__words[0];
          *(_QWORD *)(v109 + 176) = v107;
          *(_QWORD *)(v109 + 184) = v110;
          *(_QWORD *)(v109 + 191) = *(std::string::size_type *)((char *)v661.__r_.__value_.__r.__words + 7);
          *(_BYTE *)(v109 + 199) = v108;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v650[6] = *(_OWORD *)v656;
          v650[7] = *(_OWORD *)&v656[16];
          v651 = *(_DWORD *)&v656[32];
          v650[3] = *(_OWORD *)&v653[48];
          v650[5] = v655;
          v650[4] = v654;
          v650[1] = *(_OWORD *)&v653[16];
          v650[2] = *(_OWORD *)&v653[32];
          v650[0] = *(_OWORD *)v653;
          Espresso::generic_rnn_arch_kernel_impl::__initialize_dynamic_quantization(a1, (uint64_t)v650, v17, v613, v612, v611);
          v11 = a1 + 8;
        }
        v111 = v30 + 656;
        if (!*(_QWORD *)(v30 + 656))
        {
          *(_DWORD *)&v653[52] = -1;
          *(_QWORD *)&v653[56] = _D8;
          *(_QWORD *)((char *)&v655 + 4) = 0;
          memset(&v656[4], 0, 32);
          *(_DWORD *)v653 = v29;
          *(_DWORD *)&v653[4] = v29;
          *(_QWORD *)&v653[20] = _D8;
          *(_QWORD *)&v653[44] = 1;
          *(_QWORD *)&v653[28] = 0;
          *(_QWORD *)&v653[8] = 0;
          v653[40] = *(_BYTE *)(a1 + 456);
          v112 = *(_DWORD *)(a1 + 396);
          *(_DWORD *)&v653[16] = 0;
          *(_DWORD *)&v653[36] = v112;
          Espresso::abstract_engine_factory::shared(&v645);
          v113 = v645.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__p, "inner_product");
          LODWORD(v644.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)v11 + 8))(*(_QWORD *)(*(_QWORD *)v11 + 8));
          Espresso::abstract_engine_factory::make_kernel_priv(v113, v11, (uint64_t)&__p, (uint64_t)v653, (int *)&v644);
          if (lpsrc.__r_.__value_.__r.__words[0]
          {
            v661.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
            v661.__r_.__value_.__l.__size_ = lpsrc.__r_.__value_.__l.__size_;
            if (lpsrc.__r_.__value_.__l.__size_)
            {
              v115 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
              do
                v116 = __ldxr(v115);
              while (__stxr(v116 + 1, v115));
            }
          }
          else
          {
            *(_OWORD *)&v661.__r_.__value_.__l.__data_ = 0uLL;
          }
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v111, (__int128 *)&v661);
          v117 = (std::__shared_weak_count *)v661.__r_.__value_.__l.__size_;
          if (v661.__r_.__value_.__l.__size_)
          {
            v118 = (unint64_t *)(v661.__r_.__value_.__l.__size_ + 8);
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          v120 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
          if (lpsrc.__r_.__value_.__l.__size_)
          {
            v121 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v123 = (std::__shared_weak_count *)v645.__r_.__value_.__l.__size_;
          if (v645.__r_.__value_.__l.__size_)
          {
            v124 = (unint64_t *)(v645.__r_.__value_.__l.__size_ + 8);
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
          std::to_string(&__p, v17);
          v126 = std::string::insert(&__p, 0, "Wh_");
          v127 = v126->__r_.__value_.__r.__words[0];
          v661.__r_.__value_.__r.__words[0] = v126->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v661.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v126->__r_.__value_.__r.__words[1] + 7);
          v128 = HIBYTE(v126->__r_.__value_.__r.__words[2]);
          v126->__r_.__value_.__l.__size_ = 0;
          v126->__r_.__value_.__r.__words[2] = 0;
          v126->__r_.__value_.__r.__words[0] = 0;
          v129 = *(_QWORD *)v111;
          if (*(char *)(*(_QWORD *)v111 + 199) < 0)
            operator delete(*(void **)(v129 + 176));
          v130 = v661.__r_.__value_.__r.__words[0];
          *(_QWORD *)(v129 + 176) = v127;
          *(_QWORD *)(v129 + 184) = v130;
          *(_QWORD *)(v129 + 191) = *(std::string::size_type *)((char *)v661.__r_.__value_.__r.__words + 7);
          *(_BYTE *)(v129 + 199) = v128;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v648[6] = *(_OWORD *)v656;
          v648[7] = *(_OWORD *)&v656[16];
          v649 = *(_DWORD *)&v656[32];
          v648[2] = *(_OWORD *)&v653[32];
          v648[3] = *(_OWORD *)&v653[48];
          v648[4] = v654;
          v648[5] = v655;
          v648[0] = *(_OWORD *)v653;
          v648[1] = *(_OWORD *)&v653[16];
          Espresso::generic_rnn_arch_kernel_impl::__initialize_dynamic_quantization(a1, (uint64_t)v648, v17, v610, v609, v608);
          v11 = a1 + 8;
        }
        std::operator+<char>();
        v131 = *(unsigned __int8 *)(a3 + 23);
        if ((v131 & 0x80u) == 0)
          v132 = *(unsigned __int8 *)(a3 + 23);
        else
          v132 = *(_QWORD *)(a3 + 8);
        v133 = v653[23];
        v134 = v653[23];
        if (v653[23] < 0)
          v133 = *(_QWORD *)&v653[8];
        if (v132 != v133)
          goto LABEL_208;
        if (v653[23] >= 0)
          v135 = v653;
        else
          v135 = *(unsigned __int8 **)v653;
        if ((v131 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v135, *(_QWORD *)(a3 + 8)))
            goto LABEL_208;
        }
        else if (*(_BYTE *)(a3 + 23))
        {
          v136 = (unsigned __int8 *)a3;
          while (*v136 == *v135)
          {
            ++v136;
            ++v135;
            if (!--v131)
              goto LABEL_231;
          }
LABEL_208:
          std::operator+<char>();
          v137 = *(unsigned __int8 *)(a3 + 23);
          if ((v137 & 0x80u) == 0)
            v138 = *(unsigned __int8 *)(a3 + 23);
          else
            v138 = *(_QWORD *)(a3 + 8);
          v139 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v140 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v139 = __p.__r_.__value_.__l.__size_;
          if (v138 == v139)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v141 = &__p;
            else
              v141 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((v137 & 0x80) != 0)
            {
              v149 = memcmp(*(const void **)a3, v141, *(_QWORD *)(a3 + 8)) == 0;
              if ((v140 & 0x80000000) == 0)
                goto LABEL_226;
            }
            else if (*(_BYTE *)(a3 + 23))
            {
              v142 = v137 - 1;
              v143 = (unsigned __int8 *)a3;
              do
              {
                v145 = *v143++;
                v144 = v145;
                v147 = v141->__r_.__value_.__s.__data_[0];
                v141 = (std::string *)((char *)v141 + 1);
                v146 = v147;
                _CF = v142-- != 0;
                v148 = _CF;
                v149 = v144 == v146;
              }
              while (v144 == v146 && (v148 & 1) != 0);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_226:
                if ((v653[23] & 0x80) == 0)
                  goto LABEL_227;
                goto LABEL_232;
              }
            }
            else
            {
              v149 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_226;
            }
          }
          else
          {
            v149 = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_226;
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_226;
        }
LABEL_231:
        v149 = 1;
        if ((v134 & 0x80) == 0)
        {
LABEL_227:
          if (v149)
            goto LABEL_228;
          goto LABEL_233;
        }
LABEL_232:
        operator delete(*(void **)v653);
        if (v149)
        {
LABEL_228:
          v150 = *(_QWORD *)v21;
          std::string::basic_string[abi:ne180100]<0>(v653, "W_int8");
          (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v150
                                                                                                 + 160))(v150, a2, v653, a4, a5, 0);
          goto LABEL_825;
        }
LABEL_233:
        std::operator+<char>();
        v151 = *(unsigned __int8 *)(a3 + 23);
        if ((v151 & 0x80u) == 0)
          v152 = *(unsigned __int8 *)(a3 + 23);
        else
          v152 = *(_QWORD *)(a3 + 8);
        v153 = v653[23];
        v154 = v653[23];
        if (v653[23] < 0)
          v153 = *(_QWORD *)&v653[8];
        if (v152 != v153)
          goto LABEL_296;
        if (v653[23] >= 0)
          v155 = v653;
        else
          v155 = *(unsigned __int8 **)v653;
        if ((v151 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v155, *(_QWORD *)(a3 + 8)))
            goto LABEL_296;
        }
        else if (*(_BYTE *)(a3 + 23))
        {
          v156 = (unsigned __int8 *)a3;
          while (*v156 == *v155)
          {
            ++v156;
            ++v155;
            if (!--v151)
              goto LABEL_319;
          }
LABEL_296:
          std::operator+<char>();
          v177 = *(unsigned __int8 *)(a3 + 23);
          if ((v177 & 0x80u) == 0)
            v178 = *(unsigned __int8 *)(a3 + 23);
          else
            v178 = *(_QWORD *)(a3 + 8);
          v179 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v180 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v179 = __p.__r_.__value_.__l.__size_;
          if (v178 == v179)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v181 = &__p;
            else
              v181 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((v177 & 0x80) != 0)
            {
              v189 = memcmp(*(const void **)a3, v181, *(_QWORD *)(a3 + 8)) == 0;
              if ((v180 & 0x80000000) == 0)
                goto LABEL_314;
            }
            else if (*(_BYTE *)(a3 + 23))
            {
              v182 = v177 - 1;
              v183 = (unsigned __int8 *)a3;
              do
              {
                v185 = *v183++;
                v184 = v185;
                v187 = v181->__r_.__value_.__s.__data_[0];
                v181 = (std::string *)((char *)v181 + 1);
                v186 = v187;
                _CF = v182-- != 0;
                v188 = _CF;
                v189 = v184 == v186;
              }
              while (v184 == v186 && (v188 & 1) != 0);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_314:
                if ((v653[23] & 0x80) == 0)
                  goto LABEL_315;
                goto LABEL_320;
              }
            }
            else
            {
              v189 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_314;
            }
          }
          else
          {
            v189 = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_314;
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_314;
        }
LABEL_319:
        v189 = 1;
        if ((v154 & 0x80) == 0)
        {
LABEL_315:
          if (v189)
            goto LABEL_316;
          goto LABEL_321;
        }
LABEL_320:
        operator delete(*(void **)v653);
        if (v189)
        {
LABEL_316:
          v190 = *(_QWORD *)v111;
          std::string::basic_string[abi:ne180100]<0>(v653, "W_int8");
          (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v190
                                                                                                 + 160))(v190, a2, v653, a4, a5, 0);
          goto LABEL_825;
        }
LABEL_321:
        std::operator+<char>();
        v191 = *(unsigned __int8 *)(a3 + 23);
        if ((v191 & 0x80u) == 0)
          v192 = *(unsigned __int8 *)(a3 + 23);
        else
          v192 = *(_QWORD *)(a3 + 8);
        v193 = v653[23];
        v194 = v653[23];
        if (v653[23] < 0)
          v193 = *(_QWORD *)&v653[8];
        if (v192 != v193)
          goto LABEL_388;
        if (v653[23] >= 0)
          v195 = v653;
        else
          v195 = *(unsigned __int8 **)v653;
        if ((v191 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v195, *(_QWORD *)(a3 + 8)))
            goto LABEL_388;
        }
        else if (*(_BYTE *)(a3 + 23))
        {
          v196 = (unsigned __int8 *)a3;
          while (*v196 == *v195)
          {
            ++v196;
            ++v195;
            if (!--v191)
              goto LABEL_411;
          }
LABEL_388:
          std::operator+<char>();
          v217 = *(unsigned __int8 *)(a3 + 23);
          if ((v217 & 0x80u) == 0)
            v218 = *(unsigned __int8 *)(a3 + 23);
          else
            v218 = *(_QWORD *)(a3 + 8);
          v219 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v220 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v219 = __p.__r_.__value_.__l.__size_;
          if (v218 == v219)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v221 = &__p;
            else
              v221 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((v217 & 0x80) != 0)
            {
              v229 = memcmp(*(const void **)a3, v221, *(_QWORD *)(a3 + 8)) == 0;
              if ((v220 & 0x80000000) == 0)
                goto LABEL_406;
            }
            else if (*(_BYTE *)(a3 + 23))
            {
              v222 = v217 - 1;
              v223 = (unsigned __int8 *)a3;
              do
              {
                v225 = *v223++;
                v224 = v225;
                v227 = v221->__r_.__value_.__s.__data_[0];
                v221 = (std::string *)((char *)v221 + 1);
                v226 = v227;
                _CF = v222-- != 0;
                v228 = _CF;
                v229 = v224 == v226;
              }
              while (v224 == v226 && (v228 & 1) != 0);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_406:
                if ((v653[23] & 0x80) == 0)
                  goto LABEL_407;
                goto LABEL_412;
              }
            }
            else
            {
              v229 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_406;
            }
          }
          else
          {
            v229 = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_406;
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_406;
        }
LABEL_411:
        v229 = 1;
        if ((v194 & 0x80) == 0)
        {
LABEL_407:
          if (v229)
            goto LABEL_408;
          goto LABEL_413;
        }
LABEL_412:
        operator delete(*(void **)v653);
        if (v229)
        {
LABEL_408:
          v230 = *(_QWORD *)v21;
          std::string::basic_string[abi:ne180100]<0>(v653, "W_t_int8");
          (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v230
                                                                                                 + 160))(v230, a2, v653, a4, a5, 0);
          goto LABEL_825;
        }
LABEL_413:
        std::operator+<char>();
        v231 = *(unsigned __int8 *)(a3 + 23);
        if ((v231 & 0x80u) == 0)
          v232 = *(unsigned __int8 *)(a3 + 23);
        else
          v232 = *(_QWORD *)(a3 + 8);
        v233 = v653[23];
        v234 = v653[23];
        if (v653[23] < 0)
          v233 = *(_QWORD *)&v653[8];
        if (v232 != v233)
          goto LABEL_508;
        if (v653[23] >= 0)
          v235 = v653;
        else
          v235 = *(unsigned __int8 **)v653;
        if ((v231 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v235, *(_QWORD *)(a3 + 8)))
            goto LABEL_508;
        }
        else if (*(_BYTE *)(a3 + 23))
        {
          v236 = (unsigned __int8 *)a3;
          while (*v236 == *v235)
          {
            ++v236;
            ++v235;
            if (!--v231)
              goto LABEL_528;
          }
LABEL_508:
          std::operator+<char>();
          v280 = *(unsigned __int8 *)(a3 + 23);
          if ((v280 & 0x80u) == 0)
            v281 = *(unsigned __int8 *)(a3 + 23);
          else
            v281 = *(_QWORD *)(a3 + 8);
          v282 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v283 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v282 = __p.__r_.__value_.__l.__size_;
          if (v281 != v282)
          {
            v292 = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_558;
            goto LABEL_527;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v284 = &__p;
          else
            v284 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((v280 & 0x80) != 0)
          {
            v292 = memcmp(*(const void **)a3, v284, *(_QWORD *)(a3 + 8)) == 0;
          }
          else
          {
            if (!*(_BYTE *)(a3 + 23))
            {
              v292 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_558:
                if ((v653[23] & 0x80) == 0)
                {
LABEL_559:
                  if (v292)
                  {
LABEL_560:
                    v307 = *(_QWORD *)v111;
                    std::string::basic_string[abi:ne180100]<0>(v653, "W_t_int8");
                    (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v307 + 160))(v307, a2, v653, a4, a5, 0);
                    goto LABEL_825;
                  }
LABEL_530:
                  std::operator+<char>();
                  v293 = std::string::append(&__p, "_Qbias");
                  *(std::string *)v653 = *v293;
                  v293->__r_.__value_.__l.__size_ = 0;
                  v293->__r_.__value_.__r.__words[2] = 0;
                  v293->__r_.__value_.__r.__words[0] = 0;
                  v294 = *(unsigned __int8 *)(a3 + 23);
                  if ((v294 & 0x80u) == 0)
                    v295 = *(unsigned __int8 *)(a3 + 23);
                  else
                    v295 = *(_QWORD *)(a3 + 8);
                  v296 = v653[23];
                  v297 = v653[23];
                  if (v653[23] < 0)
                    v296 = *(_QWORD *)&v653[8];
                  if (v295 != v296)
                  {
                    v306 = 0;
                    if ((v653[23] & 0x80000000) == 0)
                      goto LABEL_565;
                    goto LABEL_549;
                  }
                  if (v653[23] >= 0)
                    v298 = v653;
                  else
                    v298 = *(unsigned __int8 **)v653;
                  if ((v294 & 0x80) != 0)
                  {
                    v306 = memcmp(*(const void **)a3, v298, *(_QWORD *)(a3 + 8)) == 0;
                  }
                  else
                  {
                    if (!*(_BYTE *)(a3 + 23))
                    {
                      v306 = 1;
                      if ((v653[23] & 0x80000000) == 0)
                      {
LABEL_565:
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(__p.__r_.__value_.__l.__data_);
                          if (v306)
                          {
LABEL_567:
                            v265 = *(_QWORD *)(a1 + 16 * v17 + 520);
                            if (!v265)
                              goto LABEL_827;
                            goto LABEL_744;
                          }
                        }
                        else if (v306)
                        {
                          goto LABEL_567;
                        }
                        std::operator+<char>();
                        v308 = std::string::append(&__p, "_Qrow_sums");
                        *(std::string *)v653 = *v308;
                        v308->__r_.__value_.__l.__size_ = 0;
                        v308->__r_.__value_.__r.__words[2] = 0;
                        v308->__r_.__value_.__r.__words[0] = 0;
                        v309 = *(unsigned __int8 *)(a3 + 23);
                        if ((v309 & 0x80u) == 0)
                          v310 = *(unsigned __int8 *)(a3 + 23);
                        else
                          v310 = *(_QWORD *)(a3 + 8);
                        v311 = v653[23];
                        v312 = v653[23];
                        if (v653[23] < 0)
                          v311 = *(_QWORD *)&v653[8];
                        if (v310 != v311)
                        {
                          v321 = 0;
                          if ((v653[23] & 0x80000000) == 0)
                            goto LABEL_625;
                          goto LABEL_589;
                        }
                        if (v653[23] >= 0)
                          v313 = v653;
                        else
                          v313 = *(unsigned __int8 **)v653;
                        if ((v309 & 0x80) != 0)
                        {
                          v321 = memcmp(*(const void **)a3, v313, *(_QWORD *)(a3 + 8)) == 0;
                        }
                        else
                        {
                          if (!*(_BYTE *)(a3 + 23))
                          {
                            v321 = 1;
                            if ((v653[23] & 0x80000000) == 0)
                            {
LABEL_625:
                              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                              {
                                operator delete(__p.__r_.__value_.__l.__data_);
                                if (v321)
                                {
LABEL_627:
                                  v322 = *(_QWORD *)(a1 + 16 * v17 + 520);
                                  if (!v322)
                                    goto LABEL_827;
                                  goto LABEL_800;
                                }
                              }
                              else if (v321)
                              {
                                goto LABEL_627;
                              }
                              std::operator+<char>();
                              v337 = std::string::append(&__p, "_Qscale");
                              *(std::string *)v653 = *v337;
                              v337->__r_.__value_.__l.__size_ = 0;
                              v337->__r_.__value_.__r.__words[2] = 0;
                              v337->__r_.__value_.__r.__words[0] = 0;
                              v338 = *(unsigned __int8 *)(a3 + 23);
                              if ((v338 & 0x80u) == 0)
                                v339 = *(unsigned __int8 *)(a3 + 23);
                              else
                                v339 = *(_QWORD *)(a3 + 8);
                              v340 = v653[23];
                              v341 = v653[23];
                              if (v653[23] < 0)
                                v340 = *(_QWORD *)&v653[8];
                              if (v339 == v340)
                              {
                                if (v653[23] >= 0)
                                  v342 = v653;
                                else
                                  v342 = *(unsigned __int8 **)v653;
                                if ((v338 & 0x80) != 0)
                                {
                                  v350 = memcmp(*(const void **)a3, v342, *(_QWORD *)(a3 + 8)) == 0;
                                }
                                else if (*(_BYTE *)(a3 + 23))
                                {
                                  v343 = v338 - 1;
                                  v344 = (unsigned __int8 *)a3;
                                  do
                                  {
                                    v346 = *v344++;
                                    v345 = v346;
                                    v348 = *v342++;
                                    v347 = v348;
                                    _CF = v343-- != 0;
                                    v349 = _CF;
                                    v350 = v345 == v347;
                                  }
                                  while (v345 == v347 && (v349 & 1) != 0);
                                }
                                else
                                {
                                  v350 = 1;
                                }
                              }
                              else
                              {
                                v350 = 0;
                              }
                              if (v341 < 0)
                                operator delete(*(void **)v653);
                              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                              {
                                operator delete(__p.__r_.__value_.__l.__data_);
                                if (!v350)
                                {
LABEL_689:
                                  std::operator+<char>();
                                  v366 = std::string::append(&__p, "_Qbias");
                                  *(std::string *)v653 = *v366;
                                  v366->__r_.__value_.__l.__size_ = 0;
                                  v366->__r_.__value_.__r.__words[2] = 0;
                                  v366->__r_.__value_.__r.__words[0] = 0;
                                  v367 = *(unsigned __int8 *)(a3 + 23);
                                  if ((v367 & 0x80u) == 0)
                                    v368 = *(unsigned __int8 *)(a3 + 23);
                                  else
                                    v368 = *(_QWORD *)(a3 + 8);
                                  v369 = v653[23];
                                  v370 = v653[23];
                                  if (v653[23] < 0)
                                    v369 = *(_QWORD *)&v653[8];
                                  if (v368 == v369)
                                  {
                                    if (v653[23] >= 0)
                                      v371 = v653;
                                    else
                                      v371 = *(unsigned __int8 **)v653;
                                    if ((v367 & 0x80) != 0)
                                    {
                                      v379 = memcmp(*(const void **)a3, v371, *(_QWORD *)(a3 + 8)) == 0;
                                    }
                                    else if (*(_BYTE *)(a3 + 23))
                                    {
                                      v372 = v367 - 1;
                                      v373 = (unsigned __int8 *)a3;
                                      do
                                      {
                                        v375 = *v373++;
                                        v374 = v375;
                                        v377 = *v371++;
                                        v376 = v377;
                                        _CF = v372-- != 0;
                                        v378 = _CF;
                                        v379 = v374 == v376;
                                      }
                                      while (v374 == v376 && (v378 & 1) != 0);
                                    }
                                    else
                                    {
                                      v379 = 1;
                                    }
                                  }
                                  else
                                  {
                                    v379 = 0;
                                  }
                                  if (v370 < 0)
                                    operator delete(*(void **)v653);
                                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(__p.__r_.__value_.__l.__data_);
                                  if (!v379)
                                  {
                                    std::operator+<char>();
                                    v394 = std::string::append(&__p, "_Qrow_sums");
                                    *(std::string *)v653 = *v394;
                                    v394->__r_.__value_.__l.__size_ = 0;
                                    v394->__r_.__value_.__r.__words[2] = 0;
                                    v394->__r_.__value_.__r.__words[0] = 0;
                                    v395 = *(unsigned __int8 *)(a3 + 23);
                                    if ((v395 & 0x80u) == 0)
                                      v396 = *(unsigned __int8 *)(a3 + 23);
                                    else
                                      v396 = *(_QWORD *)(a3 + 8);
                                    v397 = v653[23];
                                    v398 = v653[23];
                                    if (v653[23] < 0)
                                      v397 = *(_QWORD *)&v653[8];
                                    if (v396 == v397)
                                    {
                                      if (v653[23] >= 0)
                                        v399 = v653;
                                      else
                                        v399 = *(unsigned __int8 **)v653;
                                      if ((v395 & 0x80) != 0)
                                      {
                                        v407 = memcmp(*(const void **)a3, v399, *(_QWORD *)(a3 + 8)) == 0;
                                      }
                                      else if (*(_BYTE *)(a3 + 23))
                                      {
                                        v400 = v395 - 1;
                                        v401 = (unsigned __int8 *)a3;
                                        do
                                        {
                                          v403 = *v401++;
                                          v402 = v403;
                                          v405 = *v399++;
                                          v404 = v405;
                                          _CF = v400-- != 0;
                                          v406 = _CF;
                                          v407 = v402 == v404;
                                        }
                                        while (v402 == v404 && (v406 & 1) != 0);
                                      }
                                      else
                                      {
                                        v407 = 1;
                                      }
                                    }
                                    else
                                    {
                                      v407 = 0;
                                    }
                                    if (v398 < 0)
                                      operator delete(*(void **)v653);
                                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(__p.__r_.__value_.__l.__data_);
                                    if (v407)
                                    {
                                      v322 = *(_QWORD *)(a1 + 16 * v17 + 584);
                                      if (!v322)
                                        goto LABEL_827;
                                      goto LABEL_800;
                                    }
                                    std::operator+<char>();
                                    v422 = std::string::append(&__p, "_Qscale");
                                    v423 = *(_OWORD *)&v422->__r_.__value_.__l.__data_;
                                    *(_QWORD *)&v653[16] = *((_QWORD *)&v422->__r_.__value_.__l + 2);
                                    *(_OWORD *)v653 = v423;
                                    v422->__r_.__value_.__l.__size_ = 0;
                                    v422->__r_.__value_.__r.__words[2] = 0;
                                    v422->__r_.__value_.__r.__words[0] = 0;
                                    v424 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
                                    if ((v653[23] & 0x80000000) != 0)
                                      operator delete(*(void **)v653);
                                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(__p.__r_.__value_.__l.__data_);
                                    if (v424)
                                    {
                                      v351 = *(_QWORD *)(a1 + 16 * v17 + 584);
                                      if (!v351)
                                        goto LABEL_827;
                                      goto LABEL_824;
                                    }
                                    std::operator+<char>();
                                    v425 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
                                    if ((v653[23] & 0x80000000) != 0)
                                      operator delete(*(void **)v653);
                                    if (v425)
                                    {
                                      v647[0] = v659;
                                      v647[1] = v660;
                                      if (v660)
                                      {
                                        v426 = (unint64_t *)(v660 + 8);
                                        do
                                          v427 = __ldxr(v426);
                                        while (__stxr(v427 + 1, v426));
                                      }
                                      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(v653, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v647, 3, v29, v607 == 0);
                                      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v647);
                                      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,2>> &,void>(&__p, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t *)v653);
                                      v661.__r_.__value_.__r.__words[0] = a3;
                                      v428 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v606, (_QWORD *)a3, (__int128 **)&v661);
LABEL_838:
                                      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v428 + 7), (__int128 *)&__p);
                                      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
                                      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 16 * v17 + 704), *(uint64_t *)v653, *(uint64_t *)&v653[8]);
                                      goto LABEL_839;
                                    }
                                    std::operator+<char>();
                                    if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653))
                                    {
                                      v429 = 1;
                                    }
                                    else
                                    {
                                      std::operator+<char>();
                                      v429 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, (unsigned __int8 *)&__p);
                                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                        operator delete(__p.__r_.__value_.__l.__data_);
                                    }
                                    if ((v653[23] & 0x80000000) != 0)
                                      operator delete(*(void **)v653);
                                    if (v429)
                                    {
                                      *(_OWORD *)v653 = 0uLL;
                                      v441 = a1 + 16 * v17;
                                      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v441 + 704, (__int128 *)v653);
                                      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v653);
                                      Espresso::blob<unsigned char,2>::make(v653, v29);
                                      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v441 + 736, (__int128 *)v653);
                                      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v653);
                                      v435 = *(_QWORD *)(v441 + 736);
                                      v436 = a5;
                                      if (*(int *)(v435 + 12) * (uint64_t)*(int *)(v435 + 8) != a5)
                                      {
                                        v559 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                        std::to_string(&v642, a5);
                                        v560 = std::string::insert(&v642, 0, "Unexpected size s=");
                                        v561 = *(_OWORD *)&v560->__r_.__value_.__l.__data_;
                                        v643.__r_.__value_.__r.__words[2] = v560->__r_.__value_.__r.__words[2];
                                        *(_OWORD *)&v643.__r_.__value_.__l.__data_ = v561;
                                        v560->__r_.__value_.__l.__size_ = 0;
                                        v560->__r_.__value_.__r.__words[2] = 0;
                                        v560->__r_.__value_.__r.__words[0] = 0;
                                        v562 = std::string::append(&v643, "/blob=");
                                        v563 = *(_OWORD *)&v562->__r_.__value_.__l.__data_;
                                        v644.__r_.__value_.__r.__words[2] = v562->__r_.__value_.__r.__words[2];
                                        *(_OWORD *)&v644.__r_.__value_.__l.__data_ = v563;
                                        v562->__r_.__value_.__l.__size_ = 0;
                                        v562->__r_.__value_.__r.__words[2] = 0;
                                        v562->__r_.__value_.__r.__words[0] = 0;
                                        std::to_string(&v641, *(int *)(*(_QWORD *)(v441 + 736) + 12)* (uint64_t)*(int *)(*(_QWORD *)(v441 + 736) + 8));
                                        if ((v641.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v564 = &v641;
                                        else
                                          v564 = (std::string *)v641.__r_.__value_.__r.__words[0];
                                        if ((v641.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v565 = HIBYTE(v641.__r_.__value_.__r.__words[2]);
                                        else
                                          v565 = v641.__r_.__value_.__l.__size_;
                                        v566 = std::string::append(&v644, (const std::string::value_type *)v564, v565);
                                        v567 = *(_OWORD *)&v566->__r_.__value_.__l.__data_;
                                        v645.__r_.__value_.__r.__words[2] = v566->__r_.__value_.__r.__words[2];
                                        *(_OWORD *)&v645.__r_.__value_.__l.__data_ = v567;
                                        v566->__r_.__value_.__l.__size_ = 0;
                                        v566->__r_.__value_.__r.__words[2] = 0;
                                        v566->__r_.__value_.__r.__words[0] = 0;
                                        std::string::basic_string[abi:ne180100]<0>(&v638, " @ ");
                                        if ((v640 & 0x80u) == 0)
                                          v568 = (const std::string::value_type *)&v638;
                                        else
                                          v568 = v638;
                                        if ((v640 & 0x80u) == 0)
                                          v569 = v640;
                                        else
                                          v569 = v639;
                                        v570 = std::string::append(&v645, v568, v569);
                                        v571 = *(_OWORD *)&v570->__r_.__value_.__l.__data_;
                                        lpsrc.__r_.__value_.__r.__words[2] = v570->__r_.__value_.__r.__words[2];
                                        *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v571;
                                        v570->__r_.__value_.__l.__size_ = 0;
                                        v570->__r_.__value_.__r.__words[2] = 0;
                                        v570->__r_.__value_.__r.__words[0] = 0;
                                        v572 = std::string::append(&lpsrc, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
                                        v573 = *(_OWORD *)&v572->__r_.__value_.__l.__data_;
                                        v661.__r_.__value_.__r.__words[2] = v572->__r_.__value_.__r.__words[2];
                                        *(_OWORD *)&v661.__r_.__value_.__l.__data_ = v573;
                                        v572->__r_.__value_.__l.__size_ = 0;
                                        v572->__r_.__value_.__r.__words[2] = 0;
                                        v572->__r_.__value_.__r.__words[0] = 0;
                                        std::string::basic_string[abi:ne180100]<0>(&v635, ":");
                                        if ((v637 & 0x80u) == 0)
                                          v574 = (const std::string::value_type *)&v635;
                                        else
                                          v574 = v635;
                                        if ((v637 & 0x80u) == 0)
                                          v575 = v637;
                                        else
                                          v575 = v636;
                                        v576 = std::string::append(&v661, v574, v575);
                                        v577 = *(_OWORD *)&v576->__r_.__value_.__l.__data_;
                                        __p.__r_.__value_.__r.__words[2] = v576->__r_.__value_.__r.__words[2];
                                        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v577;
                                        v576->__r_.__value_.__l.__size_ = 0;
                                        v576->__r_.__value_.__r.__words[2] = 0;
                                        v576->__r_.__value_.__r.__words[0] = 0;
                                        std::to_string(&v634, 9088);
                                        if ((v634.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v578 = &v634;
                                        else
                                          v578 = (std::string *)v634.__r_.__value_.__r.__words[0];
                                        if ((v634.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v579 = HIBYTE(v634.__r_.__value_.__r.__words[2]);
                                        else
                                          v579 = v634.__r_.__value_.__l.__size_;
                                        v580 = std::string::append(&__p, (const std::string::value_type *)v578, v579);
                                        v581 = *(_OWORD *)&v580->__r_.__value_.__l.__data_;
                                        *(_QWORD *)&v653[16] = *((_QWORD *)&v580->__r_.__value_.__l + 2);
                                        *(_OWORD *)v653 = v581;
                                        v580->__r_.__value_.__l.__size_ = 0;
                                        v580->__r_.__value_.__r.__words[2] = 0;
                                        v580->__r_.__value_.__r.__words[0] = 0;
                                        std::runtime_error::runtime_error(v559, (const std::string *)v653);
                                        __cxa_throw(v559, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                                      }
LABEL_873:
                                      memcpy(*(void **)(v435 + 16), (const void *)a4, v436);
                                      goto LABEL_827;
                                    }
                                    std::operator+<char>();
                                    v442 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
                                    if ((v653[23] & 0x80000000) != 0)
                                      operator delete(*(void **)v653);
                                    if (v442)
                                    {
                                      v443 = *(_QWORD *)v111;
                                      std::string::basic_string[abi:ne180100]<0>(v653, "Q");
                                      (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v443 + 160))(v443, a2, v653, a4, a5, 0);
                                      if ((v653[23] & 0x80000000) != 0)
                                        operator delete(*(void **)v653);
                                      v444 = *(_QWORD *)v21;
                                      std::string::basic_string[abi:ne180100]<0>(v653, "Q");
                                      (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v444 + 160))(v444, a2, v653, a4, a5, 0);
                                      if ((v653[23] & 0x80000000) != 0)
                                        operator delete(*(void **)v653);
                                      Espresso::blob<float,1>::make(v653, 2);
                                      v445 = a1 + 16 * v17 + 768;
                                      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v445, (__int128 *)v653);
                                      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v653);
                                      v435 = *(_QWORD *)v445;
                                      v436 = a5;
                                      if (a5 != 4 * *(int *)(*(_QWORD *)v445 + 8))
                                      {
                                        v582 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                        std::to_string(&v642, a5);
                                        v583 = std::string::insert(&v642, 0, "Unexpected size s=");
                                        v584 = *(_OWORD *)&v583->__r_.__value_.__l.__data_;
                                        v643.__r_.__value_.__r.__words[2] = v583->__r_.__value_.__r.__words[2];
                                        *(_OWORD *)&v643.__r_.__value_.__l.__data_ = v584;
                                        v583->__r_.__value_.__l.__size_ = 0;
                                        v583->__r_.__value_.__r.__words[2] = 0;
                                        v583->__r_.__value_.__r.__words[0] = 0;
                                        v585 = std::string::append(&v643, "/blob=");
                                        v586 = *(_OWORD *)&v585->__r_.__value_.__l.__data_;
                                        v644.__r_.__value_.__r.__words[2] = v585->__r_.__value_.__r.__words[2];
                                        *(_OWORD *)&v644.__r_.__value_.__l.__data_ = v586;
                                        v585->__r_.__value_.__l.__size_ = 0;
                                        v585->__r_.__value_.__r.__words[2] = 0;
                                        v585->__r_.__value_.__r.__words[0] = 0;
                                        std::to_string(&v641, 4 * *(int *)(*(_QWORD *)v445 + 8));
                                        if ((v641.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v587 = &v641;
                                        else
                                          v587 = (std::string *)v641.__r_.__value_.__r.__words[0];
                                        if ((v641.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v588 = HIBYTE(v641.__r_.__value_.__r.__words[2]);
                                        else
                                          v588 = v641.__r_.__value_.__l.__size_;
                                        v589 = std::string::append(&v644, (const std::string::value_type *)v587, v588);
                                        v590 = *(_OWORD *)&v589->__r_.__value_.__l.__data_;
                                        v645.__r_.__value_.__r.__words[2] = v589->__r_.__value_.__r.__words[2];
                                        *(_OWORD *)&v645.__r_.__value_.__l.__data_ = v590;
                                        v589->__r_.__value_.__l.__size_ = 0;
                                        v589->__r_.__value_.__r.__words[2] = 0;
                                        v589->__r_.__value_.__r.__words[0] = 0;
                                        std::string::basic_string[abi:ne180100]<0>(&v638, " @ ");
                                        if ((v640 & 0x80u) == 0)
                                          v591 = (const std::string::value_type *)&v638;
                                        else
                                          v591 = v638;
                                        if ((v640 & 0x80u) == 0)
                                          v592 = v640;
                                        else
                                          v592 = v639;
                                        v593 = std::string::append(&v645, v591, v592);
                                        v594 = *(_OWORD *)&v593->__r_.__value_.__l.__data_;
                                        lpsrc.__r_.__value_.__r.__words[2] = v593->__r_.__value_.__r.__words[2];
                                        *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v594;
                                        v593->__r_.__value_.__l.__size_ = 0;
                                        v593->__r_.__value_.__r.__words[2] = 0;
                                        v593->__r_.__value_.__r.__words[0] = 0;
                                        v595 = std::string::append(&lpsrc, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
                                        v596 = *(_OWORD *)&v595->__r_.__value_.__l.__data_;
                                        v661.__r_.__value_.__r.__words[2] = v595->__r_.__value_.__r.__words[2];
                                        *(_OWORD *)&v661.__r_.__value_.__l.__data_ = v596;
                                        v595->__r_.__value_.__l.__size_ = 0;
                                        v595->__r_.__value_.__r.__words[2] = 0;
                                        v595->__r_.__value_.__r.__words[0] = 0;
                                        std::string::basic_string[abi:ne180100]<0>(&v635, ":");
                                        if ((v637 & 0x80u) == 0)
                                          v597 = (const std::string::value_type *)&v635;
                                        else
                                          v597 = v635;
                                        if ((v637 & 0x80u) == 0)
                                          v598 = v637;
                                        else
                                          v598 = v636;
                                        v599 = std::string::append(&v661, v597, v598);
                                        v600 = *(_OWORD *)&v599->__r_.__value_.__l.__data_;
                                        __p.__r_.__value_.__r.__words[2] = v599->__r_.__value_.__r.__words[2];
                                        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v600;
                                        v599->__r_.__value_.__l.__size_ = 0;
                                        v599->__r_.__value_.__r.__words[2] = 0;
                                        v599->__r_.__value_.__r.__words[0] = 0;
                                        std::to_string(&v634, 9094);
                                        if ((v634.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v601 = &v634;
                                        else
                                          v601 = (std::string *)v634.__r_.__value_.__r.__words[0];
                                        if ((v634.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v602 = HIBYTE(v634.__r_.__value_.__r.__words[2]);
                                        else
                                          v602 = v634.__r_.__value_.__l.__size_;
                                        v603 = std::string::append(&__p, (const std::string::value_type *)v601, v602);
                                        v604 = *(_OWORD *)&v603->__r_.__value_.__l.__data_;
                                        *(_QWORD *)&v653[16] = *((_QWORD *)&v603->__r_.__value_.__l + 2);
                                        *(_OWORD *)v653 = v604;
                                        v603->__r_.__value_.__l.__size_ = 0;
                                        v603->__r_.__value_.__r.__words[2] = 0;
                                        v603->__r_.__value_.__r.__words[0] = 0;
                                        std::runtime_error::runtime_error(v582, (const std::string *)v653);
                                        __cxa_throw(v582, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                                      }
                                      goto LABEL_873;
                                    }
                                    std::operator+<char>();
                                    v453 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
                                    if ((v653[23] & 0x80000000) != 0)
                                      operator delete(*(void **)v653);
                                    if (v453)
                                    {
                                      v454 = *(_QWORD *)v21;
                                      std::string::basic_string[abi:ne180100]<0>(v653, "W");
                                      (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v454 + 160))(v454, a2, v653, a4, a5, 0);
                                      if ((v653[23] & 0x80000000) != 0)
                                        operator delete(*(void **)v653);
                                      v633[0] = v659;
                                      v633[1] = v660;
                                      if (v660)
                                      {
                                        v455 = (unint64_t *)(v660 + 8);
                                        do
                                          v456 = __ldxr(v455);
                                        while (__stxr(v456 + 1, v455));
                                      }
                                      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(v653, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v633, v618, v29, v607 == 0);
                                      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v633);
                                      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,2>> &,void>(&__p, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t *)v653);
                                      v661.__r_.__value_.__r.__words[0] = a3;
                                      v452 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v606, (_QWORD *)a3, (__int128 **)&v661);
LABEL_916:
                                      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v452 + 7), (__int128 *)&__p);
                                      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
LABEL_839:
                                      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v653);
                                      goto LABEL_827;
                                    }
                                    std::operator+<char>();
                                    v463 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
                                    if ((v653[23] & 0x80000000) != 0)
                                      operator delete(*(void **)v653);
                                    if (v463)
                                    {
                                      v464 = *(_QWORD *)v111;
                                      std::string::basic_string[abi:ne180100]<0>(v653, "W");
                                      (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v464 + 160))(v464, a2, v653, a4, a5, 0);
                                      if ((v653[23] & 0x80000000) != 0)
                                        operator delete(*(void **)v653);
                                      v632[0] = v659;
                                      v632[1] = v660;
                                      if (v660)
                                      {
                                        v465 = (unint64_t *)(v660 + 8);
                                        do
                                          v466 = __ldxr(v465);
                                        while (__stxr(v466 + 1, v465));
                                      }
                                      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(v653, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v632, v29, v29, v607 == 0);
                                      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v632);
                                      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,2>> &,void>(&__p, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t *)v653);
                                      v661.__r_.__value_.__r.__words[0] = a3;
                                      v452 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v606, (_QWORD *)a3, (__int128 **)&v661);
                                      goto LABEL_916;
                                    }
                                    std::operator+<char>();
                                    v469 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
                                    if ((v653[23] & 0x80000000) != 0)
                                      operator delete(*(void **)v653);
                                    if (v469)
                                    {
                                      v470 = *(_QWORD *)v21;
                                      std::string::basic_string[abi:ne180100]<0>(v653, "W_f16");
                                      (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v470 + 160))(v470, a2, v653, a4, a5, 0);
LABEL_993:
                                      if ((v653[23] & 0x80000000) != 0)
                                        operator delete(*(void **)v653);
                                      goto LABEL_995;
                                    }
                                    std::operator+<char>();
                                    v473 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
                                    if ((v653[23] & 0x80000000) != 0)
                                      operator delete(*(void **)v653);
                                    if (v473)
                                    {
                                      v474 = *(_QWORD *)v111;
                                      std::string::basic_string[abi:ne180100]<0>(v653, "W_f16");
                                      (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v474 + 160))(v474, a2, v653, a4, a5, 0);
                                      goto LABEL_993;
                                    }
                                    std::operator+<char>();
                                    v478 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
                                    if ((v653[23] & 0x80000000) != 0)
                                      operator delete(*(void **)v653);
                                    if (v478)
                                    {
                                      v477 = *(_QWORD *)(a1 + 16 * v17 + 520);
                                      if (v477)
                                      {
LABEL_937:
                                        std::string::basic_string[abi:ne180100]<0>(v653, "biases");
                                        (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v477 + 160))(v477, a2, v653, a4, a5, 0);
                                        goto LABEL_993;
                                      }
                                      v631[0] = v659;
                                      v631[1] = v660;
                                      if (v660)
                                      {
                                        v496 = (unint64_t *)(v660 + 8);
                                        do
                                          v497 = __ldxr(v496);
                                        while (__stxr(v497 + 1, v496));
                                      }
                                      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(v653, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v631, v29, v607 == 0);
                                      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v631);
                                      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,1>> &,void>(&__p, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t *)v653);
                                      v661.__r_.__value_.__r.__words[0] = a3;
                                      v498 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v606, (_QWORD *)a3, (__int128 **)&v661);
                                      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v498 + 7), (__int128 *)&__p);
                                      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
                                      v499 = *(_QWORD *)v21;
                                      v630 = *(_OWORD *)v653;
                                      if (*(_QWORD *)&v653[8])
                                      {
                                        v500 = (unint64_t *)(*(_QWORD *)&v653[8] + 8);
                                        do
                                          v501 = __ldxr(v500);
                                        while (__stxr(v501 + 1, v500));
                                      }
                                      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v499 + 392))(v499, &v630);
                                      v491 = &v630;
LABEL_980:
                                      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v491);
                                      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v653);
LABEL_995:
                                      v11 = a1 + 8;
                                      goto LABEL_827;
                                    }
                                    std::operator+<char>();
                                    v481 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
                                    if ((v653[23] & 0x80000000) != 0)
                                      operator delete(*(void **)v653);
                                    if (v481)
                                    {
LABEL_946:
                                      v480 = *(_QWORD *)v21;
                                      std::string::basic_string[abi:ne180100]<0>(v653, "w_f32_t");
                                      (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v480 + 160))(v480, a2, v653, a4, a5, 0);
                                      goto LABEL_993;
                                    }
                                    std::operator+<char>();
                                    v492 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
                                    if ((v653[23] & 0x80000000) != 0)
                                      operator delete(*(void **)v653);
                                    if (v492)
                                    {
                                      v493 = *(_QWORD *)v111;
                                      std::string::basic_string[abi:ne180100]<0>(v653, "w_f32_t");
                                      (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v493 + 160))(v493, a2, v653, a4, a5, 0);
                                      goto LABEL_993;
                                    }
                                    std::operator+<char>();
                                    v502 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
                                    if ((v653[23] & 0x80000000) != 0)
                                      operator delete(*(void **)v653);
                                    if (v502)
                                      goto LABEL_972;
                                    std::operator+<char>();
                                    v505 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v653);
                                    if ((v653[23] & 0x80000000) != 0)
                                      operator delete(*(void **)v653);
                                    if (v505)
                                    {
                                      v506 = *(_QWORD *)v111;
                                      std::string::basic_string[abi:ne180100]<0>(v653, "w_f16_t");
                                      (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v506 + 160))(v506, a2, v653, a4, a5, 0);
                                      goto LABEL_993;
                                    }
                                    goto LABEL_996;
                                  }
                                  v265 = *(_QWORD *)(a1 + 16 * v17 + 584);
                                  if (!v265)
                                    goto LABEL_827;
                                  goto LABEL_744;
                                }
                              }
                              else if (!v350)
                              {
                                goto LABEL_689;
                              }
                              v351 = *(_QWORD *)(a1 + 16 * v17 + 520);
                              if (!v351)
                                goto LABEL_827;
                              goto LABEL_824;
                            }
LABEL_589:
                            operator delete(*(void **)v653);
                            goto LABEL_625;
                          }
                          v314 = v309 - 1;
                          v315 = (unsigned __int8 *)a3;
                          do
                          {
                            v317 = *v315++;
                            v316 = v317;
                            v319 = *v313++;
                            v318 = v319;
                            _CF = v314-- != 0;
                            v320 = _CF;
                            v321 = v316 == v318;
                          }
                          while (v316 == v318 && (v320 & 1) != 0);
                        }
                        if ((v312 & 0x80000000) == 0)
                          goto LABEL_625;
                        goto LABEL_589;
                      }
LABEL_549:
                      operator delete(*(void **)v653);
                      goto LABEL_565;
                    }
                    v299 = v294 - 1;
                    v300 = (unsigned __int8 *)a3;
                    do
                    {
                      v302 = *v300++;
                      v301 = v302;
                      v304 = *v298++;
                      v303 = v304;
                      _CF = v299-- != 0;
                      v305 = _CF;
                      v306 = v301 == v303;
                    }
                    while (v301 == v303 && (v305 & 1) != 0);
                  }
                  if ((v297 & 0x80000000) == 0)
                    goto LABEL_565;
                  goto LABEL_549;
                }
LABEL_529:
                operator delete(*(void **)v653);
                if (v292)
                  goto LABEL_560;
                goto LABEL_530;
              }
LABEL_527:
              operator delete(__p.__r_.__value_.__l.__data_);
              goto LABEL_558;
            }
            v285 = v280 - 1;
            v286 = (unsigned __int8 *)a3;
            do
            {
              v288 = *v286++;
              v287 = v288;
              v290 = v284->__r_.__value_.__s.__data_[0];
              v284 = (std::string *)((char *)v284 + 1);
              v289 = v290;
              _CF = v285-- != 0;
              v291 = _CF;
              v292 = v287 == v289;
            }
            while (v287 == v289 && (v291 & 1) != 0);
          }
          if ((v283 & 0x80000000) == 0)
            goto LABEL_558;
          goto LABEL_527;
        }
LABEL_528:
        v292 = 1;
        if ((v234 & 0x80) == 0)
          goto LABEL_559;
        goto LABEL_529;
      case 2:
        goto LABEL_827;
      default:
        v510 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&__p, *(_DWORD *)(a1 + 304));
        v511 = std::string::insert(&__p, 0, "Invalid cell mode ");
        v512 = *(_OWORD *)&v511->__r_.__value_.__l.__data_;
        *(_QWORD *)&v653[16] = *((_QWORD *)&v511->__r_.__value_.__l + 2);
        *(_OWORD *)v653 = v512;
        v511->__r_.__value_.__l.__size_ = 0;
        v511->__r_.__value_.__r.__words[2] = 0;
        v511->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v510, (const std::string *)v653);
        __cxa_throw(v510, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
}

void sub_1916A6FC8(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  if (SLOBYTE(STACK[0x4A7]) < 0)
    operator delete((void *)STACK[0x490]);
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  if (SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (*(char *)(v3 - 137) < 0)
    operator delete(*(void **)(v3 - 160));
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (SLOBYTE(STACK[0x2BF]) < 0)
  {
    operator delete((void *)STACK[0x2A8]);
    if ((v2 & 1) == 0)
    {
LABEL_28:
      if (*(char *)(v3 - 177) < 0)
        operator delete(*(void **)(v3 - 200));
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 176);
      _Unwind_Resume(a1);
    }
  }
  else if (!v2)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v1);
  goto LABEL_28;
}

void sub_1916A7648()
{
  JUMPOUT(0x1916A7638);
}

uint64_t Espresso::generic_rnn_arch_kernel_impl::supports_weight_key()
{
  return 1;
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_encoder(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  float v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  __int128 v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  __int128 v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  _OWORD v187[8];
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  _OWORD v197[8];
  uint64_t v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  _OWORD v207[8];
  uint64_t v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  _OWORD v217[8];
  uint64_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t *v227[5];
  _QWORD v228[3];

  v7 = (uint64_t *)*a4;
  v228[0] = a1;
  v228[1] = v7;
  v227[0] = a3;
  v227[1] = v228;
  v227[2] = (uint64_t *)a1;
  v227[3] = a4;
  v227[4] = a2;
  v8 = (_QWORD *)*a3;
  v226 = 0uLL;
  v225 = 0uLL;
  Espresso::generic_rnn_arch_kernel_impl::__launch_encoder(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1::operator()(&v223, v227, 0);
  v225 = v224;
  v226 = v223;
  v9 = 16;
  if (!*(_BYTE *)(a1 + 456))
    v9 = 24;
  if (*(_BYTE *)(a1 + 457))
  {
    v10 = a4[1];
    v221 = *(_QWORD *)(v10 - 16);
    v11 = *(std::__shared_weak_count **)(v10 - 8);
    v222 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    Espresso::sync_copy_to_host(&v223, &v221);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
    v15 = **(float **)(v223 + 24);
    if (*((_QWORD *)&v223 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v18 = v222;
    if (v222)
    {
      v19 = (unint64_t *)&v222->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 32))(*v8);
    LODWORD(v21) = (int)v15;
    v22 = *(_QWORD *)(*v8 + 160);
    v23 = *(std::__shared_weak_count **)(*v8 + 168);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26 = 0;
    v27 = *(void **)(v22 + 24);
    v28 = *(int *)(v22 + 8);
    v29 = v22 + 12;
    do
    {
      v28 *= *(int *)(v29 + v26);
      v26 += 4;
    }
    while (v26 != 12);
    bzero(v27, 4 * v28);
    if (v23)
    {
      v30 = (unint64_t *)&v23->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  else
  {
    LODWORD(v21) = *(_DWORD *)(*v7 + v9);
  }
  v32 = (_OWORD *)(a1 + 304);
  if ((int)v21 >= 1)
  {
    v33 = 0;
    do
    {
      if (*(_DWORD *)(a1 + 448))
      {
        v34 = a2[1];
        v219 = *a2;
        v220 = (std::__shared_weak_count *)v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        v37 = *(_OWORD *)(a1 + 352);
        v217[2] = *(_OWORD *)(a1 + 336);
        v217[3] = v37;
        v218 = *(_QWORD *)(a1 + 432);
        v38 = *(_OWORD *)(a1 + 416);
        v217[6] = *(_OWORD *)(a1 + 400);
        v217[7] = v38;
        v39 = *(_OWORD *)(a1 + 384);
        v217[4] = *(_OWORD *)(a1 + 368);
        v217[5] = v39;
        v40 = *(_OWORD *)(a1 + 320);
        v217[0] = *v32;
        v217[1] = v40;
        v41 = (std::__shared_weak_count *)v7[1];
        v215 = *v7;
        v216 = v41;
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        v44 = (std::__shared_weak_count *)v8[1];
        v213 = *v8;
        v214 = v44;
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        v212 = v226;
        if (*((_QWORD *)&v226 + 1))
        {
          v47 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
        }
        v211 = v225;
        if (*((_QWORD *)&v225 + 1))
        {
          v49 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        (*(void (**)(uint64_t, uint64_t *, _QWORD, _OWORD *, uint64_t *, uint64_t, uint64_t *, __int128 *, __int128 *, _QWORD))(*(_QWORD *)a1 + 400))(a1, &v219, 0, v217, &v215, v33, &v213, &v212, &v211, v33);
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
        if (*((_QWORD *)&v211 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
        if (*((_QWORD *)&v212 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = v214;
        if (v214)
        {
          v58 = (unint64_t *)&v214->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = v216;
        if (v216)
        {
          v61 = (unint64_t *)&v216->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v63 = v220;
        if (!v220)
          goto LABEL_110;
        v64 = (unint64_t *)&v220->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
      }
      else
      {
        v66 = a2[1];
        v209 = *a2;
        v210 = (std::__shared_weak_count *)v66;
        if (v66)
        {
          v67 = (unint64_t *)(v66 + 8);
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }
        v69 = *(_OWORD *)(a1 + 352);
        v207[2] = *(_OWORD *)(a1 + 336);
        v207[3] = v69;
        v208 = *(_QWORD *)(a1 + 432);
        v70 = *(_OWORD *)(a1 + 416);
        v207[6] = *(_OWORD *)(a1 + 400);
        v207[7] = v70;
        v71 = *(_OWORD *)(a1 + 384);
        v207[4] = *(_OWORD *)(a1 + 368);
        v207[5] = v71;
        v72 = *(_OWORD *)(a1 + 320);
        v207[0] = *v32;
        v207[1] = v72;
        v73 = (std::__shared_weak_count *)v7[1];
        v205 = *v7;
        v206 = v73;
        if (v73)
        {
          v74 = (unint64_t *)&v73->__shared_owners_;
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        v76 = (std::__shared_weak_count *)v8[1];
        v203 = *v8;
        v204 = v76;
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
        v202 = v226;
        if (*((_QWORD *)&v226 + 1))
        {
          v79 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
        v201 = v225;
        if (*((_QWORD *)&v225 + 1))
        {
          v81 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
        }
        (*(void (**)(uint64_t, uint64_t *, _QWORD, _OWORD *, uint64_t *, uint64_t, uint64_t *, __int128 *, __int128 *, _QWORD))(*(_QWORD *)a1 + 400))(a1, &v209, 0, v207, &v205, v33, &v203, &v202, &v201, 0);
        v83 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
        if (*((_QWORD *)&v201 + 1))
        {
          v84 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v86 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
        if (*((_QWORD *)&v202 + 1))
        {
          v87 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v89 = v204;
        if (v204)
        {
          v90 = (unint64_t *)&v204->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v92 = v206;
        if (v206)
        {
          v93 = (unint64_t *)&v206->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        v63 = v210;
        if (!v210)
          goto LABEL_110;
        v95 = (unint64_t *)&v210->__shared_owners_;
        do
          v65 = __ldaxr(v95);
        while (__stlxr(v65 - 1, v95));
      }
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
LABEL_110:
      v33 = (v33 + 1);
    }
    while ((_DWORD)v33 != (_DWORD)v21);
  }
  if (*(_DWORD *)(a1 + 452) == 1)
  {
    Espresso::generic_rnn_arch_kernel_impl::__launch_encoder(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1::operator()(&v223, v227, 1);
    v96 = v223;
    v223 = 0uLL;
    v97 = (std::__shared_weak_count *)*((_QWORD *)&v226 + 1);
    v226 = v96;
    if (v97)
    {
      v98 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v100 = v224;
    v224 = 0uLL;
    v101 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
    v225 = v100;
    if (v101)
    {
      v102 = (unint64_t *)&v101->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v104 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
    if (*((_QWORD *)&v224 + 1))
    {
      v105 = (unint64_t *)(*((_QWORD *)&v224 + 1) + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v107 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
    if (*((_QWORD *)&v223 + 1))
    {
      v108 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    if ((int)v21 >= 1)
    {
      do
      {
        v110 = v21;
        v21 = (v21 - 1);
        if (*(_DWORD *)(a1 + 448))
        {
          v111 = a2[1];
          v199 = *a2;
          v200 = (std::__shared_weak_count *)v111;
          if (v111)
          {
            v112 = (unint64_t *)(v111 + 8);
            do
              v113 = __ldxr(v112);
            while (__stxr(v113 + 1, v112));
          }
          v114 = *(_OWORD *)(a1 + 352);
          v197[2] = *(_OWORD *)(a1 + 336);
          v197[3] = v114;
          v198 = *(_QWORD *)(a1 + 432);
          v115 = *(_OWORD *)(a1 + 416);
          v197[6] = *(_OWORD *)(a1 + 400);
          v197[7] = v115;
          v116 = *(_OWORD *)(a1 + 384);
          v197[4] = *(_OWORD *)(a1 + 368);
          v197[5] = v116;
          v117 = *(_OWORD *)(a1 + 320);
          v197[0] = *v32;
          v197[1] = v117;
          v118 = (std::__shared_weak_count *)v7[1];
          v195 = *v7;
          v196 = v118;
          if (v118)
          {
            v119 = (unint64_t *)&v118->__shared_owners_;
            do
              v120 = __ldxr(v119);
            while (__stxr(v120 + 1, v119));
          }
          v121 = (std::__shared_weak_count *)v8[1];
          v193 = *v8;
          v194 = v121;
          if (v121)
          {
            v122 = (unint64_t *)&v121->__shared_owners_;
            do
              v123 = __ldxr(v122);
            while (__stxr(v123 + 1, v122));
          }
          v192 = v226;
          if (*((_QWORD *)&v226 + 1))
          {
            v124 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
            do
              v125 = __ldxr(v124);
            while (__stxr(v125 + 1, v124));
          }
          v191 = v225;
          if (*((_QWORD *)&v225 + 1))
          {
            v126 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
            do
              v127 = __ldxr(v126);
            while (__stxr(v127 + 1, v126));
          }
          LODWORD(v179) = v21;
          HIDWORD(v179) = *(_DWORD *)(a1 + 380);
          (*(void (**)(uint64_t, uint64_t *, uint64_t, _OWORD *, uint64_t *, uint64_t, uint64_t *, __int128 *, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a1 + 400))(a1, &v199, 1, v197, &v195, v21, &v193, &v192, &v191, v179, v181);
          v128 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
          if (*((_QWORD *)&v191 + 1))
          {
            v129 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
          v131 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
          if (*((_QWORD *)&v192 + 1))
          {
            v132 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }
          v134 = v194;
          if (v194)
          {
            v135 = (unint64_t *)&v194->__shared_owners_;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          v137 = v196;
          if (v196)
          {
            v138 = (unint64_t *)&v196->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          v140 = v200;
          if (!v200)
            continue;
          v141 = (unint64_t *)&v200->__shared_owners_;
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
        }
        else
        {
          v143 = a2[1];
          v189 = *a2;
          v190 = (std::__shared_weak_count *)v143;
          if (v143)
          {
            v144 = (unint64_t *)(v143 + 8);
            do
              v145 = __ldxr(v144);
            while (__stxr(v145 + 1, v144));
          }
          v146 = *(_OWORD *)(a1 + 352);
          v187[2] = *(_OWORD *)(a1 + 336);
          v187[3] = v146;
          v188 = *(_QWORD *)(a1 + 432);
          v147 = *(_OWORD *)(a1 + 416);
          v187[6] = *(_OWORD *)(a1 + 400);
          v187[7] = v147;
          v148 = *(_OWORD *)(a1 + 384);
          v187[4] = *(_OWORD *)(a1 + 368);
          v187[5] = v148;
          v149 = *(_OWORD *)(a1 + 320);
          v187[0] = *v32;
          v187[1] = v149;
          v150 = (std::__shared_weak_count *)v7[1];
          v185 = *v7;
          v186 = v150;
          if (v150)
          {
            v151 = (unint64_t *)&v150->__shared_owners_;
            do
              v152 = __ldxr(v151);
            while (__stxr(v152 + 1, v151));
          }
          v153 = (std::__shared_weak_count *)v8[1];
          v183 = *v8;
          v184 = v153;
          if (v153)
          {
            v154 = (unint64_t *)&v153->__shared_owners_;
            do
              v155 = __ldxr(v154);
            while (__stxr(v155 + 1, v154));
          }
          v182 = v226;
          if (*((_QWORD *)&v226 + 1))
          {
            v156 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
            do
              v157 = __ldxr(v156);
            while (__stxr(v157 + 1, v156));
          }
          v181 = v225;
          if (*((_QWORD *)&v225 + 1))
          {
            v158 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
            do
              v159 = __ldxr(v158);
            while (__stxr(v159 + 1, v158));
          }
          LODWORD(v180) = 0;
          HIDWORD(v180) = *(_DWORD *)(a1 + 380);
          (*(void (**)(uint64_t, uint64_t *, uint64_t, _OWORD *, uint64_t *, uint64_t, uint64_t *, __int128 *, __int128 *, uint64_t))(*(_QWORD *)a1 + 400))(a1, &v189, 1, v187, &v185, v21, &v183, &v182, &v181, v180);
          v160 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
          if (*((_QWORD *)&v181 + 1))
          {
            v161 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 - 1, v161));
            if (!v162)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
          v163 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
          if (*((_QWORD *)&v182 + 1))
          {
            v164 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
            do
              v165 = __ldaxr(v164);
            while (__stlxr(v165 - 1, v164));
            if (!v165)
            {
              ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
              std::__shared_weak_count::__release_weak(v163);
            }
          }
          v166 = v184;
          if (v184)
          {
            v167 = (unint64_t *)&v184->__shared_owners_;
            do
              v168 = __ldaxr(v167);
            while (__stlxr(v168 - 1, v167));
            if (!v168)
            {
              ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
              std::__shared_weak_count::__release_weak(v166);
            }
          }
          v169 = v186;
          if (v186)
          {
            v170 = (unint64_t *)&v186->__shared_owners_;
            do
              v171 = __ldaxr(v170);
            while (__stlxr(v171 - 1, v170));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
              std::__shared_weak_count::__release_weak(v169);
            }
          }
          v140 = v190;
          if (!v190)
            continue;
          v172 = (unint64_t *)&v190->__shared_owners_;
          do
            v142 = __ldaxr(v172);
          while (__stlxr(v142 - 1, v172));
        }
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      while (v110 > 1);
    }
  }
  v173 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
  if (*((_QWORD *)&v225 + 1))
  {
    v174 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = (std::__shared_weak_count *)*((_QWORD *)&v226 + 1);
  if (*((_QWORD *)&v226 + 1))
  {
    v177 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
}

void sub_1916A8270(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_cell(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t a10)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  std::runtime_error *exception;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  _OWORD v137[8];
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  _OWORD v147[8];
  uint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  _OWORD v159[8];
  uint64_t v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  _OWORD v169[8];
  uint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;

  a1[154] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 32))(*a5);
  switch(*(_DWORD *)a4)
  {
    case 0:
      v18 = (std::__shared_weak_count *)a2[1];
      v161 = *a2;
      v162 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
      }
      v21 = *(_OWORD *)(a4 + 112);
      v159[6] = *(_OWORD *)(a4 + 96);
      v159[7] = v21;
      v160 = *(_QWORD *)(a4 + 128);
      v22 = *(_OWORD *)(a4 + 48);
      v159[2] = *(_OWORD *)(a4 + 32);
      v159[3] = v22;
      v23 = *(_OWORD *)(a4 + 80);
      v159[4] = *(_OWORD *)(a4 + 64);
      v159[5] = v23;
      v24 = *(_OWORD *)(a4 + 16);
      v159[0] = *(_OWORD *)a4;
      v159[1] = v24;
      v25 = (std::__shared_weak_count *)a5[1];
      v157 = *a5;
      v158 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = (std::__shared_weak_count *)a7[1];
      v155 = *a7;
      v156 = v28;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = (std::__shared_weak_count *)a8[1];
      v153 = *a8;
      v154 = v31;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v34 = (std::__shared_weak_count *)a9[1];
      v151 = *a9;
      v152 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      (*(void (**)(_DWORD *, uint64_t *, uint64_t, _OWORD *, uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v161, a3, v159, &v157, a6, &v155, &v153, &v151, a10);
      v37 = v152;
      if (v152)
      {
        v38 = (unint64_t *)&v152->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = v154;
      if (v154)
      {
        v41 = (unint64_t *)&v154->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = v156;
      if (v156)
      {
        v44 = (unint64_t *)&v156->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = v158;
      if (v158)
      {
        v47 = (unint64_t *)&v158->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = v162;
      if (!v162)
        return;
      v50 = (unint64_t *)&v162->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      break;
    case 1:
      v78 = (std::__shared_weak_count *)a2[1];
      v171 = *a2;
      v172 = v78;
      if (v78)
      {
        v79 = (unint64_t *)&v78->__shared_owners_;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      v81 = *(_OWORD *)(a4 + 112);
      v169[6] = *(_OWORD *)(a4 + 96);
      v169[7] = v81;
      v170 = *(_QWORD *)(a4 + 128);
      v82 = *(_OWORD *)(a4 + 48);
      v169[2] = *(_OWORD *)(a4 + 32);
      v169[3] = v82;
      v83 = *(_OWORD *)(a4 + 80);
      v169[4] = *(_OWORD *)(a4 + 64);
      v169[5] = v83;
      v84 = *(_OWORD *)(a4 + 16);
      v169[0] = *(_OWORD *)a4;
      v169[1] = v84;
      v85 = (std::__shared_weak_count *)a5[1];
      v167 = *a5;
      v168 = v85;
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      v88 = (std::__shared_weak_count *)a7[1];
      v165 = *a7;
      v166 = v88;
      if (v88)
      {
        v89 = (unint64_t *)&v88->__shared_owners_;
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
      v91 = (std::__shared_weak_count *)a8[1];
      v163 = *a8;
      v164 = v91;
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      (*(void (**)(_DWORD *, uint64_t *, uint64_t, _OWORD *, uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 416))(a1, &v171, a3, v169, &v167, a6, &v165, &v163, a10);
      v94 = v164;
      if (v164)
      {
        v95 = (unint64_t *)&v164->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v97 = v166;
      if (v166)
      {
        v98 = (unint64_t *)&v166->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v100 = v168;
      if (v168)
      {
        v101 = (unint64_t *)&v168->__shared_owners_;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v49 = v172;
      if (!v172)
        return;
      v103 = (unint64_t *)&v172->__shared_owners_;
      do
        v51 = __ldaxr(v103);
      while (__stlxr(v51 - 1, v103));
      break;
    case 2:
      v52 = (std::__shared_weak_count *)a2[1];
      v149 = *a2;
      v150 = v52;
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v55 = *(_OWORD *)(a4 + 112);
      v147[6] = *(_OWORD *)(a4 + 96);
      v147[7] = v55;
      v148 = *(_QWORD *)(a4 + 128);
      v56 = *(_OWORD *)(a4 + 48);
      v147[2] = *(_OWORD *)(a4 + 32);
      v147[3] = v56;
      v57 = *(_OWORD *)(a4 + 80);
      v147[4] = *(_OWORD *)(a4 + 64);
      v147[5] = v57;
      v58 = *(_OWORD *)(a4 + 16);
      v147[0] = *(_OWORD *)a4;
      v147[1] = v58;
      v59 = (std::__shared_weak_count *)a5[1];
      v145 = *a5;
      v146 = v59;
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      v62 = (std::__shared_weak_count *)a7[1];
      v143 = *a7;
      v144 = v62;
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      v65 = (std::__shared_weak_count *)a8[1];
      v141 = *a8;
      v142 = v65;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      (*(void (**)(_DWORD *, uint64_t *, uint64_t, _OWORD *, uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 424))(a1, &v149, a3, v147, &v145, a6, &v143, &v141, a10);
      v68 = v142;
      if (v142)
      {
        v69 = (unint64_t *)&v142->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = v144;
      if (v144)
      {
        v72 = (unint64_t *)&v144->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v74 = v146;
      if (v146)
      {
        v75 = (unint64_t *)&v146->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v49 = v150;
      if (!v150)
        return;
      v77 = (unint64_t *)&v150->__shared_owners_;
      do
        v51 = __ldaxr(v77);
      while (__stlxr(v51 - 1, v77));
      break;
    case 3:
      v104 = (std::__shared_weak_count *)a2[1];
      v139 = *a2;
      v140 = v104;
      if (v104)
      {
        v105 = (unint64_t *)&v104->__shared_owners_;
        do
          v106 = __ldxr(v105);
        while (__stxr(v106 + 1, v105));
      }
      v107 = *(_OWORD *)(a4 + 112);
      v137[6] = *(_OWORD *)(a4 + 96);
      v137[7] = v107;
      v138 = *(_QWORD *)(a4 + 128);
      v108 = *(_OWORD *)(a4 + 48);
      v137[2] = *(_OWORD *)(a4 + 32);
      v137[3] = v108;
      v109 = *(_OWORD *)(a4 + 80);
      v137[4] = *(_OWORD *)(a4 + 64);
      v137[5] = v109;
      v110 = *(_OWORD *)(a4 + 16);
      v137[0] = *(_OWORD *)a4;
      v137[1] = v110;
      v111 = (std::__shared_weak_count *)a5[1];
      v135 = *a5;
      v136 = v111;
      if (v111)
      {
        v112 = (unint64_t *)&v111->__shared_owners_;
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 1, v112));
      }
      v114 = (std::__shared_weak_count *)a7[1];
      v133 = *a7;
      v134 = v114;
      if (v114)
      {
        v115 = (unint64_t *)&v114->__shared_owners_;
        do
          v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
      }
      v117 = (std::__shared_weak_count *)a8[1];
      v131 = *a8;
      v132 = v117;
      if (v117)
      {
        v118 = (unint64_t *)&v117->__shared_owners_;
        do
          v119 = __ldxr(v118);
        while (__stxr(v119 + 1, v118));
      }
      (*(void (**)(_DWORD *, uint64_t *, uint64_t, _OWORD *, uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 432))(a1, &v139, a3, v137, &v135, a6, &v133, &v131, a10);
      v120 = v132;
      if (v132)
      {
        v121 = (unint64_t *)&v132->__shared_owners_;
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      v123 = v134;
      if (v134)
      {
        v124 = (unint64_t *)&v134->__shared_owners_;
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      v126 = v136;
      if (v136)
      {
        v127 = (unint64_t *)&v136->__shared_owners_;
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
      v49 = v140;
      if (!v140)
        return;
      v129 = (unint64_t *)&v140->__shared_owners_;
      do
        v51 = __ldaxr(v129);
      while (__stlxr(v51 - 1, v129));
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "invalid value");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
}

void sub_1916A8B2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_cell_lstm(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4, __int128 *a5, int a6, unsigned int **a7, __int128 *a8, __int128 *a9, int a10, int a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  void **v22;
  uint64_t v23;
  __int128 *v24;
  void **v25;
  __int128 *v26;
  void **v27;
  __int128 *v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  __int128 *v36;
  _BYTE *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  vDSP_Length v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  BOOL v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  size_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  __int128 *v100;
  void **v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  vDSP_Length v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t *v129[3];
  uint64_t *v130[3];
  void *v131[2];
  char v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t *v135[3];
  uint64_t *v136[3];
  void *__p[2];
  char v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  void **v147;
  std::__shared_weak_count *v148;
  _QWORD v149[2];
  char v150;
  _QWORD v151[2];
  char v152;
  _QWORD v153[2];
  char v154;
  _QWORD v155[2];
  char v156;
  _QWORD v157[2];
  char v158;
  _QWORD v159[2];
  char v160;
  uint64_t *v161[3];
  uint64_t *v162[3];
  void *v163[2];
  char v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  uint64_t *v167[3];
  uint64_t *v168[3];
  void *v169[2];
  char v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  char *v178;
  char *v179;
  _QWORD v180[2];
  char v181;
  _QWORD v182[2];
  char v183;
  _QWORD v184[2];
  char v185;
  _QWORD v186[2];
  char v187;

  v16 = *(_QWORD *)a5;
  v17 = (4 * *(_DWORD *)(a4 + 76));
  if ((a10 & a6) != 0xFFFFFFFF)
  {
    HIDWORD(v126) = a10;
    v19 = *(unsigned int *)(a4 + 80);
    if (a1[456])
    {
      v20 = *(unsigned int *)(v16 + 12);
      std::string::basic_string[abi:ne180100]<0>(v159, "ifog");
      v21 = (__int128 *)(*(uint64_t (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v159, v17, v20, 1, 1, 1, 2);
      if ((v160 & 0x80000000) == 0)
        goto LABEL_11;
      v22 = (void **)v159;
    }
    else
    {
      v20 = *(unsigned int *)(v16 + 20);
      std::string::basic_string[abi:ne180100]<0>(v157, "ifog");
      v21 = (__int128 *)(*(uint64_t (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v157, 1, 1, v17, v20, 1, 0xFFFFFFFFLL);
      if ((v158 & 0x80000000) == 0)
        goto LABEL_11;
      v22 = (void **)v157;
    }
    operator delete(*v22);
LABEL_11:
    if (a1[456])
    {
      std::string::basic_string[abi:ne180100]<0>(v155, "ifog_h");
      v26 = (__int128 *)(*(uint64_t (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v155, v17, v20, 1, 1, 1, 2);
      if ((v156 & 0x80000000) == 0)
        goto LABEL_17;
      v27 = (void **)v155;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v153, "ifog_h");
      v26 = (__int128 *)(*(uint64_t (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v153, 1, 1, v17, v20, 1, 0xFFFFFFFFLL);
      if ((v154 & 0x80000000) == 0)
        goto LABEL_17;
      v27 = (void **)v153;
    }
    operator delete(*v27);
LABEL_17:
    v177 = 0uLL;
    Espresso::layer_data::layer_data(&v178, v21, &v177);
    v176 = 0uLL;
    Espresso::layer_data::layer_data((char **)&v177, v26, &v176);
    v175 = 0uLL;
    Espresso::layer_data::layer_data((char **)&v176, a8, &v175);
    v142 = 0uLL;
    Espresso::layer_data::layer_data((char **)&v175, a9, &v142);
    if (a1[456])
    {
      std::string::basic_string[abi:ne180100]<0>(v151, "x1");
      LODWORD(v126) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a5 + 32))(*(_QWORD *)a5);
      v28 = (__int128 *)(*(uint64_t (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, v151, v19, v20, 1, 1, 1, 2, v126);
      if (v152 < 0)
      {
        v29 = (void **)v151;
LABEL_22:
        operator delete(*v29);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v149, "x1");
      LODWORD(v126) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a5 + 32))(*(_QWORD *)a5);
      v28 = (__int128 *)(*(uint64_t (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, v149, 1, 1, v19, v20, 1, 0xFFFFFFFFLL, v126);
      if (v150 < 0)
      {
        v29 = (void **)v149;
        goto LABEL_22;
      }
    }
    if (*(_QWORD *)v28 && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)v28 + 32))(*(_QWORD *)v28))
    {
      v30 = *(_QWORD *)(*(_QWORD *)v28 + 160);
      v89 = *(std::__shared_weak_count **)(*(_QWORD *)v28 + 168);
      v173 = v30;
      v174 = v89;
      if (v89)
      {
        p_shared_owners = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldxr(p_shared_owners);
        while (__stxr(v91 + 1, p_shared_owners));
      }
    }
    else
    {
      v30 = 0;
      v174 = 0;
      v173 = 0;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)a5 + 32))(*(_QWORD *)a5);
    v31 = *(_QWORD *)(*(_QWORD *)a5 + 160);
    v32 = *(std::__shared_weak_count **)(*(_QWORD *)a5 + 168);
    v147 = (void **)v31;
    v148 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v35 = *(_DWORD *)(*(_QWORD *)a5 + 12)
        * *(_DWORD *)(*(_QWORD *)a5 + 8)
        * *(_DWORD *)(*(_QWORD *)a5 + 16)
        * *(_DWORD *)(*(_QWORD *)a5 + 20);
    if (a1[456])
      v35 = *(_DWORD *)(*(_QWORD *)a5 + 12) * *(_DWORD *)(*(_QWORD *)a5 + 8);
    memcpy(*(void **)(v30 + 24), (const void *)(*(_QWORD *)(v31 + 24) + 4 * v35 * a6), 4 * v35);
    if (*(_QWORD *)v21 && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)v21 + 32))(*(_QWORD *)v21))
    {
      v92 = *(std::__shared_weak_count **)(*(_QWORD *)v21 + 168);
      v145 = *(_QWORD *)(*(_QWORD *)v21 + 160);
      v146 = v92;
      if (v92)
      {
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
    }
    else
    {
      v145 = 0;
      v146 = 0;
    }
    if (*(_QWORD *)v26 && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)v26 + 32))(*(_QWORD *)v26))
    {
      v95 = *(std::__shared_weak_count **)(*(_QWORD *)v26 + 168);
      v143 = *(_QWORD *)(*(_QWORD *)v26 + 160);
      v144 = v95;
      v36 = a8;
      if (v95)
      {
        v96 = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldxr(v96);
        while (__stxr(v97 + 1, v96));
      }
    }
    else
    {
      v143 = 0;
      v144 = 0;
      v36 = a8;
    }
    v141 = 0uLL;
    Espresso::layer_data::layer_data((char **)&v142, v28, &v141);
    v37 = &a1[16 * (int)a3];
    if (!*((_QWORD *)v37 + 78))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_rnn_arch_kernel_impl: LSTM weights not set");
    v38 = (std::__shared_weak_count *)a2[1];
    v139 = *a2;
    v140 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "x1");
    memset(v136, 0, sizeof(v136));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v136, v178, v179, (v179 - v178) >> 4);
    memset(v135, 0, sizeof(v135));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v135, (_QWORD *)v142, *((_QWORD **)&v142 + 1), (uint64_t)(*((_QWORD *)&v142 + 1) - v142) >> 4);
    Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v139, (const void **)__p, v136, v135, *((_QWORD *)v37 + 78), *(_QWORD *)&a1[16 * (int)a3 + 488], *(_QWORD *)&a1[16 * (int)a3 + 520]);
    *(_QWORD *)&v141 = v135;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
    *(_QWORD *)&v141 = v136;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
    if (v138 < 0)
      operator delete(__p[0]);
    v41 = v140;
    if (v140)
    {
      v42 = (unint64_t *)&v140->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = (std::__shared_weak_count *)a2[1];
    v133 = *a2;
    v134 = v44;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    std::string::basic_string[abi:ne180100]<0>(v131, "h");
    memset(v130, 0, sizeof(v130));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v130, (_QWORD *)v177, *((_QWORD **)&v177 + 1), (uint64_t)(*((_QWORD *)&v177 + 1) - v177) >> 4);
    memset(v129, 0, sizeof(v129));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v129, (_QWORD *)v176, *((_QWORD **)&v176 + 1), (uint64_t)(*((_QWORD *)&v176 + 1) - v176) >> 4);
    Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v133, (const void **)v131, v130, v129, *(_QWORD *)&a1[16 * (int)a3 + 656], *(_QWORD *)&a1[16 * (int)a3 + 552], *(_QWORD *)&a1[16 * (int)a3 + 584]);
    *(_QWORD *)&v141 = v129;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
    *(_QWORD *)&v141 = v130;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
    if (v132 < 0)
      operator delete(v131[0]);
    v47 = v134;
    if (v134)
    {
      v48 = (unint64_t *)&v134->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = 0;
    v51 = *(int *)(v145 + 8);
    do
    {
      v51 *= *(int *)(v145 + 12 + v50);
      v50 += 4;
    }
    while (v50 != 12);
    vDSP_vadd(*(const float **)(v145 + 24), 1, *(const float **)(v143 + 24), 1, *(float **)(v145 + 24), 1, v51);
    (*(void (**)(_BYTE *, uint64_t *, uint64_t, __int128 *, __int128 *, __int128 *))(*(_QWORD *)a1 + 440))(a1, a2, a3, v36, a9, v21);
    if (a1[456])
      v52 = (*a7)[3] * (*a7)[2];
    else
      v52 = (*a7)[3] * (*a7)[2] * (*a7)[4] * (*a7)[5];
    if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)*a7 + 32))(*a7))
    {
      v53 = 0;
      v141 = 0uLL;
    }
    else
    {
      v53 = *((_QWORD *)*a7 + 20);
      v54 = *((_QWORD *)*a7 + 21);
      *(_QWORD *)&v141 = v53;
      *((_QWORD *)&v141 + 1) = v54;
      if (v54)
      {
        v55 = (unint64_t *)(v54 + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
    }
    if (*(_QWORD *)v36 && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)v36 + 32))(*(_QWORD *)v36))
    {
      v57 = *(_QWORD *)(*(_QWORD *)v36 + 160);
      v58 = *(std::__shared_weak_count **)(*(_QWORD *)v36 + 168);
      if (v58)
      {
        v98 = (unint64_t *)&v58->__shared_owners_;
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
      }
    }
    else
    {
      v57 = 0;
      v58 = 0;
    }
    v59 = *(_DWORD *)(v57 + 8);
    v60 = *a7;
    v61 = (*a7)[2];
    if (a1[456])
    {
      v62 = v60 + 3;
      v63 = v59 == v61;
      v64 = *(_DWORD *)(v57 + 8);
    }
    else
    {
      v61 *= v60[3] * v60[4];
      v64 = *(_DWORD *)(v57 + 12) * v59 * *(_DWORD *)(v57 + 16);
      v63 = v64 == v61;
      v62 = v60 + 5;
    }
    v65 = *v62;
    if ((int)v65 < 2 || v63)
    {
      v70 = 0;
      v71 = v59;
      do
      {
        v71 *= *(int *)(v57 + 12 + v70);
        v70 += 4;
      }
      while (v70 != 12);
      memcpy((void *)(*(_QWORD *)(v53 + 24) + 4 * v52 * v127 + 4 * a11), *(const void **)(v57 + 24), 4 * v71);
      if (!v58)
        goto LABEL_87;
    }
    else
    {
      v66 = 0;
      v67 = 4 * v64;
      v68 = 4 * a11 + 4 * v52 * v127;
      v69 = 4 * (int)v61;
      do
      {
        memcpy((void *)(*(_QWORD *)(v53 + 24) + v68), (const void *)(*(_QWORD *)(v57 + 24) + v66), v67);
        v66 += v67;
        v68 += v69;
        --v65;
      }
      while (v65);
      if (!v58)
        goto LABEL_87;
    }
    v72 = (unint64_t *)&v58->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
LABEL_87:
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
    if (*((_QWORD *)&v141 + 1))
    {
      v75 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    *(_QWORD *)&v141 = &v142;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
    v77 = v144;
    if (v144)
    {
      v78 = (unint64_t *)&v144->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = v146;
    if (v146)
    {
      v81 = (unint64_t *)&v146->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v83 = v148;
    if (v148)
    {
      v84 = (unint64_t *)&v148->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = v174;
    if (v174)
    {
      v87 = (unint64_t *)&v174->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      goto LABEL_172;
    }
    goto LABEL_174;
  }
  if (a1[456])
  {
    v23 = *(unsigned int *)(v16 + 12);
    std::string::basic_string[abi:ne180100]<0>(v186, "ifog");
    v24 = (__int128 *)(*(uint64_t (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v186, v17, v23, 1, 1, 1, 2);
    if ((v187 & 0x80000000) == 0)
      goto LABEL_130;
    v25 = (void **)v186;
  }
  else
  {
    v23 = *(unsigned int *)(v16 + 20);
    std::string::basic_string[abi:ne180100]<0>(v184, "ifog");
    v24 = (__int128 *)(*(uint64_t (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v184, 1, 1, v17, v23, 1, 0xFFFFFFFFLL);
    if ((v185 & 0x80000000) == 0)
      goto LABEL_130;
    v25 = (void **)v184;
  }
  operator delete(*v25);
LABEL_130:
  if (a1[456])
  {
    std::string::basic_string[abi:ne180100]<0>(v182, "ifog_h");
    v100 = (__int128 *)(*(uint64_t (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v182, v17, v23, 1, 1, 1, 2);
    if (v183 < 0)
    {
      v101 = (void **)v182;
LABEL_135:
      operator delete(*v101);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v180, "ifog_h");
    v100 = (__int128 *)(*(uint64_t (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v180, 1, 1, v17, v23, 1, 0xFFFFFFFFLL);
    if (v181 < 0)
    {
      v101 = (void **)v180;
      goto LABEL_135;
    }
  }
  v177 = 0uLL;
  Espresso::layer_data::layer_data(&v178, v24, &v177);
  v176 = 0uLL;
  Espresso::layer_data::layer_data((char **)&v177, v100, &v176);
  v175 = 0uLL;
  Espresso::layer_data::layer_data((char **)&v176, a8, &v175);
  v142 = 0uLL;
  Espresso::layer_data::layer_data((char **)&v175, a5, &v142);
  if (*(_QWORD *)v24 && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)v24 + 32))(*(_QWORD *)v24))
  {
    v120 = *(_QWORD *)(*(_QWORD *)v24 + 168);
    *(_QWORD *)&v142 = *(_QWORD *)(*(_QWORD *)v24 + 160);
    *((_QWORD *)&v142 + 1) = v120;
    if (v120)
    {
      v121 = (unint64_t *)(v120 + 8);
      do
        v122 = __ldxr(v121);
      while (__stxr(v122 + 1, v121));
    }
  }
  else
  {
    v142 = 0uLL;
  }
  if (*(_QWORD *)v100 && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)v100 + 32))(*(_QWORD *)v100))
  {
    v123 = *(std::__shared_weak_count **)(*(_QWORD *)v100 + 168);
    v173 = *(_QWORD *)(*(_QWORD *)v100 + 160);
    v174 = v123;
    if (v123)
    {
      v124 = (unint64_t *)&v123->__shared_owners_;
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
  }
  else
  {
    v174 = 0;
    v173 = 0;
  }
  v102 = (std::__shared_weak_count *)a2[1];
  v171 = *a2;
  v172 = v102;
  if (v102)
  {
    v103 = (unint64_t *)&v102->__shared_owners_;
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  std::string::basic_string[abi:ne180100]<0>(v169, "h");
  memset(v168, 0, sizeof(v168));
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v168, (_QWORD *)v177, *((_QWORD **)&v177 + 1), (uint64_t)(*((_QWORD *)&v177 + 1) - v177) >> 4);
  memset(v167, 0, sizeof(v167));
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v167, (_QWORD *)v176, *((_QWORD **)&v176 + 1), (uint64_t)(*((_QWORD *)&v176 + 1) - v176) >> 4);
  Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v171, (const void **)v169, v168, v167, *(_QWORD *)&a1[16 * (int)a3 + 656], *(_QWORD *)&a1[16 * (int)a3 + 552], *(_QWORD *)&a1[16 * (int)a3 + 584]);
  v147 = (void **)v167;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v147);
  v147 = (void **)v168;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v147);
  if (v170 < 0)
    operator delete(v169[0]);
  v105 = v172;
  if (v172)
  {
    v106 = (unint64_t *)&v172->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = (std::__shared_weak_count *)a2[1];
  v165 = *a2;
  v166 = v108;
  if (v108)
  {
    v109 = (unint64_t *)&v108->__shared_owners_;
    do
      v110 = __ldxr(v109);
    while (__stxr(v110 + 1, v109));
  }
  std::string::basic_string[abi:ne180100]<0>(v163, "x");
  memset(v162, 0, sizeof(v162));
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v162, v178, v179, (v179 - v178) >> 4);
  memset(v161, 0, sizeof(v161));
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v161, (_QWORD *)v175, *((_QWORD **)&v175 + 1), (uint64_t)(*((_QWORD *)&v175 + 1) - v175) >> 4);
  Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v165, (const void **)v163, v162, v161, *(_QWORD *)&a1[16 * (int)a3 + 624], *(_QWORD *)&a1[16 * (int)a3 + 488], *(_QWORD *)&a1[16 * (int)a3 + 520]);
  v147 = (void **)v161;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v147);
  v147 = (void **)v162;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v147);
  if (v164 < 0)
    operator delete(v163[0]);
  v111 = v166;
  if (v166)
  {
    v112 = (unint64_t *)&v166->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = 0;
  v115 = *(int *)(v142 + 8);
  do
  {
    v115 *= *(int *)(v142 + 12 + v114);
    v114 += 4;
  }
  while (v114 != 12);
  vDSP_vadd(*(const float **)(v142 + 24), 1, *(const float **)(v173 + 24), 1, *(float **)(v142 + 24), 1, v115);
  (*(void (**)(_BYTE *, uint64_t *, uint64_t, __int128 *, __int128 *, __int128 *))(*(_QWORD *)a1 + 440))(a1, a2, a3, a8, a9, v24);
  v116 = v174;
  if (v174)
  {
    v117 = (unint64_t *)&v174->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v119 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v88 = __ldaxr(v119);
    while (__stlxr(v88 - 1, v119));
LABEL_172:
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
LABEL_174:
  *(_QWORD *)&v142 = &v175;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
  *(_QWORD *)&v175 = &v176;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v175);
  *(_QWORD *)&v176 = &v177;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
  *(_QWORD *)&v177 = &v178;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v177);
}

void sub_1916A9B1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_cell_rnn(uint64_t **a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, __int128 *a8, int a9)
{
  uint64_t **v17;
  _OWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _OWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _OWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t **v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  vDSP_Length v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  size_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  vDSP_Length v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::runtime_error *exception;
  uint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void **v124;
  std::__shared_weak_count *v125;
  uint64_t *v126[3];
  uint64_t *v127[3];
  void *v128[2];
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t *v132[3];
  uint64_t *v133[3];
  void *v134[2];
  char v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  __int128 v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  __int128 v145;
  void *__p[2];
  char v147;
  uint64_t *v148[3];
  uint64_t *v149[3];
  void *v150[2];
  char v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  uint64_t *v154[3];
  uint64_t *v155[3];
  void *v156[2];
  char v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  char *v167;
  char *v168;
  char v169;
  uint64_t v170;
  std::__shared_weak_count *v171;

  v17 = a1 + 35;
  std::string::basic_string[abi:ne180100]<0>(&v167, "W_h");
  *(_QWORD *)&v162 = &v167;
  v18 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v17, &v167, (_OWORD **)&v162);
  v19 = (std::__shared_weak_count *)*((_QWORD *)v18 + 8);
  v170 = *((_QWORD *)v18 + 7);
  v171 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v169 < 0)
    operator delete(v167);
  std::string::basic_string[abi:ne180100]<0>(&v167, "W_x");
  *(_QWORD *)&v162 = &v167;
  v22 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v17, &v167, (_OWORD **)&v162);
  v23 = (std::__shared_weak_count *)*((_QWORD *)v22 + 8);
  v165 = *((_QWORD *)v22 + 7);
  v166 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  if (v169 < 0)
    operator delete(v167);
  std::string::basic_string[abi:ne180100]<0>(&v167, "b");
  *(_QWORD *)&v162 = &v167;
  v26 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v17, &v167, (_OWORD **)&v162);
  v27 = (std::__shared_weak_count *)*((_QWORD *)v26 + 8);
  v163 = *((_QWORD *)v26 + 7);
  v164 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v121 = a7;
  if (v169 < 0)
    operator delete(v167);
  if ((a9 & a6) == 0xFFFFFFFF)
  {
    v162 = 0uLL;
    Espresso::layer_data::layer_data(&v167, a8, &v162);
    v161 = 0uLL;
    Espresso::layer_data::layer_data((char **)&v162, (__int128 *)a5, &v161);
    v160 = 0uLL;
    Espresso::layer_data::layer_data((char **)&v161, (__int128 *)a7, &v160);
    v94 = (std::__shared_weak_count *)a2[1];
    v158 = *a2;
    v159 = v94;
    if (v94)
    {
      v95 = (unint64_t *)&v94->__shared_owners_;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    std::string::basic_string[abi:ne180100]<0>(v156, "h");
    memset(v155, 0, sizeof(v155));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v155, (_QWORD *)v161, *((_QWORD **)&v161 + 1), (uint64_t)(*((_QWORD *)&v161 + 1) - v161) >> 4);
    memset(v154, 0, sizeof(v154));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v154, v167, v168, (v168 - v167) >> 4);
    Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v158, (const void **)v156, v155, v154, (uint64_t)a1[2 * a3 + 82], (uint64_t)a1[2 * a3 + 69], (uint64_t)a1[2 * a3 + 73]);
    *(_QWORD *)&v160 = v154;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
    *(_QWORD *)&v160 = v155;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
    if (v157 < 0)
      operator delete(v156[0]);
    v97 = v159;
    if (v159)
    {
      v98 = (unint64_t *)&v159->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v100 = (std::__shared_weak_count *)a2[1];
    v152 = *a2;
    v153 = v100;
    if (v100)
    {
      v101 = (unint64_t *)&v100->__shared_owners_;
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
    }
    std::string::basic_string[abi:ne180100]<0>(v150, "x");
    memset(v149, 0, sizeof(v149));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v149, (_QWORD *)v161, *((_QWORD **)&v161 + 1), (uint64_t)(*((_QWORD *)&v161 + 1) - v161) >> 4);
    memset(v148, 0, sizeof(v148));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v148, (_QWORD *)v162, *((_QWORD **)&v162 + 1), (uint64_t)(*((_QWORD *)&v162 + 1) - v162) >> 4);
    Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v152, (const void **)v150, v149, v148, (uint64_t)a1[2 * a3 + 78], (uint64_t)a1[2 * a3 + 61], (uint64_t)a1[2 * a3 + 65]);
    *(_QWORD *)&v160 = v148;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
    *(_QWORD *)&v160 = v149;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
    if (v151 < 0)
      operator delete(v150[0]);
    v103 = v153;
    if (v153)
    {
      v104 = (unint64_t *)&v153->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v160, *(void **)a7, *(std::__shared_weak_count **)(a7 + 8));
    v106 = 0;
    v107 = *(int *)(v160 + 8);
    do
    {
      v107 *= *(int *)(v160 + 12 + v106);
      v106 += 4;
    }
    while (v106 != 12);
    Espresso::apply_nonlinearity2(*(const float **)(v160 + 24), *(float **)(v160 + 24), v107, a4 + 4);
    v108 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
    if (*((_QWORD *)&v160 + 1))
    {
      v109 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
    *(_QWORD *)&v160 = &v161;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
    *(_QWORD *)&v161 = &v162;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
    *(_QWORD *)&v162 = &v167;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
  }
  else
  {
    v30 = a8;
    v31 = a3;
    v32 = *(unsigned int *)(a4 + 76);
    v33 = *(unsigned int *)(a4 + 80);
    v34 = a4;
    v35 = 12;
    if (!*((_BYTE *)a1 + 456))
      v35 = 20;
    v36 = *(unsigned int *)(*(_QWORD *)a5 + v35);
    std::string::basic_string[abi:ne180100]<0>(__p, "tmp");
    v37 = (_QWORD *)((uint64_t (*)(uint64_t **, void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1)[56])(a1, __p, 1, 1, v32, v36, 1, 0xFFFFFFFFLL);
    v38 = v37[1];
    *(_QWORD *)&v160 = *v37;
    *((_QWORD *)&v160 + 1) = v38;
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    if (v147 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(v143, "x1");
    v41 = ((uint64_t (*)(uint64_t **, void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1)[56])(a1, v143, 1, 1, v33, v36, 1, 0xFFFFFFFFLL);
    v42 = *(void **)v41;
    v43 = *(std::__shared_weak_count **)(v41 + 8);
    *(_QWORD *)&v145 = *(_QWORD *)v41;
    *((_QWORD *)&v145 + 1) = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    if (v144 < 0)
      operator delete(v143[0]);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v141, v42, v43);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v139, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
    v46 = *(_DWORD *)(*(_QWORD *)a5 + 12)
        * *(_DWORD *)(*(_QWORD *)a5 + 8)
        * *(_DWORD *)(*(_QWORD *)a5 + 16)
        * *(_DWORD *)(*(_QWORD *)a5 + 20);
    memcpy(*(void **)(v141 + 24), (const void *)(*(_QWORD *)(v139 + 24) + 4 * v46 * a6), 4 * v46);
    v162 = 0uLL;
    Espresso::layer_data::layer_data(&v167, &v160, &v162);
    v161 = 0uLL;
    Espresso::layer_data::layer_data((char **)&v162, v30, &v161);
    v138 = 0uLL;
    Espresso::layer_data::layer_data((char **)&v161, &v145, &v138);
    if ((int)((unint64_t)(v168 - v167) >> 4) >= 1
      && *(_QWORD *)v167
    {
      v48 = v47[21];
      *(_QWORD *)&v138 = v47[20];
      *((_QWORD *)&v138 + 1) = v48;
      if (v48)
      {
        v49 = (unint64_t *)(v48 + 8);
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v138 = 0uLL;
    }
    v51 = &a1[2 * v31];
    if (!v51[78])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "weights not set");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v52 = (std::__shared_weak_count *)a2[1];
    v136 = *a2;
    v137 = v52;
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    std::string::basic_string[abi:ne180100]<0>(v134, "x1");
    memset(v133, 0, sizeof(v133));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v133, v167, v168, (v168 - v167) >> 4);
    memset(v132, 0, sizeof(v132));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v132, (_QWORD *)v161, *((_QWORD **)&v161 + 1), (uint64_t)(*((_QWORD *)&v161 + 1) - v161) >> 4);
    Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v136, (const void **)v134, v133, v132, (uint64_t)v51[78], (uint64_t)a1[2 * v31 + 61], (uint64_t)a1[2 * v31 + 65]);
    v124 = (void **)v132;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v124);
    v124 = (void **)v133;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v124);
    if (v135 < 0)
      operator delete(v134[0]);
    v55 = v137;
    if (v137)
    {
      v56 = (unint64_t *)&v137->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = (std::__shared_weak_count *)a2[1];
    v130 = *a2;
    v131 = v58;
    if (v58)
    {
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    std::string::basic_string[abi:ne180100]<0>(v128, "h");
    memset(v127, 0, sizeof(v127));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v127, v167, v168, (v168 - v167) >> 4);
    memset(v126, 0, sizeof(v126));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v126, (_QWORD *)v162, *((_QWORD **)&v162 + 1), (uint64_t)(*((_QWORD *)&v162 + 1) - v162) >> 4);
    Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v130, (const void **)v128, v127, v126, (uint64_t)a1[2 * v31 + 82], (uint64_t)a1[2 * v31 + 69], (uint64_t)a1[2 * v31 + 73]);
    v124 = (void **)v126;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v124);
    v124 = (void **)v127;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v124);
    if (v129 < 0)
      operator delete(v128[0]);
    v61 = v131;
    if (v131)
    {
      v62 = (unint64_t *)&v131->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = 0;
    v65 = v138;
    v66 = *(int *)(v138 + 8);
    do
    {
      v66 *= *(int *)(v138 + 12 + v64);
      v64 += 4;
    }
    while (v64 != 12);
    Espresso::apply_nonlinearity2(*(const float **)(v138 + 24), *(float **)(v138 + 24), v66, v34 + 4);
    v67 = *(_DWORD *)(*(_QWORD *)v121 + 8);
    v68 = *(_DWORD *)(*(_QWORD *)v121 + 12);
    v70 = *(_DWORD *)(*(_QWORD *)v121 + 16);
    v69 = *(_DWORD *)(*(_QWORD *)v121 + 20);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v124, *(void **)v121, *(std::__shared_weak_count **)(v121 + 8));
    v71 = v68 * v67 * v70 * v69;
    v72 = 4 * v71;
    memcpy((char *)v124[3] + 4 * v71 * a9, *(const void **)(v65 + 24), v72);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v122, *(void **)v30, *((std::__shared_weak_count **)v30 + 1));
    memcpy(*(void **)(v122 + 24), *(const void **)(v65 + 24), v72);
    v73 = v123;
    if (v123)
    {
      v74 = (unint64_t *)&v123->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76 = v125;
    if (v125)
    {
      v77 = (unint64_t *)&v125->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
    if (*((_QWORD *)&v138 + 1))
    {
      v80 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    *(_QWORD *)&v138 = &v161;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
    *(_QWORD *)&v161 = &v162;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
    *(_QWORD *)&v162 = &v167;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
    v82 = v140;
    if (v140)
    {
      v83 = (unint64_t *)&v140->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = v142;
    if (v142)
    {
      v86 = (unint64_t *)&v142->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v88 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
    if (*((_QWORD *)&v145 + 1))
    {
      v89 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v91 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
    if (*((_QWORD *)&v160 + 1))
    {
      v92 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
  }
  v111 = v164;
  if (v164)
  {
    v112 = (unint64_t *)&v164->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v166;
  if (v166)
  {
    v115 = (unint64_t *)&v166->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v171;
  if (v171)
  {
    v118 = (unint64_t *)&v171->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
}

void sub_1916AAA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,char a46)
{
  void *v46;
  uint64_t v47;

  __cxa_free_exception(v46);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  a37 = v47 - 208;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  *(_QWORD *)(v47 - 208) = v47 - 184;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 208));
  *(_QWORD *)(v47 - 184) = v47 - 128;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 184));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47 - 224);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47 - 104);
  _Unwind_Resume(a1);
}

void sub_1916AACF0()
{
  uint64_t v0;

  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  JUMPOUT(0x1916AACD8);
}

void sub_1916AAD08()
{
  JUMPOUT(0x1916AACD8);
}

void sub_1916AAD10()
{
  uint64_t v0;

  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  JUMPOUT(0x1916AACE0);
}

void sub_1916AAD28()
{
  JUMPOUT(0x1916AACE0);
}

void sub_1916AAD30()
{
  uint64_t v0;

  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  JUMPOUT(0x1916AACE8);
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_cell_gru()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "GRU Not implemented");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1916AAD84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_cell_mgu(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, __int128 *a8, int a9)
{
  vDSP_Length __ldb;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void **v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  void **v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;
  void **v53;
  const float *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  vDSP_Length v66;
  int v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  const float **v70;
  unint64_t *v71;
  unint64_t v72;
  void **v73;
  int v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  void *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  uint64_t v81;
  uint64_t v82;
  vDSP_Length v83;
  const float *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  vDSP_Length v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  float v102;
  _DWORD *v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  size_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  __int128 *v156;
  uint64_t v158;
  uint64_t v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  _QWORD v166[2];
  char v167;
  _QWORD v168[2];
  char v169;
  void *v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  _QWORD v174[2];
  char v175;
  _QWORD v176[2];
  char v177;
  const float **v178;
  std::__shared_weak_count *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  _QWORD v182[2];
  char v183;
  _QWORD v184[2];
  char v185;
  void *v186;
  std::__shared_weak_count *v187;
  __int128 v188;
  __int128 v189;
  uint64_t *v190[3];
  uint64_t *v191[3];
  void *__p[2];
  char v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  char *v198;
  char *v199;
  _QWORD v200[2];
  char v201;
  _QWORD v202[2];
  char v203;
  __int128 v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  _QWORD v209[2];
  char v210;
  _QWORD v211[2];
  char v212;
  __int128 v213;

  __ldb = *(int *)(a1 + 380);
  v15 = *(unsigned int *)(a1 + 384);
  v16 = *(unsigned __int8 *)(a1 + 456);
  v17 = a9 & a6;
  if (*(_BYTE *)(a1 + 456))
  {
    if (v17 != -1)
    {
      v18 = *(unsigned int *)(*(_QWORD *)a5 + 12);
      std::string::basic_string[abi:ne180100]<0>(v211, "x1");
      v158 = v18;
      v19 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v211, v15, v18, 1, 1, 1, 2);
      goto LABEL_6;
    }
LABEL_196:
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("cell mode MGU not supported");
  }
  if (v17 == -1)
    goto LABEL_196;
  v20 = *(unsigned int *)(*(_QWORD *)a5 + 20);
  std::string::basic_string[abi:ne180100]<0>(v209, "x1");
  v158 = v20;
  v19 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v209, 1, 1, v15, v20, 1, 0xFFFFFFFFLL);
LABEL_6:
  v22 = *(void **)v19;
  v21 = *(std::__shared_weak_count **)(v19 + 8);
  *(_QWORD *)&v213 = *(_QWORD *)v19;
  *((_QWORD *)&v213 + 1) = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  if (v16)
  {
    if ((v212 & 0x80000000) == 0)
      goto LABEL_15;
    v25 = (void **)v211;
  }
  else
  {
    if ((v210 & 0x80000000) == 0)
      goto LABEL_15;
    v25 = (void **)v209;
  }
  operator delete(*v25);
LABEL_15:
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v207, v22, v21);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v205, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  memcpy(*(void **)(v207 + 24), (const void *)(*(_QWORD *)(v205 + 24) + 4 * (int)v158 * (int)v15 * a6), 4 * (int)v158 * (int)v15);
  v26 = *(unsigned __int8 *)(a1 + 456);
  if (*(_BYTE *)(a1 + 456))
  {
    std::string::basic_string[abi:ne180100]<0>(v202, "wx");
    v27 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v202, (2 * __ldb), v158, 1, 1, 1, 2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v200, "wx");
    v27 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v200, 1, 1, (2 * __ldb), v158, 1, 0xFFFFFFFFLL);
  }
  v28 = v27[1];
  *(_QWORD *)&v204 = *v27;
  *((_QWORD *)&v204 + 1) = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  if (v26)
  {
    if (v203 < 0)
    {
      v31 = (void **)v202;
LABEL_26:
      operator delete(*v31);
    }
  }
  else if (v201 < 0)
  {
    v31 = (void **)v200;
    goto LABEL_26;
  }
  v189 = 0uLL;
  Espresso::layer_data::layer_data(&v198, &v204, &v189);
  if ((int)((unint64_t)(v199 - v198) >> 4) >= 1
    && *(_QWORD *)v198
  {
    v33 = (std::__shared_weak_count *)v32[21];
    v196 = v32[20];
    v197 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
  }
  else
  {
    v196 = 0;
    v197 = 0;
  }
  v36 = (std::__shared_weak_count *)a2[1];
  v194 = *a2;
  v195 = v36;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "x1");
  memset(v191, 0, sizeof(v191));
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)v191, v198, v199, (v199 - v198) >> 4);
  v189 = 0uLL;
  Espresso::layer_data::layer_data((char **)v190, &v213, &v189);
  Espresso::generic_rnn_arch_kernel_impl::__launch_matmul(a1, (uint64_t)&v194, (const void **)__p, v191, v190, *(_QWORD *)(a1 + 16 * a3 + 624), *(_QWORD *)(a1 + 16 * a3 + 488), *(_QWORD *)(a1 + 16 * a3 + 520));
  *(_QWORD *)&v188 = v190;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v188);
  *(_QWORD *)&v189 = v191;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
  if (v193 < 0)
    operator delete(__p[0]);
  v39 = v195;
  if (v195)
  {
    v40 = (unint64_t *)&v195->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v188 = 0uLL;
  Espresso::layer_data::layer_data((char **)&v189, a8, &v188);
  if ((int)((*((_QWORD *)&v189 + 1) - (_QWORD)v189) >> 4) >= 1
    && *(_QWORD *)v189
  {
    v44 = v42[20];
    v43 = v42[21];
    *(_QWORD *)&v188 = v44;
    *((_QWORD *)&v188 + 1) = v43;
    if (v43)
    {
      v45 = (unint64_t *)(v43 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
  }
  else
  {
    v44 = 0;
    v188 = 0uLL;
  }
  v47 = *(unsigned __int8 *)(a1 + 456);
  if (*(_BYTE *)(a1 + 456))
  {
    std::string::basic_string[abi:ne180100]<0>(v184, "z");
    v48 = (*(uint64_t (**)(uint64_t, _QWORD *, vDSP_Length, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v184, __ldb, v158, 1, 1, 1, 2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v182, "z");
    v48 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, vDSP_Length, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v182, 1, 1, __ldb, v158, 1, 0xFFFFFFFFLL);
  }
  v50 = *(void **)v48;
  v49 = *(std::__shared_weak_count **)(v48 + 8);
  v186 = *(void **)v48;
  v187 = v49;
  if (v49)
  {
    v51 = (unint64_t *)&v49->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  if (v47)
  {
    if (v185 < 0)
    {
      v53 = (void **)v184;
LABEL_64:
      operator delete(*v53);
    }
  }
  else if (v183 < 0)
  {
    v53 = (void **)v182;
    goto LABEL_64;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v180, v50, v49);
  v54 = *(const float **)(v44 + 24);
  v55 = a1 + 16 * a3;
  (*(void (**)(const float ***__return_ptr))(**(_QWORD **)(v55 + 656) + 416))(&v178);
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v158, __ldb, __ldb, 1.0, v54, __ldb, v178[2], __ldb, 0.0, *(float **)(v180 + 24), __ldb);
  v56 = v179;
  if (v179)
  {
    v57 = (unint64_t *)&v179->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v156 = a8;
  v59 = v180;
  if ((_DWORD)v158)
  {
    v60 = 0;
    v61 = 0;
    v62 = v196;
    v63 = (int)v158;
    do
    {
      vDSP_vadd((const float *)(*(_QWORD *)(v62 + 24) + v60), 1, (const float *)(*(_QWORD *)(v59 + 24) + v61), 1, (float *)(*(_QWORD *)(v59 + 24) + v61), 1, __ldb);
      v61 += 4 * __ldb;
      v60 += 8 * __ldb;
      --v63;
    }
    while (v63);
  }
  v64 = 0;
  v65 = v55 + 656;
  v66 = *(int *)(v59 + 8);
  do
  {
    v66 *= *(int *)(v59 + 12 + v64);
    v64 += 4;
  }
  while (v64 != 12);
  Espresso::apply_nonlinearity2(*(const float **)(v59 + 24), *(float **)(v59 + 24), v66, a1 + 320);
  v67 = *(unsigned __int8 *)(a1 + 456);
  if (*(_BYTE *)(a1 + 456))
  {
    std::string::basic_string[abi:ne180100]<0>(v176, "hh");
    v68 = (*(uint64_t (**)(uint64_t, _QWORD *, vDSP_Length, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v176, __ldb, v158, 1, 1, 1, 2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v174, "hh");
    v68 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, vDSP_Length, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v174, 1, 1, __ldb, v158, 1, 0xFFFFFFFFLL);
  }
  v70 = *(const float ***)v68;
  v69 = *(std::__shared_weak_count **)(v68 + 8);
  v178 = *(const float ***)v68;
  v179 = v69;
  if (v69)
  {
    v71 = (unint64_t *)&v69->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  if (v67)
  {
    if ((v177 & 0x80000000) == 0)
      goto LABEL_87;
    v73 = (void **)v176;
  }
  else
  {
    if ((v175 & 0x80000000) == 0)
      goto LABEL_87;
    v73 = (void **)v174;
  }
  operator delete(*v73);
LABEL_87:
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v172, v70, v69);
  v74 = *(unsigned __int8 *)(a1 + 456);
  if (*(_BYTE *)(a1 + 456))
  {
    std::string::basic_string[abi:ne180100]<0>(v168, "hz");
    v75 = (*(uint64_t (**)(uint64_t, _QWORD *, vDSP_Length, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v168, __ldb, v158, 1, 1, 1, 2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v166, "hz");
    v75 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, vDSP_Length, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v166, 1, 1, __ldb, v158, 1, 0xFFFFFFFFLL);
  }
  v77 = *(void **)v75;
  v76 = *(std::__shared_weak_count **)(v75 + 8);
  v170 = *(void **)v75;
  v171 = v76;
  if (v76)
  {
    v78 = (unint64_t *)&v76->__shared_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  if (v74)
  {
    if (v169 < 0)
    {
      v80 = (void **)v168;
LABEL_98:
      operator delete(*v80);
    }
  }
  else if (v167 < 0)
  {
    v80 = (void **)v166;
    goto LABEL_98;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v164, v77, v76);
  v81 = 0;
  v82 = v164;
  v83 = *(int *)(v164 + 8);
  do
  {
    v83 *= *(int *)(v164 + 12 + v81);
    v81 += 4;
  }
  while (v81 != 12);
  vDSP_vmul(*(const float **)(v188 + 24), 1, *(const float **)(v59 + 24), 1, *(float **)(v164 + 24), 1, v83);
  v84 = *(const float **)(v82 + 24);
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v65 + 416))(&v162);
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v158, __ldb, __ldb, 1.0, v84, __ldb, (const float *)(*(_QWORD *)(v162 + 16) + 4 * (__ldb * __ldb)), __ldb, 0.0, *(float **)(v172 + 24), __ldb);
  v85 = v163;
  if (v163)
  {
    v86 = (unint64_t *)&v163->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v172;
  if ((_DWORD)v158)
  {
    v89 = 0;
    v90 = v196;
    v91 = 4 * __ldb;
    v92 = (int)v158;
    do
    {
      vDSP_vadd((const float *)(*(_QWORD *)(v90 + 24) + v91), 1, (const float *)(*(_QWORD *)(v88 + 24) + v89), 1, (float *)(*(_QWORD *)(v88 + 24) + v89), 1, __ldb);
      v89 += 4 * __ldb;
      v91 += 8 * __ldb;
      --v92;
    }
    while (v92);
  }
  v93 = 0;
  v94 = *(int *)(v88 + 8);
  do
  {
    v94 *= *(int *)(v88 + 12 + v93);
    v93 += 4;
  }
  while (v93 != 12);
  Espresso::apply_nonlinearity2(*(const float **)(v88 + 24), *(float **)(v88 + 24), v94, a1 + 308);
  v95 = (int)v158;
  v96 = 0;
  v97 = *(int *)(v88 + 8);
  v98 = v180;
  v99 = v188;
  while (1)
  {
    v100 = 0;
    v101 = v97;
    do
    {
      v101 *= *(int *)(v88 + 12 + v100);
      v100 += 4;
    }
    while (v100 != 12);
    if (v96 >= v101)
      break;
    v102 = *(float *)(*(_QWORD *)(v98 + 24) + 4 * v96);
    *(float *)(*(_QWORD *)(v88 + 24) + 4 * v96) = (float)((float)(1.0 - v102)
                                                        * *(float *)(*(_QWORD *)(v88 + 24) + 4 * v96))
                                                + (float)(v102 * *(float *)(*(_QWORD *)(v99 + 24) + 4 * v96));
    ++v96;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v162, *(void **)a7, *(std::__shared_weak_count **)(a7 + 8));
  v103 = *(_DWORD **)a7;
  v104 = *(_DWORD *)(*(_QWORD *)a7 + 8);
  v105 = *(_DWORD *)(*(_QWORD *)a7 + 12) * v104;
  if (!*(_BYTE *)(a1 + 456))
  {
    v104 = v105 * v103[4];
    v105 = v104 * v103[5];
  }
  v106 = v158 * __ldb;
  v107 = *(_DWORD *)(a1 + 452);
  if (v107)
  {
    if (v107 == 1 && (_DWORD)v158)
    {
      v108 = 0;
      v109 = __ldb * a3;
      v110 = 4 * __ldb;
      v111 = v162;
      v112 = 4 * v105 * (uint64_t)a9 + 4 * v109;
      v113 = 4 * v104;
      do
      {
        memcpy((void *)(*(_QWORD *)(v111 + 24) + v112), (const void *)(*(_QWORD *)(v88 + 24) + v108), v110);
        v108 += v110;
        v112 += v113;
        --v95;
      }
      while (v95);
    }
  }
  else
  {
    memcpy((void *)(*(_QWORD *)(v162 + 24) + 4 * v106 * a9), *(const void **)(v88 + 24), 4 * v106);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v160, *(void **)v156, *((std::__shared_weak_count **)v156 + 1));
  memcpy(*(void **)(v160 + 24), *(const void **)(v88 + 24), 4 * v106);
  v114 = v161;
  if (v161)
  {
    v115 = (unint64_t *)&v161->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v163;
  if (v163)
  {
    v118 = (unint64_t *)&v163->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v165;
  if (v165)
  {
    v121 = (unint64_t *)&v165->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v171;
  if (v171)
  {
    v124 = (unint64_t *)&v171->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v173;
  if (v173)
  {
    v127 = (unint64_t *)&v173->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v179;
  if (v179)
  {
    v130 = (unint64_t *)&v179->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v181;
  if (v181)
  {
    v133 = (unint64_t *)&v181->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v187;
  if (v187)
  {
    v136 = (unint64_t *)&v187->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
  if (*((_QWORD *)&v188 + 1))
  {
    v139 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  *(_QWORD *)&v188 = &v189;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v188);
  v141 = v197;
  if (v197)
  {
    v142 = (unint64_t *)&v197->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  *(_QWORD *)&v189 = &v198;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
  v144 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1))
  {
    v145 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v206;
  if (v206)
  {
    v148 = (unint64_t *)&v206->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = v208;
  if (v208)
  {
    v151 = (unint64_t *)&v208->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = (std::__shared_weak_count *)*((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v154 = (unint64_t *)(*((_QWORD *)&v213 + 1) + 8);
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
}

void sub_1916ABBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  char a73;
  uint64_t v73;

  if (a30 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  a56 = (uint64_t)&a58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
  a58 = (uint64_t)&a73;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v73 - 200);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v73 - 184);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v73 - 168);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v73 - 104);
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_rnn_arch_kernel_impl::cached_temp_blob(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  std::string v17;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  v15 = (*(uint64_t (**)(_DWORD *, std::string *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD))(*(_QWORD *)a1 + 456))(a1, &v17, a3, a4, a5, a6, a7, a8, a1[154]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v15;
}

void sub_1916ABF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *Espresso::generic_rnn_arch_kernel_impl::cached_temp_blob(_QWORD *a1, __int128 *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, int a8, unsigned int a9)
{
  __int128 *v14;
  char *v16;
  _DWORD *v17;
  uint64_t *v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  _BOOL8 v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v39;
  __int128 v40;
  int v41;
  int v42;
  void *__p;
  void *v44;
  __int128 *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  __int128 v50;
  void *v51[2];
  uint64_t v52;

  v14 = a2;
  v45 = a2;
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 100), (unsigned __int8 *)a2, &v45);
  v52 = 0;
  *(_OWORD *)v51 = 0u;
  v18 = (uint64_t *)(v16 + 40);
  v17 = (_DWORD *)*((_QWORD *)v16 + 5);
  v50 = 0u;
  v45 = (__int128 *)__PAIR64__(a4, a3);
  v46 = a5;
  v47 = a6;
  v48 = 1;
  v49 = a8;
  if (!v17 || v17[2] != a3 || v17[3] != a4 || v17[4] != a5 || v17[5] != a6)
    goto LABEL_17;
  Espresso::abstract_blob_container::shape((char *)&v40, (uint64_t)v17);
  if (v41 == 1)
    v19 = 4;
  else
    v19 = 5;
  if (v42 == -1)
    v20 = v19;
  else
    v20 = v42;
  if (a8 == -1)
    a8 = 4;
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  if (v20 != a8)
  {
LABEL_17:
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1[1] + 8) + 24))(&v40, *(_QWORD *)(a1[1] + 8), a1 + 1, a9);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v18, &v40);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = *((char *)v14 + 23);
    if (v24 < 0)
    {
      if (*((_QWORD *)v14 + 1) != 6)
      {
LABEL_30:
        v28 = 1;
LABEL_35:
        (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, _BOOL8))(*a1 + 24))(&v40, a1, 1, v28);
        v29 = *v18;
        v39 = v40;
        if (*((_QWORD *)&v40 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        (*(void (**)(uint64_t, __int128 **, __int128 *))(*(_QWORD *)v29 + 16))(v29, &v45, &v39);
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
        if (*((_QWORD *)&v39 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        if (v51[0])
        {
          v51[1] = v51[0];
          operator delete(v51[0]);
        }
        return v18;
      }
      v14 = *(__int128 **)v14;
    }
    else if (v24 != 6)
    {
      goto LABEL_30;
    }
    v25 = 1634887533;
    v26 = bswap32(*(_DWORD *)v14);
    if (v26 == 1634887533 && (v26 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16, v25 = 24952, v26 == 24952))
    {
      v27 = 0;
    }
    else if (v26 < v25)
    {
      v27 = -1;
    }
    else
    {
      v27 = 1;
    }
    v28 = v27 != 0;
    goto LABEL_35;
  }
  return v18;
}

void sub_1916AC1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ***Espresso::generic_rnn_arch_kernel_impl::cached_temp_layer_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void ***v14;
  void **i;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  std::string *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  void **v38;
  unint64_t v39;
  void ***v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  void **v46;
  size_t v47;
  std::string *v48;
  const std::string::value_type *v49;
  std::string *v50;
  std::string::size_type size;
  std::string *v52;
  __int128 v53;
  unsigned int *v54;
  __int128 *v55;
  __int128 *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char *v75;
  __int128 v76;
  int64x2_t v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  void *v83;
  std::string v84;
  std::string v85;
  void *__p[2];
  std::string::size_type v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  uint64_t v91;
  void **v92;
  int64x2_t v93;
  void *v94;
  void **v95;

  v9 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 848);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ****)(*(_QWORD *)(a1 + 840) + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (void **)*i)
      {
        v16 = (unint64_t)i[1];
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2))
            goto LABEL_77;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 856);
  v18 = (char *)operator new(0x30uLL);
  v92 = (void **)v18;
  v93.i64[0] = a1 + 856;
  v93.i8[8] = 0;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = (std::string *)(v18 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v18 + 4) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v18 + 5) = 0;
  v93.i8[8] = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 864) + 1);
  v21 = *(float *)(a1 + 872);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v11 = *(_QWORD *)(a1 + 848);
    if (*(_QWORD *)&prime > v11)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v11)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 864) / *(float *)(a1 + 872));
      if (v11 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v11)
      {
        v11 = *(_QWORD *)(a1 + 848);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = *(void **)(a1 + 840);
          *(_QWORD *)(a1 + 840) = v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          *(int8x8_t *)(a1 + 848) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 840) + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v17;
          if (*v17)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 840) + 8 * v30) = v17;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  v37 = *(_QWORD *)(a1 + 840);
                  if (!*(_QWORD *)(v37 + 8 * v36))
                  {
                    *(_QWORD *)(v37 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*(_QWORD *)(a1 + 840) + 8 * v36);
                  **(_QWORD **)(*(_QWORD *)(a1 + 840) + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v11 = (unint64_t)prime;
          goto LABEL_62;
        }
        v83 = *(void **)(a1 + 840);
        *(_QWORD *)(a1 + 840) = 0;
        if (v83)
          operator delete(v83);
        v11 = 0;
        *(_QWORD *)(a1 + 848) = 0;
      }
    }
LABEL_62:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v38 = *(void ***)(*(_QWORD *)(a1 + 840) + 8 * v4);
  i = v92;
  if (v38)
  {
    *v92 = *v38;
LABEL_75:
    *v38 = i;
    goto LABEL_76;
  }
  *v92 = *(void **)(a1 + 856);
  *(_QWORD *)(a1 + 856) = i;
  *(_QWORD *)(*(_QWORD *)(a1 + 840) + 8 * v4) = v17;
  if (*i)
  {
    v39 = *((_QWORD *)*i + 1);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v39 >= v11)
        v39 %= v11;
    }
    else
    {
      v39 &= v11 - 1;
    }
    v38 = (void **)(*(_QWORD *)(a1 + 840) + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v92 = 0;
  ++*(_QWORD *)(a1 + 864);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v92);
LABEL_77:
  v41 = i[5];
  v40 = (void ***)(i + 5);
  if (!v41)
  {
    v42 = operator new();
    *(_QWORD *)(v42 + 8) = 0;
    *(_QWORD *)(v42 + 16) = 0;
    *(_QWORD *)v42 = 0;
    v92 = 0;
    std::unique_ptr<Espresso::layer_data>::reset[abi:ne180100](v40, (void **)v42);
    std::unique_ptr<Espresso::layer_data>::reset[abi:ne180100](&v92, 0);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 64))(&v90, a3, a4);
    if (v91 != v90)
    {
      v43 = 0;
      do
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t))(*(_QWORD *)a3 + 24))(&v88, a3, 1, v43);
        if (v88 && *(_BYTE *)(v88 + 8))
          v44 = *(_DWORD *)(v88 + 12);
        else
          v44 = 0;
        v45 = v90;
        v46 = *v40;
        if (*(char *)(a2 + 23) >= 0)
          v47 = *(unsigned __int8 *)(a2 + 23);
        else
          v47 = *(_QWORD *)(a2 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v85, v47 + 1);
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = &v85;
        else
          v48 = (std::string *)v85.__r_.__value_.__r.__words[0];
        if (v47)
        {
          if (*(char *)(a2 + 23) >= 0)
            v49 = (const std::string::value_type *)a2;
          else
            v49 = *(const std::string::value_type **)a2;
          memmove(v48, v49, v47);
        }
        *(_WORD *)((char *)&v48->__r_.__value_.__l.__data_ + v47) = 95;
        std::to_string(&v84, v43);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v50 = &v84;
        else
          v50 = (std::string *)v84.__r_.__value_.__r.__words[0];
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        else
          size = v84.__r_.__value_.__l.__size_;
        v52 = std::string::append(&v85, (const std::string::value_type *)v50, size);
        v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        v87 = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        v54 = (unsigned int *)(v45 + (v43 << 6));
        v55 = (__int128 *)(*(uint64_t (**)(uint64_t, void **, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))(*(_QWORD *)a1 + 456))(a1, __p, *v54, v54[1], v54[2], v54[3], v54[4], v54[5], v44);
        v56 = v55;
        v57 = (char *)v46[2];
        v58 = (char *)v46[1];
        if (v58 >= v57)
        {
          v63 = (v58 - (_BYTE *)*v46) >> 4;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v65 = v57 - (_BYTE *)*v46;
          if (v65 >> 3 > v64)
            v64 = v65 >> 3;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0)
            v66 = 0xFFFFFFFFFFFFFFFLL;
          else
            v66 = v64;
          v95 = v46 + 2;
          v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v66);
          v69 = &v67[16 * v63];
          v70 = *v56;
          *(_OWORD *)v69 = *v56;
          if (*((_QWORD *)&v70 + 1))
          {
            v71 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
          v74 = *v46;
          v73 = v46[1];
          if (v73 == *v46)
          {
            v77 = vdupq_n_s64((unint64_t)v73);
            v75 = &v67[16 * v63];
          }
          else
          {
            v75 = &v67[16 * v63];
            do
            {
              v76 = *((_OWORD *)v73 - 1);
              v73 -= 2;
              *((_OWORD *)v75 - 1) = v76;
              v75 -= 16;
              *v73 = 0;
              v73[1] = 0;
            }
            while (v73 != v74);
            v77 = *(int64x2_t *)v46;
          }
          v62 = v69 + 16;
          *v46 = v75;
          v46[1] = v69 + 16;
          v93 = v77;
          v78 = v46[2];
          v46[2] = &v67[16 * v68];
          v94 = v78;
          v92 = (void **)v77.i64[0];
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v92);
        }
        else
        {
          *(_QWORD *)v58 = *(_QWORD *)v55;
          v59 = *((_QWORD *)v55 + 1);
          *((_QWORD *)v58 + 1) = v59;
          if (v59)
          {
            v60 = (unint64_t *)(v59 + 8);
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
          }
          v62 = v58 + 16;
        }
        v46[1] = v62;
        if (SHIBYTE(v87) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        v79 = v89;
        if (v89)
        {
          p_shared_owners = (unint64_t *)&v89->__shared_owners_;
          do
            v81 = __ldaxr(p_shared_owners);
          while (__stlxr(v81 - 1, p_shared_owners));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        ++v43;
      }
      while (v43 < (v91 - v90) >> 6);
    }
    v92 = (void **)&v90;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v92);
  }
  return v40;
}

void sub_1916AC978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<Espresso::layer_data>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_matmul(uint64_t a1, uint64_t a2, const void **a3, uint64_t **a4, uint64_t **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v16;
  void **v17;
  const void *v18;
  uint64_t **v19;
  void **v20;
  void **v21;
  void **v22;
  void *v23[2];
  char v24;
  void ***v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  void *__p;
  void *v30;
  __int128 v31;

  *(_QWORD *)&v31 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    if (*((char *)a3 + 23) >= 0)
      v16 = *((unsigned __int8 *)a3 + 23);
    else
      v16 = (size_t)a3[1];
    v17 = v23;
    std::string::basic_string[abi:ne180100]((uint64_t)v23, v16 + 12);
    if (v24 < 0)
      v17 = (void **)v23[0];
    if (v16)
    {
      if (*((char *)a3 + 23) >= 0)
        v18 = a3;
      else
        v18 = *a3;
      memmove(v17, v18, v16);
    }
    strcpy((char *)v17 + v16, "_quant_input");
    Espresso::abstract_blob_container::shape((char *)&v27, **a5);
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v25 = &v20;
    v26 = 0;
    v20 = (void **)operator new(0x40uLL);
    v21 = v20;
    v22 = v20 + 8;
    v21 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v22, &v27, &v31, (uint64_t)v20);
    v19 = *(uint64_t ***)(*(uint64_t (**)(uint64_t, void **, uint64_t, void ***))(*(_QWORD *)a1 + 464))(a1, v23, a7, &v20);
    v25 = &v20;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
    if (__p)
    {
      v30 = __p;
      operator delete(__p);
    }
    if (v24 < 0)
      operator delete(v23[0]);
    (*(void (**)(uint64_t, uint64_t, uint64_t **, uint64_t **))(*(_QWORD *)a7 + 16))(a7, a2, v19, a5);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](*a5, **v19, (*v19)[1]);
  }
  else
  {
    v19 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t **, uint64_t **))(*(_QWORD *)a6 + 16))(a6, a2, a4, a5);
  if (a8)
  {
    v27 = 0uLL;
    v28 = 0;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((char *)&v27, *v19, v19[1], ((char *)v19[1] - (char *)*v19) >> 4);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v27, **a4, (*a4)[1]);
    (*(void (**)(uint64_t, uint64_t, uint64_t **, __int128 *))(*(_QWORD *)a8 + 16))(a8, a2, a4, &v27);
    v20 = (void **)&v27;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

void sub_1916ACCA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void Espresso::apply_nonlinearity2(const float *a1, float *__C, vDSP_Length __N, uint64_t a4)
{
  vDSP_Length v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float __Ca;
  float v11;
  float v12;
  float __B;
  vDSP_Length __Na;

  v4 = __N;
  v5 = __C;
  switch(*(_DWORD *)a4)
  {
    case 0:
    case 4:
      v7 = *(float *)(a4 + 4);
      v6 = *(float *)(a4 + 8);
      LODWORD(__Na) = __N;
      __B = v6 * -2.0;
      v12 = 1.0;
      vDSP_vsmul(a1, 1, &__B, __C, 1, (int)__N);
      vvexpf(v5, v5, (const int *)&__Na);
      vDSP_vsadd(v5, 1, &v12, v5, 1, (int)__Na);
      vvrecf(v5, v5, (const int *)&__Na);
      __Ca = -v7;
      v11 = v7 + v7;
      vDSP_vsmsa(v5, 1, &v11, &__Ca, v5, 1, (int)__Na);
      break;
    case 1:
      LODWORD(__Na) = 0;
      vDSP_vthr(a1, 1, (const float *)&__Na, __C, 1, __N);
      break;
    case 2:
      __B = 1.0;
      LODWORD(__Na) = __N;
      vDSP_vneg(a1, 1, __C, 1, (int)__N);
      vvexpf(v5, v5, (const int *)&__Na);
      vDSP_vsadd(v5, 1, &__B, v5, 1, (int)__Na);
      vvrecf(v5, v5, (const int *)&__Na);
      break;
    case 3:
      LODWORD(__Na) = 1045220557;
      v12 = 0.0;
      __B = 0.5;
      v11 = 1.0;
      vDSP_vsmsa(a1, 1, (const float *)&__Na, &__B, __C, 1, __N);
      vDSP_vclip(v5, 1, &v12, &v11, v5, 1, v4);
      break;
    case 5:
      if (__N)
      {
        do
        {
          v8 = *a1++;
          v9 = v8;
          if (v8 < *(float *)(a4 + 4))
            v9 = *(float *)(a4 + 8);
          *v5++ = v9;
          --v4;
        }
        while (v4);
      }
      break;
    case 6:
      vDSP_vsmul(a1, 1, (const float *)(a4 + 4), __C, 1, __N);
      break;
    default:
      return;
  }
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_encoder(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1::operator()(_QWORD *a1, uint64_t **a2, int a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *__p[2];
  char v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;

  v5 = a2[2];
  v6 = (2 * a3) | 1u;
  v7 = **a2;
  if (v6 >= ((*a2)[1] - v7) >> 4)
  {
    Espresso::generic_rnn_arch_kernel_impl::__launch_encoder(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0::operator()((uint64_t *)&v78, a2[1]);
    v9 = v78;
  }
  else
  {
    v8 = *(_OWORD *)(v7 + 16 * v6);
    v78 = v8;
    v9 = v8;
    if (*((_QWORD *)&v8 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  *(_QWORD *)&v77 = v9;
  *((_QWORD *)&v77 + 1) = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (!*((_DWORD *)v5 + 76))
  {
    v29 = **a2;
    if (v6 + 1 >= ((*a2)[1] - v29) >> 4)
    {
      Espresso::generic_rnn_arch_kernel_impl::__launch_encoder(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0::operator()((uint64_t *)__p, a2[1]);
      v31 = __p[0];
    }
    else
    {
      v30 = *(_OWORD *)(v29 + 16 * (v6 + 1));
      *(_OWORD *)__p = v30;
      v31 = (void *)v30;
      if (*((_QWORD *)&v30 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
    }
    v34 = __p[1];
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v77 = v31;
    *((_QWORD *)&v77 + 1) = v34;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v37 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v38 = (unint64_t *)((char *)__p[1] + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  v15 = *a2[3];
  if (v6 < (a2[3][1] - v15) >> 4)
  {
    v16 = *(_OWORD *)(v15 + 16 * v6);
    *(_OWORD *)__p = v16;
    if (*((_QWORD *)&v16 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = (uint64_t)a2[4];
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
    v76 = v78;
    if (*((_QWORD *)&v78 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    Espresso::axpby_closure::operator()(v5 + 86, v19, (__int128 *)__p, &v76, 1, 1.0, 0.0);
    if (v20)
    {
      v23 = (unint64_t *)&v20->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (!*((_DWORD *)v5 + 76))
    {
      v40 = *(_OWORD *)(*a2[3] + 16 * v6 + 16);
      v75 = v40;
      if (*((_QWORD *)&v40 + 1))
      {
        v41 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v43 = (uint64_t)a2[4];
      v44 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
      v74 = v77;
      if (*((_QWORD *)&v77 + 1))
      {
        v45 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      Espresso::axpby_closure::operator()(v5 + 86, v43, &v75, &v74, 1, 1.0, 0.0);
      if (v44)
      {
        v47 = (unint64_t *)&v44->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v49 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
    }
    v25 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v26 = (unint64_t *)((char *)__p[1] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      goto LABEL_84;
    }
    goto LABEL_86;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "h0");
  *(_QWORD *)&v75 = __p;
  v28 = *((_QWORD *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v5 + 35, __p, (_OWORD **)&v75)+ 7);
  if (v73 < 0)
  {
    operator delete(__p[0]);
    if (v28)
      goto LABEL_73;
  }
  else if (v28)
  {
    goto LABEL_73;
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v78 + 56))(__p);
  v52 = 0;
  v53 = *((int *)__p[0] + 2);
  do
  {
    v53 *= *(int *)((char *)__p[0] + v52 + 12);
    v52 += 4;
  }
  while (v52 != 12);
  if (v53)
    bzero(*((void **)__p[0] + 3), 4 * v53);
  (*(void (**)(_QWORD, uint64_t *, void **))(*(_QWORD *)v78 + 48))(v78, a2[4], __p);
  v54 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v55 = (unint64_t *)((char *)__p[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
LABEL_73:
  std::string::basic_string[abi:ne180100]<0>(__p, "c0");
  *(_QWORD *)&v75 = __p;
  v57 = *((_QWORD *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v5 + 35, __p, (_OWORD **)&v75)+ 7);
  if (v73 < 0)
  {
    operator delete(__p[0]);
    if (v57)
      goto LABEL_86;
  }
  else if (v57)
  {
    goto LABEL_86;
  }
  v58 = v77;
  (*(void (**)(void **__return_ptr, _QWORD))(*(_QWORD *)v77 + 56))(__p, v77);
  v59 = 0;
  v60 = *((int *)__p[0] + 2);
  do
  {
    v60 *= *(int *)((char *)__p[0] + v59 + 12);
    v59 += 4;
  }
  while (v59 != 12);
  if (v60)
    bzero(*((void **)__p[0] + 3), 4 * v60);
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v58 + 48))(v58, a2[4], __p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v61 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v61);
    while (__stlxr(v27 - 1, v61));
LABEL_84:
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
LABEL_86:
  v62 = *((_QWORD *)&v78 + 1);
  *a1 = v78;
  a1[1] = v62;
  if (v62)
  {
    v63 = (unint64_t *)(v62 + 8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  a1[2] = v77;
  a1[3] = v65;
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
    do
      v68 = __ldaxr(v66);
    while (__stlxr(v68 - 1, v66));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
}

void sub_1916AD4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v22 - 64);
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_encoder(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  void *__p[2];
  uint64_t v23;

  v4 = *a2;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(*a2 + 8) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(*a2 + 8) + 8), *a2 + 8);
  if (*(_BYTE *)(v4 + 456))
  {
    v5 = *(_DWORD *)(v4 + 380);
    v6 = *(_DWORD *)(*(_QWORD *)a2[1] + 12);
    v23 = 0;
    *(_OWORD *)__p = 0u;
    v21 = 0u;
    v19 = __PAIR64__(v6, v5);
    v20 = xmmword_191A937F0;
    v7 = *a1;
    v17 = 0;
    v18 = 0;
    (*(void (**)(uint64_t, unint64_t *, uint64_t *))(*(_QWORD *)v7 + 16))(v7, &v19, &v17);
    v8 = v18;
    if (!v18)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
  }
  else
  {
    v11 = *a1;
    v12 = *(_DWORD *)(v4 + 380);
    v13 = *(_DWORD *)(*(_QWORD *)a2[1] + 20);
    v23 = 0;
    *(_OWORD *)__p = 0u;
    v21 = 0u;
    v19 = 0x100000001;
    *(_QWORD *)&v20 = __PAIR64__(v13, v12);
    *((_QWORD *)&v20 + 1) = 0xFFFFFFFF00000001;
    v15 = 0;
    v16 = 0;
    (*(void (**)(uint64_t, unint64_t *, uint64_t *))(*(_QWORD *)v11 + 16))(v11, &v19, &v15);
    v8 = v16;
    if (!v16)
      goto LABEL_11;
    v14 = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(v14);
    while (__stlxr(v10 - 1, v14));
  }
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_11:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1916AD6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  uint64_t v19;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

void Espresso::axpby_closure::operator()(_QWORD *a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5, float a6, float a7)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (***v21)(_QWORD);
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::runtime_error *exception;
  std::runtime_error *v41;
  __int128 v42;
  int v43;
  void *__p[2];
  char v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  char *v49;
  _BYTE v50[20];
  __int128 v51;
  uint64_t v52;

  v14 = *(_QWORD *)a3;
  if (*a1)
  {
    if (*(_QWORD *)(v14 + 72) == *(_QWORD *)(*a1 + 8))
      goto LABEL_10;
    v49 = 0;
    *(_QWORD *)v50 = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v49);
    v15 = *(std::__shared_weak_count **)v50;
    if (*(_QWORD *)v50)
    {
      v16 = (unint64_t *)(*(_QWORD *)v50 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v14 = *(_QWORD *)a3;
  }
  if (!v14)
    goto LABEL_44;
LABEL_10:
  if (!*(_QWORD *)a4)
  {
LABEL_44:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected null blobs");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = (const void *)*a1;
  if (!*a1)
  {
    v52 = 0;
    v51 = 0u;
    *(_OWORD *)&v50[4] = 0u;
    v49 = (char *)__PAIR64__(LODWORD(a7), LODWORD(a6));
    *(_DWORD *)v50 = a5;
    Espresso::abstract_engine_factory::shared(&v46);
    v19 = v46;
    v20 = *(_QWORD *)a3;
    std::string::basic_string[abi:ne180100]<0>(__p, "axpby");
    v21 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)a3 + 72) + 8);
    LODWORD(v42) = (**v21)(v21);
    v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 32))(*(_QWORD *)a3);
    Espresso::abstract_engine_factory::make_kernel_priv(v19, v20 + 72, (uint64_t)__p, (uint64_t)&v49, (int *)&v42);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, &v48);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v45 < 0)
      operator delete(__p[0]);
    v25 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v18 = (const void *)*a1;
    if (!*a1)
      goto LABEL_45;
  }
  if (!v28)
  {
LABEL_45:
    v48 = 0uLL;
    v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Inconsistent state");
    goto LABEL_47;
  }
  v29 = a1[1];
  *(_QWORD *)&v48 = v28;
  *((_QWORD *)&v48 + 1) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  (*(void (**)(void *, uint64_t, float, float))(*(_QWORD *)v28 + 328))(v28, a5, a6, a7);
  if (*(_QWORD *)(*(_QWORD *)a3 + 72) != *(_QWORD *)(*(_QWORD *)a4 + 72))
  {
    v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Incompatible operands");
LABEL_47:
    __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v32 = *(std::__shared_weak_count **)(*(_QWORD *)a3 + 80);
  v46 = *(_QWORD *)(*(_QWORD *)a3 + 72);
  v47 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  Espresso::layer_data::layer_data(&v49, a3, a4);
  v42 = 0uLL;
  Espresso::layer_data::layer_data((char **)__p, a4, &v42);
  (*(void (**)(_QWORD, uint64_t, void **, char **))(*(_QWORD *)*a1 + 16))(*a1, a2, __p, &v49);
  *(_QWORD *)&v42 = __p;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  __p[0] = &v49;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v32)
  {
    v35 = (unint64_t *)&v32->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_1916ADAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_arch_kernel_impl::__initialize_dynamic_quantization(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v12;
  __int128 v13;
  void *v14;
  uint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  void *lpsrc;
  std::__shared_weak_count *v45;
  char v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  _DWORD __p[5];
  int v50;
  int v51;
  int v52;
  void *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;

  if (*(_DWORD *)(a2 + 36) == 5)
  {
    if (!*(_BYTE *)(a1 + 436))
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("generic_rnn_arch_kernel_impl: dynamic quantization with legacy mode");
    v55 = 0x1FFFFFFFFLL;
    Espresso::abstract_engine_factory::shared(&v53);
    v12 = v53;
    std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_quantize");
    LODWORD(v47) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                 + 8));
    Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v12, a1 + 8, (uint64_t)__p, (uint64_t)&v55, (int *)&v47);
    v13 = 0uLL;
    if (lpsrc)
    {
      v13 = 0uLL;
      if (v14)
      {
        *(_QWORD *)&v13 = v14;
        *((_QWORD *)&v13 + 1) = v45;
        if (v45)
        {
          p_shared_owners = &v45->__shared_owners_;
          do
            v16 = __ldxr((unint64_t *)p_shared_owners);
          while (__stxr(v16 + 1, (unint64_t *)p_shared_owners));
        }
      }
    }
    v17 = a5 + 16 * a3;
    v18 = *(std::__shared_weak_count **)(v17 + 8);
    *(_OWORD *)v17 = v13;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v45)
    {
      v21 = &v45->__shared_owners_;
      do
        v22 = __ldaxr((unint64_t *)v21);
      while (__stlxr(v22 - 1, (unint64_t *)v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v23 = a3;
    if (SHIBYTE(v50) < 0)
      operator delete(*(void **)__p);
    v24 = v54;
    if (v54)
    {
      v25 = (unint64_t *)&v54->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    __p[0] = -1;
    v27 = *(unsigned __int8 *)(a1 + 436);
    *(_QWORD *)&__p[1] = *(_QWORD *)(a2 + 12);
    v50 = *(_DWORD *)(a2 + 28);
    v51 = v27;
    *(_QWORD *)&__p[3] = *(_QWORD *)(a2 + 20);
    v52 = *(_DWORD *)(a4 + 4 * v23);
    Espresso::abstract_engine_factory::shared(&v47);
    v28 = v47;
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "dynamic_dequantize");
    v43 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v28, a1 + 8, (uint64_t)&lpsrc, (uint64_t)__p, &v43);
    v29 = 0uLL;
    if (v53)
    {
      v29 = 0uLL;
      if (v30)
      {
        *(_QWORD *)&v29 = v30;
        *((_QWORD *)&v29 + 1) = v54;
        if (v54)
        {
          v31 = (unint64_t *)&v54->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
      }
    }
    v33 = a6 + 16 * v23;
    v34 = *(std::__shared_weak_count **)(v33 + 8);
    *(_OWORD *)v33 = v29;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = v54;
    if (v54)
    {
      v38 = (unint64_t *)&v54->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v46 < 0)
      operator delete(lpsrc);
    v40 = v48;
    if (v48)
    {
      v41 = (unint64_t *)&v48->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
}

void sub_1916ADEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,2>> &,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char *v8;
  char *v9;
  char *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;

  v8 = (char *)operator new(0x118uLL);
  v9 = v8;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DC1868;
  *((_QWORD *)v8 + 3) = off_1E2D8F108;
  v10 = v8 + 24;
  *((_DWORD *)v8 + 13) = -1;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *((_QWORD *)v8 + 11) = 0;
  *((_QWORD *)v8 + 12) = a2;
  *((_QWORD *)v8 + 13) = a3;
  if (a3)
  {
    v11 = (unint64_t *)(a3 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_OWORD *)(v8 + 184) = 0uLL;
  *((_QWORD *)v8 + 14) = 0;
  *((_QWORD *)v8 + 15) = 0;
  *((_DWORD *)v8 + 32) = 0;
  *((_DWORD *)v8 + 34) = 1065353216;
  *(_QWORD *)(v8 + 140) = 0xFFFFFFFF00000000;
  *((_DWORD *)v8 + 37) = 1;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 5) = 0;
  *((_DWORD *)v8 + 12) = 0;
  *(_OWORD *)(v8 + 152) = 0uLL;
  *(_OWORD *)(v8 + 168) = 0uLL;
  *((_QWORD *)v8 + 3) = &off_1E2DA6B80;
  *((_QWORD *)v8 + 34) = 0;
  *(_OWORD *)(v8 + 200) = 0uLL;
  *(_OWORD *)(v8 + 216) = 0uLL;
  *(_OWORD *)(v8 + 232) = 0uLL;
  *(_OWORD *)(v8 + 248) = 0uLL;
  *((_DWORD *)v8 + 66) = 0;
  v13 = *a4;
  v14 = operator new(0x60uLL);
  v15 = v14;
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &off_1E2DBECA8;
  v16 = (char *)(v14 + 3);
  v17 = (std::__shared_weak_count *)a4[1];
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v21 = *(_DWORD *)(v13 + 8);
  v20 = *(_DWORD *)(v13 + 12);
  v14[3] = &off_1E2DA11F0;
  v14[8] = 0;
  v14[9] = 0;
  v14[10] = v13;
  v14[11] = v17;
  if (v17)
  {
    v22 = (unint64_t *)&v17->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    *((_DWORD *)v14 + 8) = v21;
    *((_DWORD *)v14 + 9) = v20;
    v14[5] = 0x100000001;
    v14[6] = *(_QWORD *)(v13 + 16);
    *((_BYTE *)v14 + 56) = 0;
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  else
  {
    *((_DWORD *)v14 + 8) = v21;
    *((_DWORD *)v14 + 9) = v20;
    v14[5] = 0x100000001;
    v14[6] = *(_QWORD *)(v13 + 16);
    *((_BYTE *)v14 + 56) = 0;
  }
  *(_QWORD *)&v28 = v16;
  *((_QWORD *)&v28 + 1) = v15;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v9 + 184), &v28);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *((_DWORD *)v9 + 66) = 0;
  *a1 = v10;
  a1[1] = v9;
}

void sub_1916AE164(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  Espresso::abstract_blob_container *v2;
  uint64_t v3;
  void *v5;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[10].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[9].__shared_weak_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[9]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[8].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  Espresso::abstract_blob_container::~abstract_blob_container(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::blob<unsigned char,2>::make(_QWORD *a1, int a2)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int &,int &,int &,int &,void>(a1, 3, a2, 1, 1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,1>> &,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char *v8;
  char *v9;
  char *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;

  v8 = (char *)operator new(0x118uLL);
  v9 = v8;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DC1868;
  *((_QWORD *)v8 + 3) = off_1E2D8F108;
  v10 = v8 + 24;
  *((_DWORD *)v8 + 13) = -1;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *((_QWORD *)v8 + 11) = 0;
  *((_QWORD *)v8 + 12) = a2;
  *((_QWORD *)v8 + 13) = a3;
  if (a3)
  {
    v11 = (unint64_t *)(a3 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_OWORD *)(v8 + 184) = 0uLL;
  *((_QWORD *)v8 + 14) = 0;
  *((_QWORD *)v8 + 15) = 0;
  *((_DWORD *)v8 + 32) = 0;
  *((_DWORD *)v8 + 34) = 1065353216;
  *(_QWORD *)(v8 + 140) = 0xFFFFFFFF00000000;
  *((_DWORD *)v8 + 37) = 1;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 5) = 0;
  *((_DWORD *)v8 + 12) = 0;
  *(_OWORD *)(v8 + 152) = 0uLL;
  *(_OWORD *)(v8 + 168) = 0uLL;
  *((_QWORD *)v8 + 3) = &off_1E2DA6B80;
  *((_QWORD *)v8 + 34) = 0;
  *(_OWORD *)(v8 + 200) = 0uLL;
  *(_OWORD *)(v8 + 216) = 0uLL;
  *(_OWORD *)(v8 + 232) = 0uLL;
  *(_OWORD *)(v8 + 248) = 0uLL;
  *((_DWORD *)v8 + 66) = 0;
  v13 = *a4;
  v14 = operator new(0x60uLL);
  v15 = v14;
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &off_1E2DBECA8;
  v16 = (char *)(v14 + 3);
  v17 = (std::__shared_weak_count *)a4[1];
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v20 = *(_DWORD *)(v13 + 8);
    v14[3] = &off_1E2DA11F0;
    v14[8] = 0;
    v14[9] = 0;
    v14[10] = v13;
    v14[11] = v17;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    *((_DWORD *)v14 + 8) = v20;
    *(_QWORD *)((char *)v14 + 36) = 0x100000001;
    *((_DWORD *)v14 + 11) = 1;
    v14[6] = *(_QWORD *)(v13 + 16);
    *((_BYTE *)v14 + 56) = 0;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  else
  {
    v23 = *(_DWORD *)(v13 + 8);
    v14[3] = &off_1E2DA11F0;
    v14[8] = 0;
    v14[9] = 0;
    v14[10] = v13;
    v14[11] = 0;
    *((_DWORD *)v14 + 8) = v23;
    *(_QWORD *)((char *)v14 + 36) = 0x100000001;
    *((_DWORD *)v14 + 11) = 1;
    v14[6] = *(_QWORD *)(v13 + 16);
    *((_BYTE *)v14 + 56) = 0;
  }
  *(_QWORD *)&v27 = v16;
  *((_QWORD *)&v27 + 1) = v15;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v9 + 184), &v27);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *((_DWORD *)v9 + 66) = 0;
  *a1 = v10;
  a1[1] = v9;
}

void sub_1916AE404(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  Espresso::abstract_blob_container *v2;
  uint64_t v3;
  void *v5;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[10].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[9].__shared_weak_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[9]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[8].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  Espresso::abstract_blob_container::~abstract_blob_container(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  size_t v11;
  void *v12;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E2DBED88;
  *((_QWORD *)v10 + 3) = &off_1E2DA1270;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  v11 = a3 * (uint64_t)a2 * a4 * a5;
  v12 = Espresso::kern_alloc_uninitialized((Espresso *)v11);
  bzero(v12, v11);
  *((_QWORD *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_1916AE514(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::abstract_kernel_with_named_weights_::~abstract_kernel_with_named_weights_(Espresso::abstract_kernel_with_named_weights_ *this)
{
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::abstract_kernel_with_weights_grad_::~abstract_kernel_with_weights_grad_(Espresso::abstract_kernel_with_weights_grad_ *this)
{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::no_op_kernel::make@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x138uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB6D58;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  v4[3] = &off_1E2D5FD60;
  *a2 = result;
  a2[1] = (uint64_t)v4;
  return result;
}

void sub_1916AE610(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::no_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::no_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6D58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::no_op_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::generic_convolution_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *lpsrc;
  std::__shared_weak_count *v34;
  int v35;
  int v36;

  v35 = a4;
  v36 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v8 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v36);
    if (lpsrc
    {
      v10 = v34;
      *a5 = v9;
      a5[1] = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v13 = v34;
    if (v34)
    {
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v17 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_37:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v19 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
    v28 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v19, a1, (uint64_t)__p, a2, &v28);
    if (lpsrc
    {
      v21 = v34;
      *a5 = v20;
      a5[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v24 = v34;
    if (v34)
    {
      v25 = (unint64_t *)&v34->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v27);
      while (__stlxr(v18 - 1, v27));
      goto LABEL_37;
    }
  }
}

void sub_1916AE8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::generic_conv3d_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *lpsrc;
  std::__shared_weak_count *v34;
  int v35;
  int v36;

  v35 = a4;
  v36 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v8 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "conv3d");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v36);
    if (lpsrc
    {
      v10 = v34;
      *a5 = v9;
      a5[1] = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v13 = v34;
    if (v34)
    {
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v17 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_37:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v19 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "conv3d");
    v28 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v19, a1, (uint64_t)__p, a2, &v28);
    if (lpsrc
    {
      v21 = v34;
      *a5 = v20;
      a5[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v24 = v34;
    if (v34)
    {
      v25 = (unint64_t *)&v34->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v27);
      while (__stlxr(v18 - 1, v27));
      goto LABEL_37;
    }
  }
}

void sub_1916AEB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::generic_lrn_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *lpsrc;
  std::__shared_weak_count *v34;
  int v35;
  int v36;

  v35 = a4;
  v36 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v8 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "lrn");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v36);
    if (lpsrc
    {
      v10 = v34;
      *a5 = v9;
      a5[1] = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v13 = v34;
    if (v34)
    {
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v17 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_37:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v19 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "lrn");
    v28 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v19, a1, (uint64_t)__p, a2, &v28);
    if (lpsrc
    {
      v21 = v34;
      *a5 = v20;
      a5[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v24 = v34;
    if (v34)
    {
      v25 = (unint64_t *)&v34->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v27);
      while (__stlxr(v18 - 1, v27));
      goto LABEL_37;
    }
  }
}

void sub_1916AED94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::generic_pool_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *lpsrc;
  std::__shared_weak_count *v34;
  int v35;
  int v36;

  v35 = a4;
  v36 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v8 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "pool");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v36);
    if (lpsrc
    {
      v10 = v34;
      *a5 = v9;
      a5[1] = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v13 = v34;
    if (v34)
    {
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v17 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_37:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v19 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "pool");
    v28 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v19, a1, (uint64_t)__p, a2, &v28);
    if (lpsrc
    {
      v21 = v34;
      *a5 = v20;
      a5[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v24 = v34;
    if (v34)
    {
      v25 = (unint64_t *)&v34->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v27);
      while (__stlxr(v18 - 1, v27));
      goto LABEL_37;
    }
  }
}

void sub_1916AF004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::generic_softmax_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *lpsrc;
  std::__shared_weak_count *v34;
  int v35;
  int v36;

  v35 = a4;
  v36 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v8 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "softmax");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v36);
    if (lpsrc
    {
      v10 = v34;
      *a5 = v9;
      a5[1] = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v13 = v34;
    if (v34)
    {
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v17 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_37:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v19 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "softmax");
    v28 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v19, a1, (uint64_t)__p, a2, &v28);
    if (lpsrc
    {
      v21 = v34;
      *a5 = v20;
      a5[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v24 = v34;
    if (v34)
    {
      v25 = (unint64_t *)&v34->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v27);
      while (__stlxr(v18 - 1, v27));
      goto LABEL_37;
    }
  }
}

void sub_1916AF274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::generic_inner_product_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *lpsrc;
  std::__shared_weak_count *v34;
  int v35;
  int v36;

  v35 = a4;
  v36 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v8 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v36);
    if (lpsrc
    {
      v10 = v34;
      *a5 = v9;
      a5[1] = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v13 = v34;
    if (v34)
    {
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v17 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_37:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v19 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
    v28 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v19, a1, (uint64_t)__p, a2, &v28);
    if (lpsrc
    {
      v21 = v34;
      *a5 = v20;
      a5[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v24 = v34;
    if (v34)
    {
      v25 = (unint64_t *)&v34->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v27);
      while (__stlxr(v18 - 1, v27));
      goto LABEL_37;
    }
  }
}

void sub_1916AF4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::generic_inner_product_quantized_kernel::make(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_concat_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *lpsrc;
  std::__shared_weak_count *v34;
  int v35;
  int v36;

  v35 = a4;
  v36 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v8 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "concat");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v36);
    if (lpsrc
    {
      v10 = v34;
      *a5 = v9;
      a5[1] = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v13 = v34;
    if (v34)
    {
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v17 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_37:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v19 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "concat");
    v28 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v19, a1, (uint64_t)__p, a2, &v28);
    if (lpsrc
    {
      v21 = v34;
      *a5 = v20;
      a5[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v24 = v34;
    if (v34)
    {
      v25 = (unint64_t *)&v34->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v27);
      while (__stlxr(v18 - 1, v27));
      goto LABEL_37;
    }
  }
}

void sub_1916AF75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::generic_upsample_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *lpsrc;
  std::__shared_weak_count *v34;
  int v35;
  int v36;

  v35 = a4;
  v36 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v8 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "upsample");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v36);
    if (lpsrc
    {
      v10 = v34;
      *a5 = v9;
      a5[1] = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v13 = v34;
    if (v34)
    {
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v17 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_37:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v19 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "upsample");
    v28 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v19, a1, (uint64_t)__p, a2, &v28);
    if (lpsrc
    {
      v21 = v34;
      *a5 = v20;
      a5[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v24 = v34;
    if (v34)
    {
      v25 = (unint64_t *)&v34->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v27);
      while (__stlxr(v18 - 1, v27));
      goto LABEL_37;
    }
  }
}

void sub_1916AF9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::generic_elementwise_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *lpsrc;
  std::__shared_weak_count *v34;
  int v35;
  int v36;

  v35 = a4;
  v36 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v8 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v36);
    if (lpsrc
    {
      v10 = v34;
      *a5 = v9;
      a5[1] = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v13 = v34;
    if (v34)
    {
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v17 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_37:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v19 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    v28 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v19, a1, (uint64_t)__p, a2, &v28);
    if (lpsrc
    {
      v21 = v34;
      *a5 = v20;
      a5[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v24 = v34;
    if (v34)
    {
      v25 = (unint64_t *)&v34->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v27);
      while (__stlxr(v18 - 1, v27));
      goto LABEL_37;
    }
  }
}

void sub_1916AFC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::generic_split_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *lpsrc;
  std::__shared_weak_count *v34;
  int v35;
  int v36;

  v35 = a4;
  v36 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v8 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "split");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v36);
    if (lpsrc
    {
      v10 = v34;
      *a5 = v9;
      a5[1] = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v13 = v34;
    if (v34)
    {
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v17 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_37:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v19 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "split");
    v28 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v19, a1, (uint64_t)__p, a2, &v28);
    if (lpsrc
    {
      v21 = v34;
      *a5 = v20;
      a5[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v24 = v34;
    if (v34)
    {
      v25 = (unint64_t *)&v34->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v27);
      while (__stlxr(v18 - 1, v27));
      goto LABEL_37;
    }
  }
}

void sub_1916AFEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::generic_deconvolution_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *lpsrc;
  std::__shared_weak_count *v24;
  int v25;
  int v26;

  v25 = a4;
  v26 = a3;
  Espresso::abstract_engine_factory::shared(&v21);
  v8 = v21;
  std::string::basic_string[abi:ne180100]<0>(__p, "deconvolution");
  Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v26);
  if (lpsrc
  {
    v10 = v24;
    *a5 = v9;
    a5[1] = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  v13 = v24;
  if (v24)
  {
    v14 = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v20 < 0)
    operator delete(__p[0]);
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1916B0020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void Espresso::generic_deconv3d_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *lpsrc;
  std::__shared_weak_count *v24;
  int v25;
  int v26;

  v25 = a4;
  v26 = a3;
  Espresso::abstract_engine_factory::shared(&v21);
  v8 = v21;
  std::string::basic_string[abi:ne180100]<0>(__p, "deconv3d");
  Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v26);
  if (lpsrc
  {
    v10 = v24;
    *a5 = v9;
    a5[1] = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  v13 = v24;
  if (v24)
  {
    v14 = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v20 < 0)
    operator delete(__p[0]);
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1916B018C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void Espresso::generic_activation_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *lpsrc;
  std::__shared_weak_count *v24;
  int v25;
  int v26;

  v25 = a4;
  v26 = a3;
  Espresso::abstract_engine_factory::shared(&v21);
  v8 = v21;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v26);
  if (v20 < 0)
    operator delete(__p[0]);
  v9 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (lpsrc
  {
    v13 = v24;
    *a5 = v12;
    a5[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1916B02F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void Espresso::shuffle_to_gpu_conv_weights(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  uint64_t k;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  _OWORD v58[4];

  v4 = *(unsigned int *)(*a1 + 8);
  v5 = *(unsigned int *)(*a1 + 12);
  v6 = *(_DWORD *)(*a1 + 16);
  v7 = *(_DWORD *)(*a1 + 20);
  v8 = v6 - 1;
  if (v6 < 1)
    v8 = v6 + 2;
  v9 = v8 >> 2;
  v10 = (v8 >> 2) + 1;
  v11 = v7 - 1;
  if (v7 < 1)
    v11 = v7 + 2;
  v12 = v11 >> 2;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,6>,std::allocator<Espresso::blob<float,6>>,int &,int &,int &,int &,int &,int &,void>(a2, 4, 4, v4, v5, v10, (v11 >> 2) + 1);
  v13 = 0;
  v55 = 0;
  v56 = 0;
  v14 = *a1;
  v15 = *a1 + 8;
  v16 = 1;
  do
  {
    *((_QWORD *)&v45 + v13) = (int)v16;
    v16 *= *(int *)(v15 + 4 * v13++);
  }
  while (v13 != 4);
  v52 = v45;
  v53 = v46;
  v54 = v16;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v55, v14, a1[1]);
  v17 = 0;
  v57 = *(_QWORD *)(*a1 + 24);
  v49 = 0;
  v50 = 0;
  v18 = *a2;
  v19 = *a2 + 8;
  v20 = 1;
  do
  {
    *((_QWORD *)v58 + v17) = (int)v20;
    v20 *= *(int *)(v19 + 4 * v17++);
  }
  while (v17 != 6);
  v45 = v58[0];
  v46 = v58[1];
  v47 = v58[2];
  v48 = v20;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v49, v18, a2[1]);
  v21 = *(char **)(v18 + 32);
  v51 = v21;
  if (v6 >= 4 && v7 >= 4 && ((v7 | v6) & 3) == 0)
    goto LABEL_17;
  v22 = *(int *)(v18 + 8);
  for (i = 12; i != 32; i += 4)
    v22 *= *(int *)(v18 + i);
  if (v22)
    bzero(v21, 4 * v22);
  if (v7 >= -2)
  {
LABEL_17:
    v24 = 0;
    v25 = 0;
    if (v7 <= 3)
      v26 = v7;
    else
      v26 = 4;
    if (v6 <= 3)
      v27 = v6;
    else
      v27 = 4;
    do
    {
      if (v6 >= -2)
      {
        v28 = 0;
        v29 = 0;
        do
        {
          if ((int)v5 >= 1)
          {
            for (j = 0; j != v5; ++j)
            {
              if ((int)v4 >= 1)
              {
                for (k = 0; k != v4; ++k)
                {
                  if ((int)v26 >= 1)
                  {
                    v32 = 0;
                    v33 = v24;
                    do
                    {
                      if ((int)v27 >= 1)
                      {
                        v34 = &v21[4 * v29 * v47
                                 + 4 * v25 * *((_QWORD *)&v47 + 1)
                                 + 4 * j * *((_QWORD *)&v46 + 1)
                                 + 4 * k * v46
                                 + 4 * *((_QWORD *)&v45 + 1) * v32];
                        v35 = (_DWORD *)(v57
                                       + 4 * (k + v28 * v53 + j * *((_QWORD *)&v52 + 1) + *((_QWORD *)&v53 + 1) * v33));
                        v36 = 4 * v53;
                        v37 = v28;
                        v38 = v27;
                        do
                        {
                          if (v7 > (int)v32 + 4 * (int)v25 && v6 > v37)
                            *(_DWORD *)v34 = *v35;
                          v34 += 4;
                          v35 = (_DWORD *)((char *)v35 + v36);
                          ++v37;
                          --v38;
                        }
                        while (v38);
                      }
                      ++v32;
                      ++v33;
                    }
                    while (v32 != v26);
                  }
                }
              }
            }
          }
          ++v29;
          v28 += 4;
        }
        while (v29 != (v9 & ~(v9 >> 31)) + 1);
      }
      ++v25;
      v24 += 4;
    }
    while (v25 != (v12 & ~(v12 >> 31)) + 1);
  }
  v39 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v56;
  if (v56)
  {
    v43 = (unint64_t *)&v56->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void Espresso::shuffle_to_gpu_conv_weights_8(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  _OWORD v50[3];

  v4 = *(unsigned int *)(*a1 + 8);
  v5 = *(unsigned int *)(*a1 + 12);
  v6 = *(int *)(*a1 + 16);
  v7 = *(int *)(*a1 + 20);
  v8 = v6 - 1;
  if ((int)v6 < 1)
    v8 = v6 + 2;
  v9 = v8 >> 2;
  v10 = (v8 >> 2) + 1;
  v11 = v7 - 1;
  if ((int)v7 < 1)
    v11 = v7 + 2;
  v12 = v11 >> 2;
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,6>,std::allocator<Espresso::blob<unsigned char,6>>,int &,int &,int &,int &,int &,int &,void>(a2, 4, 4, v4, v5, v10, (v11 >> 2) + 1);
  v13 = 0;
  v47 = 0;
  v48 = 0;
  v14 = *a1;
  v15 = *a1 + 8;
  v16 = 1;
  do
  {
    *((_QWORD *)&v37 + v13) = (int)v16;
    v16 *= *(int *)(v15 + 4 * v13++);
  }
  while (v13 != 4);
  v44 = v37;
  v45 = v38;
  v46 = v16;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v47, v14, a1[1]);
  v17 = 0;
  v49 = *(_QWORD *)(*a1 + 24);
  v41 = 0;
  v42 = 0;
  v18 = *a2;
  v19 = *a2 + 8;
  v20 = 1;
  do
  {
    *((_QWORD *)v50 + v17) = (int)v20;
    v20 *= *(int *)(v19 + 4 * v17++);
  }
  while (v17 != 6);
  v37 = v50[0];
  v38 = v50[1];
  v39 = v50[2];
  v40 = v20;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v41, v18, a2[1]);
  v43 = *(_QWORD *)(v18 + 32);
  if ((int)v7 >= -2)
  {
    v21 = 0;
    if ((int)v7 >= 4)
      LODWORD(v22) = 4;
    else
      LODWORD(v22) = v7;
    if ((int)v6 >= 4)
      LODWORD(v23) = 4;
    else
      LODWORD(v23) = v6;
    if ((int)v23 <= 1)
      v23 = 1;
    else
      v23 = v23;
    if ((int)v22 <= 1)
      v22 = 1;
    else
      v22 = v22;
    do
    {
      if ((int)v6 >= -2)
      {
        v24 = 0;
        v25 = 0;
        do
        {
          if ((int)v5 >= 1)
          {
            for (i = 0; i != v5; ++i)
            {
              if ((int)v4 >= 1)
              {
                for (j = 0; j != v4; ++j)
                {
                  if ((int)v7 >= 1)
                  {
                    for (k = 0; k != v22; ++k)
                    {
                      if ((int)v6 >= 1)
                      {
                        v29 = 0;
                        v30 = k + 4 * v21;
                        do
                        {
                          if (v30 < v7 && v24 + v29 < v6)
                            *(_BYTE *)(v43
                                     + v25 * v39
                                     + v21 * *((_QWORD *)&v39 + 1)
                                     + i * *((_QWORD *)&v38 + 1)
                                     + j * v38
                                     + k * *((_QWORD *)&v37 + 1)
                                     + v29) = *(_BYTE *)(v49
                                                       + j
                                                       + *((_QWORD *)&v44 + 1) * i
                                                       + v45 * (v24 + v29)
                                                       + *((_QWORD *)&v45 + 1) * v30);
                          ++v29;
                        }
                        while (v23 != v29);
                      }
                    }
                  }
                }
              }
            }
          }
          ++v25;
          v24 += 4;
        }
        while (v25 != (v9 & ~(v9 >> 31)) + 1);
      }
      ++v21;
    }
    while (v21 != (v12 & ~(v12 >> 31)) + 1);
  }
  v31 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v48;
  if (v48)
  {
    v35 = (unint64_t *)&v48->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void Espresso::unshuffle_from_gpu_conv_weights(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t j;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  _OWORD v56[4];

  v8 = *(unsigned int *)(*a1 + 16);
  v9 = *(unsigned int *)(*a1 + 20);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a4, v8, v9, a3, a2);
  v10 = 0;
  v53 = 0;
  v54 = 0;
  v11 = *a4;
  v12 = *a4 + 8;
  v13 = 1;
  do
  {
    *((_QWORD *)&v43 + v10) = (int)v13;
    v13 *= *(int *)(v12 + 4 * v10++);
  }
  while (v10 != 4);
  v50 = v43;
  v51 = v44;
  v52 = v13;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v53, v11, a4[1]);
  v14 = 0;
  v55 = *(_QWORD *)(v11 + 24);
  v47 = 0;
  v48 = 0;
  v15 = *a1;
  v16 = *a1 + 8;
  v17 = 1;
  do
  {
    *((_QWORD *)v56 + v14) = (int)v17;
    v17 *= *(int *)(v16 + 4 * v14++);
  }
  while (v14 != 6);
  v43 = v56[0];
  v44 = v56[1];
  v45 = v56[2];
  v46 = v17;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v47, v15, a1[1]);
  v18 = *(_QWORD *)(*a1 + 32);
  v49 = v18;
  if (a2 >= -2)
  {
    v19 = 0;
    v20 = 0;
    v21 = a2 - 1;
    if (a2 < 1)
      v21 = a2 + 2;
    if (a3 >= 1)
      v22 = a3 - 1;
    else
      v22 = a3 + 2;
    if (a2 >= 4)
      v23 = 4;
    else
      v23 = a2;
    if (a3 >= 4)
      LODWORD(v24) = 4;
    else
      LODWORD(v24) = a3;
    if ((int)v24 <= 1)
      v24 = 1;
    else
      v24 = v24;
    if (v23 <= 1)
      v25 = 1;
    else
      v25 = v23;
    do
    {
      if (a3 >= -2)
      {
        v26 = 0;
        v27 = 0;
        do
        {
          if ((int)v9 >= 1)
          {
            for (i = 0; i != v9; ++i)
            {
              if ((int)v8 >= 1)
              {
                for (j = 0; j != v8; ++j)
                {
                  if (a2 >= 1)
                  {
                    v30 = 0;
                    v31 = v19;
                    do
                    {
                      if (a3 >= 1)
                      {
                        v32 = (_DWORD *)(v18
                                       + 4
                                       * (v27 * v45
                                        + v20 * *((_QWORD *)&v45 + 1)
                                        + i * *((_QWORD *)&v44 + 1)
                                        + j * v44
                                        + *((_QWORD *)&v43 + 1) * v30));
                        v33 = (_DWORD *)(v55
                                       + 4 * (j + v26 * v51 + i * *((_QWORD *)&v50 + 1) + *((_QWORD *)&v51 + 1) * v31));
                        v34 = 4 * v51;
                        v35 = v26;
                        v36 = v24;
                        do
                        {
                          if (v30 + 4 * v20 < a2 && v35 < a3)
                            *v33 = *v32;
                          ++v32;
                          v33 = (_DWORD *)((char *)v33 + v34);
                          ++v35;
                          --v36;
                        }
                        while (v36);
                      }
                      ++v30;
                      ++v31;
                    }
                    while (v30 != v25);
                  }
                }
              }
            }
          }
          ++v27;
          v26 += 4;
        }
        while (v27 != ((v22 >> 2) & ~(v22 >> 31)) + 1);
      }
      ++v20;
      v19 += 4;
    }
    while (v20 != (v21 >> 2) + 1);
  }
  v37 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v54;
  if (v54)
  {
    v41 = (unint64_t *)&v54->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void Espresso::shuffle_to_gpu_image(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t j;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  _OWORD v47[2];

  v4 = *(unsigned int *)(*a1 + 8);
  v5 = *(unsigned int *)(*a1 + 12);
  v6 = *(_DWORD *)(*a1 + 16);
  v7 = v6 - 1;
  if (v6 < 1)
    v7 = v6 + 2;
  v8 = v7 >> 2;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a2, 4, v4, v5, (v7 >> 2) + 1);
  v9 = 0;
  v44 = 0;
  v45 = 0;
  v10 = *a1;
  v11 = *a1 + 8;
  v12 = 1;
  do
  {
    *((_QWORD *)&v36 + v9) = (int)v12;
    v12 *= *(int *)(v11 + 4 * v9++);
  }
  while (v9 != 3);
  *((_QWORD *)&v37 + 1) = v12;
  v42 = v36;
  v43 = v37;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v44, v10, a1[1]);
  v13 = 0;
  v46 = *(_QWORD *)(*a1 + 24);
  v39 = 0;
  v40 = 0;
  v14 = *a2;
  v15 = *a2 + 8;
  v16 = 1;
  do
  {
    *((_QWORD *)v47 + v13) = (int)v16;
    v16 *= *(int *)(v15 + 4 * v13++);
  }
  while (v13 != 4);
  v36 = v47[0];
  v37 = v47[1];
  v38 = v16;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v39, v14, a2[1]);
  v17 = *(_QWORD *)(v14 + 24);
  v41 = v17;
  if (v6 >= -2)
  {
    v18 = 0;
    v19 = 0;
    if (v6 >= 4)
      LODWORD(v20) = 4;
    else
      LODWORD(v20) = v6;
    if ((int)v20 <= 1)
      v20 = 1;
    else
      v20 = v20;
    do
    {
      if ((int)v5 >= 1)
      {
        for (i = 0; i != v5; ++i)
        {
          if ((int)v4 >= 1)
          {
            for (j = 0; j != v4; ++j)
            {
              v23 = 0;
              v24 = (_DWORD *)(v17 + 4 * (i * v37 + v19 * *((_QWORD *)&v37 + 1) + *((_QWORD *)&v36 + 1) * j));
              v25 = (_DWORD *)(v46 + 4 * (j + v18 * v43 + i * *((_QWORD *)&v42 + 1)));
              v26 = 4 * v43;
              do
              {
                v27 = v25;
                v28 = v24;
                v29 = v20;
                if (v6 >= 1)
                {
                  do
                  {
                    *v28++ = *v27;
                    v27 = (_DWORD *)((char *)v27 + v26);
                    --v29;
                  }
                  while (v29);
                }
                ++v23;
              }
              while (v23 != 4);
            }
          }
        }
      }
      ++v19;
      v18 += 4;
    }
    while (v19 != (v8 & ~(v8 >> 31)) + 1);
  }
  v30 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v45;
  if (v45)
  {
    v34 = (unint64_t *)&v45->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void Espresso::unshuffle_from_gpu_image(uint64_t *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int *v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;

  v5 = *(unsigned int *)(*a1 + 12);
  v6 = *(unsigned int *)(*a1 + 16);
  v7 = *(_DWORD *)(*a1 + 20);
  v8 = 4 * v7;
  if (a2 == -1)
    v9 = 4 * v7;
  else
    v9 = a2;
  v10 = 1;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(a3, v5, v6, v9, 1);
  v11 = 0;
  v48 = 0;
  v49 = 0;
  v12 = *a1;
  v13 = *a1 + 8;
  do
  {
    *((_QWORD *)&v40 + v11) = (int)v10;
    v10 *= *(int *)(v13 + 4 * v11++);
  }
  while (v11 != 4);
  v45 = v40;
  v46 = v41;
  v47 = v10;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v48, v12, a1[1]);
  v14 = 0;
  v50 = *(_QWORD *)(*a1 + 24);
  v42 = 0;
  v43 = 0;
  v15 = *a3;
  v16 = *a3 + 8;
  v17 = 1;
  do
  {
    *((_QWORD *)&v51 + v14) = (int)v17;
    v17 *= *(int *)(v16 + 4 * v14++);
  }
  while (v14 != 3);
  *((_QWORD *)&v52 + 1) = v17;
  v40 = v51;
  v41 = v52;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v42, v15, a3[1]);
  v18 = *(_QWORD *)(v15 + 24);
  v44 = v18;
  if ((v7 & 0x80000000) == 0)
  {
    v19 = 0;
    v20 = 0;
    v21 = v8 + 2;
    if (v8 >= 1)
      v21 = v8 - 1;
    if (v9 >= 4)
      LODWORD(v22) = 4;
    else
      LODWORD(v22) = v9;
    if ((int)v22 <= 1)
      v22 = 1;
    else
      v22 = v22;
    v23 = ((v21 >> 2) & ~(v21 >> 31)) + 1;
    do
    {
      if ((int)v6 >= 1)
      {
        for (i = 0; i != v6; ++i)
        {
          if ((int)v5 >= 1)
          {
            v25 = 0;
            v26 = (_DWORD *)(v18 + 4 * (*((_QWORD *)&v40 + 1) * i + v19 * v41));
            v27 = 4 * v41;
            v28 = (int *)(v50 + 4 * (v46 * i + v20 * *((_QWORD *)&v46 + 1)));
            v29 = 4 * *((_QWORD *)&v45 + 1);
            do
            {
              v30 = v28;
              v31 = v26;
              v32 = v22;
              if (v9 >= 1)
              {
                do
                {
                  v33 = *v30++;
                  *v31 = v33;
                  v31 = (_DWORD *)((char *)v31 + v27);
                  --v32;
                }
                while (v32);
              }
              ++v25;
              ++v26;
              v28 = (int *)((char *)v28 + v29);
            }
            while (v25 != v5);
          }
        }
      }
      ++v20;
      v19 += 4;
    }
    while (v20 != v23);
  }
  v34 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v49;
  if (v49)
  {
    v38 = (unint64_t *)&v49->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

double Espresso::generic_reshape_like_kernel::GetEquivalentReshapeParams@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)(a2 + 24) = 0;
  *(_WORD *)(a2 + 32) = 1;
  *(_DWORD *)(a2 + 36) = 2;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(double *)(a1 + 16);
  *(double *)(a2 + 16) = result;
  return result;
}

void Espresso::generic_rnn_arch_kernel::~generic_rnn_arch_kernel(Espresso::generic_rnn_arch_kernel *this)
{
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::generic_meta_convolution_kernel::generic_meta_convolution_kernel(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v6 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  v6[36] = 0;
  v6[37] = 0;
  v6[35] = v6 + 36;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 38));
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)a1 = off_1E2D937E8;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_QWORD *)(a1 + 552) = 0;
  v7 = *a4;
  v8 = a4[2];
  *(_OWORD *)(a1 + 320) = a4[1];
  *(_OWORD *)(a1 + 336) = v8;
  *(_OWORD *)(a1 + 304) = v7;
  v9 = a4[3];
  v10 = a4[4];
  v11 = a4[6];
  *(_OWORD *)(a1 + 384) = a4[5];
  *(_OWORD *)(a1 + 400) = v11;
  *(_OWORD *)(a1 + 352) = v9;
  *(_OWORD *)(a1 + 368) = v10;
  v12 = a4[7];
  v13 = a4[8];
  v14 = a4[9];
  *(_QWORD *)(v15 + 157) = *(_QWORD *)((char *)a4 + 157);
  *(_OWORD *)(a1 + 432) = v13;
  *(_OWORD *)(a1 + 448) = v14;
  *(_OWORD *)(a1 + 416) = v12;
  *(_QWORD *)a1 = off_1E2D9C018;
  return a1;
}

void Espresso::generic_tunneled_ane_op_kernel::~generic_tunneled_ane_op_kernel(Espresso::generic_tunneled_ane_op_kernel *this)
{
  *(_QWORD *)this = off_1E2D8BB28;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::generic_tunneled_ane_op_kernel *)((char *)this + 280));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_tunneled_ane_unit_kernel::~generic_tunneled_ane_unit_kernel(void **this)
{
  *this = off_1E2D8BC80;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(this + 35);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::generic_patch_extractor_kernel::get_homography_from_4_source_points(Espresso::generic_patch_extractor_kernel *this, float *a2, float *a3)
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("get_homography_from_4_source_points not implemented");
}

void Espresso::generic_quantized_gather_kernel::~generic_quantized_gather_kernel(Espresso::generic_quantized_gather_kernel *this)
{
  *(_QWORD *)this = off_1E2D977F8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 320);
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_cf_branch_kernel::~generic_cf_branch_kernel(void **this)
{
  *this = off_1E2D8B428;
  if (*((char *)this + 327) < 0)
    operator delete(this[38]);
  if (*((char *)this + 303) < 0)
    operator delete(this[35]);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::generic_dynamic_dequantize_kernel::~generic_dynamic_dequantize_kernel(Espresso::generic_dynamic_dequantize_kernel *this)
{
  *(_QWORD *)this = off_1E2D9D630;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 360);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 312);
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_spatial_transformer_kernel::get_homography_from_4_source_points(Espresso::generic_spatial_transformer_kernel *this, float *a2, float *a3)
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("get_homography_from_4_source_points not implemented");
}

void Espresso::generic_spatial_transformer_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *lpsrc;
  std::__shared_weak_count *v34;
  int v35;
  int v36;

  v35 = a4;
  v36 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v8 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "spatial_transformer");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v36);
    if (lpsrc
    {
      v10 = v34;
      *a5 = v9;
      a5[1] = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v13 = v34;
    if (v34)
    {
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v17 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_37:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v19 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "spatial_transformer");
    v28 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v19, a1, (uint64_t)__p, a2, &v28);
    if (lpsrc
    {
      v21 = v34;
      *a5 = v20;
      a5[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v24 = v34;
    if (v34)
    {
      v25 = (unint64_t *)&v34->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v27);
      while (__stlxr(v18 - 1, v27));
      goto LABEL_37;
    }
  }
}

void sub_1916B1650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::generic_copy_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *lpsrc;
  std::__shared_weak_count *v34;
  int v35;
  int v36;

  v35 = a4;
  v36 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v8 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "copy");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v36);
    if (lpsrc
    {
      v10 = v34;
      *a5 = v9;
      a5[1] = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v13 = v34;
    if (v34)
    {
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v17 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_37:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v31);
    v19 = v31;
    std::string::basic_string[abi:ne180100]<0>(__p, "copy");
    v28 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v19, a1, (uint64_t)__p, a2, &v28);
    if (lpsrc
    {
      v21 = v34;
      *a5 = v20;
      a5[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v24 = v34;
    if (v34)
    {
      v25 = (unint64_t *)&v34->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v27);
      while (__stlxr(v18 - 1, v27));
      goto LABEL_37;
    }
  }
}

void sub_1916B18C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_fused_convolution_grad_kernel::output_idx@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  return Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>((unsigned __int8 *)(a1 + 280), *a2, a3);
}

uint64_t Espresso::generic_fused_inner_product_grad_kernel::output_idx@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  return Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>((unsigned __int8 *)(a1 + 280), *a2, a3);
}

void Espresso::generic_cf_jump_kernel::~generic_cf_jump_kernel(Espresso::generic_cf_jump_kernel *this)
{
  *((_QWORD *)this + 36) = off_1E2D9B528;
  if (*((char *)this + 319) < 0)
    operator delete(*((void **)this + 37));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_cf_call_kernel::~generic_cf_call_kernel(Espresso::generic_cf_call_kernel *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E2D8D768;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)this = off_1E2D8B178;
  if (*((char *)this + 303) < 0)
    operator delete(*((void **)this + 35));
  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::generic_load_global_kernel::global_name(Espresso::generic_load_global_kernel *this)
{
  return (uint64_t)this + 280;
}

void Espresso::generic_load_global_kernel::~generic_load_global_kernel(Espresso::generic_load_global_kernel *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E2D93D18;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)this = off_1E2D8B580;
  if (*((char *)this + 303) < 0)
    operator delete(*((void **)this + 35));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_store_global_kernel::~generic_store_global_kernel(void **this)
{
  *this = off_1E2D8B6D8;
  if (*((char *)this + 303) < 0)
    operator delete(this[35]);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::generic_cf_if_kernel::~generic_cf_if_kernel(Espresso::generic_cf_if_kernel *this)
{
  *((_QWORD *)this + 36) = off_1E2D9B528;
  if (*((char *)this + 319) < 0)
    operator delete(*((void **)this + 37));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_cf_loop_kernel::~generic_cf_loop_kernel(Espresso::generic_cf_loop_kernel *this)
{
  *((_QWORD *)this + 36) = off_1E2D9B528;
  if (*((char *)this + 319) < 0)
    operator delete(*((void **)this + 37));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_cf_for_kernel::~generic_cf_for_kernel(Espresso::generic_cf_for_kernel *this)
{
  *(_QWORD *)this = off_1E2D89608;
  *((_QWORD *)this + 36) = &unk_1E2D89760;
  if (*((char *)this + 351) < 0)
    operator delete(*((void **)this + 41));
  *((_QWORD *)this + 36) = off_1E2D9B528;
  if (*((char *)this + 319) < 0)
    operator delete(*((void **)this + 37));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_cf_end_kernel::~generic_cf_end_kernel(void **this)
{
  *this = off_1E2D894B0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::generic_cf_else_kernel::~generic_cf_else_kernel(Espresso::generic_cf_else_kernel *this)
{
  *((_QWORD *)this + 36) = off_1E2D9B528;
  if (*((char *)this + 319) < 0)
    operator delete(*((void **)this + 37));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(Espresso::generic_instancenorm_1d_kernel *this)
{
  *(_QWORD *)this = off_1E2D9A520;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 320);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 304);
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_builtin_kernel::~generic_builtin_kernel(void **this)
{
  void **v2;

  *this = off_1E2D8D610;
  v2 = this + 54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = off_1E2D8B020;
  if (*((char *)this + 399) < 0)
    operator delete(this[47]);
  if (*((char *)this + 375) < 0)
    operator delete(this[44]);
  if (*((char *)this + 351) < 0)
    operator delete(this[41]);
  if (*((char *)this + 327) < 0)
    operator delete(this[38]);
  if (*((char *)this + 303) < 0)
    operator delete(this[35]);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::generic_transplant_kernel::~generic_transplant_kernel(Espresso::generic_transplant_kernel *this)
{
  *(_QWORD *)this = off_1E2D92B90;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 360);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  *(_QWORD *)this = off_1E2D97000;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(Espresso::generic_non_maximum_suppression_kernel *this)
{
  void *v2;

  *(_QWORD *)this = off_1E2D8BDD8;
  v2 = (void *)*((_QWORD *)this + 39);
  if (v2)
  {
    *((_QWORD *)this + 40) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_sparse_inner_product_kernel::~generic_sparse_inner_product_kernel(Espresso::generic_sparse_inner_product_kernel *this)
{
  *(_QWORD *)this = off_1E2D97990;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 320);
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_wg_transform_4_out_kernel_::~generic_wg_transform_4_out_kernel_(Espresso::generic_wg_transform_4_out_kernel_ *this)
{
  *(_QWORD *)this = off_1E2D97198;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::abstract_kernel_with_weights<Espresso::wg_transform_params>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

void Espresso::generic_loopkit_kernel::~generic_loopkit_kernel(void **this)
{
  void *v2;
  void *v3;

  *this = off_1E2D8E130;
  if (*((char *)this + 447) < 0)
    operator delete(this[53]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 51));
  *this = off_1E2D8B2D0;
  v2 = this[47];
  if (v2)
  {
    this[48] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 375) < 0)
    operator delete(this[44]);
  if (*((char *)this + 351) < 0)
    operator delete(this[41]);
  v3 = this[38];
  if (v3)
  {
    this[39] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 303) < 0)
    operator delete(this[35]);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(Espresso::generic_conv3d_kernel *this)
{
  *(_QWORD *)this = off_1E2D96CD0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 408);
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_static_dequantize_kernel::~generic_static_dequantize_kernel(Espresso::generic_static_dequantize_kernel *this)
{
  *(_QWORD *)this = off_1E2D9CE38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 336);
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_einsum_kernel::~generic_einsum_kernel(Espresso::generic_einsum_kernel *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_1E2D8AA40;
  v2 = (void *)*((_QWORD *)this + 44);
  if (v2)
  {
    *((_QWORD *)this + 45) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 41);
  if (v3)
  {
    *((_QWORD *)this + 42) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 38);
  if (v4)
  {
    *((_QWORD *)this + 39) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 303) < 0)
    operator delete(*((void **)this + 35));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_linear_quantize_kernel::~generic_linear_quantize_kernel(Espresso::generic_linear_quantize_kernel *this)
{
  *(_QWORD *)this = off_1E2D9A678;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_linear_dequantize_kernel::~generic_linear_dequantize_kernel(Espresso::generic_linear_dequantize_kernel *this)
{
  *(_QWORD *)this = off_1E2D9CA30;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::generic_load_constant_kernel::get_constant_blob@<X0>(Espresso::generic_load_constant_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  return Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(a2, (uint64_t *)this + 43);
}

uint64_t Espresso::util_bake_batchnorm(Espresso *this, int a2, uint64_t a3, const float *a4, float *a5, const float *a6, float *a7, float *a8)
{
  return Espresso::util_bake_batchnorm_generic((uint64_t)this, a2, 1, a3, a4, a5, a6, a8);
}

uint64_t Espresso::util_bake_batchnorm_generic(uint64_t this, int a2, int a3, uint64_t a4, const float *a5, float *a6, const float *a7, float *a8)
{
  int v8;
  uint64_t v9;
  float *v10;
  double v11;
  double v12;
  float v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  float v18;

  if ((int)this >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = &a6[4 * v9];
      v11 = *v10;
      v12 = v10[3];
      v13 = v10[1] - v11 * v10[2] / v12;
      a7[v9] = v13;
      if (a3 >= 1)
      {
        v14 = 0;
        v15 = v8;
        do
        {
          v16 = v15;
          v17 = a2;
          if (a2 >= 1)
          {
            do
            {
              v18 = v11 * *(float *)(a4 + 4 * v16) / v12;
              a5[v16++] = v18;
              --v17;
            }
            while (v17);
          }
          ++v14;
          v15 += a2 * this;
        }
        while (v14 != a3);
      }
      ++v9;
      v8 += a2;
    }
    while (v9 != this);
  }
  return this;
}

void Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

void Espresso::generic_rnn_kernel::~generic_rnn_kernel(Espresso::generic_rnn_kernel *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = off_1E2D83688;
  v2 = *((_QWORD *)this + 103);
  if (v2)
  {
    std::vector<Espresso::generic_rnn_kernel::embedding_cluster>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 824, v2);
    operator delete(*((void **)this + 103));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 101));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 784);
  v3 = (void **)((char *)this + 760);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 736);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 712);
  v3 = (void **)((char *)this + 688);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 664);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 640);
  v3 = (void **)((char *)this + 616);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 592);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  v3 = (void **)((char *)this + 544);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 520);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 496);
  v3 = (void **)((char *)this + 472);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 448);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 424);
  v3 = (void **)((char *)this + 400);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 376);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::abstract_kernel_with_weights<Espresso::pool_params>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

void Espresso::abstract_kernel_with_weights<Espresso::inner_product_uniforms>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

void Espresso::generic_bias_kernel::~generic_bias_kernel(Espresso::generic_bias_kernel *this)
{
  *(_QWORD *)this = off_1E2D969A0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 312);
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::abstract_kernel_with_weights<Espresso::bias_params>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

void Espresso::generic_convolution_grad_kernel::~generic_convolution_grad_kernel(Espresso::generic_convolution_grad_kernel *this)
{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(Espresso::generic_batchnorm_kernel *this)
{
  *(_QWORD *)this = off_1E2D96E68;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 384);
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::abstract_kernel_with_weights<Espresso::batchnorm_params>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

void Espresso::generic_bias_grad_kernel::~generic_bias_grad_kernel(Espresso::generic_bias_grad_kernel *this)
{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_batchnorm_grad_kernel::~generic_batchnorm_grad_kernel(Espresso::generic_batchnorm_grad_kernel *this)
{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_inner_product_grad_kernel::~generic_inner_product_grad_kernel(Espresso::generic_inner_product_grad_kernel *this)
{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_inner_product_weights_grad_kernel::~generic_inner_product_weights_grad_kernel(Espresso::generic_inner_product_weights_grad_kernel *this)
{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_convolution_weights_grad_kernel::~generic_convolution_weights_grad_kernel(Espresso::generic_convolution_weights_grad_kernel *this)
{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::generic_lambda_kernel::generic_lambda_kernel(uint64_t a1, uint64_t *a2, unsigned int *a3, const std::string *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v13;

  v8 = Espresso::base_kernel::base_kernel(a1, a2) + 280;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  *(_QWORD *)a1 = &off_1E2D8A018;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::string::operator=((std::string *)v8, a4);
  std::string::operator=((std::string *)(a1 + 304), a4 + 1);
  Espresso::load_network((uint64_t)a4, a2, *a3, 0, (uint64_t *)&v13);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 328, &v13);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_1916B27C0(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  Espresso::kernel_with_uniforms<Espresso::lambda_params_t>::~kernel_with_uniforms(v1);
  _Unwind_Resume(a1);
}

void Espresso::kernel_with_uniforms<Espresso::lambda_params_t>::~kernel_with_uniforms(void **this)
{
  *this = off_1E2D8AB98;
  if (*((char *)this + 327) < 0)
    operator delete(this[38]);
  if (*((char *)this + 303) < 0)
    operator delete(this[35]);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::apply_nonlinearity(float *__C, vDSP_Length __N, uint64_t a3)
{
  Espresso::apply_nonlinearity2(__C, __C, __N, a3);
}

uint64_t ___ZN25JITBackendSignpostEmitter15startJITSegmentENS_11ComputeUnitE_block_invoke()
{
  return kdebug_trace();
}

void Espresso::batch_metal::~batch_metal(id *this)
{
  Espresso::batch_metal::~batch_metal(this);
  JUMPOUT(0x19401CD90);
}

{
  *this = &off_1E2D5F988;
  if (!*((_BYTE *)this + 248))
    objc_msgSend(this[19], "endEncoding");

  Espresso::abstract_batch_metal::~abstract_batch_metal((Espresso::abstract_batch_metal *)this);
}

uint64_t Espresso::batch_metal::commit(id *this)
{
  uint64_t result;

  result = objc_msgSend(this[19], "endEncoding");
  if (this[23])
    result = objc_msgSend(this[18], "commit");
  *((_BYTE *)this + 248) = 1;
  return result;
}

void Espresso::batch_metal::sync_wait(Espresso::batch_metal *this)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  const char *v22;
  Espresso *j;
  Espresso *v24;
  NSObject *v25;
  uint8_t v26[16];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31[4];
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 248))
    (*(void (**)(Espresso::batch_metal *))(*(_QWORD *)this + 16))(this);
  v31[0] = 1;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  v33 = 50000;
  v32 = 723714224;
  kdebug_trace();
  objc_msgSend(*((id *)this + 18), "waitUntilCompleted");
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v2 = *((id *)this + 25);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v27, v38, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v28 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        if (objc_msgSend(v6, "status") != 4 && objc_msgSend(v6, "status") != 5)
          objc_msgSend(v6, "waitUntilCompleted");
        Espresso::throw_commandbuffer_error(v6);
        if (*((_DWORD *)this + 64))
        {
          objc_msgSend(v6, "GPUEndTime");
          v8 = v7;
          objc_msgSend(v6, "GPUStartTime");
          *(float *)&v9 = v8 - v9 + *((float *)this + 14);
          *((_DWORD *)this + 14) = LODWORD(v9);
          objc_msgSend(v6, "kernelEndTime");
          v11 = v10;
          objc_msgSend(v6, "kernelStartTime");
          *(float *)&v12 = v11 - v12 + *((float *)this + 15);
          *((_DWORD *)this + 15) = LODWORD(v12);
        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v27, v38, 16);
    }
    while (v3);
  }

  if (*((_DWORD *)this + 64))
  {
    objc_msgSend(*((id *)this + 18), "GPUEndTime");
    v14 = v13;
    objc_msgSend(*((id *)this + 18), "GPUStartTime");
    *(float *)&v15 = v14 - v15 + *((float *)this + 14);
    *((_DWORD *)this + 14) = LODWORD(v15);
    objc_msgSend(*((id *)this + 18), "kernelEndTime");
    v17 = v16;
    objc_msgSend(*((id *)this + 18), "kernelStartTime");
    *(float *)&v18 = v17 - v18 + *((float *)this + 15);
    *((_DWORD *)this + 15) = LODWORD(v18);
  }
  v19 = (void *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;

  Espresso::throw_commandbuffer_error(*((void **)this + 18));
  v20 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;

  v21 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;

  v24 = (Espresso *)*((_QWORD *)this + 20);
  for (j = (Espresso *)*((_QWORD *)this + 21);
        j != v24;
  *((_QWORD *)this + 21) = v24;
  if (*((_BYTE *)this + 192))
  {
    Espresso::espresso_os_log_subsystem(j, v22);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v26 = 0;
      _os_log_debug_impl(&dword_190DAF000, v25, OS_LOG_TYPE_DEBUG, "Metal batch: sync_wait completed\n", v26, 2u);
    }

  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v31);
}

void sub_1916B2BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)va);
  _Unwind_Resume(a1);
}

void Espresso::batch_metal::sync_wait_for_scheduled(Espresso::batch_metal *this)
{
  Espresso *v2;
  const char *v3;
  NSObject *v4;
  uint8_t v5[16];

  if (!*((_BYTE *)this + 248))
    (*(void (**)(Espresso::batch_metal *))(*(_QWORD *)this + 16))(this);
  v2 = (Espresso *)objc_msgSend(*((id *)this + 18), "waitUntilScheduled");
  if (*((_BYTE *)this + 192))
  {
    Espresso::espresso_os_log_subsystem(v2, v3);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v5 = 0;
      _os_log_debug_impl(&dword_190DAF000, v4, OS_LOG_TYPE_DEBUG, "Metal batch: sync_wait_for_scheduled completed\n", v5, 2u);
    }

  }
}

uint64_t Espresso::batch_metal::sync_point(Espresso::batch_metal *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  __int128 v8;
  int64x2_t v9;
  uint64_t v10;
  void *v11;
  std::runtime_error *exception;
  uint64_t v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;

  if (!*((_QWORD *)this + 23))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "sync_point not allowed without command queue");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(Espresso::batch_metal *))(*(_QWORD *)this + 16))(this);
  (*(void (**)(Espresso::batch_metal *))(*(_QWORD *)this + 24))(this);
  v2 = *((_QWORD *)this + 22);
  v3 = (char *)*((_QWORD *)this + 20);
  if ((unint64_t)(v2 - (_QWORD)v3) <= 0x7F)
  {
    v4 = (char *)*((_QWORD *)this + 21);
    v17 = (char *)this + 176;
    v5 = (char *)operator new(0x80uLL);
    v6 = &v5[v4 - v3];
    if (v4 == v3)
    {
      v9 = vdupq_n_s64((unint64_t)v4);
      v7 = &v5[v4 - v3];
    }
    else
    {
      v7 = &v5[v4 - v3];
      do
      {
        v8 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v7 - 1) = v8;
        v7 -= 16;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v3);
      v9 = *((int64x2_t *)this + 10);
      v2 = *((_QWORD *)this + 22);
    }
    *((_QWORD *)this + 20) = v7;
    *((_QWORD *)this + 21) = v6;
    v15 = v9;
    *((_QWORD *)this + 22) = v5 + 128;
    v16 = v2;
    v14 = v9.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v14);
  }
  objc_msgSend(*((id *)this + 23), "commandBuffer");
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v10;

  return (*(uint64_t (**)(Espresso::batch_metal *))(*(_QWORD *)this + 72))(this);
}

void sub_1916B2DC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::batch_metal::log_profiler_event(id *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  id v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[9];
  int v23;
  _QWORD v24[7];
  std::__shared_weak_count *v25;

  Espresso::abstract_batch::log_profiler_event((Espresso::abstract_batch *)this);
  if (this[13])
  {
    v12 = objc_alloc_init(MEMORY[0x1E0CC6B88]);
    objc_msgSend(this[18], "device");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)objc_msgSend(v13, "newSharedEvent");

    v24[0] = 0;
    v24[1] = v24;
    v24[2] = 0x4012000000;
    v24[3] = __Block_byref_object_copy__10540;
    v24[4] = __Block_byref_object_dispose__10541;
    v16 = this[13];
    v15 = (std::__shared_weak_count *)this[14];
    v24[5] = "";
    v24[6] = v16;
    v25 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = ___ZN8Espresso11batch_metal18log_profiler_eventEiyyyy_block_invoke;
    v22[3] = &unk_1E2DD5820;
    v23 = a2;
    v22[6] = a4;
    v22[7] = a5;
    v22[8] = a6;
    v22[4] = v24;
    v22[5] = a3;
    objc_msgSend(v14, "notifyListener:atValue:block:", v12, 1, v22);
    objc_msgSend(this[18], "encodeSignalEvent:value:", v14, 1);
    _Block_object_dispose(v24, 8);
    v19 = v25;
    if (v25)
    {
      v20 = (unint64_t *)&v25->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }

  }
}

void sub_1916B2F70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void Espresso::batch_metal::autocreate_command_encoder(id *this)
{
  uint64_t v2;
  id v3;

  objc_msgSend(this[18], "computeCommandEncoder");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = this[19];
  this[19] = (id)v2;

  *((_BYTE *)this + 248) = 0;
}

__n128 __Block_byref_object_copy__10540(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__10541(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
}

void ___ZN8Espresso11batch_metal18log_profiler_eventEiyyyy_block_invoke(uint64_t a1)
{
  __int128 v1;
  __int128 v2[3];

  *(_QWORD *)&v2[0] = 0xBFF0000000000000;
  DWORD2(v2[0]) = *(_DWORD *)(a1 + 72);
  v1 = *(_OWORD *)(a1 + 56);
  v2[1] = *(_OWORD *)(a1 + 40);
  v2[2] = v1;
  Espresso::profiler_t::log_event(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), v2);
}

void Espresso::throw_commandbuffer_error(void *a1)
{
  std::runtime_error *exception;
  id v2;
  int v3;
  std::string __p;

  v2 = a1;
  Espresso::commandbuffer_error_string_if_any((uint64_t)&v3, v2);
  if (v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::generic_error::generic_error(exception, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

}

void sub_1916B30C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void Espresso::commandbuffer_error_string_if_any(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  __int128 v11;
  uint64_t v12;

  v3 = a2;
  objc_msgSend(v3, "error");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v5 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v3, "error");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "localizedDescription");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "error");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringWithFormat:", CFSTR("%@; code=%d"), v7, objc_msgSend(v8, "code"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = objc_retainAutorelease(v9);
    std::string::basic_string[abi:ne180100]<0>(&v11, (char *)objc_msgSend(v10, "UTF8String"));
    *(_DWORD *)a1 = 1;
    *(_OWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 24) = v12;

  }
  else if (objc_msgSend(v3, "status") == 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "Unspecified metal error");
    *(_DWORD *)a1 = 1;
    *(_OWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 24) = v12;
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }

}

void sub_1916B3238(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Espresso::context_metal::begin_batch(Espresso::context_metal *this)
{
  return (*(uint64_t (**)(Espresso::context_metal *, _QWORD))(*(_QWORD *)this + 168))(this, 0);
}

void Espresso::context_metal::batch_callback(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::logic_error *exception;
  std::__shared_weak_count *v24;
  _QWORD v25[4];
  id v26;
  uint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  if (!*(_QWORD *)a2
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Espresso: Not a metal batch");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v9 = *(std::__shared_weak_count **)(a2 + 8);
  v24 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = (void *)v8[18];
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3321888768;
  v25[2] = ___ZN8Espresso13context_metal14batch_callbackERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectNS1_8functionIFvRKNS_17execution_error_tEEEE_block_invoke;
  v25[3] = &unk_1E2DC4628;
  v27 = a1;
  v28 = v8;
  v29 = v9;
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v7;
  v26 = v15;
  v16 = v30;
  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100]((uint64_t)v30, a4);
  objc_msgSend(v12, "addCompletedHandler:", v25);
  if (v31 == v30)
  {
    v17 = 4;
    goto LABEL_13;
  }
  if (v31)
  {
    v17 = 5;
    v16 = v31;
LABEL_13:
    (*(void (**)(_QWORD *))(*v16 + 8 * v17))(v16);
  }

  v18 = v29;
  if (v29)
  {
    v19 = (unint64_t *)&v29->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v24)
  {
    v21 = (unint64_t *)&v24->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

}

void sub_1916B34FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;

  if (a23 == v24)
  {
    v27 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v27 = 5;
    v24 = a23;
  }
  (*(void (**)(_QWORD *))(*v24 + 8 * v27))(v24);
LABEL_6:

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);

  _Unwind_Resume(a1);
}

void Espresso::context_metal::set_priority(Espresso::context_metal *this, int a2, float a3, unsigned int a4)
{
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  if (!*((_QWORD *)this + 24))
    Espresso::throw_exception_selector<Espresso::device_not_found_error>("set_priority not allowed without command queue");
  *((_BYTE *)this + 172) = a2;
  *((float *)this + 42) = a3;
  *((_QWORD *)this + 22) = a4;
  v6 = objc_msgSend(*((id *)this + 18), "newCommandQueueWithMaxCommandBufferCount:", *((int *)this + 39));
  v7 = (void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v6;

  v8 = (void *)*((_QWORD *)this + 24);
  if (a2)
  {
    if (!v8)
      Espresso::throw_exception_selector<Espresso::device_not_found_error>("Failed to create new command queue");
    v9 = v8;
    if ((objc_opt_respondsToSelector() & 1) == 0)
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Low priority not supported");
    objc_msgSend(v9, "setBackgroundGPUPriority:", *((_QWORD *)this + 22));
    objc_msgSend(v9, "setGPUPriority:", *((_QWORD *)this + 22));
  }
  else
  {
    v9 = v8;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v9, "setGPUPriority:", *((_QWORD *)this + 22));
  }

}

void sub_1916B3664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

float Espresso::context_metal::begin_batch@<S0>(id *this@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  float result;
  __int128 v11;

  if (a2)
  {
    v6 = operator new(0x120uLL);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = &off_1E2DB6AF0;
    *(_QWORD *)&v7 = Espresso::batch_metal::batch_metal((uint64_t)(v6 + 3), (uint64_t)this, a2);
    *((_QWORD *)&v7 + 1) = v6;
    v11 = v7;

    v8 = v11;
  }
  else
  {
    v9 = operator new(0x120uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_1E2DB6AF0;
    *(_QWORD *)&v8 = Espresso::batch_metal::batch_metal((Espresso::batch_metal *)(v9 + 3), this);
    *((_QWORD *)&v8 + 1) = v9;
  }
  *(_BYTE *)(v8 + 216) = *((_BYTE *)this + 172);
  *(_QWORD *)(v8 + 224) = this[22];
  result = *((float *)this + 42);
  *(float *)(v8 + 212) = result;
  *(_BYTE *)(v8 + 232) = *((_BYTE *)this + 184);
  *a3 = v8;
  return result;
}

void sub_1916B3778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  void *v13;

  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

Espresso::batch_metal *Espresso::batch_metal::batch_metal(Espresso::batch_metal *this, id *a2)
{
  void **v4;
  id *v5;
  uint64_t v6;
  void *v7;

  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_BYTE *)this + 40) = 1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_WORD *)this + 48) = 256;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 0;
  *((_OWORD *)this + 9) = 0u;
  v4 = (void **)((char *)this + 144);
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  v5 = (id *)((char *)this + 184);
  *(_QWORD *)this = &off_1E2D5F988;
  *((_BYTE *)this + 192) = 0;
  *((_BYTE *)this + 216) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 28) = 1;
  *((_BYTE *)this + 232) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_DWORD *)this + 63) = 0;
  *((_DWORD *)this + 64) = 0;
  objc_storeStrong((id *)this + 23, a2[24]);
  objc_msgSend(*v5, "commandBuffer");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *v4;
  *v4 = (void *)v6;

  if (*((_DWORD *)a2 + 47))
    (*(void (**)(Espresso::batch_metal *))(*(_QWORD *)this + 72))(this);
  *((_DWORD *)this + 64) = *((unsigned __int8 *)a2 + 64);
  *((_BYTE *)this + 97) = 0;
  return this;
}

void sub_1916B38A8(_Unwind_Exception *a1)
{
  id *v1;

  Espresso::abstract_batch_metal::~abstract_batch_metal((Espresso::abstract_batch_metal *)v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::batch_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::batch_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::batch_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::batch_metal::batch_metal(uint64_t a1, uint64_t a2, void *a3)
{
  id v6;

  v6 = a3;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_WORD *)(a1 + 96) = 256;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)a1 = &off_1E2D5F988;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 1;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 252) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  objc_storeStrong((id *)(a1 + 144), a3);
  if (*(_DWORD *)(a2 + 188))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  *(_DWORD *)(a1 + 256) = *(unsigned __int8 *)(a2 + 64);
  *(_BYTE *)(a1 + 97) = 0;

  return a1;
}

void sub_1916B39F0(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  Espresso::abstract_batch_metal::~abstract_batch_metal((Espresso::abstract_batch_metal *)v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::device_not_found_error>(const char *a1)
{
  Espresso::throw_exception<Espresso::device_not_found_error>(a1);
}

void ___ZN8Espresso13context_metal14batch_callbackERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectNS1_8functionIFvRKNS_17execution_error_tEEEE_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  std::string v23;
  _QWORD block[4];
  _BYTE v25[24];
  _BYTE *v26;
  int v27;
  std::string __p;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1[5];
  v5 = a1[6];
  v7 = *(_QWORD *)(v5 + 160);
  v6 = *(_QWORD *)(v5 + 168);
  v8 = v5;
  if (v6 != v7)
  {
    do
      v6 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v6 - 16);
    while (v6 != v7);
    v8 = a1[6];
  }
  *(_QWORD *)(v5 + 168) = v7;
  v9 = *(void **)(v8 + 144);
  *(_QWORD *)(v8 + 144) = 0;

  v10 = a1[6];
  v11 = *(void **)(v10 + 152);
  *(_QWORD *)(v10 + 152) = 0;

  if (*(_BYTE *)(v4 + 64))
  {
    objc_msgSend(v3, "GPUEndTime");
    v13 = v12;
    objc_msgSend(v3, "GPUStartTime");
    *(double *)(v4 + 200) = v13 - v14 + *(double *)(v4 + 200);
    objc_msgSend(v3, "kernelEndTime");
    v16 = v15;
    objc_msgSend(v3, "kernelStartTime");
    *(double *)(v4 + 208) = v16 - v17 + *(double *)(v4 + 208);
    ++*(_DWORD *)(v4 + 216);
  }
  Espresso::commandbuffer_error_string_if_any((uint64_t)&v22, v3);
  v18 = a1[4];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN8Espresso13context_metal14batch_callbackERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectNS1_8functionIFvRKNS_17execution_error_tEEEE_block_invoke_2;
  block[3] = &__block_descriptor_96_ea8_32c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE64c34_ZTSN8Espresso17execution_error_tE_e5_v8__0l;
  v19 = v25;
  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)(a1 + 8));
  v27 = v22;
  v20 = SHIBYTE(v23.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  else
    __p = v23;
  dispatch_async(v18, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v26 == v25)
  {
    v21 = 4;
  }
  else
  {
    if (!v26)
      goto LABEL_16;
    v21 = 5;
    v19 = v26;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v21))(v19);
LABEL_16:
  if (v20 < 0)
    operator delete(v23.__r_.__value_.__l.__data_);

}

void sub_1916B3C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24)
{
  void *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v28;

  if (a24 == v25)
  {
    v28 = 4;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v28 = 5;
    v25 = a24;
  }
  (*(void (**)(_QWORD *))(*v25 + 8 * v28))(v25);
LABEL_6:
  operator delete(v26);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c50_ZTSNSt3__110shared_ptrIN8Espresso11batch_metalEEE64c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100](a1 + 64, a2 + 64);
}

void sub_1916B3CD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_48c50_ZTSNSt3__110shared_ptrIN8Espresso11batch_metalEEE64c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 64);
  v3 = *(_QWORD **)(a1 + 88);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
}

uint64_t ___ZN8Espresso13context_metal14batch_callbackERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectNS1_8functionIFvRKNS_17execution_error_tEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
}

void __copy_helper_block_ea8_32c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE64c34_ZTSN8Espresso17execution_error_tE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v4 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1916B3DD0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 56);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 56);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *__destroy_helper_block_ea8_32c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE64c34_ZTSN8Espresso17execution_error_tE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  result = *(_QWORD **)(a1 + 56);
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

uint64_t Espresso::batch_metal::recreate_command_buffer_after_flops(uint64_t this, double a2)
{
  float v2;
  float v3;
  float v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v2 = 100.0;
  v3 = a2 / 1000000000.0;
  if (*(_BYTE *)(this + 232))
    v2 = 20.0;
  v4 = *(float *)(this + 208) + (float)(v3 / v2) * 1000.0;
  *(float *)(this + 208) = v4;
  if (v4 > 60.0)
  {
    v5 = this;
    v6 = *(void **)(this + 200);
    if (!v6)
    {
      v7 = objc_opt_new();
      v8 = *(void **)(v5 + 200);
      *(_QWORD *)(v5 + 200) = v7;

      v6 = *(void **)(v5 + 200);
    }
    objc_msgSend(v6, "addObject:", *(_QWORD *)(v5 + 144));
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    *(_DWORD *)(v5 + 208) = 0;
    objc_msgSend(*(id *)(v5 + 184), "commandBuffer");
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = *(void **)(v5 + 144);
    *(_QWORD *)(v5 + 144) = v9;

    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
  }
  return this;
}

void Espresso::batch_metal::recreate_command_buffer(Espresso::batch_metal *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v2 = (void *)*((_QWORD *)this + 25);
  if (!v2)
  {
    v3 = objc_opt_new();
    v4 = (void *)*((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = v3;

    v2 = (void *)*((_QWORD *)this + 25);
  }
  objc_msgSend(v2, "addObject:", *((_QWORD *)this + 18));
  (*(void (**)(Espresso::batch_metal *))(*(_QWORD *)this + 16))(this);
  *((_DWORD *)this + 52) = 0;
  objc_msgSend(*((id *)this + 23), "commandBuffer");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v5;

  *((_BYTE *)this + 248) = 0;
}

void sub_1916B40A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id Espresso::context_metal::kernel_for_function(Espresso::context_metal *this, NSString *a2, NSString *a3, MTLFunctionConstantValues *a4)
{
  NSString *v7;
  NSString *v8;
  MTLFunctionConstantValues *v9;
  void *v10;
  NSString *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (void *)*((_QWORD *)this + 20);
  v11 = objc_retainAutorelease(v7);
  v12 = -[NSString UTF8String](v11, "UTF8String");
  if (v8)
    v13 = -[NSString UTF8String](objc_retainAutorelease(v8), "UTF8String");
  else
    v13 = 0;
  objc_msgSend(v10, "kernelForFunction:cacheString:withConstants:", v12, v13, v9);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void sub_1916B4184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id Espresso::context_metal::kernel_for_function(Espresso::context_metal *this, const char *a2, const char *a3, MTLFunctionConstantValues *a4)
{
  -[Espresso::context_metal kernelForFunction:cacheString:withConstants:](this, "kernelForFunction:cacheString:withConstants:", a2, a3, a4);
  return (id)objc_claimAutoreleasedReturnValue();
}

id Espresso::context_metal::kernel_for_function(Espresso::context_metal *this, NSString *a2)
{
  NSString *v3;
  void *v4;
  NSString *v5;
  void *v6;

  v3 = a2;
  v4 = (void *)*((_QWORD *)this + 20);
  v5 = objc_retainAutorelease(v3);
  objc_msgSend(v4, "kernelForFunction:cacheString:withConstants:", -[NSString UTF8String](v5, "UTF8String"), 0, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1916B4214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Espresso::util_update_metal_priority(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  result = *a1;
  if (result)
  {
    if (result)
    {
      v7 = (std::__shared_weak_count *)a1[1];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      if (*(unsigned __int8 *)(result + 172) != (_DWORD)a2 || *(_QWORD *)(result + 176) != a3)
        (*(void (**)(uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)result + 16))(result, a2, a3, 4.0);
      if (v7)
      {
        v10 = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      return 1;
    }
  }
  return result;
}

void sub_1916B4304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::submit_and_create_new_command_buffer(uint64_t a1, uint64_t a2)
{
  Espresso::batch_metal *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *(Espresso::batch_metal **)a1;
  if (v4
  {
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    Espresso::batch_metal::recreate_command_buffer(v4);
    if (v5)
    {
      v8 = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    Espresso::espresso_os_log_subsystem(v4, (const char *)a2);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(a2 + 16);
      v12 = a2 + 16;
      v11 = v13;
      if (*(char *)(v12 + 23) >= 0)
        v11 = v12;
      *(_DWORD *)buf = 136315138;
      v15 = v11;
      _os_log_error_impl(&dword_190DAF000, v10, OS_LOG_TYPE_ERROR, "Cannot create command buffer on this batch, batch_metal required (layer %s)", buf, 0xCu);
    }

  }
}

void sub_1916B4470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::EspressoReporterUtilities::get_compute_unit_string@<X0>(uint64_t a1@<X0>, void **a2@<X8>)
{
  void **v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[11];
  char v7;
  uint64_t v8;
  __int128 v9;
  void *v10;

  v3 = a2;
  result = std::string::basic_string[abi:ne180100]<0>(a2, "");
  if (*(_QWORD *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::ostream_iterator<std::string,char,std::char_traits<char>>>(&v9, *(_QWORD **)a1, (_QWORD *)(a1 + 8), v6, "_");
    std::stringbuf::str();
    if (*((char *)v3 + 23) < 0)
      operator delete(*v3);
    *(_OWORD *)v3 = v9;
    v3[2] = v10;
    if (*((char *)v3 + 23) < 0)
    {
      v5 = (uint64_t)v3[1] - 1;
      v3[1] = (void *)v5;
      v3 = (void **)*v3;
    }
    else
    {
      v5 = *((unsigned __int8 *)v3 + 23) - 1;
      *((_BYTE *)v3 + 23) = v5 & 0x7F;
    }
    *((_BYTE *)v3 + v5) = 0;
    v6[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v6[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v7 < 0)
      operator delete((void *)v6[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x19401CCD0](&v8);
  }
  return result;
}

void sub_1916B45B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::ostringstream::~ostringstream((uint64_t)&a9);
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  _Unwind_Resume(a1);
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::ostream_iterator<std::string,char,std::char_traits<char>>>(_QWORD *result, _QWORD *a2, _QWORD *a3, _QWORD *a4, const char *a5)
{
  _QWORD *v7;
  _QWORD *v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;

  v7 = a2;
  v8 = result;
  if (a2 != a3)
  {
    do
    {
      v10 = *((char *)v7 + 55);
      if (v10 >= 0)
        v11 = (uint64_t)(v7 + 4);
      else
        v11 = v7[4];
      if (v10 >= 0)
        v12 = *((unsigned __int8 *)v7 + 55);
      else
        v12 = v7[5];
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, v11, v12);
      if (a5)
      {
        v13 = strlen(a5);
        result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)a5, v13);
      }
      v14 = (_QWORD *)v7[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v7[2];
          v16 = *v15 == (_QWORD)v7;
          v7 = v15;
        }
        while (!v16);
      }
      v7 = v15;
    }
    while (v15 != a3);
    v7 = a3;
  }
  *v8 = v7;
  v8[1] = a4;
  v8[2] = a5;
  return result;
}

void Espresso::EspressoReporterUtilities::append_compute_unit_set(_DWORD *a1, const void **a2, uint64_t **a3)
{
  void *__p[2];
  char v5;

  switch(*a1)
  {
    case 2:
      std::string::basic_string[abi:ne180100]<0>(__p, "ANE");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(a3, __p, (uint64_t)__p);
      goto LABEL_6;
    case 3:
    case 4:
    case 8:
      std::string::basic_string[abi:ne180100]<0>(__p, "CPU");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(a3, __p, (uint64_t)__p);
      goto LABEL_6;
    case 5:
      std::string::basic_string[abi:ne180100]<0>(__p, "GPU");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(a3, __p, (uint64_t)__p);
LABEL_6:
      if (v5 < 0)
        operator delete(__p[0]);
      break;
    default:
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a3, a2, (uint64_t)a2);
      break;
  }
}

void sub_1916B4790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::EventReporterImplementation::printVectorOfXpcEventObjects(Espresso *a1, const char *a2)
{
  NSObject *v3;
  uint64_t v4;
  Espresso *v5;
  const char *v6;
  unint64_t v7;
  NSObject *v8;
  id v9;
  void *v10;
  BOOL v11;
  Espresso *v12;
  const char *v13;
  NSObject *v14;
  const char *string;
  void *v16;
  BOOL v17;
  Espresso *v18;
  const char *v19;
  NSObject *v20;
  uint64_t uint64;
  void *v22;
  BOOL v23;
  Espresso *v24;
  const char *v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  BOOL v29;
  Espresso *v30;
  const char *v31;
  NSObject *v32;
  uint64_t v33;
  void *v34;
  BOOL v35;
  Espresso *v36;
  const char *v37;
  NSObject *v38;
  const char *v39;
  NSObject *v40;
  uint8_t buf[4];
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  Espresso::espresso_os_log_subsystem(a1, a2);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = (uint64_t)(*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 3;
    *(_DWORD *)buf = 134217984;
    v42 = v4;
    _os_log_impl(&dword_190DAF000, v3, OS_LOG_TYPE_INFO, "\n Number of xpc events in the pond : %lu ", buf, 0xCu);
  }

  if (*((_QWORD *)a1 + 1) != *(_QWORD *)a1)
  {
    v7 = 0;
    do
    {
      Espresso::espresso_os_log_subsystem(v5, v6);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v42) = v7;
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "\n %d th xpc event object : \n", buf, 8u);
      }

      v9 = *(id *)(*(_QWORD *)a1 + 8 * v7);
      xpc_dictionary_get_value(v9, "computeUnit");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10 == 0;

      if (!v11)
      {
        Espresso::espresso_os_log_subsystem(v12, v13);
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          string = xpc_dictionary_get_string(v9, "computeUnit");
          *(_DWORD *)buf = 136315138;
          v42 = (uint64_t)string;
          _os_log_impl(&dword_190DAF000, v14, OS_LOG_TYPE_INFO, "computeUnit : %s, ", buf, 0xCu);
        }

      }
      xpc_dictionary_get_value(v9, "numLayers");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = v16 == 0;

      if (!v17)
      {
        Espresso::espresso_os_log_subsystem(v18, v19);
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          uint64 = xpc_dictionary_get_uint64(v9, "numLayers");
          *(_DWORD *)buf = 134217984;
          v42 = uint64;
          _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "numLayers : %llu, ", buf, 0xCu);
        }

      }
      xpc_dictionary_get_value(v9, "numSegments");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v22 == 0;

      if (!v23)
      {
        Espresso::espresso_os_log_subsystem(v24, v25);
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          v27 = xpc_dictionary_get_uint64(v9, "numSegments");
          *(_DWORD *)buf = 134217984;
          v42 = v27;
          _os_log_impl(&dword_190DAF000, v26, OS_LOG_TYPE_INFO, "numSegments : %llu, ", buf, 0xCu);
        }

      }
      xpc_dictionary_get_value(v9, "compilerType");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = v28 == 0;

      if (!v29)
      {
        Espresso::espresso_os_log_subsystem(v30, v31);
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          v33 = xpc_dictionary_get_uint64(v9, "compilerType");
          *(_DWORD *)buf = 134217984;
          v42 = v33;
          _os_log_impl(&dword_190DAF000, v32, OS_LOG_TYPE_INFO, "compilerType : %llu, ", buf, 0xCu);
        }

      }
      xpc_dictionary_get_value(v9, "modelHash");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = v34 == 0;

      if (!v35)
      {
        Espresso::espresso_os_log_subsystem(v36, v37);
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          v39 = xpc_dictionary_get_string(v9, "modelHash");
          *(_DWORD *)buf = 136315138;
          v42 = (uint64_t)v39;
          _os_log_impl(&dword_190DAF000, v38, OS_LOG_TYPE_INFO, "modelHash : %s, ", buf, 0xCu);
        }

      }
      ++v7;
    }
    while (v7 < (uint64_t)(*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 3);
  }
  Espresso::espresso_os_log_subsystem(v5, v6);
  v40 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_190DAF000, v40, OS_LOG_TYPE_INFO, "\n", buf, 2u);
  }

}

void sub_1916B4BD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::blob_container::~blob_container(id *this)
{
  Espresso::MPSBuffersEngine::blob_container::~blob_container(this);
  JUMPOUT(0x19401CD90);
}

{
  *this = &off_1E2D711C8;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 22));
  Espresso::abstract_blob_container::~abstract_blob_container((Espresso::abstract_blob_container *)this);
}

void Espresso::MPSBuffersEngine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  _BOOL4 v8;
  const void *v9;
  id *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  id *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  unint64_t i;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::runtime_error *exception;
  __int128 v63[2];
  void *__p;
  void *v65;
  _DWORD v66[5];
  int v67;
  _QWORD v68[2];
  uint64_t v69;
  id *v70;
  std::__shared_weak_count *v71;
  const void *v72;
  std::__shared_weak_count *v73;

  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 88), *a3, a3[1]);
  if (*a3)
  {
    v7 = v6;
    v72 = 0;
    v73 = 0;
    if (v6)
    {
      v8 = *((_BYTE *)v6 + 88) != 0;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v72, v6[13], v6[14]);
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v72 = 0;
    v73 = 0;
  }
  v9 = *(const void **)(a1 + 72);
  if (!v9
  {
    v70 = 0;
    v71 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v11 = *(std::__shared_weak_count **)(a1 + 80);
  v70 = v10;
  v71 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  Espresso::MPSBuffersEngine::blob_container::setup_shape((Espresso::MPSBuffersEngine::blob_container *)v68, (const Espresso::layer_shape *)a1, a2);
  if (*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 24))
  {
    v14 = *(void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = 0;

    v15 = *(void **)(a1 + 208);
    *(_QWORD *)(a1 + 208) = 0;

    v63[0] = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 176, v63);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v63[0] + 1);
    if (*((_QWORD *)&v63[0] + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v63[0] + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *(void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;

    v20 = *(void **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = 0;

    v21 = *(void **)(a1 + 232);
    *(_QWORD *)(a1 + 232) = 0;

    v22 = *(_DWORD *)(a1 + 8);
    v23 = *(_DWORD *)(a1 + 12);
    v24 = *(_DWORD *)(a1 + 16);
    v25 = *(_DWORD *)(a1 + 20);
    if (*(int *)(a1 + 24) <= 1)
      v26 = 1;
    else
      v26 = *(_DWORD *)(a1 + 24);
    Espresso::abstract_blob_container::shape((char *)v63, a1);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v66, (const Espresso::layer_shape *)v63, 0);
    if (__p)
    {
      v65 = __p;
      operator delete(__p);
    }
    if (v67 == 3)
    {
      v22 = *(_DWORD *)(a1 + 8);
      v23 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 12);
      if (*(int *)(a1 + 24) <= 1)
        v27 = 1;
      else
        v27 = *(_DWORD *)(a1 + 24);
      v28 = v27 * *(_DWORD *)(a1 + 20);
      if (!v8)
      {
LABEL_27:
        if (v72)
        {
          if (v29)
          {
            v30 = v73;
            if (v73)
            {
              v31 = (unint64_t *)&v73->__shared_owners_;
              do
                v32 = __ldxr(v31);
              while (__stxr(v32 + 1, v31));
            }
          }
          else
          {
            v30 = 0;
          }
          objc_storeStrong((id *)(a1 + 168), v29[21]);
          if (v30)
          {
            v36 = (unint64_t *)&v30->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          goto LABEL_48;
        }
        v33 = *(void **)(a1 + 168);
        if (v33)
        {
          v34 = objc_msgSend(v33, "length");
          v35 = v69;
          if (v34 == v69)
            goto LABEL_48;
        }
        else
        {
          v35 = v69;
        }
        v38 = objc_msgSend(v70[18], "newBufferWithLength:options:", v35, 0);
        v39 = *(void **)(a1 + 168);
        *(_QWORD *)(a1 + 168) = v38;

LABEL_48:
        v40 = objc_opt_new();
        v41 = 268435472;
        v42 = *(void **)(a1 + 208);
        *(_QWORD *)(a1 + 208) = v40;

        *(_DWORD *)(a1 + 192) = 268435488;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) != 1)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) == 3)
            {
              v41 = 536870944;
            }
            else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) == 10)
            {
              v41 = 32;
            }
            else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) == 2)
            {
              v41 = 536870920;
            }
            else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) == 4)
            {
              v41 = 8;
            }
            else
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) != 8)
                Espresso::throw_exception_selector<Espresso::generic_error>("Compute path not supported; FP16, FP32, I32, U32, U8, S8 compute paths supported by MPS_BUFFERS_ENGINE");
              v41 = 536870976;
            }
          }
          *(_DWORD *)(a1 + 192) = v41;
        }
        else
        {
          v41 = *(unsigned int *)(a1 + 192);
        }
        objc_msgSend(MEMORY[0x1E0CC6F00], "matrixDescriptorWithRows:columns:matrices:rowBytes:matrixBytes:dataType:", v23, v22, v28, v68[0], v68[1], v41);
        v43 = objc_claimAutoreleasedReturnValue();
        v44 = *(void **)(a1 + 208);
        *(_QWORD *)(a1 + 208) = v43;

        v45 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6ED8]), "initWithBuffer:descriptor:", *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 208));
        v46 = *(void **)(a1 + 200);
        *(_QWORD *)(a1 + 200) = v45;

        v47 = (void *)objc_opt_new();
        if (v67)
        {
          for (i = 0; i < v67; ++i)
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v66[i]);
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v47, "addObject:", v49);

          }
        }
        v50 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithArray:", v47);
        v51 = *(void **)(a1 + 232);
        *(_QWORD *)(a1 + 232) = v50;

        objc_msgSend(MEMORY[0x1E0CC6FE0], "descriptorWithDataType:shape:", *(unsigned int *)(a1 + 192), *(_QWORD *)(a1 + 232));
        v52 = objc_claimAutoreleasedReturnValue();
        v53 = *(void **)(a1 + 224);
        *(_QWORD *)(a1 + 224) = v52;

        v54 = objc_alloc(MEMORY[0x1E0CC6F50]);
        v55 = objc_msgSend(v54, "initWithDevice:descriptor:", v70[18], *(_QWORD *)(a1 + 224));
        v56 = *(void **)(a1 + 216);
        *(_QWORD *)(a1 + 216) = v55;

        goto LABEL_66;
      }
    }
    else
    {
      v28 = v25 * v24 * v26;
      if (!v8)
        goto LABEL_27;
    }
    v7[12] = v69;
LABEL_66:
    v11 = v71;
    goto LABEL_67;
  }
  if (v8)
    v7[12] = 0;
LABEL_67:
  if (v11)
  {
    v57 = (unint64_t *)&v11->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v59 = v73;
  if (v73)
  {
    v60 = (unint64_t *)&v73->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_1916B5238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v15;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 - 80);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::blob_container::platform(Espresso::MPSBuffersEngine::blob_container *this)
{
  return (***(uint64_t (****)(_QWORD))(*((_QWORD *)this + 9) + 8))(*(_QWORD *)(*((_QWORD *)this + 9) + 8));
}

uint64_t Espresso::MPSBuffersEngine::blob_container::compute_path(Espresso::MPSBuffersEngine::blob_container *this)
{
  return *((unsigned int *)this + 40);
}

void Espresso::MPSBuffersEngine::blob_container::__copy_to_host(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  if (!*a3)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(&v9, a1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v9);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_host(a1, *(void **)a2, *(std::__shared_weak_count **)(a2 + 8), a3, 1);
}

void Espresso::MPSBuffersEngine::blob_container::__copy_from_host(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_host(a1, *(void **)a2, *(std::__shared_weak_count **)(a2 + 8), a3, 0);
}

void Espresso::MPSBuffersEngine::blob_container::__copy_from_CVPixelBuffer(uint64_t a1, _QWORD *a2, uint64_t a3, __CVBuffer *a4, __int128 *a5, uint64_t a6)
{
  const void *v7;
  id *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  __IOSurface *IOSurface;
  void *v18;
  size_t BytesPerRow;
  size_t Width;
  size_t Height;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  id *v25;
  std::__shared_weak_count *v26;

  v7 = *(const void **)(a1 + 72);
  if (!v7
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v13 = *(std::__shared_weak_count **)(a1 + 80);
  v25 = v12;
  v26 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  IOSurface = CVPixelBufferGetIOSurface(a4);
  if (!IOSurface || CVPixelBufferGetPixelFormatType(a4) != 1278226536)
  {
    Espresso::abstract_blob_container::__copy_from_CVPixelBuffer((int *)a1, (uint64_t)a2, v16, a4, a5, a6);
    goto LABEL_16;
  }
  v18 = (void *)objc_msgSend(v25[18], "newBufferWithIOSurface:", IOSurface);
  if (v18)
  {
    BytesPerRow = IOSurfaceGetBytesPerRow(IOSurface);
    Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_ane_metal_buffer(a1, (uint64_t)a2, v18, BytesPerRow, 1, 0, 1u, 1);
LABEL_15:

    goto LABEL_16;
  }
  Width = IOSurfaceGetWidth(IOSurface);
  Height = IOSurfaceGetHeight(IOSurface);
  if (!(Width >> 14) && Height < 0x4000)
  {
    Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_cvpb_iosurface(a1, (uint64_t)a2, IOSurface, 1);
    goto LABEL_15;
  }
  Espresso::MetalLowmemEngine::blob_container::slow_copy_kCVPixelFormatType_OneComponent16Half_shared(a2, a4, (void *)a1, 1u);
LABEL_16:
  if (v26)
  {
    v22 = (unint64_t *)&v26->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1916B5598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::blob_container::__copy_to_CVPixelBuffer(_QWORD *a1, _QWORD *a2, uint64_t a3, __CVBuffer *a4)
{
  const void *v5;
  id *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __IOSurface *IOSurface;
  void *v13;
  size_t BytesPerRow;
  size_t Width;
  size_t Height;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  id *v20;
  std::__shared_weak_count *v21;

  v5 = (const void *)a1[9];
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v9 = (std::__shared_weak_count *)a1[10];
  v20 = v8;
  v21 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (CVPixelBufferGetPixelFormatType(a4) != 1278226536)
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Copy not implemented for CVPixelBuffer on this engine.");
  IOSurface = CVPixelBufferGetIOSurface(a4);
  if (IOSurface && (v13 = (void *)objc_msgSend(v20[18], "newBufferWithIOSurface:", IOSurface)) != 0)
  {
    BytesPerRow = IOSurfaceGetBytesPerRow(IOSurface);
    Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_ane_metal_buffer((uint64_t)a1, (uint64_t)a2, v13, BytesPerRow, 1, 0, 1u, 0);
  }
  else
  {
    Width = IOSurfaceGetWidth(IOSurface);
    Height = IOSurfaceGetHeight(IOSurface);
    if (!IOSurface || Width >> 14 || Height >= 0x4000)
      Espresso::MetalLowmemEngine::blob_container::slow_copy_kCVPixelFormatType_OneComponent16Half_shared(a2, a4, a1, 0);
    else
      Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_cvpb_iosurface((uint64_t)a1, (uint64_t)a2, IOSurface, 0);
    v13 = 0;
  }

  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1916B57D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::blob_container::unsafe_opaque_raw_pointer(Espresso::MPSBuffersEngine::blob_container *this)
{
  return *((_QWORD *)this + 21);
}

uint64_t Espresso::MPSBuffersEngine::blob_container::__copy_from(int *a1, uint64_t a2, uint64_t a3)
{
  id *v6;
  id *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  id *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t i;
  size_t BytesPerRow;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned int (*v38)(int *);
  const char *v39;
  Espresso *v40;
  const char *v41;
  unint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  NSObject *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v54;
  int v55;
  void *v56;
  int v57;
  BOOL v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::runtime_error *exception;
  int64x2_t v69;
  uint64_t v70;
  _QWORD v71[3];
  uint8_t buf[8];
  std::__shared_weak_count *v73;
  id *v74;
  std::__shared_weak_count *v75;
  void *v76;
  std::__shared_weak_count *v77;
  id *v78;
  std::__shared_weak_count *v79;

  if (!*(_QWORD *)a2)
    return 0;
  if (!v6)
    return 0;
  v7 = v6;
  v8 = *(std::__shared_weak_count **)(a2 + 8);
  v78 = v6;
  v79 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *(void **)a3;
  if (*(_QWORD *)a3
  {
    v13 = (uint64_t)v12;
    v14 = *(std::__shared_weak_count **)(a3 + 8);
    v76 = v12;
    v77 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v11 = *(void **)a3;
      if (!*(_QWORD *)a3)
        goto LABEL_36;
    }
  }
  else
  {
    v13 = 0;
    v76 = 0;
    v77 = 0;
    if (!v11)
      goto LABEL_36;
  }
  if (v18)
  {
    v19 = v18;
    v20 = *(std::__shared_weak_count **)(a3 + 8);
    *(_QWORD *)buf = v18;
    v73 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = (const void *)*((_QWORD *)a1 + 9);
    if (!v23
    {
      v74 = 0;
      v75 = 0;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)a1 + 10);
    v74 = v24;
    v75 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = v24[18];
    v29 = *((unsigned int *)v19 + 45);
    if ((int)v29 >= 1)
    {
      for (i = 0; i != v29; ++i)
      {
        BytesPerRow = IOSurfaceGetBytesPerRow((IOSurfaceRef)objc_msgSend(*(id *)(v19[27] + 8 * i), "ioSurfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80)));
        objc_msgSend(*(id *)(v19[27] + 8 * i), "metalBufferWithDevice:multiBufferFrame:", v28, *(_QWORD *)(*(_QWORD *)a2 + 80));
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_ane_metal_buffer((uint64_t)a1, a2, v32, BytesPerRow, *((unsigned int *)v19 + 48), i, v29, 1);

      }
    }

    if (v25)
    {
      v33 = (unint64_t *)&v25->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v35 = v73;
    if (!v73)
      goto LABEL_51;
    v36 = (unint64_t *)&v73->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    goto LABEL_49;
  }
LABEL_36:
  if (!v13)
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(buf, v11, *(std::__shared_weak_count **)(a3 + 8));
    if (!*(_QWORD *)buf)
    {
      v43 = v73;
      if (v73)
      {
        v44 = (unint64_t *)&v73->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      Espresso::espresso_os_log_subsystem(v40, v41);
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_190DAF000, v46, OS_LOG_TYPE_DEBUG, "Only copies from CPU/MPSBuffer blobs are supported", buf, 2u);
      }

      goto LABEL_60;
    }
    (*(void (**)(int *, uint64_t, uint8_t *))(*(_QWORD *)a1 + 48))(a1, a2, buf);
    v35 = v73;
    if (!v73)
    {
LABEL_51:
      v17 = 1;
      goto LABEL_61;
    }
    v42 = (unint64_t *)&v73->__shared_owners_;
    do
      v37 = __ldaxr(v42);
    while (__stlxr(v37 - 1, v42));
LABEL_49:
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
    goto LABEL_51;
  }
  if (*(_DWORD *)(v13 + 8) == a1[2]
    && *(_DWORD *)(v13 + 12) == a1[3]
    && *(_DWORD *)(v13 + 16) == a1[4]
    && *(_DWORD *)(v13 + 20) == a1[5]
    && *(_DWORD *)(v13 + 24) == a1[6])
  {
    Espresso::abstract_blob_container::get_context<Espresso::MPSBuffersEngine::context>(&v74, (uint64_t)a1);
    v38 = *(unsigned int (**)(int *))(*(_QWORD *)a1 + 32);
    if (*((_QWORD *)a1 + 31) == 16)
    {
      if (v38(a1) == 1)
      {
        v39 = "mps_buffers_copy_float16_to_float16_both_have_alignment";
      }
      else if ((*(unsigned int (**)(int *))(*(_QWORD *)a1 + 32))(a1))
      {
        if ((*(unsigned int (**)(int *))(*(_QWORD *)a1 + 32))(a1) == 2)
        {
          v39 = "mps_buffers_copy_S8_to_S8_both_have_alignment";
        }
        else
        {
          if ((*(unsigned int (**)(int *))(*(_QWORD *)a1 + 32))(a1) != 4)
            goto LABEL_92;
          v39 = "mps_buffers_copy_U8_to_U8_both_have_alignment";
        }
      }
      else
      {
        v39 = "mps_buffers_copy_float32_to_float32_both_have_alignment";
      }
    }
    else if (v38(a1) == 1)
    {
      v39 = "mps_buffers_copy_float16_to_float16_neither_has_alignment";
    }
    else
    {
      if ((*(unsigned int (**)(int *))(*(_QWORD *)a1 + 32))(a1))
        goto LABEL_92;
      v39 = "mps_buffers_copy_float32_to_float32_neither_has_alignment";
    }
    objc_msgSend(v74[20], "kernelForFunction:cacheString:withConstants:", v39, 0, 0);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    if (v54)
    {
      v55 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 32))(a1);
      Espresso::MPSBuffersEngine::populate_pb_params(buf, v13, v55);
      objc_msgSend(v7[18], "computeCommandEncoder");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v56, "setComputePipelineState:", v54);
      objc_msgSend(v56, "setBuffer:offset:atIndex:", *(_QWORD *)(v13 + 168), 0, 0);
      objc_msgSend(v56, "setBuffer:offset:atIndex:", *((_QWORD *)a1 + 21), 0, 1);
      objc_msgSend(v56, "setBytes:length:atIndex:", buf, 56, 2);
      v57 = a1[2];
      v59 = v57 - 1;
      v58 = v57 < 1;
      v60 = v57 + 6;
      if (!v58)
        v60 = v59;
      v61 = a1[5];
      v62 = a1[4] * a1[3];
      v63 = v62 - 1;
      v58 = v62 < 1;
      v64 = v62 + 6;
      if (!v58)
        v64 = v63;
      LODWORD(v65) = a1[6];
      v66 = (v64 >> 3) + 1;
      v67 = (v60 >> 3) + 1;
      if ((int)v65 <= 1)
        v65 = 1;
      else
        v65 = v65;
      v71[0] = v67;
      v71[1] = v66;
      v71[2] = v65 * v61;
      v69 = vdupq_n_s64(8uLL);
      v70 = 1;
      objc_msgSend(v56, "dispatchThreadgroups:threadsPerThreadgroup:", v71, &v69);
      objc_msgSend(v56, "endEncoding");

      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v74);
      goto LABEL_51;
    }
LABEL_92:
    Espresso::throw_exception_selector<Espresso::generic_error>("Could not find kernel for copy.");
  }
LABEL_60:
  v17 = 0;
LABEL_61:
  v47 = v77;
  if (v77)
  {
    v48 = (unint64_t *)&v77->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v79;
  if (v79)
  {
    v51 = (unint64_t *)&v79->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  return v17;
}

void sub_1916B5EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  uint64_t v17;
  va_list va;

  va_start(va, a15);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17 - 96);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::blob_container::__copy_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  id *v10;
  id *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t i;
  uint64_t v23;
  size_t BytesPerRow;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::runtime_error *exception;
  void *v35;
  std::__shared_weak_count *v36;
  id *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;

  if (!*(_QWORD *)a2
  {
    return 0;
  }
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  v39 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(const void **)(a1 + 72);
  if (!v9
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v11 = v10;
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  v37 = v10;
  v38 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (*(_QWORD *)a3)
  {
    if (v15)
    {
      v16 = v15;
      v17 = *(std::__shared_weak_count **)(a3 + 8);
      v35 = v15;
      v36 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = v11[18];
      v21 = *((unsigned int *)v16 + 45);
      if ((int)v21 >= 1)
      {
        for (i = 0; i != v21; ++i)
        {
          v23 = v16[27];
          if (i >= (v16[28] - v23) >> 3)
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Empty blob being copied");
          BytesPerRow = IOSurfaceGetBytesPerRow((IOSurfaceRef)objc_msgSend(*(id *)(v23 + 8 * i), "ioSurfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80), v35, v36, v37));
          objc_msgSend(*(id *)(v16[27] + 8 * i), "metalBufferWithDevice:multiBufferFrame:", v20, *(_QWORD *)(*(_QWORD *)a2 + 80));
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_ane_metal_buffer(a1, a2, v25, BytesPerRow, *((unsigned int *)v16 + 48), i, v21, 0);

        }
      }

      if (v17)
      {
        v26 = (unint64_t *)&v17->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v28 = 1;
      v12 = v38;
      if (!v38)
        goto LABEL_33;
      goto LABEL_29;
    }
  }
  v28 = 0;
  if (v12)
  {
LABEL_29:
    v29 = (unint64_t *)&v12->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_33:
  if (v39)
  {
    v31 = (unint64_t *)&v39->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return v28;
}

void sub_1916B6218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_ane_metal_buffer(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, int a6, unsigned int a7, int a8)
{
  id v15;
  void *v16;
  int v17;
  const char *v18;
  const void *v19;
  id *v20;
  id *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void **v25;
  void *v26;
  id *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  int32x2_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  unsigned int v43;
  void *v44;
  id v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::runtime_error *exception;
  id v58;
  unint64_t v59;
  int64x2_t v60;
  unint64_t v61;
  int64x2_t v62;
  _DWORD v63[6];
  _DWORD v64[3];
  int32x2_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  __int32 v70;
  id *v71;
  std::__shared_weak_count *v72;
  id *v73;
  std::__shared_weak_count *v74;
  void *v75[2];
  uint64_t v76;

  v15 = a3;
  v16 = v15;
  v75[0] = 0;
  v75[1] = 0;
  v76 = 0;
  if (*(_QWORD *)(a1 + 248) != 16)
    goto LABEL_53;
  v58 = v15;
  if (!a8)
  {
    if ((_DWORD)a5 == 1)
    {
      v17 = *(_DWORD *)(a1 + 192);
      if (v17 == 268435472)
      {
        v18 = "mps_buffers_src_gpu_h_unpacked_h_vec4";
      }
      else
      {
        if (v17 != 268435488)
          goto LABEL_56;
        v18 = "mps_buffers_src_gpu_f_unpacked_h_vec4";
      }
      goto LABEL_22;
    }
LABEL_55:
    Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("Unsupported interleave factor: %d", a5);
  }
  if ((_DWORD)a5 != 1)
    goto LABEL_55;
  v17 = *(_DWORD *)(a1 + 192);
  if (v17 > 268435487)
  {
    switch(v17)
    {
      case 268435488:
        v18 = "mps_buffers_dst_gpu_f_unpacked_h_vec4";
        break;
      case 536870920:
        v18 = "mps_buffers_dst_gpu_i8_unpacked_h_vec4";
        break;
      case 536870944:
        v18 = "mps_buffers_dst_gpu_i32_unpacked_h_vec4";
        break;
      default:
        goto LABEL_56;
    }
  }
  else
  {
    switch(v17)
    {
      case 8:
        v18 = "mps_buffers_dst_gpu_ui8_unpacked_h_vec4";
        break;
      case 32:
        v18 = "mps_buffers_dst_gpu_ui32_unpacked_h_vec4";
        break;
      case 268435472:
        v18 = "mps_buffers_dst_gpu_h_unpacked_h_vec4";
        break;
      default:
LABEL_56:
        Espresso::throw_exception_selector<Espresso::not_implemented_error,MPSDataType &>(v17);
    }
  }
LABEL_22:
  MEMORY[0x19401C808](v75, v18);
  v19 = *(const void **)(a1 + 72);
  if (!v19
  {
    v73 = 0;
    v74 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v21 = v20;
  v22 = *(std::__shared_weak_count **)(a1 + 80);
  v73 = v20;
  v74 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  if (v76 >= 0)
    v25 = v75;
  else
    v25 = (void **)v75[0];
  objc_msgSend(v20[20], "kernelForFunction:cacheString:withConstants:", v25, 0, 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = *(std::__shared_weak_count **)(a2 + 8);
  v71 = v27;
  v72 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  objc_msgSend(v27[18], "computeCommandEncoder");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setComputePipelineState:", v26);
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v33 = a4 >> 1;
  v34 = *(_DWORD *)(a1 + 12);
  v35 = *(int *)(a1 + 8);
  v64[0] = *(_DWORD *)(a1 + 8);
  v64[1] = v34;
  v36 = *(_DWORD *)(a1 + 16);
  v64[2] = v36;
  v37 = vmax_s32(*(int32x2_t *)(a1 + 20), (int32x2_t)0x100000001);
  v65 = v37;
  v66 = 1;
  if ((v32 - 1) > 0xC)
    v38 = 4;
  else
    v38 = qword_191AC0CA0[v32 - 1];
  v67 = (*(_QWORD *)(a1 + 248) + *(_QWORD *)(a1 + 248) * ((v38 * v35 - 1) / *(_QWORD *)(a1 + 248))) / v38;
  v68 = v34 * v67;
  v39 = v34 * v67 * v36;
  v69 = v39;
  v70 = v39 * v37.i32[0];
  v41 = v35 - 1;
  v40 = (int)v35 < 1;
  v42 = v35 + 2;
  if (!v40)
    v42 = v41;
  v63[0] = (v42 >> 2) + 1;
  v63[1] = v33 >> 2;
  v43 = v34 * v33;
  v63[2] = v43 >> 2;
  v63[3] = (v36 * v43) >> 2;
  v63[4] = (v39 * a6 * (v37.i32[1] * v37.i32[0] / a7)) >> 2;
  v63[5] = v37.i32[1] * v37.i32[0] * v34 * v36 / a7;
  v44 = (void *)objc_msgSend(v21[18], "newBufferWithBytes:length:options:", v63, 24, 0);
  if (a8)
  {
    objc_msgSend(v31, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 168), 0, 0);
    v45 = v58;
  }
  else
  {
    objc_msgSend(v31, "setBuffer:offset:atIndex:", v58, 0, 0);
    v45 = *(id *)(a1 + 168);
  }
  objc_msgSend(v31, "setBuffer:offset:atIndex:", v45, 0, 1);
  objc_msgSend(v31, "setBuffer:offset:atIndex:", v44, 0, 2);
  objc_msgSend(v31, "setBytes:length:atIndex:", v64, 40, 3);
  v46 = *(_DWORD *)(a1 + 20);
  v47 = *(_DWORD *)(a1 + 24);
  v49 = *(_DWORD *)(a1 + 12);
  v48 = *(_DWORD *)(a1 + 16);
  v50 = *(_DWORD *)(a1 + 240);
  v51 = objc_msgSend(v26, "maxTotalThreadsPerThreadgroup");
  v61 = ((unint64_t)(v49 * v48 * v50 * (v47 * v46 / (int)a7)) - 1) / v51 + 1;
  v62 = vdupq_n_s64(1uLL);
  v59 = v51;
  v60 = v62;
  objc_msgSend(v31, "dispatchThreadgroups:threadsPerThreadgroup:", &v61, &v59);
  objc_msgSend(v31, "endEncoding");

  v16 = v58;
  if (v28)
  {
    v52 = (unint64_t *)&v28->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v54 = v74;
  if (v74)
  {
    v55 = (unint64_t *)&v74->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }

  if (SHIBYTE(v76) < 0)
    operator delete(v75[0]);
LABEL_53:

}

void sub_1916B6780(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  va_list va;

  va_start(va, a17);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 128);
  if (*(char *)(v20 - 89) < 0)
    operator delete(*(void **)(v20 - 112));

  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,MPSDataType &>(int a1)
{
  Espresso::throw_exception_with_format<Espresso::not_implemented_error>("Unsupported dataType %d; fp16 ANE buffers must be written to fp16, fp32.",
    a1);
}

void *Espresso::abstract_blob_container::get_context<Espresso::MPSBuffersEngine::context>(_QWORD *a1, uint64_t a2)
{
  const void *v3;
  void *result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::runtime_error *exception;

  v3 = *(const void **)(a2 + 72);
  if (!v3
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v6 = *(_QWORD *)(a2 + 80);
  *a1 = result;
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_1916B68D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_DWORD *Espresso::MPSBuffersEngine::populate_pb_params(_DWORD *result, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(int *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 16);
  v6 = v5 * v3;
  result[1] = v4;
  result[2] = v5 * v3;
  result[6] = v3;
  result[7] = v5;
  v7 = *(_QWORD *)(a2 + 248);
  result[9] = *(_QWORD *)(a2 + 248);
  v9 = *(_DWORD *)(a2 + 20);
  v8 = *(_DWORD *)(a2 + 24);
  if (v9 <= 1)
    v9 = 1;
  if (v8 <= 1)
    v10 = 1;
  else
    v10 = *(_DWORD *)(a2 + 24);
  result[8] = v10 * v9;
  if ((a3 - 1) > 0xC)
    v11 = 4;
  else
    v11 = qword_191AC0CA0[a3 - 1];
  v12 = (v7 + v7 * ((v11 * v4 - 1) / v7)) / v11;
  *result = v12;
  v13 = v4 - 1;
  if ((int)v4 < 1)
    v13 = v4 + 2;
  result[10] = (v13 >> 2) + 1;
  result[11] = v12 >> 2;
  v14 = *(_DWORD *)(a2 + 20);
  v15 = v3 * v4;
  v16 = v6 * v4;
  result[3] = v15;
  result[4] = v16;
  result[5] = v14 * v16;
  if (v14 <= 1)
    v17 = 1;
  else
    v17 = v14;
  result[12] = v17;
  result[13] = v8;
  return result;
}

void Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_cvpb_iosurface(uint64_t a1, uint64_t a2, __IOSurface *a3, int a4)
{
  const void *v5;
  id *v9;
  id *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  size_t Width;
  void *v15;
  void *v16;
  int v17;
  const char *v18;
  void **v19;
  void *v20;
  id *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  unsigned int BytesPerRow;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int32x2_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::runtime_error *exception;
  _QWORD v51[3];
  _QWORD v52[3];
  _DWORD v53[3];
  int32x2_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  __int32 v59;
  _DWORD v60[4];
  uint64_t v61;
  id *v62;
  std::__shared_weak_count *v63;
  id *v64;
  std::__shared_weak_count *v65;
  void *v66[2];
  uint64_t v67;

  v66[0] = 0;
  v66[1] = 0;
  v67 = 0;
  v5 = *(const void **)(a1 + 72);
  if (!v5
  {
    v64 = 0;
    v65 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = v9;
  v11 = *(std::__shared_weak_count **)(a1 + 80);
  v64 = v9;
  v65 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  Width = IOSurfaceGetWidth(a3);
  objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 25, Width, IOSurfaceGetHeight(a3), 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setUsage:", 3);
  v16 = (void *)objc_msgSend(v10[18], "newTextureWithDescriptor:iosurface:plane:", v15, a3, 0);
  v17 = *(_DWORD *)(a1 + 192);
  if (a4)
  {
    if (v17 != 268435488)
    {
      if (v17 == 268435472)
      {
        v18 = "mps_buffers_dst_gpu_h_from_unpacked_h_tex_vec4";
        goto LABEL_15;
      }
LABEL_52:
      Espresso::throw_exception_selector<Espresso::not_implemented_error,MPSDataType &>(v17);
    }
    v18 = "mps_buffers_dst_gpu_f_from_unpacked_h_tex_vec4";
  }
  else if (v17 == 268435472)
  {
    v18 = "mps_buffers_src_gpu_h_to_unpacked_h_tex_vec4";
  }
  else
  {
    if (v17 != 268435488)
      goto LABEL_52;
    v18 = "mps_buffers_src_gpu_f_to_unpacked_h_tex_vec4";
  }
LABEL_15:
  MEMORY[0x19401C808](v66, v18);
  if (v67 >= 0)
    v19 = v66;
  else
    v19 = (void **)v66[0];
  objc_msgSend(v10[20], "kernelForFunction:cacheString:withConstants:", v19, 0, 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = *(std::__shared_weak_count **)(a2 + 8);
  v62 = v21;
  v63 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  objc_msgSend(v21[18], "computeCommandEncoder");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setComputePipelineState:", v20);
  BytesPerRow = IOSurfaceGetBytesPerRow(a3);
  v28 = *(_DWORD *)(a1 + 8);
  v27 = *(_DWORD *)(a1 + 12);
  v29 = v28 - 1;
  if (v28 < 1)
    v29 = v28 + 2;
  v30 = v29 >> 2;
  v60[0] = (v29 >> 2) + 1;
  v60[1] = BytesPerRow >> 2;
  v31 = v27 * BytesPerRow;
  v32 = (*(_DWORD *)(a1 + 16) * v31) >> 2;
  v60[2] = v31 >> 2;
  v60[3] = v32;
  v61 = 0x100000000;
  v33 = (void *)objc_msgSend(v10[18], "newBufferWithBytes:length:options:", v60, 24, 0);
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v35 = *(_DWORD *)(a1 + 12);
  v36 = *(int *)(a1 + 8);
  v53[0] = *(_DWORD *)(a1 + 8);
  v53[1] = v35;
  v37 = *(_DWORD *)(a1 + 16);
  v53[2] = v37;
  v38 = vmax_s32(*(int32x2_t *)(a1 + 20), (int32x2_t)0x100000001);
  v54 = v38;
  v55 = 1;
  if ((v34 - 1) > 0xC)
    v39 = 4;
  else
    v39 = qword_191AC0CA0[v34 - 1];
  v56 = (*(_QWORD *)(a1 + 248) + *(_QWORD *)(a1 + 248) * ((v39 * v36 - 1) / *(_QWORD *)(a1 + 248))) / v39;
  v57 = v35 * v56;
  v58 = v35 * v56 * v37;
  v59 = v58 * v38.i32[0];
  if (a4)
  {
    objc_msgSend(v25, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 168), 0, 0);
    objc_msgSend(v25, "setTexture:atIndex:", v16, 0);
  }
  else
  {
    objc_msgSend(v25, "setTexture:atIndex:", v16, 0);
    objc_msgSend(v25, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 168), 0, 0);
  }
  objc_msgSend(v25, "setBuffer:offset:atIndex:", v33, 0, 1);
  objc_msgSend(v25, "setBytes:length:atIndex:", v53, 40, 2);
  v40 = *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 20);
  if (v28 >= 125)
    v41 = 8;
  else
    v41 = 2;
  v42 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 12);
  if (v42 >= 32)
    v43 = 8;
  else
    v43 = 2;
  if (v40 < 32)
    v44 = 1;
  else
    v44 = 8;
  v52[0] = v30 / (int)v41 + 1;
  v52[1] = (v42 - 1) / (int)v43 + 1;
  v52[2] = (v40 - 1) / (int)v44 + 1;
  v51[0] = v41;
  v51[1] = v43;
  v51[2] = v44;
  objc_msgSend(v25, "dispatchThreadgroups:threadsPerThreadgroup:", v52, v51);
  objc_msgSend(v25, "endEncoding");

  if (v22)
  {
    v45 = (unint64_t *)&v22->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  v47 = v65;
  if (v65)
  {
    v48 = (unint64_t *)&v65->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (SHIBYTE(v67) < 0)
    operator delete(v66[0]);
}

void sub_1916B6E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  va_list va;
  uint64_t v23;
  va_list va1;

  va_start(va1, a15);
  va_start(va, a15);
  v21 = va_arg(va1, _QWORD);
  v23 = va_arg(va1, _QWORD);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (*(char *)(v19 - 89) < 0)
    operator delete(*(void **)(v19 - 112));
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_host(uint64_t a1, void *lpsrc, std::__shared_weak_count *a3, uint64_t *a4, int a5)
{
  int64x2_t *v9;
  int64x2_t *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const void *v13;
  _BYTE *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  const char *v20;
  size_t v21;
  std::string *v22;
  const void *v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type v29;
  char v30;
  void *v31;
  size_t v32;
  std::string *v33;
  const void *v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  char v39;
  void **v40;
  std::string::size_type v41;
  std::string *v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *size;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  id v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  void *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  BOOL v87;
  int v88;
  int v89;
  uint64_t v90;
  int32x2_t v91;
  int v92;
  int v93;
  uint64_t v94;
  int64x2_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::runtime_error *exception;
  std::runtime_error *v103;
  std::string *v104;
  uint64_t v105;
  int v106;
  int v107;
  unint64_t v108;
  int64x2_t v109;
  _QWORD v110[3];
  void *v111[2];
  unsigned __int8 v112;
  std::string v113;
  int v114;
  int v115;
  int v116;
  int v117;
  void *__p;
  void *v119;
  char v120[20];
  int v121;
  void *v122;
  size_t v123;
  unsigned __int8 v124;
  std::string v125;
  std::string::value_type *v126;
  std::string::size_type v127;
  unsigned __int8 v128;
  _BYTE *v129;
  std::__shared_weak_count *v130;
  int64x2_t *v131;
  std::__shared_weak_count *v132;
  std::string v133;
  _QWORD v134[5];

  v134[2] = *MEMORY[0x1E0C80C00];
  if (!lpsrc
  {
    v131 = 0;
    v132 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_batch_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D73858;
  }
  v10 = v9;
  v131 = v9;
  v132 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = *(const void **)(a1 + 72);
  if (!v13
  {
    v129 = 0;
    v130 = 0;
    v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v103, "Espresso: wrong_context_type");
    v103->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v15 = (std::string::size_type)v14;
  v16 = *(_QWORD *)(a1 + 80);
  v129 = v14;
  v130 = (std::__shared_weak_count *)v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  std::string::basic_string[abi:ne180100]<0>(&v126, "float32");
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v20 = "float16";
  switch(v19)
  {
    case 0:
      goto LABEL_18;
    case 1:
      goto LABEL_17;
    case 2:
      v20 = "s8";
      goto LABEL_17;
    case 3:
      v20 = "i32";
      goto LABEL_17;
    case 4:
      v20 = "u8";
      goto LABEL_17;
    case 8:
      v20 = "i64";
      goto LABEL_17;
    case 10:
      v20 = "u32";
LABEL_17:
      MEMORY[0x19401C808](&v126, v20);
LABEL_18:
      memset(&v125, 0, sizeof(v125));
      std::string::basic_string[abi:ne180100]<0>(&v122, "copy_");
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
        MEMORY[0x19401C808](&v122, "convert_");
      Espresso::abstract_blob_container::shape((char *)&v113, a1);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v120, (const Espresso::layer_shape *)&v113, 0);
      if (__p)
      {
        v119 = __p;
        operator delete(__p);
      }
      HIDWORD(v105) = v121;
      std::string::basic_string[abi:ne180100]<0>(v111, "");
      LODWORD(v105) = a5;
      if (a5)
      {
        if ((v124 & 0x80u) == 0)
          v21 = v124;
        else
          v21 = v123;
        std::string::basic_string[abi:ne180100]((uint64_t)&v133, v21 + 8);
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &v133;
        else
          v22 = (std::string *)v133.__r_.__value_.__r.__words[0];
        if (v21)
        {
          if ((v124 & 0x80u) == 0)
            v23 = &v122;
          else
            v23 = v122;
          memmove(v22, v23, v21);
        }
        strcpy((char *)v22 + v21, "aligned_");
        if ((v128 & 0x80u) == 0)
          v24 = (const std::string::value_type *)&v126;
        else
          v24 = v126;
        if ((v128 & 0x80u) == 0)
          v25 = v128;
        else
          v25 = v127;
        v26 = std::string::append(&v133, v24, v25);
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v113.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        v28 = std::string::append(&v113, "_to_packed_float32");
        v29 = v28->__r_.__value_.__r.__words[0];
        v134[0] = v28->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v134 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
        v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v125.__r_.__value_.__l.__data_);
        v125.__r_.__value_.__r.__words[0] = v29;
        v125.__r_.__value_.__l.__size_ = v134[0];
        *(std::string::size_type *)((char *)&v125.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v134 + 7);
        *((_BYTE *)&v125.__r_.__value_.__s + 23) = v30;
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v113.__r_.__value_.__l.__data_);
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        {
          v31 = (void *)v133.__r_.__value_.__r.__words[0];
LABEL_67:
          operator delete(v31);
        }
      }
      else
      {
        if ((v124 & 0x80u) == 0)
          v32 = v124;
        else
          v32 = v123;
        std::string::basic_string[abi:ne180100]((uint64_t)&v113, v32 + 26);
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &v113;
        else
          v33 = (std::string *)v113.__r_.__value_.__r.__words[0];
        if (v32)
        {
          if ((v124 & 0x80u) == 0)
            v34 = &v122;
          else
            v34 = v122;
          memmove(v33, v34, v32);
        }
        strcpy((char *)v33 + v32, "packed_float32_to_aligned_");
        if ((v128 & 0x80u) == 0)
          v35 = (const std::string::value_type *)&v126;
        else
          v35 = v126;
        if ((v128 & 0x80u) == 0)
          v36 = v128;
        else
          v36 = v127;
        v37 = std::string::append(&v113, v35, v36);
        v38 = v37->__r_.__value_.__r.__words[0];
        v133.__r_.__value_.__r.__words[0] = v37->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7);
        v39 = HIBYTE(v37->__r_.__value_.__r.__words[2]);
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v125.__r_.__value_.__l.__data_);
        v125.__r_.__value_.__r.__words[0] = v38;
        v125.__r_.__value_.__l.__size_ = v133.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v125.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v125.__r_.__value_.__s + 23) = v39;
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        {
          v31 = (void *)v113.__r_.__value_.__r.__words[0];
          goto LABEL_67;
        }
      }
      if (SHIDWORD(v105) >= 4 && *(_BYTE *)(v15 + 241))
      {
        MEMORY[0x19401C808](v111, "_transposed");
        if ((v112 & 0x80u) == 0)
          v40 = v111;
        else
          v40 = (void **)v111[0];
        if ((v112 & 0x80u) == 0)
          v41 = v112;
        else
          v41 = (std::string::size_type)v111[1];
        std::string::append(&v125, (const std::string::value_type *)v40, v41);
      }
      if (!*(_BYTE *)(v15 + 241) && *(_QWORD *)(a1 + 248) <= 0xFuLL)
        std::string::append(&v125, "_scalar");
      if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v125;
      else
        v42 = (std::string *)v125.__r_.__value_.__r.__words[0];
      objc_msgSend(*(id *)(v15 + 160), "kernelForFunction:cacheString:withConstants:", v42, 0, 0, v105);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v43)
      {
        v104 = &v125;
        if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v104 = (std::string *)v125.__r_.__value_.__r.__words[0];
        v113.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Kernel not found: %s", &v113);
      }
      v113.__r_.__value_.__r.__words[0] = v15;
      v113.__r_.__value_.__l.__size_ = v16;
      if (v16)
      {
        v44 = (unint64_t *)(v16 + 8);
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      v133.__r_.__value_.__l.__size_ = (std::string::size_type)a3;
      if (a3)
      {
        v46 = (unint64_t *)&a3->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>> const>((uint64_t)&v113, v10, a4);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      if (a3)
      {
        v49 = (unint64_t *)&a3->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
          std::__shared_weak_count::__release_weak(a3);
        }
      }
      size = (std::__shared_weak_count *)v113.__r_.__value_.__l.__size_;
      if (v113.__r_.__value_.__l.__size_)
      {
        v52 = (unint64_t *)(v113.__r_.__value_.__l.__size_ + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v54 = (void *)v131[9].i64[1];
      if (v54)
      {
        v55 = v54;
      }
      else
      {
        objc_msgSend((id)v131[9].i64[0], "computeCommandEncoder");
        v55 = (id)objc_claimAutoreleasedReturnValue();

      }
      objc_msgSend(v55, "setComputePipelineState:", v43);
      v56 = *(int *)(a1 + 8);
      v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) - 1;
      if (v57 > 0xC)
        v58 = 4;
      else
        v58 = qword_191AC0CA0[v57];
      v59 = *(_QWORD *)(a1 + 248);
      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) - 1;
      if (v60 > 0xC)
        v61 = 4;
      else
        v61 = qword_191AC0CA0[v60];
      *(_DWORD *)(a1 + 240) = (v59 + v59 * ((v58 * v56 - 1) / v59)) / v61;
      v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      v63 = *(_DWORD *)(a1 + 12);
      v64 = *(int *)(a1 + 8);
      v66 = *(_DWORD *)(a1 + 16);
      v65 = *(_DWORD *)(a1 + 20);
      v67 = v66 * v63;
      HIDWORD(v113.__r_.__value_.__r.__words[0]) = *(_DWORD *)(a1 + 8);
      LODWORD(v113.__r_.__value_.__r.__words[1]) = v66 * v63;
      v114 = v63;
      v115 = v66;
      v68 = *(_QWORD *)(a1 + 248);
      v69 = v68;
      if (v65 <= 1)
        v70 = 1;
      else
        v70 = v65;
      v71 = *(_DWORD *)(a1 + 24);
      if (v71 <= 1)
        v72 = 1;
      else
        v72 = *(_DWORD *)(a1 + 24);
      v116 = v72 * v70;
      v117 = v68;
      if ((v62 - 1) > 0xC)
        v73 = 4;
      else
        v73 = qword_191AC0CA0[v62 - 1];
      v74 = (v69 + v69 * ((v73 * v64 - 1) / v69)) / v73;
      v75 = v64 - 1;
      if ((int)v64 < 1)
        v75 = v64 + 2;
      LODWORD(__p) = (v75 >> 2) + 1;
      HIDWORD(__p) = v74 >> 2;
      LODWORD(v113.__r_.__value_.__l.__data_) = v74;
      HIDWORD(v113.__r_.__value_.__r.__words[1]) = v63 * v64;
      LODWORD(v113.__r_.__value_.__r.__words[2]) = v67 * v64;
      HIDWORD(v113.__r_.__value_.__r.__words[2]) = v65 * v67 * v64;
      v119 = (void *)__PAIR64__(v71, v70);
      if (v106)
      {
        objc_msgSend(v55, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 168), 0, 0);
        v76 = v48;
      }
      else
      {
        objc_msgSend(v55, "setBuffer:offset:atIndex:", v48, 0, 0);
        v76 = *(void **)(a1 + 168);
      }
      objc_msgSend(v55, "setBuffer:offset:atIndex:", v76, 0, 1);
      objc_msgSend(v55, "setBytes:length:atIndex:", &v113, 56, 2);
      v77 = *(_DWORD *)(a1 + 20);
      v78 = *(_DWORD *)(a1 + 24);
      v80 = *(_DWORD *)(a1 + 12);
      v79 = *(_DWORD *)(a1 + 16);
      v81 = *(_DWORD *)(a1 + 240);
      v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      v83 = (v78 * v77 * v79 * v80 * v81);
      if ((v82 > 0xC || ((1 << v82) & 0x1900) == 0) && *(_QWORD *)(a1 + 248) == 16)
        v83 = ((v83 - 1) >> 2) + 1;
      v84 = objc_msgSend(v43, "maxTotalThreadsPerThreadgroup");
      v85 = (v83 - 1) / v84 + 1;
      if (v107 >= 4 && v129[241])
      {
        v85 = ((*(_DWORD *)(a1 + 240) - 1) >> 3) + 1;
        v86 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 12);
        v88 = v86 - 1;
        v87 = v86 < 1;
        v89 = v86 + 6;
        if (!v87)
          v89 = v88;
        v90 = (v89 >> 3) + 1;
        v91 = vmax_s32(*(int32x2_t *)(a1 + 20), (int32x2_t)0x100000001);
        v92 = vmul_lane_s32(v91, v91, 1).u32[0];
        v93 = v92 + 2;
        if (v92 >= 1)
          v93 = v92 - 1;
        v94 = (v93 >> 2) + 1;
        v95 = (int64x2_t)xmmword_191A935C0;
        v84 = 8;
      }
      else
      {
        v94 = 1;
        v95 = vdupq_n_s64(1uLL);
        v90 = 1;
      }
      v110[0] = v85;
      v110[1] = v90;
      v110[2] = v94;
      v108 = v84;
      v109 = v95;
      objc_msgSend(v55, "dispatchThreadgroups:threadsPerThreadgroup:", v110, &v108);
      if (!v54)
        objc_msgSend(v55, "endEncoding");

      if ((char)v112 < 0)
        operator delete(v111[0]);
      if ((char)v124 < 0)
        operator delete(v122);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      if ((char)v128 < 0)
        operator delete(v126);
      v96 = v130;
      if (v130)
      {
        v97 = (unint64_t *)&v130->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      v99 = v132;
      if (v132)
      {
        v100 = (unint64_t *)&v132->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      return;
    default:
      Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported compute path in MPS Buffers engine.");
  }
}

void sub_1916B7910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  void *v48;
  uint64_t v49;

  if (a21 < 0)
    operator delete(__p);
  if (a41 < 0)
    operator delete(a36);
  if (a47 < 0)
    operator delete(a42);
  if (*(char *)(v49 - 177) < 0)
    operator delete(*(void **)(v49 - 200));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v49 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v49 - 160);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::blob_container::setup_shape(Espresso::MPSBuffersEngine::blob_container *this, const Espresso::layer_shape *a2, const Espresso::layer_shape *a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::runtime_error *exception;
  char v31[40];
  void *__p;
  void *v33;
  char v34[20];
  int v35;
  _BYTE *v36;
  std::__shared_weak_count *v37;

  v4 = (const void *)*((_QWORD *)a2 + 9);
  if (!v4
  {
    v36 = 0;
    v37 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)a2 + 10);
  v36 = v7;
  v37 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[240])
  {
    *((_QWORD *)a2 + 31) = 16;
  }
  else
  {
    v11 = *((_DWORD *)a2 + 40);
    v12 = 2;
    if (!v11)
      v12 = 4;
    *((_QWORD *)a2 + 31) = v12;
    if ((v11 - 2) <= 3)
      Espresso::throw_exception_selector<Espresso::generic_error>("Training supports fp16 and fp32 compute paths.");
  }
  Espresso::abstract_blob_container::set_shape(a2, a3);
  v14 = *((_DWORD *)a2 + 2);
  v13 = *((_DWORD *)a2 + 3);
  v15 = *((_DWORD *)a2 + 4);
  v16 = *((_DWORD *)a2 + 5);
  if (*((int *)a2 + 6) <= 1)
    v17 = 1;
  else
    v17 = *((_DWORD *)a2 + 6);
  Espresso::abstract_blob_container::shape(v31, (uint64_t)a2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v34, (const Espresso::layer_shape *)v31, 0);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  if (v35 == 3)
  {
    v14 = *((_DWORD *)a2 + 2);
    v13 = *((_DWORD *)a2 + 4) * *((_DWORD *)a2 + 3);
    if (*((int *)a2 + 6) <= 1)
      v18 = 1;
    else
      v18 = *((_DWORD *)a2 + 6);
    v19 = v18 * *((_DWORD *)a2 + 5);
  }
  else
  {
    v19 = v16 * v15 * v17;
  }
  v20 = (*(uint64_t (**)(const Espresso::layer_shape *))(*(_QWORD *)a2 + 32))(a2) - 1;
  if (v20 > 0xC)
    v21 = 4;
  else
    v21 = qword_191AC0CA0[v20];
  v22 = *((_QWORD *)a2 + 31);
  v23 = (*(uint64_t (**)(const Espresso::layer_shape *))(*(_QWORD *)a2 + 32))(a2);
  v24 = v22 + v22 * ((v21 * v14 - 1) / v22);
  if ((v23 - 1) > 0xC)
    v25 = 4;
  else
    v25 = qword_191AC0CA0[v23 - 1];
  *((_DWORD *)a2 + 60) = v24 / v25;
  v26 = v24 * v13;
  *((_QWORD *)this + 1) = v26;
  *((_QWORD *)this + 2) = v26 * v19;
  *(_QWORD *)this = v24;
  v27 = v37;
  if (v37)
  {
    v28 = (unint64_t *)&v37->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_1916B7CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16 - 80);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::blob_container::ndarray_strides(Espresso::MPSBuffersEngine::blob_container *this, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16[40];
  void *__p;
  void *v18;
  _DWORD v19[5];
  signed int v20;

  Espresso::abstract_blob_container::shape(v16, (uint64_t)a2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v19, (const Espresso::layer_shape *)v16, 0);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  v4 = v20;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  if ((_DWORD)v4)
  {
    if ((v4 & 0x80000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4);
    *(_QWORD *)this = v5;
    *((_QWORD *)this + 2) = &v5[v6];
    bzero(v5, 8 * v4);
    *((_QWORD *)this + 1) = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  result = (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  if ((result - 1) > 0xC)
    v8 = 4;
  else
    v8 = qword_191AC0CA0[(result - 1)];
  *v5 = v8;
  v9 = v20;
  if (v20 >= 2)
  {
    v10 = 0;
    v11 = v20;
    v12 = -1;
    do
    {
      if (v10)
      {
        v5[v10 + 1] = v5[v10] * (int)v19[v11 + v12];
      }
      else
      {
        v13 = (int)v19[v11 - 1];
        result = (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
        if ((result - 1) > 0xC)
          v14 = 4;
        else
          v14 = qword_191AC0CA0[(result - 1)];
        v5[1] = a2[31] + a2[31] * ((unint64_t)(v14 * v13 - 1) / a2[31]);
        v9 = v20;
      }
      v11 = v9;
      v15 = v10 + 2;
      ++v10;
      --v12;
    }
    while (v15 < v9);
  }
  return result;
}

void sub_1916B7F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  void *v17;

  if (v17)
  {
    *(_QWORD *)(v16 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::run_pass_on_network<Espresso::pass_transform_quantize_kernel>(uint64_t a1)
{
  Espresso *v2;
  _QWORD *v3;
  const char *v4;
  NSObject *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (Espresso *)operator new(0x30uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E2DBE180;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &off_1E2D9B1F8;
  v3 = (_QWORD *)((char *)v2 + 24);
  v15 = (_QWORD *)((char *)v2 + 24);
  v16 = (std::__shared_weak_count *)v2;
  Espresso::espresso_os_log_subsystem(v2, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v18 = (unint64_t)"N8Espresso30pass_transform_quantize_kernelE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, _QWORD *, uint64_t))(*v3 + 24))(buf, v3, a1);
  v14 = 0;
  (*(void (**)(_QWORD *, char *))(*v3 + 16))(v3, &v14);
  if (v14)
  {
    if (buf[0])
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (uint64_t *)((char *)&v18 + 4));
    else
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso34analysis_transform_quantize_kernelE");
  }
  v6 = buf[0];
  v7 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v6 != 0;
}

void sub_1916B8140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::pass_transform_quantize_kernel::~pass_transform_quantize_kernel(Espresso::pass_transform_quantize_kernel *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::pass_transform_quantize_kernel::run_on_network@<X0>(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  Espresso::net *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  std::string::size_type v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  Espresso::net *v17;
  Espresso::net *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t *v25;
  unint64_t *v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 *v30;
  __int128 v31;
  _QWORD *v32;
  BOOL v33;
  _QWORD *v41;
  int v42;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unint64_t *v52;
  unint64_t v53;
  const void *v55;
  void *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  int v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  unint64_t *v68;
  const void *v69;
  void *v70;
  void *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  std::string::size_type v90;
  void *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t (***v97)(_QWORD);
  int v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  __int128 v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  std::string::size_type v121;
  uint64_t v122;
  __int128 v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  __int128 *v128;
  __int128 v129;
  __int128 v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  int v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  void *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  _DWORD *v144;
  int v145;
  char *v146;
  __int128 v147;
  unint64_t *v148;
  unint64_t v149;
  void **v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  int v166;
  void *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  float v174;
  char *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  int v180;
  BOOL v181;
  BOOL v183;
  uint64_t *v186;
  uint64_t v187;
  void *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  int v193;
  unint64_t *v194;
  unint64_t v195;
  void *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  __int128 v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  std::string::size_type v207;
  uint64_t v208;
  __int128 v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  void *v214;
  void *v215;
  uint64_t **v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  std::string v221;
  __int128 v222;
  void *v223;
  _BYTE *v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  void *v229[5];
  void *v230[5];
  _OWORD v231[2];
  int v232;
  __int128 v233;
  uint64_t v234;
  int v235;
  _BYTE v236[40];
  __int128 __p;
  __int128 v238;
  void *v239;
  std::string::size_type size;
  unint64_t v241;
  std::__shared_weak_count *v242;
  int v243;
  __int128 v244;
  uint64_t v245;
  std::string v246;
  __int128 v247;
  __int128 v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  void **v253;
  std::__shared_weak_count *v254;
  std::string __str;
  __int128 v256;
  uint64_t v257;
  _QWORD v258[3];
  uint64_t v259[3];

  v259[0] = *MEMORY[0x1E0C80C00];
  memset(v231, 0, sizeof(v231));
  v232 = 1065353216;
  memset(v236, 0, 32);
  *(_DWORD *)&v236[32] = 1065353216;
  Espresso::net::get_consumers_of_blobs(a1, v236, (uint64_t)v230);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v236);
  Espresso::net::get_producers_of_blobs(a1, (uint64_t)v229);
  v226 = 0;
  v227 = 0;
  v228 = 0;
  v5 = (Espresso::net *)*((_QWORD *)a1 + 29);
  if (v5 != (Espresso::net *)((char *)a1 + 240))
  {
    do
    {
      if (*((char *)v5 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v236, *((const std::string::value_type **)v5 + 4), *((_QWORD *)v5 + 5));
      }
      else
      {
        *(_OWORD *)v236 = *((_OWORD *)v5 + 2);
        *(_QWORD *)&v236[16] = *((_QWORD *)v5 + 6);
      }
      *(_QWORD *)&v236[28] = 0x100000000;
      *(_DWORD *)&v236[24] = 1065353216;
      *(_DWORD *)&v236[36] = 1;
      *(_QWORD *)&v238 = 0;
      __p = 0uLL;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, 0, 0, 0);
      v6 = v227;
      if (v227 >= v228)
      {
        v8 = (uint64_t)(v227 - v226) >> 6;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 58)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v10 = v228 - v226;
        if ((uint64_t)(v228 - v226) >> 5 > v9)
          v9 = v10 >> 5;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0)
          v11 = 0x3FFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        *((_QWORD *)&v256 + 1) = &v228;
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v11);
        v13 = (std::string::size_type)&v12[64 * v8];
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
        __str.__r_.__value_.__l.__size_ = v13;
        *(_QWORD *)&v256 = &v12[64 * v14];
        v15 = *(_OWORD *)v236;
        *(_QWORD *)(v13 + 16) = *(_QWORD *)&v236[16];
        *(_OWORD *)v13 = v15;
        memset(v236, 0, 24);
        *(_OWORD *)(v13 + 24) = *(_OWORD *)&v236[24];
        *(_QWORD *)(v13 + 48) = 0;
        *(_QWORD *)(v13 + 56) = 0;
        *(_QWORD *)(v13 + 40) = 0;
        *(_OWORD *)(v13 + 40) = __p;
        *(_QWORD *)(v13 + 56) = v238;
        __p = 0uLL;
        *(_QWORD *)&v238 = 0;
        __str.__r_.__value_.__r.__words[2] = v13 + 64;
        std::vector<std::pair<std::string,Espresso::blob_numerical_properties>>::__swap_out_circular_buffer(&v226, &__str);
        v16 = v227;
        std::__split_buffer<std::pair<std::string,Espresso::blob_numerical_properties>>::~__split_buffer((uint64_t)&__str);
        v227 = v16;
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
      }
      else
      {
        v7 = *(_OWORD *)v236;
        *(_QWORD *)(v227 + 16) = *(_QWORD *)&v236[16];
        *(_OWORD *)v6 = v7;
        memset(v236, 0, 24);
        *(_OWORD *)(v6 + 24) = *(_OWORD *)&v236[24];
        *(_QWORD *)(v6 + 48) = 0;
        *(_QWORD *)(v6 + 56) = 0;
        *(_QWORD *)(v6 + 40) = 0;
        *(_OWORD *)(v6 + 40) = __p;
        *(_QWORD *)(v6 + 56) = v238;
        __p = 0uLL;
        *(_QWORD *)&v238 = 0;
        v227 = v6 + 64;
      }
      if ((v236[23] & 0x80000000) != 0)
        operator delete(*(void **)v236);
      v17 = (Espresso::net *)*((_QWORD *)v5 + 1);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = *(Espresso::net **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (Espresso::net *)*((_QWORD *)v5 + 2);
          v33 = *(_QWORD *)v18 == (_QWORD)v5;
          v5 = v18;
        }
        while (!v33);
      }
      v5 = v18;
    }
    while (v18 != (Espresso::net *)((char *)a1 + 240));
    v19 = v227;
    if (v226 != v227)
    {
      v217 = (uint64_t **)((char *)a1 + 352);
      v218 = (char *)a1 + 96;
      while (1)
      {
        if (*(char *)(v19 - 41) < 0)
        {
          std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)(v19 - 64), *(_QWORD *)(v19 - 56));
        }
        else
        {
          v20 = *(_OWORD *)(v19 - 64);
          v221.__r_.__value_.__r.__words[2] = *(_QWORD *)(v19 - 48);
          *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v20;
        }
        v222 = *(_OWORD *)(v19 - 40);
        v224 = 0;
        v225 = 0;
        v223 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v223, *(const void **)(v19 - 24), *(_QWORD *)(v19 - 16), (uint64_t)(*(_QWORD *)(v19 - 16) - *(_QWORD *)(v19 - 24)) >> 2);
        v21 = v227 - 64;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>(v227 - 64);
        v227 = v21;
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v231, (uint64_t)&v221))
        {
          goto LABEL_376;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v221;
        v22 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v217, &v221, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
        *(_OWORD *)(v22 + 56) = v222;
        if (v22 + 56 != (char *)&v222)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v22 + 72, (char *)v223, (uint64_t)v224, (v224 - (_BYTE *)v223) >> 2);
        if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v230, (unsigned __int8 *)&v221))
        {
          break;
        }
LABEL_375:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v231, (uint64_t)&v221, (uint64_t)&v221);
LABEL_376:
        if (v223)
        {
          v224 = v223;
          operator delete(v223);
        }
        if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v221.__r_.__value_.__l.__data_);
        v19 = v227;
        if (v226 == v227)
          goto LABEL_381;
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v221;
      v23 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v230, (unsigned __int8 *)&v221, (__int128 **)&__str);
      if (*((_QWORD *)v23 + 6) - *((_QWORD *)v23 + 5) >= 9uLL)
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v221;
        v24 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v230, (unsigned __int8 *)&v221, (__int128 **)&__str);
        v26 = (unint64_t *)*((_QWORD *)v24 + 5);
        v25 = (unint64_t *)*((_QWORD *)v24 + 6);
        while (1)
        {
          if (v26 == v25)
            goto LABEL_375;
          v252 = 0;
          v252 = *v26;
          v250 = 0;
          v251 = 0;
          v249 = 0;
          *(_QWORD *)&v248 = 1065353216;
          *((_QWORD *)&v248 + 1) = DWORD2(v222) | 0x100000000;
          v27 = *(_OWORD *)(*((_QWORD *)a1 + 4) + 16 * v252);
          v247 = v27;
          v219 = v27;
          if (*((_QWORD *)&v27 + 1))
          {
            v28 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v252;
          v30 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v218, &v252, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str)[3];
          if (*((char *)v30 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
          }
          else
          {
            v31 = *v30;
            v246.__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
            *(_OWORD *)&v246.__r_.__value_.__l.__data_ = v31;
          }
          v32 = (_QWORD *)(v219 + 40);
          if (*(char *)(v219 + 63) < 0)
            break;
          switch(*(_BYTE *)(v219 + 63))
          {
            case 0xF:
              v33 = *v32 == 0x715F636974617473 && *(_QWORD *)(v219 + 47) == 0x657A69746E617571;
              if (v33)
                goto LABEL_82;
              break;
            case 0x10:
              goto LABEL_95;
            case 0x11:
              if (*v32 == 0x645F636974617473
                && *(_QWORD *)(v219 + 48) == 0x7A69746E61757165
                && *(_BYTE *)(v219 + 56) == 101)
              {
                goto LABEL_82;
              }
              break;
            case 0x12:
              if (*v32 == 0x5F63696D616E7964
                && *(_QWORD *)(v219 + 48) == 0x69746E6175716564
                && *(_WORD *)(v219 + 56) == 25978)
              {
                goto LABEL_104;
              }
              break;
            default:
              break;
          }
LABEL_209:
          std::pair<std::string,Espresso::blob_numerical_properties>::pair[abi:ne180100]<std::string&,Espresso::blob_numerical_properties&,0>((std::string *)v236, (__int128 *)&v246, &v248);
          v114 = v227;
          if (v227 >= v228)
          {
            v116 = (uint64_t)(v227 - v226) >> 6;
            v117 = v116 + 1;
            if ((unint64_t)(v116 + 1) >> 58)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v118 = v228 - v226;
            if ((uint64_t)(v228 - v226) >> 5 > v117)
              v117 = v118 >> 5;
            if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFC0)
              v119 = 0x3FFFFFFFFFFFFFFLL;
            else
              v119 = v117;
            *((_QWORD *)&v256 + 1) = &v228;
            v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v119);
            v121 = (std::string::size_type)&v120[64 * v116];
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v120;
            __str.__r_.__value_.__l.__size_ = v121;
            *(_QWORD *)&v256 = &v120[64 * v122];
            v123 = *(_OWORD *)v236;
            *(_QWORD *)(v121 + 16) = *(_QWORD *)&v236[16];
            *(_OWORD *)v121 = v123;
            memset(v236, 0, 24);
            *(_OWORD *)(v121 + 24) = *(_OWORD *)&v236[24];
            *(_QWORD *)(v121 + 48) = 0;
            *(_QWORD *)(v121 + 56) = 0;
            *(_QWORD *)(v121 + 40) = 0;
            *(_OWORD *)(v121 + 40) = __p;
            *(_QWORD *)(v121 + 56) = v238;
            __p = 0uLL;
            *(_QWORD *)&v238 = 0;
            __str.__r_.__value_.__r.__words[2] = v121 + 64;
            std::vector<std::pair<std::string,Espresso::blob_numerical_properties>>::__swap_out_circular_buffer(&v226, &__str);
            v124 = v227;
            std::__split_buffer<std::pair<std::string,Espresso::blob_numerical_properties>>::~__split_buffer((uint64_t)&__str);
            v227 = v124;
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
          }
          else
          {
            v115 = *(_OWORD *)v236;
            *(_QWORD *)(v227 + 16) = *(_QWORD *)&v236[16];
            *(_OWORD *)v114 = v115;
            memset(v236, 0, 24);
            *(_OWORD *)(v114 + 24) = *(_OWORD *)&v236[24];
            *(_QWORD *)(v114 + 48) = 0;
            *(_QWORD *)(v114 + 56) = 0;
            *(_QWORD *)(v114 + 40) = 0;
            *(_OWORD *)(v114 + 40) = __p;
            *(_QWORD *)(v114 + 56) = v238;
            __p = 0uLL;
            *(_QWORD *)&v238 = 0;
            v227 = v114 + 64;
          }
          if ((v236[23] & 0x80000000) != 0)
            operator delete(*(void **)v236);
          if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v246.__r_.__value_.__l.__data_);
          v125 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
          if (*((_QWORD *)&v247 + 1))
          {
            v126 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
          if (v249)
            operator delete(v249);
          ++v26;
        }
        switch(*(_QWORD *)(v219 + 48))
        {
          case 0xFLL:
            if (*(_QWORD *)*v32 == 0x715F636974617473 && *(_QWORD *)(*v32 + 7) == 0x657A69746E617571)
              goto LABEL_82;
            goto LABEL_209;
          case 0x10:
            v32 = (_QWORD *)*v32;
LABEL_95:
            if (*v32 == 0x5F63696D616E7964 && v32[1] == 0x657A69746E617571)
            {
              if (*v32 != 0x5F63696D616E7964 || v32[1] != 0x657A69746E617571)
                goto LABEL_104;
              v48 = *(std::__shared_weak_count **)(v219 + 72);
              *(_QWORD *)v236 = v65;
              *(_QWORD *)&v236[8] = v48;
              if (v48)
              {
                p_shared_owners = (unint64_t *)&v48->__shared_owners_;
                do
                  v67 = __ldxr(p_shared_owners);
                while (__stxr(v67 + 1, p_shared_owners));
              }
              v51 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v65 + 320))(v65);
              if (v48)
              {
                v68 = (unint64_t *)&v48->__shared_owners_;
                do
                  v53 = __ldaxr(v68);
                while (__stlxr(v53 - 1, v68));
                goto LABEL_110;
              }
              goto LABEL_137;
            }
            goto LABEL_209;
          case 0x11:
            if (*(_QWORD *)*v32 != 0x645F636974617473
              || *(_QWORD *)(*v32 + 8) != 0x7A69746E61757165
              || *(_BYTE *)(*v32 + 16) != 101)
            {
              goto LABEL_209;
            }
LABEL_82:
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v252;
            v41 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 56, &v252, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
            v245 = 0;
            v244 = 0uLL;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v244, v41[3], v41[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41[4] - v41[3]) >> 3));
            v42 = *(char *)(v219 + 63);
            if (v42 < 0)
            {
              if (*(_QWORD *)(v219 + 48) != 15)
                goto LABEL_118;
              v32 = (_QWORD *)*v32;
            }
            else if (v42 != 15)
            {
              goto LABEL_118;
            }
            if (*v32 == 0x715F636974617473 && *(_QWORD *)((char *)v32 + 7) == 0x657A69746E617571)
            {
              v69 = *(const void **)(v219 + 64);
              if (v69
              {
                v71 = v70;
                v58 = *(std::__shared_weak_count **)(v219 + 72);
                *(_QWORD *)v236 = v70;
                *(_QWORD *)&v236[8] = v58;
                if (v58)
                {
                  v72 = (unint64_t *)&v58->__shared_owners_;
                  do
                    v73 = __ldxr(v72);
                  while (__stxr(v73 + 1, v72));
                }
              }
              else
              {
                v58 = 0;
                v71 = 0;
                *(_OWORD *)v236 = 0uLL;
              }
              v61 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v71 + 320))(v71);
              v62 = *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v71 + 320))(v71) + 4);
              if (v58)
              {
                v74 = (unint64_t *)&v58->__shared_owners_;
                do
                  v64 = __ldaxr(v74);
                while (__stlxr(v64 - 1, v74));
LABEL_128:
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
LABEL_149:
              DWORD2(v248) = v61;
              LODWORD(v248) = v62;
              v243 = 0;
              v75 = (std::__shared_weak_count *)*((_QWORD *)a1 + 3);
              v241 = *((_QWORD *)a1 + 2);
              v242 = v75;
              if (v75)
              {
                v76 = (unint64_t *)&v75->__shared_owners_;
                do
                  v77 = __ldxr(v76);
                while (__stxr(v77 + 1, v76));
              }
              Espresso::abstract_engine_factory::shared(&v233);
              v78 = v233;
              std::string::basic_string[abi:ne180100]<0>(v236, "copy");
              LODWORD(v253) = (***(uint64_t (****)(_QWORD))(v241 + 8))(*(_QWORD *)(v241 + 8));
              Espresso::abstract_engine_factory::make_kernel_priv(v78, (uint64_t)&v241, (uint64_t)v236, (uint64_t)&v243, (int *)&v253);
              if (__str.__r_.__value_.__r.__words[0]
              {
                v239 = v79;
                size = __str.__r_.__value_.__l.__size_;
                if (!__str.__r_.__value_.__l.__size_)
                {
LABEL_164:
                  if ((v236[23] & 0x80000000) != 0)
                    operator delete(*(void **)v236);
                  v85 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
                  if (*((_QWORD *)&v233 + 1))
                  {
                    v86 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
                    do
                      v87 = __ldaxr(v86);
                    while (__stlxr(v87 - 1, v86));
                    if (!v87)
                    {
                      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                      std::__shared_weak_count::__release_weak(v85);
                    }
                  }
                  *(_DWORD *)v236 = 0;
                  memset(&v236[8], 0, 32);
                  __p = 0u;
                  v238 = 0u;
                  v88 = (char *)operator new(0xF8uLL);
                  *((_QWORD *)v88 + 1) = 0;
                  *((_QWORD *)v88 + 2) = 0;
                  *((_QWORD *)v88 + 3) = &off_1E2DA1A38;
                  *(_QWORD *)v88 = &off_1E2DBF0D0;
                  *(_OWORD *)(v88 + 40) = 0u;
                  *(_OWORD *)(v88 + 56) = 0u;
                  *(_OWORD *)(v88 + 72) = 0u;
                  *(_OWORD *)(v88 + 88) = 0u;
                  *(_OWORD *)(v88 + 104) = 0u;
                  *(_OWORD *)(v88 + 120) = 0u;
                  *(_OWORD *)(v88 + 136) = 0u;
                  *(_OWORD *)(v88 + 152) = 0u;
                  *(_OWORD *)(v88 + 161) = 0u;
                  *((_OWORD *)v88 + 13) = 0u;
                  *((_OWORD *)v88 + 14) = 0u;
                  *((_QWORD *)v88 + 30) = 0;
                  *(_QWORD *)&v236[8] = v88 + 24;
                  *(_QWORD *)&v236[16] = v88;
                  v89 = v247;
                  v91 = v239;
                  v90 = size;
                  if (size)
                  {
                    v92 = (unint64_t *)(size + 8);
                    do
                      v93 = __ldxr(v92);
                    while (__stxr(v93 + 1, v92));
                    v94 = (std::__shared_weak_count *)*((_QWORD *)v88 + 12);
                    *((_QWORD *)v88 + 11) = v91;
                    *((_QWORD *)v88 + 12) = v90;
                    if (v94)
                    {
                      v95 = (unint64_t *)&v94->__shared_owners_;
                      do
                        v96 = __ldaxr(v95);
                      while (__stlxr(v96 - 1, v95));
                      if (!v96)
                      {
                        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                        std::__shared_weak_count::__release_weak(v94);
                      }
                    }
                  }
                  else
                  {
                    *((_QWORD *)v88 + 11) = v239;
                    *((_QWORD *)v88 + 12) = 0;
                  }
                  std::string::operator=((std::string *)(*(_QWORD *)&v236[8] + 16), (const std::string *)(v89 + 16));
                  std::string::operator=((std::string *)(*(_QWORD *)&v236[8] + 40), (const std::string *)(v89 + 40));
                  v97 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v89 + 64) + 8) + 8);
                  v98 = (**v97)(v97);
                  v99 = *(_QWORD *)&v236[8];
                  *(_DWORD *)(*(_QWORD *)&v236[8] + 8) = v98;
                  *(_DWORD *)(v99 + 12) = *(_DWORD *)(v89 + 12);
                  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v236[24], (std::string *)v244, *((std::string **)&v244 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v244 + 1) - v244) >> 3));
                  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&__str, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
                  else
                    __str = v246;
                  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)&__p + 8), &__str, &v256, 1uLL);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  Espresso::net::remove_layer(a1, v252);
                  v235 = v252;
                  LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)v236;
                  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)&v236[8];
                  if (*(_QWORD *)&v236[16])
                  {
                    v100 = (unint64_t *)(*(_QWORD *)&v236[16] + 8);
                    do
                      v101 = __ldxr(v100);
                    while (__stxr(v101 + 1, v100));
                  }
                  v256 = 0uLL;
                  v257 = 0;
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v256, *(uint64_t *)&v236[24], *(uint64_t *)&v236[32], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v236[32] - *(_QWORD *)&v236[24]) >> 3));
                  memset(v258, 0, sizeof(v258));
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v258, *((uint64_t *)&__p + 1), v238, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v238 - *((_QWORD *)&__p + 1)) >> 3));
                  v233 = 0uLL;
                  v234 = 0;
                  v253 = (void **)&v233;
                  LOBYTE(v254) = 0;
                  *(_QWORD *)&v233 = operator new(0x48uLL);
                  *((_QWORD *)&v233 + 1) = v233;
                  v234 = v233 + 72;
                  *((_QWORD *)&v233 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v234, (uint64_t)&__str, (uint64_t)v259, v233);
                  Espresso::net::insert_layers((uint64_t)a1, &v235, (uint64_t *)&v233);
                  v253 = (void **)&v233;
                  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v253);
                  v253 = (void **)v258;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v253);
                  v253 = (void **)&v256;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v253);
                  v102 = (std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2];
                  if (__str.__r_.__value_.__r.__words[2])
                  {
                    v103 = (unint64_t *)(__str.__r_.__value_.__r.__words[2] + 8);
                    do
                      v104 = __ldaxr(v103);
                    while (__stlxr(v104 - 1, v103));
                    if (!v104)
                    {
                      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                      std::__shared_weak_count::__release_weak(v102);
                    }
                  }
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p + 8;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v236[24];
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                  v105 = *(std::__shared_weak_count **)&v236[16];
                  if (*(_QWORD *)&v236[16])
                  {
                    v106 = (unint64_t *)(*(_QWORD *)&v236[16] + 8);
                    do
                      v107 = __ldaxr(v106);
                    while (__stlxr(v107 - 1, v106));
                    if (!v107)
                    {
                      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                      std::__shared_weak_count::__release_weak(v105);
                    }
                  }
                  v108 = (std::__shared_weak_count *)size;
                  if (size)
                  {
                    v109 = (unint64_t *)(size + 8);
                    do
                      v110 = __ldaxr(v109);
                    while (__stlxr(v110 - 1, v109));
                    if (!v110)
                    {
                      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                      std::__shared_weak_count::__release_weak(v108);
                    }
                  }
                  v111 = v242;
                  if (v242)
                  {
                    v112 = (unint64_t *)&v242->__shared_owners_;
                    do
                      v113 = __ldaxr(v112);
                    while (__stlxr(v113 - 1, v112));
                    if (!v113)
                    {
                      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                      std::__shared_weak_count::__release_weak(v111);
                    }
                  }
                  *(_QWORD *)v236 = &v244;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
                  goto LABEL_209;
                }
                v80 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                do
                  v81 = __ldxr(v80);
                while (__stxr(v81 + 1, v80));
              }
              else
              {
                v239 = 0;
                size = 0;
              }
              v82 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
              if (__str.__r_.__value_.__l.__size_)
              {
                v83 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                do
                  v84 = __ldaxr(v83);
                while (__stlxr(v84 - 1, v83));
                if (!v84)
                {
                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                  std::__shared_weak_count::__release_weak(v82);
                }
              }
              goto LABEL_164;
            }
LABEL_118:
            v55 = *(const void **)(v219 + 64);
            if (v55
            {
              v57 = v56;
              v58 = *(std::__shared_weak_count **)(v219 + 72);
              *(_QWORD *)v236 = v56;
              *(_QWORD *)&v236[8] = v58;
              if (v58)
              {
                v59 = (unint64_t *)&v58->__shared_owners_;
                do
                  v60 = __ldxr(v59);
                while (__stxr(v60 + 1, v59));
              }
            }
            else
            {
              v58 = 0;
              v57 = 0;
              *(_OWORD *)v236 = 0uLL;
            }
            v61 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v57 + 384))(v57);
            v62 = *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v57 + 384))(v57) + 4);
            if (v58)
            {
              v63 = (unint64_t *)&v58->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              goto LABEL_128;
            }
            goto LABEL_149;
          case 0x12:
            if (*(_QWORD *)*v32 == 0x5F63696D616E7964
              && *(_QWORD *)(*v32 + 8) == 0x69746E6175716564
              && *(_WORD *)(*v32 + 16) == 25978)
            {
LABEL_104:
              v48 = *(std::__shared_weak_count **)(v219 + 72);
              *(_QWORD *)v236 = v47;
              *(_QWORD *)&v236[8] = v48;
              if (v48)
              {
                v49 = (unint64_t *)&v48->__shared_owners_;
                do
                  v50 = __ldxr(v49);
                while (__stxr(v50 + 1, v49));
              }
              v51 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v47 + 320))(v47);
              if (v48)
              {
                v52 = (unint64_t *)&v48->__shared_owners_;
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
LABEL_110:
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                  std::__shared_weak_count::__release_weak(v48);
                }
              }
LABEL_137:
              DWORD2(v248) = v51;
              LODWORD(v248) = 1065353216;
            }
            goto LABEL_209;
          default:
            goto LABEL_209;
        }
      }
      v250 = 0;
      v251 = 0;
      v249 = 0;
      *(_QWORD *)&v248 = 1065353216;
      *((_QWORD *)&v248 + 1) = DWORD2(v222) | 0x100000000;
      v241 = 0;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v221;
      v241 = **((_QWORD **)std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v230, (unsigned __int8 *)&v221, (__int128 **)&__str)+ 5);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v241;
      v128 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v218, &v241, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str)[3];
      if (*((char *)v128 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)v128, *((_QWORD *)v128 + 1));
      }
      else
      {
        v129 = *v128;
        v246.__r_.__value_.__r.__words[2] = *((_QWORD *)v128 + 2);
        *(_OWORD *)&v246.__r_.__value_.__l.__data_ = v129;
      }
      v130 = *(_OWORD *)(*((_QWORD *)a1 + 4) + 16 * v241);
      v244 = v130;
      if (*((_QWORD *)&v130 + 1))
      {
        v131 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
        do
          v132 = __ldxr(v131);
        while (__stxr(v132 + 1, v131));
      }
      v133 = v130;
      v134 = (uint64_t *)(v130 + 40);
      v135 = *(unsigned __int8 *)(v130 + 63);
      if (*(char *)(v130 + 63) < 0)
      {
        v136 = *(_QWORD *)(v130 + 48);
        if (v136 != 15)
          goto LABEL_283;
        v134 = (uint64_t *)*v134;
      }
      else if (v135 != 15)
      {
LABEL_280:
        if (v135 != 17)
        {
          v163 = (uint64_t *)(v133 + 40);
          goto LABEL_303;
        }
        goto LABEL_285;
      }
      v137 = (uint64_t *)*v134;
      v138 = *(uint64_t *)((char *)v134 + 7);
      if (v137 != (uint64_t *)0x715F636974617473 || v138 != 0x657A69746E617571)
      {
LABEL_279:
        v134 = (uint64_t *)(v133 + 40);
        if ((v135 & 0x80) == 0)
          goto LABEL_280;
        v136 = *(_QWORD *)(v133 + 48);
LABEL_283:
        if (v136 != 17)
        {
          v163 = (uint64_t *)(v133 + 40);
          goto LABEL_316;
        }
        v134 = (uint64_t *)*v134;
LABEL_285:
        v164 = (uint64_t *)*v134;
        v165 = v134[1];
        v166 = *((unsigned __int8 *)v134 + 16);
        if (v164 == (uint64_t *)0x645F636974617473 && v165 == 0x7A69746E61757165 && v166 == 101)
        {
          v170 = *(std::__shared_weak_count **)(v133 + 72);
          *(_QWORD *)v236 = v169;
          *(_QWORD *)&v236[8] = v170;
          if (v170)
          {
            v171 = (unint64_t *)&v170->__shared_owners_;
            do
              v172 = __ldxr(v171);
            while (__stxr(v172 + 1, v171));
          }
          v173 = (*(uint64_t (**)(void *))(*(_QWORD *)v169 + 384))(v169);
          v174 = *(float *)(v173 + 4);
          DWORD2(v248) = *(_DWORD *)v173;
          *(float *)&v248 = 1.0 / v174;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v221;
          v175 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v217, &v221, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
          *(_OWORD *)(v175 + 56) = v248;
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v175 + 72, (char *)v249, v250, (v250 - (uint64_t)v249) >> 2);
          if (v170)
          {
            v176 = (unint64_t *)&v170->__shared_owners_;
            do
              v177 = __ldaxr(v176);
            while (__stlxr(v177 - 1, v176));
            if (!v177)
            {
              ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
              std::__shared_weak_count::__release_weak(v170);
            }
          }
          v133 = v244;
          v135 = *(unsigned __int8 *)(v244 + 63);
        }
        v163 = (uint64_t *)(v133 + 40);
        if ((v135 & 0x80) == 0)
        {
LABEL_303:
          if (v135 != 16)
          {
            if (v135 != 18)
              goto LABEL_354;
            v178 = (uint64_t *)*v163;
            v179 = v163[1];
            v180 = *((unsigned __int16 *)v163 + 8);
            v181 = v178 == (uint64_t *)0x5F63696D616E7964 && v179 == 0x69746E6175716564;
            if (!v181 || v180 != 25978)
              goto LABEL_354;
            goto LABEL_338;
          }
          goto LABEL_329;
        }
        v136 = *(_QWORD *)(v133 + 48);
LABEL_316:
        if (v136 != 16)
        {
          if (v136 != 18)
            goto LABEL_354;
          v163 = (uint64_t *)*v163;
          v183 = *v163 == 0x5F63696D616E7964 && v163[1] == 0x69746E6175716564;
          if (!v183 || *((_WORD *)v163 + 8) != 25978)
            goto LABEL_354;
          if (*(_QWORD *)(v133 + 48) != 16)
            goto LABEL_338;
          goto LABEL_334;
        }
        v163 = (uint64_t *)*v163;
LABEL_329:
        if (*v163 != 0x5F63696D616E7964 || v163[1] != 0x657A69746E617571)
          goto LABEL_354;
LABEL_334:
        v186 = (uint64_t *)*v163;
        v187 = v163[1];
        if (v186 == (uint64_t *)0x5F63696D616E7964 && v187 == 0x657A69746E617571)
        {
          v190 = *(std::__shared_weak_count **)(v133 + 72);
          *(_QWORD *)v236 = v196;
          *(_QWORD *)&v236[8] = v190;
          if (v190)
          {
            v197 = (unint64_t *)&v190->__shared_owners_;
            do
              v198 = __ldxr(v197);
            while (__stxr(v198 + 1, v197));
          }
          v193 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v196 + 320))(v196);
          if (!v190)
            goto LABEL_353;
          v199 = (unint64_t *)&v190->__shared_owners_;
          do
            v195 = __ldaxr(v199);
          while (__stlxr(v195 - 1, v199));
          goto LABEL_351;
        }
LABEL_338:
        v190 = *(std::__shared_weak_count **)(v133 + 72);
        *(_QWORD *)v236 = v189;
        *(_QWORD *)&v236[8] = v190;
        if (v190)
        {
          v191 = (unint64_t *)&v190->__shared_owners_;
          do
            v192 = __ldxr(v191);
          while (__stxr(v192 + 1, v191));
        }
        v193 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v189 + 320))(v189);
        if (!v190)
          goto LABEL_353;
        v194 = (unint64_t *)&v190->__shared_owners_;
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 - 1, v194));
LABEL_351:
        if (!v195)
        {
          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
          std::__shared_weak_count::__release_weak(v190);
        }
LABEL_353:
        DWORD2(v248) = v193;
        LODWORD(v248) = 1065353216;
LABEL_354:
        std::pair<std::string,Espresso::blob_numerical_properties>::pair[abi:ne180100]<std::string&,Espresso::blob_numerical_properties&,0>((std::string *)v236, (__int128 *)&v246, &v248);
        v200 = v227;
        if (v227 >= v228)
        {
          v202 = (uint64_t)(v227 - v226) >> 6;
          v203 = v202 + 1;
          if ((unint64_t)(v202 + 1) >> 58)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v204 = v228 - v226;
          if ((uint64_t)(v228 - v226) >> 5 > v203)
            v203 = v204 >> 5;
          if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFC0)
            v205 = 0x3FFFFFFFFFFFFFFLL;
          else
            v205 = v203;
          *((_QWORD *)&v256 + 1) = &v228;
          v206 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v205);
          v207 = (std::string::size_type)&v206[64 * v202];
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v206;
          __str.__r_.__value_.__l.__size_ = v207;
          *(_QWORD *)&v256 = &v206[64 * v208];
          v209 = *(_OWORD *)v236;
          *(_QWORD *)(v207 + 16) = *(_QWORD *)&v236[16];
          *(_OWORD *)v207 = v209;
          memset(v236, 0, 24);
          *(_OWORD *)(v207 + 24) = *(_OWORD *)&v236[24];
          *(_QWORD *)(v207 + 48) = 0;
          *(_QWORD *)(v207 + 56) = 0;
          *(_QWORD *)(v207 + 40) = 0;
          *(_OWORD *)(v207 + 40) = __p;
          *(_QWORD *)(v207 + 56) = v238;
          __p = 0uLL;
          *(_QWORD *)&v238 = 0;
          __str.__r_.__value_.__r.__words[2] = v207 + 64;
          std::vector<std::pair<std::string,Espresso::blob_numerical_properties>>::__swap_out_circular_buffer(&v226, &__str);
          v210 = v227;
          std::__split_buffer<std::pair<std::string,Espresso::blob_numerical_properties>>::~__split_buffer((uint64_t)&__str);
          v227 = v210;
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
        }
        else
        {
          v201 = *(_OWORD *)v236;
          *(_QWORD *)(v227 + 16) = *(_QWORD *)&v236[16];
          *(_OWORD *)v200 = v201;
          memset(v236, 0, 24);
          *(_OWORD *)(v200 + 24) = *(_OWORD *)&v236[24];
          *(_QWORD *)(v200 + 48) = 0;
          *(_QWORD *)(v200 + 56) = 0;
          *(_QWORD *)(v200 + 40) = 0;
          *(_OWORD *)(v200 + 40) = __p;
          *(_QWORD *)(v200 + 56) = v238;
          __p = 0uLL;
          *(_QWORD *)&v238 = 0;
          v227 = v200 + 64;
        }
        if ((v236[23] & 0x80000000) != 0)
          operator delete(*(void **)v236);
        v211 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
        if (*((_QWORD *)&v244 + 1))
        {
          v212 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
          do
            v213 = __ldaxr(v212);
          while (__stlxr(v213 - 1, v212));
          if (!v213)
          {
            ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
            std::__shared_weak_count::__release_weak(v211);
          }
        }
        if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v246.__r_.__value_.__l.__data_);
        if (v249)
          operator delete(v249);
        goto LABEL_375;
      }
      v141 = *(std::__shared_weak_count **)(v133 + 72);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)v141;
      if (v141)
      {
        v142 = (unint64_t *)&v141->__shared_owners_;
        do
          v143 = __ldxr(v142);
        while (__stxr(v143 + 1, v142));
      }
      v144 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v140 + 320))(v140);
      v145 = v144[1];
      if (*v144 == -1)
      {
        *(_QWORD *)&v233 = &v221;
        v147 = *(_OWORD *)(*((_QWORD *)a1 + 4)
                         + 16
                         * std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v229, (uint64_t)&v221, (uint64_t)&std::piecewise_construct, (__int128 **)&v233)[5]);
        v233 = v147;
        v220 = v147;
        if (*((_QWORD *)&v147 + 1))
        {
          v148 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
          do
            v149 = __ldxr(v148);
          while (__stxr(v149 + 1, v148));
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int,void>(&v253, 1);
        v150 = v253;
        *(_DWORD *)v253[3] = v145;
        v151 = *(_QWORD *)(v220 + 64);
        v247 = 0uLL;
        std::string::basic_string[abi:ne180100]<0>(v236, "post_scale");
        (*(void (**)(uint64_t, __int128 *, _BYTE *, void *, uint64_t, _QWORD))(*(_QWORD *)v151 + 160))(v151, &v247, v236, v150[3], 1, 0);
        if ((v236[23] & 0x80000000) != 0)
          operator delete(*(void **)v236);
        v152 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
        if (*((_QWORD *)&v247 + 1))
        {
          v153 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
          do
            v154 = __ldaxr(v153);
          while (__stlxr(v154 - 1, v153));
          if (!v154)
          {
            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
            std::__shared_weak_count::__release_weak(v152);
          }
        }
        v155 = v254;
        if (v254)
        {
          v156 = (unint64_t *)&v254->__shared_owners_;
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }
        v158 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
        if (*((_QWORD *)&v233 + 1))
        {
          v159 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
          do
            v160 = __ldaxr(v159);
          while (__stlxr(v160 - 1, v159));
          if (!v160)
          {
            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
            std::__shared_weak_count::__release_weak(v158);
          }
        }
        v141 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (!__str.__r_.__value_.__l.__size_)
          goto LABEL_278;
      }
      else
      {
        DWORD2(v248) = *v144;
        LODWORD(v248) = v145;
        *(_QWORD *)&v233 = &v221;
        v146 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v217, &v221, (uint64_t)&std::piecewise_construct, (__int128 **)&v233);
        *(_OWORD *)(v146 + 56) = v248;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v146 + 72, (char *)v249, v250, (v250 - (uint64_t)v249) >> 2);
        if (!v141)
        {
LABEL_278:
          v133 = v244;
          v135 = *(unsigned __int8 *)(v244 + 63);
          goto LABEL_279;
        }
      }
      v161 = (unint64_t *)&v141->__shared_owners_;
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
      }
      goto LABEL_278;
    }
  }
LABEL_381:
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)a2 = 1;
  *(_QWORD *)v236 = &v226;
  std::vector<std::pair<std::string,Espresso::blob_numerical_properties>>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v229[2]);
  v214 = v229[0];
  v229[0] = 0;
  if (v214)
    operator delete(v214);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v230[2]);
  v215 = v230[0];
  v230[0] = 0;
  if (v215)
    operator delete(v215);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v231);
}

void sub_1916B9B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;
  void *v73;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a71);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  v73 = *(void **)(v71 - 240);
  if (v73)
    operator delete(v73);
  std::pair<std::string,Espresso::blob_numerical_properties>::~pair((uint64_t)&a25);
  a57 = &a34;
  std::vector<std::pair<std::string,Espresso::blob_numerical_properties>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a37);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&a42);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a47);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::pair<std::string,Espresso::blob_numerical_properties>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 64;
      v6 = *(_OWORD *)(v3 - 64);
      *(_QWORD *)(v4 - 48) = *(_QWORD *)(v3 - 48);
      *(_OWORD *)(v4 - 64) = v6;
      *(_QWORD *)(v3 - 56) = 0;
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v3 - 64) = 0;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v4 -= 64;
      v3 -= 64;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<std::string,Espresso::blob_numerical_properties>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>(i - 64);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::pair<std::string,Espresso::blob_numerical_properties>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::pair<std::string,Espresso::blob_numerical_properties>::pair[abi:ne180100]<std::string&,Espresso::blob_numerical_properties&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *a3;
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&this[1].__r_.__value_.__r.__words[2], *((const void **)a3 + 2), *((_QWORD *)a3 + 3), (uint64_t)(*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 2);
  return this;
}

void sub_1916B9FC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int,void>(_QWORD *a1, int a2)
{
  _QWORD *v4;
  Espresso *v5;
  void *v6;

  v4 = operator new(0x60uLL);
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = &off_1E2DA11F0;
  *v4 = &off_1E2DBECA8;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_DWORD *)v4 + 8) = a2;
  *(_QWORD *)((char *)v4 + 36) = 0x100000001;
  v5 = (Espresso *)(4 * a2);
  *((_DWORD *)v4 + 11) = 1;
  v6 = Espresso::kern_alloc_uninitialized(v5);
  bzero(v6, (size_t)v5);
  v4[6] = v6;
  *((_BYTE *)v4 + 56) = 1;
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1916BA08C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,Espresso::blob_numerical_properties>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<Espresso::pass_transform_quantize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_transform_quantize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE180;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_transform_quantize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::V9Engine::v9_depthwise_kernel::~v9_depthwise_kernel(id *this)
{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
}

{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::v9_depthwise_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  const void *v11;
  int32x2_t *v12;
  const void *v13;
  int8x8_t *v14;
  uint64_t v15;
  int8x8_t v16;
  int32x2_t v17;
  int32x4_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int32x2_t v23;
  int32x2_t v24;
  int8x8_t v25;
  int8x8_t v26;
  void *v27;
  int64x2_t v28;
  int64x2_t v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  const __CFString *v35;
  void *v36;
  void *v37;
  MTLFunctionConstantValues *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  id v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  _WORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _WORD *v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  _WORD *v67;
  int v68;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _WORD *v82;
  __int16 *v83;
  __int16 *v84;
  _WORD *v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  BOOL v97;
  unsigned int v98;
  unsigned __int16 v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  id v107[2];
  __int16 v108;

  v7 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v107, *a2);
  v8 = v107[0];
  if (*(_BYTE *)(v7 + 64))
  {
    v9 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v9 = (_QWORD *)*v9;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setLabel:", v10);

  }
  v11 = **a3;
  if (v11)
  else
    v12 = 0;
  v13 = **a4;
  if (v13)
  else
    v14 = 0;
  v15 = *(_QWORD *)(a1 + 712);
  if (v15)
    goto LABEL_71;
  v16 = v14[1];
  v17 = v12[1];
  *(int8x8_t *)v18.i8 = v16;
  v18.u64[1] = (unint64_t)v17;
  *(int16x4_t *)(a1 + 608) = vmovn_s32(v18);
  v19 = *(_DWORD *)(a1 + 344);
  *(_WORD *)(a1 + 618) = v19 * v12[2].i32[1];
  *(_WORD *)(a1 + 616) = v19;
  *(_WORD *)(a1 + 620) = v19 / *(_DWORD *)(a1 + 348);
  *(_WORD *)(a1 + 622) = 8;
  v20 = *(unsigned __int16 *)(a1 + 396);
  v21 = *(unsigned __int16 *)(a1 + 398);
  *(_WORD *)(a1 + 626) = v21;
  *(_WORD *)(a1 + 624) = v20;
  *(_WORD *)(a1 + 632) = v14[31].i32[0];
  *(_WORD *)(a1 + 634) = v14[31].i32[1];
  *(_DWORD *)(a1 + 636) = v14[32].i32[1];
  *(_WORD *)(a1 + 640) = v12[31].i32[0];
  *(_WORD *)(a1 + 642) = v12[31].i32[1];
  *(_DWORD *)(a1 + 644) = v12[32].i32[1];
  v22 = *(__int16 *)(a1 + 376);
  switch(v22)
  {
    case 4:
      goto LABEL_15;
    case 2:
      v26.i16[0] = 0;
      v26.i16[2] = 0;
      break;
    case 1:
LABEL_15:
      v23.i32[0] = *(__int16 *)(a1 + 400);
      v23.i32[1] = *(__int16 *)(a1 + 402);
      v24 = vmax_s32(vsub_s32(vmul_s32(vadd_s32(*(int32x2_t *)(a1 + 352), (int32x2_t)-1), vmax_s32(v23, (int32x2_t)0x100000001)), (int32x2_t)vmvn_s8((int8x8_t)vmla_s32(vneg_s32((int32x2_t)v16), vadd_s32(v17, (int32x2_t)-1), vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(v21, v20), 0x10uLL), 0x10uLL)))), 0);
      v25 = (int8x8_t)vshr_n_u32((uint32x2_t)v24, 1uLL);
      v26 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned __int16 *)(a1 + 376) == 1), 0x1FuLL)), v25, (int8x8_t)vsub_s32(v24, (int32x2_t)v25));
      break;
    default:
      v16.i16[0] = *(_WORD *)(a1 + 384);
      v16.i16[2] = *(_WORD *)(a1 + 388);
      v26 = vand_s8(v16, (int8x8_t)0xFFFF0000FFFFLL);
      break;
  }
  *(_WORD *)(a1 + 630) = v26.i16[2];
  *(_WORD *)(a1 + 628) = v26.i16[0];
  v27 = *(void **)(a1 + 704);
  *(_QWORD *)(a1 + 704) = CFSTR("v9_depthwise_kernel_dumb");

  *(int64x2_t *)(a1 + 656) = vdupq_n_s64(4uLL);
  *(_QWORD *)(a1 + 672) = 4;
  v28.i64[0] = *(__int16 *)(a1 + 612);
  v28.i64[1] = *(__int16 *)(a1 + 614);
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  *(uint64x2_t *)(a1 + 680) = vsraq_n_u64((uint64x2_t)vdupq_n_s64(1uLL), (uint64x2_t)vaddq_s64(v28, v29), 2uLL);
  *(_QWORD *)(a1 + 696) = (((unint64_t)*(unsigned __int16 *)(a1 + 618) - 1) >> 2) + 1;
  if (*(_WORD *)(a1 + 620) == 1
    && (*(_BYTE *)(a1 + 344) & 7) == 0
    && (*(_WORD *)(a1 + 632) & 7) == 0
    && (*(_WORD *)(a1 + 634) & 7) == 0
    && (*(_BYTE *)(a1 + 636) & 7) == 0
    && (*(_WORD *)(a1 + 640) & 7) == 0
    && (*(_WORD *)(a1 + 642) & 7) == 0
    && (*(_BYTE *)(a1 + 644) & 7) == 0)
  {
    v30 = objc_msgSend(*(id *)(v7 + 144), "supportsFeatureSet:", 11);
    *(_BYTE *)(a1 + 584) = 1;
    v31 = (unint64_t)*(unsigned __int16 *)(a1 + 618) >> 3;
    *(_WORD *)(a1 + 618) = v31;
    v32 = *(unsigned __int16 *)(a1 + 616) >> 3;
    *(_WORD *)(a1 + 616) >>= 3;
    *(_WORD *)(a1 + 632) >>= 3;
    *(_WORD *)(a1 + 634) >>= 3;
    *(_DWORD *)(a1 + 636) >>= 3;
    *(_WORD *)(a1 + 640) >>= 3;
    *(_WORD *)(a1 + 642) >>= 3;
    *(_DWORD *)(a1 + 644) >>= 3;
    if (v30
      && *(_WORD *)(a1 + 624) == 1
      && *(_WORD *)(a1 + 626) == 1
      && *(_WORD *)(a1 + 400) == 1
      && *(_WORD *)(a1 + 402) == 1
      && *(_DWORD *)(a1 + 356) == 3
      && *(_DWORD *)(a1 + 352) == 3
      && (v33 = *(__int16 *)(a1 + 612), v34 = *(unsigned __int16 *)(a1 + 622), v33 >= v34))
    {
      v94 = 16;
      LOWORD(v95) = 4;
      while (1)
      {
        v96 = v94 >> 1;
        if (v94 >> 1 < v32)
          break;
        LOWORD(v95) = 2 * v95;
        v97 = v94 > 3;
        v94 >>= 1;
        if (!v97)
          goto LABEL_80;
      }
      v96 = v94;
LABEL_80:
      if ((unsigned __int16)v95 < 5u)
      {
        v98 = 1;
      }
      else
      {
        v98 = 1;
        v99 = v95;
        while (1)
        {
          v95 = v99 >> 1;
          if (2 * v98 > v95)
            break;
          v98 = (unsigned __int16)(2 * v98);
          v100 = v99;
          v99 >>= 1;
          if (v100 < 0xA)
            goto LABEL_87;
        }
        LOWORD(v95) = v99;
      }
LABEL_87:
      v101 = ((v33 - 1) / v34 + 1);
      v102 = *(__int16 *)(a1 + 614);
      *(_QWORD *)(a1 + 672) = v96;
      *(_QWORD *)(a1 + 696) = (v31 - 1) / v96 + 1;
      *(_QWORD *)(a1 + 656) = (unsigned __int16)v95;
      *(_QWORD *)(a1 + 664) = v98;
      *(_QWORD *)(a1 + 680) = ((unint64_t)v102 - 1) / (unsigned __int16)v95 + 1;
      *(_QWORD *)(a1 + 688) = (v101 - 1) / (unint64_t)v98 + 1;
      v35 = CFSTR("v9_depthwise_kernel_multiplier1_3x3filter_shuffle_load_by8channels");
    }
    else
    {
      v35 = CFSTR("v9_depthwise_kernel_multiplier1_by8channels");
    }
    v36 = *(void **)(a1 + 704);
    *(_QWORD *)(a1 + 704) = v35;

  }
  v37 = (void *)objc_opt_new();
  objc_msgSend(v37, "appendString:", *(_QWORD *)(a1 + 704));
  v38 = (MTLFunctionConstantValues *)objc_opt_new();
  v39 = *(unsigned int *)(a1 + 356);
  v108 = *(_DWORD *)(a1 + 356);
  objc_msgSend(v37, "appendFormat:", CFSTR("%d:%d_"), 0, v39);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v38, "setConstantValue:type:atIndex:", &v108, 41, 0);
  v40 = *(unsigned int *)(a1 + 352);
  v108 = *(_DWORD *)(a1 + 352);
  objc_msgSend(v37, "appendFormat:", CFSTR("%d:%d_"), 1, v40);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v38, "setConstantValue:type:atIndex:", &v108, 41, 1);
  v108 = *(_WORD *)(a1 + 402);
  objc_msgSend(v37, "appendFormat:", CFSTR("%d:%d_"), 2, v108);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v38, "setConstantValue:type:atIndex:", &v108, 41, 2);
  v108 = *(_WORD *)(a1 + 400);
  objc_msgSend(v37, "appendFormat:", CFSTR("%d:%d_"), 3, v108);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v38, "setConstantValue:type:atIndex:", &v108, 41, 3);
  v41 = *(unsigned int *)(a1 + 336);
  v108 = *(_DWORD *)(a1 + 336);
  objc_msgSend(v37, "appendFormat:", CFSTR("%d:%d_"), 4, v41);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v38, "setConstantValue:type:atIndex:", &v108, 37, 4);
  if (*(_DWORD *)(a1 + 328))
    LODWORD(v42) = 0;
  else
    LODWORD(v42) = -1;
  if (*(_DWORD *)(a1 + 332))
    v42 = 1;
  else
    v42 = v42;
  v108 = v42;
  objc_msgSend(v37, "appendFormat:", CFSTR("%d:%d_"), 5, v42);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v38, "setConstantValue:type:atIndex:", &v108, 37, 5);
  v43 = *(unsigned __int16 *)(a1 + 378) == 2;
  v108 = 2 * v43;
  objc_msgSend(v37, "appendFormat:", CFSTR("%d:%d_"), 6, 2 * v43);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v38, "setConstantValue:type:atIndex:", &v108, 41, 6);
  v44 = *(id *)(v7 + 144);
  v45 = objc_msgSend(v44, "newBufferWithBytes:length:options:", a1 + 608, 40, 0);
  v46 = *(void **)(a1 + 648);
  *(_QWORD *)(a1 + 648) = v45;

  Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v7, *(NSString **)(a1 + 704), (NSString *)v37, v38);
  v47 = objc_claimAutoreleasedReturnValue();
  v48 = *(void **)(a1 + 712);
  *(_QWORD *)(a1 + 712) = v47;

  v49 = *(id *)(v7 + 144);
  v50 = v49;
  v51 = 0;
  v52 = *(_QWORD *)(a1 + 560);
  v53 = *(int *)(v52 + 8);
  v54 = v52 + 12;
  do
  {
    v53 *= *(int *)(v54 + v51);
    v51 += 4;
  }
  while (v51 != 12);
  v55 = objc_msgSend(v49, "newBufferWithLength:options:", 2 * v53, 0);
  v56 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v55;

  v57 = (_WORD *)objc_msgSend(*(id *)(a1 + 576), "contents");
  v58 = *(_QWORD *)(a1 + 560);
  if (*(_BYTE *)(a1 + 584))
  {
    v59 = 0;
    v60 = *(int *)(v58 + 8);
    do
    {
      v60 *= *(int *)(v58 + 12 + v59);
      v59 += 4;
    }
    while (v59 != 12);
    v61 = malloc_type_malloc(2 * v60, 0x1000040BDFB0063uLL);
    v62 = 0;
    v63 = *(_QWORD *)(a1 + 560);
    v64 = *(int **)(v63 + 24);
    v65 = *(int *)(v63 + 8);
    v66 = v63 + 12;
    do
    {
      v65 *= *(int *)(v66 + v62);
      v62 += 4;
    }
    while (v62 != 12);
    if (v65)
    {
      v67 = v61;
      do
      {
        v68 = *v64++;
        _S0 = v68;
        __asm { FCVT            H0, S0 }
        *v67++ = _S0;
        --v65;
      }
      while (v65);
    }
    v74 = *(int *)(a1 + 344);
    if ((_DWORD)v74)
    {
      v75 = 0;
      v76 = 0;
      v77 = *(int *)(a1 + 356);
      if (v77 <= 1)
        v78 = 1;
      else
        v78 = *(int *)(a1 + 356);
      do
      {
        if ((_DWORD)v77)
        {
          v79 = 0;
          v80 = *(int *)(a1 + 352);
          if (v80 <= 1)
            v81 = 1;
          else
            v81 = *(int *)(a1 + 352);
          v82 = (_WORD *)((char *)&v57[v76 & 7] + 16 * v77 * (v76 >> 3) * v80);
          v83 = (_WORD *)((char *)v61 + v75 * v80);
          do
          {
            v84 = v83;
            v85 = v82;
            v86 = v81;
            if ((_DWORD)v80)
            {
              do
              {
                v87 = *v84++;
                *v85 = v87;
                v85 += 8;
                --v86;
              }
              while (v86);
            }
            ++v79;
            v82 += 8 * v80;
            v83 += v80;
          }
          while (v79 != v78);
        }
        ++v76;
        v75 += 2 * v77;
      }
      while (v76 != v74);
    }
    free(v61);
  }
  else
  {
    v88 = 0;
    v89 = *(int **)(v58 + 24);
    v90 = *(int *)(v58 + 8);
    v91 = v58 + 12;
    do
    {
      v90 *= *(int *)(v91 + v88);
      v88 += 4;
    }
    while (v88 != 12);
    for (; v90; --v90)
    {
      v92 = *v89++;
      _S0 = v92;
      __asm { FCVT            H0, S0 }
      *v57++ = _S0;
    }
  }

  v15 = *(_QWORD *)(a1 + 712);
LABEL_71:
  objc_msgSend(v8, "setComputePipelineState:", v15);
  if (*(_BYTE *)(a1 + 584))
    objc_msgSend(v8, "setTexture:atIndex:", *(_QWORD *)&v14[33], 0);
  else
    objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)&v14[20], 0, 0);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 576), 0, 1);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 600), 0, 2);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)&v12[20], 0, 3);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 648), 0, 4);
  v106 = *(_QWORD *)(a1 + 696);
  v105 = *(_OWORD *)(a1 + 680);
  v103 = *(_OWORD *)(a1 + 656);
  v104 = *(_QWORD *)(a1 + 672);
  objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", &v105, &v103);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v107);
}

void sub_1916BABA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a10);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)va);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_depthwise_kernel::on_resized(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 648);
  *(_QWORD *)(a1 + 648) = 0;

  v3 = *(void **)(a1 + 712);
  *(_QWORD *)(a1 + 712) = 0;

  *(_BYTE *)(a1 + 584) = 0;
}

void Espresso::V9Engine::v9_depthwise_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  const void *v4;
  id *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  id v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  std::runtime_error *exception;
  id v16;
  id v17;

  v3 = *a2;
  *(_DWORD *)(a1 + 336) = *a2 != 0;
  if (v3)
  {
    *(_QWORD *)(a1 + 592) = 4 * *(int *)(v3 + 8);
    v4 = *(const void **)(a1 + 8);
    if (!v4
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = v6[18];
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        v16 = v10;
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        v10 = v16;
      }
    }
    else
    {
      v10 = v6[18];
    }
    v17 = v10;
    v13 = objc_msgSend(v10, "newBufferWithLength:options:", *(_QWORD *)(a1 + 592), 0);
    v14 = *(void **)(a1 + 600);
    *(_QWORD *)(a1 + 600) = v13;

    memcpy((void *)objc_msgSend(*(id *)(a1 + 600), "contents"), *(const void **)(*a2 + 16), *(_QWORD *)(a1 + 592));
    v12 = v17;
  }
  else
  {
    *(_QWORD *)(a1 + 592) = -1;
    v12 = *(void **)(a1 + 600);
    *(_QWORD *)(a1 + 600) = 0;
  }

}

void sub_1916BADBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_depthwise_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  __int128 v7;

  Espresso::blob<float,4>::copy(&v7, *a2);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 560, &v7);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = 0;

}

char *Espresso::V9Engine::v9_depthwise_kernel::get_biases@<X0>(id *this@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  id v6;
  char *result;

  v4 = objc_msgSend(this[75], "contents");
  v5 = (char *)operator new(0x58uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1E2DBEC00;
  v6 = this[74];
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *((_DWORD *)v5 + 8) = (_DWORD)v6;
  *((_QWORD *)v5 + 5) = v4;
  v5[48] = 0;
  a2[1] = v5;
  *((_QWORD *)v5 + 3) = &off_1E2DA1190;
  result = v5 + 24;
  *a2 = result;
  return result;
}

uint64_t Espresso::V9Engine::v9_depthwise_kernel::get_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 568);
  *a2 = *(_QWORD *)(this + 560);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::pass_params_prepare_gradient_builder::~pass_params_prepare_gradient_builder(Espresso::pass_params_prepare_gradient_builder *this)
{
  JUMPOUT(0x19401CD90);
}

void Espresso::analysis_prepare_gradient_builder::~analysis_prepare_gradient_builder(Espresso::analysis_prepare_gradient_builder *this)
{
  Espresso::analysis_prepare_gradient_builder::~analysis_prepare_gradient_builder(this);
  JUMPOUT(0x19401CD90);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2D9D310;
  v2 = (char *)this + 8;
  std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table((uint64_t)this + 208);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 168);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 128);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

void Espresso::pass_params_rename_phi_io::~pass_params_rename_phi_io(Espresso::pass_params_rename_phi_io *this)
{
  JUMPOUT(0x19401CD90);
}

void Espresso::analysis_rename_phi_io::~analysis_rename_phi_io(Espresso::analysis_rename_phi_io *this)
{
  *(_QWORD *)this = &off_1E2D8CA10;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E2D8CA10;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_params_stack_blobs::~pass_params_stack_blobs(Espresso::pass_params_stack_blobs *this)
{
  *(_QWORD *)this = &off_1E2D90428;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E2D90428;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_prepare_gradient_builder::~pass_prepare_gradient_builder(Espresso::pass_prepare_gradient_builder *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_prepare_gradient_builder::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_prepare_gradient_builder::run_on_network(const void **this@<X0>, Espresso::net *a2@<X1>, unint64_t a3@<X8>)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  std::string **v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  _QWORD *v22;
  _QWORD *i;
  unint64_t v24;
  std::string *v25;
  std::string *v26;
  __int128 v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  uint64_t v34;
  std::string **v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t **v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *j;
  uint64_t v57;
  std::vector<int>::size_type v58;
  _QWORD *v59;
  std::vector<int>::value_type *v60;
  uint64_t v61;
  uint64_t *v62;
  std::string *v63;
  __int128 *v64;
  __int128 v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  char *v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  int v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  char *v94;
  _DWORD *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  int v103;
  void *v104;
  unint64_t v105;
  uint64_t v106;
  int *v107;
  __int128 *v108;
  int *v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  char **v113;
  std::string *v114;
  std::string *v115;
  void *v116;
  Espresso::net *v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  int v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  __int128 v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  __int128 v146;
  _QWORD *v147;
  _QWORD *v148;
  unsigned __int8 **v149;
  unsigned __int8 **v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  _OWORD *v156;
  __int128 v157;
  std::string *v158;
  char *v159;
  uint64_t v160;
  unsigned __int8 *v161;
  unsigned __int8 *v162;
  unsigned __int8 *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned __int8 *v167;
  unsigned __int8 *v168;
  uint64_t *v169;
  _OWORD *v170;
  __int128 v171;
  std::string *v172;
  void *v173;
  _QWORD *v174;
  _QWORD *v175;
  void *v176;
  void *v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  Espresso *v183;
  const char *v184;
  _QWORD *v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  _QWORD *v194;
  uint64_t *v195;
  uint64_t v196;
  _QWORD *v198;
  unsigned __int8 *v199;
  char *v200;
  unint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v211;
  _QWORD *v212;
  NSObject *v213;
  Espresso *v214;
  const char *v215;
  uint64_t *m;
  NSObject *v217;
  _QWORD *v218;
  NSObject *v219;
  _QWORD *v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  const char *v232;
  _QWORD *v233;
  const void **k;
  const void **v235;
  size_t v236;
  void **v237;
  const void *v238;
  void **v239;
  std::string::size_type v240;
  std::string *v241;
  unint64_t v242;
  unsigned __int8 **v243;
  Espresso::net *v244;
  _QWORD *v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  void *__p[2];
  __int128 v252;
  int v253;
  char *v254;
  std::string *v255;
  unint64_t v256;
  _QWORD *v257;
  std::__shared_weak_count *v258;
  size_t __n[2];
  __int128 v260;
  int v261;
  _QWORD *v262;
  std::__shared_weak_count *v263;
  _BYTE v264[32];
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unsigned __int8 *v269;
  void *v270[2];
  unsigned __int8 v271;
  std::string v272;
  __int128 v273;
  unint64_t v274;
  __int128 v275;
  __int128 v276;
  int v277;
  std::vector<int>::value_type __x[4];
  __int128 v279;
  int v280;
  void *v281;
  void *v282;
  uint64_t v283;

  v283 = *MEMORY[0x1E0C80C00];
  v7 = (std::__shared_weak_count *)this[2];
  v262 = v6;
  v263 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = v6[1];
  v243 = (unsigned __int8 **)v6[2];
  *(_OWORD *)__x = 0u;
  v279 = 0u;
  v280 = 1065353216;
  *(_OWORD *)__n = 0u;
  v260 = 0u;
  v261 = 1065353216;
  memset(v264, 0, sizeof(v264));
  LODWORD(v265) = 1065353216;
  v11 = operator new(0x20uLL);
  *v11 = &off_1E2DAEC18;
  v11[1] = __x;
  v11[2] = v264;
  v11[3] = __n;
  *((_QWORD *)&v276 + 1) = v11;
  Espresso::transform_network_inplace((uint64_t)a2, (uint64_t)&v275);
  v12 = (__int128 *)*((_QWORD *)&v276 + 1);
  if (*((__int128 **)&v276 + 1) == &v275)
  {
    v13 = 4;
    v12 = &v275;
  }
  else
  {
    if (!*((_QWORD *)&v276 + 1))
      goto LABEL_9;
    v13 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_9:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v264);
  std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table((uint64_t)__x);
  Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)a2);
  v244 = a2;
  v14 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
  v15 = (char *)operator new(0x128uLL);
  v242 = a3;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = &off_1E2DBE490;
  *((_QWORD *)v15 + 3) = &off_1E2D9D310;
  v248 = v10;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *((_DWORD *)v15 + 16) = 1065353216;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *((_DWORD *)v15 + 26) = 1065353216;
  *((_OWORD *)v15 + 7) = 0u;
  *((_OWORD *)v15 + 8) = 0u;
  *((_DWORD *)v15 + 36) = 1065353216;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *((_DWORD *)v15 + 46) = 1065353216;
  *((_OWORD *)v15 + 12) = 0u;
  *((_OWORD *)v15 + 13) = 0u;
  *((_DWORD *)v15 + 56) = 1065353216;
  *(_OWORD *)(v15 + 232) = 0u;
  v16 = (uint64_t *)(v15 + 232);
  *(_OWORD *)(v15 + 248) = 0u;
  *((_DWORD *)v15 + 66) = v261;
  std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__rehash<true>((uint64_t)(v15 + 232), __n[1]);
  v17 = (uint64_t *)v260;
  if ((_QWORD)v260)
  {
    v18 = (std::string **)(v15 + 248);
    do
    {
      v19 = v17[2];
      v20 = *((_QWORD *)v15 + 30);
      if (v20)
      {
        v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
        v21.i16[0] = vaddlv_u8(v21);
        if (v21.u32[0] > 1uLL)
        {
          a3 = v17[2];
          if (v19 >= v20)
            a3 = v19 % v20;
        }
        else
        {
          a3 = (v20 - 1) & v19;
        }
        v22 = *(_QWORD **)(*v16 + 8 * a3);
        if (v22)
        {
          for (i = (_QWORD *)*v22; i; i = (_QWORD *)*i)
          {
            v24 = i[1];
            if (v24 == v19)
            {
              if (i[2] == v19)
                goto LABEL_52;
            }
            else
            {
              if (v21.u32[0] > 1uLL)
              {
                if (v24 >= v20)
                  v24 %= v20;
              }
              else
              {
                v24 &= v20 - 1;
              }
              if (v24 != a3)
                break;
            }
          }
        }
      }
      v25 = (std::string *)operator new(0x30uLL);
      v25->__r_.__value_.__r.__words[0] = 0;
      v25->__r_.__value_.__l.__size_ = v19;
      v25->__r_.__value_.__r.__words[2] = v17[2];
      v26 = v25 + 1;
      if (*((char *)v17 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v26, (const std::string::value_type *)v17[3], v17[4]);
      }
      else
      {
        v27 = *(_OWORD *)(v17 + 3);
        v25[1].__r_.__value_.__r.__words[2] = v17[5];
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
      }
      v28 = (float)(unint64_t)(*((_QWORD *)v15 + 32) + 1);
      v29 = *((float *)v15 + 66);
      if (!v20 || (float)(v29 * (float)v20) < v28)
      {
        v30 = (v20 & (v20 - 1)) != 0;
        if (v20 < 3)
          v30 = 1;
        v31 = v30 | (2 * v20);
        v32 = vcvtps_u32_f32(v28 / v29);
        if (v31 <= v32)
          v33 = v32;
        else
          v33 = v31;
        std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__rehash<true>((uint64_t)v16, v33);
        v20 = *((_QWORD *)v15 + 30);
        if ((v20 & (v20 - 1)) != 0)
        {
          if (v19 >= v20)
            a3 = v19 % v20;
          else
            a3 = v19;
        }
        else
        {
          a3 = (v20 - 1) & v19;
        }
      }
      v34 = *v16;
      v35 = *(std::string ***)(*v16 + 8 * a3);
      if (v35)
      {
        v25->__r_.__value_.__r.__words[0] = (std::string::size_type)*v35;
      }
      else
      {
        v25->__r_.__value_.__r.__words[0] = (std::string::size_type)*v18;
        *v18 = v25;
        *(_QWORD *)(v34 + 8 * a3) = v18;
        if (!v25->__r_.__value_.__r.__words[0])
          goto LABEL_51;
        v36 = *(_QWORD *)(v25->__r_.__value_.__r.__words[0] + 8);
        if ((v20 & (v20 - 1)) != 0)
        {
          if (v36 >= v20)
            v36 %= v20;
        }
        else
        {
          v36 &= v20 - 1;
        }
        v35 = (std::string **)(*v16 + 8 * v36);
      }
      *v35 = v25;
LABEL_51:
      ++*((_QWORD *)v15 + 32);
LABEL_52:
      v17 = (uint64_t *)*v17;
    }
    while (v17);
  }
  *((_QWORD *)v15 + 34) = 0;
  *((_QWORD *)v15 + 35) = 0;
  *((_QWORD *)v15 + 36) = v14;
  v257 = v15 + 24;
  v258 = (std::__shared_weak_count *)v15;
  v37 = (uint64_t)(*((_QWORD *)v244 + 5) - *((_QWORD *)v244 + 4)) >> 4;
  v38 = *v243;
  v39 = v243[1];
  if (*v243 == v39)
  {
    v40 = v248;
  }
  else
  {
    v40 = v248;
    do
    {
      v41 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v14 + 2, v38);
      if (!v41)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v42 = *((int *)v41 + 10);
      v43 = v14[22];
      if (0xAAAAAAAAAAAAAAABLL * ((v14[23] - v43) >> 3) <= v42)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v44 = (unint64_t **)(v43 + 24 * (int)v42);
      v45 = *v44;
      v46 = v44[1];
      while (v45 != v46)
      {
        v48 = *v45++;
        v47 = v48;
        if (v48 < v37)
          v37 = v47;
      }
      v38 += 24;
    }
    while (v38 != v39);
  }
  v49 = *(unsigned __int8 **)(v40 + 16);
  if (v49)
  {
    v50 = 0;
    do
    {
      v51 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v14 + 2, v49 + 16);
      if (!v51)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v52 = *((int *)v51 + 10);
      v53 = v14[19];
      if (v52 >= (v14[20] - v53) >> 3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v54 = *(_QWORD *)(v53 + 8 * v52);
      if (v54 > v50)
        v50 = v54;
      v49 = *(unsigned __int8 **)v49;
    }
    while (v49);
  }
  else
  {
    v50 = 0;
  }
  v55 = v257;
  for (j = (_QWORD *)v257[18]; j; j = (_QWORD *)*j)
  {
    if (j[4] < v37)
      v37 = j[4];
    if (j[2] > v50)
      v50 = j[2];
  }
  v257[31] = v37;
  v55[32] = v50 + 1;
  LODWORD(v275) = 0;
  v57 = v55[33];
  v58 = (uint64_t)(*((_QWORD *)v244 + 5) - *((_QWORD *)v244 + 4)) >> 4;
  __x[0] = 0;
  std::vector<int>::vector((std::vector<int> *)v264, v58, __x);
  *((_QWORD *)&v279 + 1) = 0;
  v59 = operator new(0x30uLL);
  *v59 = &off_1E2DAECC8;
  v59[1] = &v275;
  v59[2] = &v257;
  v59[3] = v264;
  v59[4] = v244;
  v59[5] = v57;
  *((_QWORD *)&v279 + 1) = v59;
  visit_program_stacks((uint64_t)v244, (uint64_t)__x);
  v60 = (std::vector<int>::value_type *)*((_QWORD *)&v279 + 1);
  if (*((std::vector<int>::value_type **)&v279 + 1) == __x)
  {
    v61 = 4;
    v60 = __x;
  }
  else
  {
    if (!*((_QWORD *)&v279 + 1))
      goto LABEL_85;
    v61 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v60 + 8 * v61))();
LABEL_85:
  if (*(_QWORD *)v264)
  {
    *(_QWORD *)&v264[8] = *(_QWORD *)v264;
    operator delete(*(void **)v264);
  }
  v255 = 0;
  v256 = 0;
  v254 = 0;
  v62 = *(uint64_t **)(v40 + 16);
  if (v62)
  {
    v63 = 0;
    do
    {
      v64 = (__int128 *)(v62 + 2);
      if ((unint64_t)v63 >= v256)
      {
        v63 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v254, (uint64_t)v64);
      }
      else
      {
        if (*((char *)v62 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v63, (const std::string::value_type *)v62[2], v62[3]);
        }
        else
        {
          v65 = *v64;
          v63->__r_.__value_.__r.__words[2] = v62[4];
          *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v65;
        }
        ++v63;
      }
      v255 = v63;
      v62 = (uint64_t *)*v62;
    }
    while (v62);
  }
  v275 = 0u;
  v276 = 0u;
  v277 = 1065353216;
  v66 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)v244);
  Espresso::run_pass_on_network<Espresso::pass_global_name_indexing>((uint64_t)v244);
  v67 = Espresso::net::get_analysis<Espresso::pass_global_name_indexing_result>((uint64_t)v244);
  v68 = (uint64_t *)v67[4];
  if (v68)
  {
    v245 = v67;
    do
    {
      v69 = *((int *)v68 + 10);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67[8] - v67[7]) >> 3) <= v69
        || (v70 = v67[10], 0xAAAAAAAAAAAAAAABLL * ((v67[11] - v70) >> 3) <= v69))
      {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      v246 = v68;
      v247 = v67[7];
      v249 = *((_DWORD *)v68 + 10);
      v71 = v70 + 24 * (int)v69;
      memset(__x, 0, sizeof(__x));
      *(_QWORD *)&v279 = 0;
      memset(v264, 0, 24);
      v73 = *(_QWORD **)v71;
      v72 = *(_QWORD **)(v71 + 8);
      if (*(_QWORD **)v71 == v72)
      {
        v76 = 0;
      }
      else
      {
        v74 = 0;
        v75 = 0;
        v76 = 0;
        do
        {
          v77 = v66[13];
          if (0xAAAAAAAAAAAAAAABLL * ((v66[14] - v77) >> 3) <= *v73)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          v78 = v77 + 24 * *v73;
          v79 = *(_DWORD **)v78;
          if (*(_QWORD *)(v78 + 8) != *(_QWORD *)v78)
          {
            if ((unint64_t)v76 >= v75)
            {
              v81 = (v76 - v74) >> 2;
              v82 = v81 + 1;
              if ((unint64_t)(v81 + 1) >> 62)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v75 - (_QWORD)v74) >> 1 > v82)
                v82 = (uint64_t)(v75 - (_QWORD)v74) >> 1;
              if (v75 - (unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
                v83 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v83 = v82;
              if (v83)
                v83 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v83);
              else
                v84 = 0;
              v85 = (char *)(v83 + 4 * v81);
              *(_DWORD *)v85 = *v79;
              v80 = v85 + 4;
              while (v76 != v74)
              {
                v86 = *((_DWORD *)v76 - 1);
                v76 -= 4;
                *((_DWORD *)v85 - 1) = v86;
                v85 -= 4;
              }
              v75 = v83 + 4 * v84;
              *(_QWORD *)__x = v85;
              *(_QWORD *)&__x[2] = v80;
              *(_QWORD *)&v279 = v75;
              if (v74)
                operator delete(v74);
              v74 = v85;
            }
            else
            {
              *(_DWORD *)v76 = *v79;
              v80 = v76 + 4;
            }
            *(_QWORD *)&__x[2] = v80;
            v76 = v80;
          }
          ++v73;
        }
        while (v73 != v72);
      }
      v87 = v247 + 24 * v249;
      v88 = *(_QWORD **)v87;
      v89 = *(_QWORD **)(v87 + 8);
      if (*(_QWORD **)v87 != v89)
      {
        do
        {
          v90 = v66[10];
          if (0xAAAAAAAAAAAAAAABLL * ((v66[11] - v90) >> 3) <= *v88)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          v91 = v90 + 24 * *v88;
          v92 = *(_DWORD **)v91;
          v93 = *(_QWORD *)(v91 + 8) - *(_QWORD *)v91;
          if (v93 != 4)
            Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("load global has %lu outputs", v93 >> 2);
          v94 = *(char **)&v264[8];
          if (*(_QWORD *)&v264[8] >= *(_QWORD *)&v264[16])
          {
            v96 = *(char **)v264;
            v97 = (uint64_t)(*(_QWORD *)&v264[8] - *(_QWORD *)v264) >> 2;
            v98 = v97 + 1;
            if ((unint64_t)(v97 + 1) >> 62)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v99 = *(_QWORD *)&v264[16] - *(_QWORD *)v264;
            if ((uint64_t)(*(_QWORD *)&v264[16] - *(_QWORD *)v264) >> 1 > v98)
              v98 = v99 >> 1;
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
              v100 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v100 = v98;
            if (v100)
              v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v100);
            else
              v101 = 0;
            v102 = (_DWORD *)(v100 + 4 * v97);
            *v102 = *v92;
            v95 = v102 + 1;
            while (v94 != v96)
            {
              v103 = *((_DWORD *)v94 - 1);
              v94 -= 4;
              *--v102 = v103;
            }
            *(_QWORD *)v264 = v102;
            *(_QWORD *)&v264[16] = v100 + 4 * v101;
            if (v96)
              operator delete(v96);
          }
          else
          {
            **(_DWORD **)&v264[8] = *v92;
            v95 = v94 + 4;
          }
          *(_QWORD *)&v264[8] = v95;
          ++v88;
        }
        while (v88 != v89);
        v76 = *(char **)&__x[2];
      }
      v104 = *(void **)__x;
      if ((unint64_t)&v76[-*(_QWORD *)__x] > 4)
      {
        v232 = (const char *)(v246 + 2);
        if (*((char *)v246 + 39) < 0)
          v232 = *(const char **)v232;
        Espresso::throw_exception_selector<Espresso::not_implemented_error,char const*,unsigned long>(v232, (uint64_t)&v76[-*(_QWORD *)__x] >> 2);
      }
      if (&v76[-*(_QWORD *)__x] == (char *)4)
      {
        v105 = (int)**(_DWORD **)__x;
        v106 = v66[7];
        if (0xAAAAAAAAAAAAAAABLL * ((v66[8] - v106) >> 3) <= v105)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v107 = *(int **)&v264[8];
        v116 = *(void **)v264;
        if (*(_QWORD *)&v264[8] == *(_QWORD *)v264)
        {
          v116 = *(void **)&v264[8];
          if (!*(_QWORD *)&v264[8])
            goto LABEL_159;
LABEL_158:
          *(_QWORD *)&v264[8] = v116;
          operator delete(v116);
          v104 = *(void **)__x;
          goto LABEL_159;
        }
        v108 = (__int128 *)(v106 + 24 * (int)v105);
        v109 = *(int **)v264;
        do
        {
          v110 = *v109;
          v111 = v66[7];
          if (0xAAAAAAAAAAAAAAABLL * ((v66[8] - v111) >> 3) <= v110)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          __p[0] = (void *)(v111 + 24 * (int)v110);
          v112 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v275, (unsigned __int8 *)__p[0], (uint64_t)&std::piecewise_construct, (__int128 **)__p);
          v113 = (char **)(v112 + 40);
          v114 = (std::string *)*((_QWORD *)v112 + 6);
          if ((unint64_t)v114 >= *((_QWORD *)v112 + 7))
          {
            v115 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v113, (uint64_t)v108);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v113, v108);
            v115 = v114 + 1;
          }
          *((_QWORD *)v112 + 6) = v115;
          ++v109;
        }
        while (v109 != v107);
      }
      else
      {
        v116 = *(void **)v264;
      }
      if (v116)
        goto LABEL_158;
LABEL_159:
      if (v104)
        operator delete(v104);
      v67 = v245;
      v68 = (uint64_t *)*v246;
    }
    while (*v246);
  }
  v267 = 0;
  v117 = v244;
  if (*((_QWORD *)v244 + 5) != *((_QWORD *)v244 + 4))
  {
    v118 = 0;
    v119 = (uint64_t)v244 + 56;
    v120 = (uint64_t)v244 + 136;
    v250 = (uint64_t)v244 + 96;
    while (1)
    {
      *(_QWORD *)v264 = &v267;
      v121 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v119, &v267, (uint64_t)&std::piecewise_construct, (uint64_t **)v264);
      v122 = v267;
      v123 = *((_QWORD *)v117 + 4);
      if (v121[4] == v121[3])
        goto LABEL_223;
      v124 = *(_QWORD *)(v123 + 16 * v267);
      v125 = (uint64_t *)(v124 + 40);
      if (*(char *)(v124 + 63) < 0)
      {
        v127 = *(_QWORD *)(v124 + 48);
        if (v127 != 11)
        {
          if (v127 != 12)
            goto LABEL_182;
          v125 = (uint64_t *)*v125;
          goto LABEL_175;
        }
        v125 = (uint64_t *)*v125;
      }
      else
      {
        v126 = *(unsigned __int8 *)(v124 + 63);
        if (v126 != 11)
        {
          if (v126 != 12)
            goto LABEL_182;
LABEL_175:
          v128 = (uint64_t *)*v125;
          v129 = *((unsigned int *)v125 + 2);
          v130 = v128 == (uint64_t *)0x6C675F65726F7473;
          v131 = 1818321519;
          goto LABEL_178;
        }
      }
      v132 = (uint64_t *)*v125;
      v129 = *(uint64_t *)((char *)v125 + 3);
      v130 = v132 == (uint64_t *)0x6F6C675F64616F6CLL;
      v131 = 0x6C61626F6C675F64;
LABEL_178:
      if (!v130 || v129 != v131)
      {
LABEL_182:
        v134 = *(_QWORD *)(v124 + 64);
        v268 = v267;
        *(_QWORD *)&v273 = &v268;
        v135 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v119, &v268, (uint64_t)&std::piecewise_construct, (uint64_t **)&v273);
        std::vector<Espresso::layer_nd_shape>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135[4] - v135[3]) >> 3));
        if (__p[1] != __p[0])
        {
          v136 = 0;
          v137 = 0;
          do
          {
            v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
            v272.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v119, &v268, (uint64_t)&std::piecewise_construct, (uint64_t **)&v272)[3]+ v136;
            v138 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v120, (unsigned __int8 *)v272.__r_.__value_.__l.__data_, (__int128 **)&v272);
            Espresso::abstract_blob_container::shape((char *)__x, *((_QWORD *)v138 + 5));
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v273, (const Espresso::layer_shape *)__x, 0);
            v139 = (char *)__p[0] + v136;
            v140 = v273;
            *((_QWORD *)v139 + 2) = v274;
            *(_OWORD *)v139 = v140;
            if (v281)
            {
              v282 = v281;
              operator delete(v281);
            }
            ++v137;
            v136 += 24;
          }
          while (v137 < 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        }
        v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
        v141 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v250, &v268, (uint64_t)&std::piecewise_construct, (uint64_t **)&v272);
        std::vector<Espresso::layer_nd_shape>::vector(&v273, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v141[4] - v141[3]) >> 3));
        if (*((_QWORD *)&v273 + 1) != (_QWORD)v273)
        {
          v142 = 0;
          v143 = 0;
          do
          {
            v269 = (unsigned __int8 *)&v268;
            v269 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v250, &v268, (uint64_t)&std::piecewise_construct, (uint64_t **)&v269)[3]+ v142);
            v144 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v120, v269, (__int128 **)&v269);
            Espresso::abstract_blob_container::shape((char *)__x, *((_QWORD *)v144 + 5));
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v272, (const Espresso::layer_shape *)__x, 0);
            v145 = v273 + v142;
            v146 = *(_OWORD *)&v272.__r_.__value_.__l.__data_;
            *(_QWORD *)(v145 + 16) = *((_QWORD *)&v272.__r_.__value_.__l + 2);
            *(_OWORD *)v145 = v146;
            if (v281)
            {
              v282 = v281;
              operator delete(v281);
            }
            ++v143;
            v142 += 24;
          }
          while (v143 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v273 + 1) - v273) >> 3));
        }
        memset(v264, 0, 24);
        std::vector<Espresso::layer_nd_shape>::__init_with_size[abi:ne180100]<Espresso::layer_nd_shape*,Espresso::layer_nd_shape*>(v264, __p[0], (uint64_t)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *(_QWORD *)&v264[24] = 0;
        v265 = 0;
        v266 = 0;
        std::vector<Espresso::layer_nd_shape>::__init_with_size[abi:ne180100]<Espresso::layer_nd_shape*,Espresso::layer_nd_shape*>(&v264[24], (const void *)v273, *((uint64_t *)&v273 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v273 + 1) - v273) >> 3));
        if ((_QWORD)v273)
        {
          *((_QWORD *)&v273 + 1) = v273;
          operator delete((void *)v273);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        (*(void (**)(void **__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v134 + 248))(v270, v134, v264);
        if (*(_QWORD *)&v264[24])
        {
          v265 = *(_QWORD *)&v264[24];
          operator delete(*(void **)&v264[24]);
        }
        if (*(_QWORD *)v264)
        {
          *(_QWORD *)&v264[8] = *(_QWORD *)v264;
          operator delete(*(void **)v264);
        }
        *(_QWORD *)v264 = &v267;
        v147 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v119, &v267, (uint64_t)&std::piecewise_construct, (uint64_t **)v264);
        Espresso::check_backpropable_result_t::backpropable_input_names(v270, v147 + 3, (uint64_t)__x);
        if (*(_QWORD *)&__x[2] != *(_QWORD *)__x)
        {
          __p[0] = &v267;
          v148 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v250, &v267, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
          v149 = (unsigned __int8 **)v148[3];
          v150 = (unsigned __int8 **)v148[4];
          while (v149 != v150)
          {
            memset(v264, 0, 24);
            v151 = *(_QWORD *)__x;
            v152 = *(_QWORD *)&__x[2];
            while (v151 != v152)
            {
              if (v118)
              {
                v118 = 1;
              }
              else if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(&v275, (unsigned __int8 *)v151))
              {
                *(_QWORD *)&v273 = v151;
                v153 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v275, (unsigned __int8 *)v151, (uint64_t)&std::piecewise_construct, (__int128 **)&v273)+ 5);
                *(_QWORD *)&v273 = v151;
                v154 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v275, (unsigned __int8 *)v151, (uint64_t)&std::piecewise_construct, (__int128 **)&v273);
                v155 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v153, *((_QWORD *)v154 + 6), v149);
                *(_QWORD *)&v273 = v151;
                v118 = v155 != *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v275, (unsigned __int8 *)v151, (uint64_t)&std::piecewise_construct, (__int128 **)&v273)+ 6);
              }
              else
              {
                v118 = 0;
              }
              v156 = *(_OWORD **)&v264[8];
              if (*(_QWORD *)&v264[8] >= *(_QWORD *)&v264[16])
              {
                v158 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v264, v151);
              }
              else
              {
                if (*(char *)(v151 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)&v264[8], *(const std::string::value_type **)v151, *(_QWORD *)(v151 + 8));
                }
                else
                {
                  v157 = *(_OWORD *)v151;
                  *(_QWORD *)(*(_QWORD *)&v264[8] + 16) = *(_QWORD *)(v151 + 16);
                  *v156 = v157;
                }
                v158 = (std::string *)((char *)v156 + 24);
              }
              *(_QWORD *)&v264[8] = v158;
              v151 += 24;
            }
            *(_QWORD *)&v273 = v149;
            v159 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v275, (unsigned __int8 *)v149, (uint64_t)&std::piecewise_construct, (__int128 **)&v273)+ 40;
            if (v159 != v264)
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v159, *(std::string **)v264, *(std::string **)&v264[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v264[8] - *(_QWORD *)v264) >> 3));
            __p[0] = v264;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            v149 += 3;
          }
        }
        *(_QWORD *)v264 = __x;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v264);
        if (v270[0])
          operator delete(v270[0]);
        v122 = v267;
        v117 = v244;
        v123 = *((_QWORD *)v244 + 4);
      }
LABEL_223:
      v267 = v122 + 1;
      if (v122 + 1 >= (*((_QWORD *)v117 + 5) - v123) >> 4)
        goto LABEL_226;
    }
  }
  v118 = 0;
LABEL_226:
  memset(v264, 0, sizeof(v264));
  LODWORD(v265) = 1065353216;
  v160 = (uint64_t)*v243;
  v161 = v243[1];
  if (*v243 != v161)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v264, v160, v160);
      v160 += 24;
    }
    while ((unsigned __int8 *)v160 != v161);
  }
  *(_OWORD *)__p = 0u;
  v252 = 0u;
  v253 = 1065353216;
  *(_OWORD *)__x = 0u;
  v279 = 0u;
  v280 = 1065353216;
  v162 = (unsigned __int8 *)v254;
  v163 = (unsigned __int8 *)v255;
  while (v162 != v163)
  {
    get_blobs_on_path_helper(v162, v264, &v275, __p, __x);
    v162 += 24;
  }
  if (v118)
  {
    v164 = *((_QWORD *)&v252 + 1);
    do
    {
      if (*((_QWORD *)&v279 + 1))
      {
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v279);
        *(_QWORD *)&v279 = 0;
        v165 = *(_QWORD *)&__x[2];
        if (*(_QWORD *)&__x[2])
        {
          v166 = 0;
          do
            *(_QWORD *)(*(_QWORD *)__x + 8 * v166++) = 0;
          while (v165 != v166);
        }
        *((_QWORD *)&v279 + 1) = 0;
      }
      v167 = (unsigned __int8 *)v254;
      v168 = (unsigned __int8 *)v255;
      while (v167 != v168)
      {
        get_blobs_on_path_helper(v167, v264, &v275, __p, __x);
        v167 += 24;
      }
      v130 = *((_QWORD *)&v252 + 1) == v164;
      v164 = *((_QWORD *)&v252 + 1);
    }
    while (!v130);
  }
  v273 = 0uLL;
  v274 = 0;
  v169 = *(uint64_t **)&v264[16];
  if (*(_QWORD *)&v264[16])
  {
    do
    {
      if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(__p, (uint64_t)(v169 + 2)))
      {
        v170 = (_OWORD *)*((_QWORD *)&v273 + 1);
        if (*((_QWORD *)&v273 + 1) >= v274)
        {
          v172 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v273, (uint64_t)(v169 + 2));
        }
        else
        {
          if (*((char *)v169 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(*((std::string **)&v273 + 1), (const std::string::value_type *)v169[2], v169[3]);
          }
          else
          {
            v171 = *((_OWORD *)v169 + 1);
            *(_QWORD *)(*((_QWORD *)&v273 + 1) + 16) = v169[4];
            *v170 = v171;
          }
          v172 = (std::string *)((char *)v170 + 24);
        }
        *((_QWORD *)&v273 + 1) = v172;
      }
      v169 = (uint64_t *)*v169;
    }
    while (v169);
    if (*((_QWORD *)&v273 + 1) != (_QWORD)v273)
    {
      std::string::basic_string[abi:ne180100]<0>(&v272, "unreached entry points:\n");
      v235 = (const void **)*((_QWORD *)&v273 + 1);
      for (k = (const void **)v273; k != v235; k += 3)
      {
        if (*((char *)k + 23) >= 0)
          v236 = *((unsigned __int8 *)k + 23);
        else
          v236 = (size_t)k[1];
        std::string::basic_string[abi:ne180100]((uint64_t)v270, v236 + 1);
        if ((v271 & 0x80u) == 0)
          v237 = v270;
        else
          v237 = (void **)v270[0];
        if (v236)
        {
          if (*((char *)k + 23) >= 0)
            v238 = k;
          else
            v238 = *k;
          memmove(v237, v238, v236);
        }
        *(_WORD *)((char *)v237 + v236) = 10;
        if ((v271 & 0x80u) == 0)
          v239 = v270;
        else
          v239 = (void **)v270[0];
        if ((v271 & 0x80u) == 0)
          v240 = v271;
        else
          v240 = (std::string::size_type)v270[1];
        std::string::append(&v272, (const std::string::value_type *)v239, v240);
        if ((char)v271 < 0)
          operator delete(v270[0]);
      }
      if ((v272.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v241 = &v272;
      else
        v241 = (std::string *)v272.__r_.__value_.__r.__words[0];
      Espresso::throw_exception_selector<Espresso::invalid_state_error>((const char *)v241);
    }
  }
  v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v272);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v279);
  v173 = *(void **)__x;
  *(_QWORD *)__x = 0;
  if (v173)
    operator delete(v173);
  v174 = v257;
  v175 = v257 + 6;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)(v257 + 6));
  v176 = __p[0];
  __p[0] = 0;
  v177 = (void *)v174[6];
  v174[6] = v176;
  if (v177)
    operator delete(v177);
  v178 = (unint64_t)__p[1];
  v179 = v252;
  v174[8] = v252;
  v180 = v174 + 8;
  *(v180 - 1) = v178;
  __p[1] = 0;
  v181 = *((_QWORD *)&v252 + 1);
  v180[1] = *((_QWORD *)&v252 + 1);
  *((_DWORD *)v180 + 4) = v253;
  if (v181)
  {
    v182 = *(_QWORD *)(v179 + 8);
    if ((v178 & (v178 - 1)) != 0)
    {
      if (v182 >= v178)
        v182 %= v178;
    }
    else
    {
      v182 &= v178 - 1;
    }
    *(_QWORD *)(*v175 + 8 * v182) = v180;
    v252 = 0uLL;
  }
  v183 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
  v185 = v257;
  v186 = v257[31];
  v187 = v257[32];
  *(_QWORD *)__x = v186;
  if (v186 < v187)
  {
    while (1)
    {
      v188 = *(_QWORD *)(*((_QWORD *)v117 + 4) + 16 * v186);
      v189 = (uint64_t *)(v188 + 40);
      if ((*(char *)(v188 + 63) & 0x80000000) == 0)
        break;
      v190 = *(_QWORD *)(v188 + 48);
      if (v190 == 11)
      {
        v189 = (uint64_t *)*v189;
LABEL_281:
        v195 = (uint64_t *)*v189;
        v196 = *(uint64_t *)((char *)v189 + 3);
        if (v195 != (uint64_t *)0x6F6C675F64616F6CLL || v196 != 0x6C61626F6C675F64)
          goto LABEL_285;
        __p[0] = __x;
        v198 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v117 + 96, (unint64_t *)__x, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
        if (v198[4] - v198[3] != 24)
        {
          __p[0] = __x;
          v233 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v117 + 96, (unint64_t *)__x, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
          Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("load_global has %lu outputs", 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v233[4] - v233[3]) >> 3));
        }
        __p[0] = __x;
        v199 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v117 + 96, (unint64_t *)__x, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
        v183 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v257 + 6, (uint64_t)v199);
        if (!v183)
          goto LABEL_285;
        v183 = (Espresso *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(&v275, v199);
        if (!v183)
          goto LABEL_285;
        __p[0] = v199;
        v183 = (Espresso *)std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v275, v199, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        if (*((_QWORD *)v183 + 6) - *((_QWORD *)v183 + 5) != 24)
          goto LABEL_285;
        __p[0] = v199;
        v200 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v275, v199, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        v183 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v257 + 6, *((_QWORD *)v200 + 5));
        if (!v183)
          goto LABEL_285;
LABEL_279:
        v183 = (Espresso *)std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)(v257 + 11), (unint64_t *)__x, __x);
        goto LABEL_285;
      }
      if (v190 == 12)
      {
        v189 = (uint64_t *)*v189;
        goto LABEL_272;
      }
LABEL_285:
      v186 = *(_QWORD *)__x + 1;
      *(_QWORD *)__x = v186;
      v185 = v257;
      v187 = v257[32];
      if (v186 >= v187)
        goto LABEL_293;
    }
    if (*(_BYTE *)(v188 + 63) == 11)
      goto LABEL_281;
    if (*(_BYTE *)(v188 + 63) != 12)
      goto LABEL_285;
LABEL_272:
    v191 = (uint64_t *)*v189;
    v192 = *((unsigned int *)v189 + 2);
    if (v191 != (uint64_t *)0x6C675F65726F7473 || v192 != 1818321519)
      goto LABEL_285;
    __p[0] = __x;
    v183 = (Espresso *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v117 + 56, (unint64_t *)__x, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
    if (*((_QWORD *)v183 + 4) == *((_QWORD *)v183 + 3))
      goto LABEL_285;
    __p[0] = __x;
    v194 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v117 + 56, (unint64_t *)__x, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
    v183 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v257 + 6, v194[3]);
    if (!v183)
      goto LABEL_285;
    goto LABEL_279;
  }
LABEL_293:
  if (*((_BYTE *)v262 + 24))
  {
    v201 = v185[31];
    *(_QWORD *)__x = v201;
    if (v201 < v187)
    {
      do
      {
        v202 = *(_QWORD *)(*((_QWORD *)v117 + 4) + 16 * v201);
        v203 = (_QWORD *)(v202 + 40);
        if (*(char *)(v202 + 63) < 0)
        {
          v204 = *(_QWORD *)(v202 + 48);
          if (v204 != 11)
          {
            if (v204 != 13)
              goto LABEL_317;
            v203 = (_QWORD *)*v203;
            goto LABEL_302;
          }
          v203 = (_QWORD *)*v203;
        }
        else if (*(_BYTE *)(v202 + 63) != 11)
        {
          if (*(_BYTE *)(v202 + 63) != 13)
            goto LABEL_317;
LABEL_302:
          v205 = (_QWORD *)*v203;
          v206 = *(_QWORD *)((char *)v203 + 5);
          if (v205 == (_QWORD *)0x72705F72656E6E69 && v206 == 0x746375646F72705FLL)
            goto LABEL_314;
          goto LABEL_317;
        }
        v208 = (_QWORD *)*v203;
        v209 = *(_QWORD *)((char *)v203 + 3);
        if (v208 == (_QWORD *)0x74756C6F766E6F63 && v209 == 0x6E6F6974756C6F76)
        {
LABEL_314:
          __p[0] = __x;
          v183 = (Espresso *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v117 + 56, (unint64_t *)__x, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
          v185 = v257;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v183 + 4) - *((_QWORD *)v183 + 3)) >> 3) >= 2)
          {
            __p[0] = __x;
            v211 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v117 + 56, (unint64_t *)__x, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
            v183 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v185 + 6, v211[3] + 24);
            v185 = v257;
            if (v183)
            {
              __p[0] = __x;
              v212 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v117 + 56, (unint64_t *)__x, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
              v183 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(v185 + 6), v212[3], v212[3]);
              v185 = v257;
            }
          }
        }
LABEL_317:
        v201 = *(_QWORD *)__x + 1;
        *(_QWORD *)__x = v201;
      }
      while (v201 < v185[32]);
    }
  }
  Espresso::espresso_os_log_subsystem(v183, v184);
  v213 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v213, OS_LOG_TYPE_INFO))
  {
    LOWORD(__x[0]) = 0;
    _os_log_impl(&dword_190DAF000, v213, OS_LOG_TYPE_INFO, "blobs to backprop through: ", (uint8_t *)__x, 2u);
  }

  for (m = (uint64_t *)v257[8]; m; m = (uint64_t *)*m)
  {
    Espresso::espresso_os_log_subsystem(v214, v215);
    v217 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v217, OS_LOG_TYPE_INFO))
    {
      v218 = m + 2;
      if (*((char *)m + 39) < 0)
        v218 = (_QWORD *)*v218;
      __x[0] = 136315138;
      *(_QWORD *)&__x[1] = v218;
      _os_log_impl(&dword_190DAF000, v217, OS_LOG_TYPE_INFO, "%s\t", (uint8_t *)__x, 0xCu);
    }

  }
  Espresso::espresso_os_log_subsystem(v214, v215);
  v219 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v219, OS_LOG_TYPE_INFO))
  {
    LOWORD(__x[0]) = 0;
    _os_log_impl(&dword_190DAF000, v219, OS_LOG_TYPE_INFO, "\n", (uint8_t *)__x, 2u);
  }

  v220 = v257;
  v221 = v258;
  if (v258)
  {
    v222 = (unint64_t *)&v258->__shared_owners_;
    do
      v223 = __ldxr(v222);
    while (__stxr(v223 + 1, v222));
    *(_BYTE *)v242 = 1;
    *(_QWORD *)(v242 + 8) = v220;
    *(_QWORD *)(v242 + 16) = v221;
    do
      v224 = __ldxr(v222);
    while (__stxr(v224 + 1, v222));
    do
      v225 = __ldaxr(v222);
    while (__stlxr(v225 - 1, v222));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  else
  {
    *(_BYTE *)v242 = 1;
    *(_QWORD *)(v242 + 8) = v220;
    *(_QWORD *)(v242 + 16) = 0;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v264);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&v275);
  *(_QWORD *)__x = &v254;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  v226 = v258;
  if (v258)
  {
    v227 = (unint64_t *)&v258->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table((uint64_t)__n);
  v229 = v263;
  if (v263)
  {
    v230 = (unint64_t *)&v263->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
}

void sub_1916BCA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (a55 < 0)
    operator delete(__p);
  if (a61 < 0)
    operator delete(a56);
  a56 = (void *)(v61 - 248);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v61 - 176);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a39);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v61 - 224);
  *(_QWORD *)(v61 - 176) = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v61 - 176));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void visit_program_stacks(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  void *__p;
  char *v22;
  char *v23;
  _QWORD *v24;
  unsigned int v25;

  __p = 0;
  v22 = 0;
  v23 = 0;
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) != v2)
  {
    v5 = 0;
    do
    {
      v6 = Espresso::str_to_type((std::string *)(*(_QWORD *)(v2 + 16 * v5) + 40));
      v25 = v6;
      v24 = (_QWORD *)v5;
      v7 = *(_QWORD *)(a2 + 24);
      if (!v7)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, unsigned int *, _QWORD **, void **))(*(_QWORD *)v7 + 48))(v7, &v25, &v24, &__p);
      if (v6 > 1)
      {
        switch(v6)
        {
          case 0xFFFFFFFF:
          case 2u:
          case 4u:
            goto LABEL_22;
          case 3u:
            v9 = v22 - 16;
            goto LABEL_21;
          default:
            v19 = *(_QWORD *)(v2 + 16 * v5);
            v20 = (_QWORD *)(v19 + 40);
            if (*(char *)(v19 + 63) < 0)
              v20 = (_QWORD *)*v20;
            v24 = v20;
            Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("backprop of control flow instruction %s", &v24);
        }
      }
      v8 = v22;
      if (v22 >= v23)
      {
        v10 = (char *)__p;
        v11 = (v22 - (_BYTE *)__p) >> 4;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v13 = v23 - (_BYTE *)__p;
        if ((v23 - (_BYTE *)__p) >> 3 > v12)
          v12 = v13 >> 3;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = (char *)operator new(16 * v14);
        v16 = &v15[16 * v11];
        *(_DWORD *)v16 = v6;
        *((_QWORD *)v16 + 1) = v5;
        v17 = v16;
        while (v8 != v10)
        {
          v18 = *((_DWORD *)v8 - 4);
          v8 -= 16;
          *((_DWORD *)v17 - 4) = v18;
          v17 -= 16;
          *((_QWORD *)v17 + 1) = *((_QWORD *)v8 + 1);
        }
        v9 = v16 + 16;
        __p = v17;
        v22 = v16 + 16;
        v23 = &v15[16 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_DWORD *)v22 = v6;
        *((_QWORD *)v8 + 1) = v5;
        v9 = v8 + 16;
      }
LABEL_21:
      v22 = v9;
LABEL_22:
      ++v5;
      v2 = *(_QWORD *)(a1 + 32);
    }
    while (v5 < (*(_QWORD *)(a1 + 40) - v2) >> 4);
    if (__p)
    {
      v22 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1916BCFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,char const*,unsigned long>(const char *a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::not_implemented_error>("global %s is stored to %lu times", a1, a2);
}

_QWORD *std::vector<Espresso::layer_nd_shape>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Espresso::layer_nd_shape>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1916BD09C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t get_blobs_on_path_helper(unsigned __int8 *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  char v10;
  unsigned __int8 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 v14;
  char blobs_on_path_helper;
  std::string __p;

  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a5, a1))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    if (std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, a1, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)[40])v10 = 1;
    else
      v10 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a4, (uint64_t)a1) != 0;
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, a1, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)[40] = 0;
    v10 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2, (uint64_t)a1) != 0;
    if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, a1))
    {
      v11 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, a1);
      v12 = (__int128 *)*((_QWORD *)v11 + 5);
      v13 = (__int128 *)*((_QWORD *)v11 + 6);
      while (v12 != v13)
      {
        if (*((char *)v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
        }
        else
        {
          v14 = *v12;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
        }
        blobs_on_path_helper = get_blobs_on_path_helper(&__p, a2, a3, a4, a5);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 |= blobs_on_path_helper;
        v12 = (__int128 *)((char *)v12 + 24);
      }
    }
    if ((v10 & 1) != 0)
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a4, (uint64_t)a1, (uint64_t)a1);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, a1, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)[40] = v10 & 1;
  }
  return v10 & 1;
}

void sub_1916BD264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  int8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v9)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v14 + 16, a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  v16 = (std::string *)(v14 + 16);
  v17 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v18 = *v17;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  v14[40] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v25)
      goto LABEL_33;
    if (prime < *(_QWORD *)&v25)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v25 < 3uLL || (v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < *(_QWORD *)&v25)
LABEL_33:
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *(_QWORD *)v14 = *v30;
LABEL_57:
    *v30 = v14;
    goto LABEL_58;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v29 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v31 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10)
        v31 %= v10;
    }
    else
    {
      v31 &= v10 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_57;
  }
LABEL_58:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1916BD56C(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Espresso::layer_nd_shape>::__init_with_size[abi:ne180100]<Espresso::layer_nd_shape*,Espresso::layer_nd_shape*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<Espresso::layer_nd_shape>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1916BD5EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::str_to_type(std::string *__str)
{
  std::string *v1;
  _BOOL4 v4;
  int v5;
  std::string::size_type size;
  std::string v13;
  char v14;

  v1 = __str;
  std::string::basic_string(&v13, __str, 0, 3uLL, (std::allocator<char> *)&v14);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v13.__r_.__value_.__l.__size_ != 3)
    {
      operator delete(v13.__r_.__value_.__l.__data_);
      return 0xFFFFFFFFLL;
    }
    v4 = *(_WORD *)v13.__r_.__value_.__l.__data_ != 26211 || *(_BYTE *)(v13.__r_.__value_.__r.__words[0] + 2) != 95;
    operator delete(v13.__r_.__value_.__l.__data_);
    if (v4)
      return 0xFFFFFFFFLL;
  }
  else
  {
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) != 3)
      return 0xFFFFFFFFLL;
    if (LOWORD(v13.__r_.__value_.__l.__data_) != 26211 || v13.__r_.__value_.__s.__data_[2] != 95)
      return 0xFFFFFFFFLL;
  }
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    size = v1->__r_.__value_.__l.__size_;
    if (size != 5)
    {
      if (size == 7)
      {
        v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
        goto LABEL_27;
      }
      v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
      if (size != 6)
        goto LABEL_57;
      goto LABEL_49;
    }
    v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
LABEL_42:
    if (LODWORD(v1->__r_.__value_.__l.__data_) == 1767859811 && v1->__r_.__value_.__s.__data_[4] == 102)
      return 0;
    goto LABEL_57;
  }
  v5 = HIBYTE(v1->__r_.__value_.__r.__words[2]);
  if (v5 == 5)
    goto LABEL_42;
  if (v5 == 6)
  {
LABEL_49:
    if (LODWORD(v1->__r_.__value_.__l.__data_) == 1700750947 && WORD2(v1->__r_.__value_.__r.__words[0]) == 25710)
      return 3;
LABEL_57:
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
    Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("gradient of control flow instruct %s", &v13);
  }
  if (v5 != 7)
    goto LABEL_57;
LABEL_27:
  if (LODWORD(v1->__r_.__value_.__l.__data_) == 1818191459
    && *(_DWORD *)((char *)v1->__r_.__value_.__r.__words + 3) == 1886351212)
  {
    return 1;
  }
  if (LODWORD(v1->__r_.__value_.__l.__data_) == 1700750947
    && *(_DWORD *)((char *)v1->__r_.__value_.__r.__words + 3) == 1702063205)
  {
    return 2;
  }
  if (LODWORD(v1->__r_.__value_.__l.__data_) != 1784637027
    || *(_DWORD *)((char *)v1->__r_.__value_.__r.__words + 3) != 1886221674)
  {
    goto LABEL_57;
  }
  return 4;
}

void std::__function::__func<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0,std::allocator<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0,std::allocator<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DAECC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0,std::allocator<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DAECC8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0,std::allocator<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::operator()(uint64_t a1, int *a2, unint64_t *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v5;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *i;
  unint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint8x8_t v46;
  void *v47;
  _QWORD **v48;
  _QWORD *j;
  unint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  _BOOL8 v54;
  unint64_t v55;
  unint64_t v56;
  int8x8_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint8x8_t v63;
  unint64_t v64;
  uint8x8_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v82;
  _QWORD *v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  uint64_t v86;
  unsigned __int8 *v87;
  _QWORD *v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  uint64_t v91;
  unsigned __int8 *v92;
  void *v93;
  unint64_t v94;
  unint64_t *v95;

  v5 = (unint64_t)a4;
  v7 = *a2;
  v8 = *a3;
  v94 = *a3;
  if (v7 != 3)
  {
    if (!v7)
    {
      v9 = a4[1];
      if (v9 != *a4 && *(_DWORD *)(v9 - 16) == 1)
        ++**(_DWORD **)(a1 + 8);
    }
    goto LABEL_169;
  }
  v10 = a4[1];
  v11 = *(uint64_t **)(a1 + 16);
  v12 = *v11;
  v13 = *(_QWORD *)(*v11 + 136);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v13)
        v4 = v8 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v8;
    }
    v15 = *(_QWORD **)(*(_QWORD *)(v12 + 128) + 8 * v4);
    if (v15)
    {
      for (i = (_QWORD *)*v15; i; i = (_QWORD *)*i)
      {
        v17 = i[1];
        if (v17 == v8)
        {
          if (i[2] == v8)
            goto LABEL_79;
        }
        else
        {
          if (v14.u32[0] > 1uLL)
          {
            if (v17 >= v13)
              v17 %= v13;
          }
          else
          {
            v17 &= v13 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  v18 = operator new(0x28uLL);
  *v18 = 0;
  v18[1] = v8;
  v18[2] = v8;
  *((_DWORD *)v18 + 6) = *(_DWORD *)(v10 - 16);
  v18[4] = *(_QWORD *)(v10 - 8);
  v19 = (float)(unint64_t)(*(_QWORD *)(v12 + 152) + 1);
  v20 = *(float *)(v12 + 160);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v13 = *(_QWORD *)(v12 + 136);
    if (*(_QWORD *)&prime > v13)
      goto LABEL_35;
    if (*(_QWORD *)&prime < v13)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(v12 + 152) / *(float *)(v12 + 160));
      if (v13 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v13)
      {
        v13 = *(_QWORD *)(v12 + 136);
      }
      else
      {
        if (prime)
        {
LABEL_35:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = *(void **)(v12 + 128);
          *(_QWORD *)(v12 + 128) = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          *(int8x8_t *)(v12 + 136) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(v12 + 128) + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = *(_QWORD **)(v12 + 144);
          if (v28)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(v12 + 128) + 8 * v29) = v12 + 144;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  v36 = *(_QWORD *)(v12 + 128);
                  if (!*(_QWORD *)(v36 + 8 * v35))
                  {
                    *(_QWORD *)(v36 + 8 * v35) = v28;
                    goto LABEL_60;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*(_QWORD *)(v12 + 128) + 8 * v35);
                  **(_QWORD **)(*(_QWORD *)(v12 + 128) + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_60:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v13 = (unint64_t)prime;
          goto LABEL_64;
        }
        v47 = *(void **)(v12 + 128);
        *(_QWORD *)(v12 + 128) = 0;
        if (v47)
          operator delete(v47);
        v13 = 0;
        *(_QWORD *)(v12 + 136) = 0;
      }
    }
LABEL_64:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v8 >= v13)
        v4 = v8 % v13;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v13 - 1) & v8;
    }
  }
  v37 = *(_QWORD *)(v12 + 128);
  v38 = *(_QWORD **)(v37 + 8 * v4);
  if (v38)
  {
    *v18 = *v38;
LABEL_77:
    *v38 = v18;
    goto LABEL_78;
  }
  *v18 = *(_QWORD *)(v12 + 144);
  *(_QWORD *)(v12 + 144) = v18;
  *(_QWORD *)(v37 + 8 * v4) = v12 + 144;
  if (*v18)
  {
    v39 = *(_QWORD *)(*v18 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v39 >= v13)
        v39 %= v13;
    }
    else
    {
      v39 &= v13 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)(v12 + 128) + 8 * v39);
    goto LABEL_77;
  }
LABEL_78:
  ++*(_QWORD *)(v12 + 152);
  v12 = **(_QWORD **)(a1 + 16);
LABEL_79:
  v40 = *(_QWORD *)(v12 + 248);
  if (v40 <= v8 && v8 < *(_QWORD *)(v12 + 256))
  {
    v41 = *(_QWORD *)(v10 - 8);
    if (v40 > v41)
      *(_QWORD *)(v12 + 248) = v41;
  }
  if (!*(_DWORD *)(v10 - 16))
  {
    v42 = *(_QWORD *)(v5 + 8);
    if ((unint64_t)(v42 - *(_QWORD *)v5) >= 0x11 && *(_DWORD *)(v42 - 32) == 1)
    {
      --**(_DWORD **)(a1 + 8);
      v43 = *(_QWORD *)(v10 - 8);
      v44 = *(_QWORD *)(v42 - 24);
      v45 = *(_QWORD *)(v12 + 176);
      if (v45)
      {
        v46 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
        v46.i16[0] = vaddlv_u8(v46);
        if (v46.u32[0] > 1uLL)
        {
          v5 = *(_QWORD *)(v42 - 24);
          if (v44 >= v45)
            v5 = v44 % v45;
        }
        else
        {
          v5 = (v45 - 1) & v44;
        }
        v48 = *(_QWORD ***)(*(_QWORD *)(v12 + 168) + 8 * v5);
        if (v48)
        {
          for (j = *v48; j; j = (_QWORD *)*j)
          {
            v50 = j[1];
            if (v50 == v44)
            {
              if (j[2] == v44)
                goto LABEL_168;
            }
            else
            {
              if (v46.u32[0] > 1uLL)
              {
                if (v50 >= v45)
                  v50 %= v45;
              }
              else
              {
                v50 &= v45 - 1;
              }
              if (v50 != v5)
                break;
            }
          }
        }
      }
      j = operator new(0x28uLL);
      *j = 0;
      j[1] = v44;
      v51 = *(_QWORD *)(v42 - 24);
      j[3] = 0;
      j[4] = 0;
      j[2] = v51;
      v52 = (float)(unint64_t)(*(_QWORD *)(v12 + 192) + 1);
      v53 = *(float *)(v12 + 200);
      if (v45 && (float)(v53 * (float)v45) >= v52)
      {
LABEL_158:
        v70 = *(_QWORD *)(v12 + 168);
        v71 = *(_QWORD **)(v70 + 8 * v5);
        if (v71)
        {
          *j = *v71;
        }
        else
        {
          *j = *(_QWORD *)(v12 + 184);
          *(_QWORD *)(v12 + 184) = j;
          *(_QWORD *)(v70 + 8 * v5) = v12 + 184;
          if (!*j)
            goto LABEL_167;
          v72 = *(_QWORD *)(*j + 8);
          if ((v45 & (v45 - 1)) != 0)
          {
            if (v72 >= v45)
              v72 %= v45;
          }
          else
          {
            v72 &= v45 - 1;
          }
          v71 = (_QWORD *)(*(_QWORD *)(v12 + 168) + 8 * v72);
        }
        *v71 = j;
LABEL_167:
        ++*(_QWORD *)(v12 + 192);
LABEL_168:
        j[3] = v43;
        j[4] = v8;
        goto LABEL_169;
      }
      v54 = 1;
      if (v45 >= 3)
        v54 = (v45 & (v45 - 1)) != 0;
      v55 = v54 | (2 * v45);
      v56 = vcvtps_u32_f32(v52 / v53);
      if (v55 <= v56)
        v57 = (int8x8_t)v56;
      else
        v57 = (int8x8_t)v55;
      if (*(_QWORD *)&v57 == 1)
      {
        v57 = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&v57 & (*(_QWORD *)&v57 - 1)) != 0)
      {
        v57 = (int8x8_t)std::__next_prime(*(_QWORD *)&v57);
      }
      v45 = *(_QWORD *)(v12 + 176);
      if (*(_QWORD *)&v57 > v45)
        goto LABEL_124;
      if (*(_QWORD *)&v57 < v45)
      {
        v64 = vcvtps_u32_f32((float)*(unint64_t *)(v12 + 192) / *(float *)(v12 + 200));
        if (v45 < 3 || (v65 = (uint8x8_t)vcnt_s8((int8x8_t)v45), v65.i16[0] = vaddlv_u8(v65), v65.u32[0] > 1uLL))
        {
          v64 = std::__next_prime(v64);
        }
        else
        {
          v66 = 1 << -(char)__clz(v64 - 1);
          if (v64 >= 2)
            v64 = v66;
        }
        if (*(_QWORD *)&v57 <= v64)
          v57 = (int8x8_t)v64;
        if (*(_QWORD *)&v57 >= v45)
        {
          v45 = *(_QWORD *)(v12 + 176);
        }
        else
        {
          if (v57)
          {
LABEL_124:
            if (*(_QWORD *)&v57 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v58 = operator new(8 * *(_QWORD *)&v57);
            v59 = *(void **)(v12 + 168);
            *(_QWORD *)(v12 + 168) = v58;
            if (v59)
              operator delete(v59);
            v60 = 0;
            *(int8x8_t *)(v12 + 176) = v57;
            do
              *(_QWORD *)(*(_QWORD *)(v12 + 168) + 8 * v60++) = 0;
            while (*(_QWORD *)&v57 != v60);
            v61 = *(_QWORD **)(v12 + 184);
            if (v61)
            {
              v62 = v61[1];
              v63 = (uint8x8_t)vcnt_s8(v57);
              v63.i16[0] = vaddlv_u8(v63);
              if (v63.u32[0] > 1uLL)
              {
                if (v62 >= *(_QWORD *)&v57)
                  v62 %= *(_QWORD *)&v57;
              }
              else
              {
                v62 &= *(_QWORD *)&v57 - 1;
              }
              *(_QWORD *)(*(_QWORD *)(v12 + 168) + 8 * v62) = v12 + 184;
              v67 = (_QWORD *)*v61;
              if (*v61)
              {
                do
                {
                  v68 = v67[1];
                  if (v63.u32[0] > 1uLL)
                  {
                    if (v68 >= *(_QWORD *)&v57)
                      v68 %= *(_QWORD *)&v57;
                  }
                  else
                  {
                    v68 &= *(_QWORD *)&v57 - 1;
                  }
                  if (v68 != v62)
                  {
                    v69 = *(_QWORD *)(v12 + 168);
                    if (!*(_QWORD *)(v69 + 8 * v68))
                    {
                      *(_QWORD *)(v69 + 8 * v68) = v61;
                      goto LABEL_149;
                    }
                    *v61 = *v67;
                    *v67 = **(_QWORD **)(*(_QWORD *)(v12 + 168) + 8 * v68);
                    **(_QWORD **)(*(_QWORD *)(v12 + 168) + 8 * v68) = v67;
                    v67 = v61;
                  }
                  v68 = v62;
LABEL_149:
                  v61 = v67;
                  v67 = (_QWORD *)*v67;
                  v62 = v68;
                }
                while (v67);
              }
            }
            v45 = (unint64_t)v57;
            goto LABEL_153;
          }
          v93 = *(void **)(v12 + 168);
          *(_QWORD *)(v12 + 168) = 0;
          if (v93)
            operator delete(v93);
          v45 = 0;
          *(_QWORD *)(v12 + 176) = 0;
        }
      }
LABEL_153:
      if ((v45 & (v45 - 1)) != 0)
      {
        if (v44 >= v45)
          v5 = v44 % v45;
        else
          v5 = v44;
      }
      else
      {
        v5 = (v45 - 1) & v44;
      }
      goto LABEL_158;
    }
  }
LABEL_169:
  *(_DWORD *)(**(_QWORD **)(a1 + 24) + 4 * v8) = **(_DWORD **)(a1 + 8);
  v73 = *(_QWORD *)(a1 + 32);
  v95 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v73 + 32) + 16 * v8) + 16);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v73 + 928, (uint64_t)v95, (uint64_t)&std::piecewise_construct, (__int128 **)&v95)[5] = v8;
  v74 = **(_QWORD **)(a1 + 16);
  if (*(_QWORD *)(v74 + 248) > v8 || v8 >= *(_QWORD *)(v74 + 256))
    return;
  v75 = *(_QWORD *)(a1 + 32);
  v76 = *(_QWORD *)(*(_QWORD *)(v75 + 32) + 16 * v8);
  v77 = (_QWORD *)(v76 + 40);
  v78 = *(char *)(v76 + 63);
  if (v78 < 0)
  {
    if (*(_QWORD *)(v76 + 48) != 11)
      goto LABEL_180;
    v77 = (_QWORD *)*v77;
LABEL_176:
    v79 = (_QWORD *)*v77;
    v80 = *(_QWORD *)((char *)v77 + 3);
    if (v79 == (_QWORD *)0x747269765F696870 && v80 == 0x6C6175747269765FLL)
    {
      v95 = &v94;
      v88 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v75 + 56, &v94, (uint64_t)&std::piecewise_construct, (uint64_t **)&v95);
      v89 = (unsigned __int8 *)v88[3];
      v90 = (unsigned __int8 *)v88[4];
      while (v89 != v90)
      {
        v91 = **(_QWORD **)(a1 + 16);
        v92 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 40) + 16), v89);
        if (!v92)
LABEL_199:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v91 + 8, *((_DWORD *)v92 + 10), *((_DWORD *)v92 + 10));
        v89 += 24;
      }
    }
    goto LABEL_180;
  }
  if (v78 == 11)
    goto LABEL_176;
LABEL_180:
  if (**(int **)(a1 + 8) >= 1)
  {
    v82 = *(_QWORD *)(a1 + 32) + 96;
    v95 = &v94;
    v83 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v82, &v94, (uint64_t)&std::piecewise_construct, (uint64_t **)&v95);
    v84 = (unsigned __int8 *)v83[3];
    v85 = (unsigned __int8 *)v83[4];
    while (v84 != v85)
    {
      v86 = **(_QWORD **)(a1 + 16);
      v87 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 40) + 16), v84);
      if (!v87)
        goto LABEL_199;
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v86 + 8, *((_DWORD *)v87 + 10), *((_DWORD *)v87 + 10));
      v84 += 24;
    }
  }
}

void sub_1916BE284(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0,std::allocator<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZL29visit_program_to_prepare_infoRN8Espresso3netERKNSt3__110shared_ptrINS_33analysis_prepare_gradient_builderEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0,std::allocator<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::target_type()
{
}

void std::__shared_ptr_emplace<Espresso::analysis_prepare_gradient_builder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::analysis_prepare_gradient_builder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE490;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_prepare_gradient_builder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0,std::allocator<insert_loop_count_stack(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0,std::allocator<insert_loop_count_stack(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DAEC18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0,std::allocator<insert_loop_count_stack(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DAEC18;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0,std::allocator<insert_loop_count_stack(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (char *)operator new(0x30uLL);
  *(_QWORD *)v7 = &off_1E2DB38C0;
  *((_QWORD *)v7 + 1) = a2;
  *((_QWORD *)v7 + 2) = a3;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v7 + 5) = v6;
  v11 = v7;
  visit_program_stacks(a2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_1916BE478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0,std::allocator<insert_loop_count_stack(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZL23insert_loop_count_stackRN8Espresso3netEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0,std::allocator<insert_loop_count_stack(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target_type()
{
}

void std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1},std::allocator<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1}>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1},std::allocator<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1}>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DB38C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1},std::allocator<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1}>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DB38C0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1},std::allocator<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1}>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::operator()(uint64_t a1, int *a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  _OWORD *v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_size;
  unint64_t v29;
  uint64_t i;
  uint64_t v31;
  std::string *v32;
  void *v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t j;
  uint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::string *v43;
  std::string *v44;
  std::string *v45;
  std::string *v46;
  std::string *v47;
  std::string *v48;
  void *v49;
  void *v50;
  char *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  char v54;
  std::string *v55;
  std::string *v56;
  std::string *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string __p;
  uint64_t v62;
  std::__shared_weak_count *v63;
  std::string __str;
  unint64_t v65;
  std::string **v66;
  std::__shared_weak_count *v67;
  std::string **v68;
  _BYTE v69[40];
  _BYTE v70[32];
  uint64_t v71;
  std::string v72;
  uint64_t v73;
  std::string v74;
  uint64_t v75;
  std::string v76;
  uint64_t v77;
  std::string v78;
  __int128 v79;

  *(_QWORD *)&v79 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = *a3;
  v65 = *a3;
  if (v6 == 1)
  {
    v69[32] = 1;
    *(_DWORD *)&v69[28] = 0;
    memset(v69, 0, 20);
    *(_QWORD *)&v69[20] = 1;
    std::operator+<char>();
    v8 = *(uint64_t **)(a1 + 16);
    std::string::basic_string[abi:ne180100]<0>(&__p, "fill");
    v58 = 0;
    v59 = 0;
    v60 = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v78, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    else
      v78 = __str;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v49 = &v55;
    LOBYTE(v50) = 0;
    v55 = (std::string *)operator new(0x18uLL);
    v56 = v55;
    v57 = v55 + 1;
    v56 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v57, (__int128 *)&v78, &v79, v55);
    Espresso::sequential_builder::add<Espresso::fill_params_t>(&v62, v8, (uint64_t)&__p, (uint64_t)&__str, (uint64_t)v69, v58, v59, (uint64_t *)&v55);
    v9 = v63;
    if (v63)
    {
      p_shared_owners = (unint64_t *)&v63->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v49 = &v55;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v12 = *(_QWORD *)(a1 + 24);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
    v13 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v12, &v65, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
    std::string::operator=(v13 + 1, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v7 = v65;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80);
  v16 = *(_QWORD *)(v14 + 32);
  v15 = *(_QWORD *)(v14 + 40);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(*(_QWORD *)(a1 + 32), v7, &v65)[3] = (v15 - v16) >> 4;
  Espresso::sequential_builder::add_layer_from_network(*(Espresso::sequential_builder **)(a1 + 16), *(Espresso::net **)(a1 + 8), v65);
  if (v6 == 3)
  {
    v21 = a4[1];
    if (*(_DWORD *)(v21 - 16) != 1)
      return;
    v22 = *(_QWORD *)(a1 + 24);
    v23 = (unint64_t *)(v21 - 8);
    *(_QWORD *)v69 = v21 - 8;
    v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v22, (unint64_t *)(v21 - 8), (uint64_t)&std::piecewise_construct, (uint64_t **)v69);
    v25 = v24 + 3;
    v69[0] = 1;
    if (*((char *)v24 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v69[8], (const std::string::value_type *)v24[3], v24[4]);
    }
    else
    {
      *(_OWORD *)&v69[8] = *v25;
      *(_QWORD *)&v69[24] = v24[5];
    }
    *(_QWORD *)&v69[32] = 1;
    Espresso::ssa_blob_name::repr(&__str, (uint64_t)v69);
    if ((v69[31] & 0x80000000) != 0)
      operator delete(*(void **)&v69[8]);
    v69[0] = 1;
    if (*((char *)v24 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v69[8], (const std::string::value_type *)v24[3], v24[4]);
    }
    else
    {
      *(_OWORD *)&v69[8] = *v25;
      *(_QWORD *)&v69[24] = v24[5];
    }
    *(_QWORD *)&v69[32] = 2;
    Espresso::ssa_blob_name::repr(&__p, (uint64_t)v69);
    if ((v69[31] & 0x80000000) != 0)
      operator delete(*(void **)&v69[8]);
    v69[0] = 1;
    if (*((char *)v24 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v69[8], (const std::string::value_type *)v24[3], v24[4]);
    }
    else
    {
      *(_OWORD *)&v69[8] = *v25;
      *(_QWORD *)&v69[24] = v24[5];
    }
    *(_QWORD *)&v69[32] = 3;
    Espresso::ssa_blob_name::repr(&v78, (uint64_t)v69);
    if ((v69[31] & 0x80000000) != 0)
      operator delete(*(void **)&v69[8]);
    v26 = *(uint64_t **)(a1 + 16);
    std::string::basic_string[abi:ne180100]<0>(&v49, "phi_virtual");
    if (*((char *)v24 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v69, (const std::string::value_type *)v24[3], v24[4]);
    }
    else
    {
      *(_OWORD *)v69 = *v25;
      *(_QWORD *)&v69[16] = v24[5];
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v69[24], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v69[24] = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(_QWORD *)v70 = *((_QWORD *)&__str.__r_.__value_.__l + 2);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)&v70[8], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      *(std::string *)&v70[8] = __p;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
    v76.__r_.__value_.__s.__data_[8] = 0;
    v46 = (std::string *)operator new(0x48uLL);
    v47 = v46;
    v48 = v46 + 3;
    v47 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v48, (__int128 *)v69, (__int128 *)&v71, v46);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v74, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
    else
      v74 = v78;
    memset(&v76, 0, sizeof(v76));
    v43 = &v76;
    LOBYTE(v44) = 0;
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v76.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
    v76.__r_.__value_.__r.__words[2] = v76.__r_.__value_.__r.__words[0] + 24;
    v76.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v76.__r_.__value_.__r.__words[2], (__int128 *)&v74, (__int128 *)&v75, (std::string *)v76.__r_.__value_.__l.__data_);
    Espresso::sequential_builder::add<Espresso::phi_virtual_params_t>((uint64_t *)&v43, v26, (uint64_t)&v49, (uint64_t)&v78, (uint64_t)&v66, (uint64_t)v46, (uint64_t)v47, (uint64_t *)&v76);
    v27 = (std::__shared_weak_count *)v44;
    if (v44)
    {
      p_size = &v44->__r_.__value_.__l.__size_;
      do
        v29 = __ldaxr(p_size);
      while (__stlxr(v29 - 1, p_size));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
    for (i = 0; i != -72; i -= 24)
    {
      if ((char)v70[i + 31] < 0)
        operator delete(*(void **)&v70[i + 8]);
    }
    if (SHIBYTE(v51) < 0)
      operator delete(v49);
    std::operator+<char>();
    init_and_push_stack(*(uint64_t **)(a1 + 16), (const std::string *)v69, (uint64_t)&v78, 0);
    v31 = *(_QWORD *)(a1 + 40);
    v49 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(*(_QWORD *)(a1 + 32), *v23, v23)+ 3;
    v32 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v31, (unint64_t *)v49, (uint64_t)&std::piecewise_construct, (uint64_t **)&v49);
    std::string::operator=(v32 + 1, (const std::string *)v69);
    if ((v69[23] & 0x80000000) == 0)
      goto LABEL_112;
    v33 = *(void **)v69;
    goto LABEL_111;
  }
  if (v6)
    return;
  v17 = a4[1];
  if (v17 == *a4 || *(_DWORD *)(v17 - 16) != 1)
    return;
  v18 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v69 = v17 - 8;
  v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v18, (unint64_t *)(v17 - 8), (uint64_t)&std::piecewise_construct, (uint64_t **)v69);
  v20 = v19 + 3;
  v69[0] = 1;
  if (*((char *)v19 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v69[8], (const std::string::value_type *)v19[3], v19[4]);
  }
  else
  {
    *(_OWORD *)&v69[8] = *v20;
    *(_QWORD *)&v69[24] = v19[5];
  }
  *(_QWORD *)&v69[32] = 1;
  Espresso::ssa_blob_name::repr(&__str, (uint64_t)v69);
  if ((v69[31] & 0x80000000) != 0)
    operator delete(*(void **)&v69[8]);
  v69[0] = 1;
  if (*((char *)v19 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v69[8], (const std::string::value_type *)v19[3], v19[4]);
  }
  else
  {
    *(_OWORD *)&v69[8] = *v20;
    *(_QWORD *)&v69[24] = v19[5];
  }
  *(_QWORD *)&v69[32] = 2;
  Espresso::ssa_blob_name::repr(&__p, (uint64_t)v69);
  if ((v69[31] & 0x80000000) != 0)
    operator delete(*(void **)&v69[8]);
  v34 = *(uint64_t **)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(&v78, "phi_virtual");
  if (*((char *)v19 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v69, (const std::string::value_type *)v19[3], v19[4]);
  }
  else
  {
    *(_OWORD *)v69 = *v20;
    *(_QWORD *)&v69[16] = v19[5];
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v69[24], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v69[24] = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)v70 = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v46 = (std::string *)&v49;
  LOBYTE(v47) = 0;
  v49 = operator new(0x30uLL);
  v50 = v49;
  v51 = (char *)v49 + 48;
  v50 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v51, (__int128 *)v69, (__int128 *)&v70[8], (std::string *)v49);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v76, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v76 = __str;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  v74.__r_.__value_.__s.__data_[8] = 0;
  v46 = (std::string *)operator new(0x18uLL);
  v47 = v46;
  v48 = v46 + 1;
  v47 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v48, (__int128 *)&v76, (__int128 *)&v77, v46);
  Espresso::sequential_builder::add<Espresso::phi_virtual_params_t>(&v52, v34, (uint64_t)&v78, (uint64_t)&__str, (uint64_t)&v54, (uint64_t)v49, (uint64_t)v50, (uint64_t *)&v46);
  v35 = v53;
  if (v53)
  {
    v36 = (unint64_t *)&v53->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  for (j = 0; j != -48; j -= 24)
  {
    if ((char)v70[j + 7] < 0)
      operator delete(*(void **)&v69[j + 24]);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  *(_QWORD *)&v69[16] = 897988541;
  v69[24] = 0;
  *(_QWORD *)&v70[4] = 0;
  *(_QWORD *)v69 = 0;
  *(_QWORD *)&v69[8] = 1065353216;
  v39 = *(uint64_t **)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(&v78, "elementwise");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v74, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v74 = __str;
  memset(&v76, 0, sizeof(v76));
  v43 = &v76;
  LOBYTE(v44) = 0;
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v76.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
  v76.__r_.__value_.__r.__words[2] = v76.__r_.__value_.__r.__words[0] + 24;
  v76.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v76.__r_.__value_.__r.__words[2], (__int128 *)&v74, (__int128 *)&v75, (std::string *)v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v72, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v72 = __p;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v66 = &v43;
  LOBYTE(v67) = 0;
  v43 = (std::string *)operator new(0x18uLL);
  v44 = v43;
  v45 = v43 + 1;
  v44 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v45, (__int128 *)&v72, (__int128 *)&v73, v43);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v66, v39, (uint64_t)&v78, (uint64_t)&__p, (uint64_t)v69, (uint64_t)v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_, (uint64_t *)&v43);
  v40 = v67;
  if (v67)
  {
    v41 = (unint64_t *)&v67->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v68 = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    v33 = (void *)v74.__r_.__value_.__r.__words[0];
LABEL_111:
    operator delete(v33);
  }
LABEL_112:
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1916BF088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  *(_QWORD *)(v57 - 192) = v57 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 192));
  if (*(char *)(v57 - 137) < 0)
    operator delete(*(void **)(v57 - 160));
  if (*(char *)(v57 - 73) < 0)
    operator delete(*(void **)(v57 - 96));
  if (a35 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1},std::allocator<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1}>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZL23insert_loop_count_stackRN8Espresso3netEENK3$_0clES1_RNS_18sequential_builderEEUlNS_7cf_typeEmRNSt3__16vectorINS_7cf_headENS6_9allocatorIS8_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1},std::allocator<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1}>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::target_type()
{
}

void init_and_push_stack(uint64_t *a1, const std::string *a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  size_t v11;
  std::string *v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[3];
  std::string *v21;
  std::string *v22;
  std::string *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::string v34;
  _BYTE __p[52];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[21];
  int v41;
  uint64_t v42[3];
  _QWORD v43[3];
  std::string v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::string v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  std::string **v52;
  char v53;
  std::string v54;
  uint64_t v55;
  std::string v56;
  __int128 v57;

  *(_QWORD *)&v57 = *MEMORY[0x1E0C80C00];
  memset(&v47, 0, sizeof(v47));
  v49 = xmmword_191A8AA80;
  v50 = 0x100000001;
  v48 = 1;
  v51 = 0;
  std::string::operator=(&v47, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "store_global");
  std::operator+<char>();
  memset(v43, 0, sizeof(v43));
  memset(v42, 0, sizeof(v42));
  Espresso::sequential_builder::add<Espresso::store_global_params_t>(&v45, a1, (uint64_t)__p, (uint64_t)&v44, (uint64_t)&v47, 0, 0, v42);
  v8 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v44 = *(std::string *)a3;
  if (a4)
  {
    memset(v40, 0, sizeof(v40));
    v39 = 0u;
    v38 = 0u;
    v37 = 0u;
    v36 = 0u;
    v41 = 2;
    memset(__p, 0, sizeof(__p));
    if (*(char *)(a3 + 23) >= 0)
      v11 = *(unsigned __int8 *)(a3 + 23);
    else
      v11 = *(_QWORD *)(a3 + 8);
    v12 = &v34;
    std::string::basic_string[abi:ne180100]((uint64_t)&v34, v11 + 4);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if (v11)
    {
      if (*(char *)(a3 + 23) >= 0)
        v13 = (const void *)a3;
      else
        v13 = *(const void **)a3;
      memmove(v12, v13, v11);
    }
    strcpy((char *)v12 + v11, "_sqz");
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    v44 = v34;
    std::string::basic_string[abi:ne180100]<0>(&v34, "squeeze");
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v56 = *(std::string *)a3;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    v54.__r_.__value_.__s.__data_[8] = 0;
    v29 = (std::string *)operator new(0x18uLL);
    v30 = v29;
    v31 = v29 + 1;
    v30 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v31, (__int128 *)&v56, &v57, v29);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v54, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
    else
      v54 = v44;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v52 = &v26;
    v53 = 0;
    v26 = (std::string *)operator new(0x18uLL);
    v27 = v26;
    v28 = v26 + 1;
    v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v28, (__int128 *)&v54, (__int128 *)&v55, v26);
    Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v32, a1, (uint64_t)&v34, (uint64_t)&v44, (uint64_t)__p, (uint64_t)v29, (uint64_t)v30, (uint64_t *)&v26);
    v14 = v33;
    if (v33)
    {
      v15 = (unint64_t *)&v33->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v52 = &v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  memset(__p, 0, 24);
  *(_OWORD *)&__p[28] = xmmword_191A8AA80;
  *(_QWORD *)&__p[44] = 0x100000001;
  __p[24] = 1;
  LODWORD(v36) = 2;
  std::string::operator=((std::string *)__p, a2);
  std::string::basic_string[abi:ne180100]<0>(&v34, "store_global");
  std::operator+<char>();
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v54, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  else
    v54 = v44;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v52 = &v21;
  v53 = 0;
  v21 = (std::string *)operator new(0x18uLL);
  v22 = v21;
  v23 = v21 + 1;
  v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v23, (__int128 *)&v54, (__int128 *)&v55, v21);
  memset(v20, 0, sizeof(v20));
  Espresso::sequential_builder::add<Espresso::store_global_params_t>(&v24, a1, (uint64_t)&v34, (uint64_t)&v56, (uint64_t)__p, (uint64_t)v21, (uint64_t)v22, v20);
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v52 = (std::string **)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  v52 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
}

void sub_1916BF980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;

  *(_QWORD *)(v58 - 128) = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 128));
  if (*(char *)(v58 - 73) < 0)
    operator delete(*(void **)(v58 - 96));
  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v58 - 217) < 0)
    operator delete(*(void **)(v58 - 240));
  if (*(char *)(v58 - 177) < 0)
    operator delete(*(void **)(v58 - 200));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::squeeze_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1916BFD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::pass_rename_phi_io::~pass_rename_phi_io(Espresso::pass_rename_phi_io *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_rename_phi_io::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_rename_phi_io::run_on_network(Espresso::pass_rename_phi_io *this@<X0>, Espresso::net *a2@<X1>, uint64_t a3@<X8>)
{
  const void *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  char v37;
  char v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int **v51;
  int *v52;
  int *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t *v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  BOOL v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  int **v76;
  int *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t **v81;
  unint64_t *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  int v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t *v91;
  unint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint8x8_t v101;
  void **v102;
  _QWORD *v103;
  unint64_t v104;
  float v105;
  _BOOL8 v106;
  unint64_t v107;
  unint64_t v108;
  int8x8_t prime;
  void *v110;
  void *v111;
  uint64_t v112;
  _QWORD **v113;
  unint64_t v114;
  uint8x8_t v115;
  unint64_t v116;
  uint8x8_t v117;
  uint64_t v118;
  _QWORD *i;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  void *v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  unint64_t *v134;
  unint64_t **v135;
  unint64_t v136;
  unint64_t *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  NSObject *v144;
  Espresso *v145;
  const char *v146;
  unint64_t v147;
  NSObject *v148;
  Espresso *v149;
  const char *v150;
  uint64_t **v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  NSObject *v155;
  NSObject *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t **v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  int *v165;
  int *v166;
  uint64_t v167;
  int *v168;
  int *v169;
  _QWORD *v170;
  _QWORD *v171;
  __int128 *v172;
  __int128 v173;
  int *v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  int v178;
  uint64_t v179;
  char *v180;
  char *v181;
  unint64_t **v182;
  unint64_t *v183;
  unint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  std::string::size_type size;
  std::string *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  std::string::size_type v196;
  std::string *v197;
  uint64_t v198;
  char *v199;
  char *v200;
  __int128 v201;
  __int128 v202;
  uint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  std::string *p_str;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  uint64_t v216;
  int *v217;
  char *v218;
  uint64_t v219;
  _QWORD *v220;
  int *v221;
  char *v222;
  uint64_t **v223;
  _QWORD *v224;
  unint64_t v225;
  std::string v226;
  uint64_t v227;
  std::string __str;
  std::string v229;
  std::string v230;
  unint64_t v231;
  void *v232;
  int *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *__p[2];
  __int128 v239;
  int v240;
  char *v241;
  char *v242;
  unint64_t v243;
  __int128 v244;
  __int128 v245;
  float v246;
  unint64_t v247;
  uint8_t buf[16];
  __int128 v249;
  int v250;
  uint64_t v251;

  v251 = *MEMORY[0x1E0C80C00];
  v5 = (const void *)*((_QWORD *)this + 1);
  if (v5
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v10 = v6[1];
  }
  else
  {
    v7 = 0;
    v10 = 0;
  }
  v213 = v7;
  v11 = (std::__shared_weak_count *)operator new(0x48uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC9E0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D8CA10;
  v211 = v11 + 1;
  v11[2].__shared_weak_owners_ = 0;
  *(_OWORD *)&v11[1].__shared_owners_ = 0u;
  v216 = (uint64_t)&v11[1].__shared_owners_;
  v11[2].std::__shared_count = 0u;
  v214 = v11;
  LODWORD(v11[2].__shared_weak_owners_) = 1065353216;
  Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)a2);
  v13 = (uint64_t)Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
  v224 = (_QWORD *)v13;
  v244 = 0u;
  v245 = 0u;
  v246 = 1.0;
  v241 = 0;
  v242 = 0;
  v243 = 0;
  v225 = v10;
  v16 = *((_QWORD *)a2 + 4);
  v15 = *((_QWORD *)a2 + 5);
  if (v10 >= (v15 - v16) >> 4)
  {
    *(_OWORD *)__p = 0uLL;
    v239 = 0uLL;
    v240 = 1065353216;
    goto LABEL_245;
  }
  do
  {
    v17 = *(_QWORD *)(v16 + 16 * v10);
    v18 = (_QWORD *)(v17 + 40);
    v19 = *(char *)(v17 + 63);
    if (v19 < 0)
    {
      if (*(_QWORD *)(v17 + 48) != 11)
        goto LABEL_228;
      v18 = (_QWORD *)*v18;
    }
    else if (v19 != 11)
    {
      goto LABEL_228;
    }
    v20 = (_QWORD *)*v18;
    v21 = *(_QWORD *)((char *)v18 + 3);
    if (v20 == (_QWORD *)0x747269765F696870 && v21 == 0x6C6175747269765FLL)
    {
      *(_QWORD *)buf = &v225;
      v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 96, &v225, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      Espresso::ssa_blob_name::ssa_blob_name((uint64_t)__p, v23[3]);
      if (!LOBYTE(__p[0]))
        goto LABEL_65;
      *(_QWORD *)buf = &v225;
      v13 = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 56, &v225, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      v24 = *(_QWORD *)(v13 + 24);
      v25 = *(_QWORD *)(v13 + 32);
      if (v24 == v25)
        goto LABEL_225;
      v26 = 1;
      while (1)
      {
        v13 = Espresso::ssa_blob_name::ssa_blob_name((uint64_t)buf, v24);
        v27 = HIBYTE(v239);
        v28 = v239;
        if (buf[0])
          break;
        v33 = *(unsigned __int8 *)(v24 + 23);
        v30 = *(_QWORD *)(v24 + 8);
        if ((v33 & 0x80u) == 0)
          v34 = *(unsigned __int8 *)(v24 + 23);
        else
          v34 = *(_QWORD *)(v24 + 8);
        if (v239 >= 0)
          v28 = HIBYTE(v239);
        if (v34 != v28)
          goto LABEL_56;
        if (v239 >= 0)
          v14 = (unint64_t)&__p[1];
        else
          v14 = (unint64_t)__p[1];
        if ((v33 & 0x80) != 0)
        {
          v36 = *(const void **)v24;
LABEL_55:
          v13 = memcmp(v36, (const void *)v14, v30);
          if (!(_DWORD)v13)
          {
LABEL_57:
            v37 = 0;
            goto LABEL_58;
          }
          goto LABEL_56;
        }
        if (!*(_BYTE *)(v24 + 23))
          goto LABEL_57;
        v35 = 0;
        while (*(unsigned __int8 *)(v24 + v35) == *(unsigned __int8 *)(v14 + v35))
        {
          if (v33 == ++v35)
            goto LABEL_57;
        }
LABEL_56:
        v26 = 0;
        v37 = 1;
LABEL_58:
        if (SHIBYTE(v249) < 0)
          operator delete(*(void **)&buf[8]);
        v24 += 24;
        if (v24 == v25)
          v38 = 1;
        else
          v38 = v37;
        if ((v38 & 1) != 0)
        {
          if ((v26 & 1) == 0)
          {
LABEL_65:
            v39 = v242;
            if ((unint64_t)v242 >= v243)
            {
              v41 = v241;
              v42 = (v242 - v241) >> 3;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v44 = v243 - (_QWORD)v241;
              if ((uint64_t)(v243 - (_QWORD)v241) >> 2 > v43)
                v43 = v44 >> 2;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                v45 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
                v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v45);
              else
                v46 = 0;
              v47 = (char *)(v45 + 8 * v42);
              *(_QWORD *)v47 = v225;
              v40 = v47 + 8;
              while (v39 != v41)
              {
                v48 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *((_QWORD *)v47 - 1) = v48;
                v47 -= 8;
              }
              v241 = v47;
              v243 = v45 + 8 * v46;
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_QWORD *)v242 = v225;
              v40 = v39 + 8;
            }
            v242 = v40;
            memset(buf, 0, sizeof(buf));
            *(_QWORD *)&v249 = 0;
            v49 = v225;
            v50 = v224[13];
            if (0xAAAAAAAAAAAAAAABLL * ((v224[14] - v50) >> 3) <= v225)
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            v51 = (int **)(v50 + 24 * v225);
            v52 = *v51;
            v53 = v51[1];
            if (*v51 != v53)
            {
              v54 = 0;
              while (1)
              {
                v55 = *v52;
                v56 = v224[19];
                if (v55 >= (v224[20] - v56) >> 3)
                  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                v57 = *(_QWORD *)(v56 + 8 * v55);
                v58 = *((_QWORD *)a2 + 4);
                if (v57 >= (*((_QWORD *)a2 + 5) - v58) >> 4)
                  goto LABEL_112;
                v59 = *(_QWORD *)(v58 + 16 * v57);
                v60 = (_QWORD *)(v59 + 40);
                v61 = *(char *)(v59 + 63);
                if (v61 < 0)
                {
                  if (*(_QWORD *)(v59 + 48) == 11)
                  {
                    v60 = (_QWORD *)*v60;
LABEL_91:
                    v62 = (_QWORD *)*v60;
                    v63 = *(_QWORD *)((char *)v60 + 3);
                    if (v62 == (_QWORD *)0x747269765F696870 && v63 == 0x6C6175747269765FLL)
                    {
                      if ((unint64_t)v54 >= (unint64_t)v249)
                      {
                        v66 = *(unint64_t **)buf;
                        v67 = ((uint64_t)v54 - *(_QWORD *)buf) >> 3;
                        v68 = v67 + 1;
                        if ((unint64_t)(v67 + 1) >> 61)
                          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                        v69 = v249 - *(_QWORD *)buf;
                        if ((uint64_t)(v249 - *(_QWORD *)buf) >> 2 > v68)
                          v68 = v69 >> 2;
                        v70 = (unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8;
                        v71 = 0x1FFFFFFFFFFFFFFFLL;
                        if (!v70)
                          v71 = v68;
                        if (v71)
                        {
                          v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v71);
                          v66 = *(unint64_t **)buf;
                          v54 = *(unint64_t **)&buf[8];
                        }
                        else
                        {
                          v72 = 0;
                        }
                        v73 = (unint64_t *)(v71 + 8 * v67);
                        *v73 = v57;
                        v65 = v73 + 1;
                        while (v54 != v66)
                        {
                          v74 = *--v54;
                          *--v73 = v74;
                        }
                        *(_QWORD *)buf = v73;
                        *(_QWORD *)&buf[8] = v65;
                        *(_QWORD *)&v249 = v71 + 8 * v72;
                        if (v66)
                          operator delete(v66);
                      }
                      else
                      {
                        *v54 = v57;
                        v65 = v54 + 1;
                      }
                      *(_QWORD *)&buf[8] = v65;
                      v54 = v65;
                    }
                  }
                }
                else if (v61 == 11)
                {
                  goto LABEL_91;
                }
LABEL_112:
                if (++v52 == v53)
                {
                  v49 = v225;
                  goto LABEL_115;
                }
              }
            }
            v54 = 0;
LABEL_115:
            v75 = v224[10];
            if (0xAAAAAAAAAAAAAAABLL * ((v224[11] - v75) >> 3) <= v49)
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            v76 = (int **)(v75 + 24 * v49);
            v77 = *v76;
            v78 = (unint64_t)v76[1];
            if (*v76 != (int *)v78)
            {
              while (2)
              {
                v79 = *v77;
                v80 = v224[22];
                if (0xAAAAAAAAAAAAAAABLL * ((v224[23] - v80) >> 3) <= v79)
                  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                v81 = (unint64_t **)(v80 + 24 * (int)v79);
                v82 = *v81;
                v83 = v81[1];
LABEL_119:
                if (v82 == v83)
                {
                  if (++v77 == (int *)v78)
                  {
                    v49 = v225;
                    goto LABEL_149;
                  }
                  continue;
                }
                break;
              }
              v84 = *v82;
              v85 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * *v82);
              v86 = (_QWORD *)(v85 + 40);
              v87 = *(char *)(v85 + 63);
              if (v87 < 0)
              {
                if (*(_QWORD *)(v85 + 48) != 11)
                {
LABEL_146:
                  ++v82;
                  goto LABEL_119;
                }
                v86 = (_QWORD *)*v86;
              }
              else if (v87 != 11)
              {
                goto LABEL_146;
              }
              v88 = (_QWORD *)*v86;
              v89 = *(_QWORD *)((char *)v86 + 3);
              if (v88 == (_QWORD *)0x747269765F696870 && v89 == 0x6C6175747269765FLL)
              {
                if ((unint64_t)v54 >= (unint64_t)v249)
                {
                  v92 = *(unint64_t **)buf;
                  v93 = ((uint64_t)v54 - *(_QWORD *)buf) >> 3;
                  v94 = v93 + 1;
                  if ((unint64_t)(v93 + 1) >> 61)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v95 = v249 - *(_QWORD *)buf;
                  if ((uint64_t)(v249 - *(_QWORD *)buf) >> 2 > v94)
                    v94 = v95 >> 2;
                  v70 = (unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8;
                  v96 = 0x1FFFFFFFFFFFFFFFLL;
                  if (!v70)
                    v96 = v94;
                  if (v96)
                  {
                    v96 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v96);
                    v92 = *(unint64_t **)buf;
                    v54 = *(unint64_t **)&buf[8];
                  }
                  else
                  {
                    v97 = 0;
                  }
                  v98 = (unint64_t *)(v96 + 8 * v93);
                  *v98 = v84;
                  v91 = v98 + 1;
                  while (v54 != v92)
                  {
                    v99 = *--v54;
                    *--v98 = v99;
                  }
                  *(_QWORD *)buf = v98;
                  *(_QWORD *)&buf[8] = v91;
                  *(_QWORD *)&v249 = v96 + 8 * v97;
                  if (v92)
                    operator delete(v92);
                }
                else
                {
                  *v54 = v84;
                  v91 = v54 + 1;
                }
                *(_QWORD *)&buf[8] = v91;
                v54 = v91;
              }
              goto LABEL_146;
            }
LABEL_149:
            v100 = *((_QWORD *)&v244 + 1);
            if (*((_QWORD *)&v244 + 1))
            {
              v101 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v244 + 8));
              v101.i16[0] = vaddlv_u8(v101);
              if (v101.u32[0] > 1uLL)
              {
                v78 = v49;
                if (v49 >= *((_QWORD *)&v244 + 1))
                  v78 = v49 % *((_QWORD *)&v244 + 1);
              }
              else
              {
                v78 = (*((_QWORD *)&v244 + 1) - 1) & v49;
              }
              v102 = *(void ***)(v244 + 8 * v78);
              if (v102)
              {
                v103 = *v102;
                if (*v102)
                {
                  do
                  {
                    v104 = v103[1];
                    if (v104 == v49)
                    {
                      if (v103[2] == v49)
                        goto LABEL_221;
                    }
                    else
                    {
                      if (v101.u32[0] > 1uLL)
                      {
                        if (v104 >= *((_QWORD *)&v244 + 1))
                          v104 %= *((_QWORD *)&v244 + 1);
                      }
                      else
                      {
                        v104 &= *((_QWORD *)&v244 + 1) - 1;
                      }
                      if (v104 != v78)
                        break;
                    }
                    v103 = (_QWORD *)*v103;
                  }
                  while (v103);
                }
              }
            }
            v103 = operator new(0x30uLL);
            *v103 = 0;
            v103[1] = v49;
            v103[2] = v49;
            v103[3] = 0;
            v103[4] = 0;
            v103[5] = 0;
            v105 = (float)(unint64_t)(*((_QWORD *)&v245 + 1) + 1);
            if (v100 && (float)(v246 * (float)v100) >= v105)
            {
              v49 = v78;
              goto LABEL_211;
            }
            v106 = (v100 & (v100 - 1)) != 0;
            if (v100 < 3)
              v106 = 1;
            v107 = v106 | (2 * v100);
            v108 = vcvtps_u32_f32(v105 / v246);
            if (v107 <= v108)
              prime = (int8x8_t)v108;
            else
              prime = (int8x8_t)v107;
            if (*(_QWORD *)&prime == 1)
            {
              prime = (int8x8_t)2;
            }
            else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
            {
              prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
              v100 = *((_QWORD *)&v244 + 1);
            }
            if (*(_QWORD *)&prime <= v100)
            {
              if (*(_QWORD *)&prime < v100)
              {
                v116 = vcvtps_u32_f32((float)*((unint64_t *)&v245 + 1) / v246);
                if (v100 < 3
                  || (v117 = (uint8x8_t)vcnt_s8((int8x8_t)v100), v117.i16[0] = vaddlv_u8(v117), v117.u32[0] > 1uLL))
                {
                  v116 = std::__next_prime(v116);
                }
                else
                {
                  v118 = 1 << -(char)__clz(v116 - 1);
                  if (v116 >= 2)
                    v116 = v118;
                }
                if (*(_QWORD *)&prime <= v116)
                  prime = (int8x8_t)v116;
                if (*(_QWORD *)&prime >= v100)
                {
                  v100 = *((_QWORD *)&v244 + 1);
                }
                else
                {
                  if (prime)
                    goto LABEL_178;
                  v124 = (void *)v244;
                  *(_QWORD *)&v244 = 0;
                  if (v124)
                    operator delete(v124);
                  v100 = 0;
                  *((_QWORD *)&v244 + 1) = 0;
                }
              }
            }
            else
            {
LABEL_178:
              if (*(_QWORD *)&prime >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v110 = operator new(8 * *(_QWORD *)&prime);
              v111 = (void *)v244;
              *(_QWORD *)&v244 = v110;
              if (v111)
                operator delete(v111);
              v112 = 0;
              *((int8x8_t *)&v244 + 1) = prime;
              do
                *(_QWORD *)(v244 + 8 * v112++) = 0;
              while (*(_QWORD *)&prime != v112);
              v113 = (_QWORD **)v245;
              if ((_QWORD)v245)
              {
                v114 = *(_QWORD *)(v245 + 8);
                v115 = (uint8x8_t)vcnt_s8(prime);
                v115.i16[0] = vaddlv_u8(v115);
                if (v115.u32[0] > 1uLL)
                {
                  if (v114 >= *(_QWORD *)&prime)
                    v114 %= *(_QWORD *)&prime;
                }
                else
                {
                  v114 &= *(_QWORD *)&prime - 1;
                }
                *(_QWORD *)(v244 + 8 * v114) = &v245;
                for (i = *v113; i; v114 = v120)
                {
                  v120 = i[1];
                  if (v115.u32[0] > 1uLL)
                  {
                    if (v120 >= *(_QWORD *)&prime)
                      v120 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v120 &= *(_QWORD *)&prime - 1;
                  }
                  if (v120 != v114)
                  {
                    if (!*(_QWORD *)(v244 + 8 * v120))
                    {
                      *(_QWORD *)(v244 + 8 * v120) = v113;
                      goto LABEL_203;
                    }
                    *v113 = (_QWORD *)*i;
                    *i = **(_QWORD **)(v244 + 8 * v120);
                    **(_QWORD **)(v244 + 8 * v120) = i;
                    i = v113;
                  }
                  v120 = v114;
LABEL_203:
                  v113 = (_QWORD **)i;
                  i = (_QWORD *)*i;
                }
              }
              v100 = (unint64_t)prime;
            }
            if ((v100 & (v100 - 1)) != 0)
            {
              if (v49 >= v100)
                v49 %= v100;
            }
            else
            {
              v49 &= v100 - 1;
            }
LABEL_211:
            v121 = v244;
            v122 = *(_QWORD **)(v244 + 8 * v49);
            if (v122)
            {
              *v103 = *v122;
              goto LABEL_219;
            }
            *v103 = v245;
            *(_QWORD *)&v245 = v103;
            *(_QWORD *)(v121 + 8 * v49) = &v245;
            if (*v103)
            {
              v123 = *(_QWORD *)(*v103 + 8);
              if ((v100 & (v100 - 1)) != 0)
              {
                if (v123 >= v100)
                  v123 %= v100;
              }
              else
              {
                v123 &= v100 - 1;
              }
              v122 = (_QWORD *)(v244 + 8 * v123);
LABEL_219:
              *v122 = v103;
            }
            ++*((_QWORD *)&v245 + 1);
LABEL_221:
            v13 = (uint64_t)(v103 + 3);
            v14 = *(_QWORD *)buf;
            if (v103 + 3 != (_QWORD *)buf)
            {
              v13 = (uint64_t)std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((_QWORD *)v13, *(char **)buf, *(char **)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
              v14 = *(_QWORD *)buf;
            }
            if (v14)
            {
              *(_QWORD *)&buf[8] = v14;
              operator delete((void *)v14);
            }
          }
LABEL_225:
          if (SHIBYTE(v239) < 0)
            operator delete(__p[1]);
          v10 = v225;
          v16 = *((_QWORD *)a2 + 4);
          v15 = *((_QWORD *)a2 + 5);
          goto LABEL_228;
        }
      }
      v29 = HIBYTE(v249);
      v30 = v249;
      if (v249 >= 0)
        v31 = HIBYTE(v249);
      else
        v31 = v249;
      if (v239 < 0)
        v27 = v239;
      if (v31 != v27)
        goto LABEL_56;
      if (v239 >= 0)
        v14 = (unint64_t)&__p[1];
      else
        v14 = (unint64_t)__p[1];
      if ((HIBYTE(v249) & 0x80) == 0)
      {
        if (!HIBYTE(v249))
          goto LABEL_57;
        v32 = &buf[8];
        while (*v32 == *(unsigned __int8 *)v14)
        {
          ++v32;
          ++v14;
          if (!--v29)
            goto LABEL_57;
        }
        goto LABEL_56;
      }
      v36 = *(const void **)&buf[8];
      goto LABEL_55;
    }
LABEL_228:
    v225 = ++v10;
  }
  while (v10 < (v15 - v16) >> 4);
  v125 = (_QWORD *)v245;
  *(_OWORD *)__p = 0u;
  v239 = 0u;
  v240 = 1065353216;
  if ((_QWORD)v245)
  {
    v126 = 0;
    do
    {
      v127 = v125[2];
      v13 = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>((uint64_t)__p[0], (unint64_t)__p[1], v127);
      if (!v13)
        v13 = (uint64_t)dfs(&v244, (uint64_t)__p, v127, v126++);
      v125 = (_QWORD *)*v125;
    }
    while (v125);
  }
LABEL_245:
  v235 = 0;
  v236 = 0;
  v237 = 0;
  v128 = (unint64_t *)v241;
  v129 = (unint64_t *)v242;
  if (v241 != v242)
  {
    do
    {
      v130 = *v128;
      v13 = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>((uint64_t)__p[0], (unint64_t)__p[1], *v128);
      if (!v13)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v131 = *(_QWORD *)(v13 + 24);
      v14 = v131 + 1;
      v132 = v235;
      if (v131 + 1 > 0xAAAAAAAAAAAAAAABLL * ((v236 - v235) >> 3))
      {
        std::vector<std::vector<unsigned long>>::resize(&v235, v14);
        v132 = v235;
      }
      v133 = (uint64_t *)(v132 + 24 * v131);
      v135 = (unint64_t **)(v133 + 1);
      v134 = (unint64_t *)v133[1];
      v136 = v133[2];
      if ((unint64_t)v134 >= v136)
      {
        v13 = *v133;
        v138 = ((uint64_t)v134 - *v133) >> 3;
        v139 = v138 + 1;
        if ((unint64_t)(v138 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v140 = v136 - v13;
        if (v140 >> 2 > v139)
          v139 = v140 >> 2;
        v70 = (unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8;
        v141 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v70)
          v141 = v139;
        if (v141)
        {
          v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v141);
          v134 = *v135;
          v13 = *v133;
        }
        else
        {
          v14 = 0;
        }
        v142 = (unint64_t *)(v141 + 8 * v138);
        *v142 = v130;
        v137 = v142 + 1;
        while (v134 != (unint64_t *)v13)
        {
          v143 = *--v134;
          *--v142 = v143;
        }
        *v133 = (uint64_t)v142;
        *v135 = v137;
        v133[2] = v141 + 8 * v14;
        if (v13)
          operator delete((void *)v13);
      }
      else
      {
        *v134 = v130;
        v137 = v134 + 1;
      }
      *v135 = v137;
      ++v128;
    }
    while (v128 != v129);
  }
  Espresso::espresso_os_log_subsystem((Espresso *)v13, (const char *)v14);
  v144 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v144, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_190DAF000, v144, OS_LOG_TYPE_INFO, "pass_rename_phi_io: components:\n", buf, 2u);
  }

  if (v236 != v235)
  {
    v147 = 0;
    do
    {
      Espresso::espresso_os_log_subsystem(v145, v146);
      v148 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v148, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v147;
        _os_log_impl(&dword_190DAF000, v148, OS_LOG_TYPE_INFO, "%lu:\t", buf, 0xCu);
      }

      if (0xAAAAAAAAAAAAAAABLL * ((v236 - v235) >> 3) <= v147)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v151 = (uint64_t **)(v235 + 24 * v147);
      v153 = *v151;
      v152 = v151[1];
      while (v153 != v152)
      {
        v154 = *v153;
        Espresso::espresso_os_log_subsystem(v149, v150);
        v155 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v155, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v154;
          _os_log_impl(&dword_190DAF000, v155, OS_LOG_TYPE_INFO, "%lu,\t", buf, 0xCu);
        }

        ++v153;
      }
      Espresso::espresso_os_log_subsystem(v149, v150);
      v156 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v156, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_190DAF000, v156, OS_LOG_TYPE_INFO, "\n", buf, 2u);
      }

      ++v147;
      v157 = v235;
    }
    while (v147 < 0xAAAAAAAAAAAAAAABLL * ((v236 - v235) >> 3));
    if (v236 != v235)
    {
      v158 = 0;
      v159 = (char *)a2 + 56;
      v222 = (char *)a2 + 96;
      v223 = (uint64_t **)((char *)a2 + 184);
      v218 = (char *)a2 + 136;
      while (1)
      {
        v215 = v158;
        v160 = (uint64_t **)(v157 + 24 * v158);
        v232 = 0;
        v233 = 0;
        v234 = 0;
        *(_OWORD *)buf = 0u;
        v249 = 0u;
        v250 = 1065353216;
        v161 = *v160;
        v162 = v160[1];
        v220 = v160 + 1;
        while (v161 != v162)
        {
          v163 = *v161;
          v164 = v224[13] + 24 * *v161;
          v166 = *(int **)v164;
          v165 = *(int **)(v164 + 8);
          while (v166 != v165)
            check_and_add<int>(*v166++, (uint64_t)&v232, buf);
          v167 = v224[10] + 24 * v163;
          v169 = *(int **)v167;
          v168 = *(int **)(v167 + 8);
          while (v169 != v168)
            check_and_add<int>(*v169++, (uint64_t)&v232, buf);
          ++v161;
        }
        v231 = 0;
        v231 = *(_QWORD *)(*v220 - 8);
        v225 = (unint64_t)&v231;
        v171 = v218;
        v170 = v224 + 2;
        v172 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v222, &v231, (uint64_t)&std::piecewise_construct, (uint64_t **)&v225)[3];
        if (*((char *)v172 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v230, *(const std::string::value_type **)v172, *((_QWORD *)v172 + 1));
        }
        else
        {
          v173 = *v172;
          v230.__r_.__value_.__r.__words[2] = *((_QWORD *)v172 + 2);
          *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v173;
        }
        v174 = (int *)v232;
        v217 = v233;
        if (v232 == v233)
          goto LABEL_355;
        v175 = 0;
        do
        {
          v176 = v224[7] + 24 * *v174;
          if (*(char *)(v176 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v229, *(const std::string::value_type **)v176, *(_QWORD *)(v176 + 8));
          }
          else
          {
            v177 = *(_OWORD *)v176;
            v229.__r_.__value_.__r.__words[2] = *(_QWORD *)(v176 + 16);
            *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v177;
          }
          LOBYTE(v225) = 1;
          if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v226, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
          else
            v226 = v230;
          v227 = v175;
          Espresso::ssa_blob_name::repr(&__str, (uint64_t)&v225);
          v219 = v175;
          v221 = v174;
          if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v226.__r_.__value_.__l.__data_);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v170, (unsigned __int8 *)&__str))
          {
            p_str = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            v225 = (unint64_t)p_str;
            Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("blob %s already exists in the network", &v225);
          }
          v225 = (unint64_t)&v229;
          v178 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v170, (unsigned __int8 *)&v229, (uint64_t)&std::piecewise_construct, (__int128 **)&v225)+ 10);
          std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>(v170, (unsigned __int8 *)&v229);
          v225 = (unint64_t)&__str;
          v179 = v178;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v170, (unsigned __int8 *)&__str, (uint64_t)&std::piecewise_construct, (__int128 **)&v225)+ 10) = v178;
          std::string::operator=((std::string *)(v224[7] + 24 * v178), &__str);
          v225 = (unint64_t)&v229;
          v180 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v171, (unsigned __int8 *)&v229, (__int128 **)&v225);
          v225 = (unint64_t)&__str;
          v181 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v171, (unsigned __int8 *)&__str, (__int128 **)&v225);
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v181 + 5, *((_QWORD *)v180 + 5), *((_QWORD *)v180 + 6));
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>(v171, (unsigned __int8 *)&v229);
          v182 = (unint64_t **)(v224[22] + 24 * (int)v179);
          v183 = *v182;
          v184 = v182[1];
LABEL_306:
          if (v183 != v184)
          {
            v247 = *v183;
            v225 = (unint64_t)&v247;
            v185 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v159, &v247, (uint64_t)&std::piecewise_construct, (uint64_t **)&v225)[3];
            v225 = (unint64_t)&v247;
            v186 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v159, &v247, (uint64_t)&std::piecewise_construct, (uint64_t **)&v225)[4];
            while (1)
            {
              if (v185 == v186)
              {
                ++v183;
                goto LABEL_306;
              }
              v187 = *(unsigned __int8 *)(v185 + 23);
              if ((v187 & 0x80u) == 0)
                v188 = *(unsigned __int8 *)(v185 + 23);
              else
                v188 = *(_QWORD *)(v185 + 8);
              size = HIBYTE(v229.__r_.__value_.__r.__words[2]);
              if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = v229.__r_.__value_.__l.__size_;
              if (v188 == size)
              {
                if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v190 = &v229;
                else
                  v190 = (std::string *)v229.__r_.__value_.__r.__words[0];
                if ((v187 & 0x80) != 0)
                {
                  if (memcmp(*(const void **)v185, v190, *(_QWORD *)(v185 + 8)))
                    goto LABEL_326;
LABEL_325:
                  std::string::operator=((std::string *)v185, &__str);
                  goto LABEL_326;
                }
                if (!*(_BYTE *)(v185 + 23))
                  goto LABEL_325;
                v191 = 0;
                while (*(unsigned __int8 *)(v185 + v191) == v190->__r_.__value_.__s.__data_[v191])
                {
                  if (v187 == ++v191)
                    goto LABEL_325;
                }
              }
LABEL_326:
              v185 += 24;
            }
          }
          v247 = *(_QWORD *)(v224[19] + 8 * v179);
          v225 = (unint64_t)&v247;
          v171 = v218;
          v170 = v224 + 2;
          v192 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v222, &v247, (uint64_t)&std::piecewise_construct, (uint64_t **)&v225)[3];
          v225 = (unint64_t)&v247;
          v193 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v222, &v247, (uint64_t)&std::piecewise_construct, (uint64_t **)&v225)[4];
          while (v192 != v193)
          {
            v194 = *(unsigned __int8 *)(v192 + 23);
            if ((v194 & 0x80u) == 0)
              v195 = *(unsigned __int8 *)(v192 + 23);
            else
              v195 = *(_QWORD *)(v192 + 8);
            v196 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
            if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v196 = v229.__r_.__value_.__l.__size_;
            if (v195 == v196)
            {
              if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v197 = &v229;
              else
                v197 = (std::string *)v229.__r_.__value_.__r.__words[0];
              if ((v194 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v192, v197, *(_QWORD *)(v192 + 8)))
                  goto LABEL_347;
LABEL_346:
                std::string::operator=((std::string *)v192, &__str);
                goto LABEL_347;
              }
              if (!*(_BYTE *)(v192 + 23))
                goto LABEL_346;
              v198 = 0;
              while (*(unsigned __int8 *)(v192 + v198) == v197->__r_.__value_.__s.__data_[v198])
              {
                if (v194 == ++v198)
                  goto LABEL_346;
              }
            }
LABEL_347:
            v192 += 24;
          }
          v225 = (unint64_t)&v229;
          v199 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v223, &v229, (__int128 **)&v225);
          v225 = (unint64_t)&__str;
          v200 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v223, &__str, (__int128 **)&v225);
          v201 = *(_OWORD *)(v199 + 56);
          v202 = *(_OWORD *)(v199 + 72);
          *((_QWORD *)v200 + 11) = *((_QWORD *)v199 + 11);
          *(_OWORD *)(v200 + 72) = v202;
          *(_OWORD *)(v200 + 56) = v201;
          if (v200 != v199)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v200 + 96, *((char **)v199 + 12), *((_QWORD *)v199 + 13), (uint64_t)(*((_QWORD *)v199 + 13) - *((_QWORD *)v199 + 12)) >> 2);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>(v223, &v229);
          v225 = (unint64_t)&v229;
          v203 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v216, (uint64_t)&v229, (uint64_t)&std::piecewise_construct, (__int128 **)&v225);
          std::string::operator=((std::string *)(v203 + 5), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v229.__r_.__value_.__l.__data_);
          v175 = v219 + 1;
          v174 = v221 + 1;
        }
        while (v221 + 1 != v217);
LABEL_355:
        if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v230.__r_.__value_.__l.__data_);
        std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)buf);
        if (v232)
        {
          v233 = (int *)v232;
          operator delete(v232);
        }
        v158 = v215 + 1;
        v157 = v235;
        if (v215 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((v236 - v235) >> 3))
          goto LABEL_360;
      }
    }
  }
  do
LABEL_360:
    v204 = __ldxr(v12);
  while (__stxr(v204 + 1, v12));
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = v211;
  *(_QWORD *)(a3 + 16) = v214;
  do
    v205 = __ldxr(v12);
  while (__stxr(v205 + 1, v12));
  do
    v206 = __ldaxr(v12);
  while (__stlxr(v206 - 1, v12));
  if (!v206)
  {
    ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
    std::__shared_weak_count::__release_weak(v214);
  }
  *(_QWORD *)buf = &v235;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)__p);
  if (v241)
    operator delete(v241);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&v244);
  do
    v207 = __ldaxr(v12);
  while (__stlxr(v207 - 1, v12));
  if (!v207)
  {
    ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
    std::__shared_weak_count::__release_weak(v214);
  }
  if (v213)
  {
    v208 = (unint64_t *)&v213->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
}

void sub_1916C136C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  _QWORD *v55;
  unint64_t *v56;
  uint64_t v57;
  void *v59;
  void *v60;
  unint64_t v61;
  unint64_t *p_shared_owners;
  unint64_t v63;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](1, v55);
  v59 = *(void **)(v57 - 144);
  if (v59)
  {
    *(_QWORD *)(v57 - 136) = v59;
    operator delete(v59);
  }
  if (a55 < 0)
    operator delete(__p);
  v60 = *(void **)(v57 - 232);
  if (v60)
  {
    *(_QWORD *)(v57 - 224) = v60;
    operator delete(v60);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table(v57 - 208);
  do
    v61 = __ldaxr(v56);
  while (__stlxr(v61 - 1, v56));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2)
            v7 %= a2;
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *dfs(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *result;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;

  v18 = a3;
  result = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2, a3, &v18);
  result[3] = a4;
  v9 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_17;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = a3;
    if (*(_QWORD *)&v9 <= a3)
      v11 = a3 % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & a3;
  }
  v12 = *(_QWORD **)(*a1 + 8 * v11);
  if (!v12 || (v13 = (_QWORD *)*v12) == 0)
LABEL_17:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  while (1)
  {
    v14 = v13[1];
    if (v14 == a3)
      break;
    if (v10.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v9)
        v14 %= *(_QWORD *)&v9;
    }
    else
    {
      v14 &= *(_QWORD *)&v9 - 1;
    }
    if (v14 != v11)
      goto LABEL_17;
LABEL_16:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_17;
  }
  if (v13[2] != a3)
    goto LABEL_16;
  v15 = (unint64_t *)v13[3];
  v16 = (unint64_t *)v13[4];
  while (v15 != v16)
  {
    v17 = *v15;
    result = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *v15);
    if (!result)
      result = (_QWORD *)dfs(a1, a2, v17, a4);
    ++v15;
  }
  return result;
}

void check_and_add<int>(int a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  int *v7;
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  unint64_t v17;
  int v18;

  if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a3, a1))
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)a3, a1, a1);
    v7 = *(int **)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v7 >= v6)
    {
      v9 = *(int **)a2;
      v10 = ((uint64_t)v7 - *(_QWORD *)a2) >> 2;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v12 = v6 - (_QWORD)v9;
      if (v12 >> 1 > v11)
        v11 = v12 >> 1;
      v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL;
      v14 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v13)
        v14 = v11;
      if (v14)
      {
        v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v14);
        v9 = *(int **)a2;
        v7 = *(int **)(a2 + 8);
      }
      else
      {
        v15 = 0;
      }
      v16 = (int *)(v14 + 4 * v10);
      v17 = v14 + 4 * v15;
      *v16 = a1;
      v8 = v16 + 1;
      while (v7 != v9)
      {
        v18 = *--v7;
        *--v16 = v18;
      }
      *(_QWORD *)a2 = v16;
      *(_QWORD *)(a2 + 8) = v8;
      *(_QWORD *)(a2 + 16) = v17;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v7 = a1;
      v8 = v7 + 1;
    }
    *(_QWORD *)(a2 + 8) = v8;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__shared_ptr_emplace<Espresso::analysis_rename_phi_io>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC9E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::analysis_rename_phi_io>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC9E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_rename_phi_io>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::pass_stack_blobs::~pass_stack_blobs(Espresso::pass_stack_blobs *this)
{
  *(_QWORD *)this = &off_1E2D73298;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 24);
  Espresso::net_pass::~net_pass(this);
}

{
  *(_QWORD *)this = &off_1E2D73298;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 24);
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_stack_blobs::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_stack_blobs::run_on_network(Espresso::pass_stack_blobs *this@<X0>, Espresso::net *a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  _QWORD *v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *i;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  unint64_t v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  int v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  Espresso::pass_stack_blobs *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  int v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  _QWORD *v74;
  __int128 v75;
  __int128 v76;
  int v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _OWORD v81[2];
  int v82;
  __int128 v83;
  __int128 v84;
  int v85;
  _BYTE v86[24];
  _BYTE *v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  Espresso::run_pass_on_network<Espresso::pass_update_absolute_indexes_after_transform>((uint64_t)a2);
  v68 = (char *)Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
  v6 = (const void *)*((_QWORD *)this + 1);
  v66 = a3;
  v67 = this;
  if (v6
  {
    v8 = v7;
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v72 = v7;
    v73 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v65 = v9;
    }
    else
    {
      v65 = 0;
    }
  }
  else
  {
    v65 = 0;
    v8 = 0;
    v72 = 0;
    v73 = 0;
  }
  v83 = 0u;
  v84 = 0u;
  v85 = 1065353216;
  v12 = v8[6];
  v13 = v8[7];
  if (v12 < v13)
  {
    v14 = v68 + 16;
    do
    {
      v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)a2 + 7, v12);
      if (!v15)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v16 = (unsigned __int8 *)v15[3];
      v17 = (unsigned __int8 *)v15[4];
      if (v16 != v17)
      {
        do
        {
          if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v14, v16))
          {
            v18 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v14, v16);
            if (!v18)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            LODWORD(v78) = *((_DWORD *)v18 + 10);
            v19 = v78;
            if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v8 + 1, v78))
            {
              if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v83, v19))
              {
                v20 = std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v83, v19, &v78);
                ++v20[3];
              }
              else
              {
                std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v83, v19, &v78)[3] = 1;
              }
            }
          }
          v16 += 24;
        }
        while (v16 != v17);
        v13 = v8[7];
      }
      ++v12;
    }
    while (v12 < v13);
  }
  memset(v81, 0, sizeof(v81));
  v82 = 1065353216;
  v69 = 0u;
  v70 = 0u;
  v71 = 1065353216;
  v79 = 0u;
  v80 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 1065353216;
  std::deque<unsigned long>::push_back(&v78, v8 + 6);
  v21 = v8[6];
  if (v21 < v8[7])
  {
    v22 = v68 + 16;
    do
    {
      v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v78 + 1)
                                  + (((unint64_t)(*((_QWORD *)&v80 + 1) + v80 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*((_QWORD *)&v80 + 1) + v80 - 1) & 0x1FF));
      v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)a2 + 7, v21);
      if (!v24)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v26 = (unsigned __int8 *)v24[3];
      v25 = (unsigned __int8 *)v24[4];
      while (v26 != v25)
      {
        if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v22, v26))
        {
          v27 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v22, v26);
          if (!v27)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          LODWORD(v74) = *((_DWORD *)v27 + 10);
          v28 = (int)v74;
          if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v83, (int)v74))
          {
            if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v81, v28)
              || v23 < std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)v81, v28, &v74)[3])
            {
              std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)v81, v28, &v74)[3] = v23;
            }
            if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v83, v28)
              && std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v83, v28, &v74)[3])
            {
              v29 = std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v83, v28, &v74);
              --v29[3];
            }
            if (!std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v83, v28, &v74)[3])
            {
              std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)&v75, v28, v28);
              v30 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v83, v28);
              if (v30)
              {
                v31 = *((_QWORD *)&v83 + 1);
                v32 = v30[1];
                v33 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v83 + 8));
                v33.i16[0] = vaddlv_u8(v33);
                if (v33.u32[0] > 1uLL)
                {
                  if (v32 >= *((_QWORD *)&v83 + 1))
                    v32 %= *((_QWORD *)&v83 + 1);
                }
                else
                {
                  v32 &= *((_QWORD *)&v83 + 1) - 1;
                }
                v34 = *(uint64_t **)(v83 + 8 * v32);
                do
                {
                  v35 = v34;
                  v34 = (uint64_t *)*v34;
                }
                while (v34 != v30);
                if (v35 == (uint64_t *)&v84)
                  goto LABEL_54;
                v36 = v35[1];
                if (v33.u32[0] > 1uLL)
                {
                  if (v36 >= *((_QWORD *)&v83 + 1))
                    v36 %= *((_QWORD *)&v83 + 1);
                }
                else
                {
                  v36 &= *((_QWORD *)&v83 + 1) - 1;
                }
                if (v36 != v32)
                {
LABEL_54:
                  if (!*v30)
                    goto LABEL_55;
                  v37 = *(_QWORD *)(*v30 + 8);
                  if (v33.u32[0] > 1uLL)
                  {
                    if (v37 >= *((_QWORD *)&v83 + 1))
                      v37 %= *((_QWORD *)&v83 + 1);
                  }
                  else
                  {
                    v37 &= *((_QWORD *)&v83 + 1) - 1;
                  }
                  if (v37 != v32)
LABEL_55:
                    *(_QWORD *)(v83 + 8 * v32) = 0;
                }
                v38 = *v30;
                if (*v30)
                {
                  v39 = *(_QWORD *)(v38 + 8);
                  if (v33.u32[0] > 1uLL)
                  {
                    if (v39 >= v31)
                      v39 %= v31;
                  }
                  else
                  {
                    v39 &= v31 - 1;
                  }
                  if (v39 != v32)
                  {
                    *(_QWORD *)(v83 + 8 * v39) = v35;
                    v38 = *v30;
                  }
                }
                *v35 = v38;
                --*((_QWORD *)&v84 + 1);
                operator delete(v30);
              }
            }
          }
        }
        v26 += 24;
      }
      v40 = *((_QWORD *)a2 + 4);
      if (v21 >= (*((_QWORD *)a2 + 5) - v40) >> 4)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v41 = Espresso::str_to_type((std::string *)(*(_QWORD *)(v40 + 16 * v21) + 40));
      if (v41 > 1)
      {
        switch(v41)
        {
          case 0xFFFFFFFF:
          case 4u:
            break;
          case 2u:
            --*((_QWORD *)&v80 + 1);
            std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](&v78);
            check_zero_count_blobs_and_mark_covering_block(v23, v81, &v75, (float *)&v69);
            v74 = (_QWORD *)(v21 + 1);
            std::deque<unsigned long>::push_back(&v78, &v74);
            break;
          case 3u:
            --*((_QWORD *)&v80 + 1);
            std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](&v78);
            check_zero_count_blobs_and_mark_covering_block(v23, v81, &v75, (float *)&v69);
            break;
          default:
            v63 = *(_QWORD *)(v40 + 16 * v21);
            v64 = (_QWORD *)(v63 + 40);
            if (*(char *)(v63 + 63) < 0)
              v64 = (_QWORD *)*v64;
            v74 = v64;
            Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("backprop of control flow instruction %s", &v74);
        }
      }
      else
      {
        v74 = (_QWORD *)(v21 + 1);
        std::deque<unsigned long>::push_back(&v78, &v74);
      }
      ++v21;
    }
    while (v21 < v8[7]);
  }
  check_zero_count_blobs_and_mark_covering_block(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v78 + 1)+ (((unint64_t)(*((_QWORD *)&v80 + 1) + v80 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((_QWORD *)&v80 + 1) + v80 - 1) & 0x1FF)), v81, &v75, (float *)&v69);
  --*((_QWORD *)&v80 + 1);
  std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](&v78);
  if (*((_QWORD *)&v76 + 1))
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("%lu blobs are not fully covered", *((uint64_t *)&v76 + 1));
  if (*((_QWORD *)&v80 + 1))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("stack is not cleared at the end of bwd pass");
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v75);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t)&v78);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v81);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v83);
  v78 = 0u;
  v79 = 0u;
  LODWORD(v80) = 1065353216;
  for (i = (uint64_t *)v70; i; i = (uint64_t *)*i)
  {
    v43 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)&v78, i[3], i + 3);
    v44 = v43;
    v45 = (char *)v43[4];
    v46 = v43[5];
    if ((unint64_t)v45 >= v46)
    {
      v48 = (char *)v43[3];
      v49 = (v45 - v48) >> 2;
      if ((unint64_t)(v49 + 1) >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v50 = v46 - (_QWORD)v48;
      v51 = (uint64_t)(v46 - (_QWORD)v48) >> 1;
      if (v51 <= v49 + 1)
        v51 = v49 + 1;
      if (v50 >= 0x7FFFFFFFFFFFFFFCLL)
        v52 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      if (v52)
      {
        v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v52);
        v48 = (char *)v44[3];
        v45 = (char *)v44[4];
      }
      else
      {
        v53 = 0;
      }
      v54 = (_DWORD *)(v52 + 4 * v49);
      *v54 = *((_DWORD *)i + 4);
      v47 = v54 + 1;
      while (v45 != v48)
      {
        v55 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *--v54 = v55;
      }
      v44[3] = v54;
      v44[4] = v47;
      v44[5] = v52 + 4 * v53;
      if (v48)
        operator delete(v48);
    }
    else
    {
      *(_DWORD *)v45 = *((_DWORD *)i + 4);
      v47 = v45 + 4;
    }
    v44[4] = v47;
  }
  v87 = 0;
  v56 = operator new(0x30uLL);
  *v56 = &off_1E2DB1500;
  v56[1] = &v78;
  v56[2] = v68;
  v56[3] = v67;
  v56[4] = a2;
  v56[5] = &v69;
  v87 = v56;
  Espresso::transform_network_inplace((uint64_t)a2, (uint64_t)v86);
  v57 = v87;
  if (v87 == v86)
  {
    v60 = 4;
    v57 = v86;
    v59 = v65;
    v58 = v66;
    goto LABEL_96;
  }
  v59 = v65;
  v58 = v66;
  if (v87)
  {
    v60 = 5;
LABEL_96:
    (*(void (**)(void))(*v57 + 8 * v60))();
  }
  *(_BYTE *)v58 = 1;
  *(_QWORD *)(v58 + 8) = 0;
  *(_QWORD *)(v58 + 16) = 0;
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&v78);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v69);
  if (v59)
  {
    v61 = (unint64_t *)&v59->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_1916C21EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;

  v32 = *(_QWORD **)(v30 - 104);
  if (v32 == v29)
  {
    v33 = 4;
    v32 = (_QWORD *)(v30 - 128);
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_6:
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&a29);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(float *a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_1916C2690(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t check_zero_count_blobs_and_mark_covering_block(unint64_t a1, _QWORD *a2, _QWORD *a3, float *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *i;
  uint64_t *v18;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;

  v30 = 0u;
  v31 = 0u;
  v32 = 1065353216;
  v4 = a3 + 2;
  v5 = (uint64_t *)a3[2];
  if (!v5)
    return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v30);
  do
  {
    v10 = *((int *)v5 + 4);
    v29 = *((_DWORD *)v5 + 4);
    v11 = (int8x8_t)a2[1];
    if (!*(_QWORD *)&v11)
      goto LABEL_53;
    v12 = (uint8x8_t)vcnt_s8(v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = v10;
      if (*(_QWORD *)&v11 <= v10)
        v13 = v10 % *(_QWORD *)&v11;
    }
    else
    {
      v13 = (*(_QWORD *)&v11 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*a2 + 8 * v13);
    if (!v14 || (v15 = *v14) == 0)
LABEL_53:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    while (1)
    {
      v16 = v15[1];
      if (v16 == v10)
        break;
      if (v12.u32[0] > 1uLL)
      {
        if (v16 >= *(_QWORD *)&v11)
          v16 %= *(_QWORD *)&v11;
      }
      else
      {
        v16 &= *(_QWORD *)&v11 - 1;
      }
      if (v16 != v13)
        goto LABEL_53;
LABEL_17:
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_53;
    }
    if (*((_DWORD *)v15 + 4) != (_DWORD)v10)
      goto LABEL_17;
    if (v15[3] >= a1)
    {
      std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a4, v10, &v29)[3] = a1;
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)&v30, v10, v10);
    }
    v5 = (uint64_t *)*v5;
  }
  while (v5);
  for (i = (uint64_t *)v31; i; i = (uint64_t *)*i)
  {
    v18 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a3, *((_DWORD *)i + 4));
    if (v18)
    {
      v19 = (int8x8_t)a3[1];
      v20 = v18[1];
      v21 = (uint8x8_t)vcnt_s8(v19);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        if (v20 >= *(_QWORD *)&v19)
          v20 %= *(_QWORD *)&v19;
      }
      else
      {
        v20 &= *(_QWORD *)&v19 - 1;
      }
      v22 = *(uint64_t **)(*a3 + 8 * v20);
      do
      {
        v23 = v22;
        v22 = (uint64_t *)*v22;
      }
      while (v22 != v18);
      if (v23 == v4)
        goto LABEL_41;
      v24 = v23[1];
      if (v21.u32[0] > 1uLL)
      {
        if (v24 >= *(_QWORD *)&v19)
          v24 %= *(_QWORD *)&v19;
      }
      else
      {
        v24 &= *(_QWORD *)&v19 - 1;
      }
      if (v24 != v20)
      {
LABEL_41:
        if (!*v18)
          goto LABEL_42;
        v25 = *(_QWORD *)(*v18 + 8);
        if (v21.u32[0] > 1uLL)
        {
          if (v25 >= *(_QWORD *)&v19)
            v25 %= *(_QWORD *)&v19;
        }
        else
        {
          v25 &= *(_QWORD *)&v19 - 1;
        }
        if (v25 != v20)
LABEL_42:
          *(_QWORD *)(*a3 + 8 * v20) = 0;
      }
      v26 = *v18;
      if (*v18)
      {
        v27 = *(_QWORD *)(v26 + 8);
        if (v21.u32[0] > 1uLL)
        {
          if (v27 >= *(_QWORD *)&v19)
            v27 %= *(_QWORD *)&v19;
        }
        else
        {
          v27 &= *(_QWORD *)&v19 - 1;
        }
        if (v27 != v20)
        {
          *(_QWORD *)(*a3 + 8 * v27) = v23;
          v26 = *v18;
        }
      }
      *v23 = v26;
      --a3[3];
      operator delete(v18);
    }
  }
  return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v30);
}

void sub_1916C2948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = a1 + 2;
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = a1[1];
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = (void *)*a1;
      *a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*v12;
  if (*v12)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v23) = v12;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*a1 + 8 * v29))
          {
            *(_QWORD *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*a1 + 8 * v29);
          **(_QWORD **)(*a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v5);
  if (v31)
  {
    *i = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *i = *v12;
  *v12 = i;
  *(_QWORD *)(v30 + 8 * v5) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_1916C2D3C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DB1500;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DB1500;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t *v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  std::pair<std::string, std::string> *v15;
  std::pair<std::string, std::string> *v16;
  uint64_t *v17;
  std::vector<std::pair<std::string, std::string>>::pointer end;
  __int128 v19;
  std::string::size_type v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  std::pair<std::string, std::string> *v28;
  uint64_t v29;
  _QWORD *v30;
  std::pair<std::string, std::string> *v31;
  std::pair<std::string, std::string> *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  char *v39;
  int v40;
  _QWORD *v41;
  int *v42;
  int *v43;
  int v44;
  uint64_t v45;
  std::string *v46;
  __int128 v47;
  _BOOL4 v48;
  uint64_t *v49;
  _QWORD *v52;
  std::string v53;
  __int128 __p;
  void *v55;
  void *v56;
  std::vector<std::pair<std::string, std::string>> v57;
  unint64_t v58;
  _OWORD v59[2];
  int v60;
  __int128 *v61;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  v3 = *(_QWORD *)(a1 + 24);
  memset(v59, 0, sizeof(v59));
  v60 = 1065353216;
  v58 = 0;
  if (*(_QWORD *)(a2 + 40) != *(_QWORD *)(a2 + 32))
  {
    v6 = 0;
    v52 = (_QWORD *)(v3 + 24);
    do
    {
      v7 = *(uint64_t **)(a1 + 8);
      v8 = (int8x8_t)v7[1];
      if (v8)
      {
        v9 = (uint8x8_t)vcnt_s8(v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v10 = v6;
          if (v6 >= *(_QWORD *)&v8)
            v10 = v6 % *(_QWORD *)&v8;
        }
        else
        {
          v10 = (*(_QWORD *)&v8 - 1) & v6;
        }
        v11 = *(_QWORD **)(*v7 + 8 * v10);
        if (v11)
        {
          for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
          {
            v13 = i[1];
            if (v13 == v6)
            {
              if (i[2] == v6)
              {
                v41 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v7, v6, &v58);
                v42 = (int *)v41[3];
                v43 = (int *)v41[4];
                while (v42 != v43)
                {
                  v44 = *v42;
                  v45 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56);
                  stack_global_name((std::string *)&__v, *v42);
                  std::to_string(&v53, v44);
                  v46 = std::string::insert(&v53, 0, "popped_blob_");
                  v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
                  v57.__end_cap_.__value_ = (std::pair<std::string, std::string> *)v46->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v57.__begin_ = v47;
                  v46->__r_.__value_.__l.__size_ = 0;
                  v46->__r_.__value_.__r.__words[2] = 0;
                  v46->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v53.__r_.__value_.__l.__data_);
                  v48 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v52, v44) != 0;
                  Espresso::pop_stack(a3, (const std::string *)&__v, (uint64_t)&v57, v48);
                  v53.__r_.__value_.__r.__words[0] = v45 + 24 * v44;
                  v49 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v59, (uint64_t)v53.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v53);
                  std::string::operator=((std::string *)(v49 + 5), (const std::string *)&v57);
                  if (SHIBYTE(v57.__end_cap_.__value_) < 0)
                    operator delete(v57.__begin_);
                  if (SHIBYTE(__v.__end_) < 0)
                    operator delete(__v.__first_);
                  ++v42;
                }
                break;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v13 >= *(_QWORD *)&v8)
                  v13 %= *(_QWORD *)&v8;
              }
              else
              {
                v13 &= *(_QWORD *)&v8 - 1;
              }
              if (v13 != v10)
                break;
            }
          }
        }
      }
      memset(&v57, 0, sizeof(v57));
      __v.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v58;
      v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2 + 56, &v58, (uint64_t)&std::piecewise_construct, (uint64_t **)&__v);
      v15 = (std::pair<std::string, std::string> *)v14[3];
      v16 = (std::pair<std::string, std::string> *)v14[4];
      while (v15 != v16)
      {
        if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v59, (uint64_t)v15))
        {
          __v.__first_ = v15;
          v17 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v59, (uint64_t)v15, (uint64_t)&std::piecewise_construct, (__int128 **)&__v);
          std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,std::string&,0>(&v53, (__int128 *)v15, (__int128 *)(v17 + 5));
          end = v57.__end_;
          if (v57.__end_ >= v57.__end_cap_.__value_)
          {
            v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_ - (char *)v57.__begin_) >> 4);
            v22 = v21 + 1;
            if (v21 + 1 > 0x555555555555555)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 4) > v22)
              v22 = 0x5555555555555556 * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 4);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 4) >= 0x2AAAAAAAAAAAAAALL)
              v23 = 0x555555555555555;
            else
              v23 = v22;
            __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)&v57.__end_cap_;
            if (v23)
              v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::profiler_t::event_t>>(v23);
            else
              v24 = 0;
            v25 = v23 + 48 * v21;
            __v.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v23;
            __v.__begin_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v25;
            __v.__end_cap_.__value_ = (std::pair<std::string, std::string> *)(v23 + 48 * v24);
            v26 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
            *(_QWORD *)(v25 + 16) = *((_QWORD *)&v53.__r_.__value_.__l + 2);
            *(_OWORD *)v25 = v26;
            memset(&v53, 0, sizeof(v53));
            v27 = __p;
            *(_QWORD *)(v25 + 40) = v55;
            *(_OWORD *)(v25 + 24) = v27;
            v55 = 0;
            __p = 0uLL;
            __v.__end_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)(v25 + 48);
            std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(&v57, &__v);
            v28 = v57.__end_;
            std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
            v57.__end_ = v28;
            if (SHIBYTE(v55) < 0)
              operator delete((void *)__p);
          }
          else
          {
            v19 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
            v57.__end_->first.__r_.__value_.__r.__words[2] = v53.__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->first.__r_.__value_.__l.__data_ = v19;
            memset(&v53, 0, sizeof(v53));
            v20 = (std::string::size_type)v55;
            *(_OWORD *)&end->second.__r_.__value_.__l.__data_ = __p;
            end->second.__r_.__value_.__r.__words[2] = v20;
            v55 = 0;
            __p = 0uLL;
            v57.__end_ = end + 1;
          }
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
        }
        v15 = (std::pair<std::string, std::string> *)((char *)v15 + 24);
      }
      Espresso::sequential_builder::add_layer_from_network((uint64_t)a3, a2, v58, (const std::string **)&v57);
      v29 = *(_QWORD *)(a1 + 32);
      v53.__r_.__value_.__r.__words[0] = ((uint64_t)(*(_QWORD *)(v29 + 40) - *(_QWORD *)(v29 + 32)) >> 4) - 1;
      v30 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v29 + 96, v53.__r_.__value_.__r.__words[0], &v53);
      v32 = (std::pair<std::string, std::string> *)v30[3];
      v31 = (std::pair<std::string, std::string> *)v30[4];
      while (v32 != v31)
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 16) + 16), (unsigned __int8 *)v32))goto LABEL_51;
        v33 = *(_QWORD *)(a1 + 16) + 16;
        __v.__first_ = v32;
        v34 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, (unsigned __int8 *)v32, (uint64_t)&std::piecewise_construct, (__int128 **)&__v)+ 10);
        if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(*(_QWORD **)(a1 + 40), v34))goto LABEL_51;
        v35 = v34;
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56);
        stack_global_name((std::string *)&__v, v35);
        v37 = (__int128 *)(v36 + 24 * v35);
        v38 = *(_QWORD *)(a1 + 32) + 136;
        v61 = v37;
        v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v38, (unsigned __int8 *)v37, &v61);
        Espresso::abstract_blob_container::shape((char *)&v53, *((_QWORD *)v39 + 5));
        if (HIDWORD(v53.__r_.__value_.__r.__words[2]) == -1)
        {
          if (LODWORD(v53.__r_.__value_.__r.__words[2]) == 1)
          {
LABEL_46:
            v40 = 0;
            goto LABEL_47;
          }
        }
        else if (SHIDWORD(v53.__r_.__value_.__r.__words[2]) < 5)
        {
          goto LABEL_46;
        }
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v52, v35, v35);
        v40 = 1;
LABEL_47:
        init_and_push_stack(a3, (const std::string *)&__v, (uint64_t)v37, v40);
        if (v55)
        {
          v56 = v55;
          operator delete(v55);
        }
        if (SHIBYTE(__v.__end_) < 0)
          operator delete(__v.__first_);
LABEL_51:
        v32 = (std::pair<std::string, std::string> *)((char *)v32 + 24);
      }
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      v6 = v58 + 1;
      v58 = v6;
    }
    while (v6 < (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v59);
}

void sub_1916C3360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso16pass_stack_blobs14run_on_networkERNS_3netEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target_type()
{
}

void stack_global_name(std::string *a1, int __val)
{
  std::string *v3;
  std::string v4;

  std::to_string(&v4, __val);
  v3 = std::string::insert(&v4, 0, "stack_blob_");
  *a1 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1916C34F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::pop_stack(uint64_t *a1, const std::string *a2, uint64_t a3, int a4)
{
  size_t v7;
  void **v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  std::string v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *__p[2];
  char v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::string v46;
  std::string v47;
  char v48;
  __int128 v49;
  unint64_t v50;
  int v51;
  std::string **v52;
  char v53;
  std::string v54;
  uint64_t v55;
  std::string v56;
  uint64_t v57;
  std::string v58;
  __int128 v59;

  *(_QWORD *)&v59 = *MEMORY[0x1E0C80C00];
  memset(&v47, 0, sizeof(v47));
  v49 = xmmword_191A935B0;
  v50 = 0xFFFFFFFF00000001;
  v48 = 1;
  v51 = 3;
  std::string::operator=(&v47, a2);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v46 = *(std::string *)a3;
  if (a4)
  {
    if (*(char *)(a3 + 23) >= 0)
      v7 = *(unsigned __int8 *)(a3 + 23);
    else
      v7 = *(_QWORD *)(a3 + 8);
    v8 = v27;
    std::string::basic_string[abi:ne180100]((uint64_t)v27, v7 + 6);
    if (SBYTE7(v28) < 0)
      v8 = (void **)v27[0];
    if (v7)
    {
      if (*(char *)(a3 + 23) >= 0)
        v9 = (const void *)a3;
      else
        v9 = *(const void **)a3;
      memmove(v8, v9, v7);
    }
    strcpy((char *)v8 + v7, "_sqzed");
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)v27;
    v46.__r_.__value_.__r.__words[2] = v28;
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "load_global");
  std::operator+<char>();
  v39 = 0;
  v40 = 0;
  v41 = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v58, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    v58 = v46;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  v24.__r_.__value_.__s.__data_[8] = 0;
  v36 = (std::string *)operator new(0x18uLL);
  v37 = v36;
  v38 = v36 + 1;
  v37 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v38, (__int128 *)&v58, &v59, v36);
  Espresso::sequential_builder::add<Espresso::load_global_params_t>(&v44, a1, (uint64_t)v27, (uint64_t)__p, (uint64_t)&v47, v39, v40, (uint64_t *)&v36);
  v10 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  if (v43 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v28) < 0)
  {
    operator delete(v27[0]);
    if (!a4)
      goto LABEL_55;
  }
  else if (!a4)
  {
    goto LABEL_55;
  }
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  v28 = 0u;
  v29 = 0u;
  *(_OWORD *)v27 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
  std::operator+<char>();
  v13 = std::string::append(&v24, "_unsqz");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v56, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    v56 = v46;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  v54.__r_.__value_.__s.__data_[8] = 0;
  v21 = (std::string *)operator new(0x18uLL);
  v22 = v21;
  v23 = v21 + 1;
  v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v23, (__int128 *)&v56, (__int128 *)&v57, v21);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v54 = *(std::string *)a3;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v52 = &v18;
  v53 = 0;
  v18 = (std::string *)operator new(0x18uLL);
  v19 = v18;
  v20 = v18 + 1;
  v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, (__int128 *)&v54, (__int128 *)&v55, v18);
  Espresso::sequential_builder::add<Espresso::expand_dims_params_t>(&v25, a1, (uint64_t)__p, (uint64_t)&v58, (uint64_t)v27, (uint64_t)v21, (uint64_t)v22, (uint64_t *)&v18);
  v15 = v26;
  if (v26)
  {
    v16 = (unint64_t *)&v26->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v52 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v43 < 0)
    operator delete(__p[0]);
LABEL_55:
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
}

void sub_1916C3A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  *(_QWORD *)(v63 - 176) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v63 - 176));
  if (*(char *)(v63 - 121) < 0)
    operator delete(*(void **)(v63 - 144));
  if (*(char *)(v63 - 89) < 0)
    operator delete(*(void **)(v63 - 112));
  if (a21 < 0)
    operator delete(__p);
  if (a55 < 0)
    operator delete(a50);
  if (a63 < 0)
    operator delete(a58);
  if (*(char *)(v63 - 225) < 0)
    operator delete(*(void **)(v63 - 248));
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,std::string&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1916C3BF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::vector<std::pair<std::string, std::string>>::pointer begin;
  std::pair<std::string, std::string> *end;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v4;
  std::pair<std::string, std::string> *v5;
  __int128 v6;
  __int128 v7;
  std::pair<std::string, std::string> *v8;
  std::pair<std::string, std::string> *v9;
  std::pair<std::string, std::string> *value;

  begin = this->__begin_;
  end = this->__end_;
  v4 = __v->__begin_;
  if (end == this->__begin_)
  {
    v5 = __v->__begin_;
  }
  else
  {
    do
    {
      v5 = v4 - 1;
      v6 = *(_OWORD *)&end[-1].first.__r_.__value_.__l.__data_;
      v4[-1].first.__r_.__value_.__r.__words[2] = end[-1].first.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v4[-1].first.__r_.__value_.__l.__data_ = v6;
      end[-1].first.__r_.__value_.__l.__size_ = 0;
      end[-1].first.__r_.__value_.__r.__words[2] = 0;
      end[-1].first.__r_.__value_.__r.__words[0] = 0;
      v7 = *(_OWORD *)&end[-1].second.__r_.__value_.__l.__data_;
      v4[-1].second.__r_.__value_.__r.__words[2] = end[-1].second.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v4[-1].second.__r_.__value_.__l.__data_ = v7;
      end[-1].second.__r_.__value_.__l.__size_ = 0;
      end[-1].second.__r_.__value_.__r.__words[2] = 0;
      end[-1].second.__r_.__value_.__r.__words[0] = 0;
      --v4;
      --end;
    }
    while (end != begin);
  }
  __v->__begin_ = v5;
  v8 = this->__begin_;
  this->__begin_ = v5;
  __v->__begin_ = v8;
  v9 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v9;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string, std::string>>::pointer i;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer begin;

  begin = this->__begin_;
  for (i = this->__end_; i != begin; i = this->__end_)
  {
    this->__end_ = i - 1;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)&i[-1]);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void Espresso::sequential_builder::add<Espresso::expand_dims_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1916C3EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::blob_container_array::~blob_container_array(Espresso::blob_container_array *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D85F28;
  v2 = (void **)((char *)this + 168);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::abstract_blob_container::~abstract_blob_container(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D85F28;
  v2 = (void **)((char *)this + 168);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::abstract_blob_container::~abstract_blob_container(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::blob_container_array::resize(_QWORD *a1, const Espresso::layer_shape *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64x2_t *v6;

  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  v3 = Espresso::blob_container_array::size((Espresso::blob_container_array *)a1);
  v4 = a1[21];
  v5 = a1[22];
  v6 = (int64x2_t *)(a1 + 21);
  if (v3 != (v5 - v4) >> 4)
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::resize(v6, v3);
}

uint64_t Espresso::blob_container_array::platform(Espresso::blob_container_array *this)
{
  return (***(uint64_t (****)(_QWORD))(*((_QWORD *)this + 9) + 8))(*(_QWORD *)(*((_QWORD *)this + 9) + 8));
}

uint64_t Espresso::blob_container_array::compute_path(Espresso::blob_container_array *this)
{
  return *((unsigned int *)this + 40);
}

void Espresso::blob_container_array::__copy_to_host(Espresso::blob_container_array *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int *v9;
  int64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD v14[3];
  _QWORD v15[2];
  int v16;
  int v17;
  void *__p[3];

  v5 = *a3;
  if (!*a3)
  {
    (*(void (**)(void **__return_ptr, Espresso::blob_container_array *))(*(_QWORD *)a1 + 56))(__p, a1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)__p);
    v6 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v7 = (unint64_t *)((char *)__p[1] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v5 = *a3;
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, (const void *)(v5 + 8), v5 + 24, 4uLL);
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v9 = (int *)__p[0];
  v10 = (char *)__p[1] - (char *)__p[0];
  if (__p[1] != __p[0])
  {
    v11 = v10 >> 2;
    if ((unint64_t)(v10 >> 2) <= 1)
      v11 = 1;
    v12 = v15;
    do
    {
      v13 = *v9++;
      *v12++ = v13;
      --v11;
    }
    while (v11);
  }
  v17 = (unint64_t)v10 >> 2;
  memset(v14, 0, sizeof(v14));
  Espresso::blob_container_array::gather(a1, (uint64_t)a3, (int *)v15, v14);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1916C4188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::blob_container_array::__copy_from_host(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  _QWORD v12[3];
  _QWORD v13[2];
  int v14;
  int v15;
  void *__p;
  _BYTE *v17;
  uint64_t v18;

  v6 = *a3;
  v17 = 0;
  v18 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)(v6 + 8), v6 + 24, 4uLL);
  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v7 = (int *)__p;
  v8 = v17 - (_BYTE *)__p;
  if (v17 != __p)
  {
    v9 = v8 >> 2;
    if ((unint64_t)(v8 >> 2) <= 1)
      v9 = 1;
    v10 = v13;
    do
    {
      v11 = *v7++;
      *v10++ = v11;
      --v9;
    }
    while (v9);
  }
  v15 = (unint64_t)v8 >> 2;
  memset(v12, 0, sizeof(v12));
  Espresso::blob_container_array::scatter(a1, a2, (uint64_t)a3, (int *)v13, v12);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_1916C4264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::blob_container_array::scatter(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, _QWORD *a5)
{
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18[6];
  _BYTE v19[20];
  int v20;
  void *__p;
  void *v22;

  if (a4[5])
    v9 = *a4;
  else
    v9 = 1;
  v10 = v9;
  v11 = a5[1] - *a5;
  if (v11)
  {
    if (v11 >> 2 > v10)
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,unsigned long const&>("blob_container_array_scatter: Invalid number of value blobs %ld != %ld", v10, v11 >> 2);
    v10 = v11 >> 2;
  }
  get_value_shape((const Espresso::layer_nd_shape *)v18, (uint64_t)a4);
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v18, 0, (uint64_t)v19);
  if (v20 != -1 && v20 < 1)
  {
    v13 = 1;
    if (!v10)
      goto LABEL_19;
  }
  else
  {
    v13 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v19);
    if (!v10)
      goto LABEL_19;
  }
  v14 = 0;
  v15 = 0;
  v16 = 4 * v13;
  do
  {
    if (a5[1] == *a5)
      v17 = v15;
    else
      v17 = *(_DWORD *)(*a5 + 4 * v15);
    v18[0] = v17;
    Espresso::blob_container_array::put(a1, a2, *(_QWORD *)(*(_QWORD *)a3 + 24) + v14, (Espresso::layer_shape *)v19, v18);
    ++v15;
    v14 += v16;
  }
  while (v10 != v15);
LABEL_19:
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_1916C43B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void get_value_shape(const Espresso::layer_nd_shape *a1, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  std::vector<int> __p;

  Espresso::layer_nd_shape::shape_vector(&__p, a2);
  v9 = 0;
  v10 = 0;
  v8 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v8, __p.__begin_ + 1, (uint64_t)__p.__end_, __p.__end_ - (__p.__begin_ + 1));
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v4 = v8;
  v3 = v9;
  v5 = v9 - v8;
  if (v9 == v8)
  {
    *((_DWORD *)a1 + 5) = (unint64_t)v5 >> 2;
    if (!v3)
      goto LABEL_7;
  }
  else
  {
    v6 = v5 >> 2;
    v7 = (unint64_t)v5 >> 2;
    if ((unint64_t)(v5 >> 2) <= 1)
      v6 = 1;
    memcpy(a1, v8, 4 * v6);
    *((_DWORD *)a1 + 5) = v7;
  }
  v9 = v4;
  operator delete(v4);
LABEL_7:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1916C4488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::blob_container_array::put(uint64_t a1, uint64_t a2, uint64_t a3, Espresso::layer_shape *a4, int *a5)
{
  unint64_t v10;
  _BOOL4 v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  _QWORD *v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  _DWORD v41[6];
  __int128 v42;
  int v43;
  void *__p;
  void *v45;
  _DWORD v46[6];

  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v46, a4, 0);
  v10 = Espresso::blob_container_array::size((Espresso::blob_container_array *)a1);
  Espresso::blob_container_array::element_shape((Espresso::blob_container_array *)&v42, a1);
  v11 = 0;
  if (v46[5] != v43)
  {
LABEL_10:
    if (v10)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Inserted element should have same shape as existing elements in blob_array");
    goto LABEL_11;
  }
  if (!v43)
  {
    v11 = 1;
    goto LABEL_11;
  }
  if ((_DWORD)v42 != v46[0])
  {
    v11 = 0;
    goto LABEL_10;
  }
  v12 = 0;
  while (v43 - 1 != v12)
  {
    v13 = *((_DWORD *)&v42 + v12 + 1);
    v14 = v46[++v12];
    if (v13 != v14)
      goto LABEL_46;
  }
  v12 = v43;
LABEL_46:
  v11 = v12 >= v43;
  if (!v11)
    goto LABEL_10;
LABEL_11:
  v15 = *a5;
  if (!v11 || v10 <= v15)
  {
    if (v10 <= v15)
      v16 = (int)v15 + 1;
    else
      v16 = v10;
    get_array_shape(v41, (const Espresso::layer_nd_shape *)v16, (uint64_t)v46);
    *(int32x2_t *)&v17 = Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v41, 0, (uint64_t)&v42);
    v39 = 0;
    v40 = 0;
    (*(void (**)(uint64_t, __int128 *, uint64_t *, double))(*(_QWORD *)a1 + 16))(a1, &v42, &v39, v17);
    v18 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (__p)
    {
      v45 = __p;
      operator delete(__p);
    }
    v15 = *a5;
  }
  v21 = (uint64_t *)(*(_QWORD *)(a1 + 168) + 16 * v15);
  v22 = *v21;
  if (!*v21)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 72) + 8)
                                                                            + 24))(&v42, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8), a1 + 72, *(unsigned int *)(a1 + 160));
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v21, &v42);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v22 = *v21;
  }
  Espresso::abstract_blob_container::shape((char *)&v42, v22);
  v26 = Espresso::layer_shape::operator==((uint64_t)&v42, (uint64_t)a4);
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  if (!v26)
  {
    v27 = *v21;
    v37 = 0;
    v38 = 0;
    (*(void (**)(uint64_t, Espresso::layer_shape *, uint64_t *))(*(_QWORD *)v27 + 16))(v27, a4, &v37);
    v28 = v38;
    if (v38)
    {
      v29 = (unint64_t *)&v38->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  v31 = *((_DWORD *)a4 + 4) * *((_DWORD *)a4 + 3);
  v32 = operator new(0x60uLL);
  v32[1] = 0;
  v32[2] = 0;
  *v32 = &off_1E2DBECA8;
  v33 = *((_DWORD *)a4 + 2);
  *((_OWORD *)v32 + 4) = 0u;
  *((_OWORD *)v32 + 5) = 0u;
  v32[4] = *(_QWORD *)a4;
  *((_DWORD *)v32 + 10) = v33;
  *((_DWORD *)v32 + 11) = v31;
  v32[6] = a3;
  *((_BYTE *)v32 + 56) = 0;
  *((_QWORD *)&v42 + 1) = v32;
  v32[3] = &off_1E2DA11F0;
  *(_QWORD *)&v42 = v32 + 3;
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)*v21 + 48))(*v21, a2, &v42);
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_1916C47E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob_container_array::size(Espresso::blob_container_array *this)
{
  char v3[40];
  void *__p;
  void *v5;
  _DWORD v6[6];

  Espresso::abstract_blob_container::shape(v3, (uint64_t)this);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v6, (const Espresso::layer_shape *)v3, 0);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  if (v6[5])
    return v6[0];
  else
    return 0;
}

void sub_1916C4888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::blob_container_array::element_shape(Espresso::blob_container_array *this, uint64_t a2)
{
  char v3[40];
  void *__p;
  void *v5;
  _BYTE v6[24];

  Espresso::abstract_blob_container::shape(v3, a2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v6, (const Espresso::layer_shape *)v3, 0);
  get_value_shape(this, (uint64_t)v6);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_1916C48FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void get_array_shape(_DWORD *a1, const Espresso::layer_nd_shape *a2, uint64_t a3)
{
  std::vector<int>::value_type v3;
  std::vector<int>::const_iterator v5;
  std::vector<int>::pointer end;
  int *begin;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  std::vector<int>::value_type __x;
  std::vector<int> v12;

  v3 = (int)a2;
  Espresso::layer_nd_shape::shape_vector(&v12, a3);
  v5.__i_ = v12.__begin_;
  __x = v3;
  std::vector<int>::insert(&v12, v5, &__x);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  begin = v12.__begin_;
  end = v12.__end_;
  v8 = (char *)v12.__end_ - (char *)v12.__begin_;
  if (v12.__end_ == v12.__begin_)
  {
    a1[5] = (unint64_t)v8 >> 2;
    if (!end)
      return;
  }
  else
  {
    v9 = v8 >> 2;
    v10 = (unint64_t)v8 >> 2;
    if ((unint64_t)(v8 >> 2) <= 1)
      v9 = 1;
    memcpy(a1, v12.__begin_, 4 * v9);
    a1[5] = v10;
  }
  v12.__end_ = begin;
  operator delete(begin);
}

void sub_1916C49BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::blob_container_array::gather(Espresso::blob_container_array *a1, uint64_t a2, int *a3, _QWORD *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19[40];
  void *__p;
  void *v21;
  _BYTE v22[24];
  int v23[6];
  _BYTE v24[40];
  void *v25;
  void *v26;

  Espresso::abstract_blob_container::shape(v19, (uint64_t)a1);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v22, (const Espresso::layer_shape *)v19, 0);
  get_value_shape((const Espresso::layer_nd_shape *)v23, (uint64_t)v22);
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v23, 0, (uint64_t)v24);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  get_value_shape((const Espresso::layer_nd_shape *)v23, (uint64_t)a3);
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v23, 0, (uint64_t)v19);
  v8 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v19);
  if (v8 < Espresso::layer_shape::total_dim((Espresso::layer_shape *)v24)
    || (v9 = *a3, v10 = a4[1], v11 = (v10 - *a4) >> 2, v11 > v9))
  {
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("blob_container_array_gather: Blob shape not compatible for gathering blob array");
  }
  if (a3[5])
  {
    v12 = 0;
    v13 = *(int *)(*(_QWORD *)a2 + 8);
    do
    {
      v13 *= *(int *)(*(_QWORD *)a2 + 12 + v12);
      v12 += 4;
    }
    while (v12 != 12);
    v14 = v13 / v9;
  }
  else
  {
    v14 = 1;
  }
  if (v10 == *a4)
  {
    v11 = (uint64_t)(*((_QWORD *)a1 + 22) - *((_QWORD *)a1 + 21)) >> 4;
    if (!v11)
      goto LABEL_19;
LABEL_14:
    v15 = 0;
    v16 = 0;
    v17 = 4 * v14;
    do
    {
      if (a4[1] == *a4)
        v18 = v16;
      else
        v18 = *(_DWORD *)(*a4 + 4 * v16);
      v23[0] = v18;
      Espresso::blob_container_array::get(a1, (float *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + v15), (const Espresso::layer_shape *)v19, v23);
      ++v16;
      v15 += v17;
    }
    while (v11 != v16);
    goto LABEL_19;
  }
  if (v11)
    goto LABEL_14;
LABEL_19:
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void sub_1916C4B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void Espresso::blob_container_array::get(Espresso::blob_container_array *this, float *a2, const Espresso::layer_shape *a3, const int *a4)
{
  unint64_t v6;
  uint64_t v7;
  int v10;
  double v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  char v30[40];
  void *__p;
  void *v32;
  _BYTE v33[20];
  int v34;

  v6 = *a4;
  v7 = *((_QWORD *)this + 21);
  if (v6 >= (*((_QWORD *)this + 22) - v7) >> 4)
  {
    Espresso::abstract_blob_container::shape(v30, (uint64_t)this);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v33, (const Espresso::layer_shape *)v30, 0);
    v10 = v6 + 1;
    if (__p)
    {
      v32 = __p;
      operator delete(__p);
    }
    if (!v34)
    {
      *(_QWORD *)&v33[12] = 0;
      *(_QWORD *)&v33[4] = 0;
      v34 = 1;
    }
    *(_DWORD *)v33 = v10;
    *(int32x2_t *)&v11 = Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v33, 0, (uint64_t)v30);
    v28 = 0;
    v29 = 0;
    (*(void (**)(Espresso::blob_container_array *, char *, uint64_t *, double))(*(_QWORD *)this + 16))(this, v30, &v28, v11);
    v12 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (__p)
    {
      v32 = __p;
      operator delete(__p);
    }
    v6 = *a4;
    v7 = *((_QWORD *)this + 21);
  }
  v15 = (uint64_t *)(v7 + 16 * v6);
  if (*v15)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v15 + 32))(*v15))
    {
      *(_QWORD *)v33 = 0;
      *(_QWORD *)&v33[8] = 0;
    }
    else
    {
      v17 = *(_QWORD *)(*v15 + 160);
      v16 = *(std::__shared_weak_count **)(*v15 + 168);
      *(_QWORD *)v33 = v17;
      *(_QWORD *)&v33[8] = v16;
      if (v16)
      {
        v18 = (unint64_t *)&v16->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      if (v17)
      {
        Espresso::abstract_blob_container::shape(v30, *v15);
        v20 = Espresso::layer_shape::operator==((uint64_t)a3, (uint64_t)v30);
        if (__p)
        {
          v32 = __p;
          operator delete(__p);
        }
        if (!v20)
        {
          v25 = *((_DWORD *)a3 + 4);
          if (v25 == 1)
            v26 = 4;
          else
            v26 = 5;
          if (*((_DWORD *)a3 + 5) == -1)
            v27 = v26;
          else
            v27 = *((_DWORD *)a3 + 5);
          Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,int const&,int const&,int const&,int const&,int,int &,int &,int &,int &,int &,int &>(*(_DWORD *)a3, *((_DWORD *)a3 + 1), *((_DWORD *)a3 + 2), *((_DWORD *)a3 + 3), v25, v27, *(_DWORD *)(*v15 + 8), *(_DWORD *)(*v15 + 12), *(_OWORD *)(*v15 + 16), HIDWORD(*(_QWORD *)(*v15 + 16)), *(_QWORD *)(*v15 + 24), HIDWORD(*(_OWORD *)(*v15 + 16)));
        }
        v21 = 0;
        v22 = *(int *)(v17 + 8);
        do
        {
          v22 *= *(int *)(v17 + 12 + v21);
          v21 += 4;
        }
        while (v21 != 12);
        memcpy(a2, *(const void **)(v17 + 24), 4 * v22);
      }
      if (v16)
      {
        v23 = (unint64_t *)&v16->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
}

void sub_1916C4E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 72);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,int const&,int const&,int const&,int const&,int,int &,int &,int &,int &,int &,int &>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>("blob_container_array_get: Blob of shape (%d, %d, %d, %d, %d) %d cannot hold gathered blob of shape (%d, %d, %d, %d, %d) %d", a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void Espresso::blob_container_array::set_array_shape(Espresso::blob_container_array *this, const Espresso::layer_nd_shape *a2, const Espresso::layer_nd_shape *a3)
{
  _DWORD v4[6];
  _BYTE v5[40];
  void *__p;
  void *v7;

  get_array_shape(v4, a2, (uint64_t)a3);
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v4, 0, (uint64_t)v5);
  Espresso::abstract_blob_container::set_shape(this, (const Espresso::layer_shape *)v5);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_1916C4EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::reduce_kernel_cpu::~reduce_kernel_cpu(Espresso::reduce_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t scalar_vDSP_pve(uint64_t result, int a2, float *a3, uint64_t a4)
{
  int v4;
  float v5;

  if (a4)
  {
    v4 = 0;
    v5 = 1.0;
    do
    {
      v5 = v5 * *(float *)(result + 4 * v4);
      v4 += a2;
      --a4;
    }
    while (a4);
  }
  else
  {
    v5 = 1.0;
  }
  *a3 = v5;
  return result;
}

float *scalar_vDSP_vargmax(float *result, uint64_t a2, float *a3, unint64_t a4)
{
  float v4;
  unint64_t v5;
  float v6;
  uint64_t v7;
  float *v8;

  v4 = 0.0;
  if (a4 >= 2)
  {
    v5 = 0;
    v6 = *result;
    v7 = 1;
    v8 = &result[a2];
    do
    {
      if (*v8 > v6)
      {
        v6 = *v8;
        v5 = v7;
      }
      ++v7;
      v8 += a2;
    }
    while (a4 != v7);
    v4 = (float)v5;
  }
  *a3 = v4;
  return result;
}

float *scalar_vDSP_vargmin(float *result, uint64_t a2, float *a3, unint64_t a4)
{
  float v4;
  unint64_t v5;
  float v6;
  uint64_t v7;
  float *v8;

  v4 = 0.0;
  if (a4 >= 2)
  {
    v5 = 0;
    v6 = *result;
    v7 = 1;
    v8 = &result[a2];
    do
    {
      if (*v8 < v6)
      {
        v6 = *v8;
        v5 = v7;
      }
      ++v7;
      v8 += a2;
    }
    while (a4 != v7);
    v4 = (float)v5;
  }
  *a3 = v4;
  return result;
}

void Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel::~batch_matmul_kernel(Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  int64x2_t *v32;
  std::__shared_weak_count *v33;
  int64x2_t *v34;
  std::__shared_weak_count *v35;
  std::string v36;
  std::string v37;
  std::string __p;
  _BYTE v39[24];
  _BYTE v40[32];
  std::__shared_weak_count *v41;
  int64x2_t *v42;
  std::__shared_weak_count *v43;
  void **v44;

  v4 = a3[1] - *a3;
  if (v4 != 128)
  {
    v15 = *(std::__shared_weak_count **)(a2 + 8);
    v42 = *(int64x2_t **)a2;
    v43 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      v4 = a3[1] - *a3;
    }
    std::to_string(&v36, v4 >> 6);
    v18 = std::string::insert(&v36, 0, "[Dispatch::MPSGraph::batch_matmul_kernel] unsupported: bottoms size ");
    v37 = *v18;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v37, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v42, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v19 = v41;
    if (v41)
    {
      v20 = (unint64_t *)&v41->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v44 = (void **)v40;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v44);
    v44 = (void **)v39;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v44);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    v12 = v43;
    if (!v43)
      return 0;
    v22 = (unint64_t *)&v43->__shared_owners_;
    do
      v14 = __ldaxr(v22);
    while (__stlxr(v14 - 1, v22));
    goto LABEL_57;
  }
  v5 = a3[4] - a3[3];
  if (v5 != 64)
  {
    v23 = *(std::__shared_weak_count **)(a2 + 8);
    v34 = *(int64x2_t **)a2;
    v35 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v5 = a3[4] - a3[3];
    }
    std::to_string(&v36, v5 >> 6);
    v26 = std::string::insert(&v36, 0, "[Dispatch::MPSGraph::batch_matmul_kernel] unsupported: tops size ");
    v37 = *v26;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v37, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v34, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v27 = v41;
    if (v41)
    {
      v28 = (unint64_t *)&v41->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v44 = (void **)v40;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v44);
    v44 = (void **)v39;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v44);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    v12 = v35;
    if (!v35)
      return 0;
    v30 = (unint64_t *)&v35->__shared_owners_;
    do
      v14 = __ldaxr(v30);
    while (__stlxr(v14 - 1, v30));
    goto LABEL_57;
  }
  if (!*(_BYTE *)(a1 + 280))
    return 1;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  v32 = *(int64x2_t **)a2;
  v33 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, "[Dispatch::MPSGraph::batch_matmul_kernel] unsupported: channel mode");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v37, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v32, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v9 = v41;
  if (v41)
  {
    v10 = (unint64_t *)&v41->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  v12 = v33;
  if (v33)
  {
    v13 = (unint64_t *)&v33->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
LABEL_57:
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return 0;
}

void sub_1916C5458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a26);
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void Espresso::hierarchical_inner_product_kernel_cpu::~hierarchical_inner_product_kernel_cpu(Espresso::hierarchical_inner_product_kernel_cpu *this)
{
  Espresso::hierarchical_inner_product_kernel_cpu::~hierarchical_inner_product_kernel_cpu(this);
  JUMPOUT(0x19401CD90);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1E2D9F660;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 600);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 584);
  v4 = (void **)((char *)this + 560);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 536);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 512);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 61);
  if (v2)
  {
    *((_QWORD *)this + 62) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 58);
  if (v3)
  {
    *((_QWORD *)this + 59) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 440);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 416);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v4);
  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::hierarchical_inner_product_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  float v43;
  vDSP_Length v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  int *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int *v58;
  int *v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int *v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  BOOL v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int *v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  float v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  int *v139;
  float *v140;
  float *v141;
  uint64_t v142;
  uint64_t v143;
  float v144;
  double v145;
  float v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::runtime_error *exception;
  unint64_t v163;
  vDSP_Length __N;
  uint64_t v165;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  _BOOL4 v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  float v187;
  float v188;
  _QWORD __A[2];
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  _BYTE v215[4];
  int v216;
  int v217;
  int v218;
  int v219;
  unsigned int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  unsigned int v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  uint64_t v231;
  std::__shared_weak_count *v232;

  v7 = *a4;
  v8 = **a4;
  if (v8 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8))
  {
    v17 = *(std::__shared_weak_count **)(*v7 + 168);
    v231 = *(_QWORD *)(*v7 + 160);
    v232 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
  }
  else
  {
    v231 = 0;
    v232 = 0;
  }
  v9 = *a4;
  v10 = (*a4)[2];
  if (v10 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10))
  {
    v20 = v9[2];
    v22 = *(_QWORD *)(v20 + 160);
    v21 = *(std::__shared_weak_count **)(v20 + 168);
    v229 = v22;
    v230 = v21;
    if (v21)
    {
      v23 = (unint64_t *)&v21->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
  }
  else
  {
    v229 = 0;
    v230 = 0;
  }
  v11 = *a3;
  v12 = **a3;
  v167 = a2;
  if (v12 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12))
  {
    v25 = *v11;
    v14 = *(_QWORD *)(*v11 + 160);
    v13 = *(std::__shared_weak_count **)(v25 + 168);
    v227 = v14;
    v228 = v13;
    if (v13)
    {
      v26 = (unint64_t *)&v13->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v227 = 0;
    v228 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)__A, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v221, (const Espresso::layer_shape *)__A, 0);
  if (*((_QWORD *)&v191 + 1))
  {
    *(_QWORD *)&v192 = *((_QWORD *)&v191 + 1);
    operator delete(*((void **)&v191 + 1));
  }
  Espresso::abstract_blob_container::shape((char *)__A, (*a4)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v215, (const Espresso::layer_shape *)__A, 0);
  if (*((_QWORD *)&v191 + 1))
  {
    *(_QWORD *)&v192 = *((_QWORD *)&v191 + 1);
    operator delete(*((void **)&v191 + 1));
  }
  if (*(_BYTE *)(a1 + 320) || v226 <= 3)
  {
    switch(v226)
    {
      case 1u:
        v16 = 1;
        goto LABEL_39;
      case 2u:
        v16 = v221;
        goto LABEL_39;
      case 3u:
        v16 = v222 * (uint64_t)v221;
        goto LABEL_39;
      case 4u:
        v16 = v222 * (uint64_t)v221 * v223;
        goto LABEL_39;
      case 5u:
        v16 = v222 * (uint64_t)v221 * v223 * v224;
LABEL_39:
        v174 = v16;
        if (v226)
          goto LABEL_40;
        goto LABEL_43;
      default:
        v174 = 0;
        if (!v226)
          goto LABEL_43;
LABEL_40:
        v15 = *(&v221 + (int)v226 - 1);
        break;
    }
    goto LABEL_41;
  }
  if (v226 == 5)
  {
    v174 = v222 * (uint64_t)v221;
    v15 = v224 * (uint64_t)v225 * v223;
    goto LABEL_41;
  }
  if (v226 == 4)
  {
    v174 = v221;
    v15 = v223 * (uint64_t)v224 * v222;
LABEL_41:
    v173 = v15;
    goto LABEL_44;
  }
  v174 = 0;
LABEL_43:
  v173 = 0;
LABEL_44:
  if (!*(_BYTE *)(a1 + 320) && v220 > 3)
  {
    if (v220 == 5)
    {
      v29 = v218;
      v28 = v219;
      v30 = v217;
      goto LABEL_53;
    }
    if (v220 == 4)
    {
      v29 = v217;
      v28 = v218;
      v30 = v216;
LABEL_53:
      v31 = v29 * (uint64_t)v28 * v30;
      goto LABEL_54;
    }
LABEL_51:
    v168 = 0;
    goto LABEL_55;
  }
  if (!v220)
    goto LABEL_51;
  v31 = *(int *)&v215[4 * v220 - 4];
LABEL_54:
  v168 = v31;
LABEL_55:
  v32 = *(unsigned int *)(a1 + 280);
  v33 = *(float *)(a1 + 336);
  v34 = *(int *)(a1 + 384);
  if (Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::onceToken != -1)
    dispatch_once(&Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::onceToken, &__block_literal_global_10824);
  if (Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::need_recheck_env == 1)
  {
    v35 = getenv("ESPRESSO_N_CLUSTERS_KEEP");
    if (v35)
      Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::ext_n_clusters_keep = atoi(v35);
    v36 = getenv("ESPRESSO_N_MIN_ROWS_FACTOR");
    if (v36)
      Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::ext_min_n_rows_factor = atoi(v36);
  }
  v37 = Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::ext_n_clusters_keep;
  if (Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::ext_n_clusters_keep <= 0)
    v37 = v34;
  v179 = v37;
  if (Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::ext_min_n_rows_factor < 0)
    v38 = 4;
  else
    v38 = Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::ext_min_n_rows_factor;
  v172 = **(_QWORD **)(a1 + 560);
  v39 = **(_QWORD **)(a1 + 512);
  v165 = **(_QWORD **)(a1 + 536);
  v40 = *(_DWORD *)(a1 + 332);
  v41 = v38 > 0;
  if (v40 != 100002)
    v41 = 0;
  v177 = v41;
  if (v40 != 100002)
  {
    v42 = 0;
    v43 = -1000000000.0;
    if ((v40 - 100001) < 2)
      v43 = 0.0;
    *(float *)__A = v43;
    v44 = *(int *)(v14 + 8);
    do
    {
      v44 *= *(int *)(v14 + 12 + v42);
      v42 += 4;
    }
    while (v42 != 12);
    vDSP_vfill((const float *)__A, *(float **)(v14 + 24), 1, v44);
  }
  if (v174)
  {
    v178 = 0;
    v45 = (int)v33;
    v185 = a1 + 560;
    v180 = v38 * (int)v33;
    v181 = 0;
    v163 = v45 & ~(v45 >> 31);
    __N = (int)v33;
    v169 = v40 - 100001;
    v184 = (uint64_t *)(v39 + 160);
    if ((v40 - 100001) >= 2)
      v46 = v39 + 160;
    else
      v46 = v165 + 160;
    v170 = v165 + 160;
    v171 = 4 * v45;
    v47 = v179;
    v186 = v46;
    while (1)
    {
      v49 = *(int **)(a1 + 464);
      v48 = *(int **)(a1 + 472);
      v50 = v48 - v49;
      if (v50 >= v180)
        v50 = v180;
      if (v177)
        v51 = v50;
      else
        v51 = v47;
      v175 = *(_QWORD *)(v231 + 24);
      v52 = *(_QWORD *)(v229 + 24);
      if (v48 != v49)
      {
        v53 = 0;
        v54 = *(int **)(a1 + 464);
        do
          *v54++ = v53++;
        while (v54 != v48);
      }
      v182 = v51;
      if (v51)
      {
        v55 = v52 + 4 * v181 * v168;
        if (v51 >= 2)
        {
          v56 = (unint64_t)(v51 - 2) >> 1;
          v57 = v56 + 1;
          v58 = &v49[v56];
          do
          {
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<int *>>((uint64_t)v49, v55, v182, v58--);
            --v57;
          }
          while (v57);
        }
        v59 = &v49[v182];
        if (v59 != v48)
        {
          v60 = &v49[v182];
          do
          {
            v61 = *v60;
            v62 = *v49;
            if (*(float *)(v55 + 4 * v61) > *(float *)(v55 + 4 * v62))
            {
              *v60 = v62;
              *v49 = v61;
              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<int *>>((uint64_t)v49, v55, v182, v49);
            }
            ++v60;
          }
          while (v60 != v48);
        }
        v46 = v186;
        if (v182 >= 2)
        {
          v63 = v182 & 0x3FFFFFFFFFFFFFFFLL;
          do
          {
            v64 = 0;
            v65 = *v49;
            v66 = v49;
            do
            {
              v67 = v66;
              v66 += v64 + 1;
              v68 = 2 * v64;
              v64 = (2 * v64) | 1;
              v69 = v68 + 2;
              if (v69 < v63 && *(float *)(v55 + 4 * *v66) > *(float *)(v55 + 4 * v66[1]))
              {
                ++v66;
                v64 = v69;
              }
              *v67 = *v66;
            }
            while (v64 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
            if (v66 == --v59)
            {
              *v66 = v65;
            }
            else
            {
              *v66 = *v59;
              *v59 = v65;
              v70 = (char *)v66 - (char *)v49 + 4;
              if (v70 >= 5)
              {
                v71 = (((unint64_t)v70 >> 2) - 2) >> 1;
                v72 = &v49[v71];
                v73 = *v72;
                v74 = *v66;
                v75 = *(float *)(v55 + 4 * v74);
                if (*(float *)(v55 + 4 * v73) > v75)
                {
                  do
                  {
                    *v66 = v73;
                    v66 = v72;
                    if (!v71)
                      break;
                    v71 = (v71 - 1) >> 1;
                    v72 = &v49[v71];
                    v73 = *v72;
                  }
                  while (*(float *)(v55 + 4 * v73) > v75);
                  *v66 = v74;
                }
              }
            }
            v76 = v63-- <= 2;
          }
          while (!v76);
        }
      }
      *(_QWORD *)(*(_QWORD *)(v172 + 160) + 24) = v175 + 4 * v181 * v173;
      *(_DWORD *)(**(_QWORD **)v185 + 16) = v173;
      v47 = v179;
      v77 = v179;
      if (v177)
      {
        v78 = *(_QWORD *)(a1 + 464);
        if (*(_QWORD *)(a1 + 472) == v78)
          goto LABEL_129;
        v79 = 0;
        v77 = 0;
        while (v77 < v179 || v79 < v180 && v77 < v182)
        {
          v80 = *(int *)(v78 + 4 * v77);
          v81 = *(_QWORD *)(a1 + 416);
          v82 = (*(_QWORD *)(a1 + 424) - v81) >> 4;
          if (v82 <= v80)
            Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("hierarchical_inner_product_kernel_cpu: invalid cluster index %d > %zu", v80, v82);
          v79 += *(int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v81 + 16 * v80) + 384))(*(_QWORD *)(v81 + 16 * v80));
          ++v77;
          v78 = *(_QWORD *)(a1 + 464);
          if (v77 >= (*(_QWORD *)(a1 + 472) - v78) >> 2)
            goto LABEL_123;
        }
      }
      if (!v77)
      {
        if (v169 >= 2)
          goto LABEL_195;
LABEL_129:
        v84 = 0;
        v77 = 0;
        v91 = 1;
        goto LABEL_130;
      }
LABEL_123:
      v83 = 0;
      v84 = 0;
      do
      {
        v85 = *(int *)(*(_QWORD *)(a1 + 464) + 4 * v83);
        v86 = *(_QWORD *)(a1 + 416);
        v87 = (*(_QWORD *)(a1 + 424) - v86) >> 4;
        if (v87 <= v85)
          Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("hierarchical_inner_product_kernel_cpu: invalid cluster index %d > %zu", v85, v87);
        v88 = (_QWORD *)(v86 + 16 * v85);
        v89 = *(int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v88 + 384))(*v88);
        v90 = *v184;
        *(_QWORD *)(v90 + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 24) + 4 * v84;
        *(_DWORD *)(v90 + 16) = v89;
        *(_DWORD *)(**(_QWORD **)(a1 + 512) + 16) = v89;
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v88 + 16))(*v88, v167, a1 + 512, v185);
        v84 += v89;
        ++v83;
        v46 = v186;
      }
      while (v77 != v83);
      if (v169 >= 2)
        goto LABEL_133;
      v91 = 0;
LABEL_130:
      v214 = 0;
      v212 = 0u;
      v213 = 0u;
      v210 = 0u;
      v211 = 0u;
      v208 = 0u;
      v209 = 0u;
      v206 = 0u;
      v207 = 0u;
      v204 = 0u;
      v205 = 0u;
      v202 = 0u;
      v203 = 0u;
      v200 = 0u;
      v201 = 0u;
      v198 = 0u;
      v199 = 0u;
      v197 = 0u;
      v195 = 0u;
      v196 = 0u;
      v193 = 0u;
      v194 = 0u;
      v191 = 0u;
      v192 = 0u;
      __A[0] = 0x1000000000000;
      v190 = 0u;
      __A[1] = v84;
      *((_QWORD *)&v197 + 1) = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 24);
      LODWORD(v198) = 65568;
      DWORD1(v200) = 0x10000;
      *((_QWORD *)&v200 + 1) = v84;
      *((_QWORD *)&v208 + 1) = *(_QWORD *)(*(_QWORD *)v170 + 24);
      LODWORD(v209) = 65568;
      LODWORD(v211) = 11;
      if (MEMORY[0x19401A984](__A, 0, 1, v84, v84) == -1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
        Espresso::invalid_state_error::invalid_state_error(exception);
      }
      if ((v91 & 1) != 0)
      {
        v92 = 0;
        goto LABEL_143;
      }
LABEL_133:
      v93 = 0;
      v92 = 0;
      do
      {
        v94 = 16 * *(int *)(*(_QWORD *)(a1 + 464) + 4 * v93);
        v95 = (int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 416) + v94) + 384))(*(_QWORD *)(*(_QWORD *)(a1 + 416) + v94));
        v96 = *v95;
        if ((_DWORD)v96)
        {
          v97 = *(int **)(*(_QWORD *)(*(_QWORD *)(a1 + 440) + v94) + 16);
          v98 = v227;
          v99 = 4 * v92;
          v100 = *v95;
          do
          {
            v101 = *v97++;
            v102 = v101 & ~(v101 >> 31);
            if (v102 >= v32)
              v102 = v32 - 1;
            if (v40 == 100002)
              *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 600) + 24) + v99) = (float)v102;
            else
              *(_DWORD *)(*(_QWORD *)(v98 + 24) + 4 * (v181 * v32 + v102)) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v46 + 24)
                                                                                       + v99);
            v99 += 4;
            --v100;
          }
          while (v100);
        }
        v92 += v96;
        ++v93;
      }
      while (v93 != v77);
LABEL_143:
      v47 = v179;
      if (v40 == 100002)
      {
        v103 = *a3;
        v104 = (*a3)[2];
        if (v104 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v104 + 32))(v104))
        {
          v150 = v103[2];
          v105 = *(_QWORD *)(v150 + 160);
          v151 = *(_QWORD *)(v150 + 168);
          __A[0] = v105;
          __A[1] = v151;
          if (v151)
          {
            v152 = (unint64_t *)(v151 + 8);
            do
              v153 = __ldxr(v152);
            while (__stxr(v153 + 1, v152));
          }
        }
        else
        {
          v105 = 0;
          __A[0] = 0;
          __A[1] = 0;
        }
        v183 = v163;
        if (v92 < v163)
        {
          v187 = -1.0;
          v188 = 0.0;
          vDSP_vfill(&v188, (float *)(*(_QWORD *)(v227 + 24) + 4 * v181 * __N), 1, __N);
          vDSP_vfill(&v187, (float *)(*(_QWORD *)(v105 + 24) + 4 * v181 * __N), 1, __N);
          v183 = v92;
        }
        v106 = *(int **)(a1 + 488);
        if (v92)
        {
          v107 = 0;
          v108 = 4 * v92;
          do
          {
            v106[v107] = v107;
            ++v107;
            v108 -= 4;
          }
          while (v108);
        }
        v109 = *(_QWORD *)(v165 + 160);
        v110 = v183;
        v176 = *(std::__shared_weak_count **)(v165 + 168);
        if (v176)
        {
          v111 = (unint64_t *)&v176->__shared_owners_;
          do
            v112 = __ldxr(v111);
          while (__stxr(v112 + 1, v111));
        }
        v113 = v183;
        if (v183)
        {
          if ((int)v183 >= 2)
          {
            v114 = ((unint64_t)v183 - 2) >> 1;
            v115 = v114 + 1;
            v116 = &v106[v114];
            do
            {
              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<int *>>((uint64_t)v106, v109, v183, v116--);
              --v115;
            }
            while (v115);
          }
          if (v92 != v183)
          {
            v117 = 4 * v92;
            v118 = 4 * v183;
            do
            {
              v119 = v106[(unint64_t)v118 / 4];
              v120 = *v106;
              if (*(float *)(*(_QWORD *)(v109 + 24) + 4 * v119) > *(float *)(*(_QWORD *)(v109 + 24) + 4 * v120))
              {
                v106[(unint64_t)v118 / 4] = v120;
                *v106 = v119;
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<int *>>((uint64_t)v106, v109, v183, v106);
              }
              v118 += 4;
            }
            while (v117 != v118);
          }
          v110 = v183;
          if ((int)v183 >= 2)
          {
            v121 = &v106[v183];
            v122 = v183;
            do
            {
              v123 = 0;
              v124 = *v106;
              v125 = v106;
              do
              {
                v126 = v125;
                v125 += v123 + 1;
                v127 = 2 * v123;
                v123 = (2 * v123) | 1;
                v128 = v127 + 2;
                if (v128 < v122
                  && *(float *)(*(_QWORD *)(v109 + 24) + 4 * *v125) > *(float *)(*(_QWORD *)(v109 + 24) + 4 * v125[1]))
                {
                  ++v125;
                  v123 = v128;
                }
                *v126 = *v125;
              }
              while (v123 <= (uint64_t)((unint64_t)(v122 - 2) >> 1));
              if (v125 == --v121)
              {
                *v125 = v124;
              }
              else
              {
                *v125 = *v121;
                *v121 = v124;
                v129 = (char *)v125 - (char *)v106 + 4;
                if (v129 >= 5)
                {
                  v130 = (((unint64_t)v129 >> 2) - 2) >> 1;
                  v131 = &v106[v130];
                  v132 = *(_QWORD *)(v109 + 24);
                  v133 = *v131;
                  v134 = *v125;
                  v135 = *(float *)(v132 + 4 * v134);
                  if (*(float *)(v132 + 4 * v133) > v135)
                  {
                    do
                    {
                      *v125 = v133;
                      v125 = v131;
                      if (!v130)
                        break;
                      v130 = (v130 - 1) >> 1;
                      v131 = &v106[v130];
                      v133 = *v131;
                    }
                    while (*(float *)(v132 + 4 * v133) > v135);
                    *v125 = v134;
                  }
                }
              }
              v76 = v122-- <= 2;
            }
            while (!v76);
          }
        }
        v46 = v186;
        if (!v176)
          goto LABEL_184;
        v136 = (unint64_t *)&v176->__shared_owners_;
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
          if (v110)
            goto LABEL_185;
        }
        else
        {
LABEL_184:
          if (v110)
          {
LABEL_185:
            v138 = *(_QWORD *)(*(_QWORD *)v170 + 24);
            v139 = *(int **)(a1 + 488);
            v140 = (float *)(*(_QWORD *)(__A[0] + 24) + v178);
            v141 = (float *)(*(_QWORD *)(v227 + 24) + v178);
            do
            {
              v143 = *v139++;
              v142 = v143;
              v144 = *(float *)(v138 + 4 * v143);
              *v141 = v144;
              v145 = v144;
              v146 = -1.0;
              if (v145 > 0.000001)
                v146 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 600) + 24) + 4 * v142);
              *v140++ = v146;
              ++v141;
              --v113;
            }
            while (v113);
          }
        }
        v147 = (std::__shared_weak_count *)__A[1];
        if (__A[1])
        {
          v148 = (unint64_t *)(__A[1] + 8);
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v147);
          }
        }
        v47 = v179;
      }
LABEL_195:
      v178 += v171;
      if (++v181 == v174)
      {
        v13 = v228;
        break;
      }
    }
  }
  if (v13)
  {
    v154 = (unint64_t *)&v13->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v156 = v230;
  if (v230)
  {
    v157 = (unint64_t *)&v230->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = v232;
  if (v232)
  {
    v160 = (unint64_t *)&v232->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
}

void sub_1916C63C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  uint64_t v39;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 128);
  _Unwind_Resume(a1);
}

void Espresso::hierarchical_inner_product_kernel_cpu::on_resized(Espresso::hierarchical_inner_product_kernel_cpu *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  std::__shared_weak_count *v4;
  __int128 v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  _BYTE v64[24];
  __int128 v65;
  void *__p[2];
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void **v71;

  std::vector<int>::resize((std::vector<int> *)((char *)this + 464), *((int *)this + 95));
  v4 = (std::__shared_weak_count *)operator new(0x118uLL);
  *(_OWORD *)&v4->__shared_owners_ = 0u;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1868;
  *(_QWORD *)&v69 = Espresso::blob_cpu::blob_cpu((uint64_t)&v4[1], (_QWORD *)this + 1);
  *((_QWORD *)&v69 + 1) = v4;
  v5 = v69;
  v69 = 0u;
  v70 = v5;
  v68 = 0u;
  Espresso::layer_data::layer_data((char **)v64, &v70, &v68);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((void **)this + 64);
  *((_OWORD *)this + 32) = *(_OWORD *)v64;
  *((_QWORD *)this + 66) = *(_QWORD *)&v64[16];
  memset(v64, 0, sizeof(v64));
  v71 = (void **)v64;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v71);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
  if (*((_QWORD *)&v69 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)operator new(0x118uLL);
  *(_OWORD *)&v11->__shared_owners_ = 0u;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1868;
  *(_QWORD *)&v69 = Espresso::blob_cpu::blob_cpu((uint64_t)&v11[1], (_QWORD *)this + 1);
  *((_QWORD *)&v69 + 1) = v11;
  v12 = v69;
  v69 = 0u;
  v70 = v12;
  v68 = 0u;
  Espresso::layer_data::layer_data((char **)v64, &v70, &v68);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((void **)this + 67);
  *(_OWORD *)((char *)this + 536) = *(_OWORD *)v64;
  *((_QWORD *)this + 69) = *(_QWORD *)&v64[16];
  memset(v64, 0, sizeof(v64));
  v71 = (void **)v64;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v71);
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
  if (*((_QWORD *)&v69 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)operator new(0x118uLL);
  *(_OWORD *)&v18->__shared_owners_ = 0u;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1868;
  *(_QWORD *)&v69 = Espresso::blob_cpu::blob_cpu((uint64_t)&v18[1], (_QWORD *)this + 1);
  *((_QWORD *)&v69 + 1) = v18;
  v19 = v69;
  v69 = 0u;
  v70 = v19;
  v68 = 0u;
  Espresso::layer_data::layer_data((char **)v64, &v70, &v68);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((void **)this + 70);
  *((_OWORD *)this + 35) = *(_OWORD *)v64;
  *((_QWORD *)this + 72) = *(_QWORD *)&v64[16];
  memset(v64, 0, sizeof(v64));
  v71 = (void **)v64;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v71);
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
  if (*((_QWORD *)&v69 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = **((_QWORD **)this + 64);
  v26 = *((_DWORD *)this + 70);
  v67 = 0;
  *(_OWORD *)__p = 0u;
  v65 = 0u;
  *(_QWORD *)v64 = 0x100000001;
  *(_DWORD *)&v64[8] = v26;
  *(_QWORD *)&v64[12] = 0x100000001;
  *(_DWORD *)&v64[20] = -1;
  v62 = 0;
  v63 = 0;
  (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v25 + 16))(v25, v64, &v62);
  v27 = v63;
  if (v63)
  {
    v28 = (unint64_t *)&v63->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v30 = **((_QWORD **)this + 67);
  v31 = *((_DWORD *)this + 70);
  v67 = 0;
  *(_OWORD *)__p = 0u;
  v65 = 0u;
  *(_QWORD *)v64 = 0x100000001;
  *(_DWORD *)&v64[8] = v31;
  *(_QWORD *)&v64[12] = 0x100000001;
  *(_DWORD *)&v64[20] = -1;
  v60 = 0;
  v61 = 0;
  (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v30 + 16))(v30, v64, &v60);
  v32 = v61;
  if (v61)
  {
    v33 = (unint64_t *)&v61->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = **((_QWORD **)this + 70);
  v36 = *((_DWORD *)this + 71);
  v67 = 0;
  *(_OWORD *)__p = 0u;
  v65 = 0u;
  *(_QWORD *)v64 = 0x100000001;
  *(_DWORD *)&v64[8] = v36;
  *(_QWORD *)&v64[12] = 0x100000001;
  *(_DWORD *)&v64[20] = -1;
  v58 = 0;
  v59 = 0;
  (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v35 + 16))(v35, v64, &v58);
  v37 = v59;
  if (v59)
  {
    v38 = (unint64_t *)&v59->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v40 = **((_QWORD **)this + 70) + 160;
  v41 = *((_QWORD *)this + 64);
  v42 = (uint64_t *)(*(_QWORD *)v41 + 160);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)this + 73, *v42, *(_QWORD *)(*(_QWORD *)v41 + 168));
  v43 = *((_QWORD *)this + 73);
  v44 = *((_DWORD *)this + 71);
  v45 = operator new(0x60uLL);
  v45[1] = 0;
  v45[2] = 0;
  *v45 = &off_1E2DBECA8;
  v46 = *(_QWORD *)(v43 + 24);
  *((_OWORD *)v45 + 4) = 0u;
  *((_OWORD *)v45 + 5) = 0u;
  v45[4] = 0x100000001;
  *((_DWORD *)v45 + 10) = v44;
  *((_DWORD *)v45 + 11) = 1;
  v45[6] = v46;
  *((_BYTE *)v45 + 56) = 0;
  *(_QWORD *)&v64[8] = v45;
  v45[3] = &off_1E2DA11F0;
  *(_QWORD *)v64 = v45 + 3;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v42, (__int128 *)v64);
  v47 = *(std::__shared_weak_count **)&v64[8];
  if (*(_QWORD *)&v64[8])
  {
    v48 = (unint64_t *)(*(_QWORD *)&v64[8] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = *((_DWORD *)this + 71);
  v51 = operator new(0x60uLL);
  v51[1] = 0;
  v51[2] = 0;
  *v51 = &off_1E2DBECA8;
  *((_OWORD *)v51 + 4) = 0u;
  *((_OWORD *)v51 + 5) = 0u;
  v51[4] = 0x100000001;
  *((_DWORD *)v51 + 10) = v50;
  *((_DWORD *)v51 + 11) = 1;
  v51[6] = 0;
  *((_BYTE *)v51 + 56) = 0;
  *(_QWORD *)&v64[8] = v51;
  v51[3] = &off_1E2DA11F0;
  *(_QWORD *)v64 = v51 + 3;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v40, (__int128 *)v64);
  v52 = *(std::__shared_weak_count **)&v64[8];
  if (*(_QWORD *)&v64[8])
  {
    v53 = (unint64_t *)(*(_QWORD *)&v64[8] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (*((_DWORD *)this + 83) == 100002)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(v64, 1, 1, *((_DWORD *)this + 70), 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 600, (__int128 *)v64);
    v55 = *(std::__shared_weak_count **)&v64[8];
    if (*(_QWORD *)&v64[8])
    {
      v56 = (unint64_t *)(*(_QWORD *)&v64[8] + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    std::vector<int>::resize((std::vector<int> *)((char *)this + 488), *((unsigned int *)this + 70));
  }
}

void sub_1916C6AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::hierarchical_inner_product_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, const std::string *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  void **v12;
  int v13;
  void **v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *p_p;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *size;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  __int128 v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::runtime_error *exception;
  std::runtime_error *v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  int v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  __int128 v95;
  void *__p;
  uint64_t v97;
  uint64_t v98;
  void *v99[2];
  uint64_t v100;
  void *v101[2];
  uint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string v112;

  v103 = 0;
  v104 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v103, *a6, a6[1]);
  v101[0] = 0;
  v101[1] = 0;
  v102 = 0;
  v99[0] = 0;
  v99[1] = 0;
  v100 = 0;
  __p = 0;
  v97 = 0;
  v98 = 0;
  if ((unwrap_hierarchical_name(a3, (uint64_t)v101, (uint64_t)v99, (uint64_t)&__p) & 1) == 0)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unsuccessfully formatted hierarchical inner product kernel.");
  if (v102 >= 0)
    v12 = v101;
  else
    v12 = (void **)v101[0];
  v13 = atoi((const char *)v12);
  if (v100 >= 0)
    v14 = v99;
  else
    v14 = (void **)v99[0];
  v15 = atoi((const char *)v14);
  v16 = v13;
  v17 = *(_QWORD *)(a1 + 416);
  v18 = (*(_QWORD *)(a1 + 424) - v17) >> 4;
  if (v18 <= v13)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("index %d > %d", v13, v18);
  v19 = v15;
  if ((SHIBYTE(v98) & 0x80000000) == 0)
  {
    if (SHIBYTE(v98) == 13)
    {
      p_p = (uint64_t *)&__p;
      goto LABEL_17;
    }
LABEL_21:
    v24 = 16 * v13;
    v25 = *(_QWORD *)(v17 + v24);
    if (!v25)
    {
      v92 = *(_DWORD *)(a1 + 408);
      v26 = *(_OWORD *)(a1 + 392);
      v90 = *(_OWORD *)(a1 + 376);
      v91 = v26;
      v27 = *(_OWORD *)(a1 + 296);
      v84 = *(_OWORD *)(a1 + 280);
      v85 = v27;
      v28 = *(_OWORD *)(a1 + 328);
      v86 = *(_OWORD *)(a1 + 312);
      v87 = v28;
      v29 = *(_OWORD *)(a1 + 360);
      v88 = *(_OWORD *)(a1 + 344);
      v89 = v29;
      *(_QWORD *)((char *)&v90 + 4) = 0;
      LODWORD(v84) = v19;
      v30 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
      if (v19 < 0xB && v30 == 100)
        v32 = 0;
      else
        v32 = v30;
      LODWORD(v109.__r_.__value_.__l.__data_) = v32;
      Espresso::abstract_engine_factory::shared(&v110);
      v33 = v110.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&v112, "inner_product");
      LODWORD(v107) = 0;
      Espresso::abstract_engine_factory::make_kernel_priv(v33, a1 + 8, (uint64_t)&v112, (uint64_t)&v84, (int *)&v109);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
      if (v110.__r_.__value_.__l.__size_)
      {
        v35 = (unint64_t *)(v110.__r_.__value_.__l.__size_ + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (v111.__r_.__value_.__r.__words[0]
      {
        v112.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
        v112.__r_.__value_.__l.__size_ = v111.__r_.__value_.__l.__size_;
        if (v111.__r_.__value_.__l.__size_)
        {
          v38 = (unint64_t *)(v111.__r_.__value_.__l.__size_ + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
      }
      else
      {
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = 0uLL;
      }
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 416) + 16 * v16, (__int128 *)&v112);
      v52 = (std::__shared_weak_count *)v112.__r_.__value_.__l.__size_;
      if (v112.__r_.__value_.__l.__size_)
      {
        v53 = (unint64_t *)(v112.__r_.__value_.__l.__size_ + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = (std::__shared_weak_count *)v111.__r_.__value_.__l.__size_;
      if (v111.__r_.__value_.__l.__size_)
      {
        v56 = (unint64_t *)(v111.__r_.__value_.__l.__size_ + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 416) + v24);
    }
    if (v19 != *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 384))(v25))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::invalid_state_error::invalid_state_error(exception);
    }
    (*(void (**)(_QWORD, uint64_t, void **, const void *, unint64_t, uint64_t *))(**(_QWORD **)(*(_QWORD *)(a1 + 416) + v24)
                                                                                                + 160))(*(_QWORD *)(*(_QWORD *)(a1 + 416) + v24), a2, &__p, a4, a5, a6);
    goto LABEL_71;
  }
  if (v97 != 13)
    goto LABEL_21;
  p_p = (uint64_t *)__p;
LABEL_17:
  v21 = *p_p;
  v22 = *(uint64_t *)((char *)p_p + 5);
  if (v21 != 0x5F72657474616373 || v22 != 0x7865646E695F7265)
    goto LABEL_21;
  v41 = v103;
  v40 = v104;
  v93 = v103;
  v94 = v104;
  if (v104)
  {
    p_shared_owners = (unint64_t *)&v104->__shared_owners_;
    do
      v43 = __ldxr(p_shared_owners);
    while (__stxr(v43 + 1, p_shared_owners));
  }
  v44 = *(_QWORD *)(a1 + 8);
  v45 = *(std::__shared_weak_count **)(a1 + 16);
  v107 = v44;
  v108 = v45;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v105 = v41;
  v106 = v40;
  if (v40)
  {
    v48 = (unint64_t *)&v40->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v95 = 0uLL;
  if (!*(_BYTE *)(v44 + 73))
    goto LABEL_54;
  if (!v41 || (a4 & 0x3F) == 0)
  {
    if (v41)
      goto LABEL_84;
LABEL_54:
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v84, v15, 1, 1, 1);
    v50 = v84;
    *((_QWORD *)&v84 + 1) = 0;
    v95 = v50;
    v51 = v50;
    if (a5 != 4 * *(int *)(v50 + 8))
    {
      v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v110, a5);
      v76 = std::string::insert(&v110, 0, "Unexpected size s=");
      v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v111.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      v78 = std::string::append(&v111, "/blob=");
      v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v109, 4 * *(int *)(v51 + 8));
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v109;
      else
        v80 = (std::string *)v109.__r_.__value_.__r.__words[0];
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
      else
        v81 = v109.__r_.__value_.__l.__size_;
      v82 = std::string::append(&v112, (const std::string::value_type *)v80, v81);
      v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      *(_QWORD *)&v85 = *((_QWORD *)&v82->__r_.__value_.__l + 2);
      v84 = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v75, (const std::string *)&v84);
      __cxa_throw(v75, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(v50 + 16), a4, a5);
    if (!v40)
      goto LABEL_89;
    goto LABEL_85;
  }
  if (!*(_BYTE *)(v44 + 123))
    goto LABEL_54;
LABEL_84:
  v61 = (char *)operator new(0x58uLL);
  *((_QWORD *)v61 + 1) = 0;
  *((_QWORD *)v61 + 2) = 0;
  *(_QWORD *)v61 = &off_1E2DBEE68;
  *((_QWORD *)v61 + 3) = &off_1E2DA12F0;
  *(_OWORD *)(v61 + 72) = 0u;
  *(_OWORD *)(v61 + 56) = 0u;
  *((_DWORD *)v61 + 8) = v19;
  *((_QWORD *)v61 + 5) = a4;
  v61[48] = 0;
  *(_QWORD *)&v62 = v61 + 24;
  *((_QWORD *)&v62 + 1) = v61;
  v95 = v62;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v61 + 7, v41, (uint64_t)v40);
  if (v40)
  {
LABEL_85:
    v63 = (unint64_t *)&v40->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_89:
  v65 = v108;
  if (v108)
  {
    v66 = (unint64_t *)&v108->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 440) + 16 * v13, &v95);
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
  if (*((_QWORD *)&v95 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v94;
  if (v94)
  {
    v72 = (unint64_t *)&v94->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
LABEL_71:
  if (SHIBYTE(v98) < 0)
    operator delete(__p);
  if (SHIBYTE(v100) < 0)
    operator delete(v99[0]);
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = v104;
  if (v104)
  {
    v59 = (unint64_t *)&v104->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_1916C7278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void *v52;
  int v53;
  uint64_t v54;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v54 - 169) < 0)
    operator delete(*(void **)(v54 - 192));
  if (*(char *)(v54 - 89) < 0)
    operator delete(*(void **)(v54 - 112));
  if (*(char *)(v54 - 121) < 0)
    operator delete(*(void **)(v54 - 144));
  if (*(char *)(v54 - 145) < 0)
  {
    operator delete(*(void **)(v54 - 168));
    if ((v53 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v54 - 224);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v54 - 208);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
      if (a40 < 0)
        operator delete(a35);
      if (a46 < 0)
        operator delete(a41);
      if (a52 < 0)
        operator delete(a47);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v54 - 240);
      _Unwind_Resume(a1);
    }
  }
  else if (!v53)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v52);
  goto LABEL_14;
}

uint64_t Espresso::hierarchical_inner_product_kernel_cpu::supports_weight_key(uint64_t a1, const std::string *a2)
{
  const char *v3;
  int v4;
  const char *v5;
  int v6;
  unsigned int v7;
  void **v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *__p[2];
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  int v36;
  _OWORD v37[6];
  __int128 v38;
  __int128 v39;
  int v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;

  v46[0] = 0;
  v46[1] = 0;
  v47 = 0;
  v44[1] = 0;
  v45 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44[0] = 0;
  if ((unwrap_hierarchical_name(a2, (uint64_t)v46, (uint64_t)v44, (uint64_t)&v41) & 1) == 0
    || (v47 >= 0 ? (v3 = (const char *)v46) : (v3 = (const char *)v46[0]),
        (v4 = atoi(v3), v45 >= 0) ? (v5 = (const char *)v44) : (v5 = (const char *)v44[0]),
        v6 = atoi(v5),
        v4 >= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 424) - *(_QWORD *)(a1 + 416)) >> 4)))
  {
    v9 = 0;
    goto LABEL_13;
  }
  v7 = v6;
  if (SHIBYTE(v43) < 0)
  {
    if (v42 != 13)
      goto LABEL_26;
    v8 = v41;
  }
  else
  {
    if (SHIBYTE(v43) != 13)
      goto LABEL_26;
    v8 = (void **)&v41;
  }
  v11 = *v8;
  v12 = *(uint64_t *)((char *)v8 + 5);
  if (v11 == (void *)0x5F72657474616373 && v12 == 0x7865646E695F7265)
  {
    v9 = 1;
    goto LABEL_13;
  }
LABEL_26:
  v40 = *(_DWORD *)(a1 + 408);
  v14 = *(_OWORD *)(a1 + 392);
  v38 = *(_OWORD *)(a1 + 376);
  v39 = v14;
  v15 = *(_OWORD *)(a1 + 296);
  v37[0] = *(_OWORD *)(a1 + 280);
  v37[1] = v15;
  v16 = *(_OWORD *)(a1 + 328);
  v37[2] = *(_OWORD *)(a1 + 312);
  v37[3] = v16;
  v17 = *(_OWORD *)(a1 + 360);
  v37[4] = *(_OWORD *)(a1 + 344);
  v37[5] = v17;
  *(_QWORD *)((char *)&v38 + 4) = 0;
  LODWORD(v37[0]) = v6;
  v19 = *(_QWORD *)(a1 + 8);
  v18 = a1 + 8;
  v20 = (***(uint64_t (****)(_QWORD))(v19 + 8))(*(_QWORD *)(v19 + 8));
  if (v7 < 0xB && v20 == 100)
    v22 = 0;
  else
    v22 = v20;
  v36 = v22;
  Espresso::abstract_engine_factory::shared(&v32);
  v23 = v32;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
  Espresso::abstract_engine_factory::make_kernel_priv(v23, v18, (uint64_t)__p, (uint64_t)v37, &v36);
  if (v31 < 0)
    operator delete(__p[0]);
  v24 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v9 = (*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)v34 + 208))(v34, &v41);
  v27 = v35;
  if (v35)
  {
    v28 = (unint64_t *)&v35->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
LABEL_13:
  if (SHIBYTE(v43) < 0)
    operator delete(v41);
  if (SHIBYTE(v45) < 0)
    operator delete(v44[0]);
  if (SHIBYTE(v47) < 0)
    operator delete(v46[0]);
  return v9;
}

void sub_1916C7664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19)
{
  void **v19;
  uint64_t v20;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (*(char *)(v20 - 97) < 0)
    operator delete(v19[17]);
  if (*(char *)(v20 - 73) < 0)
    operator delete(v19[20]);
  if (*(char *)(v20 - 49) < 0)
    operator delete(v19[23]);
  _Unwind_Resume(a1);
}

uint64_t unwrap_hierarchical_name(const std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7;
  int64_t size;
  const std::string *v9;
  char *v11;
  std::string *v12;
  char *v13;
  std::string::size_type v14;
  int64_t v15;
  std::string *p_str;
  _BYTE *v17;
  std::string *v18;
  _BYTE *v19;
  uint64_t v20;
  std::string::size_type v22;
  std::string v23;
  std::string __str;
  char v25;

  v7 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v7 >= 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  if (v7 >= 0)
    v9 = a1;
  else
    v9 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  if (size >= 1)
  {
    v11 = (char *)v9 + size;
    v12 = (std::string *)v9;
    do
    {
      v13 = (char *)memchr(v12, 47, size);
      if (!v13)
        break;
      if (*v13 == 47)
      {
        if (v13 == v11)
          break;
        v14 = v13 - (char *)v9;
        if (v14 == -1)
          break;
        std::string::basic_string(&__str, a1, 0, v14, (std::allocator<char> *)&v23);
        if (*(char *)(a2 + 23) < 0)
          operator delete(*(void **)a2);
        *(std::string *)a2 = __str;
        std::string::basic_string(&__str, a1, v14 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v15 = __str.__r_.__value_.__l.__size_;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v15 >= 1)
        {
          v17 = (char *)p_str + v15;
          v18 = p_str;
          do
          {
            v19 = memchr(v18, 47, v15);
            if (!v19)
              break;
            if (*v19 == 47)
            {
              if (v19 == v17)
                break;
              v22 = v19 - (_BYTE *)p_str;
              if (v22 == -1)
                break;
              std::string::basic_string(&v23, &__str, 0, v22, (std::allocator<char> *)&v25);
              if (*(char *)(a3 + 23) < 0)
                operator delete(*(void **)a3);
              *(std::string *)a3 = v23;
              std::string::basic_string(&v23, &__str, v22 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v25);
              if (*(char *)(a4 + 23) < 0)
                operator delete(*(void **)a4);
              *(std::string *)a4 = v23;
              v20 = 1;
              goto LABEL_39;
            }
            v18 = (std::string *)(v19 + 1);
            v15 = v17 - (_BYTE *)v18;
          }
          while (v17 - (_BYTE *)v18 >= 1);
        }
        MEMORY[0x19401C808](a3, "");
        MEMORY[0x19401C808](a4, "");
        v20 = 0;
LABEL_39:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        return v20;
      }
      v12 = (std::string *)(v13 + 1);
      size = v11 - (char *)v12;
    }
    while (v11 - (char *)v12 >= 1);
  }
  MEMORY[0x19401C808](a2, "");
  MEMORY[0x19401C808](a3, "");
  MEMORY[0x19401C808](a4, "");
  return 0;
}

void sub_1916C7924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) | 1;
      v8 = (int *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *(float *)(a2 + 4 * *v8) > *(float *)(a2 + 4 * v8[1]))
      {
        ++v8;
        v7 = v9;
      }
      v10 = *v8;
      v11 = *a4;
      v12 = *(float *)(a2 + 4 * v11);
      if (*(float *)(a2 + 4 * v10) <= v12)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (int *)(result + 4 * v7);
          v14 = v13 + 2;
          if (v14 < a3 && *(float *)(a2 + 4 * *v8) > *(float *)(a2 + 4 * v8[1]))
          {
            ++v8;
            v7 = v14;
          }
          v10 = *v8;
        }
        while (*(float *)(a2 + 4 * v10) <= v12);
        *a4 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) | 1;
      v8 = (int *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v6 + 2 >= a3)
      {
        v10 = *(_QWORD *)(a2 + 24);
      }
      else
      {
        v10 = *(_QWORD *)(a2 + 24);
        if (*(float *)(v10 + 4 * *v8) > *(float *)(v10 + 4 * v8[1]))
        {
          ++v8;
          v7 = v9;
        }
      }
      v11 = *v8;
      v12 = *a4;
      v13 = *(float *)(v10 + 4 * v12);
      if (*(float *)(v10 + 4 * v11) <= v13)
      {
        do
        {
          *a4 = v11;
          a4 = v8;
          if (v5 < v7)
            break;
          v14 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (int *)(result + 4 * v7);
          v15 = v14 + 2;
          if (v15 < a3 && *(float *)(v10 + 4 * *v8) > *(float *)(v10 + 4 * v8[1]))
          {
            ++v8;
            v7 = v15;
          }
          v11 = *v8;
        }
        while (*(float *)(v10 + 4 * v11) <= v13);
        *a4 = v12;
      }
    }
  }
  return result;
}

void Espresso::rnn_kernel_cpu::~rnn_kernel_cpu(Espresso::rnn_kernel_cpu *this)
{
  *(_QWORD *)this = &off_1E2D67278;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 107));
  Espresso::generic_rnn_kernel::~generic_rnn_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D67278;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 107));
  Espresso::generic_rnn_kernel::~generic_rnn_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::rnn_kernel_cpu::set_weight_blob(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  std::string v12;
  std::string *v13;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v12 = *(std::string *)a2;
  v6 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v13 = &v12;
  v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), &v12, (__int128 **)&v13);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v9 + 7, v6, (uint64_t)v5);
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_1916C7D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::rnn_kernel_cpu::blob_container_options_for_weight(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::rnn_kernel_cpu::__launch_rnn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  unsigned int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  _OWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float *v64;
  vDSP_Length v65;
  int v66;
  _OWORD *v67;
  _OWORD *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  float *v80;
  vDSP_Length v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD v115[2];
  void **v116;
  std::__shared_weak_count *v117;
  void **v118;
  std::__shared_weak_count *v119;
  void **v120;
  std::__shared_weak_count *v121;
  _QWORD v122[2];
  _QWORD v123[2];
  _QWORD v124[2];
  uint64_t v125;
  std::__shared_weak_count *v126;
  void **v127;
  std::__shared_weak_count *v128;
  _QWORD v129[2];
  uint64_t v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void **v134;
  std::__shared_weak_count *v135;
  void *__p[2];
  char v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __int128 v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  __int128 v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  void **v148;

  v9 = *(_DWORD *)(*(_QWORD *)a5 + 20);
  v10 = *(_DWORD *)(a1 + 312);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v146, *(void **)a2, *(std::__shared_weak_count **)(a2 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v144, *(void **)a4, *(std::__shared_weak_count **)(a4 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v143, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v141, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
  v140 = v143;
  if (*((_QWORD *)&v143 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (*(int *)(a1 + 324) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "W_embedding_in");
    v134 = __p;
    v14 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), __p, (_OWORD **)&v134);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v138, *((void **)v14 + 7), *((std::__shared_weak_count **)v14 + 8));
    if (v137 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "b_embedding_in");
    v127 = __p;
    v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), __p, (_OWORD **)&v127);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v134, *((void **)v15 + 7), *((std::__shared_weak_count **)v15 + 8));
    if (v137 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(v132, "x_p_tmp");
    __p[0] = v132;
    v16 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 848), v132, (__int128 **)__p);
    v18 = (uint64_t)(v16 + 7);
    v17 = (_DWORD *)v16[7];
    if (v17 && v17[2] == 1 && v17[3] == 1 && v17[4] == v10 && v17[5] == v9)
    {
      v19 = v16[8];
      *(_QWORD *)&v20 = v16[7];
      *((_QWORD *)&v20 + 1) = v19;
      if (!v19)
      {
LABEL_24:
        v140 = v20;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        if (v133 < 0)
          operator delete(v132[0]);
        v130 = v138;
        v131 = v139;
        if (v139)
        {
          v28 = (unint64_t *)&v139->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = v135;
        v129[0] = v134;
        v129[1] = v135;
        if (v135)
        {
          v31 = (unint64_t *)&v135->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        Espresso::matrix_vector_mult_batched((uint64_t)&v130, (uint64_t)v129, *(_DWORD *)(a1 + 324), *(const float **)(v143 + 24), v10, *(float **)(v140 + 24), v9, 0.0);
        if (v30)
        {
          v33 = (unint64_t *)&v30->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v35 = v131;
        if (v131)
        {
          v36 = (unint64_t *)&v131->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v38 = v135;
        if (v135)
        {
          v39 = (unint64_t *)&v135->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v41 = v139;
        if (v139)
        {
          v42 = (unint64_t *)&v139->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        goto LABEL_57;
      }
    }
    else
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(__p, 1, 1, v10, v9);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v18, (__int128 *)__p);
      v21 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v22 = (unint64_t *)((char *)__p[1] + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v20 = *(_OWORD *)v18;
      v19 = *(_QWORD *)(v18 + 8);
      if (!v19)
        goto LABEL_24;
    }
    v24 = (unint64_t *)(v19 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    goto LABEL_24;
  }
LABEL_57:
  std::string::basic_string[abi:ne180100]<0>(__p, "W_h");
  v134 = __p;
  v44 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), __p, (_OWORD **)&v134);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v138, *((void **)v44 + 7), *((std::__shared_weak_count **)v44 + 8));
  if (v137 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "W_x");
  v127 = __p;
  v45 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), __p, (_OWORD **)&v127);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v134, *((void **)v45 + 7), *((std::__shared_weak_count **)v45 + 8));
  if (v137 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "b");
  v120 = __p;
  v46 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), __p, (_OWORD **)&v120);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v127, *((void **)v46 + 7), *((std::__shared_weak_count **)v46 + 8));
  if (v137 < 0)
    operator delete(__p[0]);
  v125 = v138;
  v126 = v139;
  if (v139)
  {
    v47 = (unint64_t *)&v139->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v49 = v128;
  v124[0] = v127;
  v124[1] = v128;
  if (v128)
  {
    v50 = (unint64_t *)&v128->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  Espresso::matrix_vector_mult_batched((uint64_t)&v125, (uint64_t)v124, v10, *(const float **)(v144 + 24), v10, *(float **)(v146 + 24), v9, 0.0);
  if (v49)
  {
    v52 = (unint64_t *)&v49->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v54 = v126;
  if (v126)
  {
    v55 = (unint64_t *)&v126->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v135;
  v123[0] = v134;
  v123[1] = v135;
  if (v135)
  {
    v58 = (unint64_t *)&v135->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v122[0] = 0;
  v122[1] = 0;
  Espresso::matrix_vector_mult_batched((uint64_t)v123, (uint64_t)v122, *(_DWORD *)(v143 + 16), *(const float **)(v143 + 24), v10, *(float **)(v146 + 24), v9, 1.0);
  if (v57)
  {
    v60 = (unint64_t *)&v57->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v62 = 0;
  v63 = v146;
  v64 = *(float **)(v146 + 24);
  v65 = *(int *)(v146 + 8);
  do
  {
    v65 *= *(int *)(v146 + 12 + v62);
    v62 += 4;
  }
  while (v62 != 12);
  v66 = *(_DWORD *)(a1 + 308);
  if (v66)
  {
    if (v66 == 1)
    {
      LODWORD(__p[0]) = 0;
      vDSP_vthr(v64, 1, (const float *)__p, v64, 1, v65);
    }
    else if (v66 == 2 && v65)
    {
      do
      {
        *v64 = 1.0 / (float)(expf(-*v64) + 1.0);
        ++v64;
        --v65;
      }
      while (v65);
    }
  }
  else
  {
    for (; v65; --v65)
    {
      *v64 = tanhf(*v64);
      ++v64;
    }
  }
  if (*(int *)(a1 + 328) < 1)
  {
    v83 = 0;
    v84 = *(int *)(v63 + 8);
    do
    {
      v84 *= *(int *)(v63 + 12 + v83);
      v83 += 4;
    }
    while (v83 != 12);
    memcpy(*(void **)(v141 + 24), *(const void **)(v63 + 24), 4 * v84);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "W_embedding_out");
    v118 = __p;
    v67 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), __p, (_OWORD **)&v118);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v120, *((void **)v67 + 7), *((std::__shared_weak_count **)v67 + 8));
    if (v137 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "b_embedding_out");
    v148 = __p;
    v68 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), __p, (_OWORD **)&v148);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v118, *((void **)v68 + 7), *((std::__shared_weak_count **)v68 + 8));
    if (v137 < 0)
      operator delete(__p[0]);
    v116 = v120;
    v117 = v121;
    if (v121)
    {
      v69 = (unint64_t *)&v121->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v71 = v119;
    v115[0] = v118;
    v115[1] = v119;
    if (v119)
    {
      v72 = (unint64_t *)&v119->__shared_owners_;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    Espresso::matrix_vector_mult_batched((uint64_t)&v116, (uint64_t)v115, v10, *(const float **)(v63 + 24), *(_DWORD *)(a1 + 328), *(float **)(v141 + 24), v9, 0.0);
    if (v71)
    {
      v74 = (unint64_t *)&v71->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v76 = v117;
    if (v117)
    {
      v77 = (unint64_t *)&v117->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = 0;
    v80 = *(float **)(v141 + 24);
    v81 = *(int *)(v141 + 8);
    do
    {
      v81 *= *(int *)(v141 + 12 + v79);
      v79 += 4;
    }
    while (v79 != 12);
    v82 = *(_DWORD *)(a1 + 308);
    if (v82)
    {
      if (v82 == 1)
      {
        LODWORD(__p[0]) = 0;
        vDSP_vthr(v80, 1, (const float *)__p, v80, 1, v81);
      }
      else if (v82 == 2 && v81)
      {
        do
        {
          *v80 = 1.0 / (float)(expf(-*v80) + 1.0);
          ++v80;
          --v81;
        }
        while (v81);
      }
    }
    else
    {
      for (; v81; --v81)
      {
        *v80 = tanhf(*v80);
        ++v80;
      }
    }
    v85 = v119;
    if (v119)
    {
      v86 = (unint64_t *)&v119->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v88 = v121;
    if (v121)
    {
      v89 = (unint64_t *)&v121->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
  }
  v91 = v128;
  if (v128)
  {
    v92 = (unint64_t *)&v128->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v135;
  if (v135)
  {
    v95 = (unint64_t *)&v135->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v139;
  if (v139)
  {
    v98 = (unint64_t *)&v139->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v142;
  if (v142)
  {
    v104 = (unint64_t *)&v142->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
  if (*((_QWORD *)&v143 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v145;
  if (v145)
  {
    v110 = (unint64_t *)&v145->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v147;
  if (v147)
  {
    v113 = (unint64_t *)&v147->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
}

